/*
Deployment script for EIDSS7_GG

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO

USE [$(DatabaseName)];


GO

PRINT N'Altering Procedure [dbo].[USP_ADMIN_DATAAUDITLOG_GETList]...';


GO

-- =============================================
-- Author:		Manickandan Govindarajan
-- Create date: 06/20/2022
-- Description:	Gets the audit event list for the given parameters
-- Manickandan Govidarajan 11/22/2022 - Added additional out columns
-- Manickandan Govindarajan 11/3/2022 - Updated condition
-- =============================================
ALTER PROCEDURE [dbo].[USP_ADMIN_DATAAUDITLOG_GETList]
	@languageId AS NVARCHAR(50),
	@startDate DateTime = NULL,
	@endDate DateTime = NULL,
	@idfUserId BIGINT = NULL,
	@idfSiteId BIGINT = NULL, 
	@idfActionId BIGINT = NULL, 
	@idfObjetType BIGINT = NULL, 
	@idfObjectId BIGINT =NULL,
	@SortColumn NVARCHAR(30) = 'TransactionDate',
	@SortOrder NVARCHAR(4) = 'DESC',
	@Page INT = 1,
	@PageSize INT = 10
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @firstRec INT;
	DECLARE @lastRec INT;

	BEGIN TRY
		SET @firstRec = (@Page-1)* @pagesize
		SET @lastRec = (@Page*@pageSize+1);


		WITH CTEResults AS
		(
			SELECT ROW_NUMBER() OVER ( ORDER BY
			CASE WHEN @sortColumn = 'TransactionDate' AND @SortOrder = 'ASC' THEN ae.datEnteringDate END ASC,
			CASE WHEN @sortColumn = 'TransactionDate' AND @SortOrder = 'DESC' THEN ae.datEnteringDate END DESC,
			CASE WHEN @sortColumn = 'siteName' AND @SortOrder = 'ASC' THEN ae.idfsSite   END ASC,
			CASE WHEN @sortColumn = 'siteName' AND @SortOrder = 'DESC' THEN ae.idfsSite END DESC,
			CASE WHEN @sortColumn = 'UserName' AND @SortOrder = 'ASC' THEN ae.idfUserID   END ASC,
			CASE WHEN @sortColumn = 'UserName' AND @SortOrder = 'DESC' THEN ae.idfUserID END DESC,
			CASE WHEN @sortColumn = 'ActionName' AND @SortOrder = 'ASC' THEN ae.idfsDataAuditEventType   END ASC,
			CASE WHEN @sortColumn = 'ActionName' AND @SortOrder = 'DESC' THEN ae.idfsDataAuditEventType END DESC,
			CASE WHEN @sortColumn = 'ObjectType' AND @SortOrder = 'ASC' THEN ae.idfsDataAuditObjectType  END ASC,
			CASE WHEN @sortColumn = 'ObjectType' AND @SortOrder = 'DESC' THEN ae.idfsDataAuditObjectType END DESC,
			CASE WHEN @sortColumn = 'StrObject' AND @SortOrder = 'ASC' THEN ae.strMainObject  END ASC,
			CASE WHEN @sortColumn = 'StrObject' AND @SortOrder = 'DESC' THEN ae.strMainObject END DESC
			)  AS ROWNUM,
					s.strSiteName siteName,
					ae.idfsSite siteId,
					ae.idfUserID userId,
					p.strFirstName userFirstName,
					p.strFamilyName userFamilyName,
					ae.datEnteringDate TransactionDate,
					aAction.name ActionName,
					ae.idfsDataAuditEventType actionTypeId,
					aObjectType.name ObjectType,
					ae.idfsDataAuditObjectType ObjectTypeId,
					ae.idfMainObjectTable ObjectTable,
					ae.idfMainObject ObjectId,
					ae.idfDataAuditEvent auditEventId,
					tt.strName tableName,
					ae.strMainObject,
					COUNT(*) OVER () AS TotalRowCount
				from tauDataAuditEvent ae
				INNER join tauTable tt on ae.idfMainObjectTable = tt.idfTable
				INNER JOIN dbo.FN_GBL_ReferenceRepair(@languageID, 19000016) aAction ON ae.idfsDataAuditEventType  = aAction.idfsReference
				INNER JOIN dbo.FN_GBL_ReferenceRepair(@languageID, 19000017) aObjectType ON ae.idfsDataAuditObjectType  = aObjectType.idfsReference
				INNER JOIN tstSite s ON ae.idfsSite  = s.idfsSite
				INNER JOIN tstUserTable u ON ae.idfUserID  = u.idfUserID
				INNER JOIN tlbPerson p on p.idfPerson = u.idfPerson
				where 
					(ae.idfsSite = @idfSiteId OR @idfSiteId IS NULL) 
					AND (ae.idfUserID = @idfUserId OR @idfUserId IS NULL) 
					AND (ae.idfsDataAuditEventType = @idfActionId OR @idfActionId IS NULL) 
					AND (ae.idfsDataAuditObjectType = @idfObjetType OR @idfObjetType IS NULL) 
					AND (ae.idfMainObject = @idfObjectId OR @idfObjectId IS NULL)
					AND
					((@startdate is null and @enddate is null)
						or
						(@startdate is null and @enddate is not null and cast(ae.datEnteringDate as date) <= cast(@enddate as date) )
						or
						(@startdate is not null and @enddate is null and cast(ae.datEnteringDate as date) >= cast(@startdate as date) )
						or
						(@startdate is not null and @enddate is not null and cast(ae.datEnteringDate as date) BETWEEN  cast(@startdate as date)  AND  cast(@enddate as date)))

					
					

		)
		SELECT 	auditEventId, 
				siteName,	
		        siteId,
			    userId,
				userFirstName,
				userFamilyName,
				TransactionDate,
				ActionName,
				actionTypeId,
				ObjectType,
				ObjectTypeId,
				ObjectTable,
				ObjectId,
				tableName,
				strMainObject,
				TotalRowCount,
			TotalPages = (TotalRowCount/@pageSize)+IIF(TotalRowCount%@pageSize>0,1,0),
			CurrentPage = @Page
		FROM CTEResults WHERE RowNum > @firstRec AND RowNum < @lastRec
		



END TRY

	BEGIN CATCH
		
		THROW;
	END CATCH;

	
END
GO
PRINT N'Altering Procedure [dbo].[USP_AGG_OBSERVATION_SET]...';


GO

--*************************************************************
-- Name 				: USP_AGG_OBSERVATION_SET
-- Description			: Saves observation with its flexible form template.
--          
-- Author               : Maheshwar Deo
-- Revision History
--		Name       Date       Change Detail
--Manickandan Govindarajan 12/06/2022 SAUC30 and 31
--
-- Testing code:
--*************************************************************
  
ALTER PROCEDURE [dbo].[USP_AGG_OBSERVATION_SET]
	(	 
	@idfObservation		BIGINT	--##PARAM @idfObservation Observation Id
	,@idfsFormTemplate	BIGINT	--##PARAM @idfsFormTemplate Id of flexible form template (reference to ffFormTemplate)
	,@idfDataAuditEvent BIGINT
	)
AS

	declare @idfObjectTable_tlbObservationTable bigint =75640000000;
	declare @idfObjectTable_tlbObservation bigint =80060000000;
	declare @idfsFormTemplateValue bigint =80070000000;

	DECLARE @tlbObservation_BeforeEdit TABLE
	(
		idfObservation bigint,
		idfsFormTemplate bigint
	)
	DECLARE @tlbObservation_AfterEdit TABLE
	(
		idfObservation bigint,
		idfsFormTemplate bigint	)

	--Data Audit--



BEGIN

	BEGIN TRY  	

		IF (@idfObservation IS NULL) RETURN;

		-- Post tlbObservation
		IF EXISTS (SELECT * FROM tlbObservation WHERE idfObservation = @idfObservation)
			BEGIN
			
				insert into @tlbObservation_BeforeEdit (idfObservation,idfsFormTemplate)
				select idfObservation, idfsFormTemplate from tlbObservation where idfObservation =@idfObservation;

				UPDATE	
					tlbObservation
				SET		
					idfsFormTemplate = @idfsFormTemplate
				WHERE	
					idfObservation = @idfObservation
					AND 
					ISNULL(idfsFormTemplate,0) != ISNULL(@idfsFormTemplate,0)

				--Data Audit--
				insert into @tlbObservation_AfterEdit (idfObservation,idfsFormTemplate)
				select idfObservation, idfsFormTemplate from tlbObservation where idfObservation =@idfObservation;

				insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn, 
					idfObject, idfObjectDetail, strOldValue, strNewValue)
				select @idfDataAuditEvent,@idfObjectTable_tlbObservationTable,80070000000,
					a.idfObservation, null,a.idfsFormTemplate, b.idfsFormTemplate
				from @tlbObservation_BeforeEdit a  inner join @tlbObservation_AfterEdit b on a.idfObservation = b.idfObservation
				where (a.idfsFormTemplate <> b.idfsFormTemplate) 
					or(a.idfsFormTemplate is not null and b.idfsFormTemplate is null)
					or(a.idfsFormTemplate is null and b.idfsFormTemplate is not null)
				--Data Audit--
					
			END
		ELSE 
			BEGIN
				INSERT INTO	tlbObservation
					(	
					idfObservation,
					idfsFormTemplate
					)
				VALUES
					(	
					@idfObservation,
					@idfsFormTemplate
					)
				
				--Data Audit--
				INSERT INTO tauDataAuditDetailCreate(idfDataAuditEvent, idfObjectTable, idfObject )
				values ( @idfDataAuditEvent, @idfObjectTable_tlbObservationTable, @idfObservation)
				--Data Audit--

			END
	END TRY  

	BEGIN CATCH 

		DECLARE @ErrorMessage NVARCHAR(4000);  
		DECLARE @ErrorSeverity INT;  
		DECLARE @ErrorState INT;  

		SELECT   
			@ErrorMessage = ERROR_MESSAGE()
			,@ErrorSeverity = ERROR_SEVERITY()
			,@ErrorState = ERROR_STATE()

		RAISERROR 
			(
			@ErrorMessage,	-- Message text.  
			@ErrorSeverity, -- Severity.  
			@ErrorState		-- State.  
			); 
	END CATCH

END
GO
PRINT N'Altering Procedure [dbo].[USP_AGG_REPORT_SET]...';


GO
-- ================================================================================================
-- Name: USP_AGG_REPORT_SET
--
-- Description: Inserts and updates human and veterinary aggregate disease reports, and veterinary 
-- aggregate action report records.
--          
-- Author: Stephen Long
-- Revision History:
--
-- Name                 Date       Change Detail
-- -------------------- ---------- ---------------------------------------------------------------
-- Stephen Long         05/17/2022 Initial release.
-- Stephen Long         07/06/2022 Updates for site alerts to call new stored procedure.
-- Manickandan Govindarajan 2/06/2022 Data Audit SAUC30 and 31
--
-- Testing code:
--
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_AGG_REPORT_SET]
    @AggregateReportID BIGINT = NULL,
    @EIDSSAggregateReportID NVARCHAR(200) = NULL,
    @AggregateReportTypeID BIGINT,
    @GeographicalAdministrativeUnitID BIGINT = NULL,   -- Geographical Statistical Area Type
    @OrganizationalAdministrativeUnitID BIGINT = NULL, -- Organizational Statistical Area Type
    @ReceivedByOrganizationID BIGINT,
    @ReceivedByPersonID BIGINT,
    @SentByOrganizationID BIGINT,
    @SentByPersonID BIGINT,
    @EnteredByOrganizationID BIGINT,
    @EnteredByPersonID BIGINT,
    @CaseObservationID BIGINT = NULL,
    @CaseObservationFormTemplateID BIGINT = NULL,
    @DiagnosticObservationID BIGINT = NULL,
    @DiagnosticObservationFormTemplateID BIGINT = NULL,
    @ProphylacticObservationID BIGINT = NULL,
    @ProphylacticObservationFormTemplateID BIGINT = NULL,
    @SanitaryObservationID BIGINT = NULL,
    @SanitaryObservationFormTemplateID BIGINT = NULL,
    @CaseVersion BIGINT = NULL,
    @DiagnosticVersion BIGINT = NULL,
    @ProphylacticVersion BIGINT = NULL,
    @SanitaryVersion BIGINT = NULL,
    @ReceivedByDate DATETIME,
    @SentByDate DATETIME,
    @EnteredByDate DATETIME,
    @StartDate DATETIME,
    @FinishDate DATETIME,
    @SiteID BIGINT,
    @AuditUserName NVARCHAR(200),
    @UserID BIGINT,
    @Events NVARCHAR(MAX) = NULL
AS
DECLARE @ReturnCode INT = 0,
        @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
        @RowID BIGINT,
        @EventId BIGINT,
        @EventTypeId BIGINT = NULL,
        @EventSiteId BIGINT = NULL,
        @EventObjectId BIGINT = NULL,
        @EventUserId BIGINT = NULL,
        @EventDiseaseId BIGINT = NULL,
        @EventLocationId BIGINT = NULL,
        @EventInformationString NVARCHAR(MAX) = NULL,
        @EventLoginSiteId BIGINT = NULL;
DECLARE @SuppressSelect TABLE
(
    ReturnCode INT,
    ReturnMessage VARCHAR(200)
);
DECLARE @EventsTemp TABLE
(
    EventId BIGINT NOT NULL,
    EventTypeId BIGINT NULL,
    UserId BIGINT NULL,
    SiteId BIGINT NULL,
    LoginSiteId BIGINT NULL,
    ObjectId BIGINT NULL,
    DiseaseId BIGINT NULL,
    LocationId BIGINT NULL,
    InformationString NVARCHAR(MAX) NULL
);

--dataAudit
declare @idfsDataAuditEventType bigint;
declare @idfsObjectType bigint ;
declare @idfObject bigint;
declare @idfObjectTable_tlbAggrCase bigint =75420000000;
declare @idfDataAuditEvent bigint;
declare @idfUserID bigint =@UserID;
declare @idfSiteId bigint =@SiteID;
declare @CaseObservation_table bigint;


DECLARE @tlbAggrCase_BeforeEdit TABLE
	(
	  datEnteredByDate datetime,
	  datFinishDate datetime,
	  datReceivedByDate datetime,
	  datSentByDate datetime,
      datStartDate datetime,
      idfAggrCase bigint,
      idfsAggrCaseType bigint,
      idfsAdministrativeUnit bigint,
      idfReceivedByOffice bigint,
      idfReceivedByPerson bigint,
      idfSentByOffice bigint,
	  idfSentByPerson bigint,
	  idfEnteredByOffice bigint,
	  idfEnteredByPerson bigint,
	  idfCaseObservation bigint,
	  idfDiagnosticObservation bigint,
	  idfProphylacticObservation bigint,
	  idfSanitaryObservation bigint,
	  idfVersion bigint,
	  idfDiagnosticVersion bigint,
	  idfProphylacticVersion bigint,
	  idfSanitaryVersion bigint,
	  strCaseID varchar(200)
	);
	DECLARE @tlbAggrCase_AfterEdit TABLE
	(
	  datEnteredByDate datetime,
	  datFinishDate datetime,
	  datReceivedByDate datetime,
	  datSentByDate datetime,
      datStartDate datetime,
      idfAggrCase bigint,
      idfsAggrCaseType bigint,
      idfsAdministrativeUnit bigint,
      idfReceivedByOffice bigint,
      idfReceivedByPerson bigint,
      idfSentByOffice bigint,
	  idfSentByPerson bigint,
	  idfEnteredByOffice bigint,
	  idfEnteredByPerson bigint,
	  idfCaseObservation bigint,
	  idfDiagnosticObservation bigint,
	  idfProphylacticObservation bigint,
	  idfSanitaryObservation bigint,
	  idfVersion bigint,
	  idfDiagnosticVersion bigint,
	  idfProphylacticVersion bigint,
	  idfSanitaryVersion bigint,
	  strCaseID varchar(200)
	);
--data audit

BEGIN
    BEGIN TRY
        BEGIN TRANSACTION

		--Data Audit
		if @AggregateReportTypeID = 10102001
			set @idfsObjectType=10017006;
		ELSE IF @AggregateReportTypeID = 10102003
			set @idfsObjectType=10017005;

		if (@AggregateReportID = null)
		begin
			set  @idfsDataAuditEventType=10016001;
			set @idfObject=null;
		end
		else 
		begin
			set  @idfsDataAuditEventType=10016003;
			set @idfObject=@AggregateReportID;
		end
		--Data Audit

        INSERT INTO @EventsTemp
        SELECT *
        FROM
            OPENJSON(@Events)
            WITH
            (
                EventId BIGINT,
                EventTypeId BIGINT,
                UserId BIGINT,
                SiteId BIGINT,
                LoginSiteId BIGINT,
                ObjectId BIGINT,
                DiseaseId BIGINT,
                LocationId BIGINT,
                InformationString NVARCHAR(MAX)
            );

        IF EXISTS
        (
            SELECT *
            FROM dbo.tlbAggrCase
            WHERE idfAggrCase = @AggregateReportID
        )
        BEGIN

			--Data Audit
				-- insert record into tauDataAuditEvent
				INSERT INTO @SuppressSelect
				EXEC USSP_GBL_DataAuditEvent_GET @idfUserID,@idfSiteId, @idfsDataAuditEventType,@idfsObjectType,@idfObject, @idfObjectTable_tlbAggrCase, @idfDataAuditEvent OUTPUT
			--Data Audit

            IF NOT @CaseObservationID IS NULL
			BEGIN
				INSERT INTO @SuppressSelect
                EXEC dbo.USP_AGG_OBSERVATION_SET @CaseObservationID,
                                                 @CaseObservationFormTemplateID,@idfDataAuditEvent;
			END

            IF NOT @DiagnosticObservationID IS NULL
			BEGIN
				INSERT INTO @SuppressSelect
                EXEC dbo.USP_AGG_OBSERVATION_SET @DiagnosticObservationID,
                                                 @DiagnosticObservationFormTemplateID,@idfDataAuditEvent;
			END

            IF NOT @ProphylacticObservationID IS NULL
			BEGIN
				INSERT INTO @SuppressSelect
                EXEC dbo.USP_AGG_OBSERVATION_SET @ProphylacticObservationID,
                                                 @ProphylacticObservationFormTemplateID,@idfDataAuditEvent;
			END

            IF NOT @SanitaryObservationID IS NULL
			BEGIN
				INSERT INTO @SuppressSelect
                EXEC dbo.USP_AGG_OBSERVATION_SET @SanitaryObservationID,
                                                 @SanitaryObservationFormTemplateID,@idfDataAuditEvent;
			END


			insert into @tlbAggrCase_BeforeEdit (datEnteredByDate,datFinishDate,datReceivedByDate,datSentByDate,datStartDate,idfAggrCase,idfsAggrCaseType,idfsAdministrativeUnit,idfReceivedByOffice,idfReceivedByPerson,
				idfSentByOffice,idfSentByPerson,idfEnteredByOffice,idfEnteredByPerson,idfCaseObservation,idfDiagnosticObservation,idfProphylacticObservation,idfSanitaryObservation,idfVersion,idfDiagnosticVersion,
				idfProphylacticVersion,idfSanitaryVersion,strCaseID)
			select  datEnteredByDate,datFinishDate,datReceivedByDate,datSentByDate,datStartDate,idfAggrCase,idfsAggrCaseType,idfsAdministrativeUnit,idfReceivedByOffice,idfReceivedByPerson,
				idfSentByOffice,idfSentByPerson,idfEnteredByOffice,idfEnteredByPerson,idfCaseObservation,idfDiagnosticObservation,idfProphylacticObservation,idfSanitaryObservation,idfVersion,idfDiagnosticVersion,
				idfProphylacticVersion,idfSanitaryVersion,strCaseID from tlbAggrCase where idfAggrCase =@AggregateReportID;

			
            UPDATE dbo.tlbAggrCase
            SET idfsAggrCaseType = @AggregateReportTypeID,
                idfsAdministrativeUnit = @GeographicalAdministrativeUnitID,
                idfOffice = @OrganizationalAdministrativeUnitID,
                idfReceivedByOffice = @ReceivedByOrganizationID,
                idfReceivedByPerson = @ReceivedByPersonID,
                idfSentByOffice = @SentByOrganizationID,
                idfSentByPerson = @SentByPersonID,
                idfCaseObservation = @CaseObservationID,
                idfDiagnosticObservation = @DiagnosticObservationID,
                idfProphylacticObservation = @ProphylacticObservationID,
                idfSanitaryObservation = @SanitaryObservationID,
                idfVersion = @CaseVersion,
                idfDiagnosticVersion = @DiagnosticVersion,
                idfProphylacticVersion = @ProphylacticVersion,
                idfSanitaryVersion = @SanitaryVersion,
                datReceivedByDate = @ReceivedByDate,
                datSentByDate = @SentByDate,
                datStartDate = @StartDate,
                datFinishDate = @FinishDate,
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUserName,
                idfsSite = @SiteID
            WHERE idfAggrCase = @AggregateReportID;

			--Data Audit
			insert into @tlbAggrCase_AfterEdit (datEnteredByDate,datFinishDate,datReceivedByDate,datSentByDate,datStartDate,idfAggrCase,idfsAggrCaseType,idfsAdministrativeUnit,idfReceivedByOffice,idfReceivedByPerson,
				idfSentByOffice,idfSentByPerson,idfEnteredByOffice,idfEnteredByPerson,idfCaseObservation,idfDiagnosticObservation,idfProphylacticObservation,idfSanitaryObservation,idfVersion,idfDiagnosticVersion,
				idfProphylacticVersion,idfSanitaryVersion,strCaseID)
			select  datEnteredByDate,datFinishDate,datReceivedByDate,datSentByDate,datStartDate,idfAggrCase,idfsAggrCaseType,idfsAdministrativeUnit,idfReceivedByOffice,idfReceivedByPerson,
				idfSentByOffice,idfSentByPerson,idfEnteredByOffice,idfEnteredByPerson,idfCaseObservation,idfDiagnosticObservation,idfProphylacticObservation,idfSanitaryObservation,idfVersion,idfDiagnosticVersion,
				idfProphylacticVersion,idfSanitaryVersion,strCaseID from tlbAggrCase where idfAggrCase =@AggregateReportID;

			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, idfObjectTable, idfColumn, 
				idfObject, idfObjectDetail, 
				strOldValue, strNewValue)
			select @idfDataAuditEvent,@idfObjectTable_tlbAggrCase, 78200000000,
				a.idfAggrCase,null,
				a.datEnteredByDate,b.datEnteredByDate 
			from @tlbAggrCase_BeforeEdit a  inner join @tlbAggrCase_AfterEdit b on a.idfAggrCase = b.idfAggrCase
			where (a.datEnteredByDate <> b.datEnteredByDate) 
				or(a.datEnteredByDate is not null and b.datEnteredByDate is null)
				or(a.datEnteredByDate is null and b.datEnteredByDate is not null)

			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, idfObjectTable, idfColumn, 
				idfObject, idfObjectDetail, 
				strOldValue, strNewValue)
			select @idfDataAuditEvent,@idfObjectTable_tlbAggrCase, 78210000000,
				a.idfAggrCase,null,
				a.datFinishDate,b.datFinishDate 
			from @tlbAggrCase_BeforeEdit a  inner join @tlbAggrCase_AfterEdit b on a.idfAggrCase = b.idfAggrCase
			where (a.datFinishDate <> b.datFinishDate) 
				or(a.datFinishDate is not null and b.datFinishDate is null)
				or(a.datFinishDate is null and b.datFinishDate is not null)

			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, idfObjectTable, idfColumn, 
				idfObject, idfObjectDetail, 
				strOldValue, strNewValue)
			select @idfDataAuditEvent,@idfObjectTable_tlbAggrCase, 78220000000,
				a.idfAggrCase,null,
				a.datReceivedByDate,b.datReceivedByDate 
			from @tlbAggrCase_BeforeEdit a  inner join @tlbAggrCase_AfterEdit b on a.idfAggrCase = b.idfAggrCase
			where (a.datReceivedByDate <> b.datReceivedByDate) 
				or(a.datReceivedByDate is not null and b.datReceivedByDate is null)
				or(a.datReceivedByDate is null and b.datReceivedByDate is not null)

			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, idfObjectTable, idfColumn, 
				idfObject, idfObjectDetail, 
				strOldValue, strNewValue)
			select @idfDataAuditEvent,@idfObjectTable_tlbAggrCase, 78230000000,
				a.idfAggrCase,null,
				a.datSentByDate,b.datSentByDate 
			from @tlbAggrCase_BeforeEdit a  inner join @tlbAggrCase_AfterEdit b on a.idfAggrCase = b.idfAggrCase
			where (a.datSentByDate <> b.datSentByDate) 
				or(a.datSentByDate is not null and b.datSentByDate is null)
				or(a.datSentByDate is null and b.datSentByDate is not null)

			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, idfObjectTable, idfColumn, 
				idfObject, idfObjectDetail, 
				strOldValue, strNewValue)
			select @idfDataAuditEvent,@idfObjectTable_tlbAggrCase, 78240000000,
				a.idfAggrCase,null,
				a.datStartDate,b.datStartDate 
			from @tlbAggrCase_BeforeEdit a  inner join @tlbAggrCase_AfterEdit b on a.idfAggrCase = b.idfAggrCase
			where (a.datStartDate <> b.datStartDate) 
				or(a.datStartDate is not null and b.datStartDate is null)
				or(a.datStartDate is null and b.datStartDate is not null)

			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, idfObjectTable, idfColumn, 
				idfObject, idfObjectDetail, 
				strOldValue, strNewValue)
			select @idfDataAuditEvent,@idfObjectTable_tlbAggrCase, 78260000000,
				a.idfAggrCase,null,
				a.idfsAggrCaseType,b.idfsAggrCaseType 
			from @tlbAggrCase_BeforeEdit a  inner join @tlbAggrCase_AfterEdit b on a.idfAggrCase = b.idfAggrCase
			where (a.idfsAggrCaseType <> b.idfsAggrCaseType) 
				or(a.idfsAggrCaseType is not null and b.idfsAggrCaseType is null)
				or(a.idfsAggrCaseType is null and b.idfsAggrCaseType is not null)

			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, idfObjectTable, idfColumn, 
				idfObject, idfObjectDetail, 
				strOldValue, strNewValue)
			select @idfDataAuditEvent,@idfObjectTable_tlbAggrCase, 4577520000000,
				a.idfAggrCase,null,
				a.idfsAdministrativeUnit,b.idfsAdministrativeUnit 
			from @tlbAggrCase_BeforeEdit a  inner join @tlbAggrCase_AfterEdit b on a.idfAggrCase = b.idfAggrCase
			where (a.idfsAdministrativeUnit <> b.idfsAdministrativeUnit) 
				or(a.idfsAdministrativeUnit is not null and b.idfsAdministrativeUnit is null)
				or(a.idfsAdministrativeUnit is null and b.idfsAdministrativeUnit is not null)

			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, idfObjectTable, idfColumn, 
				idfObject, idfObjectDetail, 
				strOldValue, strNewValue)
			select @idfDataAuditEvent,@idfObjectTable_tlbAggrCase, 4577530000000,
				a.idfAggrCase,null,
				a.idfReceivedByOffice,b.idfReceivedByOffice 
			from @tlbAggrCase_BeforeEdit a  inner join @tlbAggrCase_AfterEdit b on a.idfAggrCase = b.idfAggrCase
			where (a.idfReceivedByOffice <> b.idfReceivedByOffice) 
				or(a.idfReceivedByOffice is not null and b.idfReceivedByOffice is null)
				or(a.idfReceivedByOffice is null and b.idfReceivedByOffice is not null)

			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, idfObjectTable, idfColumn, 
				idfObject, idfObjectDetail, 
				strOldValue, strNewValue)
			select @idfDataAuditEvent,@idfObjectTable_tlbAggrCase, 4577540000000,
				a.idfAggrCase,null,
				a.idfReceivedByPerson,b.idfReceivedByPerson 
			from @tlbAggrCase_BeforeEdit a  inner join @tlbAggrCase_AfterEdit b on a.idfAggrCase = b.idfAggrCase
			where (a.idfReceivedByPerson <> b.idfReceivedByPerson) 
				or(a.idfReceivedByPerson is not null and b.idfReceivedByPerson is null)
				or(a.idfReceivedByPerson is null and b.idfReceivedByPerson is not null)

			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, idfObjectTable, idfColumn, 
				idfObject, idfObjectDetail, 
				strOldValue, strNewValue)
			select @idfDataAuditEvent,@idfObjectTable_tlbAggrCase, 4577550000000,
				a.idfAggrCase,null,
				a.idfSentByOffice,b.idfSentByOffice 
			from @tlbAggrCase_BeforeEdit a  inner join @tlbAggrCase_AfterEdit b on a.idfAggrCase = b.idfAggrCase
			where (a.idfSentByOffice <> b.idfSentByOffice) 
				or(a.idfSentByOffice is not null and b.idfSentByOffice is null)
				or(a.idfSentByOffice is null and b.idfSentByOffice is not null)

			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, idfObjectTable, idfColumn, 
				idfObject, idfObjectDetail, 
				strOldValue, strNewValue)
			select @idfDataAuditEvent,@idfObjectTable_tlbAggrCase, 4577560000000,
				a.idfAggrCase,null,
				a.idfSentByPerson,b.idfSentByPerson 
			from @tlbAggrCase_BeforeEdit a  inner join @tlbAggrCase_AfterEdit b on a.idfAggrCase = b.idfAggrCase
			where (a.idfSentByPerson <> b.idfSentByPerson) 
				or(a.idfSentByPerson is not null and b.idfSentByPerson is null)
				or(a.idfSentByPerson is null and b.idfSentByPerson is not null)

			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, idfObjectTable, idfColumn, 
				idfObject, idfObjectDetail, 
				strOldValue, strNewValue)
			select @idfDataAuditEvent,@idfObjectTable_tlbAggrCase, 4577570000000,
				a.idfAggrCase,null,
				a.idfEnteredByOffice,b.idfEnteredByOffice 
			from @tlbAggrCase_BeforeEdit a  inner join @tlbAggrCase_AfterEdit b on a.idfAggrCase = b.idfAggrCase
			where (a.idfEnteredByOffice <> b.idfEnteredByOffice) 
				or(a.idfEnteredByOffice is not null and b.idfEnteredByOffice is null)
				or(a.idfEnteredByOffice is null and b.idfEnteredByOffice is not null)

			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, idfObjectTable, idfColumn, 
				idfObject, idfObjectDetail, 
				strOldValue, strNewValue)
			select @idfDataAuditEvent,@idfObjectTable_tlbAggrCase, 4577580000000,
				a.idfAggrCase,null,
				a.idfEnteredByPerson,b.idfEnteredByPerson 
			from @tlbAggrCase_BeforeEdit a  inner join @tlbAggrCase_AfterEdit b on a.idfAggrCase = b.idfAggrCase
			where (a.idfEnteredByPerson <> b.idfEnteredByPerson) 
				or(a.idfEnteredByPerson is not null and b.idfEnteredByPerson is null)
				or(a.idfEnteredByPerson is null and b.idfEnteredByPerson is not null)

			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, idfObjectTable, idfColumn, 
				idfObject, idfObjectDetail, 
				strOldValue, strNewValue)
			select @idfDataAuditEvent,@idfObjectTable_tlbAggrCase, 4577590000000,
				a.idfAggrCase,null,
				a.idfCaseObservation,b.idfCaseObservation 
			from @tlbAggrCase_BeforeEdit a  inner join @tlbAggrCase_AfterEdit b on a.idfAggrCase = b.idfAggrCase
			where (a.idfCaseObservation <> b.idfCaseObservation) 
				or(a.idfCaseObservation is not null and b.idfCaseObservation is null)
				or(a.idfCaseObservation is null and b.idfCaseObservation is not null)

			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, idfObjectTable, idfColumn, 
				idfObject, idfObjectDetail, 
				strOldValue, strNewValue)
			select @idfDataAuditEvent,@idfObjectTable_tlbAggrCase, 4577600000000,
				a.idfAggrCase,null,
				a.idfDiagnosticObservation,b.idfDiagnosticObservation 
			from @tlbAggrCase_BeforeEdit a  inner join @tlbAggrCase_AfterEdit b on a.idfAggrCase = b.idfAggrCase
			where (a.idfDiagnosticObservation <> b.idfDiagnosticObservation) 
				or(a.idfDiagnosticObservation is not null and b.idfDiagnosticObservation is null)
				or(a.idfDiagnosticObservation is null and b.idfDiagnosticObservation is not null)

			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, idfObjectTable, idfColumn, 
				idfObject, idfObjectDetail, 
				strOldValue, strNewValue)
			select @idfDataAuditEvent,@idfObjectTable_tlbAggrCase, 4577610000000,
				a.idfAggrCase,null,
				a.idfProphylacticObservation,b.idfProphylacticObservation 
			from @tlbAggrCase_BeforeEdit a  inner join @tlbAggrCase_AfterEdit b on a.idfAggrCase = b.idfAggrCase
			where (a.idfProphylacticObservation <> b.idfProphylacticObservation) 
				or(a.idfProphylacticObservation is not null and b.idfProphylacticObservation is null)
				or(a.idfProphylacticObservation is null and b.idfProphylacticObservation is not null)

			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, idfObjectTable, idfColumn, 
				idfObject, idfObjectDetail, 
				strOldValue, strNewValue)
			select @idfDataAuditEvent,@idfObjectTable_tlbAggrCase, 4577620000000,
				a.idfAggrCase,null,
				a.idfSanitaryObservation,b.idfSanitaryObservation 
			from @tlbAggrCase_BeforeEdit a  inner join @tlbAggrCase_AfterEdit b on a.idfAggrCase = b.idfAggrCase
			where (a.idfSanitaryObservation <> b.idfSanitaryObservation) 
				or(a.idfSanitaryObservation is not null and b.idfSanitaryObservation is null)
				or(a.idfSanitaryObservation is null and b.idfSanitaryObservation is not null)

			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, idfObjectTable, idfColumn, 
				idfObject, idfObjectDetail, 
				strOldValue, strNewValue)
			select @idfDataAuditEvent,@idfObjectTable_tlbAggrCase, 4577630000000,
				a.idfAggrCase,null,
				a.idfVersion,b.idfVersion 
			from @tlbAggrCase_BeforeEdit a  inner join @tlbAggrCase_AfterEdit b on a.idfAggrCase = b.idfAggrCase
			where (a.idfVersion <> b.idfVersion) 
				or(a.idfVersion is not null and b.idfVersion is null)
				or(a.idfVersion is null and b.idfVersion is not null)

			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, idfObjectTable, idfColumn, 
				idfObject, idfObjectDetail, 
				strOldValue, strNewValue)
			select @idfDataAuditEvent,@idfObjectTable_tlbAggrCase, 4577640000000,
				a.idfAggrCase,null,
				a.idfDiagnosticVersion,b.idfDiagnosticVersion 
			from @tlbAggrCase_BeforeEdit a  inner join @tlbAggrCase_AfterEdit b on a.idfAggrCase = b.idfAggrCase
			where (a.idfDiagnosticVersion <> b.idfDiagnosticVersion) 
				or(a.idfDiagnosticVersion is not null and b.idfDiagnosticVersion is null)
				or(a.idfDiagnosticVersion is null and b.idfDiagnosticVersion is not null)

			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, idfObjectTable, idfColumn, 
				idfObject, idfObjectDetail, 
				strOldValue, strNewValue)
			select @idfDataAuditEvent,@idfObjectTable_tlbAggrCase, 4577650000000,
				a.idfAggrCase,null,
				a.idfProphylacticVersion,b.idfProphylacticVersion 
			from @tlbAggrCase_BeforeEdit a  inner join @tlbAggrCase_AfterEdit b on a.idfAggrCase = b.idfAggrCase
			where (a.idfProphylacticVersion <> b.idfProphylacticVersion) 
				or(a.idfProphylacticVersion is not null and b.idfProphylacticVersion is null)
				or(a.idfProphylacticVersion is null and b.idfProphylacticVersion is not null)

			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, idfObjectTable, idfColumn, 
				idfObject, idfObjectDetail, 
				strOldValue, strNewValue)
			select @idfDataAuditEvent,@idfObjectTable_tlbAggrCase, 4577660000000,
				a.idfAggrCase,null,
				a.idfSanitaryVersion,b.idfSanitaryVersion 
			from @tlbAggrCase_BeforeEdit a  inner join @tlbAggrCase_AfterEdit b on a.idfAggrCase = b.idfAggrCase
			where (a.idfSanitaryVersion <> b.idfSanitaryVersion) 
				or(a.idfSanitaryVersion is not null and b.idfSanitaryVersion is null)
				or(a.idfSanitaryVersion is null and b.idfSanitaryVersion is not null)

			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, idfObjectTable, idfColumn, 
				idfObject, idfObjectDetail, 
				strOldValue, strNewValue)
			select @idfDataAuditEvent,@idfObjectTable_tlbAggrCase, 4577670000000,
				a.idfAggrCase,null,
				a.strCaseID,b.strCaseID 
			from @tlbAggrCase_BeforeEdit a  inner join @tlbAggrCase_AfterEdit b on a.idfAggrCase = b.idfAggrCase
			where (a.strCaseID <> b.strCaseID) 
				or(a.strCaseID is not null and b.strCaseID is null)
				or(a.strCaseID is null and b.strCaseID is not null)

			--Data Audit



        END
        ELSE
        BEGIN
            INSERT INTO @SuppressSelect
            EXEC dbo.USP_GBL_NEXTKEYID_GET 'tlbAggrCase', @AggregateReportID OUTPUT;

            IF ISNULL(@EIDSSAggregateReportID, N'') = N''
               OR LEFT(ISNULL(@EIDSSAggregateReportID, N''), 4) = '(new'
            BEGIN
                DECLARE @ObjectName NVARCHAR(600);

                SET @ObjectName = CASE @AggregateReportTypeID
                                      WHEN 10102001 THEN
                                          'Human Aggregate Disease Report' --tstNextNumbers.idfsNumberName = 10057001
                                      WHEN 10102002 THEN
                                          'Vet Aggregate Disease Report'   --tstNextNumbers.idfsNumberName = 10057003
                                      WHEN 10102003 THEN
                                          'Vet Aggregate Action'           --tstNextNumbers.idfsNumberName = 10057002
                                  END;

                INSERT INTO @SuppressSelect
                EXEC dbo.USP_GBL_NextNumber_GET @ObjectName,
                                                @EIDSSAggregateReportID OUTPUT,
                                                NULL;
            END

			--Data Audit
				-- insert record into tauDataAuditEvent
				INSERT INTO @SuppressSelect
				EXEC USSP_GBL_DataAuditEvent_GET @idfUserID,@idfSiteId, @idfsDataAuditEventType,@idfsObjectType,@idfObject, @idfObjectTable_tlbAggrCase, @idfDataAuditEvent OUTPUT
			--Data Audit


            IF NOT @CaseObservationID IS NULL
			BEGIN
				INSERT INTO @SuppressSelect
                EXEC dbo.USP_AGG_OBSERVATION_SET @CaseObservationID,
                                                 @CaseObservationFormTemplateID,idfDataAuditEvent;
			END
            IF NOT @DiagnosticObservationID IS NULL
			BEGIN
				INSERT INTO @SuppressSelect
                EXEC dbo.USP_AGG_OBSERVATION_SET @DiagnosticObservationID,
                                                 @DiagnosticObservationFormTemplateID,@idfDataAuditEvent;
			END
            IF NOT @ProphylacticObservationID IS NULL
			BEGIN
				INSERT INTO @SuppressSelect
                EXEC dbo.USP_AGG_OBSERVATION_SET @ProphylacticObservationID,
                                                 @ProphylacticObservationFormTemplateID,@idfDataAuditEvent;
			END
            IF NOT @SanitaryObservationID IS NULL
			BEGIN
				INSERT INTO @SuppressSelect
                EXEC dbo.USP_AGG_OBSERVATION_SET @SanitaryObservationID,
                                                 @SanitaryObservationFormTemplateID,@idfDataAuditEvent;
			END
            DECLARE @MatrixTypeID BIGINT;
            SET @MatrixTypeID = CASE @AggregateReportTypeID
                                    WHEN 10102001 -- Human Aggregate Disease Report
            THEN
                                        71190000000 --tstNextNumbers.idfsNumberName = 10057001
                                    WHEN 10102002 -- Veterinary Aggregate Disease Report
            THEN
                                        71090000000 --tstNextNumbers.idfsNumberName = 10057003
                                END;

            INSERT INTO dbo.tlbAggrCase
            (
                idfAggrCase,
                idfsAggrCaseType,
                idfsAdministrativeUnit,
                idfOffice,
                idfReceivedByOffice,
                idfReceivedByPerson,
                idfSentByOffice,
                idfSentByPerson,
                idfEnteredByOffice,
                idfEnteredByPerson,
                idfCaseObservation,
                idfDiagnosticObservation,
                idfProphylacticObservation,
                idfSanitaryObservation,
                idfVersion,
                idfDiagnosticVersion,
                idfProphylacticVersion,
                idfSanitaryVersion,
                datReceivedByDate,
                datSentByDate,
                datEnteredByDate,
                datStartDate,
                datFinishDate,
                strCaseID,
                idfsSite,
                AuditCreateDTM,
                AuditCreateUser,
                SourceSystemKeyValue,
                SourceSystemNameID
            )
            VALUES
            (@AggregateReportID,
             @AggregateReportTypeID,
             @GeographicalAdministrativeUnitID,
             @OrganizationalAdministrativeUnitID,
             @ReceivedByOrganizationID,
             @ReceivedByPersonID,
             @SentByOrganizationID,
             @SentByPersonID,
             @EnteredByOrganizationID,
             @EnteredByPersonID,
             @CaseObservationID,
             @DiagnosticObservationID,
             @ProphylacticObservationID,
             @SanitaryObservationID,
             @CaseVersion,
             @DiagnosticVersion,
             @ProphylacticVersion,
             @SanitaryVersion,
             @ReceivedByDate,
             @SentByDate,
             @EnteredByDate,
             @StartDate,
             @FinishDate,
             @EIDSSAggregateReportID,
             @SiteID,
             GETDATE(),
             @AuditUserName,
             '[{"idfAggrCase":' + CAST(@AggregateReportID AS NVARCHAR(300)) + '}]',
             10519001
            );

			INSERT INTO tauDataAuditDetailCreate(idfDataAuditEvent, idfObjectTable, idfObject )
				values ( @idfDataAuditEvent, @idfObjectTable_tlbAggrCase, @AggregateReportID)
			--Data Audit--


            UPDATE @EventsTemp
            SET ObjectId = @AggregateReportID
            WHERE ObjectId = 0;
        END

        WHILE EXISTS (SELECT * FROM @EventsTemp)
        BEGIN
            SELECT TOP 1
                @EventId = EventId,
                @EventTypeId = EventTypeId,
                @EventUserId = UserId,
                @EventObjectId = ObjectId,
                @EventSiteId = SiteId,
                @EventDiseaseId = DiseaseId,
                @EventLocationId = LocationId,
                @EventInformationString = InformationString,
                @EventLoginSiteId = LoginSiteId
            FROM @EventsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_ADMIN_EVENT_SET @EventId,
                                            @EventTypeId,
                                            @EventUserId,
                                            @EventObjectId,
                                            @EventDiseaseId,
                                            @EventSiteId,
                                            @EventInformationString,
                                            @EventLoginSiteId,
                                            @EventLocationId,
                                            @AuditUserName;

            DELETE FROM @EventsTemp
            WHERE EventId = @EventId;
        END;

        IF @@TRANCOUNT > 0
            COMMIT;

        SELECT @ReturnCode 'ReturnCode',
               @ReturnMessage 'ReturnMessage',
               @AggregateReportID 'AggregateReportID',
               @CaseVersion 'CaseVersion',
               @EIDSSAggregateReportID 'EIDSSAggregateReportID';
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK;

        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_GBL_ReportForm_DELETE]...';


GO
--*************************************************************
-- Name 				: [[USP_GBL_ReportForm_DELETE]]
-- Description			: Delete Weekly Report Form record
--          
-- Author               : Mani
-- Revision History
--		Name       Date       Change Detail
-- Michael Brown 07/25/2022  Modified SP to Provide for intRowStatus = 1 to soft delete record.
--                           Also added AuditUpdateUser and AuditUpdateDate for tracking
--Manickandan Govindarajan 11/30/2022 Added Data Audit Functionality
-- Testing code:
/*

exec  [dbo].[[USP_GBL_ReportForm_DELETE]] 1
--*/
ALTER PROCEDURE [dbo].[USP_GBL_ReportForm_DELETE]
(    
    @ID AS BIGINT,
    @AuditUser NVARCHAR(200)
)
AS
DECLARE @returnCode        INT = 0 
DECLARE @returnMsg        NVARCHAR(MAX) = 'SUCCESS' 
declare @idfsDataAuditEventType bigint =10016002;
declare @idfsObjectType bigint =10017074;
declare @idfObject bigint; 
declare @idfObjectTable_tlbReportForm bigint =53577790000001;
declare @idfDataAuditEvent bigint;
declare @idfUserID bigint;
declare @idfSiteId bigint;

BEGIN

    BEGIN TRY
    BEGIN TRANSACTION


		--Data Audit
			select @idfUserID= a.userid, @idfSiteId= a.siteid from dbo.FN_UserSiteInformation(@AuditUser) a;
			-- insert record into tauDataAuditEvent
			EXEC USSP_GBL_DataAuditEvent_GET @idfUserID,@idfSiteId, @idfsDataAuditEventType,@idfsObjectType,@ID, @idfObjectTable_tlbReportForm, @idfDataAuditEvent OUTPUT
			-- insert into delete 
			INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject )
			values(@idfDataAuditEvent, @idfObjectTable_tlbReportForm, @ID)
		--Data Audit

        --delete from tflReportFormFiltered where idfReportForm = @ID
        UPDATE dbo.tlbReportForm 
        SET intRowStatus = 1,
            AuditUpdateUser = @AuditUser,
            AuditUpdateDTM = GETDATE()

        WHERE idfReportForm = @ID

        IF @@TRANCOUNT > 0 
          COMMIT

        SELECT @returnCode 'ReturnCode', @returnMsg 'ReturnMessage'

    END TRY 
        BEGIN CATCH 
        IF @@TRANCOUNT > 0
            ROLLBACK;

        THROW;

    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_GBL_ReportForm_SET]...';


GO



--*************************************************************
-- Name 				: [USP_GBL_ReportForm_SET]
-- Description			: Add/Update Weekly Report Form record
--          
-- Author               : Mani
-- Revision History
--		Name       Date       Change Detail
--
--Manickandan Govindarajan 11/30/2022 Added Data Audit
-- Testing code:
--
/*

exec  [dbo].[USP_GBL_ReportForm_SET] -1,'(new)',10528000,4719270000000,18,-265,3,-490,'10/5/2020 12:00:00 AM','10/5/2020 12:00:00 AM','1/8/2020 12:00:00 AM',	
			'1/15/2020 12:00:00 AM',9888840000000,5,0,null,null
--*/
ALTER PROCEDURE [dbo].[USP_GBL_ReportForm_SET]
	@idfReportForm BIGINT = NULL,
	@strReportFormID NVARCHAR(200) = NULL,
	@idfsReportFormType BIGINT,
	@GeographicalAdministrativeUnitID BIGINT = NULL, -- Country, Region, Rayon and Settlement Statistical Area Types
	@idfSentByOffice BIGINT,
	@idfSentByPerson BIGINT,
	@idfEnteredByOffice BIGINT,
	@idfEnteredByPerson BIGINT,
	@datSentByDate DATETIME,
	@datEnteredByDate DATETIME,
	@datStartDate DATETIME,
	@datFinishDate DATETIME,
	@idfDiagnosis BIGINT,
	@total INT = 0,
	@SiteID BIGINT,
	@UserID BIGINT,
	@notified INT = NULL,
	@comments NVARCHAR(250) = NULL,
	@datModificationForArchiveDate DATETIME = NULL

AS
DECLARE @ReturnCode INT = 0;
DECLARE @ReturnMessage NVARCHAR(MAX) = 'SUCCESS';
DECLARE @SuppressSelect TABLE (
	ReturnCode INT,
	ReturnMessage VARCHAR(200)
	);

declare @idfsDataAuditEventType bigint =10016002;
declare @idfsObjectType bigint =10017074;
declare @idfObject bigint;
declare @idfObjectTable_tlbReportForm bigint =53577790000001;
declare @idfDataAuditEvent bigint;
declare @idfUserID bigint;
declare @idfSiteId bigint;

DECLARE @tlbReportForm_BeforeEdit TABLE
(
	[idfReportForm] [bigint] NOT NULL,
	[idfsReportFormType] [bigint] NOT NULL,
	[idfsAdministrativeUnit] [bigint] NOT NULL,
	[idfSentByOffice] [bigint] NOT NULL,
	[idfSentByPerson] [bigint] NOT NULL,
	[idfEnteredByOffice] [bigint] NOT NULL,
	[idfEnteredByPerson] [bigint] NOT NULL,
	[datSentByDate] [datetime] NULL,
	[datEnteredByDate] [datetime] NULL,
	[datStartDate] [datetime] NULL,
	[datFinishDate] [datetime] NULL,
	[strReportFormID] [nvarchar](200) NOT NULL,
	[idfsSite] [bigint] NOT NULL,
	[idfsDiagnosis] [bigint] NOT NULL,
	[Total] [int] NOT NULL,
	[Notified] [int] NULL,
	[Comments] [nvarchar](256) NULL
	)

DECLARE @tlbReportForm_AfterEdit TABLE
	(
	[idfReportForm] [bigint] NOT NULL,
	[idfsReportFormType] [bigint] NOT NULL,
	[idfsAdministrativeUnit] [bigint] NOT NULL,
	[idfSentByOffice] [bigint] NOT NULL,
	[idfSentByPerson] [bigint] NOT NULL,
	[idfEnteredByOffice] [bigint] NOT NULL,
	[idfEnteredByPerson] [bigint] NOT NULL,
	[datSentByDate] [datetime] NULL,
	[datEnteredByDate] [datetime] NULL,
	[datStartDate] [datetime] NULL,
	[datFinishDate] [datetime] NULL,
	[strReportFormID] [nvarchar](200) NOT NULL,
	[idfsSite] [bigint] NOT NULL,
	[idfsDiagnosis] [bigint] NOT NULL,
	[Total] [int] NOT NULL,
	[Notified] [int] NULL,
	[Comments] [nvarchar](256) NULL
)

BEGIN
	BEGIN TRY
		BEGIN TRANSACTION

		IF EXISTS (
				SELECT *
				FROM dbo.tlbReportForm
				WHERE idfReportForm = @idfReportForm
				)
		BEGIN
			-- Data Audit
			set @idfsDataAuditEventType =10016003;
			set @idfObject=@idfReportForm;

				insert into @tlbReportForm_BeforeEdit ( idfReportForm,[idfsReportFormType] ,[idfsAdministrativeUnit],
						[idfSentByOffice],[idfSentByPerson],[idfEnteredByOffice],[idfEnteredByPerson],[datSentByDate],[datEnteredByDate],
						[datStartDate],[datFinishDate],[strReportFormID],[idfsSite],[idfsDiagnosis],[Total],[Notified],[Comments])
				select idfReportForm,[idfsReportFormType] ,[idfsAdministrativeUnit],
						[idfSentByOffice],[idfSentByPerson],[idfEnteredByOffice],[idfEnteredByPerson],[datSentByDate],[datEnteredByDate],
						[datStartDate],[datFinishDate],[strReportFormID],[idfsSite],[idfsDiagnosis],[Total],[Notified],[Comments]
						from tlbReportForm where idfReportForm =@idfReportForm;
			--Data Audit

			UPDATE dbo.tlbReportForm
			SET idfsReportFormType = @idfsReportFormType,
				idfsAdministrativeUnit = @GeographicalAdministrativeUnitID,
				idfSentByOffice = @idfSentByOffice,
				idfSentByPerson = @idfSentByPerson,
				datSentByDate = @datSentByDate,
				datStartDate = @datStartDate,
				datFinishDate = @datFinishDate,
				datModificationForArchiveDate = GETDATE(),
				idfsDiagnosis = @idfDiagnosis,
				Total = @total,
				Notified = @notified,
				Comments =@comments,
				idfsSite= @SiteID,
				AuditUpdateUser=@UserID,
				AuditUpdateDTM = GETDATE()
			WHERE idfReportForm = @idfReportForm;

			--Data Audit
			insert into @tlbReportForm_AfterEdit ( idfReportForm,[idfsReportFormType] ,[idfsAdministrativeUnit],
						[idfSentByOffice],[idfSentByPerson],[idfEnteredByOffice],[idfEnteredByPerson],[datSentByDate],[datEnteredByDate],
						[datStartDate],[datFinishDate],[strReportFormID],[idfsSite],[idfsDiagnosis],[Total],[Notified],[Comments])
				select idfReportForm,[idfsReportFormType] ,[idfsAdministrativeUnit],
						[idfSentByOffice],[idfSentByPerson],[idfEnteredByOffice],[idfEnteredByPerson],[datSentByDate],[datEnteredByDate],
						[datStartDate],[datFinishDate],[strReportFormID],[idfsSite],[idfsDiagnosis],[Total],[Notified],[Comments]
						from tlbReportForm where idfReportForm =@idfReportForm;

			INSERT INTO @SuppressSelect
			EXEC USSP_GBL_DataAuditEvent_GET @UserID, @SiteID, @idfsDataAuditEventType,@idfsObjectType,@idfObject, @idfObjectTable_tlbReportForm, @idfDataAuditEvent OUTPUT
			

			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, idfObjectTable, idfColumn, 
				idfObject, idfObjectDetail, 
				strOldValue, strNewValue)
			select @idfDataAuditEvent,@idfObjectTable_tlbReportForm, 51586990000002,
				a.idfReportForm,null,
				a.idfsReportFormType,b.idfsReportFormType 
			from @tlbReportForm_BeforeEdit a  inner join @tlbReportForm_AfterEdit b on a.idfReportForm = b.idfReportForm
			where (a.idfsReportFormType <> b.idfsReportFormType) 
				or(a.idfsReportFormType is not null and b.idfsReportFormType is null)
				or(a.idfsReportFormType is null and b.idfsReportFormType is not null)

			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, idfObjectTable, idfColumn, 
				idfObject, idfObjectDetail, 
				strOldValue, strNewValue)
			select @idfDataAuditEvent,@idfObjectTable_tlbReportForm, 51586990000003,
				a.idfReportForm,null,
				a.idfsAdministrativeUnit,b.idfsAdministrativeUnit 
			from @tlbReportForm_BeforeEdit a  inner join @tlbReportForm_AfterEdit b on a.idfReportForm = b.idfReportForm
			where (a.idfsAdministrativeUnit <> b.idfsAdministrativeUnit) 
				or(a.idfsAdministrativeUnit is not null and b.idfsAdministrativeUnit is null)
				or(a.idfsAdministrativeUnit is null and b.idfsAdministrativeUnit is not null)

			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, idfObjectTable, idfColumn, 
				idfObject, idfObjectDetail, 
				strOldValue, strNewValue)
			select @idfDataAuditEvent,@idfObjectTable_tlbReportForm, 51586990000004,
				a.idfReportForm,null,
				a.idfSentByOffice,b.idfSentByOffice 
			from @tlbReportForm_BeforeEdit a  inner join @tlbReportForm_AfterEdit b on a.idfReportForm = b.idfReportForm
			where (a.idfSentByOffice <> b.idfSentByOffice) 
				or(a.idfSentByOffice is not null and b.idfSentByOffice is null)
				or(a.idfSentByOffice is null and b.idfSentByOffice is not null)

			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, idfObjectTable, idfColumn, 
				idfObject, idfObjectDetail, 
				strOldValue, strNewValue)
			select @idfDataAuditEvent,@idfObjectTable_tlbReportForm, 51586990000005,
				a.idfReportForm,null,
				a.idfSentByPerson,b.idfSentByPerson 
			from @tlbReportForm_BeforeEdit a  inner join @tlbReportForm_AfterEdit b on a.idfReportForm = b.idfReportForm
			where (a.idfSentByPerson <> b.idfSentByPerson) 
				or(a.idfSentByPerson is not null and b.idfSentByPerson is null)
				or(a.idfSentByPerson is null and b.idfSentByPerson is not null)

			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, idfObjectTable, idfColumn, 
				idfObject, idfObjectDetail, 
				strOldValue, strNewValue)
			select @idfDataAuditEvent,@idfObjectTable_tlbReportForm, 51586990000006,
				a.idfReportForm,null,
				a.idfEnteredByOffice,b.idfEnteredByOffice 
			from @tlbReportForm_BeforeEdit a  inner join @tlbReportForm_AfterEdit b on a.idfReportForm = b.idfReportForm
			where (a.idfEnteredByOffice <> b.idfEnteredByOffice) 
				or(a.idfEnteredByOffice is not null and b.idfEnteredByOffice is null)
				or(a.idfEnteredByOffice is null and b.idfEnteredByOffice is not null)

			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, idfObjectTable, idfColumn, 
				idfObject, idfObjectDetail, 
				strOldValue, strNewValue)
			select @idfDataAuditEvent,@idfObjectTable_tlbReportForm, 51586990000007,
				a.idfReportForm,null,
				a.idfEnteredByPerson,b.idfEnteredByPerson 
			from @tlbReportForm_BeforeEdit a  inner join @tlbReportForm_AfterEdit b on a.idfReportForm = b.idfReportForm
			where (a.idfEnteredByPerson <> b.idfEnteredByPerson) 
				or(a.idfEnteredByPerson is not null and b.idfEnteredByPerson is null)
				or(a.idfEnteredByPerson is null and b.idfEnteredByPerson is not null)

			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, idfObjectTable, idfColumn, 
				idfObject, idfObjectDetail, 
				strOldValue, strNewValue)
			select @idfDataAuditEvent,@idfObjectTable_tlbReportForm, 51586990000008,
				a.idfReportForm,null,
				a.datSentByDate,b.datSentByDate 
			from @tlbReportForm_BeforeEdit a  inner join @tlbReportForm_AfterEdit b on a.idfReportForm = b.idfReportForm
			where (a.datSentByDate <> b.datSentByDate) 
				or(a.datSentByDate is not null and b.datSentByDate is null)
				or(a.datSentByDate is null and b.datSentByDate is not null)

			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, idfObjectTable, idfColumn, 
				idfObject, idfObjectDetail, 
				strOldValue, strNewValue)
			select @idfDataAuditEvent,@idfObjectTable_tlbReportForm, 51586990000009,
				a.idfReportForm,null,
				a.datEnteredByDate,b.datEnteredByDate 
			from @tlbReportForm_BeforeEdit a  inner join @tlbReportForm_AfterEdit b on a.idfReportForm = b.idfReportForm
			where (a.datEnteredByDate <> b.datEnteredByDate) 
				or(a.datEnteredByDate is not null and b.datEnteredByDate is null)
				or(a.datEnteredByDate is null and b.datEnteredByDate is not null)

			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, idfObjectTable, idfColumn, 
				idfObject, idfObjectDetail, 
				strOldValue, strNewValue)
			select @idfDataAuditEvent,@idfObjectTable_tlbReportForm, 51586990000010,
				a.idfReportForm,null,
				a.datStartDate,b.datStartDate 
			from @tlbReportForm_BeforeEdit a  inner join @tlbReportForm_AfterEdit b on a.idfReportForm = b.idfReportForm
			where (a.datStartDate <> b.datStartDate) 
				or(a.datStartDate is not null and b.datStartDate is null)
				or(a.datStartDate is null and b.datStartDate is not null)
				
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, idfObjectTable, idfColumn, 
				idfObject, idfObjectDetail, 
				strOldValue, strNewValue)
			select @idfDataAuditEvent,@idfObjectTable_tlbReportForm, 51586990000011,
				a.idfReportForm,null,
				a.datFinishDate,b.datFinishDate 
			from @tlbReportForm_BeforeEdit a  inner join @tlbReportForm_AfterEdit b on a.idfReportForm = b.idfReportForm
			where (a.datFinishDate <> b.datFinishDate) 
				or(a.datFinishDate is not null and b.datFinishDate is null)
				or(a.datFinishDate is null and b.datFinishDate is not null)
			
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, idfObjectTable, idfColumn, 
				idfObject, idfObjectDetail, 
				strOldValue, strNewValue)
			select @idfDataAuditEvent,@idfObjectTable_tlbReportForm, 51586990000012,
				a.idfReportForm,null,
				a.strReportFormID,b.strReportFormID 
			from @tlbReportForm_BeforeEdit a  inner join @tlbReportForm_AfterEdit b on a.idfReportForm = b.idfReportForm
			where (a.strReportFormID <> b.strReportFormID) 
				or(a.strReportFormID is not null and b.strReportFormID is null)
				or(a.strReportFormID is null and b.strReportFormID is not null)

			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, idfObjectTable, idfColumn, 
				idfObject, idfObjectDetail, 
				strOldValue, strNewValue)
			select @idfDataAuditEvent,@idfObjectTable_tlbReportForm, 51586990000013,
				a.idfReportForm,null,
				a.idfsSite,b.idfsSite 
			from @tlbReportForm_BeforeEdit a  inner join @tlbReportForm_AfterEdit b on a.idfReportForm = b.idfReportForm
			where (a.idfsSite <> b.idfsSite) 
				or(a.idfsSite is not null and b.idfsSite is null)
				or(a.idfsSite is null and b.idfsSite is not null)

			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, idfObjectTable, idfColumn, 
				idfObject, idfObjectDetail, 
				strOldValue, strNewValue)
			select @idfDataAuditEvent,@idfObjectTable_tlbReportForm, 51586990000014,
				a.idfReportForm,null,
				a.idfsDiagnosis,b.idfsDiagnosis 
			from @tlbReportForm_BeforeEdit a  inner join @tlbReportForm_AfterEdit b on a.idfReportForm = b.idfReportForm
			where (a.idfsDiagnosis <> b.idfsDiagnosis) 
				or(a.idfsDiagnosis is not null and b.idfsDiagnosis is null)
				or(a.idfsDiagnosis is null and b.idfsDiagnosis is not null)
		
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, idfObjectTable, idfColumn, 
				idfObject, idfObjectDetail, 
				strOldValue, strNewValue)
			select @idfDataAuditEvent,@idfObjectTable_tlbReportForm, 51586990000015,
				a.idfReportForm,null,
				a.Total,b.Total 
			from @tlbReportForm_BeforeEdit a  inner join @tlbReportForm_AfterEdit b on a.idfReportForm = b.idfReportForm
			where (a.Total <> b.Total) 
				or(a.Total is not null and b.Total is null)
				or(a.Total is null and b.Total is not null)

			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, idfObjectTable, idfColumn, 
				idfObject, idfObjectDetail, 
				strOldValue, strNewValue)
			select @idfDataAuditEvent,@idfObjectTable_tlbReportForm, 51586990000016,
				a.idfReportForm,null,
				a.Notified,b.Notified 
			from @tlbReportForm_BeforeEdit a  inner join @tlbReportForm_AfterEdit b on a.idfReportForm = b.idfReportForm
			where (a.Notified <> b.Notified) 
				or(a.Notified is not null and b.Notified is null)
				or(a.Notified is null and b.Notified is not null)

			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, idfObjectTable, idfColumn, 
				idfObject, idfObjectDetail, 
				strOldValue, strNewValue)
			select @idfDataAuditEvent,@idfObjectTable_tlbReportForm, 51586990000017,
				a.idfReportForm,null,
				a.Comments,b.Comments 
			from @tlbReportForm_BeforeEdit a  inner join @tlbReportForm_AfterEdit b on a.idfReportForm = b.idfReportForm
			where (a.Comments <> b.Comments) 
				or(a.Comments is not null and b.Comments is null)
				or(a.Comments is null and b.Comments is not null)

			--Data Audit

		END
		ELSE
		BEGIN
			INSERT INTO @SuppressSelect
			EXEC dbo.USP_GBL_NEXTKEYID_GET 'tlbReportForm',
				@idfReportForm OUTPUT;

			IF ISNULL(@strReportFormID, N'') = N''
				OR LEFT(ISNULL(@strReportFormID, N''), 4) = '(new'
			BEGIN
				DECLARE @ObjectName NVARCHAR(600);
				SET @ObjectName ='Weekly Reporting Form';
				INSERT INTO @SuppressSelect
				EXEC dbo.USP_GBL_NextNumber_GET @ObjectName,
					@strReportFormID OUTPUT,
					NULL;
			END
			--data audit
			set @idfsDataAuditEventType =10016001;
			set @idfObject =@idfReportForm;

			EXEC USSP_GBL_DataAuditEvent_GET @UserID, @SiteID, @idfsDataAuditEventType,@idfsObjectType,@idfObject, @idfObjectTable_tlbReportForm, @idfDataAuditEvent OUTPUT
			-- insert into delete 
			INSERT INTO tauDataAuditDetailCreate(idfDataAuditEvent, idfObjectTable, idfObject )
			values(@idfDataAuditEvent, @idfObjectTable_tlbReportForm, @idfObject)
			--data audit
			INSERT INTO dbo.tlbReportForm (
				idfReportForm,
				idfsReportFormType,
				idfsAdministrativeUnit,
				idfSentByOffice,
				idfSentByPerson,
				idfEnteredByOffice,
				idfEnteredByPerson,
				datSentByDate,
				datEnteredByDate,
				datStartDate,
				datFinishDate,
				strReportFormID,
				idfsDiagnosis,
				Total,
				Notified,
				Comments,
				datModificationForArchiveDate,
				idfsSite,
				AuditCreateUser,
				AuditCreateDTM
				)
			VALUES (
				@idfReportForm,
				@idfsReportFormType,
				@GeographicalAdministrativeUnitID,
				@idfSentByOffice,
				@idfSentByPerson,
				@idfEnteredByOffice,
				@idfEnteredByPerson,
				@datSentByDate,
				@datEnteredByDate,
				@datStartDate,
				@datFinishDate,
				@strReportFormID,
				@idfDiagnosis,
				@total,
				@notified,
				@comments,
				GETDATE(),
				@SiteID,
				@UserID,
				GETDATE()
				);
		END

		IF @@TRANCOUNT > 0
			COMMIT;

		SELECT @ReturnCode 'ReturnCode',
			@ReturnMessage 'ReturnMessage',
			@idfReportForm 'idfReportForm',
			@strReportFormID 'strReportFormID';
	END TRY

	BEGIN CATCH
		IF @@TRANCOUNT > 0
			ROLLBACK;

		THROW;
	END CATCH
END
GO
--PRINT N'Altering Procedure [dbo].[USP_HUM_HUMAN_MASTER_GETDetail]...';


--GO
---- ================================================================================================
---- Name: USP_HUM_HUMAN_MASTER_GETDetail
----
---- Description:	Get a human actual record
----          
---- Revision History:
---- Name				Date		Change Detail
---- ---------------	----------	--------------------------------------------------------------------
---- Mandar Kulkarni				Initial release.
---- Vilma Thomas		05/25/2018	Update the ReferenceType key from 19000167 to 19000500 for 'Contact 
----								Phone Type'
---- Stephen Long		11/26/2018	Update for the new API; remove returnCode and returnMsg.
---- Ann Xiong		08/30/2019	Added script to select PersonalIDTypeName, OccupationTypeName, 
----								SchoolCountry, 
----								SchoolRegion, SchoolRayon, SchoolSettlement for Person Deduplication.
---- Ann Xiong		09/09/2019	return haai.SchoolAddressID instead of haai.AltAddressID as 
----								SchoolGeoLocationID
---- Mark Wilson		10/29/2019	added Settlement Type to return
---- Ann Xiong		02/17/2020	Added IsAnotherPhone and Age to select
---- Ann Xiong		05/08/2020	Added YNAnotherAddress, YNHumanForeignAddress, 
----								YNEmployerForeignAddress, YNHumanAltForeignAddress, 
----								YNSchoolForeignAddress, YNWorkSameAddress to select
---- Stephen Long		07/07/2020	Changed v6.1 function call for create address string to v7 version.
---- Mark Wilson		09/20/2021	reworked the locations to use gisLocation and hierarchy
---- Mark Wilson		10/04/2021	Updated to pull location data from correct table
---- Mark Wilson		10/05/2021	Updated to use correct location references and udpate test code
---- Mark Wilson		10/06/2021	Added Alt Address fields
---- Mark Wilson		10/07/2021	Lat/Long only needed for Current Address and Foreign Address not needed for Permanent
---- Mark Wilson		10/12/2021  Added YNPermanentSameAddress, updated YNAnotherAddress
---- Leo Tracchia		05/13/2022	Added joins for Location hierachy
---- Doug Albanese	 12/08/2022	 I have performed work to improve the speed of a record.

--/*Test Code

--EXEC dbo.USP_HUM_HUMAN_MASTER_GETDetail
--	@LangID = 'en-US',
--	@HumanMasterID = 422849750000916


--EXEC dbo.USP_HUM_HUMAN_MASTER_GETDetail
--	@LangID = 'az-Latn-AZ',
--	@HumanMasterID = 411420970000870


--EXEC dbo.USP_HUM_HUMAN_MASTER_GETDetail
--	@LangID = 'en-US',
--	@HumanMasterID = 413771740000870

--*/
---- ================================================================================================
--ALTER PROCEDURE [dbo].[USP_HUM_HUMAN_MASTER_GETDetail] (
--	@LangID NVARCHAR(20),
--	@HumanMasterID BIGINT
--	)
--AS
--BEGIN
--	DECLARE @HumanAltInfo AS TABLE (
--   HumanAltidfsLocation		  BIGINT,
--   HumanAltidfsCountry		  BIGINT,
--   HumanAltCountry			  NVARCHAR(200),
--   HumanAltidfsRegion		  BIGINT,
--   HumanAltRegion			  NVARCHAR(200),
--   HumanAltidfsRayon		  BIGINT,
--   HumanAltRayon			  NVARCHAR(200),
--   HumanAltidfsSettlement	  BIGINT,
--   HumanAltSettlement		  NVARCHAR(200),
--   HumanAltidfsSettlementType BIGINT
--)

--INSERT INTO @HumanAltInfo
--SELECT
--   haai.AltAddressID AS idfsLocation,
--   lhAlt.AdminLevel1ID AS HumanAltidfsCountry,
--   lhAlt.AdminLevel1Name AS HumanAltCountry,
--   lhAlt.AdminLevel2ID AS HumanAltidfsRegion,
--   lhAlt.AdminLevel2Name AS HumanAltRegion,
--   lhAlt.AdminLevel3ID AS HumanAltidfsRayon,
--   lhAlt.AdminLevel3Name AS HumanAltRayon,
--   lhAlt.AdminLevel4ID AS HumanAltidfsSettlement,
--   lhAlt.AdminLevel4Name AS HumanAltSettlement,
--   AltLocation.idfsType	AS HumanAltidfsSettlementType   
--FROM 
--   HumanActualAddlinfo haai
--INNER JOIN dbo.tlbGeoLocationShared AS tglAlt ON haai.AltAddressID = tglAlt.idfGeoLocationShared
--INNER JOIN dbo.gisLocation AltLocation ON AltLocation.idfsLocation = tglAlt.idfsLocation
--INNER JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LangID) lhAlt ON lhAlt.idfsLocation = tglAlt.idfsLocation	
--WHERE 
--   HumanActualAddlInfoUID = @HumanMasterID
   
--	SET NOCOUNT ON;

--	BEGIN TRY
--		SELECT ISNULL(ha.strFirstName, '') + ' ' + ISNULL(ha.strLastName, '') AS PatientFarmOwnerName,
--			haai.EIDSSPersonId AS EIDSSPersonID,
--			ha.idfsOccupationType AS OccupationTypeID,
--			ha.idfsNationality AS CitizenshipTypeID,
--			citizenshipType.name AS CitizenshipTypeName,
--			ha.idfsHumanGender AS GenderTypeID,
--			tb.name AS GenderTypeName,

--			-- Current Address
--			ha.idfCurrentResidenceAddress AS HumanGeoLocationID,
--			lhHuman.AdminLevel1ID AS HumanidfsCountry,
--			lhHuman.AdminLevel1Name AS HumanCountry,
--			lhHuman.AdminLevel2ID AS HumanidfsRegion,
--			lhHuman.AdminLevel2Name AS HumanRegion,
--			lhHuman.AdminLevel3ID AS HumanidfsRayon,
--			lhHuman.AdminLevel3Name AS HumanRayon,
--			lhHuman.AdminLevel4ID AS HumanidfsSettlement,
--			lhHuman.AdminLevel4Name AS HumanSettlement,			
--			HL.idfsType AS HumanidfsSettlementType,
--			humanSettlementType.[name] AS HumanSettlementType,
--			tglHuman.strPostCode AS HumanstrPostalCode,
--			tglHuman.strStreetName AS HumanstrStreetName,
--			tglHuman.strHouse AS HumanstrHouse,
--			tglHuman.strBuilding AS HumanstrBuilding,
--			tglHuman.strApartment AS HumanstrApartment,
--			tglHuman.strDescription AS HumanDescription,
--			tglHuman.dblLatitude AS HumanstrLatitude,
--			tglHuman.dblLongitude AS HumanstrLongitude,
--			tglHuman.blnForeignAddress AS HumanForeignAddressIndicator,
--			tglHuman.strForeignAddress AS HumanForeignAddressString,

--			-- Employer Address
--			ha.idfEmployerAddress AS EmployerGeoLocationID,
--			lhEmployer.AdminLevel1ID AS EmployeridfsCountry,
--			lhEmployer.AdminLevel1Name AS EmployerCountry,
--			lhEmployer.AdminLevel2ID AS EmployeridfsRegion,
--			lhEmployer.AdminLevel2Name AS EmployerRegion,
--			lhEmployer.AdminLevel3ID AS EmployeridfsRayon,
--			lhEmployer.AdminLevel3Name AS EmployerRayon,
--			lhEmployer.AdminLevel4ID AS EmployeridfsSettlement,
--			lhEmployer.AdminLevel4Name AS EmployerSettlement,
--			EA.idfsType AS EmployeridfsSettlementType,
--			EmpSettlementType.strDefault AS EmployerSettlementType,
--			tglEmployer.strPostCode AS EmployerstrPostalCode,
--			tglEmployer.strStreetName AS EmployerstrStreetName,
--			tglEmployer.strHouse AS EmployerstrHouse,
--			tglEmployer.strBuilding AS EmployerstrBuilding,
--			tglEmployer.strApartment AS EmployerstrApartment,
--			tglEmployer.strDescription AS EmployerDescription,
--			tglEmployer.blnForeignAddress AS EmployerForeignAddressIndicator,
--			tglEmployer.strForeignAddress AS EmployerForeignAddressString,

--			-- Permanent Address
--			ha.idfRegistrationAddress AS HumanPermGeoLocationID,
--			lhPerm.AdminLevel1ID AS HumanPermidfsCountry,
--			lhPerm.AdminLevel1Name AS HumanPermCountry,
--			lhPerm.AdminLevel2ID AS HumanPermidfsRegion,
--			lhPerm.AdminLevel2Name AS HumanPermRegion,
--			lhPerm.AdminLevel3ID AS HumanPermidfsRayon,
--			lhPerm.AdminLevel3Name AS HumanPermRayon,
--			lhPerm.AdminLevel4ID HumanPermidfsSettlement,
--			lhPerm.AdminLevel4Name AS HumanPermSettlement,
--			registrationLocation.idfsType AS HumanPermidfsSettlementType,
--			registrationSettlementType.[name] AS HumanPermSettlementType,
--			tglRegistrationAddress.strPostCode AS HumanPermstrPostalCode,
--			tglRegistrationAddress.strStreetName AS HumanPermstrStreetName,
--			tglRegistrationAddress.strHouse AS HumanPermstrHouse,
--			tglRegistrationAddress.strBuilding AS HumanPermstrBuilding,
--			tglRegistrationAddress.strApartment AS HumanPermstrApartment,
--			tglRegistrationAddress.strDescription AS HumanPermDescription,

--			-- Alternate Address
--			haai.AltAddressID AS HumanAltGeoLocationID,
--			lhAlt.HumanAltidfsCountry,
--			lhAlt.HumanAltCountry,
--			lhAlt.HumanAltidfsRegion,
--			lhAlt.HumanAltRegion,
--			lhAlt.HumanAltidfsRayon,
--			lhAlt.HumanAltRayon,
--			lhAlt.HumanAltidfsSettlement,
--			lhAlt.HumanAltSettlement,
--			lhAlt.HumanAltidfsSettlementType,
--			AltSettlementType.name AS HumanAltSettlementType,
--			tglAlt.strPostCode AS HumanAltstrPostalCode,
--			tglAlt.strStreetName AS HumanAltstrStreetName,
--			tglAlt.strHouse AS HumanAltstrHouse,
--			tglAlt.strBuilding AS HumanAltstrBuilding,
--			tglAlt.strApartment AS HumanAltstrApartment,
--			tglAlt.strDescription AS HumanAltDescription,
--			tglAlt.blnForeignAddress AS HumanAltForeignAddressIndicator,
--			tglAlt.strForeignAddress AS HumanAltForeignAddressString,

--			-- School Address
--			haai.SchoolAddressID AS SchoolGeoLocationID,
--			lhSchool.AdminLevel1ID AS SchoolidfsCountry,
--			lhSchool.AdminLevel1Name AS SchoolCountry,
--			lhSchool.AdminLevel2ID AS SchoolidfsRegion,
--			lhSchool.AdminLevel2Name AS SchoolRegion,
--			lhSchool.AdminLevel3ID AS SchoolidfsRayon,
--			lhSchool.AdminLevel3Name AS SchoolRayon,
--			lhSchool.AdminLevel4ID AS SchoolidfsSettlement,
--			lhSchool.AdminLevel4Name AS SchoolSettlement,
--			SchoolLocation.idfsType AS SchoolAltidfsSettlementType,
--			SchoolSettlementType.strDefault AS SchoolAltSettlementType,
--			tglSchool.strPostCode AS SchoolstrPostalCode,
--			tglSchool.strStreetName AS SchoolstrStreetName,
--			tglSchool.strHouse AS SchoolstrHouse,
--			tglSchool.strBuilding AS SchoolstrBuilding,
--			tglSchool.strApartment AS SchoolstrApartment,
--			tglSchool.blnForeignAddress AS SchoolForeignAddressIndicator,
--			tglSchool.strForeignAddress AS SchoolForeignAddressString,

--			dbo.FN_GBL_FormatDate(ha.datDateofBirth, 'mm/dd/yyyy') AS DateOfBirth,
--			dbo.FN_GBL_FormatDate(ha.datDateOfDeath, 'mm/dd/yyyy') AS DateOfDeath,
--			dbo.FN_GBL_FormatDate(ha.datEnteredDate, 'mm/dd/yyyy') AS EnteredDate,
--			dbo.FN_GBL_FormatDate(ha.datModificationDate, 'mm/dd/yyyy') AS ModificationDate,
--			ha.strFirstName AS FirstOrGivenName,
--			ha.strSecondName AS SecondName,
--			ha.strLastName AS LastOrSurname,
--			ha.strEmployerName AS EmployerName,
--			ha.strHomePhone AS HomePhone,
--			ha.strWorkPhone AS WorkPhone,
--			ha.idfsPersonIDType AS PersonalIDType,
--			ha.strPersonID AS PersonalID,
--			haai.ReportedAge,
--			haai.ReportedAgeUOMID,
--			haai.PassportNbr AS PassportNumber,
--			haai.IsEmployedID AS IsEmployedTypeID,
--			isEmployed.name AS IsEmployedTypeName,
--			haai.EmployerPhoneNbr AS EmployerPhone,
--			haai.EmployedDTM AS EmployedDateLastPresent,
--			haai.IsStudentID AS IsStudentTypeID,
--			isStudent.name AS IsStudentTypeName,
--			haai.SchoolName AS SchoolName,
--			haai.SchoolLastAttendDTM AS SchoolDateLastAttended,
--			haai.SchoolPhoneNbr AS SchoolPhone,
--			haai.ContactPhoneCountryCode,
--			haai.ContactPhoneNbr AS ContactPhone,
--			haai.ContactPhoneNbrTypeID AS ContactPhoneTypeID,
--			ContactPhoneNbrTypeID.name AS ContactPhoneTypeName,
--			haai.ContactPhone2CountryCode,
--			haai.ContactPhone2Nbr AS ContactPhone2,
--			haai.ContactPhone2NbrTypeID AS ContactPhone2TypeID,
--			ContactPhone2NbrTypeID.name AS ContactPhone2TypeName,
--			personalIDType.name AS PersonalIDTypeName,
--			occupationType.name AS OccupationTypeName,
--			CASE 
--				WHEN haai.ContactPhone2Nbr IS NULL
--					AND haai.ContactPhone2NbrTypeID IS NULL
--					THEN 'No'
--				ELSE 'Yes'
--				END AS IsAnotherPhone,
--			CAST(ISNULL(haai.ReportedAge, '') AS VARCHAR(3)) + ' ' + ISNULL(HumanAgeType.name, '') AS Age,
--			CASE 
--				WHEN ((ha.idfRegistrationAddress IS NOT NULL AND ha.idfRegistrationAddress > 0) OR (haai.AltAddressID IS NOT NULL AND haai.AltAddressID > 0))
--					THEN 'Yes'
--				ELSE 'No'
--				END AS YNAnotherAddress,
--			CASE 
--				WHEN tglHuman.blnForeignAddress IS NOT NULL
--					AND tglHuman.blnForeignAddress = 1
--					THEN 'Yes'
--				ELSE 'No'
--				END AS YNHumanForeignAddress,
--			CASE 
--				WHEN tglEmployer.blnForeignAddress IS NOT NULL
--					AND tglEmployer.blnForeignAddress = 1
--					THEN 'Yes'
--				ELSE 'No'
--				END AS YNEmployerForeignAddress,
--			CASE 
--				WHEN tglRegistrationAddress.blnForeignAddress IS NOT NULL
--					AND tglRegistrationAddress.blnForeignAddress = 1
--					THEN 'Yes'
--				ELSE 'No'
--				END AS YNHumPermForeignAddress,
--			CASE 
--				WHEN tglAlt.blnForeignAddress IS NOT NULL
--					AND tglAlt.blnForeignAddress = 1
--					THEN 'Yes'
--				ELSE 'No'
--				END AS YNHumanAltForeignAddress,
--			CASE 
--				WHEN tglSchool.blnForeignAddress IS NOT NULL
--					AND tglSchool.blnForeignAddress = 1
--					THEN 'Yes'
--				ELSE 'No'
--				END AS YNSchoolForeignAddress,
--			CASE 
--				WHEN dbo.FN_GBL_CreateAddressString(ISNULL(lhHuman.AdminLevel1Name, N''), ISNULL(lhHuman.AdminLevel2Name, N''), ISNULL(lhHuman.AdminLevel3Name, N''), ISNULL(tglHuman.strPostCode, N''), ISNULL(humanSettlementType.strDefault, N''), ISNULL(lhHuman.AdminLevel4Name, N''), ISNULL(tglHuman.strStreetName, N''), ISNULL(tglHuman.strHouse, N''), ISNULL(tglHuman.strBuilding, N''), ISNULL(tglHuman.strApartment, N''), ISNULL(tglHuman.blnForeignAddress, N''), ISNULL(tglHuman.strForeignAddress, N'')) = 
--						dbo.FN_GBL_CreateAddressString(ISNULL(lhEmployer.AdminLevel1Name, N''), ISNULL(lhEmployer.AdminLevel2Name, N''), ISNULL(lhEmployer.AdminLevel3Name, N''), ISNULL(tglEmployer.strPostCode, N''), ISNULL(EmpSettlementType.strDefault, N''), ISNULL(lhEmployer.AdminLevel4Name, N''), ISNULL(tglEmployer.strStreetName, N''), ISNULL(tglEmployer.strHouse, N''), ISNULL(tglEmployer.strBuilding, N''), ISNULL(tglEmployer.strApartment, N''), ISNULL(tglEmployer.blnForeignAddress, N''), ISNULL(tglEmployer.strForeignAddress, N''))
--					THEN 'Yes'
--				ELSE 'No'
--				END AS YNWorkSameAddress,
--			CASE 
--				WHEN dbo.FN_GBL_CreateAddressString(ISNULL(lhHuman.AdminLevel1Name, N''), ISNULL(lhHuman.AdminLevel2Name, N''), ISNULL(lhHuman.AdminLevel3Name, N''), ISNULL(tglHuman.strPostCode, N''), ISNULL(humanSettlementType.strDefault, N''), ISNULL(lhHuman.AdminLevel4Name, N''), ISNULL(tglHuman.strStreetName, N''), ISNULL(tglHuman.strHouse, N''), ISNULL(tglHuman.strBuilding, N''), ISNULL(tglHuman.strApartment, N''), ISNULL(tglHuman.blnForeignAddress, N''), ISNULL(tglHuman.strForeignAddress, N'')) = 
--						dbo.FN_GBL_CreateAddressString(ISNULL(lhPerm.AdminLevel1Name, N''), ISNULL(lhPerm.AdminLevel2Name, N''), ISNULL(lhPerm.AdminLevel3Name, N''), ISNULL(tglRegistrationAddress.strPostCode, N''), ISNULL(registrationSettlementType.strDefault, N''), ISNULL(lhPerm.AdminLevel4Name, N''), ISNULL(tglRegistrationAddress.strStreetName, N''), ISNULL(tglRegistrationAddress.strHouse, N''), ISNULL(tglRegistrationAddress.strBuilding, N''), ISNULL(tglRegistrationAddress.strApartment, N''), ISNULL(tglRegistrationAddress.blnForeignAddress, N''), ISNULL(tglRegistrationAddress.strForeignAddress, N''))
--					THEN 'Yes'
--				ELSE 'No'
--				END AS YNPermanentSameAddress 

--		FROM dbo.tlbHumanActual ha

--		LEFT JOIN dbo.HumanActualAddlinfo haai ON ha.idfHumanActual = haai.HumanActualAddlinfoUID
--		LEFT JOIN dbo.tlbGeoLocationShared AS tglHuman ON ha.idfCurrentResidenceAddress = tglHuman.idfGeoLocationShared
--		LEFT JOIN dbo.tlbGeoLocationShared AS tglEmployer ON ha.idfEmployerAddress = tglEmployer.idfGeoLocationShared
--		LEFT JOIN dbo.tlbGeoLocationShared AS tglRegistrationAddress ON ha.idfRegistrationAddress = tglRegistrationAddress.idfGeoLocationShared
--		LEFT JOIN dbo.tlbGeoLocationShared AS tglSchool ON haai.SchoolAddressID = tglSchool.idfGeoLocationShared
--		LEFT JOIN dbo.tlbGeoLocationShared AS tglAlt ON haai.AltAddressID = tglAlt.idfGeoLocationShared
--		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000043) tb ON tb.idfsReference = ha.idfsHumanGender

--		-- Current Address
--		LEFT JOIN dbo.gisLocation HL ON HL.idfsLocation = tglHuman.idfsLocation	
--		LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LangID) lhHuman ON lhHuman.idfsLocation = tglHuman.idfsLocation			
--		LEFT JOIN dbo.FN_GBL_GIS_Reference(@LangID, 19000005) AS humanSettlementType ON humanSettlementType.idfsReference = HL.idfsType

--		-- Employer address 
--		LEFT JOIN dbo.gisLocation EA ON EA.idfsLocation = tglEmployer.idfsLocation
--		LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LangID) lhEmployer ON lhEmployer.idfsLocation = tglEmployer.idfsLocation		
--		LEFT JOIN dbo.FN_GBL_GIS_Reference(@LangID, 19000005) AS EmpSettlementType ON EmpSettlementType.idfsReference = EA.idfsType

--		-- Permanent address 
--		LEFT JOIN dbo.gisLocation registrationLocation ON registrationLocation.idfsLocation = tglRegistrationAddress.idfsLocation
--		LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LangID) lhPerm ON lhPerm.idfsLocation = tglRegistrationAddress.idfsLocation		
--		LEFT JOIN dbo.FN_GBL_GIS_Reference(@LangID, 19000005) AS registrationSettlementType ON registrationSettlementType.idfsReference = registrationLocation.idfsType
		
--		-- Alternate address - new for EIDSS7
--		LEFT JOIN @HumanAltInfo lhAlt ON lhAlt.HumanAltidfsLocation = tglAlt.idfsLocation	
--		LEFT JOIN dbo.FN_GBL_GIS_Reference(@LangID, 19000005) AS AltSettlementType ON AltSettlementType.idfsReference = lhAlt.HumanAltidfsSettlementType

--		LEFT JOIN dbo.FN_GBL_Repair(@LangID, 19000100) isEmployed ON IsEmployed.idfsReference = haai.IsEmployedID
--		LEFT JOIN dbo.FN_GBL_Repair(@LangID, 19000100) isStudent ON isStudent.idfsReference = haai.IsStudentID
--		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000054) AS citizenshipType ON ha.idfsNationality = citizenshipType.idfsReference
--		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000500) AS contactPhoneNbrTypeID ON contactPhoneNbrTypeID.idfsReference = haai.ContactPhoneNbrTypeID
--		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000500) AS contactPhone2NbrTypeID ON contactPhone2NbrTypeID.idfsReference = haai.ContactPhone2NbrTypeID
--		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000148) AS personalIDType ON ha.idfsPersonIDType = personalIDType.idfsReference
--		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000061) AS occupationType ON ha.idfsOccupationType = occupationType.idfsReference

--		-- School address - E6 school address was originally stored in idfEmployerAddress with employment type = 'Student'
--		LEFT JOIN dbo.gisLocation SchoolLocation ON SchoolLocation.idfsLocation = tglSchool.idfsLocation
--		LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LangID) lhSchool ON lhSchool.idfsLocation = tglSchool.idfsLocation		
--		LEFT JOIN dbo.FN_GBL_GIS_Reference(@LangID, 19000005) AS schoolSettlementType ON schoolSettlementType.idfsReference = SchoolLocation.idfsType

--		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000042) AS HumanAgeType	ON haai.ReportedAgeUOMID = HumanAgeType.idfsReference

--		WHERE ha.idfHumanActual = @HumanMasterID;
--	END TRY

--	BEGIN CATCH
--		THROW;
--	END CATCH

--END
--GO
PRINT N'Altering Procedure [dbo].[USP_ILI_Aggregate_Delete]...';


GO
-- ================================================================================================
-- Name: USP_ILI_Aggregate_Delete
--
-- Description: Deletes data for ILI Aggregate  
--          
-- Author: Arnold Kennedy
--
-- Revision History:
-- Name                     Date       Change Detail
-- ------------------------ ---------- -----------------------------------------------------------
-- Mark Wilson				04/22/2019 Updated to DELETE instead of UPDATE
-- Leo Tracchia             09/05/2021 Removed hard deletes, updated to soft deletes.
-- Stephen Long             12/01/2022 Added data audit logic for SAUC30 and 31.
--
-- Testing code:
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ILI_Aggregate_Delete]
(
    @idfAggregateHeader AS BIGINT, -- This can be deleted and you can retrieve the value from the detail row if preferred
    @AuditUserName NVARCHAR(200)
)
AS
DECLARE @ReturnMessage VARCHAR(MAX) = 'Success',
        @ReturnCode BIGINT = 0,
        @DataAuditEventTypeid BIGINT = 10016002,
        @ObjectTypeID BIGINT = 10017071,                       -- ILI aggregate
        @ObjectID BIGINT = @idfAggregateHeader,
        @ObjectAggregateHeaderTableID BIGINT = 50791690000000, -- tlbBasicSyndromicSurveillanceAggregateHeader
        @ObjectAggregateDetailTableID BIGINT = 50791790000000, -- tlbBasicSyndromicSurveillanceAggregateDetail
        @DataAuditEventID BIGINT,
        @UserID BIGINT,
        @SiteID BIGINT,
        @EIDSSObjectID NVARCHAR(200) = (
                                           SELECT strFormID
                                           FROM dbo.tlbBasicSyndromicSurveillanceAggregateHeader
                                           WHERE idfAggregateHeader = @idfAggregateHeader
                                       );
BEGIN
    BEGIN TRY
        BEGIN TRANSACTION;

        --Data audit
        SELECT @UserID = a.userid,
               @SiteID = a.siteid
        FROM dbo.FN_UserSiteInformation(@AuditUserName) a;
        EXEC dbo.USSP_GBL_DataAuditEvent_GET @UserID,
                                             @SiteID,
                                             @DataAuditEventTypeID,
                                             @ObjectTypeID,
                                             @ObjectID,
                                             @ObjectAggregateHeaderTableID,
                                             @DataAuditEventID OUTPUT;

        INSERT INTO dbo.tauDataAuditDetailDelete
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfObject,
            AuditCreateUser,
            strObject
        )
        SELECT @DataAuditEventID,
               @ObjectAggregateDetailTableID,
               idfAggregateDetail,
               @AuditUserName,
               @EIDSSObjectID
        FROM dbo.tlbBasicSyndromicSurveillanceAggregateDetail
        WHERE idfAggregateHeader = @idfAggregateHeader 
              AND intRowStatus = 0;
        -- End data audit

        UPDATE dbo.tlbBasicSyndromicSurveillanceAggregateDetail
        SET intRowStatus = 1,
            AuditUpdateDTM = GETDATE(), 
            AuditUpdateUser = @AuditUserName
        WHERE idfAggregateHeader = @idfAggregateHeader;

        UPDATE dbo.tlbBasicSyndromicSurveillanceAggregateHeader
        SET intRowStatus = 1, 
            AuditUpdateDTM = GETDATE(), 
            AuditUpdateUser = @AuditUserName
        WHERE idfAggregateHeader = @idfAggregateHeader;

        -- Data audit
        INSERT INTO dbo.tauDataAuditDetailDelete
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfObject,
            AuditCreateUser,
            strObject
        )
        VALUES
        (@DataAuditEventID, @ObjectAggregateHeaderTableID, @ObjectID, @AuditUserName, @EIDSSObjectID);
        -- End data audit

        IF @@TRANCOUNT > 0
            COMMIT;

        SELECT @ReturnCode 'ReturnCode',
               @ReturnMessage 'ReturnMessage';
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK;

        SET @ReturnMessage
            = 'ErrorNumber: ' + CONVERT(VARCHAR, ERROR_NUMBER()) + ' ErrorSeverity: '
              + CONVERT(VARCHAR, ERROR_SEVERITY()) + ' ErrorState: ' + CONVERT(VARCHAR, ERROR_STATE())
              + ' ErrorProcedure: ' + ISNULL(ERROR_PROCEDURE(), '') + ' ErrorLine: '
              + CONVERT(VARCHAR, ISNULL(ERROR_LINE(), '')) + ' ErrorMessage: ' + ERROR_MESSAGE();

        SET @ReturnCode = ERROR_NUMBER();

        SELECT @ReturnCode 'ReturnCode',
               @ReturnMessage 'ReturnMessage';
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_ILI_Aggregate_Detail_SET]...';


GO
-- ================================================================================================
-- Name: USP_ILI_Aggregate_Detail_SET
--
-- Description:	Inserts or updates Hospital/Sentinel Station Name for the human module ILI 
-- Aggregate edit/set up use cases
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Ann Xiong        02/28/2020 Initial release
-- Ann Xiong        03/05/2020 update RowStatus
-- Leo Tracchia	    03/13/2022 Altered logic to better handle updates
-- Stephen Long     07/12/2022 Removed language id parameter as it is not needed, and added source
--                             system key value.
-- Stephen Long     12/01/2022 Added data audit logic for SAUC30 and 31.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ILI_Aggregate_Detail_SET]
(
    @idfAggregateDetail BIGINT,
    @idfAggregateHeader BIGINT,
    @RowStatus INT,
    @idfHospital BIGINT = NULL,
    @intAge0_4 INT = NULL,
    @intAge5_14 INT = NULL,
    @intAge15_29 INT = NULL,
    @intAge30_64 INT = NULL,
    @intAge65 INT = NULL,
    @inTotalILI INT = NULL,
    @intTotalAdmissions INT = NULL,
    @intILISamples INT = NULL,
    @AuditUserName NVARCHAR(200),
    @DataAuditEventID BIGINT = NULL,
    @EIDSSObjectID NVARCHAR(200) = NULL,
    @RowAction CHAR(1) NULL
)
AS
-- Data audit
DECLARE @AuditUserID BIGINT = NULL,
        @AuditSiteID BIGINT = NULL,
        @ObjectID BIGINT = @idfAggregateDetail,
        @ObjectTableID BIGINT = 50791790000000; -- tlbBasicSyndromicSurveillanceAggregateDetail
DECLARE @ILIAggregateDetailBeforeEdit TABLE
(
    AggregateDetailID BIGINT,
    AggregateHeaderID BIGINT,
    HospitalID BIGINT,
    Age0To4 INT,
    Age5To14 INT,
    Age15To29 INT,
    Age30To64 INT,
    Age65 INT,
    TotalILI INT,
    TotalAdmissions INT,
    ILISamples INT
);
DECLARE @ILIAggregateDetailAfterEdit TABLE
(
    AggregateDetailID BIGINT,
    AggregateHeaderID BIGINT,
    HospitalID BIGINT,
    Age0To4 INT,
    Age5To14 INT,
    Age15To29 INT,
    Age30To64 INT,
    Age65 INT,
    TotalILI INT,
    TotalAdmissions INT,
    ILISamples INT
);
-- End data audit
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        SET @AuditUserName = ISNULL(@AuditUserName, '');

        -- Data audit
        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = userInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo;
        -- End data audit

        IF (@idfAggregateDetail IS NULL OR @idfAggregateDetail = 0)
        BEGIN
            IF (EXISTS
            (
                SELECT idfAggregateDetail
                FROM dbo.tlbBasicSyndromicSurveillanceAggregateDetail
                WHERE idfHospital = @idfHospital
                      AND idfAggregateHeader = @idfAggregateHeader
            )
               )
            BEGIN
                SELECT @idfAggregateDetail = idfAggregateDetail
                FROM dbo.tlbBasicSyndromicSurveillanceAggregateDetail
                WHERE idfHospital = @idfHospital
                      AND idfAggregateHeader = @idfAggregateHeader;

                -- Data audit
                INSERT INTO @ILIAggregateDetailBeforeEdit
                (
                    AggregateDetailID,
                    AggregateHeaderID,
                    HospitalID,
                    Age0To4,
                    Age5To14,
                    Age15To29,
                    Age30To64,
                    Age65,
                    TotalILI,
                    TotalAdmissions,
                    ILISamples
                )
                SELECT idfAggregateDetail,
                       idfAggregateHeader,
                       idfHospital,
                       intAge0_4,
                       intAge5_14,
                       intAge15_29,
                       intAge30_64,
                       intAge65,
                       inTotalILI,
                       intTotalAdmissions,
                       intILISamples
                FROM dbo.tlbBasicSyndromicSurveillanceAggregateDetail
                WHERE idfAggregateDetail = @idfAggregateDetail;
                -- End data audit

                UPDATE dbo.tlbBasicSyndromicSurveillanceAggregateDetail
                SET idfHospital = @idfHospital,
                    intAge0_4 = @intAge0_4,
                    intAge5_14 = @intAge5_14,
                    intAge15_29 = @intAge15_29,
                    intAge30_64 = @intAge30_64,
                    intAge65 = @intAge65,
                    inTotalILI = @inTotalILI,
                    intTotalAdmissions = @intTotalAdmissions,
                    intILISamples = @intILISamples,
                    intRowStatus = @RowStatus,
                    AuditUpdateUser = @AuditUserName,
                    AuditUpdateDTM = GETDATE()
                WHERE idfAggregateDetail = @idfAggregateDetail;

                -- Data audit
                INSERT INTO @ILIAggregateDetailAfterEdit
                (
                    AggregateDetailID,
                    AggregateHeaderID,
                    HospitalID,
                    Age0To4,
                    Age5To14,
                    Age15To29,
                    Age30To64,
                    Age65,
                    TotalILI,
                    TotalAdmissions,
                    ILISamples
                )
                SELECT idfAggregateDetail,
                       idfAggregateHeader,
                       idfHospital,
                       intAge0_4,
                       intAge5_14,
                       intAge15_29,
                       intAge30_64,
                       intAge65,
                       inTotalILI,
                       intTotalAdmissions,
                       intILISamples
                FROM dbo.tlbBasicSyndromicSurveillanceAggregateDetail
                WHERE idfAggregateDetail = @idfAggregateDetail;

                IF @RowStatus = 0
                BEGIN
                    INSERT INTO dbo.tauDataAuditDetailUpdate
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfColumn,
                        idfObject,
                        idfObjectDetail,
                        strOldValue,
                        strNewValue,
                        AuditCreateUser,
                        strObject
                    )
                    SELECT @DataAuditEventID,
                           @ObjectTableID,
                           50791810000000,
                           a.AggregateDetailID,
                           NULL,
                           b.AggregateHeaderID,
                           a.AggregateHeaderID,
                           @AuditUserName,
                           @EIDSSObjectID
                    FROM @ILIAggregateDetailAfterEdit AS a
                        FULL JOIN @ILIAggregateDetailBeforeEdit AS b
                            ON a.AggregateDetailID = b.AggregateDetailID
                    WHERE (a.AggregateHeaderID <> b.AggregateHeaderID)
                          OR (
                                 a.AggregateHeaderID IS NOT NULL
                                 AND b.AggregateHeaderID IS NULL
                             )
                          OR (
                                 a.AggregateHeaderID IS NULL
                                 AND b.AggregateHeaderID IS NOT NULL
                             )

                    INSERT INTO dbo.tauDataAuditDetailUpdate
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfColumn,
                        idfObject,
                        idfObjectDetail,
                        strOldValue,
                        strNewValue,
                        AuditCreateUser,
                        strObject
                    )
                    SELECT @DataAuditEventID,
                           @ObjectTableID,
                           50791820000000,
                           a.AggregateDetailID,
                           NULL,
                           b.HospitalID,
                           a.HospitalID,
                           @AuditUserName,
                           @EIDSSObjectID
                    FROM @ILIAggregateDetailAfterEdit AS a
                        FULL JOIN @ILIAggregateDetailBeforeEdit AS b
                            ON a.AggregateDetailID = b.AggregateDetailID
                    WHERE (a.HospitalID <> b.HospitalID)
                          OR (
                                 a.HospitalID IS NOT NULL
                                 AND b.HospitalID IS NULL
                             )
                          OR (
                                 a.HospitalID IS NULL
                                 AND b.HospitalID IS NOT NULL
                             )

                    INSERT INTO dbo.tauDataAuditDetailUpdate
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfColumn,
                        idfObject,
                        idfObjectDetail,
                        strOldValue,
                        strNewValue,
                        AuditCreateUser,
                        strObject
                    )
                    SELECT @DataAuditEventID,
                           @ObjectTableID,
                           50791830000000,
                           a.AggregateDetailID,
                           NULL,
                           b.Age0To4,
                           a.Age0To4,
                           @AuditUserName,
                           @EIDSSObjectID
                    FROM @ILIAggregateDetailAfterEdit AS a
                        FULL JOIN @ILIAggregateDetailBeforeEdit AS b
                            ON a.AggregateDetailID = b.AggregateDetailID
                    WHERE (a.Age0To4 <> b.Age0To4)
                          OR (
                                 a.Age0To4 IS NOT NULL
                                 AND b.Age0To4 IS NULL
                             )
                          OR (
                                 a.Age0To4 IS NULL
                                 AND b.Age0To4 IS NOT NULL
                             )

                    INSERT INTO dbo.tauDataAuditDetailUpdate
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfColumn,
                        idfObject,
                        idfObjectDetail,
                        strOldValue,
                        strNewValue,
                        AuditCreateUser,
                        strObject
                    )
                    SELECT @DataAuditEventID,
                           @ObjectTableID,
                           50815350000000,
                           a.AggregateDetailID,
                           NULL,
                           b.Age5To14,
                           a.Age5To14,
                           @AuditUserName,
                           @EIDSSObjectID
                    FROM @ILIAggregateDetailAfterEdit AS a
                        FULL JOIN @ILIAggregateDetailBeforeEdit AS b
                            ON a.AggregateDetailID = b.AggregateDetailID
                    WHERE (a.Age5To14 <> b.Age5To14)
                          OR (
                                 a.Age5To14 IS NOT NULL
                                 AND b.Age5To14 IS NULL
                             )
                          OR (
                                 a.Age5To14 IS NULL
                                 AND b.Age5To14 IS NOT NULL
                             )

                    INSERT INTO dbo.tauDataAuditDetailUpdate
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfColumn,
                        idfObject,
                        idfObjectDetail,
                        strOldValue,
                        strNewValue,
                        AuditCreateUser,
                        strObject
                    )
                    SELECT @DataAuditEventID,
                           @ObjectTableID,
                           50791850000000,
                           a.AggregateDetailID,
                           NULL,
                           b.Age15To29,
                           a.Age15To29,
                           @AuditUserName,
                           @EIDSSObjectID
                    FROM @ILIAggregateDetailAfterEdit AS a
                        FULL JOIN @ILIAggregateDetailBeforeEdit AS b
                            ON a.AggregateDetailID = b.AggregateDetailID
                    WHERE (a.Age15To29 <> b.Age15To29)
                          OR (
                                 a.Age15To29 IS NOT NULL
                                 AND b.Age15To29 IS NULL
                             )
                          OR (
                                 a.Age15To29 IS NULL
                                 AND b.Age15To29 IS NOT NULL
                             )

                    INSERT INTO dbo.tauDataAuditDetailUpdate
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfColumn,
                        idfObject,
                        idfObjectDetail,
                        strOldValue,
                        strNewValue,
                        AuditCreateUser,
                        strObject
                    )
                    SELECT @DataAuditEventID,
                           @ObjectTableID,
                           50791860000000,
                           a.AggregateDetailID,
                           NULL,
                           b.Age30To64,
                           a.Age30To64,
                           @AuditUserName,
                           @EIDSSObjectID
                    FROM @ILIAggregateDetailAfterEdit AS a
                        FULL JOIN @ILIAggregateDetailBeforeEdit AS b
                            ON a.AggregateDetailID = b.AggregateDetailID
                    WHERE (a.Age30To64 <> b.Age30To64)
                          OR (
                                 a.Age30To64 IS NOT NULL
                                 AND b.Age30To64 IS NULL
                             )
                          OR (
                                 a.Age30To64 IS NULL
                                 AND b.Age30To64 IS NOT NULL
                             )

                    INSERT INTO dbo.tauDataAuditDetailUpdate
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfColumn,
                        idfObject,
                        idfObjectDetail,
                        strOldValue,
                        strNewValue,
                        AuditCreateUser,
                        strObject
                    )
                    SELECT @DataAuditEventID,
                           @ObjectTableID,
                           50791870000000,
                           a.AggregateDetailID,
                           NULL,
                           b.Age65,
                           a.Age65,
                           @AuditUserName,
                           @EIDSSObjectID
                    FROM @ILIAggregateDetailAfterEdit AS a
                        FULL JOIN @ILIAggregateDetailBeforeEdit AS b
                            ON a.AggregateDetailID = b.AggregateDetailID
                    WHERE (a.Age65 <> b.Age65)
                          OR (
                                 a.Age65 IS NOT NULL
                                 AND b.Age65 IS NULL
                             )
                          OR (
                                 a.Age65 IS NULL
                                 AND b.Age65 IS NOT NULL
                             )

                    INSERT INTO dbo.tauDataAuditDetailUpdate
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfColumn,
                        idfObject,
                        idfObjectDetail,
                        strOldValue,
                        strNewValue,
                        AuditCreateUser,
                        strObject
                    )
                    SELECT @DataAuditEventID,
                           @ObjectTableID,
                           50791880000000,
                           a.AggregateDetailID,
                           NULL,
                           b.TotalILI,
                           a.TotalILI,
                           @AuditUserName,
                           @EIDSSObjectID
                    FROM @ILIAggregateDetailAfterEdit AS a
                        FULL JOIN @ILIAggregateDetailBeforeEdit AS b
                            ON a.AggregateDetailID = b.AggregateDetailID
                    WHERE (a.TotalILI <> b.TotalILI)
                          OR (
                                 a.TotalILI IS NOT NULL
                                 AND b.TotalILI IS NULL
                             )
                          OR (
                                 a.TotalILI IS NULL
                                 AND b.TotalILI IS NOT NULL
                             )

                    INSERT INTO dbo.tauDataAuditDetailUpdate
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfColumn,
                        idfObject,
                        idfObjectDetail,
                        strOldValue,
                        strNewValue,
                        AuditCreateUser,
                        strObject
                    )
                    SELECT @DataAuditEventID,
                           @ObjectTableID,
                           50791890000000,
                           a.AggregateDetailID,
                           NULL,
                           b.TotalAdmissions,
                           a.TotalAdmissions,
                           @AuditUserName,
                           @EIDSSObjectID
                    FROM @ILIAggregateDetailAfterEdit AS a
                        FULL JOIN @ILIAggregateDetailBeforeEdit AS b
                            ON a.AggregateDetailID = b.AggregateDetailID
                    WHERE (a.TotalAdmissions <> b.TotalAdmissions)
                          OR (
                                 a.TotalAdmissions IS NOT NULL
                                 AND b.TotalAdmissions IS NULL
                             )
                          OR (
                                 a.TotalAdmissions IS NULL
                                 AND b.TotalAdmissions IS NOT NULL
                             )

                    INSERT INTO dbo.tauDataAuditDetailUpdate
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfColumn,
                        idfObject,
                        idfObjectDetail,
                        strOldValue,
                        strNewValue,
                        AuditCreateUser,
                        strObject
                    )
                    SELECT @DataAuditEventID,
                           @ObjectTableID,
                           50791900000000,
                           a.AggregateDetailID,
                           NULL,
                           b.ILISamples,
                           a.ILISamples,
                           @AuditUserName,
                           @EIDSSObjectID
                    FROM @ILIAggregateDetailAfterEdit AS a
                        FULL JOIN @ILIAggregateDetailBeforeEdit AS b
                            ON a.AggregateDetailID = b.AggregateDetailID
                    WHERE (a.ILISamples <> b.ILISamples)
                          OR (
                                 a.ILISamples IS NOT NULL
                                 AND b.ILISamples IS NULL
                             )
                          OR (
                                 a.ILISamples IS NULL
                                 AND b.ILISamples IS NOT NULL
                             )
                END
                ELSE
                BEGIN
                    INSERT INTO dbo.tauDataAuditDetailDelete
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfObject,
                        AuditCreateUser,
                        strObject
                    )
                    VALUES
                    (@DataAuditEventid, @ObjectTableID, @idfAggregateDetail, @AuditUserName, @EIDSSObjectID);
                END
            -- End data audit
            END
            ELSE
            BEGIN
                EXEC dbo.USP_GBL_NEXTKEYID_GET 'tlbBasicSyndromicSurveillanceAggregateDetail',
                                               @idfAggregateDetail OUTPUT;

                INSERT INTO dbo.tlbBasicSyndromicSurveillanceAggregateDetail
                (
                    idfAggregateDetail,
                    idfAggregateHeader,
                    idfHospital,
                    intAge0_4,
                    intAge5_14,
                    intAge15_29,
                    intAge30_64,
                    intAge65,
                    inTotalILI,
                    intTotalAdmissions,
                    intILISamples,
                    rowguid,
                    strMaintenanceFlag,
                    strReservedAttribute,
                    SourceSystemNameID,
                    SourceSystemKeyValue,
                    AuditCreateUser,
                    AuditCreateDTM
                )
                VALUES
                (@idfAggregateDetail,
                 @idfAggregateHeader,
                 @idfHospital,
                 @intAge0_4,
                 @intAge5_14,
                 @intAge15_29,
                 @intAge30_64,
                 @intAge65,
                 @inTotalILI,
                 @intTotalAdmissions,
                 @intILISamples,
                 NEWID(),
                 'system',
                 'V7 ILI Aggregate Form',
                 10519001,
                 '[{"idfAggregateDetail":' + CAST(@idfAggregateDetail AS NVARCHAR(300)) + ',"idfAggregateHeader":'
                 + CAST(@idfAggregateHeader AS NVARCHAR(300)) + '}]',
                 @AuditUserName,
                 GETDATE()
                );

                -- Data audit
                INSERT INTO dbo.tauDataAuditDetailCreate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    SourceSystemNameID,
                    SourceSystemKeyValue,
                    AuditCreateUser,
                    strObject
                )
                VALUES
                (@DataAuditEventID,
                 @ObjectTableID,
                 @idfAggregateHeader,
                 10519001,
                 '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
                 + CAST(@ObjectTableID AS NVARCHAR(300)) + '}]',
                 @AuditUserName,
                 @EIDSSObjectID
                );
            -- End data audit

            END
        END
        ELSE
        BEGIN
            -- Data audit
            INSERT INTO @ILIAggregateDetailBeforeEdit
            (
                AggregateDetailID,
                AggregateHeaderID,
                HospitalID,
                Age0To4,
                Age5To14,
                Age15To29,
                Age30To64,
                Age65,
                TotalILI,
                TotalAdmissions,
                ILISamples
            )
            SELECT idfAggregateDetail,
                   idfAggregateHeader,
                   idfHospital,
                   intAge0_4,
                   intAge5_14,
                   intAge15_29,
                   intAge30_64,
                   intAge65,
                   inTotalILI,
                   intTotalAdmissions,
                   intILISamples
            FROM dbo.tlbBasicSyndromicSurveillanceAggregateDetail
            WHERE idfAggregateDetail = @idfAggregateDetail;
            -- End data audit

            UPDATE dbo.tlbBasicSyndromicSurveillanceAggregateDetail
            SET idfHospital = @idfHospital,
                intAge0_4 = @intAge0_4,
                intAge5_14 = @intAge5_14,
                intAge15_29 = @intAge15_29,
                intAge30_64 = @intAge30_64,
                intAge65 = @intAge65,
                inTotalILI = @inTotalILI,
                intTotalAdmissions = @intTotalAdmissions,
                intILISamples = @intILISamples,
                intRowStatus = @RowStatus,
                AuditUpdateUser = @AuditUserName,
                AuditUpdateDTM = GETDATE()
            WHERE idfAggregateDetail = @idfAggregateDetail;

            -- Data audit
            INSERT INTO @ILIAggregateDetailAfterEdit
            (
                AggregateDetailID,
                AggregateHeaderID,
                HospitalID,
                Age0To4,
                Age5To14,
                Age15To29,
                Age30To64,
                Age65,
                TotalILI,
                TotalAdmissions,
                ILISamples
            )
            SELECT idfAggregateDetail,
                   idfAggregateHeader,
                   idfHospital,
                   intAge0_4,
                   intAge5_14,
                   intAge15_29,
                   intAge30_64,
                   intAge65,
                   inTotalILI,
                   intTotalAdmissions,
                   intILISamples
            FROM dbo.tlbBasicSyndromicSurveillanceAggregateDetail
            WHERE idfAggregateDetail = @idfAggregateDetail;

            IF @RowStatus = 0
            BEGIN
                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       50791810000000,
                       a.AggregateDetailID,
                       NULL,
                       b.AggregateHeaderID,
                       a.AggregateHeaderID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @ILIAggregateDetailAfterEdit AS a
                    FULL JOIN @ILIAggregateDetailBeforeEdit AS b
                        ON a.AggregateDetailID = b.AggregateDetailID
                WHERE (a.AggregateHeaderID <> b.AggregateHeaderID)
                      OR (
                             a.AggregateHeaderID IS NOT NULL
                             AND b.AggregateHeaderID IS NULL
                         )
                      OR (
                             a.AggregateHeaderID IS NULL
                             AND b.AggregateHeaderID IS NOT NULL
                         )

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       50791820000000,
                       a.AggregateDetailID,
                       NULL,
                       b.HospitalID,
                       a.HospitalID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @ILIAggregateDetailAfterEdit AS a
                    FULL JOIN @ILIAggregateDetailBeforeEdit AS b
                        ON a.AggregateDetailID = b.AggregateDetailID
                WHERE (a.HospitalID <> b.HospitalID)
                      OR (
                             a.HospitalID IS NOT NULL
                             AND b.HospitalID IS NULL
                         )
                      OR (
                             a.HospitalID IS NULL
                             AND b.HospitalID IS NOT NULL
                         )

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       50791830000000,
                       a.AggregateDetailID,
                       NULL,
                       b.Age0To4,
                       a.Age0To4,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @ILIAggregateDetailAfterEdit AS a
                    FULL JOIN @ILIAggregateDetailBeforeEdit AS b
                        ON a.AggregateDetailID = b.AggregateDetailID
                WHERE (a.Age0To4 <> b.Age0To4)
                      OR (
                             a.Age0To4 IS NOT NULL
                             AND b.Age0To4 IS NULL
                         )
                      OR (
                             a.Age0To4 IS NULL
                             AND b.Age0To4 IS NOT NULL
                         )

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       50815350000000,
                       a.AggregateDetailID,
                       NULL,
                       b.Age5To14,
                       a.Age5To14,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @ILIAggregateDetailAfterEdit AS a
                    FULL JOIN @ILIAggregateDetailBeforeEdit AS b
                        ON a.AggregateDetailID = b.AggregateDetailID
                WHERE (a.Age5To14 <> b.Age5To14)
                      OR (
                             a.Age5To14 IS NOT NULL
                             AND b.Age5To14 IS NULL
                         )
                      OR (
                             a.Age5To14 IS NULL
                             AND b.Age5To14 IS NOT NULL
                         )

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       50791850000000,
                       a.AggregateDetailID,
                       NULL,
                       b.Age15To29,
                       a.Age15To29,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @ILIAggregateDetailAfterEdit AS a
                    FULL JOIN @ILIAggregateDetailBeforeEdit AS b
                        ON a.AggregateDetailID = b.AggregateDetailID
                WHERE (a.Age15To29 <> b.Age15To29)
                      OR (
                             a.Age15To29 IS NOT NULL
                             AND b.Age15To29 IS NULL
                         )
                      OR (
                             a.Age15To29 IS NULL
                             AND b.Age15To29 IS NOT NULL
                         )

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       50791860000000,
                       a.AggregateDetailID,
                       NULL,
                       b.Age30To64,
                       a.Age30To64,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @ILIAggregateDetailAfterEdit AS a
                    FULL JOIN @ILIAggregateDetailBeforeEdit AS b
                        ON a.AggregateDetailID = b.AggregateDetailID
                WHERE (a.Age30To64 <> b.Age30To64)
                      OR (
                             a.Age30To64 IS NOT NULL
                             AND b.Age30To64 IS NULL
                         )
                      OR (
                             a.Age30To64 IS NULL
                             AND b.Age30To64 IS NOT NULL
                         )

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       50791870000000,
                       a.AggregateDetailID,
                       NULL,
                       b.Age65,
                       a.Age65,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @ILIAggregateDetailAfterEdit AS a
                    FULL JOIN @ILIAggregateDetailBeforeEdit AS b
                        ON a.AggregateDetailID = b.AggregateDetailID
                WHERE (a.Age65 <> b.Age65)
                      OR (
                             a.Age65 IS NOT NULL
                             AND b.Age65 IS NULL
                         )
                      OR (
                             a.Age65 IS NULL
                             AND b.Age65 IS NOT NULL
                         )

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       50791880000000,
                       a.AggregateDetailID,
                       NULL,
                       b.TotalILI,
                       a.TotalILI,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @ILIAggregateDetailAfterEdit AS a
                    FULL JOIN @ILIAggregateDetailBeforeEdit AS b
                        ON a.AggregateDetailID = b.AggregateDetailID
                WHERE (a.TotalILI <> b.TotalILI)
                      OR (
                             a.TotalILI IS NOT NULL
                             AND b.TotalILI IS NULL
                         )
                      OR (
                             a.TotalILI IS NULL
                             AND b.TotalILI IS NOT NULL
                         )

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       50791890000000,
                       a.AggregateDetailID,
                       NULL,
                       b.TotalAdmissions,
                       a.TotalAdmissions,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @ILIAggregateDetailAfterEdit AS a
                    FULL JOIN @ILIAggregateDetailBeforeEdit AS b
                        ON a.AggregateDetailID = b.AggregateDetailID
                WHERE (a.TotalAdmissions <> b.TotalAdmissions)
                      OR (
                             a.TotalAdmissions IS NOT NULL
                             AND b.TotalAdmissions IS NULL
                         )
                      OR (
                             a.TotalAdmissions IS NULL
                             AND b.TotalAdmissions IS NOT NULL
                         )

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       50791900000000,
                       a.AggregateDetailID,
                       NULL,
                       b.ILISamples,
                       a.ILISamples,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @ILIAggregateDetailAfterEdit AS a
                    FULL JOIN @ILIAggregateDetailBeforeEdit AS b
                        ON a.AggregateDetailID = b.AggregateDetailID
                WHERE (a.ILISamples <> b.ILISamples)
                      OR (
                             a.ILISamples IS NOT NULL
                             AND b.ILISamples IS NULL
                         )
                      OR (
                             a.ILISamples IS NULL
                             AND b.ILISamples IS NOT NULL
                         )
            END
            ELSE
            BEGIN
                INSERT INTO dbo.tauDataAuditDetailDelete
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    AuditCreateUser,
                    strObject
                )
                VALUES
                (@DataAuditEventid, @ObjectTableID, @idfAggregateDetail, @AuditUserName, @EIDSSObjectID);
            END
        -- End data audit
        END
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[usp_Observation_Delete]...';


GO

--=====================================================================================================
-- Created by:				Joan Li
-- Description:				06/21/2017: Created based on V6 spObservation_Delete :  V7 USP75: call this
--                          delete from tables :tlbActivityParameters(triggers);tflObservationFiltered
-- Revision History:
--		Name       Date       Change Detail
-- --------------- ---------- --------------------------------------------------------------------
--	Mark Wilson    10/21/2021 added @User and auditing
--  Manickandan Govindarajan 12/06/2022 SAUC30 and 31
/*
----testing code:
DECLARE @idfObservation bigint
EXEC USP_OBSERVATION_DELETE 
	@idfObservation, 
	'parkermason'

----related fact data from
select * from tlbActivityParameters
select * from tflObservationFiltered
*/
--=====================================================================================================

ALTER   PROC	[dbo].[usp_Observation_Delete]
(
	@ID AS BIGINT,
	@User NVARCHAR(100) = NULL,
	@idfDataAuditEvent bigint

)


AS

	declare @idfObjectTable_tlbActivityParameters bigint =75410000000;

	declare @idfObjectTable_tlbObservation bigint =75640000000;

	INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject )
		SELECT @idfDataAuditEvent, @idfObjectTable_tlbActivityParameters, idfActivityParameters
			from dbo.tlbActivityParameters WHERE idfObservation = @ID

	UPDATE dbo.tlbActivityParameters
	SET intRowStatus = 1,
		AuditUpdateUser = @User,
		AuditUpdateDTM = GETDATE()
	WHERE 	idfObservation = @ID


	DELETE FROM dbo.tflObservationFiltered 
	WHERE idfObservation = @ID

	INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject )
		SELECT @idfDataAuditEvent, @idfObjectTable_tlbObservation, idfObservation
			from dbo.tlbObservation WHERE idfObservation = @ID

	UPDATE dbo.tlbObservation 
	SET intRowStatus = 1,
		AuditUpdateUser = @User,
		AuditUpdateDTM = GETDATE()
	WHERE 	idfObservation = @ID
GO
PRINT N'Altering Procedure [dbo].[USP_REF_BASEREFERENCE_Filtered_GETList]...';


GO
-- ============================================================================
-- Name: USP_REF_BASEREFERENCE_Filtered_GETList
-- Description:	Get the reference types for Base Reference Editor.
--
-- Author: Mark Wilson
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -----------------------------------------------
-- Mark Wilson		07/15/2022 new sp based on USP_REF_BASEREFERENCE_GETList
-- Doug Albanese	12/01/2022 Added LOINC on the return
--
/*

exec USP_REF_BASEREFERENCE_Filtered_GETList 19000076, 'en-US', @PageSize=200

*/
-- ============================================================================
ALTER PROCEDURE [dbo].[USP_REF_BASEREFERENCE_Filtered_GETList]
	 @idfsReferenceType	   BIGINT
	,@langID			   NVARCHAR(50)
	,@advancedSearch	   NVARCHAR(100) = NULL
	,@pageNo			   INT = 1
	,@pageSize			   INT = 10 
	,@sortColumn		   NVARCHAR(30) = 'strName' 
	,@sortOrder			   NVARCHAR(4) = 'asc'

AS
BEGIN	
	BEGIN TRY
		DECLARE @firstRec INT
		DECLARE @lastRec INT
		DECLARE @t TABLE
		( 
			idfsBaseReference BIGINT, 
			idfsReferenceType BIGINT, 
			strDefault		  NVARCHAR(2000), 
			strName			  NVARCHAR(2000),
			intHACode		  INT,
			strHACode		  NVARCHAR(4000),
			strHACodeNames	  NVARCHAR(4000),
			intOrder		  INT,
			LOINC			  NVARCHAR(200)
		)

		SET @firstRec = (@pageNo-1)* @pagesize
		SET @lastRec = (@pageNo*@pageSize+1)
		
		IF( @advancedSearch IS NOT NULL )
		BEGIN
			INSERT INTO @T
			SELECT * FROM
			(
			   SELECT 
				  br.idfsBaseReference, 
				  br.idfsReferenceType, 
				  br.strDefault, 
				  brs.[name] AS strName,
				  br.intHACode, 
				  dbo.FN_GBL_HACode_ToCSV(@LangID,br.intHACode) AS strHACode,			
				  dbo.FN_GBL_HACodeNames_ToCSV(@LangID,br.intHACode) AS strHACodeNames,
				  br.intOrder,
				  LCM.LOINC_NUM AS LOINC
			   FROM  dbo.trtBaseReference br
			   JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @idfsReferenceType) brS ON br.idfsBaseReference = brs.idfsReference 
			   LEFT JOIN LOINCEidssMapping LCM ON LCM.idfsBaseReference = br.idfsBaseReference
			   WHERE 
				   br.intRowStatus = 0 AND brs.intRowStatus = 0 
				   AND br.idfsBaseReference NOT IN (19000146,19000011,19000019,19000537,19000529,19000530,19000531,19000532,19000533,19000534,19000535,19000125,19000123,19000122,
													19000143,19000050,19000126,19000121,19000075,19000124,19000012,19000164,19000019,19000503,19000530,19000510,19000506,19000505,
													19000509,19000511,19000508,19000507,19000022,19000131,19000070,19000066,19000071,19000069,19000029,19000032,19000101,19000525,
													19000033,19000532,19000534,19000533,19000152,19000056,19000060,19000109,19000062,19000045,19000046,19000516,19000074,19000147,
													19000130,19000535,19000531,19000087,19000079,19000529,19000119,19000524,19000084,19000519,19000166,19000086,19000090,19000141,
													19000140)
				
			) AS S
			WHERE 
			( 
				strDefault LIKE '%' + @advancedSearch + '%' OR
				strName LIKE '%' + @advancedSearch + '%' OR
				strHACode LIKE '%' + @advancedSearch + '%' OR 
				strHACodeNames LIKE '%' + @advancedSearch + '%' 
			)
		END ELSE
			INSERT INTO @T
			SELECT 
				br.[idfsBaseReference], 
				br.[idfsReferenceType], 
				br.[strDefault], 
				brs.name AS strName,
				br.[intHACode], 
				dbo.FN_GBL_HACode_ToCSV(@LangID,br.[intHACode]) AS strHACode,			
				dbo.FN_GBL_HACodeNames_ToCSV(@LangID,br.[intHACode]) AS strHACodeNames,
				br.[intOrder],
				LCM.LOINC_NUM AS LOINC
			FROM  dbo.trtBaseReference br
			JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @idfsReferenceType) brS ON br.idfsBaseReference = brs.idfsReference 
			LEFT JOIN LOINCEidssMapping LCM ON LCM.idfsBaseReference = br.idfsBaseReference
			WHERE br.[idfsReferenceType] = @idfsReferenceType 
			   AND br.intRowStatus = 0 
			   AND brs.intRowStatus = 0 
			   AND br.idfsBaseReference NOT IN (19000146,19000011,19000019,19000537,19000529,19000530,19000531,19000532,19000533,19000534,19000535,19000125,19000123,19000122,
												 19000143,19000050,19000126,19000121,19000075,19000124,19000012,19000164,19000019,19000503,19000530,19000510,19000506,19000505,
												 19000509,19000511,19000508,19000507,19000022,19000131,19000070,19000066,19000071,19000069,19000029,19000032,19000101,19000525,
												 19000033,19000532,19000534,19000533,19000152,19000056,19000060,19000109,19000062,19000045,19000046,19000516,19000074,19000147,
												 19000130,19000535,19000531,19000087,19000079,19000529,19000119,19000524,19000084,19000519,19000166,19000086,19000090,19000141,
												 19000140);

		WITH CTEResults AS
		(
			SELECT ROW_NUMBER() OVER ( ORDER BY 
				CASE WHEN @sortColumn = 'idfsBaseReference' AND @SortOrder = 'asc' THEN idfsBaseReference END ASC,
				CASE WHEN @sortColumn = 'idfsBaseReference' AND @SortOrder = 'desc' THEN idfsBaseReference END DESC,
				CASE WHEN @sortColumn = 'idfsReferenceType' AND @SortOrder = 'asc' THEN idfsReferenceType END ASC,
				CASE WHEN @sortColumn = 'idfsReferenceType' AND @SortOrder = 'desc' THEN idfsReferenceType END DESC,
				CASE WHEN @sortColumn = 'strdefault' AND @SortOrder = 'asc' THEN strdefault END ASC,
				CASE WHEN @sortColumn = 'strdefault' AND @SortOrder = 'desc' THEN strdefault END DESC,
				CASE WHEN @sortColumn = 'strName' AND @SortOrder = 'asc' THEN strName END ASC,
				CASE WHEN @sortColumn = 'strName' AND @SortOrder = 'desc' THEN strName END DESC,
				CASE WHEN @sortColumn = 'intHACode' AND @SortOrder = 'asc' THEN intHACode END ASC,
				CASE WHEN @sortColumn = 'intHACode' AND @SortOrder = 'desc' THEN intHACode END DESC,
				CASE WHEN @sortColumn = 'strHACode' AND @SortOrder = 'asc' THEN strHACode END ASC,
				CASE WHEN @sortColumn = 'strHACode' AND @SortOrder = 'desc' THEN strHACode END DESC,
				CASE WHEN @sortColumn = 'strHACodeNames' AND @SortOrder = 'asc' THEN strHACodeNames END ASC,
				CASE WHEN @sortColumn = 'strHACodeNames' AND @SortOrder = 'desc' THEN strHACodeNames END DESC,
				CASE WHEN @sortColumn = 'intorder' AND @SortOrder = 'asc' THEN intOrder END ASC,
				CASE WHEN @sortColumn = 'intorder' AND @SortOrder = 'desc' THEN intOrder END DESC,
				CASE WHEN @sortColumn = 'LOINC' AND @SortOrder = 'asc' THEN LOINC END ASC,
				CASE WHEN @sortColumn = 'LOINC' AND @SortOrder = 'desc' THEN LOINC END DESC
				,IIF( @sortColumn = 'intOrder',strName,NULL) ASC
		) AS ROWNUM,		
		COUNT(*) OVER () AS 
				TotalRowCount,
				idfsBaseReference, 
				idfsReferenceType, 
				strDefault, 
				strName,
				intHACode, 
				strHACode,			
				strHACodeNames,
				intOrder,
				LOINC
			FROM @T
		)
			SELECT
				TotalRowCount,
				idfsBaseReference, 
				idfsReferenceType, 
				strDefault, 
				strName,
				intHACode, 
				strHACode,			
				strHACodeNames,
				intOrder,
				LOINC,
				TotalPages = (TotalRowCount/@pageSize)+IIF(TotalRowCount%@pageSize>0,1,0),
				CurrentPage = @pageNo 
		FROM CTEResults
		WHERE RowNum > @firstRec AND RowNum < @lastRec 	
	END TRY
	BEGIN CATCH
		THROW;
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_REF_BASEREFERENCE_GETList]...';


GO
-- ============================================================================
-- Name: USP_REF_MEASUREREFERENCE_GETList
-- Description:	Get the measure references for reference listings.
--                      
-- Author: Ricky Moss
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -----------------------------------------------
-- Ricky Moss		02/12/2018 Initial release.
-- Mike Kornegay	03/15/2022 Removed advanced search against idfBaseReference and idfsReferenceType
--							   as this will produce unexpected results for users when searching since fields
--							   are not visible.
-- Doug Albanese	12/01/2022 Added LOINC on the return
--
-- exec USP_REF_BASEREFERENCE_GETList 19000146, 'en'
-- exec USP_REF_BASEREFERENCE_GETList 19000087, 'en'
-- exec USP_REF_BASEREFERENCE_GETList 19000145, 'en', 'Age #10'
-- ============================================================================
ALTER PROCEDURE [dbo].[USP_REF_BASEREFERENCE_GETList]
	 @idfsReferenceType	BIGINT
	,@langID NVARCHAR(50)
	,@advancedSearch NVARCHAR(100) = NULL
	,@pageNo INT = 1
	,@pageSize INT = 10 
	,@sortColumn NVARCHAR(30) = 'strName' 
	,@sortOrder NVARCHAR(4) = 'asc'

AS
BEGIN	
	BEGIN TRY
		DECLARE @firstRec		 INT
		DECLARE @lastRec		 INT
		DECLARE @t TABLE( 
			idfsBaseReference	 BIGINT, 
			idfsReferenceType	 BIGINT, 
			strDefault			 NVARCHAR(2000), 
			strName				 NVARCHAR(2000),
			intHACode			 INT,
			strHACode			 NVARCHAR(4000),
			strHACodeNames		 NVARCHAR(4000),
			intOrder			 INT,
			LOINC				 NVARCHAR(200)
		 )

		SET @firstRec = (@pageNo-1)* @pagesize
		SET @lastRec = (@pageNo*@pageSize+1)
		
		IF( @advancedSearch IS NOT NULL )
		BEGIN
			INSERT INTO @T
			SELECT * FROM
			(
			   SELECT 
			   br.[idfsBaseReference], 
			   br.[idfsReferenceType], 
			   br.[strDefault], 
			   brs.name AS strName,
			   br.[intHACode], 
			   dbo.FN_GBL_HACode_ToCSV(@LangID,br.[intHACode]) AS strHACode,			
			   dbo.FN_GBL_HACodeNames_ToCSV(@LangID,br.[intHACode]) AS strHACodeNames,
			   br.[intOrder],
			   LCM.LOINC_NUM AS LOINC
			   FROM  dbo.trtBaseReference br
			   JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @idfsReferenceType) brS
			   ON br.idfsBaseReference = brs.idfsReference 
			   LEFT JOIN LOINCEidssMapping LCM
			   on LCM.idfsBaseReference = br.idfsBaseReference
			   WHERE 
				   br.intRowStatus = 0 AND brs.intRowStatus = 0 
				
			) AS S
			WHERE 
				(
				  strDefault LIKE '%' + @advancedSearch + '%' OR
				  strName LIKE '%' + @advancedSearch + '%' OR
				  strHACode LIKE '%' + @advancedSearch + '%' OR 
				  strHACodeNames LIKE '%' + @advancedSearch + '%' 
				)
		END ELSE
			INSERT INTO @T
			SELECT 
				br.[idfsBaseReference], 
				br.[idfsReferenceType], 
				br.[strDefault], 
				brs.name AS strName,
				br.[intHACode], 
				dbo.FN_GBL_HACode_ToCSV(@LangID,br.[intHACode]) AS strHACode,			
				dbo.FN_GBL_HACodeNames_ToCSV(@LangID,br.[intHACode]) AS strHACodeNames,
				br.[intOrder],
				LCM.LOINC_NUM AS LOINC
			FROM  dbo.trtBaseReference br
			JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @idfsReferenceType) brS
			ON br.idfsBaseReference = brs.idfsReference
			LEFT JOIN LOINCEidssMapping LCM
			   on LCM.idfsBaseReference = br.idfsBaseReference
			WHERE br.[idfsReferenceType] = @idfsReferenceType AND br.intRowStatus = 0 AND brs.intRowStatus = 0;

		WITH CTEResults AS
		(
			SELECT ROW_NUMBER() OVER ( ORDER BY 
				CASE WHEN @sortColumn = 'idfsBaseReference' AND @SortOrder = 'asc' THEN idfsBaseReference END ASC,
				CASE WHEN @sortColumn = 'idfsBaseReference' AND @SortOrder = 'desc' THEN idfsBaseReference END DESC,
				CASE WHEN @sortColumn = 'idfsReferenceType' AND @SortOrder = 'asc' THEN idfsReferenceType END ASC,
				CASE WHEN @sortColumn = 'idfsReferenceType' AND @SortOrder = 'desc' THEN idfsReferenceType END DESC,
				CASE WHEN @sortColumn = 'strdefault' AND @SortOrder = 'asc' THEN strdefault END ASC,
				CASE WHEN @sortColumn = 'strdefault' AND @SortOrder = 'desc' THEN strdefault END DESC,
				CASE WHEN @sortColumn = 'strName' AND @SortOrder = 'asc' THEN strName END ASC,
				CASE WHEN @sortColumn = 'strName' AND @SortOrder = 'desc' THEN strName END DESC,
				CASE WHEN @sortColumn = 'intHACode' AND @SortOrder = 'asc' THEN intHACode END ASC,
				CASE WHEN @sortColumn = 'intHACode' AND @SortOrder = 'desc' THEN intHACode END DESC,
				CASE WHEN @sortColumn = 'strHACode' AND @SortOrder = 'asc' THEN strHACode END ASC,
				CASE WHEN @sortColumn = 'strHACode' AND @SortOrder = 'desc' THEN strHACode END DESC,
				CASE WHEN @sortColumn = 'strHACodeNames' AND @SortOrder = 'asc' THEN strHACodeNames END ASC,
				CASE WHEN @sortColumn = 'strHACodeNames' AND @SortOrder = 'desc' THEN strHACodeNames END DESC,
				CASE WHEN @sortColumn = 'intorder' AND @SortOrder = 'asc' THEN intOrder END ASC,
				CASE WHEN @sortColumn = 'intorder' AND @SortOrder = 'desc' THEN intOrder END DESC,
				CASE WHEN @sortColumn = 'LOINC' AND @SortOrder = 'asc' THEN LOINC END ASC,
				CASE WHEN @sortColumn = 'LOINC' AND @SortOrder = 'desc' THEN LOINC END DESC
				,IIF( @sortColumn = 'intOrder',strName,NULL) ASC
		) AS ROWNUM,		
		COUNT(*) OVER () AS 
				TotalRowCount,
				idfsBaseReference, 
				idfsReferenceType, 
				strDefault, 
				strName,
				intHACode, 
				strHACode,			
				strHACodeNames,
				intOrder,
				LOINC
			FROM @T
		)
			SELECT
				TotalRowCount,
				idfsBaseReference, 
				idfsReferenceType, 
				strDefault, 
				strName,
				intHACode, 
				strHACode,			
				strHACodeNames,
				intOrder,
				LOINC,
				TotalPages = (TotalRowCount/@pageSize)+IIF(TotalRowCount%@pageSize>0,1,0),
				CurrentPage = @pageNo 
		FROM CTEResults
		WHERE RowNum > @firstRec AND RowNum < @lastRec 	
	END TRY
	BEGIN CATCH
		THROW;
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_REF_BASEREFERENCE_SET]...';


GO
-- ================================================================================================
-- Name: USP_REF_BASEREFERENCE_SET
--
-- Description:	Creates or saves a base reference
--                      
-- Author: Ricky Moss
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Ricky Moss		02/10/2018 Initial release.
-- Ricky Moss		02/19/2018 Updated the portion of the query to see if there reference 
--                             currently exists
-- Ricky Moss		09/30/2019 Reference duplicate check
-- Ann Xiong		11/20/2020 Modified to insert strName in trtStringNameTranslation
-- Mark Wilson		06/17/2021 Updated to check for dupes, etc.
-- Mark Wilson		07/07/2021 updated to use FN_GBL_LanguageCode_GET()
-- Mark Wilson		08/13/2021 updated to remove strDefault from USSP_GBL_StringTranslation_SET
-- Stephen Long     07/16/2022 Added site alert logic.
-- Doug Albanese	11/30/2022 Added LOINC
--
-- exec USP_REF_BASEREFERENCE_SET NULL, 19000005, 'en-US', 'ABCDEFGhij', 'ABC123', 32, 0
-- exec USP_REF_BASEREFERENCE_SET 389445040004019, 19000005, 'ka-GE', 'ABCDEFGhij', 'ABC123GG to ka', 34, 1
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_REF_BASEREFERENCE_SET] 
   @idfsBaseReference BIGINT = NULL
   ,@idfsReferenceType BIGINT
   ,@LangID NVARCHAR(50)
   ,@strDefault VARCHAR(200)
   ,@strName NVARCHAR(200)
   ,@HACode INT = NULL
   ,@Order INT = NULL
   ,@EventTypeId BIGINT
   ,@SiteId BIGINT
   ,@UserId BIGINT
   ,@LocationId BIGINT
   ,@AuditUserName NVARCHAR(200)
   ,@LOINC NVARCHAR(200) = NULL
AS
BEGIN
	DECLARE @ReturnMessage VARCHAR(MAX) = 'SUCCESS'
		,@ReturnCode BIGINT = 0
		,@DuplicateDefault INT = 0
		,-- updated to capture 0 or 1. 1 indicates a duplicate and will not execute the set.
		@idfCustomizationPackage BIGINT
		,@idfsLanguage BIGINT = (
			SELECT dbo.FN_GBL_LanguageCode_GET(@LangID)
			);-- capture the idfsLanguage for the translation
	DECLARE @SuppressSelect TABLE (
		ReturnCode INT
		,ReturnMessage NVARCHAR(MAX)
		);

	BEGIN TRY
		IF @idfsBaseReference IS NULL
		BEGIN -- this is an insert.  check if the strDefault is a duplicate
			IF EXISTS (
					SELECT *
					FROM dbo.trtBaseReference
					WHERE strDefault = @strDefault
						AND idfsReferenceType = @idfsReferenceType
						AND trtBaseReference.intRowStatus = 0
					)
			BEGIN
				SELECT @ReturnMessage = 'DOES EXIST';

				SELECT @DuplicateDefault = 1
			END
		END
		ELSE
		BEGIN -- this is an update.  check if the strDefault is a duplicate
			IF EXISTS (
					SELECT *
					FROM dbo.trtBaseReference
					WHERE idfsBaseReference <> @idfsBaseReference -- check all the other strDefaults of that reference type
						AND strDefault = @strDefault
						AND idfsReferenceType = @idfsReferenceType
						AND trtBaseReference.intRowStatus = 0
					)
			BEGIN
				SELECT @ReturnMessage = 'DOES EXIST';

				SELECT @DuplicateDefault = 1
			END
		END

		IF @DuplicateDefault = 1 -- No need to go any further, as the strDefault is a duplicate
		BEGIN
			SELECT @ReturnMessage = 'DOES EXIST';
		END
		ELSE
		BEGIN
			IF @idfsBaseReference IS NULL -- there is no duplicate and this is an insert
			BEGIN
				INSERT INTO @SuppressSelect
				EXEC dbo.USP_GBL_NEXTKEYID_GET 'trtBaseReference'
					,@idfsBaseReference OUTPUT;

				INSERT INTO dbo.trtBaseReference (
					idfsBaseReference
					,idfsReferenceType
					,intHACode
					,strDefault
					,intOrder
					,rowguid
					,intRowStatus
					,SourceSystemNameID
					,SourceSystemKeyValue
					,AuditCreateDTM
					,AuditCreateUser
					)
				VALUES (
					@idfsBaseReference
					,@idfsReferenceType
					,@HACode
					,@strDefault
					,@Order
					,NEWID()
					,0
					,10519001
					,'[{"idfsBaseReference":' + CAST(@idfsBaseReference AS NVARCHAR(300)) + '}]'
					,GETDATE()
					,@AuditUserName
					);

				EXEC dbo.USSP_GBL_StringTranslation_SET @idfsBaseReference
					,@LangID
					,@strName
					,@User = @AuditUserName;

				SELECT @idfCustomizationPackage = dbo.FN_GBL_CustomizationPackage_GET();

				IF @idfCustomizationPackage IS NOT NULL
					AND @idfCustomizationPackage <> 51577300000000 --The USA
				BEGIN
					EXEC dbo.USP_GBL_BaseReferenceToCP_SET @idfsBaseReference
						,@idfCustomizationPackage
						,@User = @AuditUserName;
				END

				INSERT INTO @SuppressSelect
				EXECUTE dbo.USP_ADMIN_EVENT_SET - 1
					,@EventTypeId
					,@UserId
					,@idfsBaseReference
					,NULL
					,@SiteId
					,NULL
					,@SiteId
					,@LocationId
					,@AuditUserName;
			END
			ELSE -- There is no duplicate and this is an update
			BEGIN
				UPDATE dbo.trtBaseReference
				SET idfsReferenceType = @idfsReferenceType
					,strDefault = @strDefault
					,intHACode = ISNULL(@HACode, intHACode)
					,intOrder = ISNULL(@Order, intOrder)
					,intRowStatus = 0
					,SourceSystemNameID = ISNULL(SourceSystemNameID, 10519001)
					,SourceSystemKeyValue = '[{"idfsBaseReference":' + CAST(@idfsBaseReference AS NVARCHAR(300)) + '}]'
					,AuditUpdateDTM = GETDATE()
					,AuditUpdateUser = @AuditUserName
				WHERE idfsBaseReference = @idfsBaseReference;

				EXEC dbo.USSP_GBL_StringTranslation_SET @idfsBaseReference
					,@LangID
					,@strName
					,@User = @AuditUserName;

				INSERT INTO @SuppressSelect
				EXECUTE dbo.USP_ADMIN_EVENT_SET - 1
					,@EventTypeId
					,@UserId
					,@idfsBaseReference
					,NULL
					,@SiteId
					,NULL
					,@SiteId
					,@LocationId
					,@AuditUserName;
			END
		END

		 --Adding new feature to the Base Reference Editor
		 --LOINC saving to remote mapping table: LOINCEidssMapping
		 IF EXISTS (
				  SELECT *
				  FROM dbo.LOINCEidssMapping
				  WHERE idfsBaseReference = @idfsBaseReference
		 )
			BEGIN
				  UPDATE dbo.LOINCEidssMapping
				  SET LOINC_NUM = @LOINC
					 ,AuditUpdateDTM = GETDATE()
					 ,AuditUpdateUser = @AuditUserName
					 ,intRowStatus = 0
					 ,SourceSystemKeyValue = N'[{"idfsBaseReference":' + CAST(@idfsBaseReference AS NVARCHAR(300)) + '}]'
				  WHERE idfsBaseReference = @idfsBaseReference;
			END
		 ELSE
			BEGIN
				  IF @LOINC <> ''
					 BEGIN
						INSERT INTO dbo.LOINCEidssMapping (
						   idfsBaseReference
						   ,idfsReferenceType
						   ,LOINC_NUM
						   ,intRowStatus
						   ,rowguid
						   ,SourceSystemNameID
						   ,SourceSystemKeyValue
						   ,AuditCreateUser
						   ,AuditCreateDTM
						   )
						VALUES (
						   @idfsBaseReference,
						   @idfsReferenceType,
						   @LOINC,
						   0,
						   NEWID(),
						   10519001,
						   N'[{"idfsBaseReference":' + CAST(@idfsBaseReference AS NVARCHAR(300)) + '}]',
						   @AuditUserName,
						   GETDATE()
						);
					 END
			END

	  	 SELECT @ReturnCode AS 'ReturnCode'
		 ,@ReturnMessage AS 'ReturnMessage'
		 ,@idfsBaseReference AS 'idfsBaseReference';

	END TRY
	BEGIN CATCH
		THROW;
	END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USP_VET_DISEASE_REPORT_DEL]...';


GO
-- ================================================================================================
-- Name: USP_VET_DISEASE_REPORT_DEL
--
-- Description:	Sets a disease report record to "inactive".
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     04/25/2019 Initial release.
-- Stephen Long     12/13/2019 Added comment for rollback statement.
-- Ann Xiong        03/23/2020 Added paramter @DeduplicationIndicator to skip checking 
--                             HerdFlockCount and SpeciesCount when @DeduplicationIndicator = 1
-- Ann Xiong        03/27/2020 Modified to skip checking any dependent child objects for 
--                             Deduplication.
-- Stephen Long     11/29/2021 Removed language ID parameter as it is not needed.
-- Stephen Long     12/08/2022 Added data audit logic for SAUC30 and 31.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_VET_DISEASE_REPORT_DEL]
(
    @DiseaseReportID BIGINT,
    @DeduplicationIndicator BIT = 0,
    @AuditUserName NVARCHAR(200)
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        BEGIN TRANSACTION;

        DECLARE @ReturnCode INT
            = 0,
                @ReturnMessage NVARCHAR(MAX) = N'SUCCESS',
                @FarmCount AS INT = 0,
                @HerdFlockCount AS INT = 0,
                @SpeciesCount AS INT = 0,
                @AnimalCount AS INT = 0,
                @VaccinationCount AS INT = 0,
                @SampleCount AS INT = 0,
                @PensideTestCount AS INT = 0,
                @LabTestCount AS INT = 0,
                @TestInterpretationCount AS INT = 0,
                @ReportLogCount AS INT = 0,
                @OutbreakSessionCount AS INT = 0,
                @DataAuditEventTypeid BIGINT = 10016002,               -- Delete audit event type
                @ObjectTypeID BIGINT = 10017059,                       -- Veterinary disease report
                @ObjectID BIGINT = @DiseaseReportID,
                @ObjectTableID BIGINT = 75800000000,                   -- tlbVetCase
                @ObjectFarmTableID BIGINT = 75550000000,               -- tlbFarm
                @ObjectActivityParametersTableID BIGINT = 75410000000, -- tlbActivityParameters
                @ObjectObservationTableID BIGINT = 75640000000,        -- tlbObservation
                @DataAuditEventID BIGINT,
                @AuditUserID BIGINT,
                @AuditSiteID BIGINT,
                @EIDSSObjectID NVARCHAR(200) = (
                                                   SELECT strCaseID FROM dbo.tlbVetCase WHERE idfVetCase = @DiseaseReportID
                                               ),
                @FarmID BIGINT = (
                                     SELECT idfFarm FROM dbo.tlbVetCase WHERE idfVetCase = @DiseaseReportID
                                 );
        DECLARE @ControlMeasuresObservationID BIGINT = (
                                                           SELECT idfObservation
                                                           FROM dbo.tlbVetCase
                                                           WHERE idfVetCase = @DiseaseReportID
                                                       ),
                @FarmEpiObservationID BIGINT = (
                                                   SELECT idfObservation FROM dbo.tlbFarm WHERE idfFarm = @FarmID
                                               );

        SET @AuditUserName = ISNULL(@AuditUserName, '');

        -- Data audit
        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = userInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo;
        -- End data audit

        SELECT @HerdFlockCount = COUNT(*)
        FROM dbo.tlbHerd h
            INNER JOIN dbo.tlbFarm f
                ON f.idfFarm = h.idfFarm
                   AND f.intRowStatus = 0
            INNER JOIN dbo.tlbVetCase v
                ON v.idfFarm = f.idfFarm
        WHERE v.idfVetCase = @DiseaseReportID
              AND h.intRowStatus = 0;

        SELECT @SpeciesCount = COUNT(*)
        FROM dbo.tlbSpecies s
            INNER JOIN dbo.tlbHerd h
                ON h.idfHerd = s.idfHerd
                   AND h.intRowStatus = 0
            INNER JOIN dbo.tlbFarm f
                ON f.idfFarm = h.idfFarm
                   AND f.intRowStatus = 0
            INNER JOIN dbo.tlbVetCase v
                ON v.idfFarm = f.idfFarm
        WHERE v.idfVetCase = @DiseaseReportID
              AND s.intRowStatus = 0;

        SELECT @AnimalCount = COUNT(*)
        FROM dbo.tlbAnimal a
            INNER JOIN dbo.tlbSpecies s
                ON s.idfSpecies = a.idfSpecies
                   AND s.intRowStatus = 0
            INNER JOIN dbo.tlbHerd h
                ON h.idfHerd = s.idfHerd
                   AND h.intRowStatus = 0
            INNER JOIN dbo.tlbFarm f
                ON f.idfFarm = h.idfFarm
                   AND f.intRowStatus = 0
            INNER JOIN dbo.tlbVetCase v
                ON v.idfFarm = f.idfFarm
        WHERE v.idfVetCase = @DiseaseReportID
              AND a.intRowStatus = 0;

        SELECT @VaccinationCount = COUNT(*)
        FROM dbo.tlbVaccination
        WHERE idfVetCase = @DiseaseReportID
              AND intRowStatus = 0;

        SELECT @SampleCount = COUNT(*)
        FROM dbo.tlbMaterial
        WHERE idfVetCase = @DiseaseReportID
              AND intRowStatus = 0;

        SELECT @PensideTestCount = COUNT(*)
        FROM dbo.tlbPensideTest p
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = p.idfMaterial
                   AND m.intRowStatus = 0
        WHERE m.idfVetCase = @DiseaseReportID
              AND p.intRowStatus = 0;

        SELECT @LabTestCount = COUNT(*)
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
        WHERE m.idfVetCase = @DiseaseReportID
              AND t.intRowStatus = 0;

        SELECT @TestInterpretationCount = COUNT(*)
        FROM dbo.tlbTestValidation tv
            INNER JOIN dbo.tlbTesting t
                ON t.idfTesting = tv.idfTesting
                   AND t.intRowStatus = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
        WHERE m.idfVetCase = @DiseaseReportID
              AND tv.intRowStatus = 0;

        SELECT @ReportLogCount = COUNT(*)
        FROM dbo.tlbVetCaseLog
        WHERE idfVetCase = @DiseaseReportID
              AND intRowStatus = 0;

        SELECT @OutbreakSessionCount = COUNT(*)
        FROM dbo.tlbVetCase v
            INNER JOIN dbo.tlbOutbreak o
                ON o.idfOutbreak = v.idfOutbreak
                   AND o.intRowStatus = 0
        WHERE v.idfVetCase = @DiseaseReportID
              AND v.idfOutbreak IS NOT NULL

        IF @DeduplicationIndicator = 0
        BEGIN
            IF @AnimalCount = 0
               AND @VaccinationCount = 0
               AND @SampleCount = 0
               AND @PensideTestCount = 0
               AND @LabTestCount = 0
               AND @TestInterpretationCount = 0
               AND @ReportLogCount = 0
               AND @OutbreakSessionCount = 0
               AND @HerdFlockCount = 0
               AND @SpeciesCount = 0
            BEGIN
                -- Data audit
                EXEC dbo.USSP_GBL_DataAuditEvent_GET @AuditUserID,
                                                     @AuditSiteID,
                                                     @DataAuditEventTypeID,
                                                     @ObjectTypeID,
                                                     @ObjectID,
                                                     @ObjectTableID,
                                                     @DataAuditEventID OUTPUT;

                UPDATE dbo.tlbVetCase
                SET idfParentMonitoringSession = NULL,
                    idfOutbreak = NULL
                WHERE idfVetCase = @DiseaseReportID;

                IF @ControlMeasuresObservationID IS NOT NULL
                BEGIN
                    UPDATE dbo.tlbActivityParameters
                    SET intRowStatus = 1
                    WHERE idfObservation = @ControlMeasuresObservationID
                          AND intRowStatus = 0;

                    -- Data audit
                    INSERT INTO dbo.tauDataAuditDetailDelete
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfObject,
                        AuditCreateUser,
                        strObject
                    )
                    SELECT @DataAuditEventID,
                           @ObjectActivityParametersTableID,
                           idfActivityParameters,
                           @AuditUserName,
                           @EIDSSObjectID
                    FROM dbo.tlbActivityParameters
                    WHERE idfObservation = @ControlMeasuresObservationID
                          AND intRowStatus = 1;
                    -- End data audit

                    UPDATE dbo.tlbObservation
                    SET intRowStatus = 1
                    WHERE idfObservation = @ControlMeasuresObservationID;

                    -- Data audit
                    INSERT INTO dbo.tauDataAuditDetailDelete
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfObject,
                        AuditCreateUser,
                        strObject
                    )
                    SELECT @DataAuditEventID,
                           @ObjectObservationTableID,
                           @ControlMeasuresObservationID,
                           @AuditUserName,
                           @EIDSSObjectID;
                -- End data audit
                END

                UPDATE dbo.tlbVetCase
                SET intRowStatus = 1,
                    datModificationForArchiveDate = GETDATE()
                WHERE idfVetCase = @DiseaseReportID;

                -- Data audit
                INSERT INTO dbo.tauDataAuditDetailDelete
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       @DiseaseReportID,
                       @AuditUserName,
                       @EIDSSObjectID;
                -- End data audit

                IF @FarmEpiObservationID IS NOT NULL
                BEGIN
                    UPDATE dbo.tlbActivityParameters
                    SET intRowStatus = 1
                    WHERE idfObservation = @FarmEpiObservationID
                          AND intRowStatus = 0;

                    -- Data audit
                    INSERT INTO dbo.tauDataAuditDetailDelete
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfObject,
                        AuditCreateUser,
                        strObject
                    )
                    SELECT @DataAuditEventID,
                           @ObjectActivityParametersTableID,
                           idfActivityParameters,
                           @AuditUserName,
                           @EIDSSObjectID
                    FROM dbo.tlbActivityParameters
                    WHERE idfObservation = @FarmEpiObservationID
                          AND intRowStatus = 1;
                    -- End data audit

                    UPDATE dbo.tlbObservation
                    SET intRowStatus = 1
                    WHERE idfObservation = @FarmEpiObservationID;

                    -- Data audit
                    INSERT INTO dbo.tauDataAuditDetailDelete
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfObject,
                        AuditCreateUser,
                        strObject
                    )
                    SELECT @DataAuditEventID,
                           @ObjectObservationTableID,
                           @FarmEpiObservationID,
                           @AuditUserName,
                           @EIDSSObjectID;
                -- End data audit
                END

                UPDATE dbo.tlbFarm
                SET intRowStatus = 1
                WHERE idfFarm =
                (
                    SELECT idfFarm FROM dbo.tlbVetCase WHERE idfVetCase = @DiseaseReportID
                );

                -- Data audit
                INSERT INTO dbo.tauDataAuditDetailDelete
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectFarmTableID,
                       @FarmID,
                       @AuditUserName,
                       @EIDSSObjectID;
            -- End data audit
            END
            ELSE
            BEGIN
                IF @OutbreakSessionCount > 0
                BEGIN
                    SET @ReturnCode = 2;
                    SET @ReturnMessage = 'Unable to delete this record as it is dependent on another object.';
                END;
                ELSE
                BEGIN
                    SET @ReturnCode = 1;
                    SET @ReturnMessage = 'Unable to delete this record as it contains dependent child objects.';
                END;
            END;
        END
        ELSE
        BEGIN
            -- Data audit
            EXEC dbo.USSP_GBL_DataAuditEvent_GET @AuditUserID,
                                                 @AuditSiteID,
                                                 @DataAuditEventTypeID,
                                                 @ObjectTypeID,
                                                 @ObjectID,
                                                 @ObjectTableID,
                                                 @DataAuditEventID OUTPUT;

            UPDATE dbo.tlbVetCase
            SET idfParentMonitoringSession = NULL,
                idfOutbreak = NULL
            WHERE idfVetCase = @DiseaseReportID;

            IF @ControlMeasuresObservationID IS NOT NULL
            BEGIN
                UPDATE dbo.tlbActivityParameters
                SET intRowStatus = 1
                WHERE idfObservation = @ControlMeasuresObservationID
                      AND intRowStatus = 0;

                -- Data audit
                INSERT INTO dbo.tauDataAuditDetailDelete
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectActivityParametersTableID,
                       idfActivityParameters,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM dbo.tlbActivityParameters
                WHERE idfObservation = @ControlMeasuresObservationID
                      AND intRowStatus = 1;
                -- End data audit

                UPDATE dbo.tlbObservation
                SET intRowStatus = 1
                WHERE idfObservation = @ControlMeasuresObservationID;

                -- Data audit
                INSERT INTO dbo.tauDataAuditDetailDelete
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectObservationTableID,
                       @ControlMeasuresObservationID,
                       @AuditUserName,
                       @EIDSSObjectID;
            -- End data audit
            END

            UPDATE dbo.tlbVetCase
            SET intRowStatus = 1,
                datModificationForArchiveDate = GETDATE()
            WHERE idfVetCase = @DiseaseReportID;

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailDelete
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   @DiseaseReportID,
                   @AuditUserName,
                   @EIDSSObjectID;
            -- End data audit

            IF @FarmEpiObservationID IS NOT NULL
            BEGIN
                UPDATE dbo.tlbActivityParameters
                SET intRowStatus = 1
                WHERE idfObservation = @FarmEpiObservationID
                      AND intRowStatus = 0;

                -- Data audit
                INSERT INTO dbo.tauDataAuditDetailDelete
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectActivityParametersTableID,
                       idfActivityParameters,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM dbo.tlbActivityParameters
                WHERE idfObservation = @FarmEpiObservationID
                      AND intRowStatus = 0;
                -- End data audit

                UPDATE dbo.tlbObservation
                SET intRowStatus = 1
                WHERE idfObservation = @FarmEpiObservationID;

                -- Data audit
                INSERT INTO dbo.tauDataAuditDetailDelete
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectObservationTableID,
                       @FarmEpiObservationID,
                       @AuditUserName,
                       @EIDSSObjectID;
            -- End data audit
            END

            UPDATE dbo.tlbFarm
            SET intRowStatus = 1
            WHERE idfFarm =
            (
                SELECT idfFarm FROM dbo.tlbVetCase WHERE idfVetCase = @DiseaseReportID
            );

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailDelete
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectFarmTableID,
                   @FarmID,
                   @AuditUserName,
                   @EIDSSObjectID;
        -- End data audit
        END

        IF @@TRANCOUNT > 0
           AND @returnCode = 0
            COMMIT;
        ELSE
            ROLLBACK;

        SELECT @ReturnCode ReturnCode,
               @ReturnMessage ReturnMessage;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK TRANSACTION;

        SET @ReturnCode = ERROR_NUMBER();
        SET @ReturnMessage = ERROR_MESSAGE();

        SELECT @ReturnCode ReturnCode,
               @ReturnMessage ReturnMessage;

        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_VET_FARM_MASTER_DEL]...';


GO
-- ================================================================================================
-- Name: USP_VET_FARM_MASTER_DEL
--
-- Description:	Sets a farm master record to "inactive".
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     04/08/2019 Initial release.
-- Stephen Long     04/26/2019 Made fixes to the laboratory sample count, and set the return code 
--                             accordingly; 0 if farm was soft deleted and 1 or 2 if a dependent 
--                             child objects exist or dependent on another object.
-- Ann Xiong        04/30/2020 Modified to skip checking any dependent child objects for Deduplication
-- Mike Kornegay	02/23/2022 Removed @LanguageID as it is not needed.
-- Stephen Long     06/01/2022 Add row status of 0 check on disease report, case and monitoring 
--                             session.
-- Stephen Long     12/06/2022 Added data audit logic for SAUC30 and 31.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_VET_FARM_MASTER_DEL]
(
    @FarmMasterID BIGINT,
    @DeduplicationIndicator BIT = 0,
    @AuditUserName NVARCHAR(200)
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @ReturnCode INT = 0,
            @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
            @MonitoringSessionCount INT = 0,
            @DiseaseReportCount INT = 0,
            @OutbreakSessionCount INT = 0,
            @LabSampleCount INT = 0,
            @DataAuditEventTypeid BIGINT = 10016002, -- Delete audit event type
            @ObjectTypeID BIGINT = 10017020,         -- Farm
            @ObjectID BIGINT = @FarmMasterID,
            @ObjectTableID BIGINT = 4572790000000,   -- tlbFarmActual
            @DataAuditEventID BIGINT,
            @AuditUserID BIGINT,
            @AuditSiteID BIGINT,
            @EIDSSObjectID NVARCHAR(200) = (
                                               SELECT strFarmCode
                                               FROM dbo.tlbFarmActual
                                               WHERE idfFarmActual = @FarmMasterID
                                           );

    BEGIN TRY
        SET @AuditUserName = ISNULL(@AuditUserName, '');

        -- Data audit
        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = userInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo;
        -- End data audit

        SELECT @MonitoringSessionCount = COUNT(*)
        FROM dbo.tlbMonitoringSessionSummary m
            INNER JOIN dbo.tlbFarm f
                ON f.idfFarm = m.idfFarm
            INNER JOIN dbo.tlbFarmActual fa
                ON fa.idfFarmActual = f.idfFarmActual
        WHERE fa.idfFarmActual = @FarmMasterID
              AND m.intRowStatus = 0;

        SELECT @OutbreakSessionCount = COUNT(*)
        FROM dbo.OutbreakCaseReport ocr
            INNER JOIN dbo.tlbVetCase v
                ON v.idfOutbreak = ocr.idfVetCase
                   AND v.intRowStatus = 0
            INNER JOIN dbo.tlbFarm f
                ON f.idfFarm = v.idfFarm
            INNER JOIN dbo.tlbFarmActual fa
                ON fa.idfFarmActual = f.idfFarmActual
        WHERE fa.idfFarmActual = @FarmMasterID
              AND ocr.intRowStatus = 0;

        SELECT @DiseaseReportCount = COUNT(*)
        FROM dbo.tlbVetCase v
            INNER JOIN dbo.tlbFarm f
                ON f.idfFarm = v.idfFarm
            INNER JOIN dbo.tlbFarmActual fa
                ON fa.idfFarmActual = f.idfFarmActual
        WHERE fa.idfFarmActual = @FarmMasterID
              AND v.intRowStatus = 0;

        SELECT @LabSampleCount = COUNT(*)
        FROM dbo.tlbMaterial m
            INNER JOIN dbo.tlbVetCase v
                ON v.idfVetCase = m.idfVetCase
                   AND v.intRowStatus = 0
            INNER JOIN dbo.tlbFarm f
                ON f.idfFarm = v.idfFarm
                   AND f.intRowStatus = 0
            INNER JOIN dbo.tlbFarmActual fa
                ON fa.idfFarmActual = f.idfFarmActual
        WHERE fa.idfFarmActual = @FarmMasterID
              AND m.intRowStatus = 0
              AND m.blnAccessioned = 1;

        IF @DeduplicationIndicator = 0
        BEGIN
            IF @MonitoringSessionCount = 0
               AND @OutbreakSessionCount = 0
               AND @DiseaseReportCount = 0
               AND @LabSampleCount = 0
            BEGIN
                UPDATE s
                SET s.intRowStatus = 1
                FROM dbo.tlbSpeciesActual s
                    INNER JOIN dbo.tlbHerdActual h
                        ON h.idfHerdActual = s.idfHerdActual
                WHERE h.idfFarmActual = @FarmMasterID;

                UPDATE dbo.tlbHerdActual
                SET intRowStatus = 1
                WHERE idfFarmActual = @FarmMasterID;

                UPDATE dbo.tlbFarmActual
                SET intRowStatus = 1,
                    datModificationDate = GETDATE()
                WHERE idfFarmActual = @FarmMasterID;

                SET @ReturnCode = 0;

                -- Data audit
                EXEC dbo.USSP_GBL_DataAuditEvent_GET @AuditUserID,
                                                     @AuditSiteID,
                                                     @DataAuditEventTypeID,
                                                     @ObjectTypeID,
                                                     @ObjectID,
                                                     @ObjectTableID,
                                                     @DataAuditEventID OUTPUT;

                INSERT INTO dbo.tauDataAuditDetailDelete
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       @FarmMasterID,
                       @AuditUserName,
                       @EIDSSObjectID;
            -- End data audit
            END
            ELSE
            BEGIN
                IF @MonitoringSessionCount > 0
                   OR @LabSampleCount > 0
                BEGIN
                    SET @ReturnCode = 2;
                    SET @ReturnMessage = 'Unable to delete this record as it is dependent on another object.';
                END;
                ELSE
                BEGIN
                    SET @ReturnCode = 1;
                    SET @ReturnMessage = 'Unable to delete this record as it contains dependent child objects.';
                END;
            END;
        END
        ELSE
        BEGIN
            UPDATE s
            SET s.intRowStatus = 1
            FROM dbo.tlbSpeciesActual AS s
                INNER JOIN dbo.tlbHerdActual AS h
                    ON h.idfHerdActual = s.idfHerdActual
            WHERE h.idfFarmActual = @FarmMasterID;

            UPDATE dbo.tlbHerdActual
            SET intRowStatus = 1
            WHERE idfFarmActual = @FarmMasterID;

            UPDATE dbo.tlbFarmActual
            SET intRowStatus = 1,
                datModificationDate = GETDATE()
            WHERE idfFarmActual = @FarmMasterID;

            SET @ReturnCode = 0;

            -- Data audit
            EXEC dbo.USSP_GBL_DataAuditEvent_GET @AuditUserID,
                                                 @AuditSiteID,
                                                 @DataAuditEventTypeID,
                                                 @ObjectTypeID,
                                                 @ObjectID,
                                                 @ObjectTableID,
                                                 @DataAuditEventID OUTPUT;

            INSERT INTO dbo.tauDataAuditDetailDelete
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   @FarmMasterID,
                   @AuditUserName,
                   @EIDSSObjectID;
        -- End data audit
        END

        SELECT @ReturnCode ReturnCode,
               @ReturnMessage ReturnMessage;
    END TRY
    BEGIN CATCH
        SET @ReturnCode = ERROR_NUMBER();
        SET @ReturnMessage = ERROR_MESSAGE();

        SELECT @ReturnCode ReturnCode,
               @ReturnMessage ReturnMessage;

        THROW;
    END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USP_VET_FARM_MASTER_SET]...';


GO
-- ================================================================================================
-- Name: USP_VET_FARM_MASTER_SET
--
-- Description:	Inserts and updates farm records.
-- 
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     04/05/2019 Initial release.
-- Stephen Long     04/23/2019 Added suppress select on herd and species stored procedure calls.
-- Stephen Long     05/24/2019 Correction on flock/herds and species parameters.
-- Mark Wilson		10/06/2021 Added Elevation (NULL) to USP_GBL_ADDRESS_SET
-- Mark Wilson		10/19/2021 USSP_GBL_ADDRESS_SET, updated all USSP calls to pass user, removed 
--                             unnecessary fields
-- Mani             02/09/2022 Added @SupressSelect to suppress the return for USSP_GBL_ADDRESS_SET
-- Stephen Long     12/06/2022 Added data audit logic for SAUC30 and 31.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_VET_FARM_MASTER_SET]
(
    @FarmMasterID BIGINT,
    @AvianFarmTypeID BIGINT = NULL,
    @AvianProductionTypeID BIGINT = NULL,
    @FarmCategory BIGINT = NULL,
    @FarmOwnerID BIGINT = NULL,
    @FarmNationalName NVARCHAR(200) = NULL,
    @FarmInterNationalName NVARCHAR(200) = NULL,
    @EIDSSFarmID NVARCHAR(200) = NULL,
    @OwnershipStructureTypeID BIGINT = NULL,
    @Fax NVARCHAR(200) = NULL,
    @Email NVARCHAR(200) = NULL,
    @Phone NVARCHAR(200) = NULL,
    @FarmAddressID BIGINT = NULL,
    @ForeignAddressIndicator BIT = 0,
    @FarmAddressIdfsLocation BIGINT = NULL,
    @FarmAddressStreet NVARCHAR(200) = NULL,
    @FarmAddressApartment NVARCHAR(200) = NULL,
    @FarmAddressBuilding NVARCHAR(200) = NULL,
    @FarmAddressHouse NVARCHAR(200) = NULL,
    @FarmAddressPostalCode NVARCHAR(200) = NULL,
    @FarmAddressLatitude FLOAT = NULL,
    @FarmAddressLongitude FLOAT = NULL,
    @NumberOfBuildings INT = NULL,
    @NumberOfBirdsPerBuilding INT = NULL,
    @HerdsOrFlocks NVARCHAR(MAX) = NULL,
    @Species NVARCHAR(MAX) = NULL,
    @AuditUser NVARCHAR(100) = NULL
)
AS
BEGIN
    SET NOCOUNT ON;
    print 'Main'
    DECLARE @ReturnCode INT = 0,
            @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
                                                   -- Data audit
            @AuditUserID BIGINT = NULL,
            @AuditSiteID BIGINT = NULL,
            @DataAuditEventID BIGINT = NULL,
            @DataAuditEventTypeID BIGINT = NULL,
            @ObjectTypeID BIGINT = 10017020,       -- Farm
            @ObjectID BIGINT = @FarmMasterID,
            @ObjectTableID BIGINT = 4572790000000; -- tlbFarmActual

    DECLARE @SuppressSelect TABLE
    (
        ReturnCode INT,
        ReturnMessage NVARCHAR(MAX)
    );
    DECLARE @HerdMasterID BIGINT,
            @EIDSSHerdID NVARCHAR(200) = NULL,
            @SickAnimalQuantity INT = NULL,
            @TotalAnimalQuantity INT = NULL,
            @DeadAnimalQuantity INT = NULL,
            @Note NVARCHAR(2000) = NULL,
            @RowAction CHAR(1) = NULL,
            @RowID BIGINT = NULL,
            @RowStatus INT = NULL,
            ---------------
            @SpeciesMasterID BIGINT,
            @SpeciesTypeID BIGINT,
            @StartOfSignsDate DATETIME = NULL,
            @AverageAge NVARCHAR(200) = NULL,
            @ObservationID BIGINT = NULL;

    DECLARE @HerdOrFlockMasterTemp TABLE
    (
        HerdMasterID BIGINT NOT NULL,
        EIDSSHerdID NVARCHAR(200) NULL,
        FarmMasterID BIGINT NOT NULL,
        SickAnimalQuantity INT NULL,
        TotalAnimalQuantity INT NULL,
        DeadAnimalQuantity INT NULL,
        RowStatus INT NULL,
        RowAction CHAR(1) NULL
    );
    DECLARE @SpeciesMasterTemp TABLE
    (
        SpeciesMasterID BIGINT NOT NULL,
        HerdMasterID BIGINT NOT NULL,
        SpeciesTypeID BIGINT NOT NULL,
        SickAnimalQuantity INT NULL,
        TotalAnimalQuantity INT NULL,
        DeadAnimalQuantity INT NULL,
        StartOfSignsDate DATETIME NULL,
        AverageAge NVARCHAR(200) NULL,
        ObservationID BIGINT NULL,
        RowStatus INT NULL,
        RowAction CHAR(1) NULL
    );
    DECLARE @FarmAfterEdit TABLE
    (
        FarmActualID BIGINT,
        AvianFarmTypeID BIGINT,
        AvianProductionTypeID BIGINT,
        FarmCategoryTypeID BIGINT,
        OwnershipStructureTypeID BIGINT,
        MovementPatternTypeID BIGINT,
        IntendedUseTypeID BIGINT,
        GrazingPatternTypeID BIGINT,
        LivestockProductionTypeID BIGINT,
        HumanActualID BIGINT,
        FarmAddressID BIGINT,
        InternationalName NVARCHAR(200),
        NationalName NVARCHAR(200),
        EIDSSFarmID NVARCHAR(200),
        Fax NVARCHAR(200),
        Email NVARCHAR(200),
        ContactPhone NVARCHAR(200),
        LivestockTotalAnimalQuantity INT,
        AvianTotalAnimalQuantity INT,
        LivestockSickAnimalQuantity INT,
        AvianSickAnimalQuantity INT,
        LivestockDeadAnimalQuantity INT,
        AvianDeadAnimalQuantity INT,
        BuidingsQuantity INT,
        BirdsPerBuildingQuantity INT,
        Note NVARCHAR(2000),
        AccessoryCode INT,
        ModificationDate DATETIME
    );
    DECLARE @FarmBeforeEdit TABLE
    (
        FarmActualID BIGINT,
        AvianFarmTypeID BIGINT,
        AvianProductionTypeID BIGINT,
        FarmCategoryTypeID BIGINT,
        OwnershipStructureTypeID BIGINT,
        MovementPatternTypeID BIGINT,
        IntendedUseTypeID BIGINT,
        GrazingPatternTypeID BIGINT,
        LivestockProductionTypeID BIGINT,
        HumanActualID BIGINT,
        FarmAddressID BIGINT,
        InternationalName NVARCHAR(200),
        NationalName NVARCHAR(200),
        EIDSSFarmID NVARCHAR(200),
        Fax NVARCHAR(200),
        Email NVARCHAR(200),
        ContactPhone NVARCHAR(200),
        LivestockTotalAnimalQuantity INT,
        AvianTotalAnimalQuantity INT,
        LivestockSickAnimalQuantity INT,
        AvianSickAnimalQuantity INT,
        LivestockDeadAnimalQuantity INT,
        AvianDeadAnimalQuantity INT,
        BuidingsQuantity INT,
        BirdsPerBuildingQuantity INT,
        Note NVARCHAR(2000),
        AccessoryCode INT,
        ModificationDate DATETIME
    );
    BEGIN TRY
        BEGIN TRANSACTION;

        SET @AuditUser = ISNULL(@AuditUser, '');

        -- Data audit
        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = userInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@AuditUser) userInfo;
        -- End data audit

        IF NOT EXISTS
        (
            SELECT *
            FROM dbo.tlbFarmActual
            WHERE idfFarmActual = @FarmMasterID
                  AND intRowStatus = 0
        )
        BEGIN
            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_GBL_NEXTKEYID_GET @tableName = N'tlbFarmActual',
                                              @idfsKey = @FarmMasterID OUTPUT;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_GBL_NextNumber_GET @ObjectName = N'Farm',
                                               @NextNumberValue = @EIDSSFarmID OUTPUT,
                                               @InstallationSite = NULL;

            SET @DataAuditEventTypeID = 10016001; -- Data audit create event type
        END
        ELSE
        BEGIN
            SET @DataAuditEventTypeID = 10016003; -- Data audit edit event type
        END

        INSERT INTO @SuppressSelect
        EXEC dbo.USSP_GBL_DataAuditEvent_GET @AuditUserID,
                                             @AuditSiteID,
                                             @DataAuditEventTypeID,
                                             @ObjectTypeID,
                                             @FarmMasterID,
                                             @ObjectTableID,
                                             @DataAuditEventID OUTPUT;
        -- End data audit

        -- Set farm address 
        IF @FarmAddressIdfsLocation IS NOT NULL
            INSERT INTO @SuppressSelect
            EXEC dbo.USSP_GBL_ADDRESS_SET_WITH_AUDITING @FarmAddressID OUTPUT,
                                                        @DataAuditEventID,
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        @FarmAddressIdfsLocation,
                                                        @FarmAddressApartment,
                                                        @FarmAddressBuilding,
                                                        @FarmAddressStreet,
                                                        @FarmAddressHouse,
                                                        @FarmAddressPostalCode,
                                                        NULL,
                                                        NULL,
                                                        @FarmAddressLatitude,
                                                        @FarmAddressLongitude,
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        @ForeignAddressIndicator,
                                                        NULL,
                                                        1,
                                                        @AuditUser;

        IF NOT EXISTS
        (
            SELECT *
            FROM dbo.tlbFarmActual
            WHERE idfFarmActual = @FarmMasterID
                  AND intRowStatus = 0
        )
        BEGIN
            INSERT INTO dbo.tlbFarmActual
            (
                idfFarmActual,
                idfsAvianFarmType,
                idfsAvianProductionType,
                idfsFarmCategory,
                idfsOwnershipStructure,
                idfsMovementPattern,
                idfsIntendedUse,
                idfsGrazingPattern,
                idfsLivestockProductionType,
                idfHumanActual,
                idfFarmAddress,
                strInternationalName,
                strNationalName,
                strFarmCode,
                strFax,
                strEmail,
                strContactPhone,
                intLivestockTotalAnimalQty,
                intAvianTotalAnimalQty,
                intLivestockSickAnimalQty,
                intAvianSickAnimalQty,
                intLivestockDeadAnimalQty,
                intAvianDeadAnimalQty,
                intBuidings,
                intBirdsPerBuilding,
                strNote,
                rowguid,
                intRowStatus,
                intHACode,
                datModificationDate,
                strMaintenanceFlag,
                strReservedAttribute,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser,
                AuditCreateDTM,
                AuditUpdateUser,
                AuditUpdateDTM
            )
            VALUES
            (@FarmMasterID,
             @AvianFarmTypeID,
             @AvianProductionTypeID,
             @FarmCategory,
             @OwnershipStructureTypeID,
             NULL,
             NULL,
             NULL,
             NULL,
             @FarmOwnerID,
             @FarmAddressID,
             @FarmInterNationalName,
             @FarmNationalName,
             @EIDSSFarmID,
             @Fax,
             @Email,
             @Phone,
             0  ,
             0  ,
             0  ,
             0  ,
             0  ,
             0  ,
             @NumberOfBuildings,
             @NumberOfBirdsPerBuilding,
             NULL,
             NEWID(),
             0  ,
             NULL,
             GETDATE(),
             NULL,
             NULL,
             10519001,
             '[{"idfFarmActual":' + CAST(@FarmMasterID AS NVARCHAR(300)) + '}]',
             @AuditUser,
             GETDATE(),
             @AuditUser,
             GETDATE()
            );

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailCreate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser,
                strObject
            )
            VALUES
            (@DataAuditEventID,
             @ObjectTableID,
             @FarmMasterID,
             10519001,
             '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
             + CAST(@ObjectTableID AS NVARCHAR(300)) + '}]',
             @AuditUser,
             @EIDSSFarmID
            );
        -- End data audit
        END
        ELSE
        BEGIN
            IF @EIDSSFarmID IS NULL
               OR @EIDSSFarmID = ''
            BEGIN
                INSERT INTO @SuppressSelect
                EXECUTE dbo.USP_GBL_NextNumber_GET @ObjectName = N'Farm',
                                                   @NextNumberValue = @EIDSSFarmID OUTPUT,
                                                   @InstallationSite = NULL;
            END;

            INSERT INTO @FarmBeforeEdit
            (
                FarmActualID,
                AvianFarmTypeID,
                AvianProductionTypeID,
                FarmCategoryTypeID,
                OwnershipStructureTypeID,
                MovementPatternTypeID,
                IntendedUseTypeID,
                GrazingPatternTypeID,
                LivestockProductionTypeID,
                HumanActualID,
                FarmAddressID,
                InternationalName,
                NationalName,
                EIDSSFarmID,
                Fax,
                Email,
                ContactPhone,
                LivestockTotalAnimalQuantity,
                AvianTotalAnimalQuantity,
                LivestockSickAnimalQuantity,
                AvianSickAnimalQuantity,
                LivestockDeadAnimalQuantity,
                AvianDeadAnimalQuantity,
                BuidingsQuantity,
                BirdsPerBuildingQuantity,
                Note,
                AccessoryCode,
                ModificationDate
            )
            SELECT idfFarmActual,
                   idfsAvianFarmType,
                   idfsAvianProductionType,
                   idfsFarmCategory,
                   idfsOwnershipStructure,
                   idfsMovementPattern,
                   idfsIntendedUse,
                   idfsGrazingPattern,
                   idfsLivestockProductionType,
                   idfHumanActual,
                   idfFarmAddress,
                   strInternationalName,
                   strNationalName,
                   strFarmCode,
                   strFax,
                   strEmail,
                   strContactPhone,
                   intLivestockTotalAnimalQty,
                   intAvianTotalAnimalQty,
                   intLivestockSickAnimalQty,
                   intAvianSickAnimalQty,
                   intLivestockDeadAnimalQty,
                   intAvianDeadAnimalQty,
                   intBuidings,
                   intBirdsPerBuilding,
                   strNote,
                   intHACode,
                   datModificationDate
            FROM dbo.tlbFarmActual
            WHERE idfFarmActual = @FarmMasterID;

            UPDATE dbo.tlbFarmActual
            SET idfsAvianFarmType = @AvianFarmTypeID,
                idfsAvianProductionType = @AvianProductionTypeID,
                idfsFarmCategory = @FarmCategory,
                idfHumanActual = @FarmOwnerID,
                idfFarmAddress = @FarmAddressID,
                strNationalName = @FarmNationalName,
                strInternationalName = @FarmInterNationalName,
                strFarmCode = @EIDSSFarmID,
                idfsOwnershipStructure = @OwnershipStructureTypeID,
                strFax = @Fax,
                strEmail = @Email,
                strContactPhone = @Phone,
                datModificationDate = GETDATE(),
                intBuidings = @NumberOfBuildings,
                intBirdsPerBuilding = @NumberOfBirdsPerBuilding,
                AuditUpdateUser = @AuditUser,
                AuditUpdateDTM = GETDATE()
            WHERE idfFarmActual = @FarmMasterID;

            INSERT INTO @FarmAfterEdit
            (
                FarmActualID,
                AvianFarmTypeID,
                AvianProductionTypeID,
                FarmCategoryTypeID,
                OwnershipStructureTypeID,
                MovementPatternTypeID,
                IntendedUseTypeID,
                GrazingPatternTypeID,
                LivestockProductionTypeID,
                HumanActualID,
                FarmAddressID,
                InternationalName,
                NationalName,
                EIDSSFarmID,
                Fax,
                Email,
                ContactPhone,
                LivestockTotalAnimalQuantity,
                AvianTotalAnimalQuantity,
                LivestockSickAnimalQuantity,
                AvianSickAnimalQuantity,
                LivestockDeadAnimalQuantity,
                AvianDeadAnimalQuantity,
                BuidingsQuantity,
                BirdsPerBuildingQuantity,
                Note,
                AccessoryCode,
                ModificationDate
            )
            SELECT idfFarmActual,
                   idfsAvianFarmType,
                   idfsAvianProductionType,
                   idfsFarmCategory,
                   idfsOwnershipStructure,
                   idfsMovementPattern,
                   idfsIntendedUse,
                   idfsGrazingPattern,
                   idfsLivestockProductionType,
                   idfHumanActual,
                   idfFarmAddress,
                   strInternationalName,
                   strNationalName,
                   strFarmCode,
                   strFax,
                   strEmail,
                   strContactPhone,
                   intLivestockTotalAnimalQty,
                   intAvianTotalAnimalQty,
                   intLivestockSickAnimalQty,
                   intAvianSickAnimalQty,
                   intLivestockDeadAnimalQty,
                   intAvianDeadAnimalQty,
                   intBuidings,
                   intBirdsPerBuilding,
                   strNote,
                   intHACode,
                   datModificationDate
            FROM dbo.tlbFarmActual
            WHERE idfFarmActual = @FarmMasterID;

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4572810000000,
                   a.FarmActualID,
                   NULL,
                   b.AvianFarmTypeID,
                   a.AvianFarmTypeID, 
                   @AuditUser, 
                   @EIDSSFarmID
            FROM @FarmAfterEdit AS a
                FULL JOIN @FarmBeforeEdit AS b
                    ON a.FarmActualID = b.FarmActualID
            WHERE (a.AvianFarmTypeID <> b.AvianFarmTypeID)
                  OR (
                         a.AvianFarmTypeID IS NOT NULL
                         AND b.AvianFarmTypeID IS NULL
                     )
                  OR (
                         a.AvianFarmTypeID IS NULL
                         AND b.AvianFarmTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4572820000000,
                   a.FarmActualID,
                   NULL,
                   b.AvianProductionTypeID,
                   a.AvianProductionTypeID,
                   @AuditUser,
                   @EIDSSFarmID
            FROM @FarmAfterEdit AS a
                FULL JOIN @FarmBeforeEdit AS b
                    ON a.FarmActualID = b.FarmActualID
            WHERE (a.AvianProductionTypeID <> b.AvianProductionTypeID)
                  OR (
                         a.AvianProductionTypeID IS NOT NULL
                         AND b.AvianProductionTypeID IS NULL
                     )
                  OR (
                         a.AvianProductionTypeID IS NULL
                         AND b.AvianProductionTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4572830000000,
                   a.FarmActualID,
                   NULL,
                   b.FarmCategoryTypeID,
                   a.FarmCategoryTypeID,
                   @AuditUser,
                   @EIDSSFarmID
            FROM @FarmAfterEdit AS a
                FULL JOIN @FarmBeforeEdit AS b
                    ON a.FarmActualID = b.FarmActualID
            WHERE (a.FarmCategoryTypeID <> b.FarmCategoryTypeID)
                  OR (
                         a.FarmCategoryTypeID IS NOT NULL
                         AND b.FarmCategoryTypeID IS NULL
                     )
                  OR (
                         a.FarmCategoryTypeID IS NULL
                         AND b.FarmCategoryTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4572840000000,
                   a.FarmActualID,
                   NULL,
                   b.OwnershipStructureTypeID,
                   a.OwnershipStructureTypeID,
                   @AuditUser,
                   @EIDSSFarmID
            FROM @FarmAfterEdit AS a
                FULL JOIN @FarmBeforeEdit AS b
                    ON a.FarmActualID = b.FarmActualID
            WHERE (a.OwnershipStructureTypeID <> b.OwnershipStructureTypeID)
                  OR (
                         a.OwnershipStructureTypeID IS NOT NULL
                         AND b.OwnershipStructureTypeID IS NULL
                     )
                  OR (
                         a.OwnershipStructureTypeID IS NULL
                         AND b.OwnershipStructureTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4572850000000,
                   a.FarmActualID,
                   NULL,
                   b.MovementPatternTypeID,
                   a.MovementPatternTypeID,
                   @AuditUser,
                   @EIDSSFarmID
            FROM @FarmAfterEdit AS a
                FULL JOIN @FarmBeforeEdit AS b
                    ON a.FarmActualID = b.FarmActualID
            WHERE (a.MovementPatternTypeID <> b.MovementPatternTypeID)
                  OR (
                         a.MovementPatternTypeID IS NOT NULL
                         AND b.MovementPatternTypeID IS NULL
                     )
                  OR (
                         a.MovementPatternTypeID IS NULL
                         AND b.MovementPatternTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4572860000000,
                   a.FarmActualID,
                   NULL,
                   b.IntendedUseTypeID,
                   a.IntendedUseTypeID,
                   @AuditUser,
                   @EIDSSFarmID
            FROM @FarmAfterEdit AS a
                FULL JOIN @FarmBeforeEdit AS b
                    ON a.FarmActualID = b.FarmActualID
            WHERE (a.IntendedUseTypeID <> b.IntendedUseTypeID)
                  OR (
                         a.IntendedUseTypeID IS NOT NULL
                         AND b.IntendedUseTypeID IS NULL
                     )
                  OR (
                         a.IntendedUseTypeID IS NULL
                         AND b.IntendedUseTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4572870000000,
                   a.FarmActualID,
                   NULL,
                   b.GrazingPatternTypeID,
                   a.GrazingPatternTypeID,
                   @AuditUser,
                   @EIDSSFarmID
            FROM @FarmAfterEdit AS a
                FULL JOIN @FarmBeforeEdit AS b
                    ON a.FarmActualID = b.FarmActualID
            WHERE (a.GrazingPatternTypeID <> b.GrazingPatternTypeID)
                  OR (
                         a.GrazingPatternTypeID IS NOT NULL
                         AND b.GrazingPatternTypeID IS NULL
                     )
                  OR (
                         a.GrazingPatternTypeID IS NULL
                         AND b.GrazingPatternTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4572880000000,
                   a.FarmActualID,
                   NULL,
                   b.LivestockProductionTypeID,
                   a.LivestockProductionTypeID,
                   @AuditUser,
                   @EIDSSFarmID
            FROM @FarmAfterEdit AS a
                FULL JOIN @FarmBeforeEdit AS b
                    ON a.FarmActualID = b.FarmActualID
            WHERE (a.LivestockProductionTypeID <> b.LivestockProductionTypeID)
                  OR (
                         a.LivestockProductionTypeID IS NOT NULL
                         AND b.LivestockProductionTypeID IS NULL
                     )
                  OR (
                         a.LivestockProductionTypeID IS NULL
                         AND b.LivestockProductionTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4572890000000,
                   a.FarmActualID,
                   NULL,
                   b.HumanActualID,
                   a.HumanActualID,
                   @AuditUser,
                   @EIDSSFarmID
            FROM @FarmAfterEdit AS a
                FULL JOIN @FarmBeforeEdit AS b
                    ON a.FarmActualID = b.FarmActualID
            WHERE (a.HumanActualID <> b.HumanActualID)
                  OR (
                         a.HumanActualID IS NOT NULL
                         AND b.HumanActualID IS NULL
                     )
                  OR (
                         a.HumanActualID IS NULL
                         AND b.HumanActualID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4572900000000,
                   a.FarmActualID,
                   NULL,
                   b.FarmAddressID,
                   a.FarmAddressID,
                   @AuditUser,
                   @EIDSSFarmID
            FROM @FarmAfterEdit AS a
                FULL JOIN @FarmBeforeEdit AS b
                    ON a.FarmActualID = b.FarmActualID
            WHERE (a.FarmAddressID <> b.FarmAddressID)
                  OR (
                         a.FarmAddressID IS NOT NULL
                         AND b.FarmAddressID IS NULL
                     )
                  OR (
                         a.FarmAddressID IS NULL
                         AND b.FarmAddressID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4572920000000,
                   a.FarmActualID,
                   NULL,
                   b.InternationalName,
                   a.InternationalName,
                   @AuditUser,
                   @EIDSSFarmID
            FROM @FarmAfterEdit AS a
                FULL JOIN @FarmBeforeEdit AS b
                    ON a.FarmActualID = b.FarmActualID
            WHERE (a.InternationalName <> b.InternationalName)
                  OR (
                         a.InternationalName IS NOT NULL
                         AND b.InternationalName IS NULL
                     )
                  OR (
                         a.InternationalName IS NULL
                         AND b.InternationalName IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4572930000000,
                   a.FarmActualID,
                   NULL,
                   b.NationalName,
                   a.NationalName,
                   @AuditUser,
                   @EIDSSFarmID
            FROM @FarmAfterEdit AS a
                FULL JOIN @FarmBeforeEdit AS b
                    ON a.FarmActualID = b.FarmActualID
            WHERE (a.NationalName <> b.NationalName)
                  OR (
                         a.NationalName IS NOT NULL
                         AND b.NationalName IS NULL
                     )
                  OR (
                         a.NationalName IS NULL
                         AND b.NationalName IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4572940000000,
                   a.FarmActualID,
                   NULL,
                   b.EIDSSFarmID,
                   a.EIDSSFarmID,
                   @AuditUser,
                   @EIDSSFarmID
            FROM @FarmAfterEdit AS a
                FULL JOIN @FarmBeforeEdit AS b
                    ON a.FarmActualID = b.FarmActualID
            WHERE (a.EIDSSFarmID <> b.EIDSSFarmID)
                  OR (
                         a.EIDSSFarmID IS NOT NULL
                         AND b.EIDSSFarmID IS NULL
                     )
                  OR (
                         a.EIDSSFarmID IS NULL
                         AND b.EIDSSFarmID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4572950000000,
                   a.FarmActualID,
                   NULL,
                   b.Fax,
                   a.Fax,
                   @AuditUser,
                   @EIDSSFarmID
            FROM @FarmAfterEdit AS a
                FULL JOIN @FarmBeforeEdit AS b
                    ON a.FarmActualID = b.FarmActualID
            WHERE (a.Fax <> b.Fax)
                  OR (
                         a.Fax IS NOT NULL
                         AND b.Fax IS NULL
                     )
                  OR (
                         a.Fax IS NULL
                         AND b.Fax IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4572960000000,
                   a.FarmActualID,
                   NULL,
                   b.Email,
                   a.Email,
                   @AuditUser,
                   @EIDSSFarmID
            FROM @FarmAfterEdit AS a
                FULL JOIN @FarmBeforeEdit AS b
                    ON a.FarmActualID = b.FarmActualID
            WHERE (a.Email <> b.Email)
                  OR (
                         a.Email IS NOT NULL
                         AND b.Email IS NULL
                     )
                  OR (
                         a.Email IS NULL
                         AND b.Email IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4572970000000,
                   a.FarmActualID,
                   NULL,
                   b.ContactPhone,
                   a.ContactPhone,
                   @AuditUser,
                   @EIDSSFarmID
            FROM @FarmAfterEdit AS a
                FULL JOIN @FarmBeforeEdit AS b
                    ON a.FarmActualID = b.FarmActualID
            WHERE (a.ContactPhone <> b.ContactPhone)
                  OR (
                         a.ContactPhone IS NOT NULL
                         AND b.ContactPhone IS NULL
                     )
                  OR (
                         a.ContactPhone IS NULL
                         AND b.ContactPhone IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4573010000000,
                   a.FarmActualID,
                   NULL,
                   b.LivestockTotalAnimalQuantity,
                   a.LivestockTotalAnimalQuantity,
                   @AuditUser,
                   @EIDSSFarmID
            FROM @FarmAfterEdit AS a
                FULL JOIN @FarmBeforeEdit AS b
                    ON a.FarmActualID = b.FarmActualID
            WHERE (a.LivestockTotalAnimalQuantity <> b.LivestockTotalAnimalQuantity)
                  OR (
                         a.LivestockTotalAnimalQuantity IS NOT NULL
                         AND b.LivestockTotalAnimalQuantity IS NULL
                     )
                  OR (
                         a.LivestockTotalAnimalQuantity IS NULL
                         AND b.LivestockTotalAnimalQuantity IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4573020000000,
                   a.FarmActualID,
                   NULL,
                   b.AvianTotalAnimalQuantity,
                   a.AvianTotalAnimalQuantity,
                   @AuditUser,
                   @EIDSSFarmID
            FROM @FarmAfterEdit AS a
                FULL JOIN @FarmBeforeEdit AS b
                    ON a.FarmActualID = b.FarmActualID
            WHERE (a.AvianTotalAnimalQuantity <> b.AvianTotalAnimalQuantity)
                  OR (
                         a.AvianTotalAnimalQuantity IS NOT NULL
                         AND b.AvianTotalAnimalQuantity IS NULL
                     )
                  OR (
                         a.AvianTotalAnimalQuantity IS NULL
                         AND b.AvianTotalAnimalQuantity IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4573030000000,
                   a.FarmActualID,
                   NULL,
                   b.LivestockSickAnimalQuantity,
                   a.LivestockSickAnimalQuantity,
                   @AuditUser,
                   @EIDSSFarmID
            FROM @FarmAfterEdit AS a
                FULL JOIN @FarmBeforeEdit AS b
                    ON a.FarmActualID = b.FarmActualID
            WHERE (a.LivestockSickAnimalQuantity <> b.LivestockSickAnimalQuantity)
                  OR (
                         a.LivestockSickAnimalQuantity IS NOT NULL
                         AND b.LivestockSickAnimalQuantity IS NULL
                     )
                  OR (
                         a.LivestockSickAnimalQuantity IS NULL
                         AND b.LivestockSickAnimalQuantity IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4573040000000,
                   a.FarmActualID,
                   NULL,
                   b.AvianSickAnimalQuantity,
                   a.AvianSickAnimalQuantity,
                   @AuditUser,
                   @EIDSSFarmID
            FROM @FarmAfterEdit AS a
                FULL JOIN @FarmBeforeEdit AS b
                    ON a.FarmActualID = b.FarmActualID
            WHERE (a.AvianSickAnimalQuantity <> b.AvianSickAnimalQuantity)
                  OR (
                         a.AvianSickAnimalQuantity IS NOT NULL
                         AND b.AvianSickAnimalQuantity IS NULL
                     )
                  OR (
                         a.AvianSickAnimalQuantity IS NULL
                         AND b.AvianSickAnimalQuantity IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4573050000000,
                   a.FarmActualID,
                   NULL,
                   b.LivestockDeadAnimalQuantity,
                   a.LivestockDeadAnimalQuantity,
                   @AuditUser,
                   @EIDSSFarmID
            FROM @FarmAfterEdit AS a
                FULL JOIN @FarmBeforeEdit AS b
                    ON a.FarmActualID = b.FarmActualID
            WHERE (a.LivestockDeadAnimalQuantity <> b.LivestockDeadAnimalQuantity)
                  OR (
                         a.LivestockDeadAnimalQuantity IS NOT NULL
                         AND b.LivestockDeadAnimalQuantity IS NULL
                     )
                  OR (
                         a.LivestockDeadAnimalQuantity IS NULL
                         AND b.LivestockDeadAnimalQuantity IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4573060000000,
                   a.FarmActualID,
                   NULL,
                   b.AvianDeadAnimalQuantity,
                   a.AvianDeadAnimalQuantity,
                   @AuditUser,
                   @EIDSSFarmID
            FROM @FarmAfterEdit AS a
                FULL JOIN @FarmBeforeEdit AS b
                    ON a.FarmActualID = b.FarmActualID
            WHERE (a.AvianDeadAnimalQuantity <> b.AvianDeadAnimalQuantity)
                  OR (
                         a.AvianDeadAnimalQuantity IS NOT NULL
                         AND b.AvianDeadAnimalQuantity IS NULL
                     )
                  OR (
                         a.AvianDeadAnimalQuantity IS NULL
                         AND b.AvianDeadAnimalQuantity IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4573070000000,
                   a.FarmActualID,
                   NULL,
                   b.BuidingsQuantity,
                   a.BuidingsQuantity,
                   @AuditUser,
                   @EIDSSFarmID
            FROM @FarmAfterEdit AS a
                FULL JOIN @FarmBeforeEdit AS b
                    ON a.FarmActualID = b.FarmActualID
            WHERE (a.BuidingsQuantity <> b.BuidingsQuantity)
                  OR (
                         a.BuidingsQuantity IS NOT NULL
                         AND b.BuidingsQuantity IS NULL
                     )
                  OR (
                         a.BuidingsQuantity IS NULL
                         AND b.BuidingsQuantity IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4573080000000,
                   a.FarmActualID,
                   NULL,
                   b.BirdsPerBuildingQuantity,
                   a.BirdsPerBuildingQuantity,
                   @AuditUser,
                   @EIDSSFarmID
            FROM @FarmAfterEdit AS a
                FULL JOIN @FarmBeforeEdit AS b
                    ON a.FarmActualID = b.FarmActualID
            WHERE (a.BirdsPerBuildingQuantity <> b.BirdsPerBuildingQuantity)
                  OR (
                         a.BirdsPerBuildingQuantity IS NOT NULL
                         AND b.BirdsPerBuildingQuantity IS NULL
                     )
                  OR (
                         a.BirdsPerBuildingQuantity IS NULL
                         AND b.BirdsPerBuildingQuantity IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4573090000000,
                   a.FarmActualID,
                   NULL,
                   b.Note,
                   a.Note,
                   @AuditUser,
                   @EIDSSFarmID
            FROM @FarmAfterEdit AS a
                FULL JOIN @FarmBeforeEdit AS b
                    ON a.FarmActualID = b.FarmActualID
            WHERE (a.Note <> b.Note)
                  OR (
                         a.Note IS NOT NULL
                         AND b.Note IS NULL
                     )
                  OR (
                         a.Note IS NULL
                         AND b.Note IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   51389490000000,
                   a.FarmActualID,
                   NULL,
                   b.AccessoryCode,
                   a.AccessoryCode,
                   @AuditUser,
                   @EIDSSFarmID
            FROM @FarmAfterEdit AS a
                FULL JOIN @FarmBeforeEdit AS b
                    ON a.FarmActualID = b.FarmActualID
            WHERE (a.AccessoryCode <> b.AccessoryCode)
                  OR (
                         a.AccessoryCode IS NOT NULL
                         AND b.AccessoryCode IS NULL
                     )
                  OR (
                         a.AccessoryCode IS NULL
                         AND b.AccessoryCode IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   51389500000000,
                   a.FarmActualID,
                   NULL,
                   b.ModificationDate,
                   a.ModificationDate,
                   @AuditUser,
                   @EIDSSFarmID
            FROM @FarmAfterEdit AS a
                FULL JOIN @FarmBeforeEdit AS b
                    ON a.FarmActualID = b.FarmActualID
            WHERE (a.ModificationDate <> b.ModificationDate)
                  OR (
                         a.ModificationDate IS NOT NULL
                         AND b.ModificationDate IS NULL
                     )
                  OR (
                         a.ModificationDate IS NULL
                         AND b.ModificationDate IS NOT NULL
                     );
        END;

        INSERT INTO @HerdOrFlockMasterTemp
        SELECT *
        FROM
            OPENJSON(@HerdsOrFlocks)
            WITH
            (
                HerdMasterID BIGINT,
                EIDSSHerdID NVARCHAR(200),
                FarmMasterID BIGINT,
                SickAnimalQuantity INT,
                TotalAnimalQuantity INT,
                DeadAnimalQuantity INT,
                RowStatus INT,
                RowAction CHAR
            );

        INSERT INTO @SpeciesMasterTemp
        SELECT *
        FROM
            OPENJSON(@Species)
            WITH
            (
                SpeciesMasterID BIGINT,
                HerdMasterID BIGINT,
                SpeciesTypeID BIGINT,
                SickAnimalQuantity INT,
                TotalAnimalQuantity INT,
                DeadAnimalQuantity INT,
                StartOfSignsDate DATETIME,
                AverageAge NVARCHAR(200),
                ObservationID BIGINT,
                RowStatus INT,
                RowAction CHAR
            );

        ----  Process the herd
        WHILE EXISTS (SELECT * FROM @HerdOrFlockMasterTemp)
        BEGIN
            SELECT TOP 1
                @RowID = HerdMasterID,
                @HerdMasterID = HerdMasterID,
                @EIDSSHerdID = EIDSSHerdID,
                @SickAnimalQuantity = SickAnimalQuantity,
                @TotalAnimalQuantity = TotalAnimalQuantity,
                @DeadAnimalQuantity = DeadAnimalQuantity,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @HerdOrFlockMasterTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VET_HERD_MASTER_SET @AuditUser = @AuditUser,
                                                 @HerdMasterID = @HerdMasterID OUTPUT,
                                                 @FarmMasterID = @FarmMasterID,
                                                 @EIDSSHerdID = @EIDSSHerdID OUTPUT,
                                                 @SickAnimalQuantity = @SickAnimalQuantity,
                                                 @TotalAnimalQuantity = @TotalAnimalQuantity,
                                                 @DeadAnimalQuantity = @DeadAnimalQuantity,
                                                 @Note = NULL,
                                                 @Rowstatus = @RowStatus,
                                                 @RowAction = @RowAction;

            IF @RowAction = 'I'
            BEGIN
                UPDATE @SpeciesMasterTemp
                SET HerdMasterID = @HerdMasterID
                WHERE HerdMasterID = @RowID;
            END

            DELETE FROM @HerdOrFlockMasterTemp
            WHERE HerdMasterID = @RowID;
        END;

        ----  Process the Species
        WHILE EXISTS (SELECT * FROM @SpeciesMasterTemp)
        BEGIN
            SELECT TOP 1
                @RowID = SpeciesMasterID,
                @SpeciesMasterID = SpeciesMasterID,
                @SpeciesTypeID = SpeciesTypeID,
                @StartOfSignsDate = StartOfSignsDate,
                @AverageAge = AverageAge,
                @SickAnimalQuantity = SickAnimalQuantity,
                @TotalAnimalQuantity = TotalAnimalQuantity,
                @DeadAnimalQuantity = DeadAnimalQuantity,
                @ObservationID = ObservationID,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @SpeciesMasterTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VET_SPECIES_MASTER_SET @AuditUser = @AuditUser,
                                                    @SpeciesMasterID = @SpeciesMasterID OUTPUT,
                                                    @SpeciesTypeID = @SpeciesTypeID,
                                                    @HerdMasterID = @HerdMasterID,
                                                    @StartOfSignsDate = @StartOfSignsDate,
                                                    @AverageAge = @AverageAge,
                                                    @SickAnimalQuantity = @SickAnimalQuantity,
                                                    @TotalAnimalQuantity = @TotalAnimalQuantity,
                                                    @DeadAnimalQuantity = @DeadAnimalQuantity,
                                                    @Note = NULL,
                                                    @RowStatus = @RowStatus,
                                                    @RowAction = @RowAction;

            DELETE FROM @SpeciesMasterTemp
            WHERE SpeciesMasterID = @RowID;
        END;

        IF @@TRANCOUNT > 0
            COMMIT TRANSACTION;

        SELECT @ReturnCode ReturnCode,
               @ReturnMessage ReturnMessage,
               @FarmMasterID SessionKey,
               @EIDSSFarmID SessionID;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK TRANSACTION;
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USSP_ADMIN_EVENT_SET]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- ================================================================================================
-- Name: USSP_ADMIN_EVENT_SET
--
-- Description:	Inserts or updates the event table for SAUC55 and SAUC56.
-- 
-- Field Notes:
--
-- Object - ID of record such as human disease report
-- LoginSite - ID of organization login site where initial event that raise notification was 
-- created.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     11/18/2022 Initial release with data audit logic for SAUC30 and 31.
-- Stephen Long     12/01/2022 Added EIDSS object ID; smart key that represents the parent object.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USSP_ADMIN_EVENT_SET]
(
    @EventId BIGINT,
    @EventTypeId BIGINT,
    @UserId BIGINT,
    @ObjectId BIGINT = NULL,
    @DiseaseId BIGINT = NULL,
    @SiteId BIGINT = NULL,
    @InformationString NVARCHAR(MAX) = NULL,
    @LoginSiteId BIGINT = NULL,
    @LocationId BIGINT = NULL,
    @AuditUserName NVARCHAR(200), 
    @DataAuditEventID BIGINT = NULL, 
    @EIDSSObjectID NVARCHAR(200) = NULL 
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        DECLARE @ReturnCode INT = 0,
                @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
                @NeighboringSiteId BIGINT = NULL,
                @EventUserId BIGINT = NULL,
                @EventSiteId BIGINT = NULL, 
                @AuditUserID BIGINT = NULL,
                @AuditSiteID BIGINT = NULL,
                @ObjectTableID BIGINT = 76040000000; -- tstEvent
        DECLARE @EventUsers TABLE
        (
            UserId BIGINT NOT NULL,
            SiteId BIGINT NOT NULL
        );
        DECLARE @NeighboringSites TABLE
        (
            AccessRuleId BIGINT,
            SiteId BIGINT
        );
        DECLARE @SiteAccessRuleGrantee TABLE (AccessRuleId BIGINT);

        SET @AuditUserName = ISNULL(@AuditUserName, '');

        -- Data Audit
        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = userInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo;

        -- Get all users of the target site that have subscribed to the notification type.
        INSERT INTO @EventUsers
        SELECT u.idfUserID,
               u.idfsSite
        FROM dbo.tstUserTable u
            INNER JOIN dbo.EventSubscription e
                ON e.idfUserID = u.idfUserID
                   AND e.EventNameID = @EventTypeId
        WHERE u.idfsSite = @LoginSiteId
              AND u.intRowStatus = 0
              AND e.ReceiveAlertFlag = 1;

        -- Get all users of the target site's neighboring sites based on filtration rules.
        -- Logged in user site ID is a grantor, then get list of grantee sites.
        INSERT INTO @NeighboringSites
        SELECT ar.AccessRuleID,
               ara.ActorSiteID
        FROM dbo.AccessRule ar
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.AccessRuleID = ar.AccessRuleID
                   AND ara.intRowStatus = 0
        WHERE ar.intRowStatus = 0
              AND ar.BorderingAreaRuleIndicator = 1
              AND ar.GrantingActorSiteID = @LoginSiteId
              AND ara.ActorSiteID IS NOT NULL
              AND ara.ActorSiteID <> @LoginSiteId
        GROUP BY ara.ActorSiteID,
                 ar.AccessRuleID;

        -- Logged in user site ID access rules as a grantee.
        INSERT INTO @SiteAccessRuleGrantee
        SELECT ara.AccessRuleID
        FROM dbo.AccessRuleActor ara
            INNER JOIN dbo.AccessRule ar
                ON ar.AccessRuleID = ara.AccessRuleID
                   AND ar.intRowStatus = 0
        WHERE ara.ActorSiteID = @LoginSiteId
              AND ara.intRowStatus = 0
              AND ar.BorderingAreaRuleIndicator = 1;

        -- Select all grantee sites that the site is also a grantee of.
        INSERT INTO @NeighboringSites
        SELECT sg.AccessRuleID,
               ara.ActorSiteID
        FROM @SiteAccessRuleGrantee sg
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.AccessRuleID = sg.AccessRuleID
                   AND ara.intRowStatus = 0
        WHERE ara.ActorSiteID <> @LoginSiteId
              AND ara.ActorSiteID IS NOT NULL
        GROUP BY ara.ActorSiteID,
                 sg.AccessRuleID;

        WHILE EXISTS (SELECT * FROM @NeighboringSites)
        BEGIN
            SELECT TOP 1
                @NeighboringSiteId = SiteId
            FROM @NeighboringSites;

            -- Get all users of the neighboring site.
            INSERT INTO @EventUsers
            SELECT u.idfUserID,
                   u.idfsSite
            FROM dbo.tstUserTable u
                INNER JOIN dbo.EventSubscription e
                    ON e.idfUserID = u.idfUserID
                       AND e.EventNameID = @EventTypeId
            WHERE u.idfsSite = @NeighboringSiteId
                  AND u.intRowStatus = 0
                  AND e.ReceiveAlertFlag = 1;

            DELETE FROM @NeighboringSites
            WHERE SiteID = @NeighboringSiteId;
        END

        WHILE EXISTS (SELECT * FROM @EventUsers)
        BEGIN
            SELECT TOP 1
                @EventUserId = UserId,
                @EventSiteId = SiteId
            FROM @EventUsers;

            EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tstEvent', @EventId OUTPUT;

            -- Change to the third party site alert/event type id.
            IF @EventSiteId <> @SiteId
            BEGIN
                SET @EventTypeId = CASE WHEN @EventTypeId = 10025503 THEN
                    10025504
                WHEN @EventTypeId = 10025501 THEN
                    10025502
                WHEN @EventTypeId = 10025505 THEN
                    10025506
                WHEN @EventTypeId = 10025507 THEN
                    10025508
                WHEN @EventTypeId = 10025509 THEN
                    10025512
                WHEN @EventTypeId = 10025510 THEN
                    10025511
                WHEN @EventTypeId = 10025037 THEN
                    10025038
                WHEN @EventTypeId = 10025041 THEN
                    10025042
                WHEN @EventTypeId = 10025043 THEN
                    10025044
                WHEN @EventTypeId = 10025045 THEN
                    10025046
                WHEN @EventTypeId = 10025047 THEN
                    10025048
                WHEN @EventTypeId = 10025077 THEN
                    10025078
                WHEN @EventTypeId = 10025079 THEN
                    10025080
                WHEN @EventTypeId = 10025081 THEN
                    10025082
                WHEN @EventTypeId = 10025099 THEN
                    10025100
                WHEN @EventTypeId = 10025097 THEN
                    10025098
                WHEN @EventTypeId = 10025129 THEN
                    10025130
                WHEN @EventTypeId = 10025101 THEN
                    10025102
                WHEN @EventTypeId = 10025103 THEN
                    10025104
                WHEN @EventTypeId = 10025105 THEN
                    10025106
                WHEN @EventTypeId = 10025107 THEN
                    10025108
                WHEN @EventTypeId = 10025085 THEN
                    10025086
                WHEN @EventTypeId = 10025087 THEN
                    10025088
                WHEN @EventTypeId = 10025089 THEN
                    10025090
                WHEN @EventTypeId = 10025091 THEN
                    10025092
                WHEN @EventTypeId = 10025093 THEN
                    10025094
                WHEN @EventTypeId = 10025095 THEN
                    10025096
                WHEN @EventTypeId = 10025067 THEN
                    10025068
                WHEN @EventTypeId = 10025071 THEN
                    10025072
                WHEN @EventTypeId = 10025073 THEN
                    10025074
                WHEN @EventTypeId = 10025075 THEN
                    10025076
                WHEN @EventTypeId = 10025513 THEN
                    10025514
                WHEN @EventTypeId = 10025517 THEN
                    10025518
                WHEN @EventTypeId = 10025519 THEN
                    10025520
                WHEN @EventTypeId = 10025525 THEN
                    10025526
                WHEN @EventTypeId = 10025049 THEN
                    10025050
                WHEN @EventTypeId = 10025051 THEN
                    10025052
                WHEN @EventTypeId = 10025053 THEN
                    10025054
                WHEN @EventTypeId = 10025055 THEN
                    10025056
                WHEN @EventTypeId = 10025057 THEN
                    10025058
                WHEN @EventTypeId = 10025059 THEN
                    10025060
                WHEN @EventTypeId = 10025061 THEN
                    10025062
                WHEN @EventTypeId = 10025065 THEN
                    10025066
                WHEN @EventTypeId = 10025069 THEN
                    10025070
                WHEN @EventTypeId = 10025527 THEN
                    10025528
                WHEN @EventTypeId = 10025529 THEN
                    10025530
                WHEN @EventTypeId = 10025537 THEN
                    10025538
                WHEN @EventTypeId = 10025539 THEN
                    10025540
                WHEN @EventTypeId = 10025563 THEN
                    10025564
                ELSE
                    @EventTypeId
                END
            END

            INSERT INTO dbo.tstEvent
            (
                idfEventID,
                idfsEventTypeID,
                idfObjectID,
                strInformationString,
                --strNote, 
                datEventDatatime,
                idfUserID,
                intProcessed,
                idfsSite,
                idfsDiagnosis,
                idfsLoginSite,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateDTM,
                AuditCreateUser,
                idfsLocation
            )
            VALUES
            (@EventId,
             @EventTypeId,
             @ObjectId,
             @InformationString,
             --@Note, 
             GETDATE(),
             @EventUserId,
             0  ,
             @EventSiteId,
             @DiseaseId,
             @LoginSiteId,
             10519001,
             '[{"idfEventID":' + CAST(@EventId AS NVARCHAR(300)) + '}]',
             GETDATE(),
             @AuditUserName,
             @LocationId
            );

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailCreate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser, 
                strObject
            )
            VALUES
            (@DataAuditEventID,
             @ObjectTableID,
             @EventId,
             10519001,
             '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
             + CAST(@ObjectTableID AS NVARCHAR(300)) + '}]',
             @AuditUserName, 
             @EIDSSObjectID
            );
            -- End data audit

            DELETE FROM @EventUsers
            WHERE UserId = @EventUserId
                  AND SiteId = @EventSiteId;
        END;
    END TRY
    BEGIN CATCH
        SET @ReturnCode = ERROR_NUMBER();
        SET @ReturnMessage = ERROR_MESSAGE();

        THROW;
    END CATCH;

    SELECT @ReturnCode ReturnCode,
           @ReturnMessage ReturnMessage;
END;
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering Procedure [dbo].[USSP_AS_SAMPLE_TO_DISEASE_SET]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- ================================================================================================
-- Name: USSP_AS_SAMPLE_TO_DISEASE_SET
--
-- Description:	Inserts or updates disease records for a particular sample for the human and  
-- veterinary active surveillance session use cases.
--
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     10/17/2022 Initial release.
-- Leo Tracchia		12/5/2022	Added logic for data auditing
-- ================================================================================================
ALTER PROCEDURE [dbo].[USSP_AS_SAMPLE_TO_DISEASE_SET]
(
   @AuditUserName NVARCHAR(100) = NULL,
	@DataAuditEventID BIGINT = NULL,
    @MonitoringSessionToMaterialID BIGINT,
	@MonitoringSessionID BIGINT,
	@SampleID BIGINT,
	@DiseaseID BIGINT,
    @SampleTypeID BIGINT,
    @RowStatus INT,
    @RowAction INT
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
     
		--Data Audit--

		DECLARE @idfUserId BIGINT = NULL;
		DECLARE @idfSiteId BIGINT = NULL;
		--DECLARE @idfsDataAuditEventType bigint = NULL;	
		DECLARE @idfObject bigint = @MonitoringSessionToMaterialID;
		DECLARE @idfObjectTable_tlbMonitoringSessionToMaterial BIGINT = 53577790000003;
		DECLARE @idfDataAuditEvent bigint = NULL;	

		DECLARE @MonitoringSessionToMaterialBeforeEdit TABLE
		(			
			idfMonitoringSessionToMaterial bigint,
			idfMaterial bigint,
            idfsSampleType bigint,
            idfMonitoringSession bigint,
            idfsDisease bigint,
			intRowStatus int
		);

		DECLARE @MonitoringSessionToMaterialAfterEdit TABLE
		(
			idfMonitoringSessionToMaterial bigint,
			idfMaterial bigint,
            idfsSampleType bigint,
            idfMonitoringSession bigint,
            idfsDisease bigint,
			intRowStatus int
		);

		--End Data Audit--

        IF @RowAction = 1 --Insert
        BEGIN
            EXECUTE dbo.USP_GBL_NEXTKEYID_GET @tableName = N'tlbMonitoringSessionToMaterial',
                                              @idfsKey = @MonitoringSessionToMaterialID OUTPUT;

            INSERT INTO dbo.tlbMonitoringSessionToMaterial
            (
				idfMonitoringSessionToMaterial,
                idfMaterial,
                idfsSampleType,
                idfMonitoringSession,
                idfsDisease,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser,
                AuditCreateDTM,
                AuditUpdateUser,
                AuditUpdateDTM,
				intRowStatus
            )
            VALUES
            (   
				@MonitoringSessionToMaterialID,
				@SampleID,
				@SampleTypeID,
				@MonitoringSessionID,
				@DiseaseID,
				10519001,
				'[{"idfMonitoringSessionToMaterial":' + CAST(@MonitoringSessionToMaterialID AS NVARCHAR(300)) + '}]',
				@AuditUserName,
				GETDATE(),
				@AuditUserName,
				GETDATE(),
				0
			);

			-- Data audit
			INSERT INTO dbo.tauDataAuditDetailCreate
			(
				idfDataAuditEvent,
				idfObjectTable,
				idfObject,
				SourceSystemNameID,
				SourceSystemKeyValue,
				AuditCreateUser
			)
			VALUES
			(
				@DataAuditEventID, 
				@idfObjectTable_tlbMonitoringSessionToMaterial, 
				@MonitoringSessionToMaterialID, 
				10519001,
				'[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300))
				+ ',"idfObjectTable":' + CAST(@idfObjectTable_tlbMonitoringSessionToMaterial AS NVARCHAR(300)) + '}]',
				@AuditUserName
			);
			-- End data audit

        END;
        ELSE
        BEGIN

			-- Data audit
			INSERT INTO @MonitoringSessionToMaterialBeforeEdit
            (
				idfMonitoringSessionToMaterial,
				idfsSampleType,
				idfMonitoringSession,
				idfsDisease,
				intRowStatus
            )
            SELECT 
				idfMonitoringSessionToMaterial,
				idfsSampleType,
				idfMonitoringSession,
				idfsDisease,
				intRowStatus
            FROM dbo.tlbMonitoringSessionToMaterial
            WHERE idfMonitoringSessionToMaterial = @MonitoringSessionToMaterialID;
			-- End Data audit

            UPDATE dbo.tlbMonitoringSessionToMaterial
            SET idfMaterial = @SampleID,
                idfsSampleType = @SampleTypeID,
                idfMonitoringSession = @MonitoringSessionID,
                idfsDisease = @DiseaseID,
                AuditUpdateUser = @AuditUserName,
                AuditUpdateDTM = GETDATE(),
				intRowStatus = @RowStatus
			WHERE idfMonitoringSessionToMaterial = @MonitoringSessionToMaterialID;

			-- Data audit
			INSERT INTO @MonitoringSessionToMaterialAfterEdit
            (
				idfMonitoringSessionToMaterial,
				idfsSampleType,
				idfMonitoringSession,
				idfsDisease,
				intRowStatus
            )
            SELECT 
				idfMonitoringSessionToMaterial,
				idfsSampleType,
				idfMonitoringSession,
				idfsDisease,
				intRowStatus
            FROM dbo.tlbMonitoringSessionToMaterial
            WHERE idfMonitoringSessionToMaterial = @MonitoringSessionToMaterialID;

			--idfMaterial 
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_tlbMonitoringSessionToMaterial, 
				51586990000022,
				a.idfMonitoringSessionToMaterial,
				null,
				a.idfMaterial,
				b.idfMaterial 
			from @MonitoringSessionToMaterialBeforeEdit a inner join @MonitoringSessionToMaterialAfterEdit b on a.idfMonitoringSessionToMaterial = b.idfMonitoringSessionToMaterial
			where (a.idfMaterial <> b.idfMaterial) 
				or(a.idfMaterial is not null and b.idfMaterial is null)
				or(a.idfMaterial is null and b.idfMaterial is not null)

			--idfsSampleType 
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_tlbMonitoringSessionToMaterial, 
				51586990000023,
				a.idfMonitoringSessionToMaterial,
				null,
				a.idfsSampleType,
				b.idfsSampleType 
			from @MonitoringSessionToMaterialBeforeEdit a inner join @MonitoringSessionToMaterialAfterEdit b on a.idfMonitoringSessionToMaterial = b.idfMonitoringSessionToMaterial
			where (a.idfsSampleType <> b.idfsSampleType) 
				or(a.idfsSampleType is not null and b.idfsSampleType is null)
				or(a.idfsSampleType is null and b.idfsSampleType is not null)

			--idfMonitoringSession 
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_tlbMonitoringSessionToMaterial, 
				51586990000024,
				a.idfMonitoringSessionToMaterial,
				null,
				a.idfMonitoringSession,
				b.idfMonitoringSession 
			from @MonitoringSessionToMaterialBeforeEdit a inner join @MonitoringSessionToMaterialAfterEdit b on a.idfMonitoringSessionToMaterial = b.idfMonitoringSessionToMaterial
			where (a.idfMonitoringSession <> b.idfMonitoringSession) 
				or(a.idfMonitoringSession is not null and b.idfMonitoringSession is null)
				or(a.idfMonitoringSession is null and b.idfMonitoringSession is not null)

			--idfsDisease 
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_tlbMonitoringSessionToMaterial, 
				51586990000025,
				a.idfMonitoringSessionToMaterial,
				null,
				a.idfsDisease,
				b.idfsDisease 
			from @MonitoringSessionToMaterialBeforeEdit a inner join @MonitoringSessionToMaterialAfterEdit b on a.idfMonitoringSessionToMaterial = b.idfMonitoringSessionToMaterial
			where (a.idfsDisease <> b.idfsDisease) 
				or(a.idfsDisease is not null and b.idfsDisease is null)
				or(a.idfsDisease is null and b.idfsDisease is not null)

			--intRowStatus 
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_tlbMonitoringSessionToMaterial, 
				51586990000026,
				a.idfMonitoringSessionToMaterial,
				null,
				a.intRowStatus,
				b.intRowStatus 
			from @MonitoringSessionToMaterialBeforeEdit a inner join @MonitoringSessionToMaterialAfterEdit b on a.idfMonitoringSessionToMaterial = b.idfMonitoringSessionToMaterial
			where (a.intRowStatus <> b.intRowStatus) 
				or(a.intRowStatus is not null and b.intRowStatus is null)
				or(a.intRowStatus is null and b.intRowStatus is not null)

			-- End Data audit


        END;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering Procedure [dbo].[USSP_GBL_CONTACTS_SET]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- ================================================================================================
-- Name: USSP_GBL_CONTACTS_SET
--
-- Description: Inserts/updates and deletes contacts for human and outbreak modules.
--          
-- Author: Stephen Long
--
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     11/28/2022 Initial release with data audit logic for SAUC30 and 31.
-- Stephen Long     12/01/2022 Added EIDSS object ID; smart key that represents the parent object.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USSP_GBL_CONTACTS_SET]
(
    @Contacts NVARCHAR(MAX) = NULL,
    @SiteId BIGINT NULL,
    @AuditUserName NVARCHAR(200) = NULL,
    @DataAuditEventID BIGINT = NULL,
    @idfHumanCase BIGINT NULL,
    @EIDSSObjectID NVARCHAR(200) = NULL 
)
AS
BEGIN
    DECLARE @ContactedCasePersonId BIGINT = NULL,
            @OutbreakCaseContactId BIGINT = NULL,                      -- Outbreak only
            @CaseOrReportId BIGINT = NULL,                             -- Human disease report or outbreak case identifier
            @ContactTypeId BIGINT = NULL,                              -- Outbreak only
            @ContactRelationshipTypeId BIGINT = NULL,
            @HumanMasterId BIGINT = NULL,
            @HumanId BIGINT = NULL,
            @PersonalIdTypeId BIGINT = NULL,
            @PersonalId NVARCHAR(100) = NULL,
            @FirstName NVARCHAR(200) = NULL,
            @SecondName NVARCHAR(200) = NULL,
            @LastName NVARCHAR(200) = NULL,
            @DateOfBirth DATETIME = NULL,
            @Age INT = NULL,
            @AgeTypeId BIGINT = NULL,
            @GenderTypeId BIGINT = NULL,
            @CitizenshipTypeId BIGINT = NULL,
            @AddressId BIGINT = NULL,
            @LocationId BIGINT = NULL,                                 -- Lowest administrative level
            @Street NVARCHAR(200) = NULL,
            @PostalCode NVARCHAR(200) = NULL,
            @Apartment NVARCHAR(200) = NULL,
            @Building NVARCHAR(200) = NULL,
            @House NVARCHAR(200) = NULL,
            @ForeignAddressString NVARCHAR(200) = NULL,
            @ContactPhoneCountryCode INT = NULL,
            @ContactPhone NVARCHAR(200) = NULL,
            @ContactPhoneTypeId BIGINT = NULL,
            @DateOfLastContact DATETIME = NULL,
            @PlaceOfLastContact NVARCHAR(200) = NULL,
            @Comments NVARCHAR(500) = NULL,
            @ContactStatusId BIGINT = NULL,                            -- Outbreak only
            @ContactTracingObservationId BIGINT = NULL,                -- Outbreak only
            @RowStatus INT = NULL,
            @RowAction INT = NULL,
            @ReturnMessage VARCHAR(MAX) = 'Success',
            @ReturnCode BIGINT = 0,
            @AuditUserID BIGINT = NULL,
            @AuditSiteID BIGINT = NULL,
            @ObjectID BIGINT = NULL,
            @ObjectHumanTableID BIGINT = 75600000000,                  -- tlbHuman,
            @ObjectHumanAdditionalInfoTableID BIGINT = 53577690000000, -- HumanAddlInfo 
            @ObjectContactedCasePersonTableID BIGINT = 75500000000;    -- tlbContactedCasePerson
    DECLARE @SuppressSelect TABLE
    (
        ReturnCode INT,
        ReturnMessage NVARCHAR(MAX)
    );
    DECLARE @ContactsTemp TABLE
    (
        ContactedCasePersonId BIGINT NOT NULL,
        OutbreakCaseContactId BIGINT NULL,
        CaseOrReportId BIGINT NULL, -- Human disease report or outbreak case identifiers
        ContactTypeId BIGINT NOT NULL,
        ContactRelationshipTypeId BIGINT NULL,
        HumanMasterId BIGINT NULL,
        HumanId BIGINT NULL,
        PersonalIdTypeId BIGINT NULL,
        PersonalId NVARCHAR(100) NULL,
        FirstName NVARCHAR(200) NULL,
        SecondName NVARCHAR(200) NULL,
        LastName NVARCHAR(200) NULL,
        DateOfBirth DATETIME NULL,
        GenderTypeId BIGINT NULL,
        CitizenshipTypeId BIGINT NULL,
        AddressId BIGINT NULL,
        LocationId BIGINT NULL,
        Street NVARCHAR(200) NULL,
        PostalCode NVARCHAR(200) NULL,
        Apartment NVARCHAR(200) NULL,
        Building NVARCHAR(200) NULL,
        House NVARCHAR(200) NULL,
        ForeignAddressString NVARCHAR(200) NULL,
        ContactPhoneCountryCode INT NULL,
        ContactPhone NVARCHAR(200) NULL,
        ContactPhoneTypeId BIGINT NULL,
        DateOfLastContact DATETIME NULL,
        PlaceOfLastContact NVARCHAR(200) NULL,
        Comments NVARCHAR(500) NULL,
        ContactStatusId BIGINT NULL,
        ContactTracingObservationId BIGINT NULL,
        RowStatus INT NOT NULL,
        RowAction INT NOT NULL,
        AuditUserName NVARCHAR(200)
    );
    DECLARE @HumanBeforeEdit TABLE
    (
        HumanID BIGINT,
        PersonalIDTypeID BIGINT,
        PersonalID NVARCHAR(100),
        FirstName NVARCHAR(200),
        SecondName NVARCHAR(200),
        LastName NVARCHAR(200),
        DateOfBirth DATETIME,
        GenderTypeID BIGINT,
        CitizenshipTypeID BIGINT,
        CurrentResidenceAddressID BIGINT
    );
    DECLARE @HumanAfterEdit TABLE
    (
        HumanID BIGINT,
        PersonalIDTypeID BIGINT,
        PersonalID NVARCHAR(100),
        FirstName NVARCHAR(200),
        SecondName NVARCHAR(200),
        LastName NVARCHAR(200),
        DateOfBirth DATETIME,
        GenderTypeID BIGINT,
        CitizenshipTypeID BIGINT,
        CurrentResidenceAddressID BIGINT
    );
    DECLARE @HumanAdditionalInfoBeforeEdit TABLE
    (
        HumanID BIGINT,
        Age INT,
        AgeTypeID BIGINT,
        ContactPhoneCountryCode INT,
        ContactPhone NVARCHAR(200),
        ContactPhoneTypeID BIGINT
    );
    DECLARE @HumanAdditionalInfoAfterEdit TABLE
    (
        HumanID BIGINT,
        Age INT,
        AgeTypeID BIGINT,
        ContactPhoneCountryCode INT,
        ContactPhone NVARCHAR(200),
        ContactPhoneTypeID BIGINT
    );
    DECLARE @ContactedCasePersonBeforeEdit TABLE
    (
        ContactedCasePersonID BIGINT,
        ContactRelationshipTypeID BIGINT,
        HumanID BIGINT,
        HumanDiseaseReportID BIGINT,
        DateOfLastContact DATETIME,
        PlaceOfLastContact NVARCHAR(200),
        Comments NVARCHAR(500),
        RowStatus INT
    );
    DECLARE @ContactedCasePersonAfterEdit TABLE
    (
        ContactedCasePersonID BIGINT,
        ContactRelationshipTypeID BIGINT,
        HumanID BIGINT,
        HumanDiseaseReportID BIGINT,
        DateOfLastContact DATETIME,
        PlaceOfLastContact NVARCHAR(200),
        Comments NVARCHAR(500),
        RowStatus INT
    );

    INSERT INTO @ContactsTemp
    SELECT *
    FROM
        OPENJSON(@Contacts)
        WITH
        (
            ContactedCasePersonId BIGINT,
            OutbreakCaseContactId BIGINT,
            CaseOrReportId BIGINT,
            ContactTypeId BIGINT,
            ContactRelationshipTypeId BIGINT,
            HumanMasterId BIGINT,
            HumanId BIGINT,
            PersonalIdTypeId BIGINT,
            PersonalId NVARCHAR(100),
            FirstName NVARCHAR(200),
            SecondName NVARCHAR(200),
            LastName NVARCHAR(200),
            DateOfBirth DATETIME,
            GenderTypeId BIGINT,
            CitizenshipTypeId BIGINT,
            AddressId BIGINT,
            LocationId BIGINT,
            Street NVARCHAR(200),
            PostalCode NVARCHAR(200),
            Apartment NVARCHAR(200),
            Building NVARCHAR(200),
            House NVARCHAR(200),
            ForeignAddressString NVARCHAR(200),
            ContactPhoneCountryCode INT,
            ContactPhone NVARCHAR(20),
            ContactPhoneTypeId BIGINT,
            DateOfLastContact DATETIME,
            PlaceOfLastContact NVARCHAR(200),
            Comments NVARCHAR(500),
            ContactStatusId BIGINT,
            ContactTracingObservationId BIGINT,
            RowStatus INT,
            RowAction INT,
            AuditUserName NVARCHAR(200)
        );

    BEGIN TRY
        WHILE EXISTS (SELECT * FROM @ContactsTemp)
        BEGIN

            SELECT TOP 1
                @ContactedCasePersonId = ContactedCasePersonId,
                @OutbreakCaseContactId = OutbreakCaseContactId,
                @CaseOrReportId = @idfHumanCase,
                @ContactTypeId = ContactTypeId,
                @ContactRelationshipTypeId = ContactRelationshipTypeId,
                @HumanMasterId = HumanMasterId,
                @HumanId = HumanId,
                @PersonalIdTypeId = PersonalIdTypeId,
                @PersonalId = PersonalId,
                @FirstName = FirstName,
                @SecondName = SecondName,
                @LastName = LastName,
                @DateOfBirth = DateOfBirth,
                @GenderTypeId = GenderTypeId,
                @CitizenshipTypeId = CitizenshipTypeId,
                @AddressId = AddressId,
                @LocationId = LocationId,
                @Street = Street,
                @PostalCode = PostalCode,
                @Apartment = Apartment,
                @Building = Building,
                @House = House,
                @ForeignAddressString = ForeignAddressString,
                @ContactPhone = ContactPhone,
                @ContactPhoneTypeId = ContactPhoneTypeId,
                @DateOfLastContact = DateOfLastContact,
                @PlaceOfLastContact = PlaceOfLastContact,
                @Comments = Comments,
                @ContactStatusId = ContactStatusId,
                @ContactTracingObservationId = ContactTracingObservationId,
                @RowStatus = RowStatus,
                @RowAction = RowAction,
                @AuditUserName = AuditUserName
            FROM @ContactsTemp;

            DECLARE @AdminLevel INT = 0;
            SELECT @AdminLevel = node.GetLevel()
            FROM dbo.gisLocation
            WHERE idfsLocation = @LocationId;
            DECLARE @ForeignAddressIndicator BIT = 0;
            IF @ForeignAddressString IS NOT NULL
            BEGIN
                SET @ForeignAddressIndicator = 1;
            END

            IF (@LocationId IS NOT NULL)
                EXECUTE dbo.USSP_GBL_ADDRESS_SET_WITH_AUDITING @GeolocationID = @AddressId OUTPUT,
                                                               @DataAuditEventID = @DataAuditEventID,
                                                               @ResidentTypeID = NULL,
                                                               @GroundTypeID = NULL,
                                                               @GeolocationTypeID = NULL,
                                                               @LocationID = @LocationId,
                                                               @Apartment = @Apartment,
                                                               @Building = @Building,
                                                               @StreetName = @Street,
                                                               @House = @House,
                                                               @PostalCodeString = @PostalCode,
                                                               @DescriptionString = NULL,
                                                               @Distance = NULL,
                                                               @Latitude = NULL,
                                                               @Longitude = NULL,
                                                               @Elevation = NULL,
                                                               @Accuracy = NULL,
                                                               @Alignment = NULL,
                                                               @ForeignAddressIndicator = @ForeignAddressIndicator,
                                                               @ForeignAddressString = @ForeignAddressString,
                                                               @GeolocationSharedIndicator = 0,
                                                               @AuditUserName = @AuditUserName,
                                                               @ReturnCode = @ReturnCode OUTPUT,
                                                               @ReturnMessage = @ReturnMessage OUTPUT;

            IF NOT EXISTS
            (
                SELECT *
                FROM dbo.tlbHuman
                WHERE idfHuman = @HumanId
                      AND intRowStatus = 0
            )
            BEGIN
                INSERT INTO @SuppressSelect
                EXECUTE dbo.USP_GBL_NEXTKEYID_GET @tableName = N'tlbHuman',
                                                  @idfsKey = @HumanId OUTPUT;

                INSERT INTO dbo.tlbHuman
                (
                    idfHuman,
                    idfHumanActual,
                    idfsNationality,
                    idfsHumanGender,
                    idfCurrentResidenceAddress,
                    idfsOccupationType,
                    idfEmployerAddress,
                    idfRegistrationAddress,
                    datDateofBirth,
                    datDateOfDeath,
                    strFirstName,
                    strSecondName,
                    strLastName,
                    strRegistrationPhone,
                    strEmployerName,
                    strHomePhone,
                    strWorkPhone,
                    idfsPersonIDType,
                    strPersonID,
                    intRowStatus,
                    SourceSystemNameID,
                    SourceSystemKeyValue,
                    AuditCreateUser,
                    AuditCreateDTM
                )
                VALUES
                (@HumanId,
                 @HumanMasterId,
                 @CitizenshipTypeId,
                 @GenderTypeId,
                 @AddressId,
                 NULL,
                 NULL,
                 NULL,
                 @DateOfBirth,
                 NULL,
                 @FirstName,
                 @SecondName,
                 @LastName,
                 NULL,
                 NULL,
                 NULL,
                 NULL,
                 @PersonalIdTypeId,
                 @PersonalId,
                 0  ,
                 10519001,
                 '[{"idfHuman":' + CAST(@HumanId AS NVARCHAR(300)) + '}]',
                 @AuditUserName,
                 GETDATE()
                );

                -- Data audit
                INSERT INTO dbo.tauDataAuditDetailCreate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    SourceSystemNameID,
                    SourceSystemKeyValue,
                    AuditCreateUser, 
                    strObject
                )
                VALUES
                (@DataAuditEventID,
                 @ObjectHumanTableID,
                 @HumanId,
                 10519001,
                 '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
                 + CAST(@ObjectHumanTableID AS NVARCHAR(300)) + '}]',
                 @AuditUserName,
                 @EIDSSObjectID
                );
                -- End data audit

                INSERT INTO dbo.HumanAddlInfo
                (
                    HumanAdditionalInfo,
                    ReportedAge,
                    ReportedAgeUOMID,
                    PassportNbr,
                    IsEmployedID,
                    EmployerPhoneNbr,
                    EmployedDTM,
                    IsStudentID,
                    SchoolName,
                    SchoolPhoneNbr,
                    SchoolAddressID,
                    SchoolLastAttendDTM,
                    ContactPhoneCountryCode,
                    ContactPhoneNbr,
                    ContactPhoneNbrTypeID,
                    ContactPhone2CountryCode,
                    ContactPhone2Nbr,
                    ContactPhone2NbrTypeID,
                    AltAddressID,
                    intRowStatus,
                    SourceSystemNameID,
                    SourceSystemKeyValue,
                    AuditCreateUser,
                    AuditCreateDTM
                )
                VALUES
                (@HumanId,
                 @Age,
                 @AgeTypeId,
                 NULL,
                 NULL,
                 NULL,
                 NULL,
                 NULL,
                 NULL,
                 NULL,
                 NULL,
                 NULL,
                 @ContactPhoneCountryCode,
                 @ContactPhone,
                 @ContactPhoneTypeId,
                 NULL,
                 NULL,
                 NULL,
                 NULL,
                 0  ,
                 10519001,
                 '[{"HumanAddlInfoUID":' + CAST(@HumanId AS NVARCHAR(300)) + '}]',
                 @AuditUserName,
                 GETDATE()
                );

                -- Data audit
                INSERT INTO dbo.tauDataAuditDetailCreate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    SourceSystemNameID,
                    SourceSystemKeyValue,
                    AuditCreateUser, 
                    strObject
                )
                VALUES
                (@DataAuditEventID,
                 @ObjectHumanAdditionalInfoTableID,
                 @HumanId,
                 10519001,
                 '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
                 + CAST(@ObjectHumanAdditionalInfoTableID AS NVARCHAR(300)) + '}]',
                 @AuditUserName,
                 @EIDSSObjectID
                );
            -- End data audit
            END;
            ELSE
            BEGIN
                -- Data audit
                DELETE FROM @HumanAdditionalInfoAfterEdit;
                DELETE FROM @HumanAdditionalInfoBeforeEdit;
                DELETE FROM @HumanAfterEdit;
                DELETE FROM @HumanBeforeEdit;

                INSERT INTO @HumanBeforeEdit
                (
                    HumanID,
                    PersonalIDTypeID,
                    PersonalID,
                    FirstName,
                    SecondName,
                    LastName,
                    DateOfBirth,
                    GenderTypeID,
                    CitizenshipTypeID,
                    CurrentResidenceAddressID
                )
                SELECT idfHuman,
                       idfsPersonIDType,
                       strPersonID,
                       strFirstName,
                       strSecondName,
                       strLastName,
                       datDateofBirth,
                       idfsHumanGender,
                       idfsNationality,
                       idfCurrentResidenceAddress
                FROM dbo.tlbHuman
                WHERE idfHuman = @HumanId;
                -- End data audit

                UPDATE dbo.tlbHuman
                SET idfsNationality = @CitizenshipTypeId,
                    idfsHumanGender = @GenderTypeId,
                    idfCurrentResidenceAddress = @AddressId,
                    idfsOccupationType = NULL,
                    idfEmployerAddress = NULL,
                    idfRegistrationAddress = NULL,
                    datDateofBirth = @DateOfBirth,
                    datDateOfDeath = NULL,
                    strFirstName = @FirstName,
                    strSecondName = @SecondName,
                    strLastName = @LastName,
                    strRegistrationPhone = NULL,
                    strEmployerName = NULL,
                    strHomePhone = NULL,
                    strWorkPhone = NULL,
                    idfsPersonIDType = @PersonalIdTypeId,
                    strPersonID = @PersonalId,
                    SourceSystemNameID = ISNULL(SourceSystemNameID, 10519001),
                    SourceSystemKeyValue = ISNULL(
                                                     SourceSystemKeyValue,
                                                     '[{"idfHuman":' + CAST(@HumanId AS NVARCHAR(300)) + '}]'
                                                 ),
                    AuditUpdateUser = @AuditUserName,
                    AuditUpdateDTM = GETDATE()
                WHERE idfHuman = @HumanId;

                -- Data audit
                INSERT INTO @HumanAfterEdit
                (
                    HumanID,
                    PersonalIDTypeID,
                    PersonalID,
                    FirstName,
                    SecondName,
                    LastName,
                    DateOfBirth,
                    GenderTypeID,
                    CitizenshipTypeID,
                    CurrentResidenceAddressID
                )
                SELECT idfHuman,
                       idfsPersonIDType,
                       strPersonID,
                       strFirstName,
                       strSecondName,
                       strLastName,
                       datDateofBirth,
                       idfsHumanGender,
                       idfsNationality,
                       idfCurrentResidenceAddress
                FROM dbo.tlbHuman
                WHERE idfHuman = @HumanId;

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectHumanTableID,
                       79370000000,
                       a.HumanID,
                       NULL,
                       b.HumanID,
                       a.HumanID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @HumanAfterEdit AS a
                    FULL JOIN @HumanAfterEdit AS b
                        ON a.HumanID = b.HumanID
                WHERE (a.HumanID <> b.HumanID)
                      OR (
                             a.HumanID IS NOT NULL
                             AND b.HumanID IS NULL
                         )
                      OR (
                             a.HumanID IS NULL
                             AND b.HumanID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectHumanTableID,
                       79400000000,
                       a.HumanID,
                       NULL,
                       b.CitizenshipTypeID,
                       a.CitizenshipTypeID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @HumanAfterEdit AS a
                    FULL JOIN @HumanAfterEdit AS b
                        ON a.HumanID = b.HumanID
                WHERE (a.CitizenshipTypeID <> b.CitizenshipTypeID)
                      OR (
                             a.CitizenshipTypeID IS NOT NULL
                             AND b.CitizenshipTypeID IS NULL
                         )
                      OR (
                             a.CitizenshipTypeID IS NULL
                             AND b.CitizenshipTypeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectHumanTableID,
                       79350000000,
                       a.HumanID,
                       NULL,
                       b.CurrentResidenceAddressID,
                       a.CurrentResidenceAddressID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @HumanAfterEdit AS a
                    FULL JOIN @HumanAfterEdit AS b
                        ON a.HumanID = b.HumanID
                WHERE (a.CurrentResidenceAddressID <> b.CurrentResidenceAddressID)
                      OR (
                             a.CurrentResidenceAddressID IS NOT NULL
                             AND b.CurrentResidenceAddressID IS NULL
                         )
                      OR (
                             a.CurrentResidenceAddressID IS NULL
                             AND b.CurrentResidenceAddressID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectHumanTableID,
                       79330000000,
                       a.HumanID,
                       NULL,
                       b.DateOfBirth,
                       a.DateOfBirth,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @HumanAfterEdit AS a
                    FULL JOIN @HumanAfterEdit AS b
                        ON a.HumanID = b.HumanID
                WHERE (a.DateOfBirth <> b.DateOfBirth)
                      OR (
                             a.DateOfBirth IS NOT NULL
                             AND b.DateOfBirth IS NULL
                         )
                      OR (
                             a.DateOfBirth IS NULL
                             AND b.DateOfBirth IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectHumanTableID,
                       79430000000,
                       a.HumanID,
                       NULL,
                       b.FirstName,
                       a.FirstName,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @HumanAfterEdit AS a
                    FULL JOIN @HumanAfterEdit AS b
                        ON a.HumanID = b.HumanID
                WHERE (a.FirstName <> b.FirstName)
                      OR (
                             a.FirstName IS NOT NULL
                             AND b.FirstName IS NULL
                         )
                      OR (
                             a.FirstName IS NULL
                             AND b.FirstName IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectHumanTableID,
                       79390000000,
                       a.HumanID,
                       NULL,
                       b.GenderTypeID,
                       a.GenderTypeID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @HumanAfterEdit AS a
                    FULL JOIN @HumanAfterEdit AS b
                        ON a.HumanID = b.HumanID
                WHERE (a.GenderTypeID <> b.GenderTypeID)
                      OR (
                             a.GenderTypeID IS NOT NULL
                             AND b.GenderTypeID IS NULL
                         )
                      OR (
                             a.GenderTypeID IS NULL
                             AND b.GenderTypeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectHumanTableID,
                       79450000000,
                       a.HumanID,
                       NULL,
                       b.LastName,
                       a.LastName,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @HumanAfterEdit AS a
                    FULL JOIN @HumanAfterEdit AS b
                        ON a.HumanID = b.HumanID
                WHERE (a.LastName <> b.LastName)
                      OR (
                             a.LastName IS NOT NULL
                             AND b.LastName IS NULL
                         )
                      OR (
                             a.LastName IS NULL
                             AND b.LastName IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectHumanTableID,
                       12014470000000,
                       a.HumanID,
                       NULL,
                       b.PersonalID,
                       a.PersonalID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @HumanAfterEdit AS a
                    FULL JOIN @HumanAfterEdit AS b
                        ON a.HumanID = b.HumanID
                WHERE (a.PersonalID <> b.PersonalID)
                      OR (
                             a.PersonalID IS NOT NULL
                             AND b.PersonalID IS NULL
                         )
                      OR (
                             a.PersonalID IS NULL
                             AND b.PersonalID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectHumanTableID,
                       12014460000000,
                       a.HumanID,
                       NULL,
                       b.PersonalIDTypeID,
                       a.PersonalIDTypeID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @HumanAfterEdit AS a
                    FULL JOIN @HumanAfterEdit AS b
                        ON a.HumanID = b.HumanID
                WHERE (a.PersonalIDTypeID <> b.PersonalIDTypeID)
                      OR (
                             a.PersonalIDTypeID IS NOT NULL
                             AND b.PersonalIDTypeID IS NULL
                         )
                      OR (
                             a.PersonalIDTypeID IS NULL
                             AND b.PersonalIDTypeID IS NOT NULL
                         );

                INSERT INTO @HumanAdditionalInfoBeforeEdit
                (
                    HumanID,
                    Age,
                    AgeTypeID,
                    ContactPhoneCountryCode,
                    ContactPhone,
                    ContactPhoneTypeID
                )
                SELECT HumanAdditionalInfo,
                       ReportedAge,
                       ReportedAgeUOMID,
                       ContactPhoneCountryCode,
                       ContactPhoneNbr,
                       ContactPhoneNbrTypeID
                FROM dbo.HumanAddlInfo
                WHERE HumanAdditionalInfo = @HumanId;
                -- End data audit

                UPDATE dbo.HumanAddlInfo
                SET ReportedAge = @Age,
                    ReportedAgeUOMID = @AgeTypeId,
                    PassportNbr = NULL,
                    IsEmployedID = NULL,
                    EmployerPhoneNbr = NULL,
                    EmployedDTM = NULL,
                    IsStudentID = NULL,
                    SchoolName = NULL,
                    SchoolPhoneNbr = NULL,
                    SchoolAddressID = NULL,
                    SchoolLastAttendDTM = NULL,
                    ContactPhoneCountryCode = @ContactPhoneCountryCode,
                    ContactPhoneNbr = @ContactPhone,
                    ContactPhoneNbrTypeID = @ContactPhoneTypeID,
                    ContactPhone2CountryCode = NULL,
                    ContactPhone2Nbr = NULL,
                    ContactPhone2NbrTypeID = NULL,
                    AltAddressID = NULL,
                    SourceSystemNameID = ISNULL(SourceSystemNameID, 10519001),
                    SourceSystemKeyValue = ISNULL(
                                                     SourceSystemKeyValue,
                                                     '[{"HumanAddlInfoUID":' + CAST(@HumanId AS NVARCHAR(300)) + '}]'
                                                 ),
                    AuditUpdateUser = @AuditUserName,
                    AuditUpdateDTM = GETDATE()
                WHERE HumanAdditionalInfo = @HumanId;

                -- Data audit
                INSERT INTO @HumanAdditionalInfoAfterEdit
                (
                    HumanID,
                    Age,
                    AgeTypeID,
                    ContactPhoneCountryCode,
                    ContactPhone,
                    ContactPhoneTypeID
                )
                SELECT HumanAdditionalInfo,
                       ReportedAge,
                       ReportedAgeUOMID,
                       ContactPhoneCountryCode,
                       ContactPhoneNbr,
                       ContactPhoneNbrTypeID
                FROM dbo.HumanAddlInfo
                WHERE HumanAdditionalInfo = @HumanId;

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectHumanAdditionalInfoTableID,
                       51586890000001,
                       a.HumanID,
                       NULL,
                       b.Age,
                       a.Age,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @HumanAdditionalInfoAfterEdit AS a
                    FULL JOIN @HumanAdditionalInfoBeforeEdit AS b
                        ON a.HumanID = b.HumanID
                WHERE (a.Age <> b.Age)
                      OR (
                             a.Age IS NOT NULL
                             AND b.Age IS NULL
                         )
                      OR (
                             a.Age IS NULL
                             AND b.Age IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectHumanAdditionalInfoTableID,
                       51586890000002,
                       a.HumanID,
                       NULL,
                       b.AgeTypeID,
                       a.AgeTypeID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @HumanAdditionalInfoAfterEdit AS a
                    FULL JOIN @HumanAdditionalInfoBeforeEdit AS b
                        ON a.HumanID = b.HumanID
                WHERE (a.AgeTypeID <> b.AgeTypeID)
                      OR (
                             a.AgeTypeID IS NOT NULL
                             AND b.AgeTypeID IS NULL
                         )
                      OR (
                             a.AgeTypeID IS NULL
                             AND b.AgeTypeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectHumanAdditionalInfoTableID,
                       51586890000003,
                       a.HumanID,
                       NULL,
                       b.ContactPhone,
                       a.ContactPhone,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @HumanAdditionalInfoAfterEdit AS a
                    FULL JOIN @HumanAdditionalInfoBeforeEdit AS b
                        ON a.HumanID = b.HumanID
                WHERE (a.ContactPhone <> b.ContactPhone)
                      OR (
                             a.ContactPhone IS NOT NULL
                             AND b.ContactPhone IS NULL
                         )
                      OR (
                             a.ContactPhone IS NULL
                             AND b.ContactPhone IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectHumanAdditionalInfoTableID,
                       51586890000004,
                       a.HumanID,
                       NULL,
                       b.ContactPhoneCountryCode,
                       a.ContactPhoneCountryCode,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @HumanAdditionalInfoAfterEdit AS a
                    FULL JOIN @HumanAdditionalInfoBeforeEdit AS b
                        ON a.HumanID = b.HumanID
                WHERE (a.ContactPhoneCountryCode <> b.ContactPhoneCountryCode)
                      OR (
                             a.ContactPhoneCountryCode IS NOT NULL
                             AND b.ContactPhoneCountryCode IS NULL
                         )
                      OR (
                             a.ContactPhoneCountryCode IS NULL
                             AND b.ContactPhoneCountryCode IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectHumanAdditionalInfoTableID,
                       51586890000005,
                       a.HumanID,
                       NULL,
                       b.ContactPhoneTypeID,
                       a.ContactPhoneTypeID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @HumanAdditionalInfoAfterEdit AS a
                    FULL JOIN @HumanAdditionalInfoBeforeEdit AS b
                        ON a.HumanID = b.HumanID
                WHERE (a.ContactPhoneTypeID <> b.ContactPhoneTypeID)
                      OR (
                             a.ContactPhoneTypeID IS NOT NULL
                             AND b.ContactPhoneTypeID IS NULL
                         )
                      OR (
                             a.ContactPhoneTypeID IS NULL
                             AND b.ContactPhoneTypeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectHumanAdditionalInfoTableID,
                       51586890000006,
                       a.HumanID,
                       NULL,
                       b.HumanID,
                       a.HumanID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @HumanAdditionalInfoAfterEdit AS a
                    FULL JOIN @HumanAdditionalInfoBeforeEdit AS b
                        ON a.HumanID = b.HumanID
                WHERE (a.HumanID <> b.HumanID)
                      OR (
                             a.HumanID IS NOT NULL
                             AND b.HumanID IS NULL
                         )
                      OR (
                             a.HumanID IS NULL
                             AND b.HumanID IS NOT NULL
                         );
            -- End data audit
            END;

            IF NOT EXISTS
            (
                SELECT idfContactedCasePerson
                FROM dbo.tlbContactedCasePerson
                WHERE idfContactedCasePerson = @ContactedCasePersonId
                      AND idfHumanCase = @idfHumanCase
                      AND intRowStatus = 0
            )
            BEGIN
                INSERT INTO @SuppressSelect
                EXEC dbo.USP_GBL_NEXTKEYID_GET 'tlbContactedCasePerson',
                                               @ContactedCasePersonId OUTPUT;

                INSERT INTO dbo.tlbContactedCasePerson
                (
                    idfContactedCasePerson,
                    idfsPersonContactType,
                    idfHuman,
                    idfHumanCase,
                    datDateOfLastContact,
                    strPlaceInfo,
                    intRowStatus,
                    strComments,
                    SourceSystemNameID,
                    SourceSystemKeyValue,
                    AuditCreateUser,
                    AuditCreateDTM
                )
                VALUES
                (@ContactedCasePersonId,
                 @ContactRelationshipTypeId,
                 @HumanId,
                 @idfHumanCase,
                 @DateOfLastContact,
                 @PlaceOfLastContact,
                 @RowStatus,
                 @Comments,
                 10519001,
                 '[{"idfContactedCasePerson":' + CAST(@ContactedCasePersonId AS NVARCHAR(300)) + '}]',
                 @AuditUserName,
                 GETDATE()
                );

                -- Data audit
                INSERT INTO dbo.tauDataAuditDetailCreate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    SourceSystemNameID,
                    SourceSystemKeyValue,
                    AuditCreateUser,
                    strObject
                )
                VALUES
                (@DataAuditEventID,
                 @ObjectContactedCasePersonTableID,
                 @HumanId,
                 10519001,
                 '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
                 + CAST(@ObjectContactedCasePersonTableID AS NVARCHAR(300)) + '}]',
                 @AuditUserName,
                 @EIDSSObjectID
                );
            -- End data audit
            END
            ELSE
            BEGIN
                -- Data audit
                DELETE FROM @ContactedCasePersonAfterEdit;
                DELETE FROM @ContactedCasePersonBeforeEdit;

                INSERT INTO @ContactedCasePersonBeforeEdit
                (
                    ContactedCasePersonID,
                    ContactRelationshipTypeID,
                    HumanID,
                    HumanDiseaseReportID,
                    DateOfLastContact,
                    PlaceOfLastContact,
                    Comments,
                    RowStatus
                )
                SELECT idfContactedCasePerson,
                       idfsPersonContactType,
                       idfHuman,
                       idfHumanCase,
                       datDateOfLastContact,
                       strPlaceInfo,
                       strComments,
                       intRowStatus
                FROM dbo.tlbContactedCasePerson
                WHERE idfContactedCasePerson = @ContactedCasePersonId;
                -- End data audit

                UPDATE dbo.tlbContactedCasePerson
                SET idfsPersonContactType = @ContactRelationshipTypeId,
                    idfHuman = @HumanId,
                    idfHumanCase = @idfHumanCase,
                    datDateOfLastContact = @DateOfLastContact,
                    strPlaceInfo = @PlaceOfLastContact,
                    intRowStatus = @RowStatus,
                    strComments = @Comments,
                    AuditUpdateUser = @AuditUserName,
                    AuditUpdateDTM = GETDATE()
                WHERE idfContactedCasePerson = @ContactedCasePersonId
                      AND intRowStatus = 0;

                -- Data audit
                INSERT INTO @ContactedCasePersonAfterEdit
                (
                    ContactedCasePersonID,
                    ContactRelationshipTypeID,
                    HumanID,
                    HumanDiseaseReportID,
                    DateOfLastContact,
                    PlaceOfLastContact,
                    Comments,
                    RowStatus
                )
                SELECT idfContactedCasePerson,
                       idfsPersonContactType,
                       idfHuman,
                       idfHumanCase,
                       datDateOfLastContact,
                       strPlaceInfo,
                       strComments,
                       intRowStatus
                FROM dbo.tlbContactedCasePerson
                WHERE idfContactedCasePerson = @ContactedCasePersonId;

                IF @RowStatus = 0
                BEGIN
                    INSERT INTO dbo.tauDataAuditDetailUpdate
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfColumn,
                        idfObject,
                        idfObjectDetail,
                        strOldValue,
                        strNewValue,
                        AuditCreateUser,
                        strObject
                    )
                    SELECT @DataAuditEventID,
                           @ObjectContactedCasePersonTableID,
                           12675390000000,
                           a.ContactedCasePersonID,
                           NULL,
                           b.Comments,
                           a.Comments,
                           @AuditUserName,
                           @EIDSSObjectID
                    FROM @ContactedCasePersonAfterEdit AS a
                        FULL JOIN @ContactedCasePersonBeforeEdit AS b
                            ON a.ContactedCasePersonID = b.ContactedCasePersonID
                    WHERE (a.Comments <> b.Comments)
                          OR (
                                 a.Comments IS NOT NULL
                                 AND b.Comments IS NULL
                             )
                          OR (
                                 a.Comments IS NULL
                                 AND b.Comments IS NOT NULL
                             );

                    INSERT INTO dbo.tauDataAuditDetailUpdate
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfColumn,
                        idfObject,
                        idfObjectDetail,
                        strOldValue,
                        strNewValue,
                        AuditCreateUser,
                        strObject
                    )
                    SELECT @DataAuditEventID,
                           @ObjectContactedCasePersonTableID,
                           78520000000,
                           a.ContactedCasePersonID,
                           NULL,
                           b.ContactRelationshipTypeID,
                           a.ContactRelationshipTypeID,
                           @AuditUserName,
                           @EIDSSObjectID
                    FROM @ContactedCasePersonAfterEdit AS a
                        FULL JOIN @ContactedCasePersonBeforeEdit AS b
                            ON a.ContactedCasePersonID = b.ContactedCasePersonID
                    WHERE (a.ContactRelationshipTypeID <> b.ContactRelationshipTypeID)
                          OR (
                                 a.ContactRelationshipTypeID IS NOT NULL
                                 AND b.ContactRelationshipTypeID IS NULL
                             )
                          OR (
                                 a.ContactRelationshipTypeID IS NULL
                                 AND b.ContactRelationshipTypeID IS NOT NULL
                             );

                    INSERT INTO dbo.tauDataAuditDetailUpdate
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfColumn,
                        idfObject,
                        idfObjectDetail,
                        strOldValue,
                        strNewValue,
                        AuditCreateUser,
                        strObject
                    )
                    SELECT @DataAuditEventID,
                           @ObjectContactedCasePersonTableID,
                           78500000000,
                           a.ContactedCasePersonID,
                           NULL,
                           b.DateOfLastContact,
                           a.DateOfLastContact,
                           @AuditUserName,
                           @EIDSSObjectID
                    FROM @ContactedCasePersonAfterEdit AS a
                        FULL JOIN @ContactedCasePersonBeforeEdit AS b
                            ON a.ContactedCasePersonID = b.ContactedCasePersonID
                    WHERE (a.DateOfLastContact <> b.DateOfLastContact)
                          OR (
                                 a.DateOfLastContact IS NOT NULL
                                 AND b.DateOfLastContact IS NULL
                             )
                          OR (
                                 a.DateOfLastContact IS NULL
                                 AND b.DateOfLastContact IS NOT NULL
                             );

                    INSERT INTO dbo.tauDataAuditDetailUpdate
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfColumn,
                        idfObject,
                        idfObjectDetail,
                        strOldValue,
                        strNewValue,
                        AuditCreateUser,
                        strObject
                    )
                    SELECT @DataAuditEventID,
                           @ObjectContactedCasePersonTableID,
                           4566380000000,
                           a.ContactedCasePersonID,
                           NULL,
                           b.HumanDiseaseReportID,
                           a.HumanDiseaseReportID,
                           @AuditUserName,
                           @EIDSSObjectID
                    FROM @ContactedCasePersonAfterEdit AS a
                        FULL JOIN @ContactedCasePersonBeforeEdit AS b
                            ON a.ContactedCasePersonID = b.ContactedCasePersonID
                    WHERE (a.HumanDiseaseReportID <> b.HumanDiseaseReportID)
                          OR (
                                 a.HumanDiseaseReportID IS NOT NULL
                                 AND b.HumanDiseaseReportID IS NULL
                             )
                          OR (
                                 a.HumanDiseaseReportID IS NULL
                                 AND b.HumanDiseaseReportID IS NOT NULL
                             );

                    INSERT INTO dbo.tauDataAuditDetailUpdate
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfColumn,
                        idfObject,
                        idfObjectDetail,
                        strOldValue,
                        strNewValue,
                        AuditCreateUser,
                        strObject
                    )
                    SELECT @DataAuditEventID,
                           @ObjectContactedCasePersonTableID,
                           78510000000,
                           a.ContactedCasePersonID,
                           NULL,
                           b.HumanID,
                           a.HumanID,
                           @AuditUserName,
                           @EIDSSObjectID
                    FROM @ContactedCasePersonAfterEdit AS a
                        FULL JOIN @ContactedCasePersonBeforeEdit AS b
                            ON a.ContactedCasePersonID = b.ContactedCasePersonID
                    WHERE (a.HumanID <> b.HumanID)
                          OR (
                                 a.HumanID IS NOT NULL
                                 AND b.HumanID IS NULL
                             )
                          OR (
                                 a.HumanID IS NULL
                                 AND b.HumanID IS NOT NULL
                             );

                    INSERT INTO dbo.tauDataAuditDetailUpdate
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfColumn,
                        idfObject,
                        idfObjectDetail,
                        strOldValue,
                        strNewValue,
                        AuditCreateUser,
                        strObject
                    )
                    SELECT @DataAuditEventID,
                           @ObjectContactedCasePersonTableID,
                           4566390000000,
                           a.ContactedCasePersonID,
                           NULL,
                           b.PlaceOfLastContact,
                           a.PlaceOfLastContact,
                           @AuditUserName,
                           @EIDSSObjectID
                    FROM @ContactedCasePersonAfterEdit AS a
                        FULL JOIN @ContactedCasePersonBeforeEdit AS b
                            ON a.ContactedCasePersonID = b.ContactedCasePersonID
                    WHERE (a.PlaceOfLastContact <> b.PlaceOfLastContact)
                          OR (
                                 a.PlaceOfLastContact IS NOT NULL
                                 AND b.PlaceOfLastContact IS NULL
                             )
                          OR (
                                 a.PlaceOfLastContact IS NULL
                                 AND b.PlaceOfLastContact IS NOT NULL
                             );
                END
                ELSE
                BEGIN
                    INSERT INTO dbo.tauDataAuditDetailDelete
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfObject,
                        AuditCreateUser,
                        strObject
                    )
                    VALUES
                    (@DataAuditEventID, @ObjectContactedCasePersonTableID, @ContactedCasePersonId, @AuditUserName, @EIDSSObjectID);
                END
            END

            IF @OutbreakCaseContactId IS NOT NULL
            BEGIN
                IF NOT EXISTS
                (
                    SELECT OutbreakCaseContactUID
                    FROM dbo.OutbreakCaseContact
                    WHERE OutbreakCaseContactUID = @OutbreakCaseContactId
                          AND intRowStatus = 0
                )
                BEGIN
                    INSERT INTO @SuppressSelect
                    EXEC dbo.USP_GBL_NEXTKEYID_GET 'OutbreakCaseContact',
                                                   @OutbreakCaseContactId OUTPUT;

                    INSERT INTO dbo.OutbreakCaseContact
                    (
                        OutbreakCaseContactUID,
                        OutbreakCaseReportUID,
                        ContactTypeID,
                        ContactedHumanCasePersonID,
                        idfHuman,
                        ContactRelationshipTypeID,
                        DateOfLastContact,
                        PlaceOfLastContact,
                        CommentText,
                        ContactStatusID,
                        ContactTracingObservationID,
                        intRowStatus,
                        SourceSystemNameID,
                        SourceSystemKeyValue,
                        AuditCreateUser,
                        AuditCreateDTM
                    )
                    VALUES
                    (@OutbreakCaseContactId,
                     @CaseOrReportId,
                     @ContactTypeId,
                     @ContactedCasePersonId,
                     @HumanId,
                     @ContactRelationshipTypeId,
                     @DateOfLastContact,
                     @PlaceOfLastContact,
                     @Comments,
                     @ContactStatusId,
                     @ContactTracingObservationId,
                     @RowStatus,
                     10519001,
                     '[{"OutbreakCaseContactUID":' + CAST(@OutbreakCaseContactId AS NVARCHAR(300)) + '}]',
                     @AuditUserName,
                     GETDATE()
                    );
                END
                ELSE
                BEGIN
                    UPDATE dbo.OutbreakCaseContact
                    SET ContactTypeID = @ContactTypeId,
                        ContactRelationshipTypeID = @ContactRelationshipTypeId,
                        DateOfLastContact = @DateOfLastContact,
                        PlaceOfLastContact = @PlaceOfLastContact,
                        CommentText = @Comments,
                        ContactStatusID = @ContactStatusId,
                        intRowStatus = @RowStatus,
                        AuditUpdateUser = @AuditUserName,
                        AuditUpdateDTM = GETDATE()
                    WHERE OutbreakCaseContactUID = @OutbreakCaseContactId;
                END
            END;

            SET ROWCOUNT 1;
            DELETE FROM @ContactsTemp;
            SET ROWCOUNT 0;
        END
    END TRY
    BEGIN CATCH
        THROW
    END CATCH;
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering Procedure [dbo].[USSP_GBL_OBSERVATION_SET]...';


GO
-- ================================================================================================
-- Name: USSP_GBL_OBSERVATION_SET
--
-- Description:	Inserts or updates observation records for various use cases.
--
-- Revision History:
-- Name  Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     02/16/2020 Initial release.
-- Stephen Long     12/08/2022 Added data audit logic for SAUC30 and 31.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USSP_GBL_OBSERVATION_SET]
(
    @ObservationID BIGINT OUTPUT,
    @FormTemplateID BIGINT = NULL,
    @SiteID BIGINT,
    @RowStatus INT,
    @RowAction INT,
    @AuditUserName NVARCHAR(200),
    @DataAuditEventID BIGINT,
    @EIDSSObjectID NVARCHAR(200)
)
AS
DECLARE @AuditUserID BIGINT = NULL,
        @AuditSiteID BIGINT = NULL,
        @DataAuditEventTypeID BIGINT = NULL,
        @ObjectID BIGINT = NULL,
        @ObjectTableID BIGINT = 75640000000; -- tlbObservation

BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        SET @AuditUserName = ISNULL(@AuditUserName, '');

        -- Data audit
        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = userInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo;

        IF @RowAction = 1
        BEGIN
            EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tlbObservation', @ObservationID OUTPUT;

            INSERT INTO dbo.tlbObservation
            (
                idfObservation,
                idfsFormTemplate,
                intRowStatus,
                strMaintenanceFlag,
                idfsSite,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser
            )
            VALUES
            (@ObservationID,
             @FormTemplateID,
             @RowStatus,
             NULL,
             @SiteID,
             10519001,
             '[{"idfObservation":' + CAST(@ObservationID AS NVARCHAR(300)) + '}]',
             @AuditUserName
            );

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailCreate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser,
                strObject
            )
            VALUES
            (@DataAuditEventID,
             @ObjectTableID,
             @ObservationID,
             10519001,
             '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
             + CAST(@ObjectTableID AS NVARCHAR(300)) + '}]',
             @AuditUserName,
             @EIDSSObjectID
            );
        -- End data audit
        END
        ELSE
        BEGIN
            UPDATE dbo.tlbObservation
            SET idfObservation = @ObservationID,
                idfsFormTemplate = @FormTemplateID,
                intRowStatus = @RowStatus,
                idfsSite = @SiteID
            WHERE idfObservation = @ObservationID;
        END
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USSP_HAS_MONITORING_SESSION_ACTION_SET]...';


GO

-- ================================================================================================
-- Name: USSP_HAS_MONITORING_SESSION_ACTION_SET
--
-- Description:	Inserts or updates monitoring session action for the human module monitoring 
-- session enter and edit use cases.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     07/06/2019 Initial release.
-- Leo Tracchia		12/5/2022	Added logic for data auditing
-- ================================================================================================
ALTER PROCEDURE [dbo].[USSP_HAS_MONITORING_SESSION_ACTION_SET] (
	@LanguageID NVARCHAR(50),
	@DataAuditEventID BIGINT = NULL,
	@MonitoringSessionActionID BIGINT OUTPUT,
	@MonitoringSessionID BIGINT,
	@EnteredByPersonID BIGINT,
	@MonitoringSessionActionTypeID BIGINT,
	@MonitoringSessionActionStatusTypeID BIGINT,
	@ActionDate DATETIME = NULL,
	@Comments NVARCHAR(500) = NULL,
	@RowStatus INT,
	@RowAction NCHAR, 
	@AuditUserName NVARCHAR(200)
	)
AS
BEGIN
	SET NOCOUNT ON;

	BEGIN TRY

		--Data Audit--

		DECLARE @idfUserId BIGINT = NULL;
		DECLARE @idfSiteId BIGINT = NULL;
		--DECLARE @idfsDataAuditEventType bigint = NULL;	
		DECLARE @idfObject bigint = @MonitoringSessionActionID;
		DECLARE @idfObjectTable_tlbMonitoringSessionAction BIGINT = 708220000000;
		DECLARE @idfDataAuditEvent bigint = NULL;	

		DECLARE @MonitoringSessionActionBeforeEdit TABLE
		(			
			idfMonitoringSessionAction bigint,
			idfMonitoringSession bigint,
			idfPersonEnteredBy bigint,
			idfsMonitoringSessionActionType bigint,
			idfsMonitoringSessionActionStatus bigint,
			datActionDate datetime,
			strComments nvarchar(500),
			intRowStatus int			
		);

		DECLARE @MonitoringSessionActionAfterEdit TABLE
		(
			idfMonitoringSessionAction bigint,
			idfMonitoringSession bigint,
			idfPersonEnteredBy bigint,
			idfsMonitoringSessionActionType bigint,
			idfsMonitoringSessionActionStatus bigint,
			datActionDate datetime,
			strComments nvarchar(500),
			intRowStatus int
		);

		--End Data Audit--

		IF @RowAction = 'I'
		BEGIN
			EXEC dbo.USP_GBL_NEXTKEYID_GET 'tlbMonitoringSessionAction',
				@MonitoringSessionActionID OUTPUT;

			INSERT INTO dbo.tlbMonitoringSessionAction (
				idfMonitoringSessionAction,
				idfMonitoringSession,
				idfPersonEnteredBy,
				idfsMonitoringSessionActionType,
				idfsMonitoringSessionActionStatus,
				datActionDate,
				strComments,
				intRowStatus, 
				AuditCreateUser
				)
			VALUES (
				@MonitoringSessionActionID,
				@MonitoringSessionID,
				@EnteredByPersonID,
				@MonitoringSessionActionTypeID,
				@MonitoringSessionActionStatusTypeID,
				@ActionDate,
				@Comments,
				@RowStatus,
				@AuditUserName
				);

			-- Data audit
			INSERT INTO dbo.tauDataAuditDetailCreate
			(
				idfDataAuditEvent,
				idfObjectTable,
				idfObject,
				SourceSystemNameID,
				SourceSystemKeyValue,
				AuditCreateUser
			)
			VALUES
			(
				@DataAuditEventID, 
				@idfObjectTable_tlbMonitoringSessionAction, 
				@MonitoringSessionActionID, 
				10519001,
				'[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300))
				+ ',"idfObjectTable":' + CAST(@idfObjectTable_tlbMonitoringSessionAction AS NVARCHAR(300)) + '}]',
				@AuditUserName
			);
			-- End data audit
		END
		ELSE
		BEGIN

			-- Data audit
			INSERT INTO @MonitoringSessionActionBeforeEdit
            (
				idfMonitoringSessionAction,
				idfMonitoringSession,
				idfPersonEnteredBy,
				idfsMonitoringSessionActionType,
				idfsMonitoringSessionActionStatus,
				datActionDate,
				strComments,
				intRowStatus
            )
            SELECT 
				idfMonitoringSessionAction,
				idfMonitoringSession,
				idfPersonEnteredBy,
				idfsMonitoringSessionActionType,
				idfsMonitoringSessionActionStatus,
				datActionDate,
				strComments,
				intRowStatus
            FROM dbo.tlbMonitoringSessionAction
            WHERE idfMonitoringSessionAction = @MonitoringSessionActionID;
			-- End Data audit

			UPDATE dbo.tlbMonitoringSessionAction
			SET idfMonitoringSession = @MonitoringSessionID,
				idfPersonEnteredBy = @EnteredByPersonID,
				idfsMonitoringSessionActionType = @MonitoringSessionActionTypeID,
				idfsMonitoringSessionActionStatus = @MonitoringSessionActionStatusTypeID,
				datActionDate = @ActionDate,
				strComments = @Comments,
				intRowStatus = @RowStatus, 
				AuditUpdateUser = @AuditUserName
			WHERE idfMonitoringSessionAction = @MonitoringSessionActionID;

			-- Data audit
			INSERT INTO @MonitoringSessionActionAfterEdit
            (
				idfMonitoringSessionAction,
				idfMonitoringSession,
				idfPersonEnteredBy,
				idfsMonitoringSessionActionType,
				idfsMonitoringSessionActionStatus,
				datActionDate,
				strComments,
				intRowStatus
            )
            SELECT 
				idfMonitoringSessionAction,
				idfMonitoringSession,
				idfPersonEnteredBy,
				idfsMonitoringSessionActionType,
				idfsMonitoringSessionActionStatus,
				datActionDate,
				strComments,
				intRowStatus
            FROM dbo.tlbMonitoringSessionAction
            WHERE idfMonitoringSessionAction = @MonitoringSessionActionID;
			-- End Data audit

			--idfMonitoringSession 
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_tlbMonitoringSessionAction, 
				708240000000,
				a.idfMonitoringSessionAction,
				null,
				a.idfMonitoringSession,
				b.idfMonitoringSession 
			from @MonitoringSessionActionBeforeEdit a inner join @MonitoringSessionActionAfterEdit b on a.idfMonitoringSessionAction = b.idfMonitoringSessionAction
			where (a.idfMonitoringSession <> b.idfMonitoringSession) 
				or(a.idfMonitoringSession is not null and b.idfMonitoringSession is null)
				or(a.idfMonitoringSession is null and b.idfMonitoringSession is not null)

			--idfPersonEnteredBy 
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_tlbMonitoringSessionAction, 
				708250000000,
				a.idfMonitoringSessionAction,
				null,
				a.idfPersonEnteredBy,
				b.idfPersonEnteredBy 
			from @MonitoringSessionActionBeforeEdit a inner join @MonitoringSessionActionAfterEdit b on a.idfMonitoringSessionAction = b.idfMonitoringSessionAction
			where (a.idfPersonEnteredBy <> b.idfPersonEnteredBy) 
				or(a.idfPersonEnteredBy is not null and b.idfPersonEnteredBy is null)
				or(a.idfPersonEnteredBy is null and b.idfPersonEnteredBy is not null)

			--idfsMonitoringSessionActionType 
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_tlbMonitoringSessionAction, 
				708260000000,
				a.idfMonitoringSessionAction,
				null,
				a.idfsMonitoringSessionActionType,
				b.idfsMonitoringSessionActionType 
			from @MonitoringSessionActionBeforeEdit a inner join @MonitoringSessionActionAfterEdit b on a.idfMonitoringSessionAction = b.idfMonitoringSessionAction
			where (a.idfsMonitoringSessionActionType <> b.idfsMonitoringSessionActionType) 
				or(a.idfsMonitoringSessionActionType is not null and b.idfsMonitoringSessionActionType is null)
				or(a.idfsMonitoringSessionActionType is null and b.idfsMonitoringSessionActionType is not null)
			
			--idfsMonitoringSessionActionStatus 
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_tlbMonitoringSessionAction, 
				708270000000,
				a.idfMonitoringSessionAction,
				null,
				a.idfsMonitoringSessionActionStatus,
				b.idfsMonitoringSessionActionStatus 
			from @MonitoringSessionActionBeforeEdit a inner join @MonitoringSessionActionAfterEdit b on a.idfMonitoringSessionAction = b.idfMonitoringSessionAction
			where (a.idfsMonitoringSessionActionStatus <> b.idfsMonitoringSessionActionStatus) 
				or(a.idfsMonitoringSessionActionStatus is not null and b.idfsMonitoringSessionActionStatus is null)
				or(a.idfsMonitoringSessionActionStatus is null and b.idfsMonitoringSessionActionStatus is not null)

			--datActionDate 
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_tlbMonitoringSessionAction, 
				708280000000,
				a.idfMonitoringSessionAction,
				null,
				a.datActionDate,
				b.datActionDate 
			from @MonitoringSessionActionBeforeEdit a inner join @MonitoringSessionActionAfterEdit b on a.idfMonitoringSessionAction = b.idfMonitoringSessionAction
			where (a.datActionDate <> b.datActionDate) 
				or(a.datActionDate is not null and b.datActionDate is null)
				or(a.datActionDate is null and b.datActionDate is not null)

			--strComments 
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_tlbMonitoringSessionAction, 
				708290000000,
				a.idfMonitoringSessionAction,
				null,
				a.strComments,
				b.strComments 
			from @MonitoringSessionActionBeforeEdit a inner join @MonitoringSessionActionAfterEdit b on a.idfMonitoringSessionAction = b.idfMonitoringSessionAction
			where (a.strComments <> b.strComments) 
				or(a.strComments is not null and b.strComments is null)
				or(a.strComments is null and b.strComments is not null)


		END
	END TRY

	BEGIN CATCH
		THROW;
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USSP_HAS_MONITORING_SESSION_TO_SAMPLE_TYPE_SET]...';


GO

-- ================================================================================================
-- Name: USSP_HAS_MONITORING_SESSION_TO_SAMPLE_TYPE_SET
--
-- Description:	Inserts or updates monitoring session to sample type for the human module 
-- monitoring session set up and edit use cases.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     07/06/2019 Initial release.
-- Leo Tracchia		12/5/2022	Added logic for data auditing
-- ================================================================================================
ALTER PROCEDURE [dbo].[USSP_HAS_MONITORING_SESSION_TO_SAMPLE_TYPE_SET] (
	@LanguageID NVARCHAR(50),
	@DataAuditEventID BIGINT = NULL,
	@MonitoringSessionToSampleTypeID BIGINT,
	@MonitoringSessionID BIGINT,
	@OrderNumber INT,
	@RowStatus INT,
	@SampleTypeID BIGINT = NULL,
	@RowAction CHAR(1), 
	@AuditUserName NVARCHAR(200)
	)
AS
BEGIN
	SET NOCOUNT ON;

	BEGIN TRY

		--Data Audit--

		DECLARE @idfUserId BIGINT = NULL;
		DECLARE @idfSiteId BIGINT = NULL;
		DECLARE @idfsDataAuditEventType bigint = NULL;	
		DECLARE @idfObject bigint = @MonitoringSessionToSampleTypeID;
		DECLARE @idfObjectTable_MonitoringSessionToSampleType BIGINT = 53577790000002;
		DECLARE @idfDataAuditEvent bigint = NULL;	

		DECLARE @MonitoringSessionToSampleTypeBeforeEdit TABLE
		(			
			MonitoringSessionToSampleType bigint,
			idfMonitoringSession bigint,
			intOrder int,
			intRowStatus int,
			idfsSampleType bigint			
		);

		DECLARE @MonitoringSessionToSampleTypeAfterEdit TABLE
		(
			MonitoringSessionToSampleType bigint,
			idfMonitoringSession bigint,
			intOrder int,
			intRowStatus int,
			idfsSampleType bigint
		);

		--End Data Audit--

		IF @RowAction = 'I'
		BEGIN
			EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'MonitoringSessionToSampleType',
				@MonitoringSessionToSampleTypeID OUTPUT;

			INSERT INTO dbo.MonitoringSessionToSampleType (
				MonitoringSessionToSampleType,
				idfMonitoringSession,
				intOrder,
				intRowStatus,
				idfsSampleType, 
				AuditCreateUser
				)
			VALUES (
				@MonitoringSessionToSampleTypeID,
				@MonitoringSessionID,
				@OrderNumber,
				@RowStatus,
				@SampleTypeID, 
				@AuditUserName 
				);

			-- Data audit
			INSERT INTO dbo.tauDataAuditDetailCreate
			(
				idfDataAuditEvent,
				idfObjectTable,
				idfObject,
				SourceSystemNameID,
				SourceSystemKeyValue,
				AuditCreateUser
			)
			VALUES
			(
				@DataAuditEventID, 
				@idfObjectTable_MonitoringSessionToSampleType, 
				@MonitoringSessionToSampleTypeID, 
				10519001,
				'[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300))
				+ ',"idfObjectTable":' + CAST(@idfObjectTable_MonitoringSessionToSampleType AS NVARCHAR(300)) + '}]',
				@AuditUserName
			);
			-- End data audit

		END;
		ELSE
		BEGIN

			-- Data audit

			INSERT INTO @MonitoringSessionToSampleTypeBeforeEdit
            (
				MonitoringSessionToSampleType,
				idfMonitoringSession,
				intOrder,
				intRowStatus,
				idfsSampleType
            )
            SELECT 
				MonitoringSessionToSampleType,
				idfMonitoringSession,
				intOrder,
				intRowStatus,
				idfsSampleType
            FROM dbo.MonitoringSessionToSampleType
            WHERE MonitoringSessionToSampleType = @MonitoringSessionToSampleTypeID;

			-- End Data audit

			UPDATE dbo.MonitoringSessionToSampleType
			SET idfMonitoringSession = @MonitoringSessionID,
				intOrder = @OrderNumber,
				intRowStatus = @RowStatus,
				idfsSampleType = @SampleTypeID, 
				AuditUpdateUser = @AuditUserName 
			WHERE MonitoringSessionToSampleType = @MonitoringSessionToSampleTypeID;

			-- Data audit

			INSERT INTO @MonitoringSessionToSampleTypeAfterEdit
            (
				MonitoringSessionToSampleType,
				idfMonitoringSession,
				intOrder,
				intRowStatus,
				idfsSampleType
            )
            SELECT 
				MonitoringSessionToSampleType,
				idfMonitoringSession,
				intOrder,
				intRowStatus,
				idfsSampleType
            FROM dbo.MonitoringSessionToSampleType
            WHERE MonitoringSessionToSampleType = @MonitoringSessionToSampleTypeID;

			--idfMonitoringSession 
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_MonitoringSessionToSampleType, 
				51586990000018,
				a.MonitoringSessionToSampleType,
				null,
				a.idfMonitoringSession,
				b.idfMonitoringSession 
			from @MonitoringSessionToSampleTypeBeforeEdit a inner join @MonitoringSessionToSampleTypeAfterEdit b on a.MonitoringSessionToSampleType = b.MonitoringSessionToSampleType
			where (a.idfMonitoringSession <> b.idfMonitoringSession) 
				or(a.idfMonitoringSession is not null and b.idfMonitoringSession is null)
				or(a.idfMonitoringSession is null and b.idfMonitoringSession is not null)

			--intOrder 
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_MonitoringSessionToSampleType, 
				51586990000019,
				a.MonitoringSessionToSampleType,
				null,
				a.intOrder,
				b.intOrder 
			from @MonitoringSessionToSampleTypeBeforeEdit a inner join @MonitoringSessionToSampleTypeAfterEdit b on a.MonitoringSessionToSampleType = b.MonitoringSessionToSampleType
			where (a.intOrder <> b.intOrder) 
				or(a.intOrder is not null and b.intOrder is null)
				or(a.intOrder is null and b.intOrder is not null)

			--intRowStatus 
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_MonitoringSessionToSampleType, 
				51586990000020,
				a.MonitoringSessionToSampleType,
				null,
				a.intRowStatus,
				b.intRowStatus 
			from @MonitoringSessionToSampleTypeBeforeEdit a inner join @MonitoringSessionToSampleTypeAfterEdit b on a.MonitoringSessionToSampleType = b.MonitoringSessionToSampleType
			where (a.intRowStatus <> b.intRowStatus) 
				or(a.intRowStatus is not null and b.intRowStatus is null)
				or(a.intRowStatus is null and b.intRowStatus is not null)

			--idfsSampleType 
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_MonitoringSessionToSampleType, 
				51586990000021,
				a.MonitoringSessionToSampleType,
				null,
				a.idfsSampleType,
				b.idfsSampleType 
			from @MonitoringSessionToSampleTypeBeforeEdit a inner join @MonitoringSessionToSampleTypeAfterEdit b on a.MonitoringSessionToSampleType = b.MonitoringSessionToSampleType
			where (a.idfsSampleType <> b.idfsSampleType) 
				or(a.idfsSampleType is not null and b.idfsSampleType is null)
				or(a.idfsSampleType is null and b.idfsSampleType is not null)

			-- End Data audit



		END;
	END TRY

	BEGIN CATCH
		THROW;
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USSP_HAS_MonitoringSessionToDiagnosis_SET]...';


GO



-- ================================================================================================
-- Name: USSP_HAS_MonitoringSessionToDiagnosis_SET
--
-- Description:	Inserts or updates monitoring session to disease for the human module 
-- monitoring session set up and edit use cases.
--                      
-- Revision History:
-- Name             Date		Change Detail
-- ---------------- ----------	-------------------------------------------------------------------
-- Stephen Long     07/06/2019	Initial release.
-- Mark Wilson		08/19/2021	Updated to use tlbMonitoringSessionToDiagnosis and renamed to USSP_HAS_MonitoringSessionToDiagnosis_SET
-- Doug Albanese	03/25/2022	Updated to make use of "RowAction"
-- Leo Tracchia		12/5/2022	Added logic for data auditing
-- ================================================================================================
ALTER PROCEDURE [dbo].[USSP_HAS_MonitoringSessionToDiagnosis_SET] (
	@LanguageID NVARCHAR(50),
	@DataAuditEventID BIGINT = NULL,
	@idfMonitoringSessionToDiagnosis BIGINT OUTPUT,
	@idfMonitoringSession BIGINT,
	@idfsDisease BIGINT, 
	@intOrder INT,
	@idfsSpeciesType INT = NULL,
	@idfsSampleType BIGINT = NULL,
	@Comments NVARCHAR(MAX) = NULL,
	@AuditUserName NVARCHAR(200),
	@RowAction	CHAR(1) = NULL
)
AS
BEGIN
	SET NOCOUNT ON;

	BEGIN TRY

		--Data Audit--

		DECLARE @idfUserId BIGINT = NULL;
		DECLARE @idfSiteId BIGINT = NULL;
		DECLARE @idfsDataAuditEventType bigint = NULL;	
		DECLARE @idfObject bigint = @idfMonitoringSessionToDiagnosis;
		DECLARE @idfObjectTable_tlbMonitoringSessionToDiagnosis BIGINT = 707150000000;
		DECLARE @idfDataAuditEvent bigint = NULL;	

		DECLARE @MonitoringSessionToDiagnosisBeforeEdit TABLE
		(			
			idfMonitoringSessionToDiagnosis bigint,
			idfMonitoringSession bigint,
			idfsDiagnosis bigint,
			intOrder int,
			intRowStatus int,
			idfsSpeciesType bigint,
			idfsSampleType bigint,			
			Comments nvarchar(2000)			
		);

		DECLARE @MonitoringSessionToDiagnosisAfterEdit TABLE
		(
			idfMonitoringSessionToDiagnosis bigint,
			idfMonitoringSession bigint,
			idfsDiagnosis bigint,
			intOrder int,
			intRowStatus int,
			idfsSpeciesType bigint,
			idfsSampleType bigint,			
			Comments nvarchar(2000)		
		);

		--End Data Audit--

		DECLARE	@intRowStatus INT = 0

		IF NOT EXISTS (SELECT * FROM dbo.tlbMonitoringSessionToDiagnosis WHERE idfMonitoringSessionToDiagnosis = @idfMonitoringSessionToDiagnosis)
			BEGIN
				EXECUTE dbo.USP_GBL_NEXTKEYID_GET 
					'tlbMonitoringSessionToDiagnosis',
					@idfMonitoringSessionToDiagnosis OUTPUT;

				INSERT INTO dbo.tlbMonitoringSessionToDiagnosis 
				(
					idfMonitoringSessionToDiagnosis,
					idfMonitoringSession,
					idfsDiagnosis, 
					intOrder,
					intRowStatus,
					idfsSpeciesType,
					idfsSampleType,
					SourceSystemNameID,
					SourceSystemKeyValue,
					Comments,
					AuditCreateUser,
					AuditCreateDTM,
					AuditUpdateUser,
					AuditUpdateDTM
					)
				VALUES
				(
					@idfMonitoringSessionToDiagnosis,
					@idfMonitoringSession,
					@idfsDisease,
					@intOrder,
					0,
					@idfsSpeciesType,
					@idfsSampleType,
					10519001,
					'[{"idfMonitoringSessionToDiagnosis":' + CAST(@idfMonitoringSessionToDiagnosis AS NVARCHAR(300)) + '}]',
					@Comments,
					@AuditUserName,
					GETDATE(),
					@AuditUserName,
					GETDATE()
				);

				-- Data audit
				INSERT INTO dbo.tauDataAuditDetailCreate
				(
					idfDataAuditEvent,
					idfObjectTable,
					idfObject,
					SourceSystemNameID,
					SourceSystemKeyValue,
					AuditCreateUser
				)
				VALUES
				(
					@DataAuditEventID, 
					@idfObjectTable_tlbMonitoringSessionToDiagnosis, 
					@idfMonitoringSessionToDiagnosis, 
					10519001,
					'[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300))
					+ ',"idfObjectTable":' + CAST(@idfObjectTable_tlbMonitoringSessionToDiagnosis AS NVARCHAR(300)) + '}]',
					@AuditUserName
				);
				-- End data audit

			END;
		ELSE
			BEGIN
				IF @RowAction = 'D'
					BEGIN
						SET @intRowStatus = 1
					END
				ELSE
					BEGIN
						SET @intRowStatus = 0
					END

				-- Data audit

				INSERT INTO @MonitoringSessionToDiagnosisBeforeEdit
                (
					idfMonitoringSessionToDiagnosis,
					idfMonitoringSession,
					idfsDiagnosis,
					intOrder,
					intRowStatus,
					idfsSpeciesType,
					idfsSampleType,
					Comments
                )
                SELECT 
					idfMonitoringSessionToDiagnosis,
					idfMonitoringSession,
					idfsDiagnosis,
					intOrder,
					intRowStatus,
					idfsSpeciesType,
					idfsSampleType,
					Comments                     
                FROM dbo.tlbMonitoringSessionToDiagnosis
                WHERE idfMonitoringSessionToDiagnosis = @idfMonitoringSessionToDiagnosis;

				-- End Data audit

				UPDATE dbo.tlbMonitoringSessionToDiagnosis
				SET idfMonitoringSession = @idfMonitoringSession,
					idfsDiagnosis = @idfsDisease,
					intOrder = @intOrder,
					intRowStatus = @intRowStatus,
					idfsSpeciesType = @idfsSpeciesType,
					idfsSampleType = @idfsSampleType,
					SourceSystemNameID = ISNULL(SourceSystemNameID, 10519001),
					SourceSystemKeyValue = '[{"idfCampaignToDiagnosis":' + CAST(@idfMonitoringSessionToDiagnosis AS NVARCHAR(300)) + '}]',
					Comments = @Comments,
					AuditUpdateUser = @AuditUserName,
					AuditUpdateDTM = GETDATE()				
				WHERE idfMonitoringSessionToDiagnosis = @idfMonitoringSessionToDiagnosis;

				-- Data audit

				INSERT INTO @MonitoringSessionToDiagnosisAfterEdit
                (
					idfMonitoringSessionToDiagnosis,
					idfMonitoringSession,
					idfsDiagnosis,
					intOrder,
					intRowStatus,
					idfsSpeciesType,
					idfsSampleType,
					Comments
                )
                SELECT 
					idfMonitoringSessionToDiagnosis,
					idfMonitoringSession,
					idfsDiagnosis,
					intOrder,
					intRowStatus,
					idfsSpeciesType,
					idfsSampleType,
					Comments                     
                FROM dbo.tlbMonitoringSessionToDiagnosis
                WHERE idfMonitoringSessionToDiagnosis = @idfMonitoringSessionToDiagnosis;

				--idfMonitoringSessionToDiagnosis 
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_tlbMonitoringSessionToDiagnosis, 
					749060000000,
					a.idfMonitoringSessionToDiagnosis,
					null,
					a.idfMonitoringSessionToDiagnosis,
					b.idfMonitoringSessionToDiagnosis 
				from @MonitoringSessionToDiagnosisBeforeEdit a inner join @MonitoringSessionToDiagnosisAfterEdit b on a.idfMonitoringSessionToDiagnosis = b.idfMonitoringSessionToDiagnosis
				where (a.idfMonitoringSessionToDiagnosis <> b.idfMonitoringSessionToDiagnosis) 
					or(a.idfMonitoringSessionToDiagnosis is not null and b.idfMonitoringSessionToDiagnosis is null)
					or(a.idfMonitoringSessionToDiagnosis is null and b.idfMonitoringSessionToDiagnosis is not null)

				--idfMonitoringSession 
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_tlbMonitoringSessionToDiagnosis, 
					707160000000,
					a.idfMonitoringSessionToDiagnosis,
					null,
					a.idfMonitoringSession,
					b.idfMonitoringSession 
				from @MonitoringSessionToDiagnosisBeforeEdit a inner join @MonitoringSessionToDiagnosisAfterEdit b on a.idfMonitoringSessionToDiagnosis = b.idfMonitoringSessionToDiagnosis
				where (a.idfMonitoringSession <> b.idfMonitoringSession) 
					or(a.idfMonitoringSession is not null and b.idfMonitoringSession is null)
					or(a.idfMonitoringSession is null and b.idfMonitoringSession is not null)
					
				--idfsDiagnosis 
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_tlbMonitoringSessionToDiagnosis, 
					707170000000,
					a.idfMonitoringSessionToDiagnosis,
					null,
					a.idfsDiagnosis,
					b.idfsDiagnosis 
				from @MonitoringSessionToDiagnosisBeforeEdit a inner join @MonitoringSessionToDiagnosisAfterEdit b on a.idfMonitoringSessionToDiagnosis = b.idfMonitoringSessionToDiagnosis
				where (a.idfsDiagnosis <> b.idfsDiagnosis) 
					or(a.idfsDiagnosis is not null and b.idfsDiagnosis is null)
					or(a.idfsDiagnosis is null and b.idfsDiagnosis is not null)

				--idfsSampleType 
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_tlbMonitoringSessionToDiagnosis, 
					51586590000000,
					a.idfMonitoringSessionToDiagnosis,
					null,
					a.idfsSampleType,
					b.idfsSampleType 
				from @MonitoringSessionToDiagnosisBeforeEdit a inner join @MonitoringSessionToDiagnosisAfterEdit b on a.idfMonitoringSessionToDiagnosis = b.idfMonitoringSessionToDiagnosis
				where (a.idfsSampleType <> b.idfsSampleType) 
					or(a.idfsSampleType is not null and b.idfsSampleType is null)
					or(a.idfsSampleType is null and b.idfsSampleType is not null)

				--idfsSpeciesType 
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_tlbMonitoringSessionToDiagnosis, 
					4578860000000,
					a.idfMonitoringSessionToDiagnosis,
					null,
					a.idfsSpeciesType,
					b.idfsSpeciesType 
				from @MonitoringSessionToDiagnosisBeforeEdit a inner join @MonitoringSessionToDiagnosisAfterEdit b on a.idfMonitoringSessionToDiagnosis = b.idfMonitoringSessionToDiagnosis
				where (a.idfsSpeciesType <> b.idfsSpeciesType) 
					or(a.idfsSpeciesType is not null and b.idfsSpeciesType is null)
					or(a.idfsSpeciesType is null and b.idfsSpeciesType is not null)

				--intOrder 
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_tlbMonitoringSessionToDiagnosis, 
					707180000000,
					a.idfMonitoringSessionToDiagnosis,
					null,
					a.intOrder,
					b.intOrder 
				from @MonitoringSessionToDiagnosisBeforeEdit a inner join @MonitoringSessionToDiagnosisAfterEdit b on a.idfMonitoringSessionToDiagnosis = b.idfMonitoringSessionToDiagnosis
				where (a.intOrder <> b.intOrder) 
					or(a.intOrder is not null and b.intOrder is null)
					or(a.intOrder is null and b.intOrder is not null)

				-- End Data audit

			END;
	END TRY

	BEGIN CATCH
		THROW;
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USSP_HUM_ANTIVIRAL_THERAPIES_SET]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- ================================================================================================
-- Name: USSP_HUM_ANTIVIRAL_THERAPIES_SET
--
-- Description: Add or update human disease report anti-viral therapies
--          
-- Author: Harold Prior
--
-- Revision History:
-- Name                     Date       Change Detail
-- ------------------------ ---------- -----------------------------------------------------------
-- Stephen Long             11/21/2022 Initial release with data audit logic for SAUC30 and 31.
-- Stephen Long             11/29/2022 Added delete data audit logic.
-- Stephen Long             12/01/2022 Added EIDSS object ID; smart key that represents the parent 
--                                     object.
--
-- Testing code:
-- exec USSP_HUM_ANTIVIRAL_THERAPIES_SET NULL
-- ================================================================================================
ALTER PROCEDURE [dbo].[USSP_HUM_ANTIVIRAL_THERAPIES_SET]
    @HumanDiseaseReportID BIGINT = NULL,
    @AntiviralTherapiesParameters NVARCHAR(MAX) = NULL,
    @OutbreakCall INT = 0,
    @AuditUserName NVARCHAR(200) = '',
    @DataAuditEventID BIGINT = NULL,
    @EIDSSObjectID NVARCHAR(200) = NULL 
AS
DECLARE @AntimicrobialTherapyID BIGINT = NULL,
        @FirstAdministeredDate DATETIME2 = NULL,
        @AntimicrobialTherapyName NVARCHAR(200),
        @Dosage NVARCHAR(200),
        @RowAction NVARCHAR(1),
        @RowStatus INT = 0,
        @ReturnCode INT = 0,
        @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
        @AuditUserID BIGINT = NULL,
        @AuditSiteID BIGINT = NULL,
        @DataAuditEventTypeID BIGINT = NULL,
        @ObjectID BIGINT = NULL,
        @ObjectTableID BIGINT = 75470000000; -- tlbAntimicrobialTherapy
DECLARE @SuppressSelect TABLE
(
    ReturnCode INT,
    ReturnMessage VARCHAR(MAX)
);
DECLARE @AntiviralTherapiesTemp TABLE
(
    idfAntimicrobialTherapy BIGINT NULL,
    idfHumanCase BIGINT NULL,
    datFirstAdministeredDate DATETIME2 NULL,
    strAntimicrobialTherapyName NVARCHAR(200) NULL,
    strDosage NVARCHAR(200) NULL,
    rowAction NVARCHAR(1) NULL
);
DECLARE @AntiviralTherapiesBeforeEdit TABLE
(
    AntimicrobialTherapyID BIGINT,
    HumanDiseaseReportID BIGINT,
    FirstAdministeredDate DATETIME2,
    AntimicrobialTherapyName NVARCHAR(200),
    Dosage NVARCHAR(200),
    RowStatus INT
);
DECLARE @AntiviralTherapiesAfterEdit TABLE
(
    AntimicrobialTherapyID BIGINT,
    HumanDiseaseReportID BIGINT,
    FirstAdministeredDate DATETIME2,
    AntimicrobialTherapyName NVARCHAR(200),
    Dosage NVARCHAR(200),
    RowStatus INT
);
BEGIN
    SET NOCOUNT ON;

    INSERT INTO @AntiviralTherapiesTemp
    SELECT *
    FROM
        OPENJSON(@AntiviralTherapiesParameters)
        WITH
        (
            idfAntimicrobialTherapy BIGINT,
            idfHumanCase BIGINT,
            datFirstAdministeredDate DATETIME2,
            strAntimicrobialTherapyName NVARCHAR(200),
            strDosage NVARCHAR(200),
            rowAction NVARCHAR(1)
        );

    BEGIN TRY
        SET @AuditUserName = ISNULL(@AuditUserName, '');

        -- Data audit
        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = userInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo;

        WHILE EXISTS (SELECT * FROM @AntiviralTherapiesTemp)
        BEGIN
            SELECT TOP 1
                @AntimicrobialTherapyID = idfAntimicrobialTherapy,
                @FirstAdministeredDate = datFirstAdministeredDate,
                @AntimicrobialTherapyName = strAntimicrobialTherapyName,
                @Dosage = strDosage,
                @RowAction = rowAction
            FROM @AntiviralTherapiesTemp

            IF NOT EXISTS
            (
                SELECT TOP 1
                    idfAntimicrobialTherapy
                FROM dbo.tlbAntimicrobialTherapy
                WHERE idfAntimicrobialTherapy = @AntimicrobialTherapyID
            )
            BEGIN
                IF @OutbreakCall = 1
                BEGIN
                    EXEC dbo.USP_GBL_NEXTKEYID_GET 'tlbAntimicrobialTherapy',
                                                   @AntimicrobialTherapyID OUTPUT;
                END
                ELSE
                BEGIN
                    INSERT INTO @SuppressSelect
                    EXEC dbo.USP_GBL_NEXTKEYID_GET 'tlbAntimicrobialTherapy',
                                                   @AntimicrobialTherapyID OUTPUT;
                END

                INSERT INTO dbo.tlbAntimicrobialTherapy
                (
                    idfAntimicrobialTherapy,
                    idfHumanCase,
                    datFirstAdministeredDate,
                    strAntimicrobialTherapyName,
                    strDosage,
                    intRowStatus,
                    AuditCreateUser,
                    AuditCreateDTM
                )
                VALUES
                (@AntimicrobialTherapyID,
                 @HumanDiseaseReportID,
                 @FirstAdministeredDate,
                 @AntimicrobialTherapyName,
                 @Dosage,
                 0  ,
                 @AuditUserName,
                 GETDATE()
                );

                -- Data audit
                INSERT INTO dbo.tauDataAuditDetailCreate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    SourceSystemNameID,
                    SourceSystemKeyValue,
                    AuditCreateUser, 
                    strObject
                )
                VALUES
                (@DataAuditEventID,
                 @ObjectTableID,
                 @AntimicrobialTherapyID,
                 10519001,
                 '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
                 + CAST(@ObjectTableID AS NVARCHAR(300)) + '}]',
                 @AuditUserName,
                 @EIDSSObjectID
                );
            -- End data audit
            END
            ELSE
            BEGIN
                IF @RowAction = 'D'
                BEGIN
                    SET @RowStatus = 1;
                END
                ELSE
                BEGIN
                    SET @RowStatus = 0;
                END

                DELETE FROM @AntiviralTherapiesAfterEdit;
                DELETE FROM @AntiviralTherapiesBeforeEdit;

                INSERT INTO @AntiviralTherapiesBeforeEdit
                (
                    AntimicrobialTherapyID,
                    HumanDiseaseReportID,
                    FirstAdministeredDate,
                    AntimicrobialTherapyName,
                    Dosage,
                    RowStatus
                )
                SELECT idfAntimicrobialTherapy,
                       idfHumanCase,
                       datFirstAdministeredDate,
                       strAntimicrobialTherapyName,
                       strDosage,
                       intRowStatus
                FROM dbo.tlbAntimicrobialTherapy
                WHERE idfAntimicrobialTherapy = @AntimicrobialTherapyID;

                UPDATE dbo.tlbAntimicrobialTherapy
                SET idfHumanCase = @HumanDiseaseReportID,
                    datFirstAdministeredDate = @FirstAdministeredDate,
                    strAntimicrobialTherapyName = @AntimicrobialTherapyName,
                    strDosage = @Dosage,
                    intRowStatus = @RowStatus,
                    AuditUpdateUser = @AuditUserName,
                    AuditUpdateDTM = GETDATE()
                WHERE idfAntimicrobialTherapy = @AntimicrobialTherapyID
                      AND intRowStatus = 0;

                INSERT INTO @AntiviralTherapiesAfterEdit
                (
                    AntimicrobialTherapyID,
                    HumanDiseaseReportID,
                    FirstAdministeredDate,
                    AntimicrobialTherapyName,
                    Dosage,
                    RowStatus
                )
                SELECT idfAntimicrobialTherapy,
                       idfHumanCase,
                       datFirstAdministeredDate,
                       strAntimicrobialTherapyName,
                       strDosage,
                       intRowStatus
                FROM dbo.tlbAntimicrobialTherapy
                WHERE idfAntimicrobialTherapy = @AntimicrobialTherapyID;

                IF @RowStatus = 0
                BEGIN
                    INSERT INTO dbo.tauDataAuditDetailUpdate
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfColumn,
                        idfObject,
                        idfObjectDetail,
                        strOldValue,
                        strNewValue,
                        AuditCreateUser, 
                        strObject
                    )
                    SELECT @DataAuditEventID,
                           @ObjectTableID,
                           4577800000000,
                           a.AntimicrobialTherapyID,
                           NULL,
                           b.HumanDiseaseReportID,
                           a.HumanDiseaseReportID,
                           @AuditUserName, 
                           @EIDSSObjectID
                    FROM @AntiviralTherapiesAfterEdit AS a
                        FULL JOIN @AntiviralTherapiesBeforeEdit AS b
                            ON a.AntimicrobialTherapyID = b.AntimicrobialTherapyID
                    WHERE (a.HumanDiseaseReportID <> b.HumanDiseaseReportID)
                          OR (
                                 a.HumanDiseaseReportID IS NOT NULL
                                 AND b.HumanDiseaseReportID IS NULL
                             )
                          OR (
                                 a.HumanDiseaseReportID IS NULL
                                 AND b.HumanDiseaseReportID IS NOT NULL
                             );

                    INSERT INTO dbo.tauDataAuditDetailUpdate
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfColumn,
                        idfObject,
                        idfObjectDetail,
                        strOldValue,
                        strNewValue,
                        AuditCreateUser, 
                        strObject
                    )
                    SELECT @DataAuditEventID,
                           @ObjectTableID,
                           78350000000,
                           a.AntimicrobialTherapyID,
                           NULL,
                           b.FirstAdministeredDate,
                           a.FirstAdministeredDate,
                           @AuditUserName, 
                           @EIDSSObjectID
                    FROM @AntiviralTherapiesAfterEdit AS a
                        FULL JOIN @AntiviralTherapiesBeforeEdit AS b
                            ON a.AntimicrobialTherapyID = b.AntimicrobialTherapyID
                    WHERE (a.FirstAdministeredDate <> b.FirstAdministeredDate)
                          OR (
                                 a.FirstAdministeredDate IS NOT NULL
                                 AND b.FirstAdministeredDate IS NULL
                             )
                          OR (
                                 a.FirstAdministeredDate IS NULL
                                 AND b.FirstAdministeredDate IS NOT NULL
                             );

                    INSERT INTO dbo.tauDataAuditDetailUpdate
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfColumn,
                        idfObject,
                        idfObjectDetail,
                        strOldValue,
                        strNewValue,
                        AuditCreateUser, 
                        strObject
                    )
                    SELECT @DataAuditEventID,
                           @ObjectTableID,
                           78360000000,
                           a.AntimicrobialTherapyID,
                           NULL,
                           b.AntimicrobialTherapyName,
                           a.AntimicrobialTherapyName,
                           @AuditUserName, 
                           @EIDSSObjectID
                    FROM @AntiviralTherapiesAfterEdit AS a
                        FULL JOIN @AntiviralTherapiesBeforeEdit AS b
                            ON a.AntimicrobialTherapyID = b.AntimicrobialTherapyID
                    WHERE (a.AntimicrobialTherapyName <> b.AntimicrobialTherapyName)
                          OR (
                                 a.AntimicrobialTherapyName IS NOT NULL
                                 AND b.AntimicrobialTherapyName IS NULL
                             )
                          OR (
                                 a.AntimicrobialTherapyName IS NULL
                                 AND b.AntimicrobialTherapyName IS NOT NULL
                             );

                    INSERT INTO dbo.tauDataAuditDetailUpdate
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfColumn,
                        idfObject,
                        idfObjectDetail,
                        strOldValue,
                        strNewValue,
                        AuditCreateUser, 
                        strObject
                    )
                    SELECT @DataAuditEventID,
                           @ObjectTableID,
                           4577810000000,
                           a.AntimicrobialTherapyID,
                           NULL,
                           b.Dosage,
                           a.Dosage,
                           @AuditUserName, 
                           @EIDSSObjectID
                    FROM @AntiviralTherapiesAfterEdit AS a
                        FULL JOIN @AntiviralTherapiesBeforeEdit AS b
                            ON a.AntimicrobialTherapyID = b.AntimicrobialTherapyID
                    WHERE (a.Dosage <> b.Dosage)
                          OR (
                                 a.Dosage IS NOT NULL
                                 AND b.Dosage IS NULL
                             )
                          OR (
                                 a.Dosage IS NULL
                                 AND b.Dosage IS NOT NULL
                             );

                    INSERT INTO dbo.tauDataAuditDetailRestore
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfObject,
                        idfObjectDetail,
                        AuditCreateUser, 
                        strObject
                    )
                    SELECT @DataAuditEventID,
                           @ObjectTableID,
                           a.AntimicrobialTherapyID,
                           NULL,
                           @AuditUserName, 
                           @EIDSSObjectID
                    FROM @AntiviralTherapiesAfterEdit AS a
                        FULL JOIN @AntiviralTherapiesBeforeEdit AS b
                            ON a.AntimicrobialTherapyID = b.AntimicrobialTherapyID
                    WHERE a.RowStatus = 0
                          AND b.RowStatus = 1;
                END
                ELSE
                BEGIN
                    INSERT INTO dbo.tauDataAuditDetailDelete
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfObject,
                        AuditCreateUser,
                        strObject
                    )
                    VALUES
                    (@DataAuditEventid, @ObjectTableID, @AntimicrobialTherapyID, @AuditUserName, @EIDSSObjectID);
                END
            END

            SET ROWCOUNT 1;
            DELETE FROM @AntiviralTherapiesTemp;
            SET ROWCOUNT 0;
        END

    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering Procedure [dbo].[USSP_HUM_DISEASE_VACCINATION_SET]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- ================================================================================================
-- Name: USSP_HUM_DISEASE_VACCINATION_SET
--
-- Description: Add, update and delete human disease report vaccination records.
--          
-- Author: Harold Arnold
--
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     11/21/2022 Initial release with data audit logic for SAUC30 and 31.
-- Stephen Long     11/29/2022 Added delete data audit logic.
-- Stephen Long     12/01/2022 Added EIDSS object ID; smart key that represents the parent object.
--
-- Testing code:
-- exec USSP_HUMAN_DISEASE_VACCINATIONS_SET null
-- ================================================================================================
ALTER PROCEDURE [dbo].[USSP_HUM_DISEASE_VACCINATION_SET]
    @HumanDiseaseReportID BIGINT = NULL,
    @VaccinationsParameters NVARCHAR(MAX) = NULL,
    @OutbreakCall INT = 0,
    @AuditUserName NVARCHAR(100) = '',
    @DataAuditEventID BIGINT = NULL, 
    @EIDSSObjectID NVARCHAR(200) = NULL 
AS
DECLARE @HumanDiseaseReportVaccinationUID BIGINT,
        @VaccinationName NVARCHAR(200),
        @VaccinationDate DATETIME2 = NULL,
        @intRowStatus INT = NULL,
        @RowAction NVARCHAR(1),
        @RowID BIGINT,
        @AuditUserID BIGINT = NULL,
        @AuditSiteID BIGINT = NULL,
        @DataAuditEventTypeID BIGINT = NULL,
        @ObjectID BIGINT = NULL,
        @ObjectTableID BIGINT = 53577590000000, -- HumanDiseaseReportVaccination
        @ReturnCode INT = 0,
        @ReturnMessage NVARCHAR(MAX) = 'SUCCESS';
DECLARE @SuppressSelect TABLE
(
    ReturnCode INT,
    ReturnMessage NVARCHAR(MAX)
);
DECLARE @VaccinationsTemp TABLE
(
    vaccinationID INT NULL,
    humanDiseaseReportVaccinationUID BIGINT NULL,
    idfHumanCase BIGINT NULL,
    vaccinationName NVARCHAR(200) NULL,
    vaccinationDate DATETIME2 NULL,
    rowAction NVARCHAR(1) NULL, 
    intRowStatus INT
);
DECLARE @VaccinationsBeforeEdit TABLE
(
    VaccinationID BIGINT,
    VaccinationName NVARCHAR(200),
    VaccinationDate DATETIME2,
    RowStatus INT
);
DECLARE @VaccinationsAfterEdit TABLE
(
    VaccinationID BIGINT,
    VaccinationName NVARCHAR(200),
    VaccinationDate DATETIME2,
    RowStatus INT
);
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        SET @AuditUserName = ISNULL(@AuditUserName, '');

        -- Data audit
        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = userInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo;
        -- End data audit

        INSERT INTO @VaccinationsTemp
        SELECT *
        FROM
            OPENJSON(@VaccinationsParameters)
            WITH
            (
                vaccinationID INT, 
                humanDiseaseReportVaccinationUID BIGINT,
                idfHumanCase BIGINT,
                vaccinationName NVARCHAR(200),
                vaccinationDate DATETIME2,
                rowAction NVARCHAR(1), 
                intRowStatus INT 
            );

        WHILE EXISTS (SELECT * FROM @VaccinationsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = humanDiseaseReportVaccinationUID,
                @HumanDiseaseReportVaccinationUID = humanDiseaseReportVaccinationUID,
                @VaccinationName = vaccinationName,
                @VaccinationDate = vaccinationDate,
                @RowAction = rowAction, 
                @intRowStatus = intRowStatus 
            FROM @VaccinationsTemp;

            IF NOT EXISTS
            (
                SELECT HumanDiseaseReportVaccinationUID
                FROM dbo.HumanDiseaseReportVaccination
                WHERE HumanDiseaseReportVaccinationUID = @HumanDiseaseReportVaccinationUID
            )
            BEGIN
                IF @OutbreakCall = 1
                BEGIN
                    EXEC dbo.USP_GBL_NEXTKEYID_GET 'HumanDiseaseReportVaccination',
                                                   @HumanDiseaseReportVaccinationUID OUTPUT;
                END
                ELSE
                BEGIN
                    INSERT INTO @SuppressSelect
                    EXEC dbo.USP_GBL_NEXTKEYID_GET 'HumanDiseaseReportVaccination',
                                                   @HumanDiseaseReportVaccinationUID OUTPUT;
                END

                INSERT INTO dbo.HumanDiseaseReportVaccination
                (
                    HumanDiseaseReportVaccinationUID,
                    idfHumanCase,
                    VaccinationName,
                    VaccinationDate,
                    intRowStatus,
                    AuditCreateUser,
                    AuditCreateDTM
                )
                VALUES
                (   @HumanDiseaseReportVaccinationUID,
                    @HumanDiseaseReportID,
                    @VaccinationName,
                    @VaccinationDate,
                    0, --Always 0, because this is a new record
                    @AuditUserName,
                    GETDATE()
                );

                -- Data audit
                INSERT INTO dbo.tauDataAuditDetailCreate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    SourceSystemNameID,
                    SourceSystemKeyValue,
                    AuditCreateUser, 
                    strObject
                )
                VALUES
                (@DataAuditEventID,
                 @ObjectTableID,
                 @HumanDiseaseReportVaccinationUID,
                 10519001,
                 '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
                 + CAST(@ObjectTableID AS NVARCHAR(300)) + '}]',
                 @AuditUserName, 
                 @EIDSSObjectID
                );
            -- End data audit
            END
            ELSE
            BEGIN
                -- Data audit
                DELETE FROM @VaccinationsAfterEdit;
                DELETE FROM @VaccinationsBeforeEdit;

                INSERT INTO @VaccinationsBeforeEdit
                (
                    VaccinationID,
                    VaccinationDate,
                    VaccinationName,
                    RowStatus
                )
                SELECT HumanDiseaseReportVaccinationUID,
                       VaccinationDate,
                       VaccinationName,
                       intRowStatus
                FROM dbo.HumanDiseaseReportVaccination
                WHERE HumanDiseaseReportVaccinationUID = @HumanDiseaseReportVaccinationUID;
                -- End data audit 

                UPDATE dbo.HumanDiseaseReportVaccination
                SET VaccinationName = @VaccinationName,
                    VaccinationDate = @VaccinationDate,
                    intRowStatus = @intRowStatus,
                    AuditUpdateUser = @AuditUserName,
                    AuditUpdateDTM = GETDATE()
                WHERE HumanDiseaseReportVaccinationUID = @HumanDiseaseReportVaccinationUID;

                -- Data audit
                INSERT INTO @VaccinationsAfterEdit
                (
                    VaccinationID,
                    VaccinationDate,
                    VaccinationName,
                    RowStatus
                )
                SELECT HumanDiseaseReportVaccinationUID,
                       VaccinationDate,
                       VaccinationName,
                       intRowStatus
                FROM dbo.HumanDiseaseReportVaccination
                WHERE HumanDiseaseReportVaccinationUID = @HumanDiseaseReportVaccinationUID;

                IF @intRowStatus = 0
                BEGIN
                    INSERT INTO dbo.tauDataAuditDetailUpdate
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfColumn,
                        idfObject,
                        idfObjectDetail,
                        strOldValue,
                        strNewValue,
                        AuditCreateUser, 
                        strObject
                    )
                    SELECT @DataAuditEventID,
                           @ObjectTableID,
                           51586690000002,
                           a.VaccinationID,
                           NULL,
                           b.VaccinationDate,
                           a.VaccinationDate,
                           @AuditUserName,
                           @EIDSSObjectID
                    FROM @VaccinationsAfterEdit AS a
                        FULL JOIN @VaccinationsAfterEdit AS b
                            ON a.VaccinationID = b.VaccinationID
                    WHERE (a.VaccinationDate <> b.VaccinationDate)
                          OR (
                                 a.VaccinationDate IS NOT NULL
                                 AND b.VaccinationDate IS NULL
                             )
                          OR (
                                 a.VaccinationDate IS NULL
                                 AND b.VaccinationDate IS NOT NULL
                             );

                    INSERT INTO dbo.tauDataAuditDetailUpdate
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfColumn,
                        idfObject,
                        idfObjectDetail,
                        strOldValue,
                        strNewValue,
                        AuditCreateUser, 
                        strObject
                    )
                    SELECT @DataAuditEventID,
                           @ObjectTableID,
                           51586690000001,
                           a.VaccinationID,
                           NULL,
                           b.VaccinationName,
                           a.VaccinationName,
                           @AuditUserName,
                           @EIDSSObjectID
                    FROM @VaccinationsAfterEdit AS a
                        FULL JOIN @VaccinationsBeforeEdit AS b
                            ON a.VaccinationID = b.VaccinationID
                    WHERE (a.VaccinationName <> b.VaccinationName)
                          OR (
                                 a.VaccinationName IS NOT NULL
                                 AND b.VaccinationName IS NULL
                             )
                          OR (
                                 a.VaccinationName IS NULL
                                 AND b.VaccinationName IS NOT NULL
                             );
                END
                ELSE
                BEGIN
                    INSERT INTO dbo.tauDataAuditDetailDelete
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfObject,
                        AuditCreateUser, 
                        strObject
                    )
                    VALUES
                    (@DataAuditEventID, @ObjectTableID, @HumanDiseaseReportVaccinationUID, @AuditUserName, @EIDSSObjectID);
                END
            -- End data audit
            END

            SET ROWCOUNT 1;
            DELETE FROM @VaccinationsTemp;
            SET ROWCOUNT 0;
        END
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering Procedure [dbo].[USSP_HUM_REP_WHOEXPORT_GG]...';


GO
--*************************************************************************
-- Name 				: dbo.USSP_HUM_REP_WHOEXPORT_GG
--
-- Description			: SINT03 - WHO Export dbo ON Measles AND Rubella for GG.
-- 
-- Author               : Mandar Kulkarni
-- Revision History
--		Name			Date		Change Detail
--		Ann Xiong		12/02/2022	Replaced 'WHOrep_specific_gis_rayon' with 'WHOrep_specific_gis_region' to get the correct region data and added strImportationCountry and intInitialDiagnosis to the return list.
--		Ann Xiong		12/05/2022	 Generated new CaseID from WHOAreaID in table gisWHOMap
--		Ann Xiong		12/07/2022	Modified to return OutbreakID when the report is related to Outbreak Session and return data on EndDate
--

-- Testing code:

--Example of a call of PROCEDURE:
--GG
--exec dbo.[USSP_HUM_REP_WHOEXPORT_GG] @LangID=N'en',@StartDate='20140101',@EndDate='20141231', @idfsDiagnosis = 9843460000000   
--*************************************************************************

ALTER  PROCEDURE [dbo].[USSP_HUM_REP_WHOEXPORT_GG]
 (
		@LangID		AS NVARCHAR(50), 
		@StartDate DATETIME,
		@EndDate DATETIME,
		@idfsDiagnosis BIGINT
 )
AS	

BEGIN


DECLARE	@cmd	NVARCHAR(4000)

-- Drop temporary tables
IF Object_ID('tempdb..#HumanCasesToExport') IS NOT NULL
BEGIN
	SET	@cmd = N'drop TABLE #HumanCasesToExport'
	EXEC sp_executesql @cmd
END

IF Object_ID('tempdb..#FFToExport') IS NOT NULL
BEGIN
	SET	@cmd = N'drop TABLE #FFToExport'
	EXEC sp_executesql @cmd
END

IF Object_ID('tempdb..#ResultTable') IS NOT NULL
BEGIN
	SET	@cmd = N'drop TABLE #ResultTable'
	EXEC sp_executesql @cmd
END

-- CREATE temporary tables
IF Object_ID('tempdb..#HumanCasesToExport') IS NULL
CREATE TABLE #HumanCasesToExport
(	idfHumanCase				BIGINT NOT NULL PRIMARY KEY,
	idfHuman					BIGINT NOT NULL,
	idfCRAddress				BIGINT NULL,
	idfsDiagnosis				BIGINT NOT NULL,
	idfCSObservation			BIGINT NULL,
	idfEpiObservation			BIGINT NULL,
	datDateOnset				DATETIME NOT NULL,
	idfOutbreak					BIGINT NULL,
	NumberOfReceivedDoses		NVARCHAR(50) collate Cyrillic_General_CI_AS NULL,
	DateOfLastVaccination		DATETIME NULL,
	Fever						BIGINT NULL,
	Cough						BIGINT NULL,
	Coryza						BIGINT NULL,  		
	Conjunctivitis				BIGINT NULL,  
	RashDuration				NVARCHAR(50) collate Cyrillic_General_CI_AS NULL,	
	SourceOfInfection			BIGINT NULL,   
	Complications				BIGINT NULL,    
	Encephalitis				BIGINT NULL,    
	Pneumonia					BIGINT NULL,    	
	Diarrhoea					BIGINT NULL,    
	Other						NVARCHAR(500) collate Cyrillic_General_CI_AS NULL,	
	datConcludedDate			DATETIME NULL,
	idfsSampleType				BIGINT NULL,
	datFieldCollectionDate		DATETIME NULL,
	idfsTestResult				BIGINT NULL,
	idfsTestStatus				BIGINT NULL,
	idfTesting					BIGINT NULL
)
DELETE FROM #HumanCasesToExport

IF Object_ID('tempdb..#FFToExport') IS NULL
CREATE TABLE #FFToExport
(	idfActivityParameters		BIGINT NOT NULL PRIMARY KEY,
	idfsParameter				BIGINT NOT NULL,
	idfObservation				BIGINT NOT NULL,
	idfRow						BIGINT NOT NULL,
	varValue					sql_variant NULL
)
DELETE FROM #FFToExport

IF Object_ID('tempdb..#ResultTable') IS NULL
CREATE TABLE	#ResultTable
(	  
	  idfCase					BIGINT NOT NULL PRIMARY KEY
	, strCaseID					NVARCHAR(300) collate database_default NOT NULL 
	, intAreaID					INT NOT NULL 
	, datDRash					date NULL
	, intGenderID				INT NOT NULL 
	, datDBirth					date NULL
	, intAgeAtRashOnset			INT NULL
	, intNumOfVaccines			INT NULL
	, datDvaccine				DATETIME NULL
	, datDNotification			DATETIME NULL
	, datDInvestigation			DATETIME NULL
	, intClinFever				INT NULL
	, intClinCCC				INT NULL
	, intClinRashDuration		INT NULL
	, intClinOutcome			INT NULL
	, intClinHospitalization	INT NULL
	, intSrcInf					INT NULL
	, intSrcOutbreakRelated		INT NULL
	, strSrcOutbreakID			NVARCHAR(50) collate database_default NULL default NULL
	, intCompComplications		INT NULL
	, intCompEncephalitis		INT NULL
	, intCompPneumonia			INT NULL
	, intCompMalnutrition		INT NULL
	, intCompDiarrhoea			INT NULL
	, intCompOther				INT NULL
	, intFinalClassification	INT NULL
	, datDSpecimen				DATETIME NULL
	, intSpecimen				INT NULL
	, datDLabResult				DATETIME NULL
	, intMeaslesIgm				INT NULL
	, intMeaslesVirusDetection	INT NULL		
	, intRubellaIgm				INT NULL
	, intRubellaVirusDetection	INT NULL
	, strCommentsEpi			NVARCHAR(500) collate database_default NULL 
)
DELETE FROM #ResultTable

DECLARE 
  
	@idfsSummaryReportType			BIGINT,
	
	
	@FFP_DateOfOnset_M				BIGINT,
	@FFP_DateOfOnset_R				BIGINT,  	
		
	@FFP_NumberOfReceivedDoses_M	BIGINT,
	@FFP_NumberOfReceivedDoses_R	BIGINT,  		
	
	@FFP_DateOfLastVaccination_M	BIGINT,
	@FFP_DateOfLastVaccination_R	BIGINT,  		
	
	@FFP_Fever_M					BIGINT,
	@FFP_Fever_R					BIGINT,  		
	
	@FFP_Cough_M					BIGINT,
	@FFP_Cough_R					BIGINT,  	
	
	@FFP_Coryza_M					BIGINT,
	@FFP_Coryza_R					BIGINT,  	  	
	
	@FFP_Conjunctivitis_M			BIGINT,
	@FFP_Conjunctivitis_R			BIGINT,  	   				
	
	@FFP_RashDuration_M				BIGINT,
	@FFP_RashDuration_R				BIGINT,  		
	
	@FFP_SourceOfInfection_M		BIGINT,
	@FFP_SourceOfInfection_R		BIGINT,  		
	
	@FFP_Complications_M			BIGINT,
	@FFP_Complications_R			BIGINT,  		

	@FFP_Encephalitis_M				BIGINT,
	@FFP_Encephalitis_R				BIGINT,  		
	  		
	@FFP_Pneumonia_M				BIGINT,
	@FFP_Pneumonia_R				BIGINT,  		
	  		  		
	@FFP_Diarrhoea_M				BIGINT,
	--@FFP_Diarrhoea_R				BIGINT,  		
	  		  		
	@FFP_Other_M					BIGINT,  		  		
	--@FFP_Other_R					BIGINT,  	 
	 		
	@idfsDiagnosis_Measles			BIGINT,
	@idfsDiagnosis_Rubella			BIGINT
	
			  	
SET @idfsSummaryReportType = 10290027 /*WHO dbo - AJ&GG*/

--HCS FF - Rash onset date. / HCS FF- Date of onset
SELECT @FFP_DateOfOnset_M = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_DateOfOnset_M'
AND intRowStatus = 0

SELECT @FFP_DateOfOnset_R = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_DateOfOnset_R'
AND intRowStatus = 0
  
--HEI - Number of received doses (any vaccine with measles component) / HEI - Number of Measles vaccine doses received
SELECT @FFP_NumberOfReceivedDoses_M = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_NumberOfReceivedDoses_M'
AND intRowStatus = 0

SELECT @FFP_NumberOfReceivedDoses_R = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_NumberOfReceivedDoses_R'
AND intRowStatus = 0  	

--HEI - Date of last vaccination/HEI - Date of last Measles vaccine
SELECT @FFP_DateOfLastVaccination_M = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_DateOfLastVaccination_M'
AND intRowStatus = 0	

SELECT @FFP_DateOfLastVaccination_R = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_DateOfLastVaccination_R'
AND intRowStatus = 0	  
	
--HCS - Fever/HCS - Fever
SELECT @FFP_Fever_M = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Fever_M'
AND intRowStatus = 0

SELECT @FFP_Fever_R = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Fever_R'
AND intRowStatus = 0  	
	
--HCS - Cough / Coryza / Conjunctivitis /HCS - Cough / Coryza / Conjunctivitis
SELECT @FFP_Cough_M = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Cough_M'
AND intRowStatus = 0	

SELECT @FFP_Cough_R = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Cough_R'
AND intRowStatus = 0	 


SELECT @FFP_Coryza_M = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Coryza_M'
AND intRowStatus = 0	

SELECT @FFP_Coryza_R = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Coryza_R'
AND intRowStatus = 0	  	


SELECT @FFP_Conjunctivitis_M = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Conjunctivitis_M'
AND intRowStatus = 0	

SELECT @FFP_Conjunctivitis_R = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Conjunctivitis_R'
AND intRowStatus = 0	  	


--HCS - Rash duration / HCS - Duration (days)
SELECT @FFP_RashDuration_M = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_RashDuration_M'
AND intRowStatus = 0

SELECT @FFP_RashDuration_R = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_RashDuration_R'
AND intRowStatus = 0  	
	
--EPI - Source of infection / EPI - Source of infection
SELECT @FFP_SourceOfInfection_M = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_SourceOfInfection_M'
AND intRowStatus = 0		

SELECT @FFP_SourceOfInfection_R = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_SourceOfInfection_R'
AND intRowStatus = 0	  	

--HCS - Complications / HCS - Complications
SELECT @FFP_Complications_M = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Complications_M'
AND intRowStatus = 0		

SELECT @FFP_Complications_R = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Complications_R'
AND intRowStatus = 0		  

--HCS - Encephalitis / HCS - Encephalitis
SELECT @FFP_Encephalitis_M = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Encephalitis_M'
AND intRowStatus = 0		

SELECT @FFP_Encephalitis_R = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Encephalitis_R'
AND intRowStatus = 0	  	

--HCS - Pneumonia / HCS - Pneumonia
SELECT @FFP_Pneumonia_M = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Pneumonia_M'
AND intRowStatus = 0	

SELECT @FFP_Pneumonia_R = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Pneumonia_R'
AND intRowStatus = 0	  	
	
--HCS - Diarrhoea / HCS - Diarrhoea
SELECT @FFP_Diarrhoea_M = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Diarrhoea_M'
AND intRowStatus = 0		

--SELECT @FFP_Diarrhoea_R = idfsFFObject FROM trtFFObjectForCustomReport
--WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Diarrhoea_R'
--AND intRowStatus = 0		  	

--HCS - Other (specify) / HCS - Other
SELECT @FFP_Other_M = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Other_M'
AND intRowStatus = 0	 

--SELECT @FFP_Other_R = idfsFFObject FROM trtFFObjectForCustomReport
--WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Other_R'
--AND intRowStatus = 0	   	

 	
--idfsDiagnosis for:
--Measles
SELECT top 1 @idfsDiagnosis_Measles = d.idfsDiagnosis
FROM trtDiagnosis d
  INNER JOIN dbo.trtDiagnosisToGroupForReportType dgrt
  ON dgrt.idfsDiagnosis = d.idfsDiagnosis
  AND dgrt.idfsCustomReportType = @idfsSummaryReportType
  
  INNER JOIN dbo.trtReportDiagnosisGroup dg
  ON dgrt.idfsReportDiagnosisGroup = dg.idfsReportDiagnosisGroup
  AND dg.intRowStatus = 0 AND dg.strDiagnosisGroupAlias = 'DG_Measles'
 WHERE d.intRowStatus = 0

--Rubella
SELECT top 1 @idfsDiagnosis_Rubella = d.idfsDiagnosis
FROM trtDiagnosis d
  INNER JOIN dbo.trtDiagnosisToGroupForReportType dgrt
  ON dgrt.idfsDiagnosis = d.idfsDiagnosis
  AND dgrt.idfsCustomReportType = @idfsSummaryReportType
  
  INNER JOIN dbo.trtReportDiagnosisGroup dg
  ON dgrt.idfsReportDiagnosisGroup = dg.idfsReportDiagnosisGroup
  AND dg.intRowStatus = 0 AND dg.strDiagnosisGroupAlias = 'DG_Rubella'
 WHERE d.intRowStatus = 0	


 DECLARE @AreaIDs TABLE
 (
 intAreaID INT,
 idfsRegion BIGINT
 )

INSERT INTO @AreaIDs (intAreaID, idfsRegion)
SELECT		
CAST(tgra.varValue AS INT), reg.idfsReference
FROM trtGISBaseReferenceAttribute tgra
	INNER JOIN trtAttributeType tat
	ON tat.idfAttributeType = tgra.idfAttributeType
	AND tat.strAttributeTypeName = 'WHOrep_specific_gis_region'
  INNER JOIN report.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000003 /*Region*/) reg
	  ON reg.idfsReference = tgra.idfsGISBaseReference AND reg.intRowStatus = 0 

DECLARE	@DateOnsetParameter BIGINT = -100
IF	@idfsDiagnosis = @idfsDiagnosis_Measles
	SET	@DateOnsetParameter = @FFP_DateOfOnset_M
ELSE IF	@idfsDiagnosis = @idfsDiagnosis_Rubella
	SET	@DateOnsetParameter = @FFP_DateOfOnset_R

INSERT INTO	#HumanCasesToExport
(	idfHumanCase,
	idfHuman,
	idfCRAddress,
	idfsDiagnosis,
	idfCSObservation,
	idfEpiObservation,
	datDateOnset,
	idfOutbreak
)
SELECT	hc.idfHumanCase,
		h.idfHuman,
		h.idfCurrentResidenceAddress,
		ISNULL(hc.idfsFinalDiagnosis, hc.idfsTentativeDiagnosis),
		hc.idfCSObservation,
		hc.idfEpiObservation,
		COALESCE(	
			CASE
				WHEN	(CAST(SQL_VARIANT_PROPERTY(ap_DateOfOnset.varValue, 'BaseType') AS NVARCHAR) like N'%date%') or
						(CAST(SQL_VARIANT_PROPERTY(ap_DateOfOnset.varValue, 'BaseType') AS NVARCHAR) like N'%char%' AND ISDATE(CAST(ap_DateOfOnset.varValue AS NVARCHAR)) = 1) 
					THEN dbo.fnDateCutTime(CAST(ap_DateOfOnset.varValue AS DATETIME))
					ELSE NULL
			END, hc.datOnSetDate, hc.datFinalDiagnosisDate, hc.datTentativeDiagnosisDate, hc.datNotificationDate, hc.datEnteredDate
			),
		hc.idfOutbreak
FROM tlbHumanCase hc

	INNER JOIN tlbHuman h
	ON hc.idfHuman = h.idfHuman AND  h.intRowStatus = 0	
	OUTER APPLY ( 
		SELECT top 1 
			ap.varValue
		FROM tlbActivityParameters ap
		WHERE	ap.idfObservation = hc.idfCSObservation
			AND	ap.idfsParameter = @DateOnsetParameter
			AND ap.intRowStatus = 0
		ORDER BY ap.idfRow ASC	
	) AS  ap_DateOfOnset

WHERE	
	hc.intRowStatus = 0
	AND 	
	ISNULL(hc.idfsFinalDiagnosis, hc.idfsTentativeDiagnosis) = @idfsDiagnosis 
	AND
	COALESCE(	
		CASE
			WHEN	(CAST(SQL_VARIANT_PROPERTY(ap_DateOfOnset.varValue, 'BaseType') AS NVARCHAR) like N'%date%') or
					(CAST(SQL_VARIANT_PROPERTY(ap_DateOfOnset.varValue, 'BaseType') AS NVARCHAR) like N'%char%' AND ISDATE(CAST(ap_DateOfOnset.varValue AS NVARCHAR)) = 1) 
				THEN dbo.fnDateCutTime(CAST(ap_DateOfOnset.varValue AS DATETIME))
				ELSE NULL
		END, hc.datOnSetDate, hc.datFinalDiagnosisDate, hc.datTentativeDiagnosisDate, hc.datNotificationDate, hc.datEnteredDate
			) >= @StartDate
	
	AND
	COALESCE(	
		CASE
			WHEN	(CAST(SQL_VARIANT_PROPERTY(ap_DateOfOnset.varValue, 'BaseType') AS NVARCHAR) like N'%date%') or
					(CAST(SQL_VARIANT_PROPERTY(ap_DateOfOnset.varValue, 'BaseType') AS NVARCHAR) like N'%char%' AND ISDATE(CAST(ap_DateOfOnset.varValue AS NVARCHAR)) = 1) 
				THEN dbo.fnDateCutTime(CAST(ap_DateOfOnset.varValue AS DATETIME))
				ELSE NULL
		END, hc.datOnSetDate, hc.datFinalDiagnosisDate, hc.datTentativeDiagnosisDate, hc.datNotificationDate, hc.datEnteredDate
			) <= @EndDate      			
		AND hc.idfHumanCase = (SELECT TOP 1 idfHumanCase FROM tlbHumanCase thc WHERE thc.idfCSObservation = hc.idfCSObservation and thc.idfsFinalDiagnosis = @idfsDiagnosis)

INSERT INTO	#FFToExport
(	idfActivityParameters,
	idfsParameter,
	idfObservation,
	idfRow,
	varValue
)
SELECT		ap.idfActivityParameters,
			ap.idfsParameter,
			ap.idfObservation,
			ap.idfRow,
			ap.varValue
FROM		tlbActivityParameters ap
INNER JOIN	#HumanCasesToExport hc_cs
ON			hc_cs.idfCSObservation = ap.idfObservation
WHERE		ap.intRowStatus = 0

INSERT INTO	#FFToExport
(	idfActivityParameters,
	idfsParameter,
	idfObservation,
	idfRow,
	varValue
)
SELECT		ap.idfActivityParameters,
			ap.idfsParameter,
			ap.idfObservation,
			ap.idfRow,
			ap.varValue
FROM		tlbActivityParameters ap
INNER JOIN	#HumanCasesToExport hc_epi
ON			hc_epi.idfEpiObservation = ap.idfObservation
left JOIN	#HumanCasesToExport hc_cs
ON			hc_cs.idfCSObservation = hc_epi.idfEpiObservation
WHERE		ap.intRowStatus = 0
			AND hc_cs.idfHumanCase IS NULL


DECLARE	@FFP_NumberOfReceivedDoses BIGINT = -100
IF	@idfsDiagnosis = @idfsDiagnosis_Measles
	SET	@FFP_NumberOfReceivedDoses = @FFP_NumberOfReceivedDoses_M
ELSE IF	@idfsDiagnosis = @idfsDiagnosis_Rubella
	SET	@FFP_NumberOfReceivedDoses = @FFP_NumberOfReceivedDoses_R

DECLARE	@FFP_DateOfLastVaccination BIGINT = -100
IF	@idfsDiagnosis = @idfsDiagnosis_Measles
	SET	@FFP_DateOfLastVaccination = @FFP_DateOfLastVaccination_M
ELSE IF	@idfsDiagnosis = @idfsDiagnosis_Rubella
	SET	@FFP_DateOfLastVaccination = @FFP_DateOfLastVaccination_R
	
DECLARE	@FFP_Fever BIGINT = -100
IF	@idfsDiagnosis = @idfsDiagnosis_Measles
	SET	@FFP_Fever = @FFP_Fever_M
ELSE IF	@idfsDiagnosis = @idfsDiagnosis_Rubella
	SET	@FFP_Fever = @FFP_Fever_R

DECLARE	@FFP_Cough BIGINT = -100
IF	@idfsDiagnosis = @idfsDiagnosis_Measles
	SET	@FFP_Cough = @FFP_Cough_M
ELSE IF	@idfsDiagnosis = @idfsDiagnosis_Rubella
	SET	@FFP_Cough = @FFP_Cough_R
	
DECLARE	@FFP_Coryza BIGINT = -100
IF	@idfsDiagnosis = @idfsDiagnosis_Measles
	SET	@FFP_Coryza = @FFP_Coryza_M
ELSE IF	@idfsDiagnosis = @idfsDiagnosis_Rubella
	SET	@FFP_Coryza = @FFP_Coryza_R
	
DECLARE	@FFP_Conjunctivitis BIGINT = -100
IF	@idfsDiagnosis = @idfsDiagnosis_Measles
	SET	@FFP_Conjunctivitis = @FFP_Conjunctivitis_M
ELSE IF	@idfsDiagnosis = @idfsDiagnosis_Rubella
	SET	@FFP_Conjunctivitis = @FFP_Conjunctivitis_R
	
DECLARE	@FFP_RashDuration BIGINT = -100
IF	@idfsDiagnosis = @idfsDiagnosis_Measles
	SET	@FFP_RashDuration = @FFP_RashDuration_M
ELSE IF	@idfsDiagnosis = @idfsDiagnosis_Rubella
	SET	@FFP_RashDuration = @FFP_RashDuration_R

DECLARE	@FFP_SourceOfInfection BIGINT = -100
IF	@idfsDiagnosis = @idfsDiagnosis_Measles
	SET	@FFP_SourceOfInfection = @FFP_SourceOfInfection_M
ELSE IF	@idfsDiagnosis = @idfsDiagnosis_Rubella
	SET	@FFP_SourceOfInfection = @FFP_SourceOfInfection_R

DECLARE	@FFP_Complications BIGINT = -100
IF	@idfsDiagnosis = @idfsDiagnosis_Measles
	SET	@FFP_Complications = @FFP_Complications_M
ELSE IF	@idfsDiagnosis = @idfsDiagnosis_Rubella
	SET	@FFP_Complications = @FFP_Complications_R

DECLARE	@FFP_Encephalitis BIGINT = -100
IF	@idfsDiagnosis = @idfsDiagnosis_Measles
	SET	@FFP_Encephalitis = @FFP_Encephalitis_M
ELSE IF	@idfsDiagnosis = @idfsDiagnosis_Rubella
	SET	@FFP_Encephalitis = @FFP_Encephalitis_R

DECLARE	@FFP_Pneumonia BIGINT = -100
IF	@idfsDiagnosis = @idfsDiagnosis_Measles
	SET	@FFP_Pneumonia = @FFP_Pneumonia_M
ELSE IF	@idfsDiagnosis = @idfsDiagnosis_Rubella
	SET	@FFP_Pneumonia = @FFP_Pneumonia_R

DECLARE	@FFP_Diarrhoea BIGINT = -100
IF	@idfsDiagnosis = @idfsDiagnosis_Measles
	SET	@FFP_Diarrhoea = @FFP_Diarrhoea_M

DECLARE	@FFP_Other BIGINT = -100
IF	@idfsDiagnosis = @idfsDiagnosis_Measles
	SET	@FFP_Other = @FFP_Other_M


UPDATE hc
SET	hc.NumberOfReceivedDoses = CAST(ap_NumberOfReceivedDoses.varValue AS NVARCHAR(50)),
	hc.DateOfLastVaccination = 
	CASE
		WHEN CAST(SQL_VARIANT_PROPERTY(ap_DateOfLastVaccination.varValue, 'BaseType') AS NVARCHAR) like N'%date%' or
				(CAST(SQL_VARIANT_PROPERTY(ap_DateOfLastVaccination.varValue, 'BaseType') AS NVARCHAR) like N'%char%' AND ISDATE(CAST(ap_DateOfLastVaccination.varValue AS NVARCHAR)) = 1 )	
			THEN dbo.FN_GBL_DATECUTTIME(CAST(ap_DateOfLastVaccination.varValue AS DATETIME))
		ELSE NULL
	END,
	hc.Fever = 
	CASE
		WHEN SQL_VARIANT_PROPERTY(ap_Fever.varValue, 'BaseType') in ('BIGINT','decimal','float','INT','numeric','real','smallint','tinyint')
			THEN CAST(ap_Fever.varValue AS BIGINT)
		ELSE NULL
	END,
	hc.Cough =
	CASE
		WHEN SQL_VARIANT_PROPERTY(ap_Cough.varValue, 'BaseType') in ('BIGINT','decimal','float','INT','numeric','real','smallint','tinyint')
			THEN CAST(ap_Cough.varValue AS BIGINT)
		ELSE NULL
	END,
	hc.Coryza =
	CASE
		WHEN SQL_VARIANT_PROPERTY(ap_Coryza.varValue, 'BaseType') in ('BIGINT','decimal','float','INT','numeric','real','smallint','tinyint')
			THEN CAST(ap_Coryza.varValue AS BIGINT)
		ELSE NULL
	END,  		
	hc.Conjunctivitis =
	CASE
		WHEN SQL_VARIANT_PROPERTY(ap_Conjunctivitis.varValue, 'BaseType') in ('BIGINT','decimal','float','INT','numeric','real','smallint','tinyint')
			THEN CAST(ap_Conjunctivitis.varValue AS BIGINT)
		ELSE NULL
	END,  
	hc.RashDuration = CAST(ap_RashDuration.varValue AS NVARCHAR(50)),	
	hc.SourceOfInfection =
	CASE
		WHEN SQL_VARIANT_PROPERTY(ap_SourceOfInfection.varValue, 'BaseType') in ('BIGINT','decimal','float','INT','numeric','real','smallint','tinyint')
			THEN CAST(ap_SourceOfInfection.varValue AS BIGINT)
		ELSE NULL
	END,   
	hc.Complications =
	CASE
		WHEN SQL_VARIANT_PROPERTY(ap_Complications.varValue, 'BaseType') in ('BIGINT','decimal','float','INT','numeric','real','smallint','tinyint')
			THEN CAST(ap_Complications.varValue AS BIGINT)
		ELSE NULL
	END,    
	hc.Encephalitis =
	CASE
		WHEN SQL_VARIANT_PROPERTY(ap_Encephalitis.varValue, 'BaseType') in ('BIGINT','decimal','float','INT','numeric','real','smallint','tinyint')
			THEN CAST(ap_Encephalitis.varValue AS BIGINT)
		ELSE NULL
	END,    
	hc.Pneumonia =
	CASE
		WHEN SQL_VARIANT_PROPERTY(ap_Pneumonia.varValue, 'BaseType') in ('BIGINT','decimal','float','INT','numeric','real','smallint','tinyint')
			THEN CAST(ap_Pneumonia.varValue AS BIGINT)
		ELSE NULL
	END,    	
	hc.Diarrhoea =
	CASE
		WHEN SQL_VARIANT_PROPERTY(ap_Diarrhoea.varValue, 'BaseType') in ('BIGINT','decimal','float','INT','numeric','real','smallint','tinyint')
			THEN CAST(ap_Diarrhoea.varValue AS BIGINT)
		ELSE NULL
	END,    
	hc.Other = CAST(ap_Other.varValue AS NVARCHAR(500))	  		  		  		  			

 FROM #HumanCasesToExport hc
			
	OUTER APPLY ( 
		SELECT top 1 
			ap.varValue
		FROM #FFToExport ap
		WHERE	ap.idfObservation = hc.idfEpiObservation
			AND	ap.idfsParameter = @FFP_NumberOfReceivedDoses
			--AND ap.intRowStatus = 0
		ORDER BY ap.idfRow ASC	
	) AS  ap_NumberOfReceivedDoses		
	 			
	OUTER APPLY ( 
		SELECT top 1 
			ap.varValue
		FROM #FFToExport ap
		WHERE	ap.idfObservation = hc.idfEpiObservation
			AND	ap.idfsParameter = @FFP_DateOfLastVaccination
			--AND ap.intRowStatus = 0
		ORDER BY ap.idfRow ASC	
	) AS  ap_DateOfLastVaccination 	
		
	OUTER APPLY ( 
		SELECT top 1 
			ap.varValue
		FROM #FFToExport ap
		WHERE	ap.idfObservation = hc.idfCSObservation
			AND	ap.idfsParameter = @FFP_Fever
			--AND ap.intRowStatus = 0
		ORDER BY ap.idfRow ASC	
	) AS  ap_Fever	
	
		
	OUTER APPLY ( 
		SELECT top 1 
			ap.varValue
		FROM #FFToExport ap
		WHERE	ap.idfObservation = hc.idfCSObservation
			AND	ap.idfsParameter = @FFP_Cough
			--AND ap.intRowStatus = 0
		ORDER BY ap.idfRow ASC	
	) AS  ap_Cough	
	
	OUTER APPLY ( 
		SELECT top 1 
			ap.varValue
		FROM #FFToExport ap
		WHERE	ap.idfObservation = hc.idfCSObservation
			AND	ap.idfsParameter = @FFP_Coryza
			--AND ap.intRowStatus = 0
		ORDER BY ap.idfRow ASC	
	) AS  ap_Coryza
	
	OUTER APPLY ( 
		SELECT top 1 
			ap.varValue
		FROM #FFToExport ap
		WHERE	ap.idfObservation = hc.idfCSObservation
			AND	ap.idfsParameter = @FFP_Conjunctivitis	
			--AND ap.intRowStatus = 0
		ORDER BY ap.idfRow ASC	
	) AS  ap_Conjunctivitis

	OUTER APPLY ( 
		SELECT top 1 
			ap.varValue
		FROM #FFToExport ap
		WHERE	ap.idfObservation = hc.idfCSObservation
			AND	ap.idfsParameter = @FFP_RashDuration	
			--AND ap.intRowStatus = 0
		ORDER BY ap.idfRow ASC	
	) AS  ap_RashDuration
	
	OUTER APPLY ( 
		SELECT top 1 
			ap.varValue
		FROM #FFToExport ap
		WHERE	ap.idfObservation = hc.idfEpiObservation
			AND	ap.idfsParameter = @FFP_SourceOfInfection	
			--AND ap.intRowStatus = 0
		ORDER BY ap.idfRow ASC	
	) AS  ap_SourceOfInfection
	
	OUTER APPLY ( 
		SELECT top 1 
			ap.varValue
		FROM #FFToExport ap
		WHERE	ap.idfObservation = hc.idfCSObservation
			AND	ap.idfsParameter = @FFP_Complications		
			--AND ap.intRowStatus = 0
		ORDER BY ap.idfRow ASC	
	) AS  ap_Complications
	
	OUTER APPLY ( 
		SELECT top 1 
			ap.varValue
		FROM #FFToExport ap
		WHERE	ap.idfObservation = hc.idfCSObservation
			AND	ap.idfsParameter = @FFP_Encephalitis				
			--AND ap.intRowStatus = 0
		ORDER BY ap.idfRow ASC	
	) AS  ap_Encephalitis

	OUTER APPLY ( 
		SELECT top 1 
			ap.varValue
		FROM #FFToExport ap
		WHERE	ap.idfObservation = hc.idfCSObservation
			AND	ap.idfsParameter = @FFP_Pneumonia				
			--AND ap.intRowStatus = 0
		ORDER BY ap.idfRow ASC	
	) AS  ap_Pneumonia
	
	OUTER APPLY ( 
		SELECT top 1 
			ap.varValue
		FROM #FFToExport ap
		WHERE	ap.idfObservation = hc.idfCSObservation
			AND	ap.idfsParameter = @FFP_Diarrhoea						
			--AND ap.intRowStatus = 0
		ORDER BY ap.idfRow ASC	
	) AS  ap_Diarrhoea


	OUTER APPLY ( 
		SELECT top 1 
			ap.varValue
		FROM #FFToExport ap
		WHERE	ap.idfObservation = hc.idfCSObservation
			AND	ap.idfsParameter = @FFP_Other							
			--AND ap.intRowStatus = 0
		ORDER BY ap.idfRow ASC	
	) AS  ap_Other


UPDATE	ct
SET		ct.datConcludedDate = material.datConcludedDate,
		ct.idfsSampleType = material.idfsSampleType,
		ct.datFieldCollectionDate = material.datFieldCollectionDate,
		ct.idfsTestResult = material.idfsTestResult,
		ct.idfsTestStatus = material.idfsTestStatus,
		ct.idfTesting = material.idfTesting
FROM	#HumanCasesToExport ct	
OUTER APPLY	(
	SELECT top 1 
		dbo.fnDateCutTime(tt.datConcludedDate) AS datConcludedDate,
		ISNULL(rm.idfsSampleType, m.idfsSampleType) AS idfsSampleType,
		m.datFieldCollectionDate,
		tt.idfsTestResult,
		tt.idfsTestStatus,
		tt.idfTesting
	FROM tlbMaterial m
		left JOIN tlbTesting tt
			INNER JOIN trtTestTypeForCustomReport ttcr
			ON ttcr.idfsTestName = tt.idfsTestName
			AND ttcr.intRowStatus = 0
			AND ttcr.idfsCustomReportType = @idfsSummaryReportType
		ON tt.idfMaterial = m.idfMaterial
		/*Added 2018-01-22 start*/
		AND tt.idfsDiagnosis = ct.idfsDiagnosis
		/*Added 2018-01-22 END*/
		AND tt.intRowStatus = 0
		AND tt.datConcludedDate IS NOT NULL
		
		left JOIN tlbMaterial rm
		ON rm.idfMaterial = m.idfParentMaterial
		AND rm.intRowStatus = 0						
		
   WHERE m.idfHumanCase = ct.idfHumanCase
			AND m.intRowStatus = 0
   ORDER BY ISNULL(tt.datConcludedDate, '19000101') DESC, m.datFieldCollectionDate DESC
   )	AS material	 

	SELECT
		ct.idfHumanCase AS idfCase,
		CAST(to1.idfOutbreak as varchar(20)) AS strReportID,
		CONCAT(gwm.WHOAreaID,YEAR(@StartDate), hc.strCaseID) AS strCaseID,
		aid.intAreaID, 
		dbo.fnDateCutTime(ct.datDateOnset) AS datDRash, 
		CASE 
			WHEN h.idfsHumanGender = 10043001 THEN 2
			WHEN h.idfsHumanGender = 10043002 THEN 1
			ELSE 4
		END AS intGenderID, 
		--dbo.fnDateCutTime(h.datDateofBirth) AS datDBirth, 
		CAST(h.datDateofBirth AS DATE) AS datDBirth, 
		CASE
			WHEN	ISNULL(hc.idfsHumanAgeType, -1) = 10042003	-- Years 
					AND (ISNULL(hc.intPatientAge, -1) >= 0 AND ISNULL(hc.intPatientAge, -1) <= 200)
				THEN	hc.intPatientAge
			WHEN	ISNULL(hc.idfsHumanAgeType, -1) = 10042002	-- Months
					AND (ISNULL(hc.intPatientAge, -1) >= 0 AND ISNULL(hc.intPatientAge, -1) <= 60)
				THEN	CAST(hc.intPatientAge / 12 AS INT)
			WHEN	ISNULL(hc.idfsHumanAgeType, -1) = 10042001	-- Days
					AND (ISNULL(hc.intPatientAge, -1) >= 0)
				THEN	0
			ELSE	NULL
		END	 AS intAgeAtRashOnset,     	
		
		ISNULL(CASE WHEN isnumeric(ct.NumberOfReceivedDoses) = 1  AND CAST(ct.NumberOfReceivedDoses AS varchar) NOT in ('.', ',', '-', '+', '$')
					THEN	
						CASE  CAST(ct.NumberOfReceivedDoses AS BIGINT)
							WHEN 9878670000000 THEN 0
							WHEN 9878680000000 THEN 1
							WHEN 9878690000000 THEN 2
							WHEN 9878700000000 THEN 3
							ELSE 9
						END	
					ELSE 9 END
			, 9)	 AS intNumOfVaccines, 
			
		CAST(ct.DateOfLastVaccination AS DATE) AS datDvaccine, 			
		CAST(hc.datNotificationDate AS DATE) AS datDNotification, 
		CAST(hc.datInvestigationStartDate AS DATE) AS datDInvestigation, 
 		
		CASE ct.Fever
			WHEN 25460000000 THEN 1
			WHEN 25640000000 THEN 2
			WHEN 25660000000 THEN 9
			ELSE NULL
		END	 AS intClinFever, 
		
		CASE 
			CASE 
				WHEN ct.Cough = 25460000000 or ct.Coryza = 25460000000 or ct.Conjunctivitis = 25460000000 THEN 25460000000
				WHEN ct.Cough = 25640000000 AND ct.Coryza = 25640000000 AND ct.Conjunctivitis = 25640000000 THEN 25640000000
				ELSE 25660000000
			END		
			WHEN 25460000000 THEN 1
			WHEN 25640000000 THEN 2
			ELSE 9
		END	 AS intClinCCC, 			    			
		CASE WHEN isnumeric(ct.RashDuration) = 1  AND CAST(ct.RashDuration AS varchar) NOT in ('.', ',', '-', '+', '$')
				THEN --CAST(ct.RashDuration AS INT) 
					 CAST(CAST(replace(ct.RashDuration,',','.') AS decimal) AS INT)
				ELSE 2222 END AS intClinRashDuration,
			
		CASE hc.idfsOutcome
			WHEN 10770000000 THEN 1
			WHEN 10760000000 THEN 2
			WHEN 10780000000 THEN 3
			ELSE 3
		END AS intClinOutcome, 
		
		CASE hc.idfsYNHospitalization   
			WHEN 10100001 THEN 1
			WHEN 10100002 THEN 2
			WHEN 10100003 THEN 9
			ELSE NULL
		END AS intClinHospitalization, 
		
		-- GG - FF parameter = 'Source of infection' -- idfsParameter = 9951440000000
		--9879590000000	Imported
		--9879600000000	Import-related
		--9879610000000	Indigenous
		--9879620000000	Unknown
		--Indigenous=Endemic, Imported=Imported, Import-related=Import-related, Unknown = Unknown, Blank = Blank

		CASE ct.SourceOfInfection 
			--GG
			WHEN 9879590000000 THEN 1 --Imported = Imported
			WHEN 9879610000000 THEN 2 --Indigenous = Endemic
			WHEN 9879600000000 THEN 3 -- Import-related=Import-related
			WHEN 9879620000000 THEN 9 --  Unknown = Unknown
			ELSE NULL --Blank = Blank
		END	 AS intSrcInf, 
		
		
		CASE hc.idfsYNRelatedToOutbreak
			WHEN 10100001 THEN 1
			WHEN 10100002 THEN 2
			WHEN 10100003 THEN 9
			ELSE NULL
		END AS intSrcOutbreakRelated, 
  
		to1.strOutbreakID AS strSrcOutbreakID,
		
		CASE 
			CASE 
				-- GG
				WHEN ct.Complications = 25460000000 AND ct.idfsDiagnosis = @idfsDiagnosis_Measles THEN 25460000000
				WHEN ct.Complications = 25640000000 AND ct.idfsDiagnosis = @idfsDiagnosis_Measles THEN 25640000000
				WHEN ct.Complications = 25660000000 AND ct.idfsDiagnosis = @idfsDiagnosis_Measles THEN 25660000000
				ELSE 25660000000
			END		
			WHEN 25460000000 THEN 1
			WHEN 25640000000 THEN 2
			WHEN 25660000000 THEN 9
			ELSE NULL
		END	 AS intCompComplications, 		 					
		
		CASE WHEN ct.Complications = 25460000000 /*Yes*/ AND ct.idfsDiagnosis = @idfsDiagnosis_Measles 
			THEN
				CASE ct.Encephalitis 
					WHEN 25460000000 THEN 1 
					WHEN 25640000000 THEN 2 
					WHEN 25660000000 THEN 9 		
					ELSE NULL
				END	 
			ELSE NULL
		END AS intCompEncephalitis, 				
		
		CASE WHEN ct.Complications = 25460000000 /*Yes*/ AND ct.idfsDiagnosis = @idfsDiagnosis_Measles 
			THEN
				CASE ct.Pneumonia 
					WHEN 25460000000 THEN 1 
					WHEN 25640000000 THEN 2 
					WHEN 25660000000 THEN 9 		
					ELSE NULL
				END		 
			ELSE NULL
		END AS intCompPneumonia, 				
    
		NULL AS intCompMalnutrition, 
		
		CASE WHEN ct.Complications = 25460000000 /*Yes*/ AND ct.idfsDiagnosis = @idfsDiagnosis_Measles 
			THEN
				CASE ct.Diarrhoea 
					WHEN 25460000000 THEN 1 
					WHEN 25640000000 THEN 2 
					WHEN 25660000000 THEN 9 		
					ELSE NULL
				END		 
			ELSE NULL
		END AS intCompDiarrhoea, 		
		
		CASE WHEN ct.Complications = 25460000000 /*Yes*/ AND ct.idfsDiagnosis = @idfsDiagnosis_Measles 
			THEN
				CASE WHEN len(ct.Other) > 0 THEN 1 ELSE 2 END 
			ELSE NULL
		END AS intCompOther, 		
            
		CASE 
			WHEN hc.idfsFinalCaseStatus = 370000000  --NOT a CASE
					THEN 0
			WHEN hc.idfsFinalCaseStatus = 350000000 --Confirmed
				AND ct.idfsDiagnosis = @idfsDiagnosis_Measles
				AND hc.blnLabDiagBasis = 1
					THEN 1
			WHEN hc.idfsFinalCaseStatus = 350000000  --Confirmed
				AND ct.idfsDiagnosis = @idfsDiagnosis_Measles
				AND ISNULL(hc.blnLabDiagBasis, 0) = 0
				AND hc.blnEpiDiagBasis = 1
					THEN 2
			--WHEN hc.idfsFinalCaseStatus = 350000000  --Confirmed
			--	AND ISNULL(hc.blnLabDiagBasis, 0) = 0
			--	AND hc.blnClinicalDiagBasis = 1
			--		THEN 3
			WHEN hc.idfsFinalCaseStatus = 360000000 --Probable
				AND ct.idfsDiagnosis = @idfsDiagnosis_Measles
				AND (hc.blnLabDiagBasis = 1 or hc.blnEpiDiagBasis = 1 or hc.blnClinicalDiagBasis = 1)
					THEN 3
			WHEN hc.idfsFinalCaseStatus = 350000000 
				AND ct.idfsDiagnosis = @idfsDiagnosis_Rubella
				AND hc.blnLabDiagBasis = 1
					THEN 6
			WHEN hc.idfsFinalCaseStatus = 350000000 
				AND ct.idfsDiagnosis = @idfsDiagnosis_Rubella
				AND ISNULL(hc.blnLabDiagBasis, 0) = 0
				AND hc.blnEpiDiagBasis = 1
					THEN 7
			WHEN hc.idfsFinalCaseStatus = 360000000 --Probable
				AND ct.idfsDiagnosis = @idfsDiagnosis_Rubella
				AND  (hc.blnLabDiagBasis = 1 or hc.blnEpiDiagBasis = 1 or hc.blnClinicalDiagBasis = 1)
					THEN 8
			WHEN hc.idfsFinalCaseStatus = 380000000	--Suspect
				OR hc.idfsFinalCaseStatus = 12137920000000
				or hc.idfsFinalCaseStatus IS NULL
				or (hc.blnLabDiagBasis IS NULL AND hc.blnEpiDiagBasis IS NULL AND hc.blnClinicalDiagBasis IS NULL)
					THEN NULL
			ELSE NULL
		END intFinalClassification,        
    
    
		CASE 
		   WHEN hc.idfsYNSpecimenCollected = 10100001 THEN ct.datFieldCollectionDate
		   ELSE NULL
		END AS datDSpecimen,       
        
		--Type of sample associated with the test which result IS shown in #29/31. 
		--IF #29/31 IS blank THEN the sample with the latest date of sample collection should be taken. 
		--Blood = 1 Serum, 
		--Blood - serum=1 Serum, 
		--Saliva=2 Saliva/oral fluid, 
		--Swab - Rhinopharyngeal = 3 Nasopharyngeal swab, 
		--Urine=5 Urine, 
		--Blood - anticoagulated whole blood= 6 EDTA whole blood, 
		--in other CASE = 7 Other specimen. 
		--Which sample to send, it shall be defined BY tests (see 29/31) NB: Parent Sample Type should be tranferred to CISID in CASE Sample Derivative was created.
		CASE
			ISNULL(CASE 
			   WHEN hc.idfsYNSpecimenCollected = 10100001 THEN ct.idfsSampleType
			   ELSE NULL
			END, -1)
			--GG
			WHEN 9844440000000 /*Blood*/ THEN 1 --Serum
			WHEN 9844480000000/*Blood - serum*/  THEN 1 --Serum
			WHEN 9845550000000	/*Saliva*/ THEN 2 --Saliva/oral fluid
			WHEN 9845840000000	/*Swab - Rhinopharyngeal*/ THEN 3 --Nasopharyngeal swab
			WHEN 9846060000000	/*Urine*/ THEN 5 --Urine
			WHEN 9844450000000 /*Blood - anticoagulated whole blood*/ THEN 6 --EDTA whole blood
			WHEN -1 THEN NULL
			ELSE 7
		END AS intSpecimen,    

		CASE 
		   WHEN hc.idfsYNSpecimenCollected = 10100001 THEN ct.datConcludedDate
		   ELSE NULL
		END AS datDLabResult,    			            
       
		

		--Test Name: ELISA IgM, Antibody detection
		--The Result of the lastest "ELISA IgM, Antibody detection" 
		--Test Name shall be taken (BY Result Date). 
		--1 Positive = Positive AND Test Status = Final or Amended, 
		--2 Negative= Negative AND Test Status = Final or Amended, 
		--4 Inclonclusive = Cut off AND Test Status = Final or Amended, 
		--0 NOT Tested = IF sample data IS filled in #26/27 but no test data available, 
		--3 In Process = any test result (including blank) for assigned test AND Test Status = In Process or Preliminary      
		CASE
			ISNULL(
					CASE 
					   WHEN hc.idfsYNSpecimenCollected = 10100001 AND ct.idfsDiagnosis = @idfsDiagnosis_Measles AND ct.idfsTestStatus in (10001001, 10001006) --Final or Amended
							THEN ct.idfsTestResult
					   WHEN hc.idfsYNSpecimenCollected = 10100001 AND ct.idfsDiagnosis = @idfsDiagnosis_Measles AND ct.idfsTestStatus in( 10001003, 10001004)	--In Process or Preliminary   
							THEN 3
					   WHEN ct.idfsDiagnosis = @idfsDiagnosis_Measles AND ct.idfTesting IS NULL AND ct.idfsSampleType IS NOT NULL
							THEN 0
					   ELSE NULL
					END, -1)
			--GG
			WHEN 9848880000000 THEN 4--Indeterminate
			WHEN 9848980000000 THEN 2--Negative
			WHEN 9849050000000 THEN 1--Positive
			WHEN 3			   THEN 3--In Process
			WHEN 0			   THEN 0--Not Tested
			WHEN -1 THEN NULL
			ELSE NULL
		END AS intMeaslesIgm,    
		
		NULL AS intMeaslesVirusDetection,
		
		CASE
			ISNULL(
				CASE 
					   WHEN hc.idfsYNSpecimenCollected = 10100001 AND ct.idfsDiagnosis = @idfsDiagnosis_Rubella AND ct.idfsTestStatus  in (10001001, 10001006) --Final or Amended
							THEN ct.idfsTestResult
					   WHEN hc.idfsYNSpecimenCollected = 10100001 AND ct.idfsDiagnosis = @idfsDiagnosis_Rubella AND ct.idfsTestStatus in( 10001003, 10001004)	--In Process or Preliminary   
							THEN 3
					   WHEN ct.idfsDiagnosis = @idfsDiagnosis_Rubella AND ct.idfTesting IS NULL	 AND ct.idfsSampleType IS NOT NULL
							THEN 0
					   ELSE NULL
			END, -1)
			WHEN 9848880000000 THEN 4--Indeterminate
			WHEN 9848980000000 THEN 2--Negative
			WHEN 9849050000000 THEN 1--Positive
			WHEN 3			   THEN 3--In Process
			WHEN 0			   THEN 0--Tested
			WHEN -1 THEN NULL
			ELSE NULL
		END AS intRubellaIgm,  
		NULL AS intRubellaVirusDetection,
		hc.strSummaryNotes AS strComments,
		CASE ct.SourceOfInfection 
			--GG
			WHEN 9879590000000 THEN 'GE' --Imported = Imported
			ELSE '' --Blank = Blank
		END strImportationCountry,
		CASE 
			WHEN CHARINDEX('Measles',NonNotifiableDiagnosisRef.[name]) > 0
					THEN 1
			WHEN CHARINDEX('Rubella',NonNotifiableDiagnosisRef.[name]) > 0
					THEN 2
			ELSE 3
		END intInitialDiagnosis
 			      			
 FROM	#HumanCasesToExport ct
	INNER JOIN tlbHumanCase hc
	ON hc.idfHumanCase = ct.idfHumanCase

	INNER JOIN tlbHuman h
	ON h.idfHuman = ct.idfHuman

	INNER JOIN	tlbGeoLocation gl
	ON gl.idfGeoLocation = ct.idfCRAddress

	INNER JOIN @AreaIDs aid
	ON aid.idfsRegion = gl.idfsRegion

	left JOIN tlbOutbreak to1
	ON to1.idfOutbreak = hc.idfOutbreak
	AND to1.intRowStatus = 0   

	LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000149) AS NonNotifiableDiagnosisRef
			ON NonNotifiableDiagnosisRef.idfsReference = hc.idfsNonNotifiableDiagnosis

	INNER JOIN gisWHOMap gwm
	ON aid.intAreaID = gwm.AreaID
ORDER BY ct.datDateOnset, hc.strCaseID


--INSERT INTO	#ResultTable
-- (	
--	  idfCase
--	, strCaseID	
--	, intAreaID	
--	, datDRash	
--	, intGenderID
--	, datDBirth	
--	, intAgeAtRashOnset	
--	, intNumOfVaccines	
--	, datDvaccine	
--	, datDNotification	
--	, datDInvestigation	
--	, intClinFever		
--	, intClinCCC	
--	, intClinRashDuration	
--	, intClinOutcome		
--	, intClinHospitalization	
--	, intSrcInf				
--	, intSrcOutbreakRelated		
--	, strSrcOutbreakID		
--	, intCompComplications	
--	, intCompEncephalitis	
--	, intCompPneumonia		
--	, intCompMalnutrition	
--	, intCompDiarrhoea		
--	, intCompOther		
--	, intFinalClassification
--	, datDSpecimen			
--	, intSpecimen			
--	, datDLabResult			
--	, intMeaslesIgm			
--	, intMeaslesVirusDetection	
--	, intRubellaIgm		
--	, intRubellaVirusDetection		
--	, strCommentsEpi			
--)
--SELECT 
--	idfHumanCase
--	, strCaseID	
--	, intAreaID	
--	, datDRash	
--	, intGenderID
--	, datDBirth	
--	, intAgeAtRashOnset	
--	, intNumOfVaccines	
--	, datDvaccine	
--	, datDNotification	
--	, datDInvestigation	
--	, intClinFever		
--	, intClinCCC	
--	, intClinRashDuration	
--	, intClinOutcome		
--	, intClinHospitalization	
--	, intSrcInf				
--	, intSrcOutbreakRelated		
--	, strSrcOutbreakID		
--	, intCompComplications	
--	, intCompEncephalitis	
--	, intCompPneumonia		
--	, intCompMalnutrition	
--	, intCompDiarrhoea		
--	, intCompOther		
--	, intFinalClassification
--	, datDSpecimen			
--	, intSpecimen			
--	, datDLabResult			
--	, intMeaslesIgm			
--	, intMeaslesVirusDetection	
--	, intRubellaIgm				
--	, intRubellaVirusDetection
--	, strCommentsEpi	 


--FROM hc_table
 


--SELECT * FROM #ResultTable
--ORDER BY datDRash, strCaseID

-- Drop temporary tables
IF Object_ID('tempdb..#HumanCasesToExport') IS NOT NULL
BEGIN
SET	@cmd = N'drop TABLE #HumanCasesToExport'
EXEC sp_executesql @cmd
END

IF Object_ID('tempdb..#ResultTable') IS NOT NULL
BEGIN
SET	@cmd = N'drop TABLE #ResultTable'
EXEC sp_executesql @cmd
END

END
GO
PRINT N'Altering Procedure [dbo].[USSP_VET_DISEASE_REPORT_LOG_SET]...';


GO
-- ================================================================================================
-- Name: USSP_VET_DISEASE_REPORT_LOG_SET
--
-- Description:	Inserts or updates veterinary "case" log for the avian and livestock veterinary 
-- disease report use cases.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     04/02/2018 Initial release.
-- Stephen Long     04/17/2019 Removed strMaintenanceFlag.
-- Stephen Long     01/19/2022 Remove language ID and changed row action data type.
-- Stephen Long     12/07/2022 Added data audit logic for SAUC30 and 31.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USSP_VET_DISEASE_REPORT_LOG_SET]
(
    @AuditUserName NVARCHAR(200),
    @DataAuditEventID BIGINT = NULL,
    @EIDSSObjectID NVARCHAR(200) = NULL,
    @CaseLogID BIGINT OUTPUT,
    @LogStatusTypeID BIGINT = NULL,
    @DiseaseReportID BIGINT = NULL,
    @PersonID BIGINT = NULL,
    @LogDate DATETIME = NULL,
    @ActionRequired NVARCHAR(200) = NULL,
    @Comments NVARCHAR(1000) = NULL,
    @RowStatus INT,
    @RowAction INT
)
AS
DECLARE @AuditUserID BIGINT = NULL,
        @AuditSiteID BIGINT = NULL,
        @DataAuditEventTypeID BIGINT = NULL,
        @ObjectID BIGINT = NULL,
        @ObjectTableID BIGINT = 75810000000; -- tlbVetCaseLog
DECLARE @CaseLogsAfterEdit TABLE
(
    CaseLogID BIGINT,
    CaseLogStatusTypeID BIGINT,
    DiseaseReportID BIGINT,
    PersonID BIGINT,
    CaseLogDate DATETIME,
    ActionRequired NVARCHAR(200),
    Note NVARCHAR(1000)
);
DECLARE @CaseLogsBeforeEdit TABLE
(
    CaseLogID BIGINT,
    CaseLogStatusTypeID BIGINT,
    DiseaseReportID BIGINT,
    PersonID BIGINT,
    CaseLogDate DATETIME,
    ActionRequired NVARCHAR(200),
    Note NVARCHAR(1000)
);

BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        SET @AuditUserName = ISNULL(@AuditUserName, '');

        -- Data audit
        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = userInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo;

        IF @RowAction = 1
        BEGIN
            EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tlbVetCaseLog', @CaseLogID OUTPUT;

            INSERT INTO dbo.tlbVetCaseLog
            (
                idfVetCaseLog,
                idfsCaseLogStatus,
                idfVetCase,
                idfPerson,
                datCaseLogDate,
                strActionRequired,
                strNote,
                intRowStatus,
                AuditCreateUser,
                SourceSystemNameID,
                SourceSystemKeyValue
            )
            VALUES
            (@CaseLogID,
             @LogStatusTypeID,
             @DiseaseReportID,
             @PersonID,
             @LogDate,
             @ActionRequired,
             @Comments,
             @RowStatus,
             @AuditUserName,
             10519001,
             '[{"idfVetCaseLog":' + CAST(@CaseLogID AS NVARCHAR(300)) + '}]'
            );

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailCreate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser,
                strObject
            )
            VALUES
            (@DataAuditEventID,
             @ObjectTableID,
             @CaseLogID,
             10519001,
             '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
             + CAST(@ObjectTableID AS NVARCHAR(300)) + '}]',
             @AuditUserName,
             @EIDSSObjectID
            );
        -- End data audit
        END
        ELSE
        BEGIN
            -- Data audit
            INSERT INTO @CaseLogsBeforeEdit
            (
                CaseLogID,
                CaseLogStatusTypeID,
                DiseaseReportID,
                PersonID,
                CaseLogDate,
                ActionRequired,
                Note
            )
            SELECT idfVetCaseLog,
                   idfsCaseLogStatus,
                   idfVetCase,
                   idfPerson,
                   datCaseLogDate,
                   strActionRequired,
                   strNote
            FROM dbo.tlbVetCaseLog
            WHERE idfVetCaseLog = @CaseLogID;
            -- End data audit

            UPDATE dbo.tlbVetCaseLog
            SET idfsCaseLogStatus = @LogStatusTypeID,
                idfVetCase = @DiseaseReportID,
                idfPerson = @PersonID,
                datCaseLogDate = @LogDate,
                strActionRequired = @ActionRequired,
                strNote = @Comments,
                intRowStatus = @RowStatus,
                AuditUpdateUser = @AuditUserName
            WHERE idfVetCaseLog = @CaseLogID;

            -- Data audit
            INSERT INTO @CaseLogsAfterEdit
            (
                CaseLogID,
                CaseLogStatusTypeID,
                DiseaseReportID,
                PersonID,
                CaseLogDate,
                ActionRequired,
                Note
            )
            SELECT idfVetCaseLog,
                   idfsCaseLogStatus,
                   idfVetCase,
                   idfPerson,
                   datCaseLogDate,
                   strActionRequired,
                   strNote
            FROM dbo.tlbVetCaseLog
            WHERE idfVetCaseLog = @CaseLogID;

            IF @RowStatus = 0
            BEGIN
                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4578020000000,
                       a.CaseLogID,
                       NULL,
                       b.CaseLogStatusTypeID,
                       a.CaseLogStatusTypeID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @CaseLogsAfterEdit AS a
                    FULL JOIN @CaseLogsBeforeEdit AS b
                        ON a.CaseLogID = b.CaseLogID
                WHERE (a.CaseLogStatusTypeID <> b.CaseLogStatusTypeID)
                      OR (
                             a.CaseLogStatusTypeID IS NOT NULL
                             AND b.CaseLogStatusTypeID IS NULL
                         )
                      OR (
                             a.CaseLogStatusTypeID IS NULL
                             AND b.CaseLogStatusTypeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4578030000000,
                       a.CaseLogID,
                       NULL,
                       b.DiseaseReportID,
                       a.DiseaseReportID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @CaseLogsAfterEdit AS a
                    FULL JOIN @CaseLogsBeforeEdit AS b
                        ON a.CaseLogID = b.CaseLogID
                WHERE (a.DiseaseReportID <> b.DiseaseReportID)
                      OR (
                             a.DiseaseReportID IS NOT NULL
                             AND b.DiseaseReportID IS NULL
                         )
                      OR (
                             a.DiseaseReportID IS NULL
                             AND b.DiseaseReportID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       81050000000,
                       a.CaseLogID,
                       NULL,
                       b.PersonID,
                       a.PersonID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @CaseLogsAfterEdit AS a
                    FULL JOIN @CaseLogsBeforeEdit AS b
                        ON a.CaseLogID = b.CaseLogID
                WHERE (a.PersonID <> b.PersonID)
                      OR (
                             a.PersonID IS NOT NULL
                             AND b.PersonID IS NULL
                         )
                      OR (
                             a.PersonID IS NULL
                             AND b.PersonID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       81040000000,
                       a.CaseLogID,
                       NULL,
                       b.CaseLogDate,
                       a.CaseLogDate,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @CaseLogsAfterEdit AS a
                    FULL JOIN @CaseLogsBeforeEdit AS b
                        ON a.CaseLogID = b.CaseLogID
                WHERE (a.CaseLogDate <> b.CaseLogDate)
                      OR (
                             a.CaseLogDate IS NOT NULL
                             AND b.CaseLogDate IS NULL
                         )
                      OR (
                             a.CaseLogDate IS NULL
                             AND b.CaseLogDate IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4578040000000,
                       a.CaseLogID,
                       NULL,
                       b.ActionRequired,
                       a.ActionRequired,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @CaseLogsAfterEdit AS a
                    FULL JOIN @CaseLogsBeforeEdit AS b
                        ON a.CaseLogID = b.CaseLogID
                WHERE (a.ActionRequired <> b.ActionRequired)
                      OR (
                             a.ActionRequired IS NOT NULL
                             AND b.ActionRequired IS NULL
                         )
                      OR (
                             a.ActionRequired IS NULL
                             AND b.ActionRequired IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       81060000000,
                       a.CaseLogID,
                       NULL,
                       b.Note,
                       a.Note,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @CaseLogsAfterEdit AS a
                    FULL JOIN @CaseLogsBeforeEdit AS b
                        ON a.CaseLogID = b.CaseLogID
                WHERE (a.Note <> b.Note)
                      OR (
                             a.Note IS NOT NULL
                             AND b.Note IS NULL
                         )
                      OR (
                             a.Note IS NULL
                             AND b.Note IS NOT NULL
                         );
            END
            ELSE
            BEGIN
                INSERT INTO dbo.tauDataAuditDetailDelete
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    AuditCreateUser,
                    strObject
                )
                VALUES
                (@DataAuditEventid, @ObjectTableID, @CaseLogID, @AuditUserName, @EIDSSObjectID);
            END
        END;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Creating Procedure [dbo].[USSP_VET_ANIMALS_SET]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- ================================================================================================
-- Name: USSP_VET_ANIMALS_SET
--
-- Description:	Inserts or updates animal for the livestock veterinary disease report use cases.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     12/07/2022 Initial release with data audit logic for SAUC30 and 31.
-- ================================================================================================
CREATE PROCEDURE [dbo].[USSP_VET_ANIMALS_SET]
(
    @AuditUserName NVARCHAR(200),
    @DataAuditEventID BIGINT = NULL,
    @EIDSSObjectID NVARCHAR(200) = NULL,
    @AnimalID BIGINT OUTPUT,
    @SexTypeID BIGINT = NULL,
    @ConditionTypeID BIGINT = NULL,
    @AgeTypeID BIGINT = NULL,
    @SpeciesID BIGINT = NULL,
    @ObservationID BIGINT = NULL,
    @AnimalDescription NVARCHAR(200) = NULL,
    @EIDSSAnimalID NVARCHAR(200) = NULL,
    @AnimalName NVARCHAR(200) = NULL,
    @Color NVARCHAR(200) = NULL,
    @ClinicalSignsIndicator BIGINT = NULL,
    @RowStatus INT,
    @RowAction INT
)
AS
DECLARE @AuditUserID BIGINT = NULL,
        @AuditSiteID BIGINT = NULL,
        @DataAuditEventTypeID BIGINT = NULL,
        @ObjectID BIGINT = NULL,
        @ObjectTableID BIGINT = 75460000000,                   -- tlbAnimal
        @ObjectActivityParametersTableID BIGINT = 75410000000, -- tlbActivityParameters
        @ObjectObservationTableID BIGINT = 75640000000;        -- tlbObservation
DECLARE @AnimalsAfterEdit TABLE
(
    AnimalID BIGINT,
    AnimalGenderTypeID BIGINT,
    AnimalConditionTypeID BIGINT,
    AnimalAgeTypeID BIGINT,
    SpeciesID BIGINT,
    ObservationID BIGINT,
    AnimalDescription NVARCHAR(200),
    EIDSSAnimalID NVARCHAR(200),
    AnimalName NVARCHAR(200),
    Color NVARCHAR(200)
);
DECLARE @AnimalsBeforeEdit TABLE
(
    AnimalID BIGINT,
    AnimalGenderTypeID BIGINT,
    AnimalConditionTypeID BIGINT,
    AnimalAgeTypeID BIGINT,
    SpeciesID BIGINT,
    ObservationID BIGINT,
    AnimalDescription NVARCHAR(200),
    EIDSSAnimalID NVARCHAR(200),
    AnimalName NVARCHAR(200),
    Color NVARCHAR(200)
);

BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        SET @AuditUserName = ISNULL(@AuditUserName, '');

        -- Data audit
        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = userInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo;

        IF @EIDSSAnimalID IS NULL
           OR @EIDSSAnimalID = ''
        BEGIN
            EXECUTE dbo.USP_GBL_NextNumber_GET 'Animal', @EIDSSAnimalID OUTPUT, NULL;
        END;

        IF @RowAction = 1 -- Insert
        BEGIN
            EXECUTE dbo.USP_GBL_NEXTKEYID_GET @tableName = 'tlbAnimal',
                                              @idfsKey = @AnimalID OUTPUT;

            INSERT INTO dbo.tlbAnimal
            (
                idfAnimal,
                idfsAnimalGender,
                idfsAnimalCondition,
                idfsAnimalAge,
                idfSpecies,
                idfObservation,
                strDescription,
                strAnimalCode,
                strName,
                strColor,
                rowguid,
                intRowStatus,
                strMaintenanceFlag,
                strReservedAttribute,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser,
                AuditCreateDTM,
                AuditUpdateUser,
                AuditUpdateDTM,
                idfsYNClinicalSigns
            )
            VALUES
            (@AnimalID,
             @SexTypeID,
             @ConditionTypeID,
             @AgeTypeID,
             @SpeciesID,
             @ObservationID,
             @AnimalDescription,
             @EIDSSAnimalID,
             @AnimalName,
             @Color,
             NEWID(),
             @RowStatus,
             NULL,
             NULL,
             10519001,
             '[{"idfAnimal":' + CAST(@AnimalID AS NVARCHAR(300)) + '}]',
             @AuditUserName,
             GETDATE(),
             @AuditUserName,
             GETDATE(),
             @ClinicalSignsIndicator
            );

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailCreate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser,
                strObject
            )
            VALUES
            (@DataAuditEventID,
             @ObjectTableID,
             @AnimalID,
             10519001,
             '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
             + CAST(@ObjectTableID AS NVARCHAR(300)) + '}]',
             @AuditUserName,
             @EIDSSObjectID
            );

            -- Update data audit event ID on tlbObservation and tlbActivityParameters
            -- for flexible forms saved outside this DB transaction.
            UPDATE dbo.tauDataAuditDetailCreate
            SET idfDataAuditEvent = @DataAuditEventID,
                strObject = @EIDSSObjectID
            WHERE idfObject = @ObservationID
                  AND idfDataAuditEvent IS NULL;
        -- End data audit
        END
        ELSE
        BEGIN
            -- Data audit
            INSERT INTO @AnimalsBeforeEdit
            (
                AnimalID,
                AnimalGenderTypeID,
                AnimalConditionTypeID,
                AnimalAgeTypeID,
                SpeciesID,
                ObservationID,
                AnimalDescription,
                EIDSSAnimalID,
                AnimalName,
                Color
            )
            SELECT idfAnimal,
                   idfsAnimalGender,
                   idfsAnimalCondition,
                   idfsAnimalAge,
                   idfSpecies,
                   idfObservation,
                   strDescription,
                   strAnimalCode,
                   strName,
                   strColor
            FROM dbo.tlbAnimal
            WHERE idfAnimal = @AnimalID;
            -- End data audit

            UPDATE dbo.tlbAnimal
            SET idfsAnimalGender = @SexTypeID,
                idfsAnimalCondition = @ConditionTypeID,
                idfsAnimalAge = @AgeTypeID,
                idfSpecies = @SpeciesID,
                idfObservation = @ObservationID,
                strAnimalCode = @EIDSSAnimalID,
                strName = @AnimalName,
                strDescription = @AnimalDescription,
                strColor = @Color,
                idfsYNClinicalSigns = @ClinicalSignsIndicator,
                intRowStatus = @RowStatus,
                AuditUpdateUser = @AuditUserName,
                AuditUpdateDTM = GETDATE()
            WHERE idfAnimal = @AnimalID;

            -- Data audit
            INSERT INTO @AnimalsAfterEdit
            (
                AnimalID,
                AnimalGenderTypeID,
                AnimalConditionTypeID,
                AnimalAgeTypeID,
                SpeciesID,
                ObservationID,
                AnimalDescription,
                EIDSSAnimalID,
                AnimalName,
                Color
            )
            SELECT idfAnimal,
                   idfsAnimalGender,
                   idfsAnimalCondition,
                   idfsAnimalAge,
                   idfSpecies,
                   idfObservation,
                   strDescription,
                   strAnimalCode,
                   strName,
                   strColor
            FROM dbo.tlbAnimal
            WHERE idfAnimal = @AnimalID;

            -- Update data audit event ID on tlbObservation and tlbActivityParameters
            -- for flexible forms saved outside this DB transaction.
            UPDATE dbo.tauDataAuditDetailCreate
            SET idfDataAuditEvent = @DataAuditEventID,
                strObject = @EIDSSObjectID
            WHERE idfObject = @ObservationID
                  AND idfDataAuditEvent IS NULL;

            IF @RowStatus = 0
            BEGIN
                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       78310000000,
                       a.AnimalID,
                       NULL,
                       b.AnimalGenderTypeID,
                       a.AnimalGenderTypeID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @AnimalsAfterEdit AS a
                    FULL JOIN @AnimalsBeforeEdit AS b
                        ON a.AnimalID = b.AnimalID
                where (a.AnimalGenderTypeID <> b.AnimalGenderTypeID)
                      OR (
                             a.AnimalGenderTypeID IS NOT NULL
                             AND b.AnimalGenderTypeID IS NULL
                         )
                      OR (
                             a.AnimalGenderTypeID IS NULL
                             AND b.AnimalGenderTypeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       78300000000,
                       a.AnimalID,
                       NULL,
                       b.AnimalConditionTypeID,
                       a.AnimalConditionTypeID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @AnimalsAfterEdit AS a
                    FULL JOIN @AnimalsBeforeEdit AS b
                        ON a.AnimalID = b.AnimalID
                where (a.AnimalConditionTypeID <> b.AnimalConditionTypeID)
                      OR (
                             a.AnimalConditionTypeID IS NOT NULL
                             AND b.AnimalConditionTypeID IS NULL
                         )
                      OR (
                             a.AnimalConditionTypeID IS NULL
                             AND b.AnimalConditionTypeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       78290000000,
                       a.AnimalID,
                       NULL,
                       b.AnimalAgeTypeID,
                       a.AnimalAgeTypeID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @AnimalsAfterEdit AS a
                    FULL JOIN @AnimalsBeforeEdit AS b
                        ON a.AnimalID = b.AnimalID
                where (a.AnimalAgeTypeID <> b.AnimalAgeTypeID)
                      OR (
                             a.AnimalAgeTypeID IS NOT NULL
                             AND b.AnimalAgeTypeID IS NULL
                         )
                      OR (
                             a.AnimalAgeTypeID IS NULL
                             AND b.AnimalAgeTypeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       78320000000,
                       a.AnimalID,
                       NULL,
                       b.SpeciesID,
                       a.SpeciesID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @AnimalsAfterEdit AS a
                    FULL JOIN @AnimalsBeforeEdit AS b
                        ON a.AnimalID = b.AnimalID
                where (a.SpeciesID <> b.SpeciesID)
                      OR (
                             a.SpeciesID IS NOT NULL
                             AND b.SpeciesID IS NULL
                         )
                      OR (
                             a.SpeciesID IS NULL
                             AND b.SpeciesID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       78280000000,
                       a.AnimalID,
                       NULL,
                       b.ObservationID,
                       a.ObservationID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @AnimalsAfterEdit AS a
                    FULL JOIN @AnimalsBeforeEdit AS b
                        ON a.AnimalID = b.AnimalID
                where (a.ObservationID <> b.ObservationID)
                      OR (
                             a.ObservationID IS NOT NULL
                             AND b.ObservationID IS NULL
                         )
                      OR (
                             a.ObservationID IS NULL
                             AND b.ObservationID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       78340000000,
                       a.AnimalID,
                       NULL,
                       b.AnimalDescription,
                       a.AnimalDescription,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @AnimalsAfterEdit AS a
                    FULL JOIN @AnimalsBeforeEdit AS b
                        ON a.AnimalID = b.AnimalID
                where (a.AnimalDescription <> b.AnimalDescription)
                      OR (
                             a.AnimalDescription IS NOT NULL
                             AND b.AnimalDescription IS NULL
                         )
                      OR (
                             a.AnimalDescription IS NULL
                             AND b.AnimalDescription IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       78330000000,
                       a.AnimalID,
                       NULL,
                       b.EIDSSAnimalID,
                       a.EIDSSAnimalID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @AnimalsAfterEdit AS a
                    FULL JOIN @AnimalsBeforeEdit AS b
                        ON a.AnimalID = b.AnimalID
                where (a.EIDSSAnimalID <> b.EIDSSAnimalID)
                      OR (
                             a.EIDSSAnimalID IS NOT NULL
                             AND b.EIDSSAnimalID IS NULL
                         )
                      OR (
                             a.EIDSSAnimalID IS NULL
                             AND b.EIDSSAnimalID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4572150000000,
                       a.AnimalID,
                       NULL,
                       b.AnimalName,
                       a.AnimalName,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @AnimalsAfterEdit AS a
                    FULL JOIN @AnimalsBeforeEdit AS b
                        ON a.AnimalID = b.AnimalID
                where (a.AnimalName <> b.AnimalName)
                      OR (
                             a.AnimalName IS NOT NULL
                             AND b.AnimalName IS NULL
                         )
                      OR (
                             a.AnimalName IS NULL
                             AND b.AnimalName IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4572160000000,
                       a.AnimalID,
                       NULL,
                       b.Color,
                       a.Color,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @AnimalsAfterEdit AS a
                    FULL JOIN @AnimalsBeforeEdit AS b
                        ON a.AnimalID = b.AnimalID
                where (a.Color <> b.Color)
                      OR (
                             a.Color IS NOT NULL
                             AND b.Color IS NULL
                         )
                      OR (
                             a.Color IS NULL
                             AND b.Color IS NOT NULL
                         );
            END
            ELSE
            BEGIN
                IF @ObservationID IS NOT NULL
                BEGIN
                    UPDATE dbo.tlbActivityParameters
                    SET intRowStatus = 1
                    WHERE idfObservation = @ObservationID
                          AND intRowStatus = 0;

                    -- Data audit
                    INSERT INTO dbo.tauDataAuditDetailDelete
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfObject,
                        AuditCreateUser,
                        strObject
                    )
                    SELECT @DataAuditEventID,
                           @ObjectActivityParametersTableID,
                           idfActivityParameters,
                           @AuditUserName,
                           @EIDSSObjectID
                    FROM dbo.tlbActivityParameters
                    WHERE idfObservation = @ObservationID
                          AND intRowStatus = 1;
                    -- End data audit

                    UPDATE dbo.tlbObservation
                    SET intRowStatus = 1
                    WHERE idfObservation = @ObservationID;

                    -- Data audit
                    INSERT INTO dbo.tauDataAuditDetailDelete
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfObject,
                        AuditCreateUser,
                        strObject
                    )
                    SELECT @DataAuditEventID,
                           @ObjectObservationTableID,
                           @ObservationID,
                           @AuditUserName,
                           @EIDSSObjectID;
                --End data audit
                END

                INSERT INTO dbo.tauDataAuditDetailDelete
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    AuditCreateUser,
                    strObject
                )
                VALUES
                (@DataAuditEventid, @ObjectTableID, @AnimalID, @AuditUserName, @EIDSSObjectID);
            END
        END
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating Procedure [dbo].[USSP_VET_COPY_FARM_SET]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- ================================================================================================
-- Name: USSP_VET_COPY_FARM_SET
--
-- Description:	Get farm actual detail and copies to the farm table.  This includes the associated 
-- child records for the farm address and the farm owner (human table).
--
-- This is typically called from the veterinary disease report set stored procedure.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     12/07/2022 Initial release with data audit logic for SAUC30 and 31.
-- ================================================================================================
CREATE PROCEDURE [dbo].[USSP_VET_COPY_FARM_SET]
(
    @AuditUserName NVARCHAR(200),
    @DataAuditEventID BIGINT = NULL,
    @EIDSSObjectID NVARCHAR(200) = NULL,
    @FarmMasterID BIGINT,
    @AvianTotalAnimalQuantity INT = NULL,
    @AvianSickAnimalQuantity INT = NULL,
    @AvianDeadAnimalQuantity INT = NULL,
    @LivestockTotalAnimalQuantity INT = NULL,
    @LivestockSickAnimalQuantity INT = NULL,
    @LivestockDeadAnimalQuantity INT = NULL,
    @Latitude FLOAT = NULL,
    @Longitude FLOAT = NULL,
    @MonitoringSessionID BIGINT = NULL,
    @ObservationID BIGINT = NULL,
    @FarmOwnerID BIGINT = NULL,
    @FarmID BIGINT = NULL OUTPUT,
    @NewFarmOwnerID BIGINT = NULL OUTPUT
)
AS
DECLARE @FarmAddressID BIGINT,
        @RootFarmAddressID BIGINT,
        @HumanID BIGINT,
        @HumanMasterID BIGINT,
        @ReturnCode INT = 0,
        @ReturnMessage NVARCHAR(MAX) = 'Vet Farm Copy Success',
        @AuditUserID BIGINT = NULL,
        @AuditSiteID BIGINT = NULL,
        @DataAuditEventTypeID BIGINT = NULL,
        @ObjectID BIGINT = @FarmMasterID,
        @ObjectTableID BIGINT = 75550000000,            -- tlbFarm
        @ObjectGeoLocationTableID BIGINT = 75580000000; -- tlbGeoLocation

DECLARE @FarmAfterEdit TABLE
(
    FarmID BIGINT,
    FarmActualID BIGINT,
    MonitoringSessionID BIGINT,
    AvianFarmTypeID BIGINT,
    AvianProductionTypeID BIGINT,
    FarmCategoryTypeID BIGINT,
    OwnershipStructureTypeID BIGINT,
    MovementPatternTypeID BIGINT,
    IntendedUseTypeID BIGINT,
    GrazingPatternTypeID BIGINT,
    LivestockProductionTypeID BIGINT,
    HumanActualID BIGINT,
    FarmAddressID BIGINT,
    InternationalName NVARCHAR(200),
    NationalName NVARCHAR(200),
    EIDSSFarmID NVARCHAR(200),
    Fax NVARCHAR(200),
    Email NVARCHAR(200),
    ContactPhone NVARCHAR(200),
    LivestockTotalAnimalQuantity INT,
    AvianTotalAnimalQuantity INT,
    LivestockSickAnimalQuantity INT,
    AvianSickAnimalQuantity INT,
    LivestockDeadAnimalQuantity INT,
    AvianDeadAnimalQuantity INT,
    BuidingsQuantity INT,
    BirdsPerBuildingQuantity INT,
    Note NVARCHAR(2000),
    AccessoryCode INT,
    ModificationDate DATETIME
);
DECLARE @FarmBeforeEdit TABLE
(
    FarmID BIGINT,
    FarmActualID BIGINT,
    MonitoringSessionID BIGINT,
    AvianFarmTypeID BIGINT,
    AvianProductionTypeID BIGINT,
    FarmCategoryTypeID BIGINT,
    OwnershipStructureTypeID BIGINT,
    MovementPatternTypeID BIGINT,
    IntendedUseTypeID BIGINT,
    GrazingPatternTypeID BIGINT,
    LivestockProductionTypeID BIGINT,
    HumanActualID BIGINT,
    FarmAddressID BIGINT,
    InternationalName NVARCHAR(200),
    NationalName NVARCHAR(200),
    EIDSSFarmID NVARCHAR(200),
    Fax NVARCHAR(200),
    Email NVARCHAR(200),
    ContactPhone NVARCHAR(200),
    LivestockTotalAnimalQuantity INT,
    AvianTotalAnimalQuantity INT,
    LivestockSickAnimalQuantity INT,
    AvianSickAnimalQuantity INT,
    LivestockDeadAnimalQuantity INT,
    AvianDeadAnimalQuantity INT,
    BuidingsQuantity INT,
    BirdsPerBuildingQuantity INT,
    Note NVARCHAR(2000),
    AccessoryCode INT,
    ModificationDate DATETIME
);
DECLARE @GeoLocationBeforeEdit TABLE
(
    GeoLocationID BIGINT,
    Latitude FLOAT,
    Longitude FLOAT
);
DECLARE @GeoLocationAfterEdit TABLE
(
    GeoLocationID BIGINT,
    Latitude FLOAT,
    Longitude FLOAT
);
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        SET @AuditUserName = ISNULL(@AuditUserName, '');

        -- Data audit
        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = userInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo;
        -- End data audit

        SELECT @RootFarmAddressID = idfFarmAddress,
               @HumanMasterID = idfHumanActual
        FROM dbo.tlbFarmActual
        WHERE idfFarmActual = @FarmMasterID;

        IF NOT EXISTS (SELECT * FROM dbo.tlbFarm WHERE idfFarm = @FarmID)
        BEGIN
            SET @DataAuditEventTypeID = 10016001; -- Data audit create event type

            EXECUTE dbo.USP_GBL_NEXTKEYID_GET @tableName = 'tlbFarm',
                                              @idfsKey = @FarmID OUTPUT;

            SET @FarmOwnerID = NULL;
        END
        ELSE
        BEGIN
            SET @DataAuditEventTypeID = 10016003; -- Data audit edit event type
        END;

        -- Get new farm address identifier.
        SET @FarmAddressID = NULL;

        SELECT @FarmAddressID = idfFarmAddress
        FROM dbo.tlbFarm
        WHERE idfFarm = @FarmID;

        IF @FarmAddressID IS NULL
           AND @RootFarmAddressID IS NOT NULL
        BEGIN
            EXECUTE dbo.USP_GBL_NEXTKEYID_GET @tableName = 'tlbGeoLocation',
                                              @idfsKey = @FarmAddressID OUTPUT;

            -- Copy address from root farm.
            EXECUTE dbo.USSP_GBL_COPY_GEOLOCATION_SET @RootFarmAddressID,
                                                      @FarmAddressID,
                                                      0,
                                                      @DataAuditEventID,
                                                      @AuditUserName,
                                                      @ReturnCode,
                                                      @ReturnMessage;

            IF @ReturnCode <> 0
            BEGIN
                SET @ReturnMessage = 'Failed to copy farm address.';

                SELECT @ReturnCode,
                       @ReturnMessage;

                RETURN;
            END
        END

        IF @FarmOwnerID IS NULL
           AND NOT @HumanMasterID IS NULL
        BEGIN
            EXECUTE dbo.USP_GBL_NEXTKEYID_GET @tableName = 'tlbHuman',
                                              @idfsKey = @NewFarmOwnerID OUTPUT;

            -- Copy root human actual to human snapshot for the farm owner.
            EXECUTE dbo.USSP_HUM_COPY_HUMAN_SET @HumanMasterID,
                                                @DataAuditEventID,
                                                @AuditUserName,
                                                @NewFarmOwnerID,
                                                @ReturnCode,
                                                @ReturnMessage;

            SET @FarmOwnerID = @NewFarmOwnerID;

            IF @ReturnCode <> 0
            BEGIN
                SET @ReturnMessage = 'Failed to copy human (farm owner).';

                SELECT @ReturnCode,
                       @ReturnMessage;

                RETURN;
            END
        END

        IF EXISTS (SELECT * FROM dbo.tlbFarm WHERE idfFarm = @FarmID)
        BEGIN
            INSERT INTO @FarmBeforeEdit
            (
                FarmID,
                FarmActualID,
                MonitoringSessionID,
                AvianFarmTypeID,
                AvianProductionTypeID,
                FarmCategoryTypeID,
                OwnershipStructureTypeID,
                MovementPatternTypeID,
                IntendedUseTypeID,
                GrazingPatternTypeID,
                LivestockProductionTypeID,
                HumanActualID,
                FarmAddressID,
                InternationalName,
                NationalName,
                EIDSSFarmID,
                Fax,
                Email,
                ContactPhone,
                LivestockTotalAnimalQuantity,
                AvianTotalAnimalQuantity,
                LivestockSickAnimalQuantity,
                AvianSickAnimalQuantity,
                LivestockDeadAnimalQuantity,
                AvianDeadAnimalQuantity,
                BuidingsQuantity,
                BirdsPerBuildingQuantity,
                Note,
                AccessoryCode,
                ModificationDate
            )
            SELECT idfFarm,
                   idfFarmActual,
                   idfMonitoringSession,
                   idfsAvianFarmType,
                   idfsAvianProductionType,
                   idfsFarmCategory,
                   idfsOwnershipStructure,
                   idfsMovementPattern,
                   idfsIntendedUse,
                   idfsGrazingPattern,
                   idfsLivestockProductionType,
                   idfHuman,
                   idfFarmAddress,
                   strInternationalName,
                   strNationalName,
                   strFarmCode,
                   strFax,
                   strEmail,
                   strContactPhone,
                   intLivestockTotalAnimalQty,
                   intAvianTotalAnimalQty,
                   intLivestockSickAnimalQty,
                   intAvianSickAnimalQty,
                   intLivestockDeadAnimalQty,
                   intAvianDeadAnimalQty,
                   intBuidings,
                   intBirdsPerBuilding,
                   strNote,
                   intHACode,
                   datModificationDate
            FROM dbo.tlbFarm
            WHERE idfFarm = @FarmID;

            UPDATE dbo.tlbFarm
            SET intLivestockTotalAnimalQty = @LivestockTotalAnimalQuantity,
                intAvianTotalAnimalQty = @AvianTotalAnimalQuantity,
                intLivestockSickAnimalQty = COALESCE(@LivestockSickAnimalQuantity, f.intLivestockSickAnimalQty),
                intAvianSickAnimalQty = COALESCE(@AvianSickAnimalQuantity, f.intAvianSickAnimalQty),
                intLivestockDeadAnimalQty = COALESCE(@LivestockDeadAnimalQuantity, f.intLivestockDeadAnimalQty),
                intAvianDeadAnimalQty = COALESCE(@AvianDeadAnimalQuantity, f.intAvianDeadAnimalQty),
                idfMonitoringSession = @MonitoringSessionID,
                idfObservation = @ObservationID,
                datModificationDate = GETDATE(),
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUserName
            FROM dbo.tlbFarm f
                INNER JOIN dbo.tlbFarmActual fa
                    ON fa.idfFarmActual = f.idfFarmActual
            WHERE f.idfFarm = @FarmID;

            INSERT INTO @FarmAfterEdit
            (
                FarmID,
                FarmActualID,
                MonitoringSessionID,
                AvianFarmTypeID,
                AvianProductionTypeID,
                FarmCategoryTypeID,
                OwnershipStructureTypeID,
                MovementPatternTypeID,
                IntendedUseTypeID,
                GrazingPatternTypeID,
                LivestockProductionTypeID,
                HumanActualID,
                FarmAddressID,
                InternationalName,
                NationalName,
                EIDSSFarmID,
                Fax,
                Email,
                ContactPhone,
                LivestockTotalAnimalQuantity,
                AvianTotalAnimalQuantity,
                LivestockSickAnimalQuantity,
                AvianSickAnimalQuantity,
                LivestockDeadAnimalQuantity,
                AvianDeadAnimalQuantity,
                BuidingsQuantity,
                BirdsPerBuildingQuantity,
                Note,
                AccessoryCode,
                ModificationDate
            )
            SELECT idfFarm,
                   idfFarmActual,
                   idfMonitoringSession,
                   idfsAvianFarmType,
                   idfsAvianProductionType,
                   idfsFarmCategory,
                   idfsOwnershipStructure,
                   idfsMovementPattern,
                   idfsIntendedUse,
                   idfsGrazingPattern,
                   idfsLivestockProductionType,
                   idfHuman,
                   idfFarmAddress,
                   strInternationalName,
                   strNationalName,
                   strFarmCode,
                   strFax,
                   strEmail,
                   strContactPhone,
                   intLivestockTotalAnimalQty,
                   intAvianTotalAnimalQty,
                   intLivestockSickAnimalQty,
                   intAvianSickAnimalQty,
                   intLivestockDeadAnimalQty,
                   intAvianDeadAnimalQty,
                   intBuidings,
                   intBirdsPerBuilding,
                   strNote,
                   intHACode,
                   datModificationDate
            FROM dbo.tlbFarm
            WHERE idfFarm = @FarmID;

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4572170000000,
                   a.FarmID,
                   NULL,
                   b.FarmActualID,
                   a.FarmActualID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @FarmAfterEdit AS a
                FULL JOIN @FarmBeforeEdit AS b
                    ON a.FarmID = b.FarmID
            WHERE (a.FarmActualID <> b.FarmActualID)
                  OR (
                         a.FarmActualID IS NOT NULL
                         AND b.FarmActualID IS NULL
                     )
                  OR (
                         a.FarmActualID IS NULL
                         AND b.FarmActualID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4572180000000,
                   a.FarmID,
                   NULL,
                   b.MonitoringSessionID,
                   a.MonitoringSessionID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @FarmAfterEdit AS a
                FULL JOIN @FarmBeforeEdit AS b
                    ON a.FarmID = b.FarmID
            WHERE (a.MonitoringSessionID <> b.MonitoringSessionID)
                  OR (
                         a.MonitoringSessionID IS NOT NULL
                         AND b.MonitoringSessionID IS NULL
                     )
                  OR (
                         a.MonitoringSessionID IS NULL
                         AND b.MonitoringSessionID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4572810000000,
                   a.FarmID,
                   NULL,
                   b.AvianFarmTypeID,
                   a.AvianFarmTypeID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @FarmAfterEdit AS a
                FULL JOIN @FarmBeforeEdit AS b
                    ON a.FarmID = b.FarmID
            WHERE (a.AvianFarmTypeID <> b.AvianFarmTypeID)
                  OR (
                         a.AvianFarmTypeID IS NOT NULL
                         AND b.AvianFarmTypeID IS NULL
                     )
                  OR (
                         a.AvianFarmTypeID IS NULL
                         AND b.AvianFarmTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4572820000000,
                   a.FarmID,
                   NULL,
                   b.AvianProductionTypeID,
                   a.AvianProductionTypeID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @FarmAfterEdit AS a
                FULL JOIN @FarmBeforeEdit AS b
                    ON a.FarmID = b.FarmID
            WHERE (a.AvianProductionTypeID <> b.AvianProductionTypeID)
                  OR (
                         a.AvianProductionTypeID IS NOT NULL
                         AND b.AvianProductionTypeID IS NULL
                     )
                  OR (
                         a.AvianProductionTypeID IS NULL
                         AND b.AvianProductionTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4572830000000,
                   a.FarmID,
                   NULL,
                   b.FarmCategoryTypeID,
                   a.FarmCategoryTypeID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @FarmAfterEdit AS a
                FULL JOIN @FarmBeforeEdit AS b
                    ON a.FarmID = b.FarmID
            WHERE (a.FarmCategoryTypeID <> b.FarmCategoryTypeID)
                  OR (
                         a.FarmCategoryTypeID IS NOT NULL
                         AND b.FarmCategoryTypeID IS NULL
                     )
                  OR (
                         a.FarmCategoryTypeID IS NULL
                         AND b.FarmCategoryTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4572840000000,
                   a.FarmID,
                   NULL,
                   b.OwnershipStructureTypeID,
                   a.OwnershipStructureTypeID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @FarmAfterEdit AS a
                FULL JOIN @FarmBeforeEdit AS b
                    ON a.FarmID = b.FarmID
            WHERE (a.OwnershipStructureTypeID <> b.OwnershipStructureTypeID)
                  OR (
                         a.OwnershipStructureTypeID IS NOT NULL
                         AND b.OwnershipStructureTypeID IS NULL
                     )
                  OR (
                         a.OwnershipStructureTypeID IS NULL
                         AND b.OwnershipStructureTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4572850000000,
                   a.FarmID,
                   NULL,
                   b.MovementPatternTypeID,
                   a.MovementPatternTypeID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @FarmAfterEdit AS a
                FULL JOIN @FarmBeforeEdit AS b
                    ON a.FarmID = b.FarmID
            WHERE (a.MovementPatternTypeID <> b.MovementPatternTypeID)
                  OR (
                         a.MovementPatternTypeID IS NOT NULL
                         AND b.MovementPatternTypeID IS NULL
                     )
                  OR (
                         a.MovementPatternTypeID IS NULL
                         AND b.MovementPatternTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4572860000000,
                   a.FarmID,
                   NULL,
                   b.IntendedUseTypeID,
                   a.IntendedUseTypeID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @FarmAfterEdit AS a
                FULL JOIN @FarmBeforeEdit AS b
                    ON a.FarmID = b.FarmID
            WHERE (a.IntendedUseTypeID <> b.IntendedUseTypeID)
                  OR (
                         a.IntendedUseTypeID IS NOT NULL
                         AND b.IntendedUseTypeID IS NULL
                     )
                  OR (
                         a.IntendedUseTypeID IS NULL
                         AND b.IntendedUseTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4572870000000,
                   a.FarmID,
                   NULL,
                   b.GrazingPatternTypeID,
                   a.GrazingPatternTypeID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @FarmAfterEdit AS a
                FULL JOIN @FarmBeforeEdit AS b
                    ON a.FarmID = b.FarmID
            WHERE (a.GrazingPatternTypeID <> b.GrazingPatternTypeID)
                  OR (
                         a.GrazingPatternTypeID IS NOT NULL
                         AND b.GrazingPatternTypeID IS NULL
                     )
                  OR (
                         a.GrazingPatternTypeID IS NULL
                         AND b.GrazingPatternTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4572880000000,
                   a.FarmID,
                   NULL,
                   b.LivestockProductionTypeID,
                   a.LivestockProductionTypeID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @FarmAfterEdit AS a
                FULL JOIN @FarmBeforeEdit AS b
                    ON a.FarmID = b.FarmID
            WHERE (a.LivestockProductionTypeID <> b.LivestockProductionTypeID)
                  OR (
                         a.LivestockProductionTypeID IS NOT NULL
                         AND b.LivestockProductionTypeID IS NULL
                     )
                  OR (
                         a.LivestockProductionTypeID IS NULL
                         AND b.LivestockProductionTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4572890000000,
                   a.FarmID,
                   NULL,
                   b.HumanActualID,
                   a.HumanActualID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @FarmAfterEdit AS a
                FULL JOIN @FarmBeforeEdit AS b
                    ON a.FarmID = b.FarmID
            WHERE (a.HumanActualID <> b.HumanActualID)
                  OR (
                         a.HumanActualID IS NOT NULL
                         AND b.HumanActualID IS NULL
                     )
                  OR (
                         a.HumanActualID IS NULL
                         AND b.HumanActualID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4572900000000,
                   a.FarmID,
                   NULL,
                   b.FarmAddressID,
                   a.FarmAddressID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @FarmAfterEdit AS a
                FULL JOIN @FarmBeforeEdit AS b
                    ON a.FarmID = b.FarmID
            WHERE (a.FarmAddressID <> b.FarmAddressID)
                  OR (
                         a.FarmAddressID IS NOT NULL
                         AND b.FarmAddressID IS NULL
                     )
                  OR (
                         a.FarmAddressID IS NULL
                         AND b.FarmAddressID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4572920000000,
                   a.FarmID,
                   NULL,
                   b.InternationalName,
                   a.InternationalName,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @FarmAfterEdit AS a
                FULL JOIN @FarmBeforeEdit AS b
                    ON a.FarmID = b.FarmID
            WHERE (a.InternationalName <> b.InternationalName)
                  OR (
                         a.InternationalName IS NOT NULL
                         AND b.InternationalName IS NULL
                     )
                  OR (
                         a.InternationalName IS NULL
                         AND b.InternationalName IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4572930000000,
                   a.FarmID,
                   NULL,
                   b.NationalName,
                   a.NationalName,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @FarmAfterEdit AS a
                FULL JOIN @FarmBeforeEdit AS b
                    ON a.FarmID = b.FarmID
            WHERE (a.NationalName <> b.NationalName)
                  OR (
                         a.NationalName IS NOT NULL
                         AND b.NationalName IS NULL
                     )
                  OR (
                         a.NationalName IS NULL
                         AND b.NationalName IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4572940000000,
                   a.FarmID,
                   NULL,
                   b.EIDSSFarmID,
                   a.EIDSSFarmID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @FarmAfterEdit AS a
                FULL JOIN @FarmBeforeEdit AS b
                    ON a.FarmID = b.FarmID
            WHERE (a.EIDSSFarmID <> b.EIDSSFarmID)
                  OR (
                         a.EIDSSFarmID IS NOT NULL
                         AND b.EIDSSFarmID IS NULL
                     )
                  OR (
                         a.EIDSSFarmID IS NULL
                         AND b.EIDSSFarmID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4572950000000,
                   a.FarmID,
                   NULL,
                   b.Fax,
                   a.Fax,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @FarmAfterEdit AS a
                FULL JOIN @FarmBeforeEdit AS b
                    ON a.FarmID = b.FarmID
            WHERE (a.Fax <> b.Fax)
                  OR (
                         a.Fax IS NOT NULL
                         AND b.Fax IS NULL
                     )
                  OR (
                         a.Fax IS NULL
                         AND b.Fax IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4572960000000,
                   a.FarmID,
                   NULL,
                   b.Email,
                   a.Email,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @FarmAfterEdit AS a
                FULL JOIN @FarmBeforeEdit AS b
                    ON a.FarmID = b.FarmID
            WHERE (a.Email <> b.Email)
                  OR (
                         a.Email IS NOT NULL
                         AND b.Email IS NULL
                     )
                  OR (
                         a.Email IS NULL
                         AND b.Email IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4572970000000,
                   a.FarmID,
                   NULL,
                   b.ContactPhone,
                   a.ContactPhone,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @FarmAfterEdit AS a
                FULL JOIN @FarmBeforeEdit AS b
                    ON a.FarmID = b.FarmID
            WHERE (a.ContactPhone <> b.ContactPhone)
                  OR (
                         a.ContactPhone IS NOT NULL
                         AND b.ContactPhone IS NULL
                     )
                  OR (
                         a.ContactPhone IS NULL
                         AND b.ContactPhone IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4573010000000,
                   a.FarmID,
                   NULL,
                   b.LivestockTotalAnimalQuantity,
                   a.LivestockTotalAnimalQuantity,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @FarmAfterEdit AS a
                FULL JOIN @FarmBeforeEdit AS b
                    ON a.FarmID = b.FarmID
            WHERE (a.LivestockTotalAnimalQuantity <> b.LivestockTotalAnimalQuantity)
                  OR (
                         a.LivestockTotalAnimalQuantity IS NOT NULL
                         AND b.LivestockTotalAnimalQuantity IS NULL
                     )
                  OR (
                         a.LivestockTotalAnimalQuantity IS NULL
                         AND b.LivestockTotalAnimalQuantity IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4573020000000,
                   a.FarmID,
                   NULL,
                   b.AvianTotalAnimalQuantity,
                   a.AvianTotalAnimalQuantity,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @FarmAfterEdit AS a
                FULL JOIN @FarmBeforeEdit AS b
                    ON a.FarmID = b.FarmID
            WHERE (a.AvianTotalAnimalQuantity <> b.AvianTotalAnimalQuantity)
                  OR (
                         a.AvianTotalAnimalQuantity IS NOT NULL
                         AND b.AvianTotalAnimalQuantity IS NULL
                     )
                  OR (
                         a.AvianTotalAnimalQuantity IS NULL
                         AND b.AvianTotalAnimalQuantity IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4573030000000,
                   a.FarmID,
                   NULL,
                   b.LivestockSickAnimalQuantity,
                   a.LivestockSickAnimalQuantity,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @FarmAfterEdit AS a
                FULL JOIN @FarmBeforeEdit AS b
                    ON a.FarmID = b.FarmID
            WHERE (a.LivestockSickAnimalQuantity <> b.LivestockSickAnimalQuantity)
                  OR (
                         a.LivestockSickAnimalQuantity IS NOT NULL
                         AND b.LivestockSickAnimalQuantity IS NULL
                     )
                  OR (
                         a.LivestockSickAnimalQuantity IS NULL
                         AND b.LivestockSickAnimalQuantity IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4573040000000,
                   a.FarmID,
                   NULL,
                   b.AvianSickAnimalQuantity,
                   a.AvianSickAnimalQuantity,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @FarmAfterEdit AS a
                FULL JOIN @FarmBeforeEdit AS b
                    ON a.FarmID = b.FarmID
            WHERE (a.AvianSickAnimalQuantity <> b.AvianSickAnimalQuantity)
                  OR (
                         a.AvianSickAnimalQuantity IS NOT NULL
                         AND b.AvianSickAnimalQuantity IS NULL
                     )
                  OR (
                         a.AvianSickAnimalQuantity IS NULL
                         AND b.AvianSickAnimalQuantity IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4573050000000,
                   a.FarmID,
                   NULL,
                   b.LivestockDeadAnimalQuantity,
                   a.LivestockDeadAnimalQuantity,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @FarmAfterEdit AS a
                FULL JOIN @FarmBeforeEdit AS b
                    ON a.FarmID = b.FarmID
            WHERE (a.LivestockDeadAnimalQuantity <> b.LivestockDeadAnimalQuantity)
                  OR (
                         a.LivestockDeadAnimalQuantity IS NOT NULL
                         AND b.LivestockDeadAnimalQuantity IS NULL
                     )
                  OR (
                         a.LivestockDeadAnimalQuantity IS NULL
                         AND b.LivestockDeadAnimalQuantity IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4573060000000,
                   a.FarmID,
                   NULL,
                   b.AvianDeadAnimalQuantity,
                   a.AvianDeadAnimalQuantity,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @FarmAfterEdit AS a
                FULL JOIN @FarmBeforeEdit AS b
                    ON a.FarmID = b.FarmID
            WHERE (a.AvianDeadAnimalQuantity <> b.AvianDeadAnimalQuantity)
                  OR (
                         a.AvianDeadAnimalQuantity IS NOT NULL
                         AND b.AvianDeadAnimalQuantity IS NULL
                     )
                  OR (
                         a.AvianDeadAnimalQuantity IS NULL
                         AND b.AvianDeadAnimalQuantity IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4573070000000,
                   a.FarmID,
                   NULL,
                   b.BuidingsQuantity,
                   a.BuidingsQuantity,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @FarmAfterEdit AS a
                FULL JOIN @FarmBeforeEdit AS b
                    ON a.FarmID = b.FarmID
            WHERE (a.BuidingsQuantity <> b.BuidingsQuantity)
                  OR (
                         a.BuidingsQuantity IS NOT NULL
                         AND b.BuidingsQuantity IS NULL
                     )
                  OR (
                         a.BuidingsQuantity IS NULL
                         AND b.BuidingsQuantity IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4573080000000,
                   a.FarmID,
                   NULL,
                   b.BirdsPerBuildingQuantity,
                   a.BirdsPerBuildingQuantity,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @FarmAfterEdit AS a
                FULL JOIN @FarmBeforeEdit AS b
                    ON a.FarmID = b.FarmID
            WHERE (a.BirdsPerBuildingQuantity <> b.BirdsPerBuildingQuantity)
                  OR (
                         a.BirdsPerBuildingQuantity IS NOT NULL
                         AND b.BirdsPerBuildingQuantity IS NULL
                     )
                  OR (
                         a.BirdsPerBuildingQuantity IS NULL
                         AND b.BirdsPerBuildingQuantity IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4573090000000,
                   a.FarmID,
                   NULL,
                   b.Note,
                   a.Note,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @FarmAfterEdit AS a
                FULL JOIN @FarmBeforeEdit AS b
                    ON a.FarmID = b.FarmID
            WHERE (a.Note <> b.Note)
                  OR (
                         a.Note IS NOT NULL
                         AND b.Note IS NULL
                     )
                  OR (
                         a.Note IS NULL
                         AND b.Note IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   51389490000000,
                   a.FarmID,
                   NULL,
                   b.AccessoryCode,
                   a.AccessoryCode,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @FarmAfterEdit AS a
                FULL JOIN @FarmBeforeEdit AS b
                    ON a.FarmID = b.FarmID
            WHERE (a.AccessoryCode <> b.AccessoryCode)
                  OR (
                         a.AccessoryCode IS NOT NULL
                         AND b.AccessoryCode IS NULL
                     )
                  OR (
                         a.AccessoryCode IS NULL
                         AND b.AccessoryCode IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   51389500000000,
                   a.FarmID,
                   NULL,
                   b.ModificationDate,
                   a.ModificationDate,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @FarmAfterEdit AS a
                FULL JOIN @FarmBeforeEdit AS b
                    ON a.FarmID = b.FarmID
            WHERE (a.ModificationDate <> b.ModificationDate)
                  OR (
                         a.ModificationDate IS NOT NULL
                         AND b.ModificationDate IS NULL
                     )
                  OR (
                         a.ModificationDate IS NULL
                         AND b.ModificationDate IS NOT NULL
                     );
        END
        ELSE
        BEGIN
            INSERT INTO dbo.tlbFarm
            (
                idfFarm,
                idfFarmActual,
                idfMonitoringSession,
                idfsFarmCategory,
                idfsOwnershipStructure,
                idfHuman,
                idfFarmAddress,
                strNationalName,
                strFarmCode,
                strFax,
                strEmail,
                strContactPhone,
                intLivestockTotalAnimalQty,
                intAvianTotalAnimalQty,
                intLivestockSickAnimalQty,
                intAvianSickAnimalQty,
                intLivestockDeadAnimalQty,
                intAvianDeadAnimalQty,
                strNote,
                rowguid,
                intRowStatus,
                intHACode,
                idfObservation,
                datModificationDate,
                strMaintenanceFlag,
                strReservedAttribute,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser,
                AuditCreateDTM,
                AuditUpdateUser,
                AuditUpdateDTM
            )
            SELECT @FarmID,
                   @FarmMasterID,
                   @MonitoringSessionID,
                   idfsFarmCategory,
                   idfsOwnershipStructure,
                   @FarmOwnerID,
                   @FarmAddressID,
                   strNationalName,
                   strFarmCode,
                   strFax,
                   strEmail,
                   strContactPhone,
                   @LivestockTotalAnimalQuantity,
                   @AvianTotalAnimalQuantity,
                   @LivestockSickAnimalQuantity,
                   @AvianSickAnimalQuantity,
                   @LivestockDeadAnimalQuantity,
                   @AvianDeadAnimalQuantity,
                   strNote,
                   NEWID(),
                   0,
                   NULL,
                   @ObservationID,
                   GETDATE(),
                   NULL,
                   NULL,
                   10519001,
                   '[{"idfFarm":' + CAST(@FarmID AS NVARCHAR(300)) + '}]',
                   @AuditUserName,
                   GETDATE(),
                   @AuditUserName,
                   GETDATE()
            FROM dbo.tlbFarmActual
            WHERE idfFarmActual = @FarmMasterID;

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailCreate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser
            )
            VALUES
            (@DataAuditEventID,
             @ObjectTableID,
             @FarmID,
             10519001,
             '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
             + CAST(@ObjectTableID AS NVARCHAR(300)) + '}]',
             @AuditUserName
            );
        -- End data audit
        END;

        IF @FarmAddressID IS NOT NULL
        BEGIN
            -- Data audit
            INSERT INTO @GeoLocationBeforeEdit
            (
                GeoLocationID,
                Latitude,
                Longitude
            )
            SELECT idfGeoLocation,
                   dblLatitude,
                   dblLongitude
            FROM dbo.tlbGeoLocation
            WHERE idfGeoLocation = @FarmAddressID;
            -- End data audit

            UPDATE dbo.tlbGeoLocation
            SET dblLatitude = @Latitude,
                dblLongitude = @Longitude,
                AuditUpdateUser = @AuditUserName
            WHERE idfGeoLocation = @FarmAddressID;

            -- Data audit
            INSERT INTO @GeoLocationAfterEdit
            (
                GeoLocationID,
                Latitude,
                Longitude
            )
            SELECT idfGeoLocation,
                   dblLatitude,
                   dblLongitude
            FROM dbo.tlbGeoLocation
            WHERE idfGeoLocation = @FarmAddressID;

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectGeoLocationTableID,
                   79120000000,
                   a.GeoLocationID,
                   NULL,
                   b.Latitude,
                   a.Latitude,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.Latitude <> b.Latitude)
                  OR (
                         a.Latitude IS NOT NULL
                         AND b.Latitude IS NULL
                     )
                  OR (
                         a.Latitude IS NULL
                         AND b.Latitude IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectGeoLocationTableID,
                   79130000000,
                   a.GeoLocationID,
                   NULL,
                   b.Longitude,
                   a.Longitude,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.Longitude <> b.Longitude)
                  OR (
                         a.Longitude IS NOT NULL
                         AND b.Longitude IS NULL
                     )
                  OR (
                         a.Longitude IS NULL
                         AND b.Longitude IS NOT NULL
                     );
        -- End data audit
        END;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating Procedure [dbo].[USSP_VET_FLOCK_HERD_SET]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- ================================================================================================
-- Name: USSP_VET_FLOCK_HERD_SET
--
-- Description:	Inserts or updates herd "snapshot" for the avian and livestock veterinary disease 
-- report use cases.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     11/21/2022 Initial release with data audit logic for SAUC30 and 31.
-- ================================================================================================
CREATE PROCEDURE [dbo].[USSP_VET_FLOCK_HERD_SET]
(
    @AuditUserName NVARCHAR(200),
    @DataAuditEventID BIGINT = NULL,
    @EIDSSObjectID NVARCHAR(200) = NULL,
    @FlockOrHerdID BIGINT = NULL OUTPUT,
    @FlockOrHerdMasterID BIGINT = NULL,
    @FarmID BIGINT = NULL,
    @EIDSSFlockOrHerdID NVARCHAR(200) = NULL,
    @SickAnimalQuantity INT = NULL,
    @TotalAnimalQuantity INT = NULL,
    @DeadAnimalQuantity INT = NULL,
    @Note NVARCHAR(2000) = NULL,
    @RowStatus INT,
    @RowAction INT
)
AS
DECLARE @AuditUserID BIGINT = NULL,
        @AuditSiteID BIGINT = NULL,
        @DataAuditEventTypeID BIGINT = NULL,
        @ObjectID BIGINT = NULL,
        @ObjectTableID BIGINT = 75590000000; -- tlbHerd
DECLARE @FlocksOrHerdsAfterEdit TABLE
(
    HerdID BIGINT,
    HerdActualID BIGINT,
    FarmID BIGINT,
    EIDSSHerdID NVARCHAR(200),
    SickAnimalQuantity INT,
    TotalAnimalQuantity INT,
    DeadAnimalQuantity INT,
    Note NVARCHAR(2000)
);
DECLARE @FlocksOrHerdsBeforeEdit TABLE
(
    HerdID BIGINT,
    HerdActualID BIGINT,
    FarmID BIGINT,
    EIDSSHerdID NVARCHAR(200),
    SickAnimalQuantity INT,
    TotalAnimalQuantity INT,
    DeadAnimalQuantity INT,
    Note NVARCHAR(2000)
);
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        SET @AuditUserName = ISNULL(@AuditUserName, '');

        -- Data audit
        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = userInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo;

        IF @RowAction = 1 -- Insert
        BEGIN
            EXECUTE dbo.USP_GBL_NEXTKEYID_GET @tableName = 'tlbHerd',
                                              @idfsKey = @FlockOrHerdID OUTPUT;

            EXECUTE dbo.USP_GBL_NextNumber_GET @ObjectName = 'Animal Group',
                                               @NextNumberValue = @EIDSSFlockOrHerdID OUTPUT,
                                               @InstallationSite = NULL;

            INSERT INTO dbo.tlbHerd
            (
                idfHerd,
                idfHerdActual,
                idfFarm,
                strHerdCode,
                intSickAnimalQty,
                intTotalAnimalQty,
                intDeadAnimalQty,
                strNote,
                rowguid,
                intRowStatus,
                strMaintenanceFlag,
                strReservedAttribute,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser,
                AuditCreateDTM,
                AuditUpdateUser,
                AuditUpdateDTM
            )
            VALUES
            (@FlockOrHerdID,
             @FlockOrHerdMasterID,
             @FarmID,
             @EIDSSFlockOrHerdID,
             @SickAnimalQuantity,
             @TotalAnimalQuantity,
             @DeadAnimalQuantity,
             @Note,
             NEWID(),
             @RowStatus,
             NULL,
             NULL,
             10519001,
             '[{"idfHerd":' + CAST(@FlockOrHerdID AS NVARCHAR(300)) + '}]',
             @AuditUserName,
             GETDATE(),
             @AuditUserName,
             GETDATE()
            );

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailCreate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser,
                strObject
            )
            VALUES
            (@DataAuditEventID,
             @ObjectTableID,
             @FlockOrHerdID,
             10519001,
             '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
             + CAST(@ObjectTableID AS NVARCHAR(300)) + '}]',
             @AuditUserName,
             @EIDSSObjectID
            );
        -- End data audit
        END
        ELSE
        BEGIN
            -- Data audit
            INSERT INTO @FlocksOrHerdsBeforeEdit
            (
                HerdID,
                HerdActualID,
                FarmID,
                EIDSSHerdID,
                SickAnimalQuantity,
                TotalAnimalQuantity,
                DeadAnimalQuantity,
                Note
            )
            SELECT idfHerd,
                   idfHerdActual,
                   idfFarm,
                   strHerdCode,
                   intSickAnimalQty,
                   intTotalAnimalQty,
                   intDeadAnimalQty,
                   strNote
            FROM dbo.tlbHerd
            WHERE idfHerd = @FlockOrHerdID;
            -- End data audit

            UPDATE dbo.tlbHerd
            SET idfHerdActual = @FlockOrHerdMasterID,
                idfFarm = @FarmID,
                strHerdCode = @EIDSSFlockOrHerdID,
                intSickAnimalQty = @SickAnimalQuantity,
                intTotalAnimalQty = @TotalAnimalQuantity,
                intDeadAnimalQty = @DeadAnimalQuantity,
                strNote = @Note,
                intRowStatus = @RowStatus,
                AuditUpdateUser = @AuditUserName,
                AuditUpdateDTM = GETDATE()
            WHERE idfHerd = @FlockOrHerdID;

            -- Data audit
            INSERT INTO @FlocksOrHerdsAfterEdit
            (
                HerdID,
                HerdActualID,
                FarmID,
                EIDSSHerdID,
                SickAnimalQuantity,
                TotalAnimalQuantity,
                DeadAnimalQuantity,
                Note
            )
            SELECT idfHerd,
                   idfHerdActual,
                   idfFarm,
                   strHerdCode,
                   intSickAnimalQty,
                   intTotalAnimalQty,
                   intDeadAnimalQty,
                   strNote
            FROM dbo.tlbHerd
            WHERE idfHerd = @FlockOrHerdID;

            IF @RowStatus = 0
            BEGIN
                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4572280000000,
                       a.HerdID,
                       NULL,
                       b.HerdActualID,
                       a.HerdActualID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @FlocksOrHerdsAfterEdit AS a
                    FULL JOIN @FlocksOrHerdsBeforeEdit AS b
                        ON a.HerdID = b.HerdID
                WHERE (a.HerdActualID <> b.HerdActualID)
                      OR (
                             a.HerdActualID IS NOT NULL
                             AND b.HerdActualID IS NULL
                         )
                      OR (
                             a.HerdActualID IS NULL
                             AND b.HerdActualID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       79280000000,
                       a.HerdID,
                       NULL,
                       b.FarmID,
                       a.FarmID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @FlocksOrHerdsAfterEdit AS a
                    FULL JOIN @FlocksOrHerdsBeforeEdit AS b
                        ON a.HerdID = b.HerdID
                WHERE (a.FarmID <> b.FarmID)
                      OR (
                             a.FarmID IS NOT NULL
                             AND b.FarmID IS NULL
                         )
                      OR (
                             a.FarmID IS NULL
                             AND b.FarmID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       79320000000,
                       a.HerdID,
                       NULL,
                       b.EIDSSHerdID,
                       a.EIDSSHerdID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @FlocksOrHerdsAfterEdit AS a
                    FULL JOIN @FlocksOrHerdsBeforeEdit AS b
                        ON a.HerdID = b.HerdID
                WHERE (a.EIDSSHerdID <> b.EIDSSHerdID)
                      OR (
                             a.EIDSSHerdID IS NOT NULL
                             AND b.EIDSSHerdID IS NULL
                         )
                      OR (
                             a.EIDSSHerdID IS NULL
                             AND b.EIDSSHerdID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4572290000000,
                       a.HerdID,
                       NULL,
                       b.SickAnimalQuantity,
                       a.SickAnimalQuantity,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @FlocksOrHerdsAfterEdit AS a
                    FULL JOIN @FlocksOrHerdsBeforeEdit AS b
                        ON a.HerdID = b.HerdID
                WHERE (a.SickAnimalQuantity <> b.SickAnimalQuantity)
                      OR (
                             a.SickAnimalQuantity IS NOT NULL
                             AND b.SickAnimalQuantity IS NULL
                         )
                      OR (
                             a.SickAnimalQuantity IS NULL
                             AND b.SickAnimalQuantity IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       79310000000,
                       a.HerdID,
                       NULL,
                       b.TotalAnimalQuantity,
                       a.TotalAnimalQuantity,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @FlocksOrHerdsAfterEdit AS a
                    FULL JOIN @FlocksOrHerdsBeforeEdit AS b
                        ON a.HerdID = b.HerdID
                WHERE (a.TotalAnimalQuantity <> b.TotalAnimalQuantity)
                      OR (
                             a.TotalAnimalQuantity IS NOT NULL
                             AND b.TotalAnimalQuantity IS NULL
                         )
                      OR (
                             a.TotalAnimalQuantity IS NULL
                             AND b.TotalAnimalQuantity IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       79300000000,
                       a.HerdID,
                       NULL,
                       b.DeadAnimalQuantity,
                       a.DeadAnimalQuantity,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @FlocksOrHerdsAfterEdit AS a
                    FULL JOIN @FlocksOrHerdsBeforeEdit AS b
                        ON a.HerdID = b.HerdID
                WHERE (a.DeadAnimalQuantity <> b.DeadAnimalQuantity)
                      OR (
                             a.DeadAnimalQuantity IS NOT NULL
                             AND b.DeadAnimalQuantity IS NULL
                         )
                      OR (
                             a.DeadAnimalQuantity IS NULL
                             AND b.DeadAnimalQuantity IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4572300000000,
                       a.HerdID,
                       NULL,
                       b.Note,
                       a.Note,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @FlocksOrHerdsAfterEdit AS a
                    FULL JOIN @FlocksOrHerdsBeforeEdit AS b
                        ON a.HerdID = b.HerdID
                WHERE (a.Note <> b.Note)
                      OR (
                             a.Note IS NOT NULL
                             AND b.Note IS NULL
                         )
                      OR (
                             a.Note IS NULL
                             AND b.Note IS NOT NULL
                         );
            END
            ELSE
            BEGIN
                INSERT INTO dbo.tauDataAuditDetailDelete
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    AuditCreateUser,
                    strObject
                )
                VALUES
                (@DataAuditEventid, @ObjectTableID, @FlockOrHerdID, @AuditUserName, @EIDSSObjectID);
            END
        END;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating Procedure [dbo].[USSP_VET_PENSIDE_TESTS_SET]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- ================================================================================================
-- Name: USSP_VET_PENSIDE_TESTS_SET
--
-- Description:	Inserts or updates penside test for the avian and livestock veterinary disease 
-- report use cases.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     12/07/2022 Initial release with data audit logic for SAUC30 and 31.
-- ================================================================================================
CREATE PROCEDURE [dbo].[USSP_VET_PENSIDE_TESTS_SET]
(
    @AuditUserName NVARCHAR(200),
    @DataAuditEventID BIGINT = NULL,
    @EIDSSObjectID NVARCHAR(200) = NULL,
    @PensideTestID BIGINT OUTPUT,
    @SampleID BIGINT,
    @PensideTestResultTypeID BIGINT = NULL,
    @PensideTestNameTypeID BIGINT = NULL,
    @TestedByPersonID BIGINT = NULL,
    @TestedByOrganizationID BIGINT = NULL,
    @DiseaseID BIGINT = NULL,
    @TestDate DATETIME = NULL,
    @PensideTestCategoryTypeID BIGINT = NULL,
    @RowStatus INT,
    @RowAction INT
)
AS
DECLARE @AuditUserID BIGINT = NULL,
        @AuditSiteID BIGINT = NULL,
        @DataAuditEventTypeID BIGINT = NULL,
        @ObjectID BIGINT = NULL,
        @ObjectTableID BIGINT = 75680000000; -- tlbPensideTest
DECLARE @PensideTestsAfterEdit TABLE
(
    PensideTestID BIGINT,
    SampleID BIGINT,
    PensideTestResultTypeID BIGINT,
    PensideTestNameTypeID BIGINT,
    TestedByPersonID BIGINT,
    TestedByOfficeID BIGINT,
    DiseaseID BIGINT,
    TestDate DATETIME,
    PensideTestCategoryTypeID BIGINT
);
DECLARE @PensideTestsBeforeEdit TABLE
(
    PensideTestID BIGINT,
    SampleID BIGINT,
    PensideTestResultTypeID BIGINT,
    PensideTestNameTypeID BIGINT,
    TestedByPersonID BIGINT,
    TestedByOfficeID BIGINT,
    DiseaseID BIGINT,
    TestDate DATETIME,
    PensideTestCategoryTypeID BIGINT
);

BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        SET @AuditUserName = ISNULL(@AuditUserName, '');

        -- Data audit
        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = userInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo;

        IF @RowAction = 1 -- Insert
        BEGIN
            EXECUTE dbo.USP_GBL_NEXTKEYID_GET @tableName = 'tlbPensideTest',
                                              @idfsKey = @PensideTestID OUTPUT;

            INSERT INTO dbo.tlbPensideTest
            (
                idfPensideTest,
                idfMaterial,
                idfsPensideTestResult,
                idfsPensideTestName,
                intRowStatus,
                rowguid,
                idfTestedByPerson,
                idfTestedByOffice,
                idfsDiagnosis,
                datTestDate,
                idfsPensideTestCategory,
                strMaintenanceFlag,
                strReservedAttribute,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser,
                AuditCreateDTM,
                AuditUpdateUser,
                AuditUpdateDTM
            )
            VALUES
            (@PensideTestID,
             @SampleID,
             @PensideTestResultTypeID,
             @PensideTestNameTypeID,
             @RowStatus,
             NEWID(),
             @TestedByPersonID,
             @TestedByOrganizationID,
             @DiseaseID,
             @TestDate,
             @PensideTestCategoryTypeID,
             NULL,
             NULL,
             10519001,
             '[{"idfPensideTest":' + CAST(@PensideTestID AS NVARCHAR(300)) + '}]',
             @AuditUserName,
             GETDATE(),
             @AuditUserName,
             GETDATE()
            );

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailCreate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser,
                strObject
            )
            VALUES
            (@DataAuditEventID,
             @ObjectTableID,
             @PensideTestID,
             10519001,
             '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
             + CAST(@ObjectTableID AS NVARCHAR(300)) + '}]',
             @AuditUserName,
             @EIDSSObjectID
            );
        -- End data audit
        END
        ELSE
        BEGIN
            -- Data audit
            INSERT INTO @PensideTestsBeforeEdit
            (
                PensideTestID,
                SampleID,
                PensideTestResultTypeID,
                PensideTestNameTypeID,
                TestedByPersonID,
                TestedByOfficeID,
                DiseaseID,
                TestDate,
                PensideTestCategoryTypeID
            )
            SELECT idfPensideTest,
                   idfMaterial,
                   idfsPensideTestResult,
                   idfsPensideTestName,
                   idfTestedByPerson,
                   idfTestedByOffice,
                   idfsDiagnosis,
                   datTestDate,
                   idfsPensideTestCategory
            FROM dbo.tlbPensideTest
            WHERE idfPensideTest = @PensideTestID;
            -- End data audit

            UPDATE dbo.tlbPensideTest
            SET idfMaterial = @SampleID,
                idfsPensideTestResult = @PensideTestResultTypeID,
                idfsPensideTestName = @PensideTestNameTypeID,
                intRowStatus = @RowStatus,
                idfTestedByPerson = @TestedByPersonID,
                idfTestedByOffice = @TestedByOrganizationID,
                idfsDiagnosis = @DiseaseID,
                datTestDate = @TestDate,
                idfsPensideTestCategory = @PensideTestCategoryTypeID,
                AuditUpdateUser = @AuditUserName,
                AuditUpdateDTM = GETDATE()
            WHERE idfPensideTest = @PensideTestID;

            -- Data audit
            INSERT INTO @PensideTestsAfterEdit
            (
                PensideTestID,
                SampleID,
                PensideTestResultTypeID,
                PensideTestNameTypeID,
                TestedByPersonID,
                TestedByOfficeID,
                DiseaseID,
                TestDate,
                PensideTestCategoryTypeID
            )
            SELECT idfPensideTest,
                   idfMaterial,
                   idfsPensideTestResult,
                   idfsPensideTestName,
                   idfTestedByPerson,
                   idfTestedByOffice,
                   idfsDiagnosis,
                   datTestDate,
                   idfsPensideTestCategory
            FROM dbo.tlbPensideTest
            WHERE idfPensideTest = @PensideTestID;

            IF @RowStatus = 0
            BEGIN
                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4575130000000,
                       a.PensideTestID,
                       NULL,
                       b.SampleID,
                       a.SampleID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @PensideTestsAfterEdit AS a
                    FULL JOIN @PensideTestsBeforeEdit AS b
                        ON a.PensideTestID = b.PensideTestID
                WHERE (a.SampleID <> b.SampleID)
                      OR (
                             a.SampleID IS NOT NULL
                             AND b.SampleID IS NULL
                         )
                      OR (
                             a.SampleID IS NULL
                             AND b.SampleID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       80240000000,
                       a.PensideTestID,
                       NULL,
                       b.PensideTestResultTypeID,
                       a.PensideTestResultTypeID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @PensideTestsAfterEdit AS a
                    FULL JOIN @PensideTestsBeforeEdit AS b
                        ON a.PensideTestID = b.PensideTestID
                WHERE (a.PensideTestResultTypeID <> b.PensideTestResultTypeID)
                      OR (
                             a.PensideTestResultTypeID IS NOT NULL
                             AND b.PensideTestResultTypeID IS NULL
                         )
                      OR (
                             a.PensideTestResultTypeID IS NULL
                             AND b.PensideTestResultTypeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       49545450000000,
                       a.PensideTestID,
                       NULL,
                       b.PensideTestNameTypeID,
                       a.PensideTestNameTypeID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @PensideTestsAfterEdit AS a
                    FULL JOIN @PensideTestsBeforeEdit AS b
                        ON a.PensideTestID = b.PensideTestID
                WHERE (a.PensideTestNameTypeID <> b.PensideTestNameTypeID)
                      OR (
                             a.PensideTestNameTypeID IS NOT NULL
                             AND b.PensideTestNameTypeID IS NULL
                         )
                      OR (
                             a.PensideTestNameTypeID IS NULL
                             AND b.PensideTestNameTypeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4578630000000,
                       a.PensideTestID,
                       NULL,
                       b.TestedByPersonID,
                       a.TestedByPersonID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @PensideTestsAfterEdit AS a
                    FULL JOIN @PensideTestsBeforeEdit AS b
                        ON a.PensideTestID = b.PensideTestID
                WHERE (a.TestedByPersonID <> b.TestedByPersonID)
                      OR (
                             a.TestedByPersonID IS NOT NULL
                             AND b.TestedByPersonID IS NULL
                         )
                      OR (
                             a.TestedByPersonID IS NULL
                             AND b.TestedByPersonID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4575150000000,
                       a.PensideTestID,
                       NULL,
                       b.TestedByOfficeID,
                       a.TestedByOfficeID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @PensideTestsAfterEdit AS a
                    FULL JOIN @PensideTestsBeforeEdit AS b
                        ON a.PensideTestID = b.PensideTestID
                WHERE (a.TestedByOfficeID <> b.TestedByOfficeID)
                      OR (
                             a.TestedByOfficeID IS NOT NULL
                             AND b.TestedByOfficeID IS NULL
                         )
                      OR (
                             a.TestedByOfficeID IS NULL
                             AND b.TestedByOfficeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4575160000000,
                       a.PensideTestID,
                       NULL,
                       b.DiseaseID,
                       a.DiseaseID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @PensideTestsAfterEdit AS a
                    FULL JOIN @PensideTestsBeforeEdit AS b
                        ON a.PensideTestID = b.PensideTestID
                WHERE (a.DiseaseID <> b.DiseaseID)
                      OR (
                             a.DiseaseID IS NOT NULL
                             AND b.DiseaseID IS NULL
                         )
                      OR (
                             a.DiseaseID IS NULL
                             AND b.DiseaseID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4575170000000,
                       a.PensideTestID,
                       NULL,
                       b.TestDate,
                       a.TestDate,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @PensideTestsAfterEdit AS a
                    FULL JOIN @PensideTestsBeforeEdit AS b
                        ON a.PensideTestID = b.PensideTestID
                WHERE (a.TestDate <> b.TestDate)
                      OR (
                             a.TestDate IS NOT NULL
                             AND b.TestDate IS NULL
                         )
                      OR (
                             a.TestDate IS NULL
                             AND b.TestDate IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4578380000000,
                       a.PensideTestID,
                       NULL,
                       b.PensideTestCategoryTypeID,
                       a.PensideTestCategoryTypeID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @PensideTestsAfterEdit AS a
                    FULL JOIN @PensideTestsBeforeEdit AS b
                        ON a.PensideTestID = b.PensideTestID
                WHERE (a.PensideTestCategoryTypeID <> b.PensideTestCategoryTypeID)
                      OR (
                             a.PensideTestCategoryTypeID IS NOT NULL
                             AND b.PensideTestCategoryTypeID IS NULL
                         )
                      OR (
                             a.PensideTestCategoryTypeID IS NULL
                             AND b.PensideTestCategoryTypeID IS NOT NULL
                         );
            END
            ELSE
            BEGIN
                INSERT INTO dbo.tauDataAuditDetailDelete
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    AuditCreateUser,
                    strObject
                )
                VALUES
                (@DataAuditEventid, @ObjectTableID, @PensideTestID, @AuditUserName, @EIDSSObjectID);
            END
        END
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating Procedure [dbo].[USSP_VET_SPECIES_WITH_AUDITING_SET]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- ================================================================================================
-- Name: USSP_VET_SPECIES_WITH_AUDITING_SET
--
-- Description:	Inserts or updates species for the veterinary disease report and monitoring 
-- session use cases.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     12/07/2022 Initial release with data audit logic for SAUC30 and 31.
-- ================================================================================================
CREATE PROCEDURE [dbo].[USSP_VET_SPECIES_WITH_AUDITING_SET]
(
    @AuditUserName NVARCHAR(200),
    @DataAuditEventID BIGINT = NULL,
    @EIDSSObjectID NVARCHAR(200) = NULL,
    @SpeciesID BIGINT = NULL OUTPUT,
    @SpeciesMasterID BIGINT = NULL,
    @SpeciesTypeID BIGINT,
    @HerdID BIGINT = NULL,
    @ObservationID BIGINT = NULL,
    @StartOfSignsDate DATETIME = NULL,
    @AverageAge NVARCHAR(200) = NULL,
    @SickAnimalQuantity INT = NULL,
    @TotalAnimalQuantity INT = NULL,
    @DeadAnimalQuantity INT = NULL,
    @Comments NVARCHAR(2000) = NULL,
    @RowStatus INT,
    @RowAction INT,
    @OutbreakStatusTypeID BIGINT = NULL
)
AS
DECLARE @AuditUserID BIGINT = NULL,
        @AuditSiteID BIGINT = NULL,
        @DataAuditEventTypeID BIGINT = NULL,
        @ObjectID BIGINT = NULL,
        @ObjectTableID BIGINT = 75710000000,                   -- tlbSpecies
        @ObjectActivityParametersTableID BIGINT = 75410000000, -- tlbActivityParameters
        @ObjectObservationTableID BIGINT = 75640000000;        -- tlbObservation
DECLARE @SpeciesAfterEdit TABLE
(
    SpeciesID BIGINT,
    SpeciesActualID BIGINT,
    SpeciesTypeID BIGINT,
    HerdID BIGINT,
    ObservationID BIGINT,
    StartOfSignsDate DATETIME,
    AverageAge NVARCHAR(200),
    SickAnimalQuantity INT,
    TotalAnimalQuantity INT,
    DeadAnimalQuantity INT,
    Note NVARCHAR(2000)
);
DECLARE @SpeciesBeforeEdit TABLE
(
    SpeciesID BIGINT,
    SpeciesActualID BIGINT,
    SpeciesTypeID BIGINT,
    HerdID BIGINT,
    ObservationID BIGINT,
    StartOfSignsDate DATETIME,
    AverageAge NVARCHAR(200),
    SickAnimalQuantity INT,
    TotalAnimalQuantity INT,
    DeadAnimalQuantity INT,
    Note NVARCHAR(2000)
);

BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        SET @AuditUserName = ISNULL(@AuditUserName, '');

        -- Data audit
        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = userInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo;

        IF @RowAction = 1
        BEGIN
            EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tlbSpecies', @SpeciesID OUTPUT;

            INSERT INTO dbo.tlbSpecies
            (
                idfSpecies,
                idfSpeciesActual,
                idfsSpeciesType,
                idfHerd,
                idfObservation,
                datStartOfSignsDate,
                strAverageAge,
                intSickAnimalQty,
                intTotalAnimalQty,
                intDeadAnimalQty,
                strNote,
                intRowStatus,
                idfsOutbreakCaseStatus,
                AuditCreateDTM,
                AuditCreateUser,
                SourceSystemNameID,
                SourceSystemKeyValue
            )
            VALUES
            (@SpeciesID,
             @SpeciesMasterID,
             @SpeciesTypeID,
             @HerdID,
             @ObservationID,
             @StartOfSignsDate,
             @AverageAge,
             @SickAnimalQuantity,
             @TotalAnimalQuantity,
             @DeadAnimalQuantity,
             @Comments,
             @RowStatus,
             @OutbreakStatusTypeID,
             GETDATE(),
             @AuditUserName,
             10519001,
             '[{"idfSpecies":' + CAST(@SpeciesID AS NVARCHAR(300)) + '}]'
            );

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailCreate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser,
                strObject
            )
            VALUES
            (@DataAuditEventID,
             @ObjectTableID,
             @SpeciesID,
             10519001,
             '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
             + CAST(@ObjectTableID AS NVARCHAR(300)) + '}]',
             @AuditUserName,
             @EIDSSObjectID
            );

            -- Update data audit event ID on tlbObservation and tlbActivityParameters
            -- for flexible forms saved outside this DB transaction.
            UPDATE dbo.tauDataAuditDetailCreate
            SET idfDataAuditEvent = @DataAuditEventID,
                strObject = @EIDSSObjectID
            WHERE idfObject = @ObservationID
                  AND idfDataAuditEvent IS NULL;
        -- End data audit
        END
        ELSE
        BEGIN
            -- Data audit
            INSERT INTO @SpeciesBeforeEdit
            (
                SpeciesID,
                SpeciesActualID,
                SpeciesTypeID,
                HerdID,
                ObservationID,
                StartOfSignsDate,
                AverageAge,
                SickAnimalQuantity,
                TotalAnimalQuantity,
                DeadAnimalQuantity,
                Note
            )
            SELECT idfSpecies,
                   idfSpeciesActual,
                   idfsSpeciesType,
                   idfHerd,
                   idfObservation,
                   datStartOfSignsDate,
                   strAverageAge,
                   intSickAnimalQty,
                   intTotalAnimalQty,
                   intDeadAnimalQty,
                   strNote
            FROM dbo.tlbSpecies
            WHERE idfSpecies = @SpeciesID;
            -- End data audit

            UPDATE dbo.tlbSpecies
            SET idfSpeciesActual = @SpeciesMasterID,
                idfsSpeciesType = @SpeciesTypeID,
                idfHerd = @HerdID,
                idfObservation = @ObservationID,
                datStartOfSignsDate = @StartOfSignsDate,
                strAverageAge = @AverageAge,
                intSickAnimalQty = @SickAnimalQuantity,
                intTotalAnimalQty = @TotalAnimalQuantity,
                intDeadAnimalQty = @DeadAnimalQuantity,
                strNote = @Comments,
                intRowStatus = @RowStatus,
                idfsOutbreakCaseStatus = @OutbreakStatusTypeID,
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUserName
            WHERE idfSpecies = @SpeciesID;

            -- Data audit
            INSERT INTO @SpeciesAfterEdit
            (
                SpeciesID,
                SpeciesActualID,
                SpeciesTypeID,
                HerdID,
                ObservationID,
                StartOfSignsDate,
                AverageAge,
                SickAnimalQuantity,
                TotalAnimalQuantity,
                DeadAnimalQuantity,
                Note
            )
            SELECT idfSpecies,
                   idfSpeciesActual,
                   idfsSpeciesType,
                   idfHerd,
                   idfObservation,
                   datStartOfSignsDate,
                   strAverageAge,
                   intSickAnimalQty,
                   intTotalAnimalQty,
                   intDeadAnimalQty,
                   strNote
            FROM dbo.tlbSpecies
            WHERE idfSpecies = @SpeciesID;
            -- End data audit

            IF @ObservationID IS NOT NULL -- Species clinical investigation form
            BEGIN
                UPDATE dbo.tlbObservation
                SET intRowStatus = @RowStatus,
                    AuditUpdateDTM = GETDATE(),
                    AuditUpdateUser = @AuditUserName
                WHERE idfObservation = @ObservationID;

                UPDATE dbo.tlbActivityParameters
                SET intRowStatus = @RowStatus,
                    AuditUpdateDTM = GETDATE(),
                    AuditUpdateUser = @AuditUserName
                WHERE idfObservation = @ObservationID;

                -- Update data audit event ID on tlbObservation and tlbActivityParameters
                -- for flexible forms saved outside this DB transaction.
                UPDATE dbo.tauDataAuditDetailCreate
                SET idfDataAuditEvent = @DataAuditEventID,
                    strObject = @EIDSSObjectID
                WHERE idfObject = @ObservationID
                      AND idfDataAuditEvent IS NULL;
            END;

            IF @RowStatus = 0
            BEGIN
                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4572330000000,
                       a.SpeciesID,
                       NULL,
                       b.SpeciesActualID,
                       a.SpeciesActualID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @SpeciesAfterEdit AS a
                    FULL JOIN @SpeciesBeforeEdit AS b
                        ON a.SpeciesID = b.SpeciesID
                WHERE (a.SpeciesActualID <> b.SpeciesActualID)
                      OR (
                             a.SpeciesActualID IS NOT NULL
                             AND b.SpeciesActualID IS NULL
                         )
                      OR (
                             a.SpeciesActualID IS NULL
                             AND b.SpeciesActualID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4572340000000,
                       a.SpeciesID,
                       NULL,
                       b.SpeciesTypeID,
                       a.SpeciesTypeID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @SpeciesAfterEdit AS a
                    FULL JOIN @SpeciesBeforeEdit AS b
                        ON a.SpeciesID = b.SpeciesID
                WHERE (a.SpeciesTypeID <> b.SpeciesTypeID)
                      OR (
                             a.SpeciesTypeID IS NOT NULL
                             AND b.SpeciesTypeID IS NULL
                         )
                      OR (
                             a.SpeciesTypeID IS NULL
                             AND b.SpeciesTypeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4572350000000,
                       a.SpeciesID,
                       NULL,
                       b.HerdID,
                       a.HerdID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @SpeciesAfterEdit AS a
                    FULL JOIN @SpeciesBeforeEdit AS b
                        ON a.SpeciesID = b.SpeciesID
                WHERE (a.HerdID <> b.HerdID)
                      OR (
                             a.HerdID IS NOT NULL
                             AND b.HerdID IS NULL
                         )
                      OR (
                             a.HerdID IS NULL
                             AND b.HerdID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4572360000000,
                       a.SpeciesID,
                       NULL,
                       b.ObservationID,
                       a.ObservationID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @SpeciesAfterEdit AS a
                    FULL JOIN @SpeciesBeforeEdit AS b
                        ON a.SpeciesID = b.SpeciesID
                WHERE (a.ObservationID <> b.ObservationID)
                      OR (
                             a.ObservationID IS NOT NULL
                             AND b.ObservationID IS NULL
                         )
                      OR (
                             a.ObservationID IS NULL
                             AND b.ObservationID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4572370000000,
                       a.SpeciesID,
                       NULL,
                       b.StartOfSignsDate,
                       a.StartOfSignsDate,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @SpeciesAfterEdit AS a
                    FULL JOIN @SpeciesBeforeEdit AS b
                        ON a.SpeciesID = b.SpeciesID
                WHERE (a.StartOfSignsDate <> b.StartOfSignsDate)
                      OR (
                             a.StartOfSignsDate IS NOT NULL
                             AND b.StartOfSignsDate IS NULL
                         )
                      OR (
                             a.StartOfSignsDate IS NULL
                             AND b.StartOfSignsDate IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4572380000000,
                       a.SpeciesID,
                       NULL,
                       b.AverageAge,
                       a.AverageAge,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @SpeciesAfterEdit AS a
                    FULL JOIN @SpeciesBeforeEdit AS b
                        ON a.SpeciesID = b.SpeciesID
                WHERE (a.AverageAge <> b.AverageAge)
                      OR (
                             a.AverageAge IS NOT NULL
                             AND b.AverageAge IS NULL
                         )
                      OR (
                             a.AverageAge IS NULL
                             AND b.AverageAge IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4572390000000,
                       a.SpeciesID,
                       NULL,
                       b.SickAnimalQuantity,
                       a.SickAnimalQuantity,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @SpeciesAfterEdit AS a
                    FULL JOIN @SpeciesBeforeEdit AS b
                        ON a.SpeciesID = b.SpeciesID
                WHERE (a.SickAnimalQuantity <> b.SickAnimalQuantity)
                      OR (
                             a.SickAnimalQuantity IS NOT NULL
                             AND b.SickAnimalQuantity IS NULL
                         )
                      OR (
                             a.SickAnimalQuantity IS NULL
                             AND b.SickAnimalQuantity IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4572400000000,
                       a.SpeciesID,
                       NULL,
                       b.TotalAnimalQuantity,
                       a.TotalAnimalQuantity,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @SpeciesAfterEdit AS a
                    FULL JOIN @SpeciesBeforeEdit AS b
                        ON a.SpeciesID = b.SpeciesID
                WHERE (a.TotalAnimalQuantity <> b.TotalAnimalQuantity)
                      OR (
                             a.TotalAnimalQuantity IS NOT NULL
                             AND b.TotalAnimalQuantity IS NULL
                         )
                      OR (
                             a.TotalAnimalQuantity IS NULL
                             AND b.TotalAnimalQuantity IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4572410000000,
                       a.SpeciesID,
                       NULL,
                       b.DeadAnimalQuantity,
                       a.DeadAnimalQuantity,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @SpeciesAfterEdit AS a
                    FULL JOIN @SpeciesBeforeEdit AS b
                        ON a.SpeciesID = b.SpeciesID
                WHERE (a.DeadAnimalQuantity <> b.DeadAnimalQuantity)
                      OR (
                             a.DeadAnimalQuantity IS NOT NULL
                             AND b.DeadAnimalQuantity IS NULL
                         )
                      OR (
                             a.DeadAnimalQuantity IS NULL
                             AND b.DeadAnimalQuantity IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4572420000000,
                       a.SpeciesID,
                       NULL,
                       b.Note,
                       a.Note,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @SpeciesAfterEdit AS a
                    FULL JOIN @SpeciesBeforeEdit AS b
                        ON a.SpeciesID = b.SpeciesID
                WHERE (a.Note <> b.Note)
                      OR (
                             a.Note IS NOT NULL
                             AND b.Note IS NULL
                         )
                      OR (
                             a.Note IS NULL
                             AND b.Note IS NOT NULL
                         );
            END
            ELSE
            BEGIN
                IF @ObservationID IS NOT NULL
                BEGIN
                    UPDATE dbo.tlbActivityParameters
                    SET intRowStatus = 1
                    WHERE idfObservation = @ObservationID
                          AND intRowStatus = 0;

                    -- Data audit
                    INSERT INTO dbo.tauDataAuditDetailDelete
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfObject,
                        AuditCreateUser,
                        strObject
                    )
                    SELECT @DataAuditEventID,
                           @ObjectActivityParametersTableID,
                           idfActivityParameters,
                           @AuditUserName,
                           @EIDSSObjectID
                    FROM dbo.tlbActivityParameters
                    WHERE idfObservation = @ObservationID
                          AND intRowStatus = 1;
                    -- End data audit

                    UPDATE dbo.tlbObservation
                    SET intRowStatus = 1
                    WHERE idfObservation = @ObservationID;

                    -- Data audit
                    INSERT INTO dbo.tauDataAuditDetailDelete
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfObject,
                        AuditCreateUser,
                        strObject
                    )
                    SELECT @DataAuditEventID,
                           @ObjectObservationTableID,
                           @ObservationID,
                           @AuditUserName,
                           @EIDSSObjectID;
                --End data audit
                END

                INSERT INTO dbo.tauDataAuditDetailDelete
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    AuditCreateUser,
                    strObject
                )
                VALUES
                (@DataAuditEventid, @ObjectTableID, @SpeciesID, @AuditUserName, @EIDSSObjectID);
            END
        END;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating Procedure [dbo].[USSP_VET_VACCINATIONS_SET]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- ================================================================================================
-- Name: USSP_VET_VACCINATIONS_SET
--
-- Description:	Inserts or updates vaccination info for the veterinary disease report use cases.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     12/07/2022 Initial release with data audit logic for SAUC30 and 31.
-- ================================================================================================
CREATE PROCEDURE [dbo].[USSP_VET_VACCINATIONS_SET]
(
    @AuditUserName NVARCHAR(200),
    @DataAuditEventID BIGINT = NULL,
    @EIDSSObjectID NVARCHAR(200) = NULL,
    @VaccinationID BIGINT OUTPUT,
    @VeterinaryDieaseReportID BIGINT,
    @SpeciesID BIGINT = NULL,
    @VaccinationTypeID BIGINT = NULL,
    @VaccinationRouteTypeID BIGINT = NULL,
    @DiseaseID BIGINT = NULL,
    @VaccinationDate DATETIME = NULL,
    @Manufacturer NVARCHAR(200) = NULL,
    @LotNumber NVARCHAR(200) = NULL,
    @NumberVaccinated INT = NULL,
    @Comments NVARCHAR(2000) = NULL,
    @RowStatus INT,
    @RowAction INT
)
AS
DECLARE @AuditUserID BIGINT = NULL,
        @AuditSiteID BIGINT = NULL,
        @DataAuditEventTypeID BIGINT = NULL,
        @ObjectID BIGINT = NULL,
        @ObjectTableID BIGINT = 75790000000; -- tlbVaccination
DECLARE @VaccinationsAfterEdit TABLE
(
    VaccinationID BIGINT,
    DiseaseReportID BIGINT,
    SpeciesID BIGINT,
    VaccinationTypeID BIGINT,
    VaccinationRouteTypeID BIGINT,
    DiseaseID BIGINT,
    VaccinationDate DATETIME,
    Manufacturer NVARCHAR(200),
    LotNumber NVARCHAR(200),
    NumberVaccinated INT,
    Note NVARCHAR(2000)
);
DECLARE @VaccinationsBeforeEdit TABLE
(
    VaccinationID BIGINT,
    DiseaseReportID BIGINT,
    SpeciesID BIGINT,
    VaccinationTypeID BIGINT,
    VaccinationRouteTypeID BIGINT,
    DiseaseID BIGINT,
    VaccinationDate DATETIME,
    Manufacturer NVARCHAR(200),
    LotNumber NVARCHAR(200),
    NumberVaccinated INT,
    Note NVARCHAR(2000)
);
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        SET @AuditUserName = ISNULL(@AuditUserName, '');

        -- Data audit
        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = userInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo;

        IF @RowAction = 1 -- Insert
        BEGIN
            EXEC dbo.USP_GBL_NEXTKEYID_GET @tableName = 'tlbVaccination',
                                           @idfsKey = @VaccinationID OUTPUT;

            INSERT INTO dbo.tlbVaccination
            (
                idfVaccination,
                idfVetCase,
                idfSpecies,
                idfsVaccinationType,
                idfsVaccinationRoute,
                idfsDiagnosis,
                datVaccinationDate,
                strManufacturer,
                strLotNumber,
                intNumberVaccinated,
                strNote,
                intRowStatus,
                rowguid,
                strMaintenanceFlag,
                strReservedAttribute,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser,
                AuditCreateDTM,
                AuditUpdateUser,
                AuditUpdateDTM
            )
            VALUES
            (@VaccinationID,
             @VeterinaryDieaseReportID,
             @SpeciesID,
             @VaccinationTypeID,
             @VaccinationRouteTypeID,
             @DiseaseID,
             @VaccinationDate,
             @Manufacturer,
             @LotNumber,
             @NumberVaccinated,
             @Comments,
             @RowStatus,
             NEWID(),
             NULL,
             NULL,
             10519001,
             '[{"idfVaccination":' + CAST(@VaccinationID AS NVARCHAR(300)) + '}]',
             @AuditUserName,
             GETDATE(),
             @AuditUserName,
             GETDATE()
            );

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailCreate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser,
                strObject
            )
            VALUES
            (@DataAuditEventID,
             @ObjectTableID,
             @VaccinationID,
             10519001,
             '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
             + CAST(@ObjectTableID AS NVARCHAR(300)) + '}]',
             @AuditUserName,
             @EIDSSObjectID
            );
        -- End data audit
        END
        ELSE
        BEGIN
            -- Data audit
            INSERT INTO @VaccinationsBeforeEdit
            (
                VaccinationID,
                DiseaseReportID,
                SpeciesID,
                VaccinationTypeID,
                VaccinationRouteTypeID,
                DiseaseID,
                VaccinationDate,
                Manufacturer,
                LotNumber,
                NumberVaccinated,
                Note
            )
            SELECT idfVaccination,
                   idfVetCase,
                   idfSpecies,
                   idfsVaccinationType,
                   idfsVaccinationRoute,
                   idfsDiagnosis,
                   datVaccinationDate,
                   strManufacturer,
                   strLotNumber,
                   intNumberVaccinated,
                   strNote
            FROM dbo.tlbVaccination
            WHERE idfVaccination = @VaccinationID;
            -- End data audit

            UPDATE dbo.tlbVaccination
            SET idfVetCase = @VeterinaryDieaseReportID,
                idfSpecies = @SpeciesID,
                idfsVaccinationType = @VaccinationTypeID,
                idfsVaccinationRoute = @VaccinationRouteTypeID,
                idfsDiagnosis = @DiseaseID,
                datVaccinationDate = @VaccinationDate,
                strManufacturer = @Manufacturer,
                strLotNumber = @LotNumber,
                intNumberVaccinated = @NumberVaccinated,
                strNote = @Comments,
                intRowStatus = @RowStatus,
                AuditUpdateUser = @AuditUserName,
                AuditUpdateDTM = GETDATE()
            WHERE idfVaccination = @VaccinationID;

            -- Data audit
            INSERT INTO @VaccinationsAfterEdit
            (
                VaccinationID,
                DiseaseReportID,
                SpeciesID,
                VaccinationTypeID,
                VaccinationRouteTypeID,
                DiseaseID,
                VaccinationDate,
                Manufacturer,
                LotNumber,
                NumberVaccinated,
                Note
            )
            SELECT idfVaccination,
                   idfVetCase,
                   idfSpecies,
                   idfsVaccinationType,
                   idfsVaccinationRoute,
                   idfsDiagnosis,
                   datVaccinationDate,
                   strManufacturer,
                   strLotNumber,
                   intNumberVaccinated,
                   strNote
            FROM dbo.tlbVaccination
            WHERE idfVaccination = @VaccinationID;

            IF @RowStatus = 0
            BEGIN
                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4577960000000,
                       a.VaccinationID,
                       NULL,
                       b.DiseaseReportID,
                       a.DiseaseReportID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @VaccinationsAfterEdit AS a
                    FULL JOIN @VaccinationsBeforeEdit AS b
                        ON a.VaccinationID = b.VaccinationID
                WHERE (a.DiseaseReportID <> b.DiseaseReportID)
                      OR (
                             a.DiseaseReportID IS NOT NULL
                             AND b.DiseaseReportID IS NULL
                         )
                      OR (
                             a.DiseaseReportID IS NULL
                             AND b.DiseaseReportID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4577970000000,
                       a.VaccinationID,
                       NULL,
                       b.SpeciesID,
                       a.SpeciesID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @VaccinationsAfterEdit AS a
                    FULL JOIN @VaccinationsBeforeEdit AS b
                        ON a.VaccinationID = b.VaccinationID
                WHERE (a.SpeciesID <> b.SpeciesID)
                      OR (
                             a.SpeciesID IS NOT NULL
                             AND b.SpeciesID IS NULL
                         )
                      OR (
                             a.SpeciesID IS NULL
                             AND b.SpeciesID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       80800000000,
                       a.VaccinationID,
                       NULL,
                       b.VaccinationTypeID,
                       a.VaccinationTypeID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @VaccinationsAfterEdit AS a
                    FULL JOIN @VaccinationsBeforeEdit AS b
                        ON a.VaccinationID = b.VaccinationID
                WHERE (a.VaccinationTypeID <> b.VaccinationTypeID)
                      OR (
                             a.VaccinationTypeID IS NOT NULL
                             AND b.VaccinationTypeID IS NULL
                         )
                      OR (
                             a.VaccinationTypeID IS NULL
                             AND b.VaccinationTypeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4577980000000,
                       a.VaccinationID,
                       NULL,
                       b.VaccinationRouteTypeID,
                       a.VaccinationRouteTypeID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @VaccinationsAfterEdit AS a
                    FULL JOIN @VaccinationsBeforeEdit AS b
                        ON a.VaccinationID = b.VaccinationID
                WHERE (a.VaccinationRouteTypeID <> b.VaccinationRouteTypeID)
                      OR (
                             a.VaccinationRouteTypeID IS NOT NULL
                             AND b.VaccinationRouteTypeID IS NULL
                         )
                      OR (
                             a.VaccinationRouteTypeID IS NULL
                             AND b.VaccinationRouteTypeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       80790000000,
                       a.VaccinationID,
                       NULL,
                       b.DiseaseID,
                       a.DiseaseID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @VaccinationsAfterEdit AS a
                    FULL JOIN @VaccinationsBeforeEdit AS b
                        ON a.VaccinationID = b.VaccinationID
                WHERE (a.DiseaseID <> b.DiseaseID)
                      OR (
                             a.DiseaseID IS NOT NULL
                             AND b.DiseaseID IS NULL
                         )
                      OR (
                             a.DiseaseID IS NULL
                             AND b.DiseaseID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       80780000000,
                       a.VaccinationID,
                       NULL,
                       b.VaccinationDate,
                       a.VaccinationDate,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @VaccinationsAfterEdit AS a
                    FULL JOIN @VaccinationsBeforeEdit AS b
                        ON a.VaccinationID = b.VaccinationID
                WHERE (a.VaccinationDate <> b.VaccinationDate)
                      OR (
                             a.VaccinationDate IS NOT NULL
                             AND b.VaccinationDate IS NULL
                         )
                      OR (
                             a.VaccinationDate IS NULL
                             AND b.VaccinationDate IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       80840000000,
                       a.VaccinationID,
                       NULL,
                       b.Manufacturer,
                       a.Manufacturer,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @VaccinationsAfterEdit AS a
                    FULL JOIN @VaccinationsBeforeEdit AS b
                        ON a.VaccinationID = b.VaccinationID
                WHERE (a.Manufacturer <> b.Manufacturer)
                      OR (
                             a.Manufacturer IS NOT NULL
                             AND b.Manufacturer IS NULL
                         )
                      OR (
                             a.Manufacturer IS NULL
                             AND b.Manufacturer IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       80830000000,
                       a.VaccinationID,
                       NULL,
                       b.LotNumber,
                       a.LotNumber,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @VaccinationsAfterEdit AS a
                    FULL JOIN @VaccinationsBeforeEdit AS b
                        ON a.VaccinationID = b.VaccinationID
                WHERE (a.LotNumber <> b.LotNumber)
                      OR (
                             a.LotNumber IS NOT NULL
                             AND b.LotNumber IS NULL
                         )
                      OR (
                             a.LotNumber IS NULL
                             AND b.LotNumber IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       80820000000,
                       a.VaccinationID,
                       NULL,
                       b.NumberVaccinated,
                       a.NumberVaccinated,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @VaccinationsAfterEdit AS a
                    FULL JOIN @VaccinationsBeforeEdit AS b
                        ON a.VaccinationID = b.VaccinationID
                WHERE (a.NumberVaccinated <> b.NumberVaccinated)
                      OR (
                             a.NumberVaccinated IS NOT NULL
                             AND b.NumberVaccinated IS NULL
                         )
                      OR (
                             a.NumberVaccinated IS NULL
                             AND b.NumberVaccinated IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4577990000000,
                       a.VaccinationID,
                       NULL,
                       b.Note,
                       a.Note,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @VaccinationsAfterEdit AS a
                    FULL JOIN @VaccinationsBeforeEdit AS b
                        ON a.VaccinationID = b.VaccinationID
                WHERE (a.Note <> b.Note)
                      OR (
                             a.Note IS NOT NULL
                             AND b.Note IS NULL
                         )
                      OR (
                             a.Note IS NULL
                             AND b.Note IS NOT NULL
                         );
            END
            ELSE
            BEGIN
                INSERT INTO dbo.tauDataAuditDetailDelete
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    AuditCreateUser,
                    strObject
                )
                VALUES
                (@DataAuditEventid, @ObjectTableID, @VaccinationID, @AuditUserName, @EIDSSObjectID);
            END
        END;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering Procedure [dbo].[USP_AGG_REPORT_DELETE]...';


GO


-- ================================================================================================
-- Name: USP_AGG_REPORT_DELETE
--
-- Description: Deletes aggregate actions object.
--          
-- Author: Mike Kornegay
--
-- Revision History:
--		Name       Date       Change Detail
-- --------------- ---------- --------------------------------------------------------------------
-- Mike Kornegay   04/08/2022 Original
-- Manickandan Govindarajan 12/06/2022 DataAudit SAUC30 and 31
--
-- Testing code: 
/*
	DECLARE @ID BIGINT = 34390000806
	EXECUTE USP_AGG_REPORT_DELETE  @ID, 'rykermase'

*/
--	@ID is AggregateCaseID
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_AGG_REPORT_DELETE]
(	
	@ID AS BIGINT,
	@User NVARCHAR(100) = NULL
)
AS
DECLARE @ReturnCode INT = 0; 
DECLARE	@ReturnMessage NVARCHAR(MAX) = 'SUCCESS'; 
DECLARE @idfDiagnosticObservation BIGINT;
DECLARE @idfProphylacticObservation BIGINT;
DECLARE @idfSanitaryObservation BIGINT;
--dataAudit
declare @idfsDataAuditEventType bigint =10016002;
declare @idfsObjectType bigint ;
declare @idfObject bigint =@ID;
declare @idfObjectTable_tlbAggrCase bigint =75420000000;
declare @idfDataAuditEvent bigint;
declare @campaignCategoryId bigint;
declare @idfUserID bigint;
declare @idfSiteId bigint;
declare @idfObjectTable_tlbCampaignToDiagnosis bigint =707000000000;
declare @aggrTypeId bigint;
DECLARE @SuppressSelect TABLE
(
    ReturnCode INT,
    ReturnMessage VARCHAR(200)
);

--dataudit

BEGIN
	
	BEGIN TRANSACTION;
	
	BEGIN TRY
		
		--Data Audit

		select @aggrTypeId= idfsAggrCaseType  from tlbAggrCase where idfAggrCase = @ID;
		if @aggrTypeId = 10102001
			set @idfsObjectType=10017006;
		ELSE IF @aggrTypeId = 10102003
			set @idfsObjectType=10017005;
		
		--Data Audit

		
		SELECT @idfDiagnosticObservation = idfDiagnosticObservation
		FROM dbo.tlbAggrCase
		WHERE idfAggrCase = @ID;

		SELECT @idfProphylacticObservation = idfProphylacticObservation
		FROM dbo.tlbAggrCase
		WHERE idfAggrCase = @ID;

		SELECT @idfSanitaryObservation = idfSanitaryObservation
		FROM dbo.tlbAggrCase
		WHERE idfAggrCase = @ID;

		BEGIN
			DELETE FROM dbo.tflAggrCaseFiltered 
			WHERE idfAggrCase = @ID;

			--Data Audit
				select @idfUserID= a.userid, @idfSiteId= a.siteid from dbo.FN_UserSiteInformation(@User) a;
			-- insert record into tauDataAuditEvent
				INSERT INTO @SuppressSelect
				EXEC USSP_GBL_DataAuditEvent_GET @idfUserID,@idfSiteId, @idfsDataAuditEventType,@idfsObjectType,@idfObject, @idfObjectTable_tlbAggrCase, @idfDataAuditEvent OUTPUT
			-- insert into delete 

			
			INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject )
				SELECT @idfDataAuditEvent, @idfObjectTable_tlbCampaignToDiagnosis, idfAggrCase
				 from dbo.tlbAggrCase WHERE idfAggrCase = @Id;
			--Data Audit

			UPDATE dbo.tlbAggrCase
			SET intRowStatus = 1,
				AuditUpdateUser = @User,
				AuditUpdateDTM = GETDATE()
			WHERE idfAggrCase = @ID;

			EXEC dbo.USP_OBSERVATION_DELETE
				@ID = @idfDiagnosticObservation,
				@User = @User, @idfDataAuditEvent=@idfDataAuditEvent

			EXEC dbo.USP_OBSERVATION_DELETE
				@ID = @idfProphylacticObservation,
				@User = @User, @idfDataAuditEvent=@idfDataAuditEvent

			EXEC dbo.USP_OBSERVATION_DELETE
				@ID = @idfSanitaryObservation,
				@User = @User, @idfDataAuditEvent=@idfDataAuditEvent
		END

		IF @@TRANCOUNT > 0
			AND @ReturnCode = 0
			COMMIT;

		SELECT @ReturnCode ReturnCode
			,@ReturnMessage ReturnMessage;

	END TRY

	BEGIN CATCH
		IF @@TRANCOUNT > 0
			ROLLBACK TRANSACTION;

		SET @ReturnCode = ERROR_NUMBER();
		SET @ReturnMessage = ERROR_MESSAGE();

		SELECT @ReturnCode ReturnCode
			,@ReturnMessage ReturnMessage;

		THROW;
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_HAS_MONITORING_SESSION_SET]...';


GO
-- ================================================================================================
-- Name: USP_HAS_MONITORING_SESSION_SET
--
-- Description: Insert/update for monitoring session records for the human module.
--          
-- Revision History:
-- Name				Date	   Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long		07/06/2019 Initial release.
-- Ann Xiong		01/17/2020 Fixed an issue in Persons & Samples grid where saving a new row 
--                             will change the Person ID of several previous rows to be the same 
--                             as the newly added row.
-- Stephen Long		03/09/2020 Added current site ID to the update sample set call.
-- Ann Xiong		03/20/2020 Added the following information from the AS Session to the new 
--								Disease Report:
--								Disease Report field “Report Status” – “In progress”	
--								Disease Report field “Case classification” field - <blank>
--								Disease Report field “Report Type” – “Active”
--								Disease Report field “Entered by Name” with the user name who 
--                              created this Disease Report
--								Disease Report field “Date Entered” with the current date when 
--                              this Disease Report was created
-- Ann Xiong		03/30/2020 Update SET idfHumanCase in tlbMaterial and set 
--							   idfsYNSpecimenCollected and idfsYNTestsConducted.
-- Ann Xiong		04/14/2020 Changed to use "SSH" prefix instead of SSV for Human Active 
--							   Surveillance Session.
-- Stephen Long		12/20/2020 Updated USSP_GBL_TEST_SET call with four new parameters.
-- Doug Albanese	01/12/2022 Refactored, due to table change for storing multiple disease 
--                             against a session.  Added supress to an EXECUTE statement that was 
--                             preventing EF from generating a return model
-- Doug Albanese	01/13/2022 Refactored to use new location hierarchy
-- Doug Albanese	01/14/2022 Refactoring json conversion tables to not require PKs, until 
--                             automatically generated
-- Doug Albanese	01/18/2022 Clean up of "collections" to include required fields for foreign 
--                             records
-- Doug Albanese	01/24/2022 Final refactoring for successful save from the app.
-- Doug Albanese	02/02/2022 Minor refactoring to save SampleId to Tests collection
-- Doug Albanese	03/25/2022 Updated to make use of "RowAction" on the disease combination
-- Doug Albanese	05/23/2022 Removed idfsCurrentSite, to prevent clashing with lab.
-- Doug Albanese	06/16/2022 Changed out the value used for NonLaboratoryTestIndicator from 0 to 
--                             1
-- Doug Albanese	06/16/2022 Added "Notifications" for processing, and User ID for auditing 
--                             purposes
-- Stephen Long     07/06/2022 Updates for site alerts to call new stored procedure.
--	Doug Albanese	07/19/2022	Corrected the enumeration of multiple site alerts
--	Doug Albanese	08/01/2022	Added a replacement feature of the word "New", to have the EIDSS Session ID, in place.
--	Doug Albanese	08/26/2022	Adjusted supression, because of changes made to USSP_GBL_SAMPLE_SET
-- Doug Albanese	 10/17/2022	 Added a condition to pick up any idfHumancase ids that belong to an existing Test to maintain the "Connected" status.
-- Stephen Long     10/18/2022 Added samples to diseases parameter and logic.
-- Leo Tracchia		12/5/2022 Added statements for Audit logging 
-- Leo Tracchia		12/6/2022 Added fix for auditing logic
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_HAS_MONITORING_SESSION_SET]
(
     @LanguageID NVARCHAR(50),
    @MonitoringSessionID BIGINT = NULL,
    @MonitoringSessionStatusTypeID BIGINT = NULL,
    @idfsLocation BIGINT = NULL,
    @EnteredByPersonID BIGINT = NULL,
    @CampaignID BIGINT = NULL,
    @SiteID BIGINT,
    @EIDSSSessionID NVARCHAR(50) = NULL,
    @StartDate DATETIME = NULL,
    @EndDate DATETIME = NULL,
    @SessionCategoryTypeID BIGINT = NULL,
    @RowStatus INT,
    @CreateDiseaseReportHumanID BIGINT = NULL,
    @AuditUserName NVARCHAR(200),
    @DiseaseCombinations NVARCHAR(MAX),
    @SampleTypeCombinations NVARCHAR(MAX),
    @Samples NVARCHAR(MAX),
    @SamplesToDiseases NVARCHAR(MAX) = NULL,
    @Tests NVARCHAR(MAX),
    @Actions NVARCHAR(MAX),
    @Events NVARCHAR(MAX) = NULL,
    @UserId BIGINT
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        DECLARE @NewHumanID BIGINT = NULL,
                @ReturnCode INT = 0,
                @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
                @EventId BIGINT,
                @EventTypeId BIGINT = NULL,
                @EventSiteId BIGINT = NULL,
                @EventObjectId BIGINT = NULL,
                @EventUserId BIGINT = NULL,
                @EventDiseaseId BIGINT = NULL,
                @EventLocationId BIGINT = NULL,
                @EventInformationString NVARCHAR(MAX) = NULL,
                @EventLoginSiteId BIGINT = NULL;

		/* Get an 'On-The-Fly' translation for the word "New". To be used, to replace the "New" indicator on Samples / Tests.*/
		DECLARE @Translated_New NVARCHAR(50)

		DECLARE @ExecReturn TABLE (
			strDefault NVARCHAR(200),
			name NVARCHAR(200),
			LongName NVARCHAR(200)
		)

		INSERT INTO @ExecReturn
		EXEC [dbo].[USP_GBL_BaseReferenceTranslation_Get] @LanguageId = 'en-us', @idfsBaseReference = 10140000

		SELECT @Translated_New = [name] FROM @ExecReturn
		/*End 'On-The-Fly' translation.*/

        DECLARE @SuppressSelect TABLE
        (
            ReturnCode INT,
            ReturnMessage VARCHAR(200)
        );

        DECLARE @CampaignName NVARCHAR(50)
        DECLARE @CampaignTypeID BIGINT = NULL
        DECLARE @CampaignStartDate DATETIME = NULL
        DECLARE @CampaignEndDate DATETIME = NULL

        IF @CampaignID IS NOT NULL
        BEGIN
            SELECT @CampaignTypeID = idfsCampaignType,
                   @CampaignName = strCampaignname,
                   @CampaignStartDate = datCampaignDateStart,
                   @CampaignEndDate = datCampaignDateEnd
            FROM tlbCampaign
            WHERE idfCampaign = @CampaignID
        END

        DECLARE @RowID BIGINT = NULL,
                @RowAction NCHAR = NULL,
                @MonitoringSessionToDiseaseID BIGINT,
                @MonitoringSessionToSampleTypeID BIGINT,
                @OrderNumber INT,
                @SampleID BIGINT,
                @SampleTypeID BIGINT = NULL,
                @HumanID BIGINT,
                @HumanMasterID BIGINT = NULL,
                @CollectedByPersonID BIGINT = NULL,
                @CollectedByOrganizationID BIGINT = NULL,
                @CollectionDate DATETIME = NULL,
                @SentDate DATETIME = NULL,
                @EIDSSLocalOrFieldSampleID NVARCHAR(200) = NULL,
                @SampleStatusTypeID BIGINT = NULL,
                @EIDSSLaboratorySampleID NVARCHAR(200) = NULL,
                @SentToOrganizationID BIGINT = NULL,
                @ReadOnlyIndicator BIT = NULL,
                @AccessionDate DATETIME = NULL,
                @AccessionConditionTypeID BIGINT = NULL,
                @AccessionComment NVARCHAR(200) = NULL,
                @AccessionByPersonID BIGINT = NULL,
                --,@CurrentSiteID BIGINT = NULL
                @TestID BIGINT,
                @TestNameTypeID BIGINT = NULL,
                @TestCategoryTypeID BIGINT = NULL,
                @TestResultTypeID BIGINT = NULL,
                @TestStatusTypeID BIGINT,
                @BatchTestID BIGINT = NULL,
                @TestNumber INT = NULL,
                @StartedDate DATETIME2 = NULL,
                @ResultDate DATETIME2 = NULL,
                @TestedByPersonID BIGINT = NULL,
                @TestedByOrganizationID BIGINT = NULL,
                @ResultEnteredByOrganizationID BIGINT = NULL,
                @ResultEnteredByPersonID BIGINT = NULL,
                @ValidatedByOrganizationID BIGINT = NULL,
                @ValidatedByPersonID BIGINT = NULL,
                @NonLaboratoryTestIndicator BIT,
                @ExternalTestIndicator BIT = NULL,
                @PerformedByOrganizationID BIGINT = NULL,
                @ReceivedDate DATETIME2 = NULL,
                @ContactPersonName NVARCHAR(200) = NULL,
                @TestMonitoringSessionID BIGINT = NULL,
                @TestInterpretationID BIGINT,
                @InterpretedStatusTypeID BIGINT = NULL,
                @InterpretedByOrganizationID BIGINT = NULL,
                @InterpretedByPersonID BIGINT = NULL,
                @TestingInterpretations BIGINT,
                @ValidatedStatusIndicator BIT = NULL,
                @ReportSessionCreatedIndicator BIT = NULL,
                @ValidatedComment NVARCHAR(200) = NULL,
                @InterpretedComment NVARCHAR(200) = NULL,
                @ValidatedDate DATETIME = NULL,
                @InterpretedDate DATETIME = NULL,
                @MonitoringSessionActionID BIGINT,
                @ActionTypeID BIGINT,
                @ActionStatusTypeID BIGINT,
                @ActionDate DATETIME = NULL,
                @Comments NVARCHAR(500) = NULL,
                @DiseaseID BIGINT,
                @idfMonitoringSessionToDiagnosis BIGINT,
                @DateEntered DATETIME = GETDATE(),
				@idfHumanCase_Test BIGINT = NULL,
                @MonitoringSessionToMaterialID BIGINT = NULL;

        DECLARE @DiseaseCombinationsTemp TABLE
        (
            MonitoringSessionToDiseaseID BIGINT NULL,
            DiseaseID BIGINT NOT NULL,
            OrderNumber INT NOT NULL,
            SampleTypeID BIGINT NULL,
            Comments NVARCHAR(MAX),
            RowStatus INT NOT NULL,
            RowAction CHAR(1)
        );

        DECLARE @SampleTypeCombinationsTemp TABLE
        (
            MonitoringSessionToSampleTypeID BIGINT NOT NULL,
            SampleTypeID BIGINT NULL,
            OrderNumber INT NOT NULL,
            RowStatus INT NOT NULL,
            RowAction CHAR(1)
        );

        DECLARE @SamplesTemp TABLE
        (
            SampleID BIGINT NOT NULL,
            SampleTypeID BIGINT NULL,
            SampleStatusTypeID BIGINT NULL,
            CollectionDate DATETIME2 NULL,
            CollectedByOrganizationID BIGINT NULL,
            CollectedByPersonID BIGINT NULL,
            SentDate DATETIME2 NULL,
            SentToOrganizationID BIGINT NULL,
            EIDSSLocalOrFieldSampleID NVARCHAR(200) NULL,
            Comments NVARCHAR(200) NULL,
            SiteID BIGINT NOT NULL,
            --,CurrentSiteID BIGINT NULL
            DiseaseID BIGINT NULL,
            ReadOnlyIndicator BIT NULL,
            HumanID BIGINT NULL,
            HumanMasterID BIGINT NULL,
            RowStatus INT NOT NULL,
            RowAction CHAR(1) NULL
        );

        DECLARE @SamplesToDiseasesTemp TABLE
        (
            MonitoringSessionToMaterialID BIGINT NOT NULL,
            MonitoringSessionID BIGINT NULL,
			SampleID BIGINT NOT NULL,
			SampleTypeID BIGINT NULL,
            DiseaseID BIGINT NOT NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );

        DECLARE @TestsTemp TABLE
        (
            TestID BIGINT NOT NULL,
            TestNameTypeID BIGINT NULL,
            TestCategoryTypeID BIGINT NULL,
            TestResultTypeID BIGINT NULL,
            TestStatusTypeID BIGINT NOT NULL,
            DiseaseID BIGINT NULL,
            SampleID BIGINT NULL,
            BatchTestID BIGINT NULL,
            ObservationID BIGINT NULL,
            TestNumber INT NULL,
            Comments NVARCHAR NULL,
            StartedDate DATETIME2 NULL,
            ResultDate DATETIME2 NULL,
            TestedByOrganizationID BIGINT NULL,
            TestedByPersonID BIGINT NULL,
            ResultEnteredByOrganizationID BIGINT NULL,
            ResultEnteredByPersonID BIGINT NULL,
            ValidatedByOrganizationID BIGINT NULL,
            ValidatedByPersonID BIGINT NULL,
            ReadOnlyIndicator BIT NOT NULL,
            NonLaboratoryTestIndicator BIT NOT NULL,
            ExternalTestIndicator BIT NULL,
            PerformedByOrganizationID BIGINT NULL,
            ReceivedDate DATETIME2 NULL,
            ContactPersonName NVARCHAR(200) NULL,
            RowStatus INT NOT NULL,
            RowAction CHAR(1) NULL
        );

        DECLARE @ActionsTemp TABLE
        (
            MonitoringSessionActionID BIGINT NOT NULL,
            EnteredByPersonID BIGINT NULL,
            ActionTypeID BIGINT NULL,
            ActionStatusTypeID BIGINT NULL,
            ActionDate DATETIME2 NULL,
            Comments NVARCHAR(500) NULL,
            RowStatus INT NOT NULL,
            RowAction CHAR(1) NULL
        );

        DECLARE @EventsTemp TABLE
        (
            EventId BIGINT NOT NULL,
            EventTypeId BIGINT NULL,
            UserId BIGINT NULL,
            SiteId BIGINT NULL,
            LoginSiteId BIGINT NULL,
            ObjectId BIGINT NULL,
            DiseaseId BIGINT NULL,
            LocationId BIGINT NULL,
            InformationString NVARCHAR(MAX) NULL
        );

		--Data Audit--

			DECLARE @idfUserId BIGINT =NULL;
			DECLARE @idfSiteId BIGINT = NULL;
			DECLARE @idfsDataAuditEventType bigint = NULL;
			DECLARE @idfsObjectType bigint = 10017063; --select * from trtBaseReference where idfsBaseReference = 10017063
			DECLARE @idfObject bigint = @MonitoringSessionID;
			DECLARE @idfObjectTable_tlbMonitoringSession bigint = 707040000000; 			
			DECLARE @idfObjectTable_tlbCampaign bigint = 706900000000; 
			DECLARE @idfDataAuditEvent bigint = NULL;	

			DECLARE @tlbMonitoringSession_BeforeEdit TABLE
			(
				idfMonitoringSession bigint,
				idfsMonitoringSessionStatus bigint,
				idfsLocation bigint,
				idfPersonEnteredBy bigint,
				idfCampaign bigint,
                idfsSite bigint,
                datEnteredDate datetime,
                datStartDate datetime,
                datEndDate datetime,
                SessionCategoryID bigint,
                AuditUpdateUser nvarchar(200) 	
			)

			DECLARE @tlbMonitoringSession_AfterEdit TABLE
			(
				idfMonitoringSession bigint,
				idfsMonitoringSessionStatus bigint,
				idfsLocation bigint,
				idfPersonEnteredBy bigint,
				idfCampaign bigint,
                idfsSite bigint,
                datEnteredDate datetime,
                datStartDate datetime,
                datEndDate datetime,
                SessionCategoryID bigint,
                AuditUpdateUser nvarchar(200) 	
			)

			DECLARE @tlbCampaign_BeforeEdit TABLE
			(
				idfCampaign bigint,
				strCampaignName nvarchar(200),
				idfsCampaignType bigint,
				datCampaignDateStart datetime,
				datCampaignDateEnd datetime				
			)

			DECLARE @tlbCampaign_AfterEdit TABLE
			(
				idfCampaign bigint,
				strCampaignName nvarchar(200),
				idfsCampaignType bigint,
				datCampaignDateStart datetime,
				datCampaignDateEnd datetime			
			)

		--Data Audit--

        --BEGIN TRANSACTION;

        SET @DiseaseCombinations = REPLACE(@DiseaseCombinations, '"0001-01-01T00:00:00"', 'null')

        INSERT INTO @DiseaseCombinationsTemp
        SELECT *
        FROM
            OPENJSON(@DiseaseCombinations)
            WITH
            (
                MonitoringSessionToDiseaseID BIGINT,
                DiseaseID BIGINT,
                OrderNumber INT,
                SampleTypeID BIGINT,
                Comments NVARCHAR(MAX),
                RowStatus INT,
                RowAction CHAR(1)
            );

        SET @SampleTypeCombinations = REPLACE(@SampleTypeCombinations, '"0001-01-01T00:00:00"', 'null')

        INSERT INTO @SampleTypeCombinationsTemp
        SELECT *
        FROM
            OPENJSON(@SampleTypeCombinations)
            WITH
            (
                MonitoringSessionToSampleTypeID BIGINT,
                SampleTypeID BIGINT,
                OrderNumber INT,
                RowStatus INT,
                RowAction CHAR(1)
            );

        SET @Samples = REPLACE(@Samples, '"0001-01-01T00:00:00"', 'null')

        INSERT INTO @SamplesTemp
        SELECT *
        FROM
            OPENJSON(@Samples)
            WITH
            (
                SampleID BIGINT,
                SampleTypeID BIGINT,
                SampleStatusTypeID BIGINT,
                CollectionDate DATETIME2,
                CollectedByOrganizationID BIGINT,
                CollectedByPersonID BIGINT,
                SentDate DATETIME2,
                SentToOrganizationID BIGINT,
                EIDSSLocalOrFieldSampleID NVARCHAR(200),
                Comments NVARCHAR(200),
                SiteID BIGINT,
                --,CurrentSiteID BIGINT
                DiseaseID BIGINT,
                ReadOnlyIndicator BIT,
                HumanID BIGINT,
                HumanMasterID BIGINT,
                RowStatus INT,
                RowAction CHAR(1)
            );

        INSERT INTO @SamplesToDiseasesTemp
		SELECT *
		FROM
			OPENJSON(@SamplesToDiseases)
			WITH
			(
				MonitoringSessionToMaterialID BIGINT,
				MonitoringSessionID BIGINT,
				SampleID BIGINT,
				SampleTypeID BIGINT,
				DiseaseID BIGINT,
				RowStatus INT,
				RowAction INT
			);

        SET @Tests = REPLACE(@Tests, '"0001-01-01T00:00:00"', 'null')

        INSERT INTO @TestsTemp
        SELECT *
        FROM
            OPENJSON(@Tests)
            WITH
            (
                TestID BIGINT,
                TestNameTypeID BIGINT,
                TestCategoryTypeID BIGINT,
                TestResultTypeID BIGINT,
                TestStatusTypeID BIGINT,
                DiseaseID BIGINT,
                SampleID BIGINT,
                BatchTestID BIGINT,
                ObservationID BIGINT,
                TestNumber INT,
                Comments NVARCHAR(500),
                StartedDate DATETIME2,
                ResultDate DATETIME2,
                TestedByOrganizationID BIGINT,
                TestedByPersonID BIGINT,
                ResultEnteredByOrganizationID BIGINT,
                ResultEnteredByPersonID BIGINT,
                ValidatedByOrganizationID BIGINT,
                ValidatedByPersonID BIGINT,
                ReadOnlyIndicator BIT,
                NonLaboratoryTestIndicator BIT,
                ExternalTestIndicator BIT,
                PerformedByOrganizationID BIGINT,
                ReceivedDate DATETIME2,
                ContactPersonName NVARCHAR(200),
                RowStatus INT,
                RowAction CHAR(1)
            );


        SET @Actions = REPLACE(@Actions, '"0001-01-01T00:00:00"', 'null')

        INSERT INTO @ActionsTemp
        SELECT *
        FROM
            OPENJSON(@Actions)
            WITH
            (
                MonitoringSessionActionID BIGINT,
                EnteredByPersonID BIGINT,
                ActionTypeID BIGINT,
                ActionStatusTypeID BIGINT,
                ActionDate DATETIME2,
                Comments NVARCHAR(500),
                RowStatus INT,
                RowAction CHAR(1)
            );

        INSERT INTO @EventsTemp
        SELECT *
        FROM
            OPENJSON(@Events)
            WITH
            (
                EventId BIGINT,
                EventTypeId BIGINT,
                UserId BIGINT,
                SiteId BIGINT,
                LoginSiteId BIGINT,
                ObjectId BIGINT,
                DiseaseId BIGINT,
                LocationId BIGINT,
                InformationString NVARCHAR(MAX)
            );

		--Data Audit--
			-- Get and Set UserId and SiteId
			--SELECT @idfUserId = userInfo.UserId, @idfSiteId = UserInfo.SiteId FROM dbo.FN_UserSiteInformation(@UserId) userInfo

			select @idfUserId = tu.idfUserID, @idfSiteId = tu.idfsSite from AspNetUsers u 
			inner join tstUserTable tu on u.idfUserID = tu.idfUserID
			where u.idfUserID = @UserId

		--Data Audit--

        IF EXISTS
        (
            SELECT *
            FROM dbo.tlbMonitoringSession
            WHERE idfMonitoringSession = @MonitoringSessionID
        )
        BEGIN

			--  tauDataAuditEvent  Event Type - Edit 
			set @idfsDataAuditEventType = 10016003;
			
			-- insert record into tauDataAuditEvent - 
			INSERT INTO @SuppressSelect
			EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType, @idfsObjectType, @idfObject, @idfObjectTable_tlbMonitoringSession, @idfDataAuditEvent OUTPUT

			INSERT INTO @tlbMonitoringSession_BeforeEdit(
				idfMonitoringSession,
				idfsMonitoringSessionStatus,
				idfsLocation,
				idfPersonEnteredBy,
				idfCampaign,
                idfsSite,
                datEnteredDate,
                datStartDate,
                datEndDate,
                SessionCategoryID,
                AuditUpdateUser)
			SELECT 
				idfMonitoringSession,
				idfsMonitoringSessionStatus,
				idfsLocation,
				idfPersonEnteredBy,
				idfCampaign,
                idfsSite,
                datEnteredDate,
                datStartDate,
                datEndDate,
                SessionCategoryID,
                AuditUpdateUser
				FROM tlbMonitoringSession WHERE idfMonitoringSession = @MonitoringSessionID;

            UPDATE dbo.tlbMonitoringSession
            SET idfsMonitoringSessionStatus = @MonitoringSessionStatusTypeID,
                idfsLocation = @idfsLocation,
                idfPersonEnteredBy = @EnteredByPersonID,
                idfCampaign = @CampaignID,
                idfsSite = @SiteID,
                datEnteredDate = GETDATE(),
                datStartDate = @StartDate,
                datEndDate = @EndDate,
                SessionCategoryID = @SessionCategoryTypeID,
                AuditUpdateUser = @AuditUserName,
				AuditUpdateDTM = GETDATE()
            WHERE idfMonitoringSession = @MonitoringSessionID;

			INSERT INTO @tlbMonitoringSession_AfterEdit(
				idfMonitoringSession,
				idfsMonitoringSessionStatus,
				idfsLocation,
				idfPersonEnteredBy,
				idfCampaign,
                idfsSite,
                datEnteredDate,
                datStartDate,
                datEndDate,
                SessionCategoryID,
                AuditUpdateUser)
			SELECT 
				idfMonitoringSession,
				idfsMonitoringSessionStatus,
				idfsLocation,
				idfPersonEnteredBy,
				idfCampaign,
                idfsSite,
                datEnteredDate,
                datStartDate,
                datEndDate,
                SessionCategoryID,
                AuditUpdateUser
				FROM tlbMonitoringSession WHERE idfMonitoringSession = @MonitoringSessionID;

			--idfsMonitoringSessionStatus
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_tlbMonitoringSession, 
				707060000000,
				a.idfMonitoringSession,
				null,
				a.idfsMonitoringSessionStatus,
				b.idfsMonitoringSessionStatus 
			from @tlbMonitoringSession_BeforeEdit a inner join @tlbMonitoringSession_AfterEdit b on a.idfMonitoringSession = b.idfMonitoringSession
			where (a.idfsMonitoringSessionStatus <> b.idfsMonitoringSessionStatus) 
				or(a.idfsMonitoringSessionStatus is not null and b.idfsMonitoringSessionStatus is null)
				or(a.idfsMonitoringSessionStatus is null and b.idfsMonitoringSessionStatus is not null)

			--idfPersonEnteredBy
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_tlbMonitoringSession, 
				707110000000,
				a.idfMonitoringSession,
				null,
				a.idfPersonEnteredBy,
				b.idfPersonEnteredBy 
			from @tlbMonitoringSession_BeforeEdit a inner join @tlbMonitoringSession_AfterEdit b on a.idfMonitoringSession = b.idfMonitoringSession
			where (a.idfPersonEnteredBy <> b.idfPersonEnteredBy) 
				or(a.idfPersonEnteredBy is not null and b.idfPersonEnteredBy is null)
				or(a.idfPersonEnteredBy is null and b.idfPersonEnteredBy is not null)

			--idfCampaign
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_tlbMonitoringSession, 
				707120000000,
				a.idfMonitoringSession,
				null,
				a.idfCampaign,
				b.idfCampaign 
			from @tlbMonitoringSession_BeforeEdit a inner join @tlbMonitoringSession_AfterEdit b on a.idfMonitoringSession = b.idfMonitoringSession
			where (a.idfCampaign <> b.idfCampaign) 
				or(a.idfCampaign is not null and b.idfCampaign is null)
				or(a.idfCampaign is null and b.idfCampaign is not null)

			--datEnteredDate
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_tlbMonitoringSession, 
				707130000000,
				a.idfMonitoringSession,
				null,
				a.datEnteredDate,
				b.datEnteredDate 
			from @tlbMonitoringSession_BeforeEdit a inner join @tlbMonitoringSession_AfterEdit b on a.idfMonitoringSession = b.idfMonitoringSession
			where (a.datEnteredDate <> b.datEnteredDate) 
				or(a.datEnteredDate is not null and b.datEnteredDate is null)
				or(a.datEnteredDate is null and b.datEnteredDate is not null)

			--datStartDate
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_tlbMonitoringSession, 
				4578670000000,
				a.idfMonitoringSession,
				null,
				a.datStartDate,
				b.datStartDate 
			from @tlbMonitoringSession_BeforeEdit a inner join @tlbMonitoringSession_AfterEdit b on a.idfMonitoringSession = b.idfMonitoringSession
			where (a.datStartDate <> b.datStartDate) 
				or(a.datStartDate is not null and b.datStartDate is null)
				or(a.datStartDate is null and b.datStartDate is not null)	
				
			--datEndDate
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_tlbMonitoringSession, 
				4578680000000,
				a.idfMonitoringSession,
				null,
				a.datEndDate,
				b.datEndDate 
			from @tlbMonitoringSession_BeforeEdit a inner join @tlbMonitoringSession_AfterEdit b on a.idfMonitoringSession = b.idfMonitoringSession
			where (a.datEndDate <> b.datEndDate) 
				or(a.datEndDate is not null and b.datEndDate is null)
				or(a.datEndDate is null and b.datEndDate is not null)
						

			INSERT INTO @tlbCampaign_BeforeEdit(
				idfCampaign,
				strCampaignName,
				idfsCampaignType,
				datCampaignDateStart,
				datCampaignDateEnd)
			SELECT 
				idfCampaign,
				strCampaignName,
				idfsCampaignType,
				datCampaignDateStart,
				datCampaignDateEnd
				FROM tlbCampaign WHERE idfCampaign = @CampaignID;

            UPDATE dbo.tlbCampaign
            SET strCampaignName = @CampaignName,
                idfsCampaignType = @CampaignTypeID,
                datCampaignDateStart = @CampaignStartDate,
                datCampaignDateEnd = @CampaignEndDate
            WHERE idfCampaign = @CampaignID

			INSERT INTO @tlbCampaign_AfterEdit(
				idfCampaign,
				strCampaignName,
				idfsCampaignType,
				datCampaignDateStart,
				datCampaignDateEnd)
			SELECT 
				idfCampaign,
				strCampaignName,
				idfsCampaignType,
				datCampaignDateStart,
				datCampaignDateEnd
				FROM tlbCampaign WHERE idfCampaign = @CampaignID;

			--strCampaignName
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_tlbCampaign, 
				706970000000,
				a.idfCampaign,
				null,
				a.strCampaignName,
				b.strCampaignName 
			from @tlbCampaign_BeforeEdit a inner join @tlbCampaign_AfterEdit b on a.idfCampaign = b.idfCampaign
			where (a.strCampaignName <> b.strCampaignName) 
				or(a.strCampaignName is not null and b.strCampaignName is null)
				or(a.strCampaignName is null and b.strCampaignName is not null)

			--idfsCampaignType
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_tlbCampaign, 
				706920000000,
				a.idfCampaign,
				null,
				a.idfsCampaignType,
				b.idfsCampaignType 
			from @tlbCampaign_BeforeEdit a inner join @tlbCampaign_AfterEdit b on a.idfCampaign = b.idfCampaign
			where (a.idfsCampaignType <> b.idfsCampaignType) 
				or(a.idfsCampaignType is not null and b.idfsCampaignType is null)
				or(a.idfsCampaignType is null and b.idfsCampaignType is not null)

			--datCampaignDateStart
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_tlbCampaign, 
				706940000000,
				a.idfCampaign,
				null,
				a.datCampaignDateStart,
				b.datCampaignDateStart 
			from @tlbCampaign_BeforeEdit a inner join @tlbCampaign_AfterEdit b on a.idfCampaign = b.idfCampaign
			where (a.datCampaignDateStart <> b.datCampaignDateStart) 
				or(a.datCampaignDateStart is not null and b.datCampaignDateStart is null)
				or(a.datCampaignDateStart is null and b.datCampaignDateStart is not null)

			--datCampaignDateEnd
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_tlbCampaign, 
				706950000000,
				a.idfCampaign,
				null,
				a.datCampaignDateEnd,
				b.datCampaignDateEnd 
			from @tlbCampaign_BeforeEdit a inner join @tlbCampaign_AfterEdit b on a.idfCampaign = b.idfCampaign
			where (a.datCampaignDateEnd <> b.datCampaignDateEnd) 
				or(a.datCampaignDateEnd is not null and b.datCampaignDateEnd is null)
				or(a.datCampaignDateEnd is null and b.datCampaignDateEnd is not null)


            UPDATE @EventsTemp
            SET ObjectId = @MonitoringSessionID
            WHERE ObjectId = 0;

        END
        ELSE
        BEGIN
            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tlbMonitoringSession',
                                              @MonitoringSessionID OUTPUT;

            EXECUTE dbo.USP_GBL_NextNumber_GET 'Human Active Surveillance Session',
                                               @EIDSSSessionID OUTPUT,
                                               NULL;

            INSERT INTO dbo.tlbMonitoringSession
            (
                idfMonitoringSession,
                idfsMonitoringSessionStatus,
                idfsLocation,
                idfPersonEnteredBy,
                idfCampaign,
                idfsSite,
                datEnteredDate,
                strMonitoringSessionID,
                datStartDate,
                datEndDate,
                SessionCategoryID,
                intRowStatus,
                AuditCreateUser
            )
            VALUES
            (
				@MonitoringSessionID,
				@MonitoringSessionStatusTypeID,
				@idfsLocation,
				@EnteredByPersonID,
				@CampaignID,
				@SiteID,
				GETDATE(),
				@EIDSSSessionID,
				@StartDate,
				@EndDate,
				@SessionCategoryTypeID,
				0  ,
				@AuditUserName
            );

			--Data Audit--
			
				-- tauDataAuditEvent Event Type - Create 
				set @idfsDataAuditEventType = 10016001;
			
				-- insert record into tauDataAuditEvent - 
				INSERT INTO @SuppressSelect
				EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType, @idfsObjectType, @MonitoringSessionID, @idfObjectTable_tlbMonitoringSession, @idfDataAuditEvent OUTPUT

				INSERT INTO tauDataAuditDetailCreate(idfDataAuditEvent, idfObjectTable, idfObject)
				VALUES (@idfDataAuditEvent, @idfObjectTable_tlbMonitoringSession, @MonitoringSessionID)
			
			--Data Audit--

        END

        WHILE EXISTS (SELECT * FROM @DiseaseCombinationsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = MonitoringSessionToDiseaseID,
                @DiseaseID = DiseaseID,
                @SampleTypeID = SampleTypeID,
                @OrderNumber = OrderNumber,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @DiseaseCombinationsTemp;

            SET @idfMonitoringSessionToDiagnosis = @RowID

            INSERT INTO @SuppressSelect
            EXECUTE USSP_HAS_MonitoringSessionToDiagnosis_SET @LanguageID,
															  @idfDataAuditEvent,
                                                              @idfMonitoringSessionToDiagnosis OUTPUT,
                                                              @MonitoringSessionID,
                                                              @DiseaseID,
                                                              @OrderNumber,
                                                              NULL,
                                                              @SampleTypeID,
                                                              @Comments,
                                                              @AuditUserName,
                                                              @RowAction;

            DELETE FROM @DiseaseCombinationsTemp
            WHERE MonitoringSessionToDiseaseID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @SampleTypeCombinationsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = MonitoringSessionToSampleTypeID,
                @MonitoringSessionToSampleTypeID = MonitoringSessionToSampleTypeID,
                @OrderNumber = OrderNumber,
                @RowStatus = RowStatus,
                @SampleTypeID = SampleTypeID,
                @RowAction = RowAction
            FROM @SampleTypeCombinationsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_HAS_MONITORING_SESSION_TO_SAMPLE_TYPE_SET @LanguageID,
																	   @idfDataAuditEvent,
                                                                       @MonitoringSessionToSampleTypeID,
                                                                       @MonitoringSessionID,
                                                                       @OrderNumber,
                                                                       @RowStatus,
                                                                       @SampleTypeID,
                                                                       @RowAction,
                                                                       @AuditUserName;

            DELETE FROM @SampleTypeCombinationsTemp
            WHERE MonitoringSessionToSampleTypeID = @RowID;
        END;


        WHILE EXISTS (SELECT * FROM @SamplesTemp)
        BEGIN
            SELECT TOP 1
                @RowID = SampleID,
                @SampleID = SampleID,
                @SampleTypeID = SampleTypeID,
                @CollectedByPersonID = CollectedByPersonID,
                @CollectedByOrganizationID = CollectedByOrganizationID,
                @CollectionDate = CAST(CollectionDate AS DATETIME),
                @SentDate = CAST(SentDate AS DATETIME),
                @EIDSSLocalOrFieldSampleID = EIDSSLocalOrFieldSampleID,
                @SampleStatusTypeID = SampleStatusTypeID,
                @Comments = Comments,
                @SiteID = SiteID,
                --,@CurrentSiteID = CurrentSiteID
                @RowStatus = RowStatus,
                @SentToOrganizationID = SentToOrganizationID,
                @DiseaseID = DiseaseID,
                @ReadOnlyIndicator = ReadOnlyIndicator,
                @HumanID = HumanID,
                @HumanMasterID = HumanMasterID,
                @RowAction = RowAction
            FROM @SamplesTemp;

			SET @EIDSSLocalOrFieldSampleID = REPLACE(@EIDSSLocalOrFieldSampleID, @Translated_New + '-', @EIDSSSessionID + '-');

            IF @RowAction = 'I'
            BEGIN
                DECLARE @idfNewHuman BIGINT = NULL
                INSERT INTO @SuppressSelect

                --EXECUTE dbo.USP_HUM_COPYHUMANACTUALTOHUMAN @HumanMasterID,
                --                                           @idfNewHuman OUTPUT,
                --                                           @ReturnCode OUTPUT,
                --                                           @ReturnMessage OUTPUT;

				EXECUTE dbo.USSP_HUM_COPY_HUMAN_SET @HumanMasterID,
													@idfDataAuditEvent,
													@AuditUserName,
													@HumanID OUTPUT,
                                                    @ReturnCode OUTPUT,
                                                    @ReturnMessage OUTPUT;

                SELECT @HumanID = @idfNewHuman
            END;

            --INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_GBL_SAMPLES_SET 
											@AuditUserName = @AuditUserName,
											@DataAuditEventID = @idfDataAuditEvent,
											@SampleID = @SampleID OUTPUT,
                                            @SampleTypeID = @SampleTypeID,
                                            @RootSampleID = NULL,
                                            @ParentSampleID = NULL,
                                            @HumanID = @HumanID,
											@SpeciesID = NULL,
                                            @AnimalID = NULL,
                                            @VectorID = NULL,
                                            @MonitoringSessionID = @MonitoringSessionID,
                                            @VectorSessionID = NULL,
                                            @HumanDiseaseReportID = NULL,
                                            @VeterinaryDiseaseReportID = NULL,
                                            @CollectionDate = @CollectionDate,
                                            @CollectedByPersonID = @CollectedByPersonID,
                                            @CollectedByOrganizationID = @CollectedByOrganizationID,
                                            @SentDate = @SentDate,
											@SentToOrganizationID = @SentToOrganizationID,
                                            @EIDSSLocalFieldSampleID = @EIDSSLocalOrFieldSampleID,
                                            @SiteID = @SiteID,
                                            @EnteredDate = @DateEntered,
                                            @ReadOnlyIndicator = @ReadOnlyIndicator,
                                            @SampleStatusTypeID = @SampleStatusTypeID,
                                            @Comments = @Comments,
                                            @CurrentSiteID = NULL,
                                            @DiseaseID = @DiseaseID,
                                            @BirdStatusTypeID = NULL,
                                            @RowStatus = @RowStatus,
                                            @RowAction = @RowAction;

            UPDATE @SamplesToDiseasesTemp
            SET SampleID = @SampleID
            WHERE SampleID = @RowID;

            UPDATE @TestsTemp
            SET SampleID = @SampleID
            WHERE SampleID = @RowID;

            DELETE FROM @SamplesTemp
            WHERE SampleID = @RowID;

            DELETE FROM dbo.tlbMonitoringSessionToMaterial
            WHERE idfMaterial = @SampleID;
        END;

        WHILE EXISTS (SELECT * FROM @SamplesToDiseasesTemp)
		BEGIN
			SELECT TOP 1
				@RowID = MonitoringSessionToMaterialID,
				@MonitoringSessionToMaterialID = MonitoringSessionToMaterialID,
				@SampleID = SampleID,
				@SampleTypeID = SampleTypeID,
				@DiseaseID = DiseaseID,
				@RowAction = RowAction,
				@RowStatus = RowStatus
			FROM @SamplesToDiseasesTemp;

			--insert or update the diseases for this sample
			INSERT INTO @SuppressSelect
			EXECUTE dbo.USSP_AS_SAMPLE_TO_DISEASE_SET
										@AuditUserName,
										@idfDataAuditEvent,
                                        @MonitoringSessionToMaterialID,
										@MonitoringSessionID,
										@SampleID,
										@DiseaseID,
                                        @SampleTypeID,
                                        @RowStatus,
                                        @RowAction;

			DELETE FROM @SamplesToDiseasesTemp
			WHERE MonitoringSessionToMaterialID = @RowID;
		END;

        WHILE EXISTS (SELECT * FROM @TestsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = TestID,
                @TestID = TestID,
                @TestNameTypeID = TestNameTypeID,
                @TestCategoryTypeID = TestCategoryTypeID,
                @TestResultTypeID = TestResultTypeID,
                @TestStatusTypeID = TestStatusTypeID,
                @DiseaseID = DiseaseID,
                @SampleID = SampleID,
                @Comments = Comments,
                @RowStatus = RowStatus,
                @StartedDate = StartedDate,
                @ResultDate = ResultDate,
                @TestedByOrganizationID = TestedByOrganizationID,
                @TestedByPersonID = TestedByPersonID,
                @ResultEnteredByOrganizationID = ResultEnteredByOrganizationID,
                @ResultEnteredByPersonID = ResultEnteredByPersonID,
                @ValidatedByOrganizationID = ValidatedByOrganizationID,
                @ValidatedByPersonID = ValidatedByPersonID,
                @ReadOnlyIndicator = ReadOnlyIndicator,
                @NonLaboratoryTestIndicator = NonLaboratoryTestIndicator,
                @ExternalTestIndicator = ExternalTestIndicator,
                @PerformedByOrganizationID = PerformedByOrganizationID,
                @ReceivedDate = ReceivedDate,
                @ContactPersonName = ContactPersonName,
                @RowAction = RowAction
            FROM @TestsTemp;

			SELECT
			   @idfHumanCase_Test = idfHumanCase
			FROM
			   tlbTesting
			WHERE
			   idfTesting = @TestID

			SET @EIDSSLocalOrFieldSampleID = REPLACE(@EIDSSLocalOrFieldSampleID, @Translated_New + '-', @EIDSSSessionID + '-');

            --If record is being soft-deleted, then check if the test record was originally created 
            --in the laboaratory module.  If it was, then disassociate the test record from the 
            --human monitoring session, so that the test record remains in the laboratory module 
            --for further action.
            IF @RowStatus = 1
               AND @NonLaboratoryTestIndicator = 1
            BEGIN
                SET @RowStatus = 0;
                SET @TestMonitoringSessionID = NULL;
            END
            ELSE
            BEGIN
                SET @TestMonitoringSessionID = @MonitoringSessionID;
            END;


            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_GBL_TESTS_SET @LanguageID,
                                          @TestID OUTPUT,
                                          @TestNameTypeID,
                                          @TestCategoryTypeID,
                                          @TestResultTypeID,
                                          @TestStatusTypeID,
                                          @DiseaseID,
                                          @SampleID,
                                          NULL,
                                          NULL,
                                          NULL,
                                          @Comments,
                                          @RowStatus,
                                          @StartedDate,
                                          @ResultDate,
                                          @TestedByOrganizationID,
                                          @TestedByPersonID,
                                          @ResultEnteredByOrganizationID,
                                          @ResultEnteredByPersonID,
                                          @ValidatedByOrganizationID,
                                          @ValidatedByPersonID,
                                          @ReadOnlyIndicator,
                                          @NonLaboratoryTestIndicator,
                                          @ExternalTestIndicator,
                                          @PerformedByOrganizationID,
                                          @ReceivedDate,
                                          @ContactPersonName,
                                          @TestMonitoringSessionID,
                                          NULL,
                                          @idfHumanCase_Test,
                                          NULL,
                                          @AuditUserName,
										  @idfDataAuditEvent,
                                          @RowAction;

            DELETE FROM @TestsTemp
            WHERE TestID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @ActionsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = MonitoringSessionActionID,
                @MonitoringSessionActionID = MonitoringSessionActionID,
                @EnteredByPersonID = EnteredByPersonID,
                @ActionTypeID = ActionTypeID,
                @ActionStatusTypeID = ActionStatusTypeID,
                @ActionDate = ActionDate,
                @Comments = Comments,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @ActionsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_HAS_MONITORING_SESSION_ACTION_SET @LanguageID,
															   @idfDataAuditEvent,
                                                               @MonitoringSessionActionID OUTPUT,
                                                               @MonitoringSessionID,
                                                               @EnteredByPersonID,
                                                               @ActionTypeID,
                                                               @ActionStatusTypeID,
                                                               @ActionDate,
                                                               @Comments,
                                                               @RowStatus,
                                                               @RowAction,
                                                               @AuditUserName

            DELETE FROM @ActionsTemp
            WHERE MonitoringSessionActionID = @RowID;
        END;


        WHILE EXISTS (SELECT * FROM @EventsTemp)
        BEGIN
            SELECT TOP 1
                @EventId = EventId,
                @EventTypeId = EventTypeId,
                @EventUserId = UserId,
                @EventObjectId = ObjectId,
                @EventSiteId = SiteId,
                @EventDiseaseId = DiseaseId,
                @EventLocationId = LocationId,
                @EventInformationString = InformationString,
                @EventLoginSiteId = LoginSiteId
            FROM @EventsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_ADMIN_EVENT_SET @EventId,
                                            @EventTypeId,
                                            @EventUserId,
                                            @EventObjectId,
                                            @EventDiseaseId,
                                            @EventSiteId,
                                            @EventInformationString,
                                            @EventLoginSiteId,
                                            @EventLocationId,
                                            @AuditUserName;

            DELETE FROM @EventsTemp
            WHERE EventId = @EventId;
        END;

        DECLARE @HumanDiseaseReportID BIGINT = NULL;
        DECLARE @EIDSSReportID NVARCHAR(200) = NULL;

        IF (@CreateDiseaseReportHumanID IS NOT NULL)
        BEGIN
            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tlbHumanCase',
                                              @HumanDiseaseReportID OUTPUT;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_GBL_NextNumber_GET 'Human Disease Report',
                                               @EIDSSReportID OUTPUT,
                                               NULL;

            DECLARE @PersonID NVARCHAR(50) = NULL;
            DECLARE @Name NVARCHAR(200) = NULL;

            INSERT INTO dbo.tlbHumanCase
            (
                idfHumanCase,
                strCaseID,
                idfHuman,
                idfParentMonitoringSession,
                idfsFinalDiagnosis,
                idfsSite,
                idfsCaseProgressStatus,
                idfsInitialCaseStatus,
                idfsFinalCaseStatus,
                DiseaseReportTypeID,
                idfPersonEnteredBy,
                idfsYNSpecimenCollected,
                idfsYNTestsConducted,
                datEnteredDate
            )
            VALUES
            (   @HumanDiseaseReportID,
                @EIDSSReportID,
                @CreateDiseaseReportHumanID,
                @MonitoringSessionID,
                NULL, --@DiseaseID
                @SiteID,
                10109001,
                NULL,
                NULL,
                4578940000001,
                @EnteredByPersonID,
                10100001,
                10100001,
                GETDATE()
            );

            UPDATE dbo.tlbMaterial
            SET idfHumanCase = @HumanDiseaseReportID
            WHERE idfMonitoringSession = @MonitoringSessionID
                  AND idfHuman = @CreateDiseaseReportHumanID;
        END;

        IF @@TRANCOUNT > 0
            COMMIT TRANSACTION;

    END TRY
    BEGIN CATCH
        IF @@Trancount > 0
            ROLLBACK TRANSACTION;

        SET @ReturnCode = ERROR_NUMBER();
        SET @ReturnMessage = ERROR_MESSAGE();

        THROW;
    END CATCH

    SELECT @ReturnCode AS ReturnCode,
           @ReturnMessage AS ReturnMessage,
           @MonitoringSessionID AS MonitoringSessionID,
           @EIDSSSessionID AS EIDSSSessionID,
           @HumanDiseaseReportID AS HumanDiseaseReportID;
END
GO
PRINT N'Altering Procedure [dbo].[USP_HUM_HUMAN_DISEASE_SET]...';


GO
-- ================================================================================================
-- Name: USP_HUM_HUMAN_DISEASE_SET
--
-- Description:	Insert or update a human disease report record.
--          
-- Author: Mandar Kulkarni
--
-- Revision History:
-- Name                  Date       Change Detail
-- --------------------- ---------- --------------------------------------------------------------
-- JWJ	                 04/03/2018 Added new param to end for ReportStatus
-- Harold Pryor          08/01/2018 Added new @DiseaseReportTypeID input paramenter
-- Harold Pryor          11/30/2018 Added new @blnClinicalDiagBasis, @blnLabDiagBasis, 
--                                  @blnEpiDiagBasis input parameters for Basis of Diagnosis and 
--                                  new @DateofClassification input parameter 
-- Harold Pryor          12/05/2018	Added new @StartDateofInvestigation input parameter. Corrected 
--                                  @idfSoughtCareFacility input parameter spelling.	
-- Harold Pryor          12/06/2018	Removed updating Primary Key column for tlbHumanCase update.
-- Harold Pryor          12/13/2018	Removed @VaccinationName and @VaccinationDate input 
--                                  paramenters
-- Harold Pryor          12/21/2018	Changed @Sample as tlbHdrMaterialGetListSPType and @Tests as 
--                                  tlbHdrTestGetListSPType parameters and replaced as NVARCHAR
-- Harold Pryor          12/27/2018	Changed @Sample parameter to @SampleParameters and changed 
--                                  parameter @Tests to @TestsParameters. 
-- Lamont Mitchell       01/02/2018	Changed @idfHumanCase from OutputParameter and added to 
--                                  select statement
-- Harold Pryor          01/04/2018	Added new input paramters @AntiviralTherapiesParameters and 
--                                  @VaccinationsParameters	
-- Lamont Mitchell       01/11/2019	Suppressed Result Sets in ALL STORED PROCS
-- Harold Pryor          01/21/2019	Added @ContactsParameters input parameter 
-- Harold Pryor          01/27/2019	Added @strSummaryNotes input parameter
-- Harold Pryor          02/10/2019	Added @idfEpiObservation and @idfCSObservation	input 
--                                  paremeters for Flex Forms integration. 
-- Harold Pryor          03/22/2019	Updated to include @idfHuman and @DiseaseID to call to 
--                                  USSP_HUMAN_DISEASE_SAMPLES_SET stored proc 
-- Harold Pryor          04/08/2019	Updated to include @idfHumanCaseRelatedTo imput parameter for 
--                                  Changed Diagnosis Human Disease Report functionality
-- Harold Pryor          04/09/2019	For Smart key generation reference data change for V7 updated 
--                                  call to USP_GBL_NextNumber using a V6 strDocumentName ('Human 
--                                  Case').  Input parameter and replaced with V7 trDocumentName 
--                                  ('Human Disease Report') input parameter value instead.  
-- Harold Pryor          04/28/2019 Updated to properly save contacts 
-- Harold Pryor          05/28/2019 Updated to include paramter @idfHuman in call to 
--                                  USSP_HUMAN_DISEASE_CONTACT_SET
-- Harold Pryor          06/04/2019 Updated to include @strEpidemiologistsName input parameter
-- Harold Pryor          06/05/2019 Updated to include @idfsNotCollectedReason input parameter 
-- Harold Pryor          06/18/2019 Updated to include @idfsGeoLocationType input parameter
-- Harold Pryor          06/19/2019 Updated to include @intElevation and @strForeignAddress input 
--                                  parameters
-- Harold Pryor          06/19/2019 Updated to include @intLocationDirection input parameter
-- Lamont Mitchell       04/21/2020	UPDATEd tlbGeolocation Output Parameter
-- Lamont Mitchell       06/07/2020	Modified adding Connected Human disease Report
-- Lamont Mitchell       08/04/2020 Added property @idfInvestigatedByPerson and modified insert 
--                                  and update statments to include parameter
-- Lamont Mitchell       08/04/2000	Added SITE ID Property
-- Lamont Mitchell       11/02/2020	Added strNotCollectedReason to property list and add and 
--                                  update
-- Mandar Kulkani        01/18/2022	Removed two input parameters for relative latitude and 
--                                  longitude
-- Minal Shah            01/24/2022	Added strLocalIdentifier to the request
-- Minal Shah            04/04/2022	Added Site Alert Notifications
-- Doug Albanese         04/19/2022	Added tag to denote refactoring to Location Hierarchy
-- Doug Albanese         05/24/2022	Added idfParentMonitoringSession to connect a human active 
--                                  surveillance session to a disease report
-- Mark Wilson           06/02/2022	Set @AuditUser = ISNULL(@AuditUser, '') to make sure no nulls
-- Mark Wilson           06/08/2022	Defined all parameters for USSP_GBL_SAMPLE_SET
-- Stephen Long          07/06/2022 Updates for site alerts to call new stored procedure.
-- Doug Albanese         07/18/2022	Add @ConnectedTestId, so that HDR can make the association, 
--                                  after obtaining the new idfHumanCase value.
-- Doug Albanese         09/12/2022 Linked up the "Monitoring Session ID" to Samples and Tests
-- Doug Albanese         10/17/2022	Corrected the "Connected Test" to update all records for the 
--                                  existing monitoring session that have the same person and 
--                                  disease combination
-- Leo Tracchia          10/21/2022 Fix for properly deleting tests for human disease report 
--                                  DevOps defect 5006
-- Stephen Long          11/17/2022 Added data audit logic for SAUC30 and 31.
-- Stephen Long          11/28/2022 Added data audit for vaccinations, contacts and geolocation.
-- Stephen Long          11/29/2022 Added data audit for disease report relationship and flex 
--                                  forms.
-- Stephen Long          12/01/2022 Added EIDSS object ID; smart key that represents the parent 
--                                  object.
--
-- Testing Code:
-- EXEC USP_HUM_HUMAN_DISEASE_SET  NULL,  27, NULL,  '(new)',784050000000
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_HUM_HUMAN_DISEASE_SET]
(
    @LanguageID NVARCHAR(50),
    @idfHumanCase BIGINT = NULL,                          -- tlbHumanCase.idfHumanCase Primary Key
    @idfHumanCaseRelatedTo BIGINT = NULL,
    @idfHuman BIGINT = NULL,                              -- tlbHumanCase.idfHuman
    @idfHumanActual BIGINT,                               -- tlbHumanActual.idfHumanActual
    @strHumanCaseId NVARCHAR(200) = '(new)',
    @idfsFinalDiagnosis BIGINT,                           -- tlbhumancase.idfsTentativeDiagnosis/idfsFinalDiagnosis
    @datDateOfDiagnosis DATETIME = NULL,                  --tlbHumanCase.datTentativeDiagnosisDate/datFinalDiagnosisDate
    @datNotificationDate DATETIME = NULL,                 --tlbHumanCase.DatNotIFicationDate
    @idfsFinalState BIGINT = NULL,                        --tlbHumanCase.idfsFinalState
    @strLocalIdentifier NVARCHAR(200) = NULL,
    @idfSentByOffice BIGINT = NULL,                       -- tlbHumanCase.idfSentByOffice
    @strSentByFirstName NVARCHAR(200) = NULL,             --tlbHumanCase.strSentByFirstName
    @strSentByPatronymicName NVARCHAR(200) = NULL,        --tlbHumancase.strSentByPatronymicName
    @strSentByLastName NVARCHAR(200) = NULL,              --tlbHumanCase.strSentByLastName
    @idfSentByPerson BIGINT = NULL,                       --tlbHumcanCase.idfSentByPerson
    @idfReceivedByOffice BIGINT = NULL,                   -- tlbHumanCase.idfReceivedByOffice
    @strReceivedByFirstName NVARCHAR(200) = NULL,         --tlbHumanCase.strReceivedByFirstName
    @strReceivedByPatronymicName NVARCHAR(200) = NULL,    --tlbHumanCase.strReceivedByPatronymicName
    @strReceivedByLastName NVARCHAR(200) = NULL,          --tlbHuanCase.strReceivedByLastName
    @idfReceivedByPerson BIGINT = NULL,                   -- tlbHumanCase.idfReceivedByPerson
    @idfsHospitalizationStatus BIGINT = NULL,             -- tlbHumanCase.idfsHospitalizationStatus
    @idfHospital BIGINT = NULL,                           -- tlbHumanCase.idfHospital
    @strCurrentLocation NVARCHAR(200) = NULL,             -- tlbHumanCase.strCurrentLocation
    @datOnSetDate DATETIME = NULL,                        -- tlbHumanCase.datOnSetDate
    @idfsInitialCaseStatus BIGINT = NULL,                 -- tlbHumanCase.idfsInitialCaseStatus
    @idfsYNPreviouslySoughtCare BIGINT = NULL,            --idfsYNPreviouslySoughtCare
    @datFirstSoughtCareDate DATETIME = NULL,              --tlbHumanCase.datFirstSoughtCareDate
    @idfSoughtCareFacility BIGINT = NULL,                 --tlbHumanCase.idfSoughtCareFacility
    @idfsNonNotIFiableDiagnosis BIGINT = NULL,            --tlbHumanCase.idfsNonNotIFiableDiagnosis
    @idfsYNHospitalization BIGINT = NULL,                 -- tlbHumanCase.idfsYNHospitalization
    @datHospitalizationDate DATETIME = NULL,              --tlbHumanCase.datHospitalizationDate 
    @datDischargeDate DATETIME = NULL,                    -- tlbHumanCase.datDischargeDate
    @strHospitalName NVARCHAR(200) = NULL,                --tlbHumanCase.strHospitalizationPlace  
    @idfsYNAntimicrobialTherapy BIGINT = NULL,            --  tlbHumanCase.idfsYNAntimicrobialTherapy 
    @strAntibioticName NVARCHAR(200) = NULL,              -- tlbHumanCase.strAntimicrobialTherapyName
    @strDosage NVARCHAR(200) = NULL,                      --tlbHumanCase.strDosage
    @datFirstAdministeredDate DATETIME = NULL,            -- tlbHumanCase.datFirstAdministeredDate
    @strAntibioticComments NVARCHAR(MAX) = NULL,          -- tlbHumanCase.strClinicalNotes , or strSummaryNotes
    @idfsYNSpecIFicVaccinationAdministered BIGINT = NULL, --  tlbHumanCase.idfsYNSpecIFicVaccinationAdministered
    @idfInvestigatedByOffice BIGINT = NULL,               -- tlbHumanCase.idfInvestigatedByOffice 
    @StartDateofInvestigation DATETIME = NULL,            -- tlbHumanCase.datInvestigationStartDate
    @idfsYNRelatedToOutbreak BIGINT = NULL,               -- tlbHumanCase.idfsYNRelatedToOutbreak
    @idfOutbreak BIGINT = NULL,                           --idfOutbreak  
    @idfsYNExposureLocationKnown BIGINT = NULL,           --tlbHumanCase.idfsYNExposureLocationKnown
    @idfPointGeoLocation BIGINT = NULL,                   --tlbHumanCase.idfPointGeoLocation
    @datExposureDate DATETIME = NULL,                     -- tlbHumanCase.datExposureDate 
    @idfsGeoLocationType BIGINT = NULL,                   --tlbGeolocation.idfsGeoLocationType
    @strLocationDescription NVARCHAR(MAX) = NULL,         --tlbGeolocation.Description
    @idfsLocationCountry BIGINT = NULL,                   --tlbGeolocation.idfsCountry 
    @idfsLocationRegion BIGINT = NULL,                    --tlbGeolocation.idfsRegion
    @idfsLocationRayon BIGINT = NULL,                     --tlbGeolocation.idfsRayon
    @idfsLocationSettlement BIGINT = NULL,                --tlbGeolocation.idfsSettlement
    @intLocationLatitude FLOAT = NULL,                    --tlbGeolocation.Latittude
    @intLocationLongitude FLOAT = NULL,                   --tlbGeolocation.Longitude
    @intElevation BIGINT = NULL,                          --GISSettlement.intElevation
    @idfsLocationGroundType BIGINT = NULL,                --tlbGeolocation.GroundType
    @intLocationDistance FLOAT = NULL,                    --tlbGeolocation.Distance
    @intLocationDirection FLOAT = NULL,                   --tlbGeolocation.Alignment	
    @strForeignAddress NVARCHAR(MAX) = NULL,              --tlbGeolocation.strForeignAddress 
    @strNote NVARCHAR(MAX) = NULL,                        --tlbhumancase.strNote
    @idfsFinalCaseStatus BIGINT = NULL,                   --tlbHuanCase.idfsFinalCaseStatus 
    @idfsOutcome BIGINT = NULL,                           -- --tlbHumanCase.idfsOutcome 
    @datDateofDeath DATETIME = NULL,                      -- tlbHumanCase.datDateOfDeath 
    @idfsCaseProgressStatus BIGINT = 10109001,            --	tlbHumanCase.reportStatus, default = In-process
    @idfPersonEnteredBy BIGINT = NULL,
    @strClinicalNotes NVARCHAR(2000) = NULL,
    @idfsYNSpecimenCollected BIGINT = NULL,
    @idfsYNTestsConducted BIGINT = NULL,
    @DiseaseReportTypeID BIGINT = NULL,
    @blnClinicalDiagBasis BIT = NULL,
    @blnLabDiagBasis BIT = NULL,
    @blnEpiDiagBasis BIT = NULL,
    @DateofClassification DATETIME = NULL,
    @strSummaryNotes NVARCHAR(MAX) = NULL,
    @idfEpiObservation BIGINT = NULL,
    @idfCSObservation BIGINT = NULL,
    @idfInvestigatedByPerson BIGINT = NULL,
    @strEpidemiologistsName NVARCHAR(MAX) = NULL,
    @idfsNotCollectedReason BIGINT = NULL,
    @strNotCollectedReason NVARCHAR(200) = NULL,
    @SamplesParameters NVARCHAR(MAX) = NULL,
    @TestsParameters NVARCHAR(MAX) = NULL,
    @TestsInterpretationParameters NVARCHAR(MAX) = NULL,
    @AntiviralTherapiesParameters NVARCHAR(MAX) = NULL,
    @VaccinationsParameters NVARCHAR(MAX) = NULL,
    @ContactsParameters NVARCHAR(MAX) = NULL,
    @Events NVARCHAR(MAX) = NULL,
    @idfsHumanAgeType BIGINT = NULL,
    @intPatientAge INT = NULL,
    @datCompletionPaperFormDate DATETIME = NULL,
    @RowStatus INT,
    @idfsSite BIGINT = NULL,
    @AuditUser NVARCHAR(100) = '',
    @idfParentMonitoringSession BIGINT = NULL,
    @ConnectedTestId BIGINT = NULL
)
AS
DECLARE @ReturnCode INT = 0,
        @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
        @RowID BIGINT = NULL,
        @RowAction NCHAR = NULL,
        @OrderNumber INT,
        @SampleID BIGINT,
        @SampleTypeID BIGINT = NULL,
        @HumanID BIGINT,
        @HumanMasterID BIGINT = NULL,
        @CollectedByPersonID BIGINT = NULL,
        @CollectedByOrganizationID BIGINT = NULL,
        @CollectionDate DATETIME = NULL,
        @SentDate DATETIME = NULL,
        @EIDSSLocalOrFieldSampleID NVARCHAR(200) = NULL,
        @SampleStatusTypeID BIGINT = NULL,
        @EIDSSLaboratorySampleID NVARCHAR(200) = NULL,
        @SentToOrganizationID BIGINT = NULL,
        @ReadOnlyIndicator BIT = NULL,
        @AccessionDate DATETIME = NULL,
        @AccessionConditionTypeID BIGINT = NULL,
        @AccessionComment NVARCHAR(200) = NULL,
        @AccessionByPersonID BIGINT = NULL,
        @CurrentSiteID BIGINT = NULL,
        @TestID BIGINT,
        @TestNameTypeID BIGINT = NULL,
        @TestCategoryTypeID BIGINT = NULL,
        @TestResultTypeID BIGINT = NULL,
        @TestStatusTypeID BIGINT,
        @BatchTestID BIGINT = NULL,
        @TestNumber INT = NULL,
        @StartedDate DATETIME2 = NULL,
        @ResultDate DATETIME2 = NULL,
        @TestedByPersonID BIGINT = NULL,
        @TestedByOrganizationID BIGINT = NULL,
        @ResultEnteredByOrganizationID BIGINT = NULL,
        @ResultEnteredByPersonID BIGINT = NULL,
        @ValidatedByOrganizationID BIGINT = NULL,
        @ValidatedByPersonID BIGINT = NULL,
        @NonLaboratoryTestIndicator BIT,
        @ExternalTestIndicator BIT = NULL,
        @PerformedByOrganizationID BIGINT = NULL,
        @ReceivedDate DATETIME2 = NULL,
        @ContactPersonName NVARCHAR(200) = NULL,
        @TestHumanCaseID BIGINT = NULL,
        @TestInterpretationID BIGINT,
        @InterpretedStatusTypeID BIGINT = NULL,
        @InterpretedByOrganizationID BIGINT = NULL,
        @InterpretedByPersonID BIGINT = NULL,
        @TestingInterpretations BIGINT,
        @ValidatedStatusIndicator BIT = NULL,
        @ReportSessionCreatedIndicator BIT = NULL,
        @ValidatedComment NVARCHAR(200) = NULL,
        @InterpretedComment NVARCHAR(200) = NULL,
        @ValidatedDate DATETIME = NULL,
        @InterpretedDate DATETIME = NULL,
                                                                              -- Site alerts/notifications
        @EventId BIGINT,
        @EventTypeId BIGINT = NULL,
        @EventSiteId BIGINT = NULL,
        @EventObjectId BIGINT = NULL,
        @EventUserId BIGINT = NULL,
        @EventDiseaseId BIGINT = NULL,
        @EventLocationId BIGINT = NULL,
        @EventInformationString NVARCHAR(MAX) = NULL,
        @EventLoginSiteId BIGINT = NULL,
                                                                              -- End site alerts/notifications
        @MonitoringSessionActionID BIGINT,
        @ActionTypeID BIGINT,
        @ActionStatusTypeID BIGINT,
        @ActionDate DATETIME = NULL,
        @Comments NVARCHAR(500) = NULL,
        @DiseaseID BIGINT,
        @idfMonitoringSessionToDiagnosis BIGINT,
        @DateEntered DATETIME = GETDATE(),
        @idfMaterial BIGINT,
                                                                              -- Data audit
        @AuditUserID BIGINT = NULL,
        @AuditSiteID BIGINT = NULL,
        @DataAuditEventID BIGINT = NULL,
        @DataAuditEventTypeID BIGINT = NULL,
        @ObjectTypeID BIGINT = 10017026,                                      -- Human disease report
        @ObjectID BIGINT = @idfHumanCase,
        @ObjectTableID BIGINT = 75610000000,                                  -- tlbHumanCase
        @ObjectHumanDiseaseReportRelationshipTableID BIGINT = 53577790000000, -- HumanDiseaseReportRelationship
        @ObjectObservationTableID BIGINT = 75640000000;                       -- tlbObservation
-- End data audit
DECLARE @SamplesTemp TABLE
(
    SampleID BIGINT NOT NULL,
    SampleTypeID BIGINT NULL,
    SampleStatusTypeID BIGINT NULL,
    CollectionDate DATETIME2 NULL,
    CollectedByOrganizationID BIGINT NULL,
    CollectedByPersonID BIGINT NULL,
    SentDate DATETIME2 NULL,
    SentToOrganizationID BIGINT NULL,
    EIDSSLocalOrFieldSampleID NVARCHAR(200) NULL,
    Comments NVARCHAR(200) NULL,
    SiteID BIGINT NOT NULL,
    CurrentSiteID BIGINT NULL,
    DiseaseID BIGINT NULL,
    ReadOnlyIndicator BIT NULL,
    HumanID BIGINT NULL,
    HumanMasterID BIGINT NULL,
    RowStatus INT NOT NULL,
    RowAction CHAR(1) NULL
);
DECLARE @TestsTemp TABLE
(
    TestID BIGINT NOT NULL,
    TestNameTypeID BIGINT NULL,
    TestCategoryTypeID BIGINT NULL,
    TestResultTypeID BIGINT NULL,
    TestStatusTypeID BIGINT NOT NULL,
    DiseaseID BIGINT NULL,
    SampleID BIGINT NULL,
    BatchTestID BIGINT NULL,
    ObservationID BIGINT NULL,
    TestNumber INT NULL,
    Comments NVARCHAR NULL,
    StartedDate DATETIME2 NULL,
    ResultDate DATETIME2 NULL,
    TestedByOrganizationID BIGINT NULL,
    TestedByPersonID BIGINT NULL,
    ResultEnteredByOrganizationID BIGINT NULL,
    ResultEnteredByPersonID BIGINT NULL,
    ValidatedByOrganizationID BIGINT NULL,
    ValidatedByPersonID BIGINT NULL,
    ReadOnlyIndicator BIT NOT NULL,
    NonLaboratoryTestIndicator BIT NOT NULL,
    ExternalTestIndicator BIT NULL,
    PerformedByOrganizationID BIGINT NULL,
    ReceivedDate DATETIME2 NULL,
    ContactPersonName NVARCHAR(200) NULL,
    RowStatus INT NOT NULL,
    RowAction CHAR(1) NULL
);
DECLARE @TestsInterpretationParametersTemp TABLE
(
    TestInterpretationID BIGINT NOT NULL,
    DiseaseID BIGINT NULL,
    InterpretedStatusTypeID BIGINT NULL,
    ValidatedByOrganizationID BIGINT NULL,
    ValidatedByPersonID BIGINT NULL,
    InterpretedByOrganizationID BIGINT NULL,
    InterpretedByPersonID BIGINT NULL,
    TestID BIGINT NOT NULL,
    ValidatedStatusIndicator BIT NULL,
    ReportSessionCreatedIndicator BIT NULL,
    ValidatedComment NVARCHAR(200) NULL,
    InterpretedComment NVARCHAR(200) NULL,
    ValidatedDate DATETIME NULL,
    InterpretedDate DATETIME NULL,
    ReadOnlyIndicator BIT NOT NULL,
    RowStatus INT NOT NULL,
    RowAction INT NULL
);
DECLARE @EventsTemp TABLE
(
    EventId BIGINT NOT NULL,
    EventTypeId BIGINT NULL,
    UserId BIGINT NULL,
    SiteId BIGINT NULL,
    LoginSiteId BIGINT NULL,
    ObjectId BIGINT NULL,
    DiseaseId BIGINT NULL,
    LocationId BIGINT NULL,
    InformationString NVARCHAR(MAX) NULL
);
DECLARE @HumanDiseaseReportBeforeEdit TABLE
(
    HumanDiseaseReportID BIGINT,
    HumanID BIGINT,
    FinalStateTypeID BIGINT,
    HospitalizationStatusTypeID BIGINT,
    HumanAgeTypeID BIGINT,
    AntimicrobialTherapyTypeID BIGINT,
    HospitalizationTypeID BIGINT,
    SpecimenCollectedTypeID BIGINT,
    RelatedToOutbreakTypeID BIGINT,
    OutcomeID BIGINT,
    TentativeDiagnosisID BIGINT,
    FinalDiagnosisID BIGINT,
    InitialCaseStatusTypeID BIGINT,
    FinalCaseStatusTypeID BIGINT,
    SentByOfficeID BIGINT,
    ReceivedByOfficeID BIGINT,
    InvestigatedByOfficeID BIGINT,
    PointGeoLocationID BIGINT,
    EpiObservationID BIGINT,
    CSObservationID BIGINT,
    DeduplicationResultCaseID BIGINT,
    NotificationDate DATETIME,
    CompletionPaperFormDate DATETIME,
    FirstSoughtCareDate DATETIME,
    ModificationDate DATETIME,
    HospitalizationDate DATETIME,
    FacilityLastVisitDate DATETIME,
    ExposureDate DATETIME,
    DischargeDate DATETIME,
    OnSetDate DATETIME,
    InvestigationStartDate DATETIME,
    TentativeDiagnosisDate DATETIME,
    FinalDiagnosisDate DATETIME,
    Note NVARCHAR(2000),
    CurrentLocation NVARCHAR(200),
    HospitalizationPlace NVARCHAR(200),
    LocalIdentifier NVARCHAR(200),
    SoughtCareFacility NVARCHAR(200),
    SentByFirstName NVARCHAR(200),
    SentByPatronymicName NVARCHAR(200),
    SentByLastName NVARCHAR(200),
    ReceivedByFirstName NVARCHAR(200),
    ReceivedByPatronymicName NVARCHAR(200),
    ReceivedByLastName NVARCHAR(200),
    EpidemiologistsName NVARCHAR(200),
    NotCollectedReason NVARCHAR(200),
    ClinicalDiagnosis NVARCHAR(200),
    ClinicalNotes NVARCHAR(2000),
    SummaryNotes NVARCHAR(2000),
    PatientAge INT,
    ClinicalDiagBasisIndicator BIT,
    LabDiagBasisIndicator BIT,
    EpiDiagBasisIndicator BIT,
    PersonEnteredByID BIGINT,
    SentByPersonID BIGINT,
    ReceivedByPersonID BIGINT,
    InvestigatedByPersonID BIGINT,
    TestsConductedTypeID BIGINT,
    SoughtCareFacilityID BIGINT,
    NonNotifiableDiagnosisID BIGINT,
    NotCollectedReasonTypeID BIGINT,
    OutbreakID BIGINT,
    EnteredDate DATETIME,
    CaseID NVARCHAR(200),
    CaseProgressStatusTypeID BIGINT,
    SampleNotes NVARCHAR(1000),
    OfflineCaseID UNIQUEIDENTIFIER,
    FinalCaseClassificationDate DATETIME,
    HospitalID BIGINT,
    RowStatus INT
);
DECLARE @HumanDiseaseReportAfterEdit TABLE
(
    HumanDiseaseReportID BIGINT,
    HumanID BIGINT,
    FinalStateTypeID BIGINT,
    HospitalizationStatusTypeID BIGINT,
    HumanAgeTypeID BIGINT,
    AntimicrobialTherapyTypeID BIGINT,
    HospitalizationTypeID BIGINT,
    SpecimenCollectedTypeID BIGINT,
    RelatedToOutbreakTypeID BIGINT,
    OutcomeID BIGINT,
    TentativeDiagnosisID BIGINT,
    FinalDiagnosisID BIGINT,
    InitialCaseStatusTypeID BIGINT,
    FinalCaseStatusTypeID BIGINT,
    SentByOfficeID BIGINT,
    ReceivedByOfficeID BIGINT,
    InvestigatedByOfficeID BIGINT,
    PointGeoLocationID BIGINT,
    EpiObservationID BIGINT,
    CSObservationID BIGINT,
    DeduplicationResultCaseID BIGINT,
    NotificationDate DATETIME,
    CompletionPaperFormDate DATETIME,
    FirstSoughtCareDate DATETIME,
    ModificationDate DATETIME,
    HospitalizationDate DATETIME,
    FacilityLastVisitDate DATETIME,
    ExposureDate DATETIME,
    DischargeDate DATETIME,
    OnSetDate DATETIME,
    InvestigationStartDate DATETIME,
    TentativeDiagnosisDate DATETIME,
    FinalDiagnosisDate DATETIME,
    Note NVARCHAR(2000),
    CurrentLocation NVARCHAR(200),
    HospitalizationPlace NVARCHAR(200),
    LocalIdentifier NVARCHAR(200),
    SoughtCareFacility NVARCHAR(200),
    SentByFirstName NVARCHAR(200),
    SentByPatronymicName NVARCHAR(200),
    SentByLastName NVARCHAR(200),
    ReceivedByFirstName NVARCHAR(200),
    ReceivedByPatronymicName NVARCHAR(200),
    ReceivedByLastName NVARCHAR(200),
    EpidemiologistsName NVARCHAR(200),
    NotCollectedReason NVARCHAR(200),
    ClinicalDiagnosis NVARCHAR(200),
    ClinicalNotes NVARCHAR(2000),
    SummaryNotes NVARCHAR(2000),
    PatientAge INT,
    ClinicalDiagBasisIndicator BIT,
    LabDiagBasisIndicator BIT,
    EpiDiagBasisIndicator BIT,
    PersonEnteredByID BIGINT,
    SentByPersonID BIGINT,
    ReceivedByPersonID BIGINT,
    InvestigatedByPersonID BIGINT,
    TestsConductedTypeID BIGINT,
    SoughtCareFacilityID BIGINT,
    NonNotifiableDiagnosisID BIGINT,
    NotCollectedReasonTypeID BIGINT,
    OutbreakID BIGINT,
    EnteredDate DATETIME,
    CaseID NVARCHAR(200),
    CaseProgressStatusTypeID BIGINT,
    SampleNotes NVARCHAR(1000),
    OfflineCaseID UNIQUEIDENTIFIER,
    FinalCaseClassificationDate DATETIME,
    HospitalID BIGINT,
    RowStatus INT
);
DECLARE @SuppressSelect TABLE
(
    ReturnCode INT,
    ReturnMessage VARCHAR(200)
);
DECLARE @SuppressSelectHumanCase TABLE
(
    ReturnCode INT,
    ReturnMessage VARCHAR(200)
);
DECLARE @SuppressSelectHuman TABLE
(
    ReturnCode INT,
    ReturnMessage VARCHAR(200),
    idfHuman BIGINT
);
DECLARE @SuppressSelectGeoLocation TABLE
(
    ReturnCode INT,
    ReturnMessage VARCHAR(200),
    GeoLocationID BIGINT
);
DECLARE @ActivityParameters TABLE
(
    ActivityParameterID BIGINT,
    AnswerValue SQL_VARIANT
);
BEGIN
    BEGIN TRY
        SET @AuditUser = ISNULL(@AuditUser, '');

        SET @SamplesParameters = REPLACE(@SamplesParameters, '"0001-01-01T00:00:00"', 'null')

        INSERT INTO @SamplesTemp
        SELECT *
        FROM
            OPENJSON(@SamplesParameters)
            WITH
            (
                SampleID BIGINT,
                SampleTypeID BIGINT,
                SampleStatusTypeID BIGINT,
                CollectionDate DATETIME2,
                CollectedByOrganizationID BIGINT,
                CollectedByPersonID BIGINT,
                SentDate DATETIME2,
                SentToOrganizationID BIGINT,
                EIDSSLocalOrFieldSampleID NVARCHAR(200),
                Comments NVARCHAR(200),
                SiteID BIGINT,
                CurrentSiteID BIGINT,
                DiseaseID BIGINT,
                ReadOnlyIndicator BIT,
                HumanID BIGINT,
                HumanMasterID BIGINT,
                RowStatus INT,
                RowAction CHAR(1)
            );

        SET @TestsParameters = REPLACE(@TestsParameters, '"0001-01-01T00:00:00"', 'null')

        INSERT INTO @TestsTemp
        SELECT *
        FROM
            OPENJSON(@TestsParameters)
            WITH
            (
                TestID BIGINT,
                TestNameTypeID BIGINT,
                TestCategoryTypeID BIGINT,
                TestResultTypeID BIGINT,
                TestStatusTypeID BIGINT,
                DiseaseID BIGINT,
                SampleID BIGINT,
                BatchTestID BIGINT,
                ObservationID BIGINT,
                TestNumber INT,
                Comments NVARCHAR(500),
                StartedDate DATETIME2,
                ResultDate DATETIME2,
                TestedByOrganizationID BIGINT,
                TestedByPersonID BIGINT,
                ResultEnteredByOrganizationID BIGINT,
                ResultEnteredByPersonID BIGINT,
                ValidatedByOrganizationID BIGINT,
                ValidatedByPersonID BIGINT,
                ReadOnlyIndicator BIT,
                NonLaboratoryTestIndicator BIT,
                ExternalTestIndicator BIT,
                PerformedByOrganizationID BIGINT,
                ReceivedDate DATETIME2,
                ContactPersonName NVARCHAR(200),
                RowStatus INT,
                RowAction CHAR(1)
            );

        INSERT INTO @TestsInterpretationParametersTemp
        SELECT *
        FROM
            OPENJSON(@TestsInterpretationParameters)
            WITH
            (
                TestInterpretationID BIGINT,
                DiseaseID BIGINT,
                InterpretedStatusTypeID BIGINT,
                ValidatedByOrganizationID BIGINT,
                ValidatedByPersonID BIGINT,
                InterpretedByOrganizationID BIGINT,
                InterpretedByPersonID BIGINT,
                TestID BIGINT,
                ValidatedStatusIndicator BIT,
                ReportSessionCreatedIndicator BIT,
                ValidatedComment NVARCHAR(200),
                InterpretedComment NVARCHAR(200),
                ValidatedDate DATETIME2,
                InterpretedDate DATETIME2,
                ReadOnlyIndicator BIT,
                RowStatus INT,
                RowAction INT
            );

        INSERT INTO @EventsTemp
        SELECT *
        FROM
            OPENJSON(@Events)
            WITH
            (
                EventId BIGINT,
                EventTypeId BIGINT,
                UserId BIGINT,
                SiteId BIGINT,
                LoginSiteId BIGINT,
                ObjectId BIGINT,
                DiseaseId BIGINT,
                LocationId BIGINT,
                InformationString NVARCHAR(MAX)
            );

        BEGIN TRANSACTION

        -- Data audit
        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = userInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@AuditUser) userInfo;
        -- End data audit

        IF @idfHumanCase IS NULL
        BEGIN
            SET @DataAuditEventTypeID = 10016001; -- Data audit create event type

            -- Get next key value
            INSERT INTO @SuppressSelect
            EXEC dbo.USP_GBL_NEXTKEYID_GET 'tlbHumanCase', @idfHumanCase OUTPUT;

            -- Create a string ID for the disease report
            IF LEFT(ISNULL(@strHumanCaseID, '(new'), 4) = '(new'
            BEGIN
                INSERT INTO @SuppressSelect
                EXEC dbo.USP_GBL_NextNumber_GET 'Human Disease Report',
                                                @strHumanCaseID OUTPUT,
                                                NULL; --N'AS Session'
            END
        END
        ELSE
        BEGIN
            SET @DataAuditEventTypeID = 10016003; -- Data audit edit event type
        END

        -- Data audit
        INSERT INTO @SuppressSelect
        EXEC dbo.USSP_GBL_DataAuditEvent_GET @AuditUserID,
                                             @AuditSiteID,
                                             @DataAuditEventTypeID,
                                             @ObjectTypeID,
                                             @idfHumanCase,
                                             @ObjectTableID,
                                             @DataAuditEventID OUTPUT;
        -- End data audit

        SET @DiseaseID = @idfsFinalDiagnosis;

        DECLARE @HumanDiseasereportRelnUID BIGINT,
                @COPYHUMANACTUALTOHUMAN_ReturnCode INT = 0;

        -- Create a human record from human actual if not already present
        IF @idfHumanActual IS NOT NULL -- AND @idfHumanCase IS  NULL
        BEGIN
            INSERT INTO @SuppressSelectHumanCase
            EXEC dbo.USSP_HUM_COPY_HUMAN_SET @idfHumanActual,
                                             @DataAuditEventID,
                                             @AuditUser,
                                             @idfHuman OUTPUT,
                                             @ReturnCode OUTPUT,
                                             @ReturnMessage OUTPUT;
            IF @ReturnCode <> 0
            BEGIN
                RETURN;
            END
        END

        --TODO: Needs to be refactored to use Hierarchy
        -- Insert or update geolocation record if any of the information is provided
        IF @idfsLocationGroundType IS NOT NULL
           OR @idfsGeoLocationType IS NOT NULL
           OR @idfsLocationCountry IS NOT NULL
           OR @idfsLocationRegion IS NOT NULL
           OR @idfsLocationRayon IS NOT NULL
           OR @idfsLocationSettlement IS NOT NULL
           OR @strLocationDescription IS NOT NULL
           OR @intLocationLatitude IS NOT NULL
           OR @intLocationLongitude IS NOT NULL
           OR @intLocationDistance IS NOT NULL
           OR @intLocationDirection IS NOT NULL
           OR @strForeignAddress IS NOT NULL
           OR @intElevation IS NOT NULL
        BEGIN
            -- Set geo location 
            IF @idfPointGeoLocation IS NULL
            BEGIN
                INSERT INTO @SuppressSelect
                EXEC dbo.USP_GBL_NEXTKEYID_GET 'tlbGeoLocation',
                                               @idfPointGeoLocation OUTPUT;
            END

            BEGIN
                INSERT INTO @SuppressSelectGeoLocation
                EXEC dbo.USSP_HUM_DISEASE_GEOLOCATION_SET @idfPointGeoLocation,
                                                          @idfsLocationGroundType,
                                                          @idfsGeoLocationType,
                                                          @idfsLocationCountry,
                                                          @idfsLocationRegion,
                                                          @idfsLocationRayon,
                                                          @idfsLocationSettlement,
                                                          @strLocationDescription,
                                                          @intLocationLatitude,
                                                          @intLocationLongitude,
                                                          NULL,
                                                          @intLocationDistance,
                                                          @intLocationDirection,
                                                          @strForeignAddress,
                                                          1,
                                                          @intElevation,
                                                          @AuditUser,
                                                          @DataAuditEventID, 
                                                          @strHumanCaseID;
            END
        END

        IF NOT EXISTS
        (
            SELECT idfHumanCase
            FROM dbo.tlbHumanCase
            WHERE idfHumanCase = @idfHumanCase
                  AND intRowStatus = 0
        )
        BEGIN
            INSERT INTO dbo.tlbHumanCase
            (
                idfHumanCase,
                idfHuman,
                strCaseId,
                idfsFinalDiagnosis,
                datTentativeDiagnosisDate,
                datNotIFicationDate,
                idfsFinalState,
                strLocalIdentifier,
                idfSentByOffice,
                strSentByFirstName,
                strSentByPatronymicName,
                strSentByLastName,
                idfSentByPerson,
                idfReceivedByOffice,
                strReceivedByFirstName,
                strReceivedByPatronymicName,
                strReceivedByLastName,
                idfReceivedByPerson,
                idfsHospitalizationStatus,
                idfHospital,
                strCurrentLocation,
                datOnSetDate,
                idfsInitialCaseStatus,
                idfsYNPreviouslySoughtCare,
                datFirstSoughtCareDate,
                idfSoughtCareFacility,
                idfsNonNotIFiableDiagnosis,
                idfsYNHospitalization,
                datHospitalizationDate,
                datDischargeDate,
                strHospitalizationPlace,
                idfsYNAntimicrobialTherapy,
                strClinicalNotes,
                idfsYNSpecIFicVaccinationAdministered,
                idfInvestigatedByOffice,
                datInvestigationStartDate,
                idfsYNRelatedToOutbreak,
                idfOutbreak,
                idfPointGeoLocation,
                idfsYNExposureLocationKnown,
                datExposureDate,
                strNote,
                idfsFinalCaseStatus,
                idfsOutcome,
                intRowStatus,
                idfsCaseProgressStatus,
                datModificationDate,
                datEnteredDate,
                idfPersonEnteredBy,
                idfsYNSpecimenCollected,
                idfsYNTestsConducted,
                DiseaseReportTypeID,
                blnClinicalDiagBasis,
                blnLabDiagBasis,
                blnEpiDiagBasis,
                datFinalCaseClassificationDate,
                strsummarynotes,
                idfEpiObservation,
                idfCSObservation,
                idfInvestigatedByPerson,
                strEpidemiologistsName,
                idfsNotCollectedReason,
                strNotCollectedReason,
                idfsHumanAgeType,
                intPatientAge,
                datCompletionPaperFormDate,
                idfsSite,
                AuditCreateUser,
                idfParentMonitoringSession
            )
            VALUES
            (   @idfHumanCase,
                @idfHuman,
                @strHumanCaseId,
                @idfsFinalDiagnosis,
                @datDateOfDiagnosis,
                @datNotificationDate,
                @idfsFinalState,
                @strLocalIdentifier,
                @idfSentByOffice,
                @strSentByFirstName,
                @strSentByPatronymicName,
                @strSentByLastName,
                @idfSentByPerson,
                @idfReceivedByOffice,
                @strReceivedByFirstName,
                @strReceivedByPatronymicName,
                @strReceivedByLastName,
                @idfReceivedByPerson,
                @idfsHospitalizationStatus,
                @idfHospital,
                @strCurrentLocation,
                @datOnSetDate,
                @idfsInitialCaseStatus,
                @idfsYNPreviouslySoughtCare,
                @datFirstSoughtCareDate,
                @idfSoughtCareFacility,
                @idfsNonNotIFiableDiagnosis,
                @idfsYNHospitalization,
                @datHospitalizationDate,
                @datDischargeDate,
                @strHospitalName,
                @idfsYNAntimicrobialTherapy,
                @strClinicalNotes,
                @idfsYNSpecIFicVaccinationAdministered,
                @idfInvestigatedByOffice,
                @StartDateofInvestigation,
                @idfsYNRelatedToOutbreak,
                @idfOutbreak,
                @idfPointGeoLocation,
                @idfsYNExposureLocationKnown,
                @datExposureDate,
                @strNote,
                @idfsFinalCaseStatus,
                @idfsOutcome,
                0,
                @idfsCaseProgressStatus,
                GETDATE(), --datModificationDate	
                GETDATE(), --datEnteredDate		
                @idfPersonEnteredBy,
                @idfsYNSpecimenCollected,
                @idfsYNTestsConducted,
                @DiseaseReportTypeID,
                @blnClinicalDiagBasis,
                @blnLabDiagBasis,
                @blnEpiDiagBasis,
                @DateofClassification,
                @strSummaryNotes,
                @idfEpiObservation,
                @idfCSObservation,
                @idfInvestigatedByPerson,
                @strEpidemiologistsName,
                @idfsNotCollectedReason,
                @strNotCollectedReason,
                @idfsHumanAgeType,
                @intPatientAge,
                @datCompletionPaperFormDate,
                @idfsSite,
                @AuditUser,
                @idfParentMonitoringSession
            );

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailCreate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser, 
                strObject
            )
            VALUES
            (@DataAuditEventID,
             @ObjectTableID,
             @idfHumanCase,
             10519001,
             '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
             + CAST(@ObjectTableID AS NVARCHAR(300)) + '}]',
             @AuditUser, 
             @strHumanCaseId
            );

            -- Update data audit event ID on tlbObservation and tlbActivityParameters
            -- for flexible forms saved outside this DB transaction.
            UPDATE dbo.tauDataAuditDetailCreate
            SET idfDataAuditEvent = @DataAuditEventID,
                strObject = @strHumanCaseId
            WHERE idfObject = @idfCSObservation
                  AND idfDataAuditEvent IS NULL;

            UPDATE dbo.tauDataAuditDetailCreate
            SET idfDataAuditEvent = @DataAuditEventID,
                strObject = @strHumanCaseId
            WHERE idfObject = @idfEpiObservation
                  AND idfDataAuditEvent IS NULL;

            UPDATE dbo.tauDataAuditDetailCreate
            SET idfDataAuditEvent = @DataAuditEventID, 
                strObject = @strHumanCaseId
            WHERE idfObjectDetail = @idfCSObservation
                  AND idfDataAuditEvent IS NULL;

            UPDATE dbo.tauDataAuditDetailCreate
            SET idfDataAuditEvent = @DataAuditEventID,
                strObject = @strHumanCaseId
            WHERE idfObjectDetail = @idfEpiObservation
                  AND idfDataAuditEvent IS NULL;
            -- End data audit

            DECLARE @RelatedToRoot BIGINT;

            IF @idfHumanCaseRelatedTo IS NOT NULL
            BEGIN
                -- Establish the root
                IF NOT EXISTS
                (
                    SELECT *
                    FROM dbo.HumanDiseaseReportRelationship
                    WHERE (HumanDiseaseReportID = @idfHumanCaseRelatedTo)
                          AND (RelatedToHumanDiseaseReportIdRoot IS NOT NULL)
                          AND (intRowStatus = 0)
                )
                BEGIN
                    SET @RelatedToRoot = @idfHumanCaseRelatedTo;
                END
                ELSE
                BEGIN
                    SELECT @RelatedToRoot = RelatedToHumanDiseaseReportIdRoot
                    FROM dbo.HumanDiseaseReportRelationship
                    WHERE (HumanDiseaseReportID = @idfHumanCaseRelatedTo)
                          AND (RelatedToHumanDiseaseReportIdRoot IS NOT NULL)
                          AND (intRowStatus = 0);
                END
                -- End establishing the root

                INSERT INTO @SuppressSelect
                EXEC dbo.USP_GBL_NEXTKEYID_GET 'HumanDiseaseReportRelationship',
                                               @HumanDiseasereportRelnUID OUTPUT;

                INSERT INTO dbo.HumanDiseaseReportRelationship
                (
                    HumanDiseasereportRelnUID,
                    HumanDiseaseReportID,
                    RelateToHumanDiseaseReportID,
                    RelatedToHumanDiseaseReportIdRoot,
                    RelationshipTypeID,
                    intRowStatus,
                    AuditCreateUser,
                    AuditCreateDTM,
                    rowguid
                )
                VALUES
                (   @HumanDiseasereportRelnUID,
                    @idfHumanCase,
                    @idfHumanCaseRelatedTo,
                    @RelatedToRoot,
                    10503001, -- Linked Copy Parent
                    0,
                    @AuditUser,
                    GETDATE(),
                    NEWID()
                );

                -- Data audit
                INSERT INTO dbo.tauDataAuditDetailCreate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    SourceSystemNameID,
                    SourceSystemKeyValue,
                    AuditCreateUser, 
                    strObject
                )
                VALUES
                (@DataAuditEventID,
                 @ObjectHumanDiseaseReportRelationshipTableID,
                 @HumanDiseasereportRelnUID,
                 10519001,
                 '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
                 + CAST(@ObjectHumanDiseaseReportRelationshipTableID AS NVARCHAR(300)) + '}]',
                 @AuditUser, 
                 @strHumanCaseId
                );
            -- End data audit
            END
        END
        ELSE
        BEGIN
            INSERT INTO @HumanDiseaseReportBeforeEdit
            (
                HumanDiseaseReportID,
                HumanID,
                FinalStateTypeID,
                HospitalizationStatusTypeID,
                HumanAgeTypeID,
                AntimicrobialTherapyTypeID,
                HospitalizationTypeID,
                SpecimenCollectedTypeID,
                RelatedToOutbreakTypeID,
                OutcomeID,
                TentativeDiagnosisID,
                FinalDiagnosisID,
                InitialCaseStatusTypeID,
                FinalCaseStatusTypeID,
                SentByOfficeID,
                ReceivedByOfficeID,
                InvestigatedByOfficeID,
                PointGeoLocationID,
                EpiObservationID,
                CSObservationID,
                DeduplicationResultCaseID,
                NotificationDate,
                CompletionPaperFormDate,
                FirstSoughtCareDate,
                ModificationDate,
                HospitalizationDate,
                FacilityLastVisitDate,
                ExposureDate,
                DischargeDate,
                OnSetDate,
                InvestigationStartDate,
                TentativeDiagnosisDate,
                FinalDiagnosisDate,
                Note,
                CurrentLocation,
                HospitalizationPlace,
                LocalIdentifier,
                SoughtCareFacility,
                SentByFirstName,
                SentByPatronymicName,
                SentByLastName,
                ReceivedByFirstName,
                ReceivedByPatronymicName,
                ReceivedByLastName,
                EpidemiologistsName,
                NotCollectedReason,
                ClinicalDiagnosis,
                ClinicalNotes,
                SummaryNotes,
                PatientAge,
                ClinicalDiagBasisIndicator,
                LabDiagBasisIndicator,
                EpiDiagBasisIndicator,
                PersonEnteredByID,
                SentByPersonID,
                ReceivedByPersonID,
                InvestigatedByPersonID,
                TestsConductedTypeID,
                SoughtCareFacilityID,
                NonNotifiableDiagnosisID,
                NotCollectedReasonTypeID,
                OutbreakID,
                EnteredDate,
                CaseID,
                CaseProgressStatusTypeID,
                SampleNotes,
                OfflineCaseID,
                FinalCaseClassificationDate,
                HospitalID,
                RowStatus
            )
            SELECT idfHumanCase,
                   idfHuman,
                   idfsFinalState,
                   idfsHospitalizationStatus,
                   idfsHumanAgeType,
                   idfsYNAntimicrobialTherapy,
                   idfsYNHospitalization,
                   idfsYNSpecimenCollected,
                   idfsYNRelatedToOutbreak,
                   idfsOutcome,
                   idfsTentativeDiagnosis,
                   idfsFinalDiagnosis,
                   idfsInitialCaseStatus,
                   idfsFinalCaseStatus,
                   idfSentByOffice,
                   idfReceivedByOffice,
                   idfInvestigatedByOffice,
                   idfPointGeoLocation,
                   idfEpiObservation,
                   idfCSObservation,
                   idfDeduplicationResultCase,
                   datNotificationDate,
                   datCompletionPaperFormDate,
                   datFirstSoughtCareDate,
                   datModificationDate,
                   datHospitalizationDate,
                   datFacilityLastVisit,
                   datExposureDate,
                   datDischargeDate,
                   datOnSetDate,
                   datInvestigationStartDate,
                   datTentativeDiagnosisDate,
                   datFinalDiagnosisDate,
                   strNote,
                   strCurrentLocation,
                   strHospitalizationPlace,
                   strLocalIdentifier,
                   strSoughtCareFacility,
                   strSentByFirstName,
                   strSentByPatronymicName,
                   strSentByLastName,
                   strReceivedByFirstName,
                   strReceivedByPatronymicName,
                   strReceivedByLastName,
                   strEpidemiologistsName,
                   strNotCollectedReason,
                   strClinicalDiagnosis,
                   strClinicalNotes,
                   strSummaryNotes,
                   intPatientAge,
                   blnClinicalDiagBasis,
                   blnLabDiagBasis,
                   blnEpiDiagBasis,
                   idfPersonEnteredBy,
                   idfSentByPerson,
                   idfReceivedByPerson,
                   idfInvestigatedByPerson,
                   idfsYNTestsConducted,
                   idfSoughtCareFacility,
                   idfsNonNotifiableDiagnosis,
                   idfsNotCollectedReason,
                   idfOutbreak,
                   datEnteredDate,
                   strCaseID,
                   idfsCaseProgressStatus,
                   strSampleNotes,
                   uidOfflineCaseID,
                   datFinalCaseClassificationDate,
                   idfHospital,
                   intRowStatus
            FROM dbo.tlbHumanCase
            WHERE idfHumanCase = @idfHumanCase;

            UPDATE dbo.tlbHumanCase
            SET strCaseId = @strHumanCaseId,
                idfsTentativeDiagnosis = @idfsFinalDiagnosis,
                idfsFinalDiagnosis = @idfsFinalDiagnosis,
                datTentativeDiagnosisDate = @datDateOfDiagnosis,
                datFinalDiagnosisDate = @datDateOfDiagnosis,
                datNotIFicationDate = @datNotificationDate,
                idfsFinalState = @idfsFinalState,
                idfSentByOffice = @idfSentByOffice,
                strSentByFirstName = @strSentByFirstName,
                strSentByPatronymicName = @strSentByPatronymicName,
                strSentByLastName = @strSentByLastName,
                idfSentByPerson = @idfSentByPerson,
                idfReceivedByOffice = @idfReceivedByOffice,
                strReceivedByFirstName = @strReceivedByFirstName,
                strReceivedByPatronymicName = @strReceivedByPatronymicName,
                strReceivedByLastName = @strReceivedByLastName,
                idfReceivedByPerson = @idfReceivedByPerson,
                strLocalIdentifier = @strLocalIdentifier,
                idfsHospitalizationStatus = @idfsHospitalizationStatus,
                idfHospital = @idfHospital,
                strCurrentLocation = @strCurrentLocation,
                datOnSetDate = @datOnSetDate,
                idfsInitialCaseStatus = @idfsInitialCaseStatus,
                idfsYNPreviouslySoughtCare = @idfsYNPreviouslySoughtCare,
                datFirstSoughtCareDate = @datFirstSoughtCareDate,
                idfSoughtCareFacility = @idfSoughtCareFacility,
                idfsNonNotIFiableDiagnosis = @idfsNonNotIFiableDiagnosis,
                idfsYNHospitalization = @idfsYNHospitalization,
                datHospitalizationDate = @datHospitalizationDate,
                datDischargeDate = @datDischargeDate,
                strHospitalizationPlace = @strHospitalName,
                idfsYNAntimicrobialTherapy = @idfsYNAntimicrobialTherapy,
                strClinicalNotes = @strClinicalNotes,
                idfsYNSpecIFicVaccinationAdministered = @idfsYNSpecIFicVaccinationAdministered,
                idfInvestigatedByOffice = @idfInvestigatedByOffice,
                datInvestigationStartDate = @StartDateofInvestigation,
                idfsYNRelatedToOutbreak = @idfsYNRelatedToOutbreak,
                idfOutbreak = @idfOutbreak,
                idfsYNExposureLocationKnown = @idfsYNExposureLocationKnown,
                idfPointGeoLocation = @idfPointGeoLocation,
                datExposureDate = @datExposureDate,
                strNote = @strNote,
                idfsFinalCaseStatus = @idfsFinalCaseStatus,
                idfsOutcome = @idfsOutcome,
                idfsCaseProgressStatus = @idfsCaseProgressStatus,
                datModificationDate = GETDATE(),
                idfsYNSpecimenCollected = @idfsYNSpecimenCollected,
                idfsYNTestsConducted = @idfsYNTestsConducted,
                DiseaseReportTypeID = @DiseaseReportTypeID,
                blnClinicalDiagBasis = @blnClinicalDiagBasis,
                blnLabDiagBasis = @blnLabDiagBasis,
                blnEpiDiagBasis = @blnEpiDiagBasis,
                datFinalCaseClassificationDate = @DateofClassification,
                strsummarynotes = @strSummaryNotes,
                idfEpiObservation = @idfEpiObservation,
                idfCSObservation = @idfCSObservation,
                strEpidemiologistsName = @strEpidemiologistsName,
                idfsNotCollectedReason = @idfsNotCollectedReason,
                strNotCollectedReason = @strNotCollectedReason,
                idfsHumanAgeType = @idfsHumanAgeType,
                intPatientAge = @intPatientAge,
                datCompletionPaperFormDate = @datCompletionPaperFormDate,
                idfInvestigatedByPerson = @idfInvestigatedByPerson,
                idfPersonEnteredBy = @idfPersonEnteredBy,
                idfsSite = @idfsSite,
                AuditUpdateUser = @AuditUser,
                idfParentMonitoringSession = @idfParentMonitoringSession
            WHERE idfHumanCase = @idfHumanCase
                  AND intRowStatus = 0;

            INSERT INTO @HumanDiseaseReportAfterEdit
            (
                HumanDiseaseReportID,
                HumanID,
                FinalStateTypeID,
                HospitalizationStatusTypeID,
                HumanAgeTypeID,
                AntimicrobialTherapyTypeID,
                HospitalizationTypeID,
                SpecimenCollectedTypeID,
                RelatedToOutbreakTypeID,
                OutcomeID,
                TentativeDiagnosisID,
                FinalDiagnosisID,
                InitialCaseStatusTypeID,
                FinalCaseStatusTypeID,
                SentByOfficeID,
                ReceivedByOfficeID,
                InvestigatedByOfficeID,
                PointGeoLocationID,
                EpiObservationID,
                CSObservationID,
                DeduplicationResultCaseID,
                NotificationDate,
                CompletionPaperFormDate,
                FirstSoughtCareDate,
                ModificationDate,
                HospitalizationDate,
                FacilityLastVisitDate,
                ExposureDate,
                DischargeDate,
                OnSetDate,
                InvestigationStartDate,
                TentativeDiagnosisDate,
                FinalDiagnosisDate,
                Note,
                CurrentLocation,
                HospitalizationPlace,
                LocalIdentifier,
                SoughtCareFacility,
                SentByFirstName,
                SentByPatronymicName,
                SentByLastName,
                ReceivedByFirstName,
                ReceivedByPatronymicName,
                ReceivedByLastName,
                EpidemiologistsName,
                NotCollectedReason,
                ClinicalDiagnosis,
                ClinicalNotes,
                SummaryNotes,
                PatientAge,
                ClinicalDiagBasisIndicator,
                LabDiagBasisIndicator,
                EpiDiagBasisIndicator,
                PersonEnteredByID,
                SentByPersonID,
                ReceivedByPersonID,
                InvestigatedByPersonID,
                TestsConductedTypeID,
                SoughtCareFacilityID,
                NonNotifiableDiagnosisID,
                NotCollectedReasonTypeID,
                OutbreakID,
                EnteredDate,
                CaseID,
                CaseProgressStatusTypeID,
                SampleNotes,
                OfflineCaseID,
                FinalCaseClassificationDate,
                HospitalID,
                RowStatus
            )
            SELECT idfHumanCase,
                   idfHuman,
                   idfsFinalState,
                   idfsHospitalizationStatus,
                   idfsHumanAgeType,
                   idfsYNAntimicrobialTherapy,
                   idfsYNHospitalization,
                   idfsYNSpecimenCollected,
                   idfsYNRelatedToOutbreak,
                   idfsOutcome,
                   idfsTentativeDiagnosis,
                   idfsFinalDiagnosis,
                   idfsInitialCaseStatus,
                   idfsFinalCaseStatus,
                   idfSentByOffice,
                   idfReceivedByOffice,
                   idfInvestigatedByOffice,
                   idfPointGeoLocation,
                   idfEpiObservation,
                   idfCSObservation,
                   idfDeduplicationResultCase,
                   datNotificationDate,
                   datCompletionPaperFormDate,
                   datFirstSoughtCareDate,
                   datModificationDate,
                   datHospitalizationDate,
                   datFacilityLastVisit,
                   datExposureDate,
                   datDischargeDate,
                   datOnSetDate,
                   datInvestigationStartDate,
                   datTentativeDiagnosisDate,
                   datFinalDiagnosisDate,
                   strNote,
                   strCurrentLocation,
                   strHospitalizationPlace,
                   strLocalIdentifier,
                   strSoughtCareFacility,
                   strSentByFirstName,
                   strSentByPatronymicName,
                   strSentByLastName,
                   strReceivedByFirstName,
                   strReceivedByPatronymicName,
                   strReceivedByLastName,
                   strEpidemiologistsName,
                   strNotCollectedReason,
                   strClinicalDiagnosis,
                   strClinicalNotes,
                   strSummaryNotes,
                   intPatientAge,
                   blnClinicalDiagBasis,
                   blnLabDiagBasis,
                   blnEpiDiagBasis,
                   idfPersonEnteredBy,
                   idfSentByPerson,
                   idfReceivedByPerson,
                   idfInvestigatedByPerson,
                   idfsYNTestsConducted,
                   idfSoughtCareFacility,
                   idfsNonNotifiableDiagnosis,
                   idfsNotCollectedReason,
                   idfOutbreak,
                   datEnteredDate,
                   strCaseID,
                   idfsCaseProgressStatus,
                   strSampleNotes,
                   uidOfflineCaseID,
                   datFinalCaseClassificationDate,
                   idfHospital,
                   intRowStatus
            FROM dbo.tlbHumanCase
            WHERE idfHumanCase = @idfHumanCase;

            -- Data audit 
            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   4577900000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.HumanID,
                   a.HumanID,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.HumanID <> b.HumanID)
                  OR (
                         a.HumanID IS NOT NULL
                         AND b.HumanID IS NULL
                     )
                  OR (
                         a.HumanID IS NULL
                         AND b.HumanID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79670000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.FinalStateTypeID,
                   a.FinalStateTypeID,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.FinalStateTypeID <> b.FinalStateTypeID)
                  OR (
                         a.FinalStateTypeID IS NOT NULL
                         AND b.FinalStateTypeID IS NULL
                     )
                  OR (
                         a.FinalStateTypeID IS NULL
                         AND b.FinalStateTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79680000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.HospitalizationStatusTypeID,
                   a.HospitalizationStatusTypeID,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.HospitalizationStatusTypeID <> b.HospitalizationStatusTypeID)
                  OR (
                         a.HospitalizationStatusTypeID IS NOT NULL
                         AND b.HospitalizationStatusTypeID IS NULL
                     )
                  OR (
                         a.HospitalizationStatusTypeID IS NULL
                         AND b.HospitalizationStatusTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79690000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.HumanAgeTypeID,
                   a.HumanAgeTypeID,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.HumanAgeTypeID <> b.HumanAgeTypeID)
                  OR (
                         a.HumanAgeTypeID IS NOT NULL
                         AND b.HumanAgeTypeID IS NULL
                     )
                  OR (
                         a.HumanAgeTypeID IS NULL
                         AND b.HumanAgeTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79730000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.AntimicrobialTherapyTypeID,
                   a.AntimicrobialTherapyTypeID,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.AntimicrobialTherapyTypeID <> b.AntimicrobialTherapyTypeID)
                  OR (
                         a.AntimicrobialTherapyTypeID IS NOT NULL
                         AND b.AntimicrobialTherapyTypeID IS NULL
                     )
                  OR (
                         a.AntimicrobialTherapyTypeID IS NULL
                         AND b.AntimicrobialTherapyTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79740000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.HospitalizationTypeID,
                   a.HospitalizationTypeID,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.HospitalizationTypeID <> b.HospitalizationTypeID)
                  OR (
                         a.HospitalizationTypeID IS NOT NULL
                         AND b.HospitalizationTypeID IS NULL
                     )
                  OR (
                         a.HospitalizationTypeID IS NULL
                         AND b.HospitalizationTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79760000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.SpecimenCollectedTypeID,
                   a.SpecimenCollectedTypeID,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.SpecimenCollectedTypeID <> b.SpecimenCollectedTypeID)
                  OR (
                         a.SpecimenCollectedTypeID IS NOT NULL
                         AND b.SpecimenCollectedTypeID IS NULL
                     )
                  OR (
                         a.SpecimenCollectedTypeID IS NULL
                         AND b.SpecimenCollectedTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79750000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.RelatedToOutbreakTypeID,
                   a.RelatedToOutbreakTypeID,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.RelatedToOutbreakTypeID <> b.RelatedToOutbreakTypeID)
                  OR (
                         a.RelatedToOutbreakTypeID IS NOT NULL
                         AND b.RelatedToOutbreakTypeID IS NULL
                     )
                  OR (
                         a.RelatedToOutbreakTypeID IS NULL
                         AND b.RelatedToOutbreakTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79710000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.OutcomeID,
                   a.OutcomeID,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.OutcomeID <> b.OutcomeID)
                  OR (
                         a.OutcomeID IS NOT NULL
                         AND b.OutcomeID IS NULL
                     )
                  OR (
                         a.OutcomeID IS NULL
                         AND b.OutcomeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79720000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.TentativeDiagnosisID,
                   a.TentativeDiagnosisID,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.TentativeDiagnosisID <> b.TentativeDiagnosisID)
                  OR (
                         a.TentativeDiagnosisID IS NOT NULL
                         AND b.TentativeDiagnosisID IS NULL
                     )
                  OR (
                         a.TentativeDiagnosisID IS NULL
                         AND b.TentativeDiagnosisID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79660000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.FinalDiagnosisID,
                   a.FinalDiagnosisID,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.FinalDiagnosisID <> b.FinalDiagnosisID)
                  OR (
                         a.FinalDiagnosisID IS NOT NULL
                         AND b.FinalDiagnosisID IS NULL
                     )
                  OR (
                         a.FinalDiagnosisID IS NULL
                         AND b.FinalDiagnosisID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79700000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.InitialCaseStatusTypeID,
                   a.InitialCaseStatusTypeID,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.InitialCaseStatusTypeID <> b.InitialCaseStatusTypeID)
                  OR (
                         a.InitialCaseStatusTypeID IS NOT NULL
                         AND b.InitialCaseStatusTypeID IS NULL
                     )
                  OR (
                         a.InitialCaseStatusTypeID IS NULL
                         AND b.InitialCaseStatusTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   855690000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.FinalCaseStatusTypeID,
                   a.FinalCaseStatusTypeID,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.FinalCaseStatusTypeID <> b.FinalCaseStatusTypeID)
                  OR (
                         a.FinalCaseStatusTypeID IS NOT NULL
                         AND b.FinalCaseStatusTypeID IS NULL
                     )
                  OR (
                         a.FinalCaseStatusTypeID IS NULL
                         AND b.FinalCaseStatusTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   855700000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.SentByOfficeID,
                   a.SentByOfficeID,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.SentByOfficeID <> b.SentByOfficeID)
                  OR (
                         a.SentByOfficeID IS NOT NULL
                         AND b.SentByOfficeID IS NULL
                     )
                  OR (
                         a.SentByOfficeID IS NULL
                         AND b.SentByOfficeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79640000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.ReceivedByOfficeID,
                   a.ReceivedByOfficeID,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.ReceivedByOfficeID <> b.ReceivedByOfficeID)
                  OR (
                         a.ReceivedByOfficeID IS NOT NULL
                         AND b.ReceivedByOfficeID IS NULL
                     )
                  OR (
                         a.ReceivedByOfficeID IS NULL
                         AND b.ReceivedByOfficeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79620000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.InvestigatedByOfficeID,
                   a.InvestigatedByOfficeID,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.InvestigatedByOfficeID <> b.InvestigatedByOfficeID)
                  OR (
                         a.InvestigatedByOfficeID IS NOT NULL
                         AND b.InvestigatedByOfficeID IS NULL
                     )
                  OR (
                         a.InvestigatedByOfficeID IS NULL
                         AND b.InvestigatedByOfficeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79630000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.PointGeoLocationID,
                   a.PointGeoLocationID,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.PointGeoLocationID <> b.PointGeoLocationID)
                  OR (
                         a.PointGeoLocationID IS NOT NULL
                         AND b.PointGeoLocationID IS NULL
                     )
                  OR (
                         a.PointGeoLocationID IS NULL
                         AND b.PointGeoLocationID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   855710000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.EpiObservationID,
                   a.EpiObservationID,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.EpiObservationID <> b.EpiObservationID)
                  OR (
                         a.EpiObservationID IS NOT NULL
                         AND b.EpiObservationID IS NULL
                     )
                  OR (
                         a.EpiObservationID IS NULL
                         AND b.EpiObservationID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   855720000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.CSObservationID,
                   a.CSObservationID,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.CSObservationID <> b.CSObservationID)
                  OR (
                         a.CSObservationID IS NOT NULL
                         AND b.CSObservationID IS NULL
                     )
                  OR (
                         a.CSObservationID IS NULL
                         AND b.CSObservationID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   855730000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.DeduplicationResultCaseID,
                   a.DeduplicationResultCaseID,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.DeduplicationResultCaseID <> b.DeduplicationResultCaseID)
                  OR (
                         a.DeduplicationResultCaseID IS NOT NULL
                         AND b.DeduplicationResultCaseID IS NULL
                     )
                  OR (
                         a.DeduplicationResultCaseID IS NULL
                         AND b.DeduplicationResultCaseID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   855740000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.NotificationDate,
                   a.NotificationDate,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.NotificationDate <> b.NotificationDate)
                  OR (
                         a.NotificationDate IS NOT NULL
                         AND b.NotificationDate IS NULL
                     )
                  OR (
                         a.NotificationDate IS NULL
                         AND b.NotificationDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79520000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.CompletionPaperFormDate,
                   a.CompletionPaperFormDate,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.CompletionPaperFormDate <> b.CompletionPaperFormDate)
                  OR (
                         a.CompletionPaperFormDate IS NOT NULL
                         AND b.CompletionPaperFormDate IS NULL
                     )
                  OR (
                         a.CompletionPaperFormDate IS NULL
                         AND b.CompletionPaperFormDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   855750000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.FirstSoughtCareDate,
                   a.FirstSoughtCareDate,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.FirstSoughtCareDate <> b.FirstSoughtCareDate)
                  OR (
                         a.FirstSoughtCareDate IS NOT NULL
                         AND b.FirstSoughtCareDate IS NULL
                     )
                  OR (
                         a.FirstSoughtCareDate IS NULL
                         AND b.FirstSoughtCareDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79590000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.ModificationDate,
                   a.ModificationDate,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.ModificationDate <> b.ModificationDate)
                  OR (
                         a.ModificationDate IS NOT NULL
                         AND b.ModificationDate IS NULL
                     )
                  OR (
                         a.ModificationDate IS NULL
                         AND b.ModificationDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79570000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.HospitalizationDate,
                   a.HospitalizationDate,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.HospitalizationDate <> b.HospitalizationDate)
                  OR (
                         a.HospitalizationDate IS NOT NULL
                         AND b.HospitalizationDate IS NULL
                     )
                  OR (
                         a.HospitalizationDate IS NULL
                         AND b.HospitalizationDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79550000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.FacilityLastVisitDate,
                   a.FacilityLastVisitDate,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.FacilityLastVisitDate <> b.FacilityLastVisitDate)
                  OR (
                         a.FacilityLastVisitDate IS NOT NULL
                         AND b.FacilityLastVisitDate IS NULL
                     )
                  OR (
                         a.FacilityLastVisitDate IS NULL
                         AND b.FacilityLastVisitDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79540000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.ExposureDate,
                   a.ExposureDate,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.ExposureDate <> b.ExposureDate)
                  OR (
                         a.ExposureDate IS NOT NULL
                         AND b.ExposureDate IS NULL
                     )
                  OR (
                         a.ExposureDate IS NULL
                         AND b.ExposureDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79530000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.DischargeDate,
                   a.DischargeDate,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.DischargeDate <> b.DischargeDate)
                  OR (
                         a.DischargeDate IS NOT NULL
                         AND b.DischargeDate IS NULL
                     )
                  OR (
                         a.DischargeDate IS NULL
                         AND b.DischargeDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   855760000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.OnSetDate,
                   a.OnSetDate,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.OnSetDate <> b.OnSetDate)
                  OR (
                         a.OnSetDate IS NOT NULL
                         AND b.OnSetDate IS NULL
                     )
                  OR (
                         a.OnSetDate IS NULL
                         AND b.OnSetDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79580000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.InvestigationStartDate,
                   a.InvestigationStartDate,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.InvestigationStartDate <> b.InvestigationStartDate)
                  OR (
                         a.InvestigationStartDate IS NOT NULL
                         AND b.InvestigationStartDate IS NULL
                     )
                  OR (
                         a.InvestigationStartDate IS NULL
                         AND b.InvestigationStartDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79600000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.TentativeDiagnosisDate,
                   a.TentativeDiagnosisDate,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.TentativeDiagnosisDate <> b.TentativeDiagnosisDate)
                  OR (
                         a.TentativeDiagnosisDate IS NOT NULL
                         AND b.TentativeDiagnosisDate IS NULL
                     )
                  OR (
                         a.TentativeDiagnosisDate IS NULL
                         AND b.TentativeDiagnosisDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79560000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.FinalDiagnosisDate,
                   a.FinalDiagnosisDate,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.FinalDiagnosisDate <> b.FinalDiagnosisDate)
                  OR (
                         a.FinalDiagnosisDate IS NOT NULL
                         AND b.FinalDiagnosisDate IS NULL
                     )
                  OR (
                         a.FinalDiagnosisDate IS NULL
                         AND b.FinalDiagnosisDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79840000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.Note,
                   a.Note,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.Note <> b.Note)
                  OR (
                         a.Note IS NOT NULL
                         AND b.Note IS NULL
                     )
                  OR (
                         a.Note IS NULL
                         AND b.Note IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79790000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.CurrentLocation,
                   a.CurrentLocation,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.CurrentLocation <> b.CurrentLocation)
                  OR (
                         a.CurrentLocation IS NOT NULL
                         AND b.CurrentLocation IS NULL
                     )
                  OR (
                         a.CurrentLocation IS NULL
                         AND b.CurrentLocation IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79810000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.HospitalizationPlace,
                   a.HospitalizationPlace,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.HospitalizationPlace <> b.HospitalizationPlace)
                  OR (
                         a.HospitalizationPlace IS NOT NULL
                         AND b.HospitalizationPlace IS NULL
                     )
                  OR (
                         a.HospitalizationPlace IS NULL
                         AND b.HospitalizationPlace IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79820000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.LocalIdentifier,
                   a.LocalIdentifier,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.LocalIdentifier <> b.LocalIdentifier)
                  OR (
                         a.LocalIdentifier IS NOT NULL
                         AND b.LocalIdentifier IS NULL
                     )
                  OR (
                         a.LocalIdentifier IS NULL
                         AND b.LocalIdentifier IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79910000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.SoughtCareFacility,
                   a.SoughtCareFacility,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.SoughtCareFacility <> b.SoughtCareFacility)
                  OR (
                         a.SoughtCareFacility IS NOT NULL
                         AND b.SoughtCareFacility IS NULL
                     )
                  OR (
                         a.SoughtCareFacility IS NULL
                         AND b.SoughtCareFacility IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79880000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.SentByFirstName,
                   a.SentByFirstName,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.SentByFirstName <> b.SentByFirstName)
                  OR (
                         a.SentByFirstName IS NOT NULL
                         AND b.SentByFirstName IS NULL
                     )
                  OR (
                         a.SentByFirstName IS NULL
                         AND b.SentByFirstName IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79900000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.SentByPatronymicName,
                   a.SentByPatronymicName,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.SentByPatronymicName <> b.SentByPatronymicName)
                  OR (
                         a.SentByPatronymicName IS NOT NULL
                         AND b.SentByPatronymicName IS NULL
                     )
                  OR (
                         a.SentByPatronymicName IS NULL
                         AND b.SentByPatronymicName IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79890000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.SentByLastName,
                   a.SentByLastName,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.SentByLastName <> b.SentByLastName)
                  OR (
                         a.SentByLastName IS NOT NULL
                         AND b.SentByLastName IS NULL
                     )
                  OR (
                         a.SentByLastName IS NULL
                         AND b.SentByLastName IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79850000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.ReceivedByFirstName,
                   a.ReceivedByFirstName,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.ReceivedByFirstName <> b.ReceivedByFirstName)
                  OR (
                         a.ReceivedByFirstName IS NOT NULL
                         AND b.ReceivedByFirstName IS NULL
                     )
                  OR (
                         a.ReceivedByFirstName IS NULL
                         AND b.ReceivedByFirstName IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79870000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.ReceivedByPatronymicName,
                   a.ReceivedByPatronymicName,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.ReceivedByPatronymicName <> b.ReceivedByPatronymicName)
                  OR (
                         a.ReceivedByPatronymicName IS NOT NULL
                         AND b.ReceivedByPatronymicName IS NULL
                     )
                  OR (
                         a.ReceivedByPatronymicName IS NULL
                         AND b.ReceivedByPatronymicName IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79860000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.ReceivedByLastName,
                   a.ReceivedByLastName,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.ReceivedByLastName <> b.ReceivedByLastName)
                  OR (
                         a.ReceivedByLastName IS NOT NULL
                         AND b.ReceivedByLastName IS NULL
                     )
                  OR (
                         a.ReceivedByLastName IS NULL
                         AND b.ReceivedByLastName IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79800000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.EpidemiologistsName,
                   a.EpidemiologistsName,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.EpidemiologistsName <> b.EpidemiologistsName)
                  OR (
                         a.EpidemiologistsName IS NOT NULL
                         AND b.EpidemiologistsName IS NULL
                     )
                  OR (
                         a.EpidemiologistsName IS NULL
                         AND b.EpidemiologistsName IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79830000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.NotCollectedReason,
                   a.NotCollectedReason,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.NotCollectedReason <> b.NotCollectedReason)
                  OR (
                         a.NotCollectedReason IS NOT NULL
                         AND b.NotCollectedReason IS NULL
                     )
                  OR (
                         a.NotCollectedReason IS NULL
                         AND b.NotCollectedReason IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79780000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.ClinicalDiagnosis,
                   a.ClinicalDiagnosis,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.ClinicalDiagnosis <> b.ClinicalDiagnosis)
                  OR (
                         a.ClinicalDiagnosis IS NOT NULL
                         AND b.ClinicalDiagnosis IS NULL
                     )
                  OR (
                         a.ClinicalDiagnosis IS NULL
                         AND b.ClinicalDiagnosis IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   855770000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.ClinicalNotes,
                   a.ClinicalNotes,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.ClinicalNotes <> b.ClinicalNotes)
                  OR (
                         a.ClinicalNotes IS NOT NULL
                         AND b.ClinicalNotes IS NULL
                     )
                  OR (
                         a.ClinicalNotes IS NULL
                         AND b.ClinicalNotes IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   855780000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.SummaryNotes,
                   a.SummaryNotes,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.SummaryNotes <> b.SummaryNotes)
                  OR (
                         a.SummaryNotes IS NOT NULL
                         AND b.SummaryNotes IS NULL
                     )
                  OR (
                         a.SummaryNotes IS NULL
                         AND b.SummaryNotes IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79770000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.PatientAge,
                   a.PatientAge,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.PatientAge <> b.PatientAge)
                  OR (
                         a.PatientAge IS NOT NULL
                         AND b.PatientAge IS NULL
                     )
                  OR (
                         a.PatientAge IS NULL
                         AND b.PatientAge IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79490000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.ClinicalDiagBasisIndicator,
                   a.ClinicalDiagBasisIndicator,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.ClinicalDiagBasisIndicator <> b.ClinicalDiagBasisIndicator)
                  OR (
                         a.ClinicalDiagBasisIndicator IS NOT NULL
                         AND b.ClinicalDiagBasisIndicator IS NULL
                     )
                  OR (
                         a.ClinicalDiagBasisIndicator IS NULL
                         AND b.ClinicalDiagBasisIndicator IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79510000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.LabDiagBasisIndicator,
                   a.LabDiagBasisIndicator,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.LabDiagBasisIndicator <> b.LabDiagBasisIndicator)
                  OR (
                         a.LabDiagBasisIndicator IS NOT NULL
                         AND b.LabDiagBasisIndicator IS NULL
                     )
                  OR (
                         a.LabDiagBasisIndicator IS NULL
                         AND b.LabDiagBasisIndicator IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79500000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.EpiDiagBasisIndicator,
                   a.EpiDiagBasisIndicator,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.EpiDiagBasisIndicator <> b.EpiDiagBasisIndicator)
                  OR (
                         a.EpiDiagBasisIndicator IS NOT NULL
                         AND b.EpiDiagBasisIndicator IS NULL
                     )
                  OR (
                         a.EpiDiagBasisIndicator IS NULL
                         AND b.EpiDiagBasisIndicator IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   4577910000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.PersonEnteredByID,
                   a.PersonEnteredByID,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.PersonEnteredByID <> b.PersonEnteredByID)
                  OR (
                         a.PersonEnteredByID IS NOT NULL
                         AND b.PersonEnteredByID IS NULL
                     )
                  OR (
                         a.PersonEnteredByID IS NULL
                         AND b.PersonEnteredByID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   4578390000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.SentByPersonID,
                   a.SentByPersonID,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.SentByPersonID <> b.SentByPersonID)
                  OR (
                         a.SentByPersonID IS NOT NULL
                         AND b.SentByPersonID IS NULL
                     )
                  OR (
                         a.SentByPersonID IS NULL
                         AND b.SentByPersonID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   4578400000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.ReceivedByPersonID,
                   a.ReceivedByPersonID,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.ReceivedByPersonID <> b.ReceivedByPersonID)
                  OR (
                         a.ReceivedByPersonID IS NOT NULL
                         AND b.ReceivedByPersonID IS NULL
                     )
                  OR (
                         a.ReceivedByPersonID IS NULL
                         AND b.ReceivedByPersonID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   4578410000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.InvestigatedByPersonID,
                   a.InvestigatedByPersonID,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.InvestigatedByPersonID <> b.InvestigatedByPersonID)
                  OR (
                         a.InvestigatedByPersonID IS NOT NULL
                         AND b.InvestigatedByPersonID IS NULL
                     )
                  OR (
                         a.InvestigatedByPersonID IS NULL
                         AND b.InvestigatedByPersonID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   4578420000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.TestsConductedTypeID,
                   a.TestsConductedTypeID,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.TestsConductedTypeID <> b.TestsConductedTypeID)
                  OR (
                         a.TestsConductedTypeID IS NOT NULL
                         AND b.TestsConductedTypeID IS NULL
                     )
                  OR (
                         a.TestsConductedTypeID IS NULL
                         AND b.TestsConductedTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   12014650000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.SoughtCareFacilityID,
                   a.SoughtCareFacilityID,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.SoughtCareFacilityID <> b.SoughtCareFacilityID)
                  OR (
                         a.SoughtCareFacilityID IS NOT NULL
                         AND b.SoughtCareFacilityID IS NULL
                     )
                  OR (
                         a.SoughtCareFacilityID IS NULL
                         AND b.SoughtCareFacilityID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   12014660000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.NonNotifiableDiagnosisID,
                   a.NonNotifiableDiagnosisID,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.NonNotifiableDiagnosisID <> b.NonNotifiableDiagnosisID)
                  OR (
                         a.NonNotifiableDiagnosisID IS NOT NULL
                         AND b.NonNotifiableDiagnosisID IS NULL
                     )
                  OR (
                         a.NonNotifiableDiagnosisID IS NULL
                         AND b.NonNotifiableDiagnosisID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   12014670000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.NotCollectedReasonTypeID,
                   a.NotCollectedReasonTypeID,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.NotCollectedReasonTypeID <> b.NotCollectedReasonTypeID)
                  OR (
                         a.NotCollectedReasonTypeID IS NOT NULL
                         AND b.NotCollectedReasonTypeID IS NULL
                     )
                  OR (
                         a.NotCollectedReasonTypeID IS NULL
                         AND b.NotCollectedReasonTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   12665410000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.OutbreakID,
                   a.OutbreakID,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.OutbreakID <> b.OutbreakID)
                  OR (
                         a.OutbreakID IS NOT NULL
                         AND b.OutbreakID IS NULL
                     )
                  OR (
                         a.OutbreakID IS NULL
                         AND b.OutbreakID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   12665420000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.EnteredDate,
                   a.EnteredDate,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.EnteredDate <> b.EnteredDate)
                  OR (
                         a.EnteredDate IS NOT NULL
                         AND b.EnteredDate IS NULL
                     )
                  OR (
                         a.EnteredDate IS NULL
                         AND b.EnteredDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   12665430000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.CaseID,
                   a.CaseID,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.CaseID <> b.CaseID)
                  OR (
                         a.CaseID IS NOT NULL
                         AND b.CaseID IS NULL
                     )
                  OR (
                         a.CaseID IS NULL
                         AND b.CaseID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   12665440000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.CaseProgressStatusTypeID,
                   a.CaseProgressStatusTypeID,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.CaseProgressStatusTypeID <> b.CaseProgressStatusTypeID)
                  OR (
                         a.CaseProgressStatusTypeID IS NOT NULL
                         AND b.CaseProgressStatusTypeID IS NULL
                     )
                  OR (
                         a.CaseProgressStatusTypeID IS NULL
                         AND b.CaseProgressStatusTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   12665450000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.SampleNotes,
                   a.SampleNotes,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.SampleNotes <> b.SampleNotes)
                  OR (
                         a.SampleNotes IS NOT NULL
                         AND b.SampleNotes IS NULL
                     )
                  OR (
                         a.SampleNotes IS NULL
                         AND b.SampleNotes IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   12665460000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.OfflineCaseID,
                   a.OfflineCaseID,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.OfflineCaseID <> b.OfflineCaseID)
                  OR (
                         a.OfflineCaseID IS NOT NULL
                         AND b.OfflineCaseID IS NULL
                     )
                  OR (
                         a.OfflineCaseID IS NULL
                         AND b.OfflineCaseID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   51389570000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.FinalCaseClassificationDate,
                   a.FinalCaseClassificationDate,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.FinalCaseClassificationDate <> b.FinalCaseClassificationDate)
                  OR (
                         a.FinalCaseClassificationDate IS NOT NULL
                         AND b.FinalCaseClassificationDate IS NULL
                     )
                  OR (
                         a.FinalCaseClassificationDate IS NULL
                         AND b.FinalCaseClassificationDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   51523420000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.HospitalID,
                   a.HospitalID,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.HospitalID <> b.HospitalID)
                  OR (
                         a.HospitalID IS NOT NULL
                         AND b.HospitalID IS NULL
                     )
                  OR (
                         a.HospitalID IS NULL
                         AND b.HospitalID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailRestore
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                idfObjectDetail,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   a.HumanDiseaseReportID,
                   NULL,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE a.RowStatus = 0
                  AND b.RowStatus = 1;

            -- Update data audit event ID on tlbActivityParameters
            -- for flexible forms saved outside this DB transaction.
            UPDATE dbo.tauDataAuditDetailUpdate
            SET idfDataAuditEvent = @DataAuditEventID, 
                strObject = @strHumanCaseId 
            WHERE idfObjectDetail = @idfCSObservation
                  AND idfDataAuditEvent IS NULL;

            UPDATE dbo.tauDataAuditDetailUpdate
            SET idfDataAuditEvent = @DataAuditEventID, 
                strObject = @strHumanCaseId 
            WHERE idfObjectDetail = @idfEpiObservation
                  AND idfDataAuditEvent IS NULL;
        -- End data audit
        END

        -- Set samples
        IF @SamplesParameters IS NOT NULL
        BEGIN
            WHILE EXISTS (SELECT * FROM @SamplesTemp)
            BEGIN
                SELECT TOP 1
                    @RowID = SampleID,
                    @SampleID = SampleID,
                    @SampleTypeID = SampleTypeID,
                    @CollectedByPersonID = CollectedByPersonID,
                    @CollectedByOrganizationID = CollectedByOrganizationID,
                    @CollectionDate = CAST(CollectionDate AS DATETIME),
                    @SentDate = CAST(SentDate AS DATETIME),
                    @EIDSSLocalOrFieldSampleID = EIDSSLocalOrFieldSampleID,
                    @SampleStatusTypeID = SampleStatusTypeID,
                    @Comments = Comments,
                    @idfsSite = SiteID,
                    @CurrentSiteID = CurrentSiteID,
                    @RowStatus = RowStatus,
                    @SentToOrganizationID = SentToOrganizationID,
                    @DiseaseID = DiseaseID,
                    @ReadOnlyIndicator = ReadOnlyIndicator,
                    @HumanID = HumanID,
                    @HumanMasterID = HumanMasterID,
                    @RowAction = RowAction
                FROM @SamplesTemp;

                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_GBL_SAMPLES_SET @AuditUserName = @AuditUser,
                                                 @DataAuditEventID = @DataAuditEventID,
                                                 @SampleID = @SampleID OUTPUT,
                                                 @SampleTypeID = @SampleTypeID,
                                                 @RootSampleID = NULL,
                                                 @ParentSampleID = NULL,
                                                 @HumanID = @idfHuman,
                                                 @SpeciesID = NULL,
                                                 @AnimalID = NULL,
                                                 @VectorID = NULL,
                                                 @MonitoringSessionID = @idfParentMonitoringSession,
                                                 @VectorSessionID = NULL,
                                                 @HumanDiseaseReportID = @idfHumanCase,
                                                 @VeterinaryDiseaseReportID = NULL,
                                                 @CollectionDate = @CollectionDate,
                                                 @CollectedByPersonID = @CollectedByPersonID,
                                                 @CollectedByOrganizationID = @CollectedByOrganizationID,
                                                 @SentDate = @SentDate,
                                                 @SentToOrganizationID = @SentToOrganizationID,
                                                 @EIDSSLocalFieldSampleID = @EIDSSLocalOrFieldSampleID,
                                                 @SiteID = @idfsSite,
                                                 @EnteredDate = @DateEntered,
                                                 @ReadOnlyIndicator = @ReadOnlyIndicator,
                                                 @SampleStatusTypeID = @SampleStatusTypeID,
                                                 @Comments = @Comments,
                                                 @CurrentSiteID = @CurrentSiteID,
                                                 @DiseaseID = @DiseaseID,
                                                 @BirdStatusTypeID = NULL,
                                                 @RowStatus = @RowStatus,
                                                 @RowAction = @RowAction

                UPDATE @TestsTemp
                SET SampleID = @SampleID
                WHERE SampleID = @RowID

                DELETE FROM @SamplesTemp
                WHERE SampleID = @RowID
            END
        END
        IF @TestsParameters IS NOT NULL
        BEGIN
            WHILE EXISTS (SELECT * FROM @TestsTemp)
            BEGIN
                SELECT TOP 1
                    @RowID = TestID,
                    @TestID = TestID,
                    @TestNameTypeID = TestNameTypeID,
                    @TestCategoryTypeID = TestCategoryTypeID,
                    @TestResultTypeID = TestResultTypeID,
                    @TestStatusTypeID = TestStatusTypeID,
                    @DiseaseID = DiseaseID,
                    @SampleID = SampleID,
                    @Comments = Comments,
                    @RowStatus = RowStatus,
                    @StartedDate = StartedDate,
                    @ResultDate = ResultDate,
                    @TestedByOrganizationID = TestedByOrganizationID,
                    @TestedByPersonID = TestedByPersonID,
                    @ResultEnteredByOrganizationID = ResultEnteredByOrganizationID,
                    @ResultEnteredByPersonID = ResultEnteredByPersonID,
                    @ValidatedByOrganizationID = ValidatedByOrganizationID,
                    @ValidatedByPersonID = ValidatedByPersonID,
                    @ReadOnlyIndicator = ReadOnlyIndicator,
                    @NonLaboratoryTestIndicator = NonLaboratoryTestIndicator,
                    @ExternalTestIndicator = ExternalTestIndicator,
                    @PerformedByOrganizationID = PerformedByOrganizationID,
                    @ReceivedDate = ReceivedDate,
                    @ContactPersonName = ContactPersonName,
                    @RowAction = RowAction
                FROM @TestsTemp;

                -- If the record is being soft-@HumanDiseaseReportAfterEdit, then check if the test record was originally created 
                -- in the laboaratory module.  If it was, then disassociate the test record from the 
                -- human disease report, so that the test record remains in the laboratory module 
                -- for further action.
                SET @TestHumanCaseID = @idfHumanCase;

                -- If @HumanDiseaseReportAfterEdit and it's a disease report entered test, then just soft-delete the test.
                IF @RowStatus = 1
                   AND @NonLaboratoryTestIndicator = 1
                BEGIN
                    SET @RowStatus = 1;
                END

                -- If @HumanDiseaseReportAfterEdit and it's a laboratory module entered test, then just disassociate from the disease report.
                ELSE IF (@RowStatus = 1 AND @NonLaboratoryTestIndicator = 0)
                BEGIN
                    SET @RowStatus = 0;
                    SET @TestHumanCaseID = NULL;
                END;

                -- Set tests
                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_GBL_TESTS_SET @LanguageID = @LanguageID,
                                               @TestID = @TestID OUTPUT,
                                               @TestNameTypeID = @TestNameTypeID,
                                               @TestCategoryTypeID = @TestCategoryTypeID,
                                               @TestResultTypeID = @TestResultTypeID,
                                               @TestStatusTypeID = @TestStatusTypeID,
                                               @DiseaseID = @DiseaseID,
                                               @SampleID = @SampleID,
                                               @BatchTestID = NULL,
                                               @ObservationID = NULL,
                                               @TestNumber = NULL,
                                               @Comments = @Comments,
                                               @RowStatus = @RowStatus,
                                               @StartedDate = @StartedDate,
                                               @ResultDate = @ResultDate,
                                               @TestedByOrganizationID = @TestedByOrganizationID,
                                               @TestedByPersonID = @TestedByPersonID,
                                               @ResultEnteredByOrganizationID = @ResultEnteredByOrganizationID,
                                               @ResultEnteredByPersonID = @ResultEnteredByPersonID,
                                               @ValidatedByOrganizationID = @ValidatedByOrganizationID,
                                               @ValidatedByPersonID = @ValidatedByPersonID,
                                               @ReadOnlyIndicator = @ReadOnlyIndicator,
                                               @NonLaboratoryTestIndicator = @NonLaboratoryTestIndicator,
                                               @ExternalTestIndicator = @ExternalTestIndicator,
                                               @PerformedByOrganizationID = @PerformedByOrganizationID,
                                               @ReceivedDate = @ReceivedDate,
                                               @ContactPerson = @ContactPersonName,
                                               @MonitoringSessionID = @idfParentMonitoringSession,
                                               @VectorSessionID = NULL,
                                               @HumanDiseaseReportID = @TestHumanCaseID,
                                               @VeterinaryDiseaseReportID = NULL,
                                               @AuditUserName = @AuditUser,
                                               @DataAuditEventID = @DataAuditEventID,
                                               @RowAction = @RowAction;

                UPDATE @TestsInterpretationParametersTemp
                SET TestID = @TestID
                WHERE TestID = @RowID;

                DELETE FROM @TestsTemp
                WHERE TestID = @RowID;
            END;
        END

        DECLARE @SampleCount INT;
        SET @SampleCount =
        (
            SELECT Count(*)
            FROM dbo.tlbMaterial
            WHERE intRowStatus = 0
                  and idfHumanCase = @idfHumanCase
        );

        DECLARE @SampleToDeleteID BIGINT = NULL;
        DECLARE @SamplesToDelete TABLE (SampleID BIGINT);

        INSERT INTO @SamplesToDelete
        SELECT idfMaterial
        FROM dbo.tlbMaterial
        WHERE idfHumanCase = @idfHumanCase;

        DECLARE @BeforeNotCollectedReason BIGINT = (
                                                       SELECT idfsNotCollectedReason
                                                       FROM dbo.tlbHumanCase
                                                       WHERE idfHumanCase = @idfHumanCase
                                                   );

        IF EXISTS
        (
            SELECT *
            FROM dbo.tlbHumanCase
            WHERE idfHumanCase = @idfHumanCase
                  AND idfsYNSpecimenCollected = 10100002
        )
        BEGIN
            SET @ObjectTableID = 75620000000; -- tlbMaterial
            UPDATE dbo.tlbMaterial
            SET intRowStatus = 1,
                AuditUpdateUser = @AuditUser
            WHERE idfHumanCase = @idfHumanCase;

            WHILE EXISTS (SELECT * FROM @SamplesToDelete)
            BEGIN
                SELECT TOP 1
                    @SampleToDeleteID = SampleID
                FROM @SamplesToDelete;

                -- Data audit
                INSERT INTO dbo.tauDataAuditDetailDelete
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject, 
                    strObject
                )
                VALUES
                (@DataAuditEventid, @ObjectTableID, @SampleToDeleteID, @strHumanCaseId);
                -- End data audit

                DELETE FROM @SamplesToDelete
                WHERE SampleID = @SampleToDeleteID;
            END
        END
        ELSE IF EXISTS
        (
            SELECT *
            FROM dbo.tlbHumanCase
            WHERE idfHumanCase = @idfHumanCase
                  AND idfsYNSpecimenCollected = 10100003
        )
        BEGIN
            UPDATE dbo.tlbHumanCase
            SET idfsNotCollectedReason = NULL,
                AuditUpdateUser = @AuditUser
            WHERE idfHumanCase = @idfHumanCase;

            -- Data audit
            IF @BeforeNotCollectedReason IS NOT NULL
            BEGIN
                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser, 
                    strObject
                )
                SELECT @DataAuditEventId,
                       @ObjectTableID,
                       12014670000000,
                       @idfHumanCase,
                       NULL,
                       @BeforeNotCollectedReason,
                       NULL,
                       @AuditUser, 
                       @strHumanCaseId;
            END
            -- End data audit

            SET @ObjectTableID = 75620000000; -- tlbMaterial
            UPDATE dbo.tlbMaterial
            SET intRowStatus = 1,
                AuditUpdateUser = @AuditUser
            WHERE idfHumanCase = @idfHumanCase;

            WHILE EXISTS (SELECT * FROM @SamplesToDelete)
            BEGIN
                SELECT TOP 1
                    @SampleToDeleteID = SampleID
                FROM @SamplesToDelete;

                -- Data audit
                INSERT INTO dbo.tauDataAuditDetailDelete
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject, 
                    strObject
                )
                VALUES
                (@DataAuditEventid, @ObjectTableID, @SampleToDeleteID, @strHumanCaseId);
                -- End data audit

                DELETE FROM @SamplesToDelete
                WHERE SampleID = @SampleToDeleteID;
            END
        END
        ELSE IF EXISTS
        (
            SELECT *
            FROM dbo.tlbHumanCase
            WHERE idfHumanCase = @idfHumanCase
                  AND idfsYNSpecimenCollected = 10100001
        )
        BEGIN
            UPDATE dbo.tlbHumanCase
            SET idfsNotCollectedReason = NULL,
                AuditUpdateUser = @AuditUser
            WHERE idfHumanCase = @idfHumanCase;

            -- Data audit
            IF @BeforeNotCollectedReason IS NOT NULL
            BEGIN
                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser, 
                    strObject
                )
                SELECT @DataAuditEventId,
                       @ObjectTableID,
                       12014670000000,
                       @idfHumanCase,
                       NULL,
                       @BeforeNotCollectedReason,
                       NULL,
                       @AuditUser, 
                       @strHumanCaseId
            END
            -- End data audit

            IF (@SampleCount = 0)
            BEGIN
                DECLARE @BeforeSpecimenCollectedIndicator BIGINT = (
                                                                       SELECT idfsYNSpecimenCollected
                                                                       FROM dbo.tlbHumanCase
                                                                       WHERE idfHumanCase = @idfHumanCase
                                                                   );

                UPDATE dbo.tlbHumanCase
                SET idfsYNSpecimenCollected = NULL,
                    AuditUpdateUser = @AuditUser
                WHERE idfHumanCase = @idfHumanCase;

                -- Data audit
                IF @BeforeSpecimenCollectedIndicator IS NOT NULL
                BEGIN
                    INSERT INTO dbo.tauDataAuditDetailUpdate
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfColumn,
                        idfObject,
                        idfObjectDetail,
                        strOldValue,
                        strNewValue,
                        AuditCreateUser, 
                        strObject
                    )
                    SELECT @DataAuditEventId,
                           @ObjectTableID,
                           79760000000,
                           @idfHumanCase,
                           NULL,
                           @BeforeSpecimenCollectedIndicator,
                           NULL,
                           @AuditUser, 
                           @strHumanCaseId;
                END
            -- End data audit
            END
        END

        -- Set test interpretations
        IF @TestsInterpretationParameters IS NOT NULL
        BEGIN
            WHILE EXISTS (SELECT * FROM @TestsInterpretationParametersTemp)
            BEGIN
                SELECT TOP 1
                    @RowID = TestInterpretationID,
                    @TestInterpretationID = TestInterpretationID,
                    @DiseaseID = DiseaseID,
                    @InterpretedStatusTypeID = InterpretedStatusTypeID,
                    @ValidatedByOrganizationID = ValidatedByOrganizationID,
                    @ValidatedByPersonID = ValidatedByPersonID,
                    @InterpretedByOrganizationID = InterpretedByOrganizationID,
                    @InterpretedByPersonID = InterpretedByPersonID,
                    @TestID = TestID,
                    @ValidatedStatusIndicator = ValidatedStatusIndicator,
                    @ReportSessionCreatedIndicator = ReportSessionCreatedIndicator,
                    @ValidatedComment = ValidatedComment,
                    @InterpretedComment = InterpretedComment,
                    @ValidatedDate = ValidatedDate,
                    @InterpretedDate = InterpretedDate,
                    @RowStatus = RowStatus,
                    @ReadOnlyIndicator = ReadOnlyIndicator,
                    @RowAction = RowAction
                FROM @TestsInterpretationParametersTemp;

                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_GBL_TEST_INTERPRETATIONS_SET @AuditUser,
                                                              @DataAuditEventID,
                                                              @TestInterpretationID OUTPUT,
                                                              @DiseaseID,
                                                              @InterpretedStatusTypeID,
                                                              @ValidatedByOrganizationID,
                                                              @ValidatedByPersonID,
                                                              @InterpretedByOrganizationID,
                                                              @InterpretedByPersonID,
                                                              @TestID,
                                                              @ValidatedStatusIndicator,
                                                              @ReportSessionCreatedIndicator,
                                                              @ValidatedComment,
                                                              @InterpretedComment,
                                                              @ValidatedDate,
                                                              @InterpretedDate,
                                                              @RowStatus,
                                                              @ReadOnlyIndicator,
                                                              @RowAction;

                DELETE FROM @TestsInterpretationParametersTemp
                WHERE TestInterpretationID = @RowID;
            END;
        END

        -- Set events
        WHILE EXISTS (SELECT * FROM @EventsTemp)
        BEGIN
            SELECT TOP 1
                @EventId = EventId,
                @EventTypeId = EventTypeId,
                @EventUserId = UserId,
                @EventObjectId = ObjectId,
                @EventSiteId = SiteId,
                @EventDiseaseId = DiseaseId,
                @EventLocationId = LocationId,
                @EventInformationString = InformationString,
                @EventLoginSiteId = LoginSiteId
            FROM @EventsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_ADMIN_EVENT_SET @EventId,
                                             @EventTypeId,
                                             @EventUserId,
                                             @EventObjectId,
                                             @EventDiseaseId,
                                             @EventSiteId,
                                             @EventInformationString,
                                             @EventLoginSiteId,
                                             @EventLocationId,
                                             @AuditUser,
                                             @DataAuditEventID, 
                                             @strHumanCaseId;

            DELETE FROM @EventsTemp
            WHERE EventId = @EventId;
        END;

        -- Set anti-viral therapies
        IF @AntiviralTherapiesParameters IS NOT NULL
        BEGIN
            EXEC dbo.USSP_HUM_ANTIVIRAL_THERAPIES_SET @idfHumanCase,
                                                      @AntiviralTherapiesParameters,
                                                      0,
                                                      @AuditUser,
                                                      @DataAuditEventID, 
                                                      @strHumanCaseId;
        END

        -- Set vaccinations
        IF @VaccinationsParameters IS NOT NULL
        BEGIN
            EXEC dbo.USSP_HUM_DISEASE_VACCINATION_SET @idfHumanCase,
                                                      @VaccinationsParameters,
                                                      0,
                                                      @AuditUser,
                                                      @DataAuditEventID, 
                                                      @strHumanCaseId;
        END

        -- Set contacts
        IF @ContactsParameters IS NOT NULL
        BEGIN
            EXEC USSP_GBL_CONTACTS_SET @ContactsParameters,
                                       @CurrentSiteID,
                                       @AuditUser,
                                       @DataAuditEventID,
                                       @idfHumanCase, 
                                       @strHumanCaseId;
        END

        -- Update the human record if a date of death is provided.
        IF @datDateofDeath IS NOT NULL
        BEGIN
            DECLARE @BeforeDateOfDeath DATETIME
                =   (
                        SELECT datDateOfDeath FROM dbo.tlbHuman WHERE @idfHuman = @idfHuman
                    );

            UPDATE dbo.tlbHuman
            SET datDateofDeath = @datDateofDeath,
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUser
            WHERE idfHuman = @idfHuman;

            SET @ObjectTableID = 75600000000; -- tlbHuman

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateDTM,
                AuditCreateUser, 
                strObject
            )
            VALUES
            (@DataAuditEventID,
             @ObjectTableID,
             79340000000,
             @idfHuman,
             NULL,
             @BeforeDateOfDeath,
             @datDateofDeath,
             GETDATE(),
             @AuditUser, 
             @strHumanCaseId
            );
        END

        -- Update the connected test record if a connected test ID is provided.
        IF @ConnectedTestId IS NOT NULL
        BEGIN
            SELECT @DiseaseID = T.idfsDiagnosis,
                   @HumanMasterID = HA.idfHumanActual,
                   @idfMaterial = T.idfMaterial
            FROM dbo.tlbTesting T
                INNER JOIN dbo.tlbMaterial M
                    ON M.idfMaterial = T.idfMaterial
                INNER JOIN dbo.tlbHuman H
                    ON H.idfHuman = M.idfHuman
                INNER JOIN dbo.tlbHumanActual HA
                    ON HA.idfHumanActual = H.idfHumanActual
            WHERE T.idfTesting = @ConnectedTestId;

            UPDATE dbo.tlbTesting
            SET dbo.tlbTesting.idfHumanCase = @idfHumanCase,
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUser
            FROM dbo.tlbTesting T
                INNER JOIN dbo.tlbMaterial M
                    ON M.idfMaterial = T.idfMaterial
                INNER JOIN dbo.tlbHuman H
                    ON H.idfHuman = M.idfHuman
                INNER JOIN dbo.tlbHumanActual HA
                    ON HA.idfHumanActual = H.idfHumanActual
            WHERE T.idfsDiagnosis = @DiseaseID
                  AND HA.idfHumanActual = @HumanMasterID
                  AND T.idfMaterial = @idfMaterial;

            SET @ObjectTableID = 75740000000; -- tlbTesting

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateDTM,
                AuditCreateUser, 
                strObject
            )
            VALUES
            (@DataAuditEventID,
             @ObjectTableID,
             51586790000001,
             @idfHuman,
             NULL,
             NULL,
             @idfHumanCase,
             GETDATE(),
             @AuditUser, 
             @strHumanCaseId
            );
        -- End data audit
        END

        IF @@TRANCOUNT > 0
            COMMIT TRAN;

        SELECT @ReturnCode 'ReturnCode',
               @ReturnMessage 'ReturnMessage',
               @idfHumanCase 'idfHumanCase',
               @strHumanCaseID 'strHumanCaseID',
               @idfHuman 'idfHuman';
    END TRY
    BEGIN CATCH
        SELECT @ReturnCode 'ReturnCode',
               @ReturnMessage 'ReturnMessage',
               @idfHumanCase 'idfHumanCase',
               @strHumanCaseID 'strHumanCaseID',
               @idfHuman 'idfHuman';

        IF @@TRANCOUNT > 0
            ROLLBACK TRAN;

        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_HUM_REP_WHOEXPORT]...';


GO



--*************************************************************************
-- Name 				: dbo.USP_HUM_REP_WHOEXPORT
--
-- Description			: SINT03 - WHO Export dbo on Measles and Rubella.
-- 
-- Author               : Mandar Kulkarni
-- Revision History
--		Name			Date		Change Detail
--		Ann Xiong		12/02/2022	Renamed @StartDate, @EndDate, and @idfsDiagnosis to @DateFrom, @DateTo, and @DiseaseID

-- Testing code:
/*
--Example of a call of procedure:
   --GG
   --Measles
   EXEC dbo.[USP_HUM_REP_WHOEXPORT] @LangID=N'en',@StartDate='20130101',@EndDate='20131101', @idfsDiagnosis = 9843460000000
   
   --Rubella   
   EXEC dbo.[USP_HUM_REP_WHOEXPORT] @LangID=N'en',@StartDate='20130101',@EndDate='20131101', @idfsDiagnosis = 9843820000000
   
   --AZ
   --Measles
   EXEC dbo.[USP_HUM_REP_WHOEXPORT] @LangID=N'en',@StartDate='20120101',@EndDate='20131101', @idfsDiagnosis = 7720040000000
   --rubella
   EXEC dbo.[USP_HUM_REP_WHOEXPORT] @LangID=N'en',@StartDate='20130101',@EndDate='20131201', @idfsDiagnosis = 7720770000000

*/
  
ALTER  PROCEDURE [dbo].[USP_HUM_REP_WHOEXPORT]
(
   	@LangID		AS NVARCHAR(50), 
   	@DateFrom DATETIME,
   	@DateTo DATETIME,
   	@DiseaseID BIGINT
)
AS	
   	
BEGIN
    	
	DECLARE @idfsCountry BIGINT
   		
	SELECT	@idfsCountry = tcpac.idfsCountry
	FROM tstCustomizationPackage tcpac
	JOIN tstSite s ON
		s.idfCustomizationPackage = tcpac.idfCustomizationPackage
	JOIN tstLocalSiteOptions lso ON
		lso.strName = N'SiteID'
		AND lso.strValue = CAST(s.idfsSite AS NVARCHAR(200))

	IF @idfsCountry = 780000000
		EXEC [dbo].[USSP_HUM_REP_WHOEXPORT_GG] @LangID, @DateFrom, @DateTo, @DiseaseID
	ELSE IF @idfsCountry = 170000000
 		EXEC [dbo].[USSP_HUM_REP_WHOEXPORT_AJ] @LangID, @DateFrom, @DateTo, @DiseaseID
   	
END
GO
PRINT N'Altering Procedure [dbo].[USP_ILI_Aggregate_Set]...';


GO
-- ================================================================================================
-- Name: USP_ILI_Aggregate_Set
--
-- Description: Insert and update for ILI aggregate forms.
--          
-- Author: Arnold Kennedy
--
-- Revision History:
-- Name                    Date       Change Detail
-- ----------------------- ---------- ------------------------------------------------------------
-- Lamont Mitchell         07/13/2019 Udated to include FormId
-- Ann Xiong               02/28/2020 Modified to save a list of rows instead of one single row to 
--                                    table tlbBasicSyndromicSurveillanceAggregateDetail 
-- Leo Tracchia            03/13/2022 Altered logic for better handling of updates
-- Stephen Long            07/12/2022 Added events parameter and site alert logic.
-- Stephen Long            12/01/2022 Added data audit logic for SAUC30 and 31.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ILI_Aggregate_Set]
(
    @idfAggregateHeader BIGINT = -1,
    @idfEnteredBy BIGINT,
    @idfsSite BIGINT,
    @intYear INT,
    @intWeek INT,
    @datStartDate DATETIME,
    @datFinishDate DATETIME,
    @strFormId VARCHAR(MAX) = NULL,
    @RowStatus INT,
    @AuditUserName NVARCHAR(200),
    @ILITables NVARCHAR(MAX),
    @Events NVARCHAR(MAX) = NULL
)
AS
BEGIN
    DECLARE @ReturnCode INT = 0,
            @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
            @EventID BIGINT,
            @EventTypeID BIGINT = NULL,
            @EventSiteID BIGINT = NULL,
            @EventObjectID BIGINT = NULL,
            @EventUserID BIGINT = NULL,
            @EventDiseaseID BIGINT = NULL,
            @EventLocationID BIGINT = NULL,
            @EventInformationString NVARCHAR(MAX) = NULL,
            @EventLoginSiteID BIGINT = NULL,
                                                    -- Data audit
            @AuditUserID BIGINT = NULL,
            @AuditSiteID BIGINT = NULL,
            @DataAuditEventID BIGINT = NULL,
            @DataAuditEventTypeID BIGINT = NULL,
            @ObjectTypeID BIGINT = 10017071,        -- ILI aggregate
            @ObjectID BIGINT = @idfAggregateHeader,
            @ObjectTableID BIGINT = 50791690000000; -- tlbBasicSyndromicSurveillanceAggregateHeader
    DECLARE @SuppressSelect TABLE
    (
        ReturnCode INT,
        ReturnMessage NVARCHAR(MAX)
    );
    DECLARE @idfHospital BIGINT,
            @idfAggregateDetail BIGINT,
            @intAge0_4 INT = NULL,
            @intAge5_14 INT = NULL,
            @intAge15_29 INT = NULL,
            @intAge30_64 INT = NULL,
            @intAge65 INT = NULL,
            @inTotalILI INT = NULL,
            @intTotalAdmissions INT = NULL,
            @intILISamples INT = NULL,
            @RowID BIGINT = NULL,
            @RowAction CHAR(1) = NULL;
    DECLARE @ILITablesTemp TABLE
    (
        idfAggregateDetail BIGINT NOT NULL,
        idfHospital BIGINT NULL,
        intAge0_4 INT,
        intAge5_14 INT,
        intAge15_29 INT,
        intAge30_64 INT,
        intAge65 INT,
        inTotalILI INT,
        intTotalAdmissions INT,
        intILISamples INT,
        RowStatus INT NULL,
        RowAction CHAR(1) NULL,
        RowId BIGINT
    );
    DECLARE @ILIAggregateHeaderBeforeEdit TABLE
    (
        AggregateHeaderID BIGINT,
        FormID NVARCHAR(200),
        DateEntered DATETIME,
        DateLastSaved DATETIME,
        EnteredByID BIGINT,
        YearValue INT,
        WeekValue INT,
        StartDate DATETIME,
        FinishDate DATETIME
    );
    DECLARE @ILIAggregateHeaderAfterEdit TABLE
    (
        AggregateHeaderID BIGINT,
        FormID NVARCHAR(200),
        DateEntered DATETIME,
        DateLastSaved DATETIME,
        EnteredByID BIGINT,
        YearValue INT,
        WeekValue INT,
        StartDate DATETIME,
        FinishDate DATETIME
    );
    DECLARE @EventsTemp TABLE
    (
        EventId BIGINT NOT NULL,
        EventTypeId BIGINT NULL,
        UserId BIGINT NULL,
        SiteId BIGINT NULL,
        LoginSiteId BIGINT NULL,
        ObjectId BIGINT NULL,
        DiseaseId BIGINT NULL,
        LocationId BIGINT NULL,
        InformationString NVARCHAR(MAX) NULL
    );

    BEGIN TRY
        BEGIN TRANSACTION

        SET @AuditUserName = ISNULL(@AuditUserName, '');

        -- Data audit
        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = userInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo;
        -- End data audit

        INSERT INTO @ILITablesTemp
        SELECT *
        FROM
            OPENJSON(@ILITables)
            WITH
            (
                IdfAggregateDetail BIGINT,
                IdfHospital BIGINT,
                IntAge0_4 INT,
                IntAge5_14 INT,
                IntAge15_29 INT,
                IntAge30_64 INT,
                IntAge65 INT,
                InTotalILI INT,
                IntTotalAdmissions INT,
                IntILISamples INT,
                RowStatus INT,
                RowAction CHAR(1),
                RowId BIGINT
            );

        INSERT INTO @EventsTemp
        SELECT *
        FROM
            OPENJSON(@Events)
            WITH
            (
                EventId BIGINT,
                EventTypeId BIGINT,
                UserId BIGINT,
                SiteId BIGINT,
                LoginSiteId BIGINT,
                ObjectId BIGINT,
                DiseaseId BIGINT,
                LocationId BIGINT,
                InformationString NVARCHAR(MAX)
            );

        -- Update the header if this is an edit
        IF EXISTS
        (
            SELECT *
            FROM dbo.tlbBasicSyndromicSurveillanceAggregateHeader
            WHERE idfAggregateHeader = @idfAggregateHeader
        )
        BEGIN
            -- Data audit
            SET @DataAuditEventTypeID = 10016003; -- Data audit edit event type

            INSERT INTO @SuppressSelect
            EXEC dbo.USSP_GBL_DataAuditEvent_GET @AuditUserID,
                                                 @AuditSiteID,
                                                 @DataAuditEventTypeID,
                                                 @ObjectTypeID,
                                                 @idfAggregateHeader,
                                                 @ObjectTableID,
                                                 @DataAuditEventID OUTPUT;

            INSERT INTO @ILIAggregateHeaderBeforeEdit
            (
                AggregateHeaderID,
                FormID,
                DateEntered,
                DateLastSaved,
                EnteredByID,
                YearValue,
                WeekValue,
                StartDate,
                FinishDate
            )
            SELECT idfAggregateHeader,
                   strFormID,
                   datDateEntered,
                   datDateLastSaved,
                   idfEnteredBy,
                   intYear,
                   intWeek,
                   datStartDate,
                   datFinishDate
            FROM dbo.tlbBasicSyndromicSurveillanceAggregateHeader
            WHERE idfAggregateHeader = @idfAggregateHeader;
            -- End data audit

            UPDATE dbo.tlbBasicSyndromicSurveillanceAggregateHeader
            SET intYear = @intYear,
                intWeek = @intWeek,
                datStartDate = @datStartDate,
                datFinishDate = @datFinishDate,
                datDateLastSaved = GETDATE(),
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUserName
            WHERE idfAggregateHeader = @idfAggregateHeader;

            -- Data audit
            INSERT INTO @ILIAggregateHeaderAfterEdit
            (
                AggregateHeaderID,
                FormID,
                DateEntered,
                DateLastSaved,
                EnteredByID,
                YearValue,
                WeekValue,
                StartDate,
                FinishDate
            )
            SELECT idfAggregateHeader,
                   strFormID,
                   datDateEntered,
                   datDateLastSaved,
                   idfEnteredBy,
                   intYear,
                   intWeek,
                   datStartDate,
                   datFinishDate
            FROM dbo.tlbBasicSyndromicSurveillanceAggregateHeader
            WHERE idfAggregateHeader = @idfAggregateHeader;

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue, 
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   50791710000000,
                   a.AggregateHeaderID,
                   NULL,
                   b.FormID,
                   a.FormID,
                   a.FormID
            FROM @ILIAggregateHeaderAfterEdit AS a
                FULL JOIN @ILIAggregateHeaderBeforeEdit AS b
                    ON a.AggregateHeaderID = b.AggregateHeaderID
            WHERE (a.FormID <> b.FormID)
                  OR (
                         a.FormID IS NOT NULL
                         AND b.FormID IS NULL
                     )
                  OR (
                         a.FormID IS NULL
                         AND b.FormID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue, 
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   50791720000000,
                   a.AggregateHeaderID,
                   NULL,
                   b.DateEntered,
                   a.DateEntered, 
                   a.FormID
            FROM @ILIAggregateHeaderAfterEdit AS a
                FULL JOIN @ILIAggregateHeaderBeforeEdit AS b
                    ON a.AggregateHeaderID = b.AggregateHeaderID
            WHERE (a.DateEntered <> b.DateEntered)
                  OR (
                         a.DateEntered IS NOT NULL
                         AND b.DateEntered IS NULL
                     )
                  OR (
                         a.DateEntered IS NULL
                         AND b.DateEntered IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   50791730000000,
                   a.AggregateHeaderID,
                   NULL,
                   b.DateLastSaved,
                   a.DateLastSaved,
                   a.FormID
            FROM @ILIAggregateHeaderAfterEdit AS a
                FULL JOIN @ILIAggregateHeaderBeforeEdit AS b
                    ON a.AggregateHeaderID = b.AggregateHeaderID
            WHERE (a.DateLastSaved <> b.DateLastSaved)
                  OR (
                         a.DateLastSaved IS NOT NULL
                         AND b.DateLastSaved IS NULL
                     )
                  OR (
                         a.DateLastSaved IS NULL
                         AND b.DateLastSaved IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue, 
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   50791740000000,
                   a.AggregateHeaderID,
                   NULL,
                   b.EnteredByID,
                   a.EnteredByID,
                   a.FormID 
            FROM @ILIAggregateHeaderAfterEdit AS a
                FULL JOIN @ILIAggregateHeaderBeforeEdit AS b
                    ON a.AggregateHeaderID = b.AggregateHeaderID
            WHERE (a.EnteredByID <> b.EnteredByID)
                  OR (
                         a.EnteredByID IS NOT NULL
                         AND b.EnteredByID IS NULL
                     )
                  OR (
                         a.EnteredByID IS NULL
                         AND b.EnteredByID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   50791750000000,
                   a.AggregateHeaderID,
                   NULL,
                   b.YearValue,
                   a.YearValue,
                   a.FormID
            FROM @ILIAggregateHeaderAfterEdit AS a
                FULL JOIN @ILIAggregateHeaderBeforeEdit AS b
                    ON a.AggregateHeaderID = b.AggregateHeaderID
            WHERE (a.YearValue <> b.YearValue)
                  OR (
                         a.YearValue IS NOT NULL
                         AND b.YearValue IS NULL
                     )
                  OR (
                         a.YearValue IS NULL
                         AND b.YearValue IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   50791760000000,
                   a.AggregateHeaderID,
                   NULL,
                   b.WeekValue,
                   a.WeekValue,
                   a.FormID
            FROM @ILIAggregateHeaderAfterEdit AS a
                FULL JOIN @ILIAggregateHeaderBeforeEdit AS b
                    ON a.AggregateHeaderID = b.AggregateHeaderID
            WHERE (a.WeekValue <> b.WeekValue)
                  OR (
                         a.WeekValue IS NOT NULL
                         AND b.WeekValue IS NULL
                     )
                  OR (
                         a.WeekValue IS NULL
                         AND b.WeekValue IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   50791770000000,
                   a.AggregateHeaderID,
                   NULL,
                   b.StartDate,
                   a.StartDate,
                   a.FormID 
            FROM @ILIAggregateHeaderAfterEdit AS a
                FULL JOIN @ILIAggregateHeaderBeforeEdit AS b
                    ON a.AggregateHeaderID = b.AggregateHeaderID
            WHERE (a.StartDate <> b.StartDate)
                  OR (
                         a.StartDate IS NOT NULL
                         AND b.StartDate IS NULL
                     )
                  OR (
                         a.StartDate IS NULL
                         AND b.StartDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   50791780000000,
                   a.AggregateHeaderID,
                   NULL,
                   b.FinishDate,
                   a.FinishDate,
                   a.FormID
            FROM @ILIAggregateHeaderAfterEdit AS a
                FULL JOIN @ILIAggregateHeaderBeforeEdit AS b
                    ON a.AggregateHeaderID = b.AggregateHeaderID
            WHERE (a.FinishDate <> b.FinishDate)
                  OR (
                         a.FinishDate IS NOT NULL
                         AND b.FinishDate IS NULL
                     )
                  OR (
                         a.FinishDate IS NULL
                         AND b.FinishDate IS NOT NULL
                     );
        -- End data audit
        END
        ELSE
        BEGIN
            -- Get new PK for insert
            BEGIN
                INSERT INTO @SuppressSelect
                EXEC dbo.USP_GBL_NEXTKEYID_GET 'tlbBasicSyndromicSurveillanceAggregateHeader',
                                               @idfAggregateHeader OUTPUT;
            END

            -- Data audit
            SET @DataAuditEventTypeID = 10016001; -- Data audit create event type

            INSERT INTO @SuppressSelect
            EXEC dbo.USSP_GBL_DataAuditEvent_GET @AuditUserID,
                                                 @AuditSiteID,
                                                 @DataAuditEventTypeID,
                                                 @ObjectTypeID,
                                                 @idfAggregateHeader,
                                                 @ObjectTableID,
                                                 @DataAuditEventID OUTPUT;
            -- End data audit

            -- Get New Smartkey
            IF ISNULL(@strFormID, N'') = N''
               OR LEFT(ISNULL(@strFormID, N''), 4) = '(new'
            BEGIN
                INSERT INTO @SuppressSelect
                EXEC dbo.USP_GBL_NextNumber_GET 'Basic Syndromic Surveillance Aggregate Form',
                                                @strFormID OUTPUT,
                                                NULL;
            END

            INSERT INTO dbo.tlbBasicSyndromicSurveillanceAggregateHeader
            (
                idfAggregateHeader,
                strFormID,
                datDateEntered,
                datDateLastSaved,
                idfEnteredBy,
                idfsSite,
                intYear,
                intWeek,
                datStartDate,
                datFinishDate,
                datModificationForArchiveDate,
                strMaintenanceFlag,
                strReservedAttribute,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateDTM,
                AuditCreateUser
            )
            VALUES
            (   @idfAggregateHeader,
                @strFormID,
                GETDATE(),
                GETDATE(),
                @idfEnteredBy,
                @idfsSite,
                @intYear,
                @intWeek,
                @datStartDate,
                @datFinishDate,
                GETDATE(),
                'system',
                'V7 ILI Syndromic Surveillance Aggregate Form',
                10519001, -- EIDSS7
                '[{"idfAggregateHeader":' + CAST(@idfAggregateHeader AS NVARCHAR(300)) + '}]',
                GETDATE(),
                @AuditUserName
            );

            UPDATE @EventsTemp
            SET ObjectId = @idfAggregateHeader
            WHERE ObjectId = 0;

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailCreate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser, 
                strObject
            )
            VALUES
            (@DataAuditEventID,
             @ObjectTableID,
             @idfAggregateHeader,
             10519001,
             '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
             + CAST(@ObjectTableID AS NVARCHAR(300)) + '}]',
             @AuditUserName, 
             @strFormID
            );
        -- End data audit
        END

        WHILE EXISTS (SELECT * FROM @ILITablesTemp)
        BEGIN
            SELECT TOP 1
                @RowID = RowId,
                @idfAggregateDetail = idfAggregateDetail,
                @RowStatus = RowStatus,
                @idfHospital = idfHospital,
                @intAge0_4 = intAge0_4,
                @intAge5_14 = intAge5_14,
                @intAge15_29 = intAge15_29,
                @intAge30_64 = intAge30_64,
                @intAge65 = intAge65,
                @inTotalILI = inTotalILI,
                @intTotalAdmissions = intTotalAdmissions,
                @intILISamples = intILISamples,
                @RowAction = RowAction
            FROM @ILITablesTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_ILI_Aggregate_Detail_SET @idfAggregateDetail,
                                                     @idfAggregateHeader,
                                                     @RowStatus,
                                                     @idfHospital,
                                                     @intAge0_4,
                                                     @intAge5_14,
                                                     @intAge15_29,
                                                     @intAge30_64,
                                                     @intAge65,
                                                     @inTotalILI,
                                                     @intTotalAdmissions,
                                                     @intILISamples,
                                                     @AuditUserName,
                                                     @DataAuditEventID, 
                                                     @strFormID, 
                                                     @RowAction;

            DELETE FROM @ILITablesTemp
            WHERE RowId = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @EventsTemp)
        BEGIN
            SELECT TOP 1
                @EventID = EventId,
                @EventTypeID = EventTypeId,
                @EventUserID = UserId,
                @EventObjectID = ObjectId,
                @EventSiteID = SiteId,
                @EventDiseaseID = DiseaseId,
                @EventLocationID = LocationId,
                @EventInformationString = InformationString,
                @EventLoginSiteID = LoginSiteId
            FROM @EventsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_ADMIN_EVENT_SET @EventID,
                                             @EventTypeID,
                                             @EventUserID,
                                             @EventObjectID,
                                             @EventDiseaseID,
                                             @EventSiteID,
                                             @EventInformationString,
                                             @EventLoginSiteID,
                                             @EventLocationID,
                                             @AuditUserName, 
                                             @DataAuditEventID, 
                                             @strFormID;

            DELETE FROM @EventsTemp
            WHERE EventId = @EventID;
        END;

        IF @@TRANCOUNT > 0
            COMMIT;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK;

        THROW;
    END CATCH
    SELECT @ReturnCode 'ReturnCode',
           @ReturnMessage 'ReturnMessage',
           @strFormID 'strFormID',
           @idfAggregateHeader 'idfAggregateHeader',
           @idfAggregateDetail 'idfAggregateDetail';
END
GO
PRINT N'Altering Procedure [dbo].[USP_VET_DISEASE_REPORT_SET]...';


GO
-- ================================================================================================
-- Name: USP_VET_DISEASE_REPORT_SET
--
-- Description:	Inserts or updates veterinary "case" for the avian and livestock veterinary disease 
-- report use cases.
--                      
-- Revision History:
-- Name            Date       Change Detail
-- --------------- ---------- -------------------------------------------------------------------
-- Stephen Long    04/02/2018 Initial release.
-- Stephen Long    04/17/2019 Updated for API; use case updates.
-- Stephen Long    04/23/2019 Added updates for herd master and species master if new ones are 
--                            added to the farm during disease report creation.
-- Stephen Long    04/29/2019 Added related to veterinary disease report fields for use case VUC11 
--                            and VUC12.
-- Stephen Long    05/26/2019 Made corrections to farm copy observation ID and species table 
--                            observation ID for flexible form saving.
-- Stephen Long    06/01/2019 Made corrections to JSON for herds and species parameters.
-- Stephen Long    06/10/2019 Added farm owner ID output parameter to USSP_VET_FARM_COPY call.
-- Stephen Long    06/19/2019 Added diagnosis date and tests conducted indicator parameters.
-- Stephen Long    06/22/2019 Added read only indicator parameter for sample set - sample import.
-- Stephen Long    06/24/2019 Update to match new parameter for USSP_VET_FARM_COPY call.
-- Stephen Long    07/26/2019 Corrected farm counts (total, sick and dead).
-- Stephen Long    09/14/2019 Corrected root sample ID/parent sample ID on sample update call.
-- Stephen Long    10/01/2019 Added monitoring session ID parameter to farm copy for the sceanrio 
--                            where a disease report is tied to a monitoring session.
-- Stephen Long    12/23/2019 Added farm latitude and longitude parameters.
-- Stephen Long    02/05/2020 Updated sample set to account for the current site ID when samples 
--                            are imported from the laboratory module.
-- Stephen Long    02/16/2020 Add logic to copy activity parameters, and add observation record for 
--                            connected disease reports.
-- Stephen Long    04/21/2020 Added additional check on clinical signs when related disease report.
-- Stephen Long    04/24/2020 Added clinical signs indicator for the animal set call.
-- Stephen Long    08/12/2020 Corrected status on report log from status type to log status type.
-- Stephen Long    08/25/2020 Added observation ID set for the update of the vet case table.
-- Stephen Long    09/18/2020 Check for null related to observation ID
-- Stephen Long    12/20/2020 Updated USSP_GBL_TEST_SET call with four new parameters.
-- Stephen Long    11/29/2021 Removed language ID and added audit user name to USSP calls.
-- Stephen Long    01/19/2022 Added missing audit user name on ussp calls, and added events.
-- Stephen Long    01/22/2022 Made disease ID nullable on SamplesTemp table variable.
-- Stephen Long    01/24/2022 Added link local or field sample ID to report ID parameter.
-- Stephen Long    01/28/2022 Removed herd actual and species actual, no longer used.
-- Stephen Long    02/18/2022 Added lab module source indicator check on sample set.
-- Stephen Long    03/08/2022 Set notification object ID after saving disease report.
-- Stephen Long    04/12/2022 Added outbreak veterinary case parameters and logic.
-- Stephen Long    04/27/2022 Added additional outbreak case parameters: status type and case 
--                            questionnaire observation ID.
-- Stephen Long    05/09/2022 Bug fix on item 4199 - local/field sample ID iteration.
-- Stephen Long    06/16/2022 Added status type ID to species set.
-- Stephen Long    07/06/2022 Updates for site alerts to call new stored procedure.
-- Stephen Long    09/15/2022 Added note parameter to event set call.  Temporarily removed!
-- Stephen Long    12/07/2022 Added data audit logic for SAUC30 and 31.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_VET_DISEASE_REPORT_SET]
(
    @DiseaseReportID BIGINT,
    @EIDSSReportID NVARCHAR(200) = NULL,
    @FarmID BIGINT,
    @FarmMasterID BIGINT,
    @FarmOwnerID BIGINT = NULL,
    @MonitoringSessionID BIGINT = NULL,
    @OutbreakID BIGINT = NULL,
    @RelatedToDiseaseReportID BIGINT = NULL,
    @EIDSSFieldAccessionID NVARCHAR(200) = NULL,
    @DiseaseID BIGINT,
    @EnteredByPersonID BIGINT = NULL,
    @ReportedByOrganizationID BIGINT = NULL,
    @ReportedByPersonID BIGINT = NULL,
    @InvestigatedByOrganizationID BIGINT = NULL,
    @InvestigatedByPersonID BIGINT = NULL,
    @ReceivedByOrganizationID BIGINT = NULL,
    @ReceivedByPersonID BIGINT = NULL,
    @SiteID BIGINT,
    @DiagnosisDate DATETIME = NULL,
    @EnteredDate DATETIME = NULL,
    @ReportDate DATETIME = NULL,
    @AssignedDate DATETIME = NULL,
    @InvestigationDate DATETIME = NULL,
    @RowStatus INT,
    @ReportTypeID BIGINT = NULL,
    @ClassificationTypeID BIGINT = NULL,
    @StatusTypeID BIGINT = NULL,
    @ReportCategoryTypeID BIGINT,
    @FarmTotalAnimalQuantity INT = NULL,
    @FarmSickAnimalQuantity INT = NULL,
    @FarmDeadAnimalQuantity INT = NULL,
    @FarmLatitude FLOAT = NULL,
    @FarmLongitude FLOAT = NULL,
    @FarmEpidemiologicalObservationID BIGINT = NULL,
    @ControlMeasuresObservationID BIGINT = NULL,
    @TestsConductedIndicator BIGINT = NULL,
    @AuditUserName NVARCHAR(200),
    @FlocksOrHerds NVARCHAR(MAX) = NULL,
    @Species NVARCHAR(MAX) = NULL,
    @Animals NVARCHAR(MAX) = NULL,
    @Vaccinations NVARCHAR(MAX) = NULL,
    @Samples NVARCHAR(MAX) = NULL,
    @PensideTests NVARCHAR(MAX) = NULL,
    @LaboratoryTests NVARCHAR(MAX) = NULL,
    @LaboratoryTestInterpretations NVARCHAR(MAX) = NULL,
    @CaseLogs NVARCHAR(MAX) = NULL,
    @ClinicalInformation NVARCHAR(MAX) = NULL,
    @Contacts NVARCHAR(MAX) = NULL,
    @CaseMonitorings NVARCHAR(MAX) = NULL,
    @Events NVARCHAR(MAX) = NULL,
    @UserID BIGINT,
    @LinkLocalOrFieldSampleIDToReportID BIT = 0,
    @OutbreakCaseIndicator BIT = 0,
    @OutbreakCaseReportUID BIGINT = NULL,
    @OutbreakCaseStatusTypeID BIGINT = NULL,
    @OutbreakCaseQuestionnaireObservationID BIGINT = NULL,
    @PrimaryCaseIndicator BIT = 0
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        DECLARE @ReturnCode INT
            = 0,
                @ReturnMessage NVARCHAR(MAX) = N'SUCCESS',
                @RowAction INT = NULL,
                @RowID BIGINT,
                @Iteration INT = 0,
                @NewFarmOwnerID BIGINT = NULL,
                @FlockOrHerdID BIGINT = NULL,
                @FlockOrHerdMasterID BIGINT = NULL,
                @EIDSSFlockOrHerdID NVARCHAR(200) = NULL,
                @SickAnimalQuantity INT = NULL,
                @TotalAnimalQuantity INT = NULL,
                @DeadAnimalQuantity INT = NULL,
                @Comments NVARCHAR(2000) = NULL,
                @SpeciesID BIGINT = NULL,
                @SpeciesMasterID BIGINT = NULL,
                @SpeciesTypeID BIGINT = NULL,
                @StartOfSignsDate DATETIME = NULL,
                @AverageAge NVARCHAR(200) = NULL,
                @ObservationID BIGINT = NULL,
                @OutbreakSpeciesCaseStatusTypeID BIGINT = NULL,
                @AnimalID BIGINT = NULL,
                @SexTypeID BIGINT = NULL,
                @ConditionTypeID BIGINT = NULL,
                @AgeTypeID BIGINT = NULL,
                @EIDSSAnimalID NVARCHAR(200) = NULL,
                @AnimalName NVARCHAR(200) = NULL,
                @Color NVARCHAR(200) = NULL,
                @AnimalDescription NVARCHAR(200) = NULL,
                @ClinicalSignsIndicator BIGINT = NULL,
                @VaccinationID BIGINT,
                @VaccinationTypeID BIGINT = NULL,
                @RouteTypeID BIGINT = NULL,
                @VaccinationDate DATETIME = NULL,
                @Manufacturer NVARCHAR(200) = NULL,
                @LotNumber NVARCHAR(200) = NULL,
                @NumberVaccinated INT = NULL,
                @SampleID BIGINT,
                @SampleTypeID BIGINT = NULL,
                @RootSampleID BIGINT = NULL,
                @ParentSampleID BIGINT = NULL,
                @CollectedByPersonID BIGINT = NULL,
                @CollectedByOrganizationID BIGINT = NULL,
                @CollectionDate DATETIME = NULL,
                @SentDate DATETIME = NULL,
                @EIDSSLocalOrFieldSampleID NVARCHAR(200) = NULL,
                @SampleStatusTypeID BIGINT = NULL,
                @EIDSSLaboratorySampleID NVARCHAR(200) = NULL,
                @SentToOrganizationID BIGINT = NULL,
                @ReadOnlyIndicator BIT = NULL,
                @CurrentSiteID BIGINT = NULL,
                @BirdStatusTypeID BIGINT = NULL,
                @PensideTestID BIGINT = NULL,
                @PensideTestResultTypeID BIGINT = NULL,
                @PensideTestNameTypeID BIGINT = NULL,
                @TestedByPersonID BIGINT = NULL,
                @TestedByOrganizationID BIGINT = NULL,
                @TestDate DATETIME = NULL,
                @PensideTestCategoryTypeID BIGINT = NULL,
                @TestID BIGINT = NULL,
                @TestNameTypeID BIGINT = NULL,
                @TestCategoryTypeID BIGINT = NULL,
                @TestResultTypeID BIGINT = NULL,
                @TestStatusTypeID BIGINT,
                @BatchTestID BIGINT = NULL,
                @StartedDate DATETIME = NULL,
                @ResultDate DATETIME = NULL,
                @ResultEnteredByOrganizationID BIGINT = NULL,
                @ResultEnteredByPersonID BIGINT = NULL,
                @ValidatedByOrganizationID BIGINT = NULL,
                @ValidatedByPersonID BIGINT = NULL,
                @NonLaboratoryTestIndicator BIT,
                @ExternalTestIndicator BIT = NULL,
                @PerformedByOrganizationID BIGINT = NULL,
                @ReceivedDate DATETIME = NULL,
                @ContactPersonName NVARCHAR(200) = NULL,
                @TestDiseaseReportID BIGINT = NULL,
                @TestInterpretationID BIGINT,
                @InterpretedStatusTypeID BIGINT = NULL,
                @InterpretedByOrganizationID BIGINT = NULL,
                @InterpretedByPersonID BIGINT = NULL,
                @TestingInterpretations BIGINT,
                @ValidatedStatusIndicator BIT = NULL,
                @ReportSessionCreatedIndicator BIT = NULL,
                @ValidatedComment NVARCHAR(200) = NULL,
                @InterpretedComment NVARCHAR(200) = NULL,
                @ValidatedDate DATETIME = NULL,
                @InterpretedDate DATETIME = NULL,
                @CaseLogID BIGINT,
                @LogStatusTypeID BIGINT = NULL,
                @LoggedByPersonID BIGINT = NULL,
                @LogDate DATETIME = NULL,
                @ActionRequired NVARCHAR(200) = NULL,
                @VeterinaryDiseaseReportRelationshipID BIGINT = NULL,
                @RelatedToSpeciesID BIGINT = NULL,
                @RelatedToAnimalID BIGINT = NULL,
                @RelatedToObservationID BIGINT = NULL,
                @FormTemplateID BIGINT,
                @ObservationSiteID BIGINT,
                @ActivityID BIGINT = NULL,
                @ActivityIDNew BIGINT = NULL,
                @ParameterID BIGINT = NULL,
                @ParameterValue SQL_VARIANT = NULL,
                @ParameterRowID BIGINT = NULL,
                @EventId BIGINT,
                @EventTypeId BIGINT = NULL,
                @EventSiteId BIGINT = NULL,
                @EventObjectId BIGINT = NULL,
                @EventUserId BIGINT = NULL,
                @EventDiseaseId BIGINT = NULL,
                @EventLocationId BIGINT = NULL,
                @EventInformationString NVARCHAR(MAX) = NULL,
                @EventNote NVARCHAR(MAX) = NULL,
                @EventLoginSiteId BIGINT = NULL,
                                                                                           -- Data audit
                @AuditUserID BIGINT = NULL,
                @AuditSiteID BIGINT = NULL,
                @DataAuditEventID BIGINT = NULL,
                @DataAuditEventTypeID BIGINT = NULL,
                @ObjectTypeID BIGINT = 10017059,                                           -- Veterinary disease report
                @ObjectID BIGINT = @DiseaseReportID,
                @ObjectTableID BIGINT = 75800000000,                                       -- tlbVetCase
                @ObjectVeterinaryDiseaseReportRelationshipTableID BIGINT = 53577790000004, -- VetDiseaseReportRelationship
                @ObjectObservationTableID BIGINT = 75640000000,                            -- tlbObservation
                @ObjectActivityParametersTableID BIGINT = 75410000000,                     -- tlbActivityParameters
                                                                                           -- End data audit
                @LabModuleSourceIndicator INT = 0,
                @SampleDiseaseReportID BIGINT = NULL,
                @EIDSSCaseID NVARCHAR(200) = NULL;
        DECLARE @SuppressSelect TABLE
        (
            ReturnCode INT,
            ReturnMessage NVARCHAR(MAX)
        );
        DECLARE @FlocksOrHerdsTemp TABLE
        (
            FlockOrHerdID BIGINT NOT NULL,
            FarmID BIGINT NULL,
            FlockOrHerdMasterID BIGINT NULL,
            EIDSSFlockOrHerdID NVARCHAR(200) NULL,
            SickAnimalQuantity INT NULL,
            TotalAnimalQuantity INT NULL,
            DeadAnimalQuantity INT NULL,
            RowStatus INT NULL,
            RowAction INT NULL
        );
        DECLARE @SpeciesTemp TABLE
        (
            SpeciesID BIGINT NOT NULL,
            SpeciesMasterID BIGINT NULL,
            FlockOrHerdID BIGINT NOT NULL,
            SpeciesTypeID BIGINT NOT NULL,
            SickAnimalQuantity INT NULL,
            TotalAnimalQuantity INT NULL,
            DeadAnimalQuantity INT NULL,
            StartOfSignsDate DATETIME NULL,
            AverageAge NVARCHAR(200) NULL,
            ObservationID BIGINT NULL,
            Comments NVARCHAR(2000) NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL,
            RelatedToSpeciesID BIGINT NULL,
            RelatedToObservationID BIGINT NULL,
            OutbreakCaseStatusTypeID BIGINT NULL
        );
        DECLARE @AnimalsTemp TABLE
        (
            AnimalID BIGINT NOT NULL,
            SexTypeID BIGINT NULL,
            ConditionTypeID BIGINT NULL,
            AgeTypeID BIGINT NULL,
            SpeciesID BIGINT NULL,
            ObservationID BIGINT NULL,
            EIDSSAnimalID NVARCHAR(200) NULL,
            AnimalName NVARCHAR(200) NULL,
            Color NVARCHAR(200) NULL,
            AnimalDescription NVARCHAR(200) NULL,
            ClinicalSignsIndicator BIGINT NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL,
            RelatedToAnimalID BIGINT NULL,
            RelatedToObservationID BIGINT NULL
        );
        DECLARE @VaccinationsTemp TABLE
        (
            VaccinationID BIGINT NOT NULL,
            SpeciesID BIGINT NULL,
            VaccinationTypeID BIGINT NULL,
            RouteTypeID BIGINT NULL,
            DiseaseID BIGINT NULL,
            VaccinationDate DATETIME NULL,
            Manufacturer NVARCHAR(200) NULL,
            LotNumber NVARCHAR(200) NULL,
            NumberVaccinated INT NULL,
            Comments NVARCHAR(2000) NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @SamplesTemp TABLE
        (
            SampleID BIGINT NOT NULL,
            SampleTypeID BIGINT NULL,
            RootSampleID BIGINT NULL,
            ParentSampleID BIGINT NULL,
            SpeciesID BIGINT NULL,
            AnimalID BIGINT NULL,
            VeterinaryDiseaseReportID BIGINT NULL,
            MonitoringSessionID BIGINT NULL,
            SampleStatusTypeID BIGINT NULL,
            CollectionDate DATETIME NULL,
            CollectedByOrganizationID BIGINT NULL,
            CollectedByPersonID BIGINT NULL,
            SentDate DATETIME NULL,
            SentToOrganizationID BIGINT NULL,
            EIDSSLocalOrFieldSampleID NVARCHAR(200) NULL,
            Comments NVARCHAR(200) NULL,
            SiteID BIGINT NOT NULL,
            CurrentSiteID BIGINT NULL,
            EnteredDate DATETIME NULL,
            DiseaseID BIGINT NULL,
            BirdStatusTypeID BIGINT NULL,
            ReadOnlyIndicator BIT NULL,
            LabModuleSourceIndicator INT NOT NULL,
            FarmID BIGINT NULL,
            FarmOwnerID BIGINT NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @PensideTestsTemp TABLE
        (
            PensideTestID BIGINT NOT NULL,
            SampleID BIGINT NOT NULL,
            PensideTestNameTypeID BIGINT NULL,
            PensideTestResultTypeID BIGINT NULL,
            PensideTestCategoryTypeID BIGINT NULL,
            TestedByPersonID BIGINT NULL,
            TestedByOrganizationID BIGINT NULL,
            DiseaseID BIGINT NULL,
            TestDate DATETIME NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @LaboratoryTestsTemp TABLE
        (
            TestID BIGINT NOT NULL,
            TestNameTypeID BIGINT NULL,
            TestCategoryTypeID BIGINT NULL,
            TestResultTypeID BIGINT NULL,
            TestStatusTypeID BIGINT NOT NULL,
            DiseaseID BIGINT NOT NULL,
            SampleID BIGINT NULL,
            BatchTestID BIGINT NULL,
            ObservationID BIGINT NULL,
            TestNumber INT NULL,
            Comments NVARCHAR NULL,
            StartedDate DATETIME NULL,
            ResultDate DATETIME NULL,
            TestedByOrganizationID BIGINT NULL,
            TestedByPersonID BIGINT NULL,
            ResultEnteredByOrganizationID BIGINT NULL,
            ResultEnteredByPersonID BIGINT NULL,
            ValidatedByOrganizationID BIGINT NULL,
            ValidatedByPersonID BIGINT NULL,
            ReadOnlyIndicator BIT NOT NULL,
            NonLaboratoryTestIndicator BIT NOT NULL,
            ExternalTestIndicator BIT NULL,
            PerformedByOrganizationID BIGINT NULL,
            ReceivedDate DATETIME NULL,
            ContactPersonName NVARCHAR(200) NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @LaboratoryTestInterpretationsTemp TABLE
        (
            TestInterpretationID BIGINT NOT NULL,
            DiseaseID BIGINT NULL,
            InterpretedStatusTypeID BIGINT NULL,
            ValidatedByOrganizationID BIGINT NULL,
            ValidatedByPersonID BIGINT NULL,
            InterpretedByOrganizationID BIGINT NULL,
            InterpretedByPersonID BIGINT NULL,
            TestID BIGINT NOT NULL,
            ValidatedStatusIndicator BIT NULL,
            ReportSessionCreatedIndicator BIT NULL,
            ValidatedComment NVARCHAR(200) NULL,
            InterpretedComment NVARCHAR(200) NULL,
            ValidatedDate DATETIME NULL,
            InterpretedDate DATETIME NULL,
            ReadOnlyIndicator BIT NOT NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @CaseLogsTemp TABLE
        (
            CaseLogID BIGINT NOT NULL,
            LogStatusTypeID BIGINT NULL,
            LoggedByPersonID BIGINT NULL,
            LogDate DATETIME NULL,
            ActionRequired NVARCHAR(200) NULL,
            Comments NVARCHAR(1000) NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @ClinicalInformationTemp TABLE
        (
            langId NVARCHAR(200) NULL,
            HerdID BIGINT NOT NULL,
            Herd NVARCHAR(200) NULL,
            ClinicalSignsIndicator BIGINT NOT NULL,
            SpeciesTypeID BIGINT NULL,
            SpeciesTypeName NVARCHAR(200) NULL,
            StatusTypeID BIGINT NULL,
            InvestigationPerformedTypeID BIGINT NULL
        );
        DECLARE @ActivityParametersTemp TABLE
        (
            ActivityID BIGINT NOT NULL,
            ParameterID BIGINT NOT NULL,
            ParameterValue SQL_VARIANT NULL,
            ParameterRowID BIGINT NOT NULL
        );
        DECLARE @EventsTemp TABLE
        (
            EventId BIGINT NOT NULL,
            EventTypeId BIGINT NULL,
            UserId BIGINT NULL,
            SiteId BIGINT NULL,
            LoginSiteId BIGINT NULL,
            ObjectId BIGINT NULL,
            DiseaseId BIGINT NULL,
            LocationId BIGINT NULL,
            InformationString NVARCHAR(MAX) NULL,
            Note NVARCHAR(MAX) NULL
        );
        DECLARE @VeterinaryDiseaseReportAfterEdit TABLE
        (
            DiseaseReportID BIGINT,
            FarmID BIGINT,
            DiseaseID BIGINT,
            PersonEnteredByID BIGINT,
            PersonReportedByID BIGINT,
            PersonInvestigatedByID BIGINT,
            ObservationID BIGINT,
            ReportDate DATETIME,
            AssignedDate DATETIME,
            InvestigationDate DATETIME,
            FinalDiagnosisDate DATETIME,
            FieldAccessionID NVARCHAR(200),
            YNTestsConductedTypeID BIGINT,
            ReportedByOfficeID BIGINT,
            InvestigatedByOfficeID BIGINT,
            CaseReportTypeID BIGINT,
            CaseClassificationTypeID BIGINT,
            OutbreakID BIGINT,
            EnteredDate DATETIME,
            EIDSSReportID NVARCHAR(200),
            CaseProgressStatusTypeID BIGINT,
            ParentMonitoringSessionID BIGINT,
            CaseTypeID BIGINT,
            ReceivedByOfficeID BIGINT,
            ReceivedByPersonID BIGINT
        );
        DECLARE @VeterinaryDiseaseReportBeforeEdit TABLE
        (
            DiseaseReportID BIGINT,
            FarmID BIGINT,
            DiseaseID BIGINT,
            PersonEnteredByID BIGINT,
            PersonReportedByID BIGINT,
            PersonInvestigatedByID BIGINT,
            ObservationID BIGINT,
            ReportDate DATETIME,
            AssignedDate DATETIME,
            InvestigationDate DATETIME,
            FinalDiagnosisDate DATETIME,
            FieldAccessionID NVARCHAR(200),
            YNTestsConductedTypeID BIGINT,
            ReportedByOfficeID BIGINT,
            InvestigatedByOfficeID BIGINT,
            CaseReportTypeID BIGINT,
            CaseClassificationTypeID BIGINT,
            OutbreakID BIGINT,
            EnteredDate DATETIME,
            EIDSSReportID NVARCHAR(200),
            CaseProgressStatusTypeID BIGINT,
            ParentMonitoringSessionID BIGINT,
            CaseTypeID BIGINT,
            ReceivedByOfficeID BIGINT,
            ReceivedByPersonID BIGINT
        );

        BEGIN TRANSACTION;

        SET @AuditUserName = ISNULL(@AuditUserName, '');

        -- Data audit
        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = userInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo;
        -- End data audit

        -- Predetermine the outbreak report ID for the upcoming section
        SELECT @OutbreakCaseReportUID = OutbreakCaseReportUID
        FROM dbo.OutbreakCaseReport
        WHERE idfVetCase = @DiseaseReportID;

        INSERT INTO @FlocksOrHerdsTemp
        SELECT *
        FROM
            OPENJSON(@FlocksOrHerds)
            WITH
            (
                FlockOrHerdID BIGINT,
                FarmID BIGINT,
                FlockOrHerdMasterID BIGINT,
                EIDSSFlockOrHerdID NVARCHAR(200),
                SickAnimalQuantity INT,
                TotalAnimalQuantity INT,
                DeadAnimalQuantity INT,
                RowStatus INT,
                RowAction INT
            );

        INSERT INTO @SpeciesTemp
        SELECT *
        FROM
            OPENJSON(@Species)
            WITH
            (
                SpeciesID BIGINT,
                SpeciesMasterID BIGINT,
                FlockOrHerdID BIGINT,
                SpeciesTypeID BIGINT,
                SickAnimalQuantity INT,
                TotalAnimalQuantity INT,
                DeadAnimalQuantity INT,
                StartOfSignsDate DATETIME,
                AverageAge NVARCHAR(200),
                ObservationID BIGINT,
                Comments NVARCHAR(2000),
                RowStatus INT,
                RowAction INT,
                RelatedToSpeciesID BIGINT,
                RelatedToObservationID BIGINT,
                OutbreakCaseStatusTypeID BIGINT
            );

        INSERT INTO @AnimalsTemp
        SELECT *
        FROM
            OPENJSON(@Animals)
            WITH
            (
                AnimalID BIGINT,
                SexTypeID BIGINT,
                ConditionTypeID BIGINT,
                AgeTypeID BIGINT,
                SpeciesID BIGINT,
                ObservationID BIGINT,
                EIDSSAnimalID NVARCHAR(200),
                AnimalName NVARCHAR(200),
                Color NVARCHAR(200),
                AnimalDescription NVARCHAR(200),
                ClinicalSignsIndicator BIGINT,
                RowStatus INT,
                RowAction INT,
                RelatedToAnimalID BIGINT,
                RelatedToObservationID BIGINT
            );

        INSERT INTO @VaccinationsTemp
        SELECT *
        FROM
            OPENJSON(@Vaccinations)
            WITH
            (
                VaccinationID BIGINT,
                SpeciesID BIGINT,
                VaccinationTypeID BIGINT,
                RouteTypeID BIGINT,
                DiseaseID BIGINT,
                VaccinationDate DATETIME2,
                Manufacturer NVARCHAR(200),
                LotNumber NVARCHAR(200),
                NumberVaccinated INT,
                Comments NVARCHAR(2000),
                RowStatus INT,
                RowAction INT
            );

        INSERT INTO @SamplesTemp
        SELECT *
        FROM
            OPENJSON(@Samples)
            WITH
            (
                SampleID BIGINT,
                SampleTypeID BIGINT,
                RootSampleID BIGINT,
                ParentSampleID BIGINT,
                SpeciesID BIGINT,
                AnimalID BIGINT,
                VeterinaryDiseaseReportID BIGINT,
                MonitoringSessionID BIGINT,
                SampleStatusTypeID BIGINT,
                CollectionDate DATETIME2,
                CollectedByOrganizationID BIGINT,
                CollectedByPersonID BIGINT,
                SentDate DATETIME2,
                SentToOrganizationID BIGINT,
                EIDSSLocalOrFieldSampleID NVARCHAR(200),
                Comments NVARCHAR(200),
                SiteID BIGINT,
                CurrentSiteID BIGINT,
                EnteredDate DATETIME2,
                DiseaseID BIGINT,
                BirdStatusTypeID BIGINT,
                ReadOnlyIndicator BIT,
                LabModuleSourceIndicator INT,
                FarmID BIGINT,
                FarmOwnerID BIGINT,
                RowStatus INT,
                RowAction INT
            );

        SET @Iteration =
        (
            SELECT COUNT(*) FROM dbo.tlbMaterial WHERE idfVetCase = @DiseaseReportID
        );

        INSERT INTO @PensideTestsTemp
        SELECT *
        FROM
            OPENJSON(@PensideTests)
            WITH
            (
                PensideTestID BIGINT,
                SampleID BIGINT,
                PensideTestNameTypeID BIGINT,
                PensideTestResultTypeID BIGINT,
                PensideTestCategoryTypeID BIGINT,
                TestedByPersonID BIGINT,
                TestedByOrganizationID BIGINT,
                DiseaseID BIGINT,
                TestDate DATETIME2,
                RowStatus INT,
                RowAction INT
            );

        INSERT INTO @LaboratoryTestsTemp
        SELECT *
        FROM
            OPENJSON(@LaboratoryTests)
            WITH
            (
                TestID BIGINT,
                TestNameTypeID BIGINT,
                TestCategoryTypeID BIGINT,
                TestResultTypeID BIGINT,
                TestStatusTypeID BIGINT,
                DiseaseID BIGINT,
                SampleID BIGINT,
                BatchTestID BIGINT,
                ObservationID BIGINT,
                TestNumber INT,
                Comments NVARCHAR(500),
                StartedDate DATETIME2,
                ResultDate DATETIME2,
                TestedByOrganizationID BIGINT,
                TestedByPersonID BIGINT,
                ResultEnteredByOrganizationID BIGINT,
                ResultEnteredByPersonID BIGINT,
                ValidatedByOrganizationID BIGINT,
                ValidatedByPersonID BIGINT,
                ReadOnlyIndicator BIT,
                NonLaboratoryTestIndicator BIT,
                ExternalTestIndicator BIT,
                PerformedByOrganizationID BIGINT,
                ReceivedDate DATETIME2,
                ContactPersonName NVARCHAR(200),
                RowStatus INT,
                RowAction INT
            );

        INSERT INTO @LaboratoryTestInterpretationsTemp
        SELECT *
        FROM
            OPENJSON(@LaboratoryTestInterpretations)
            WITH
            (
                TestInterpretationID BIGINT,
                DiseaseID BIGINT,
                InterpretedStatusTypeID BIGINT,
                ValidatedByOrganizationID BIGINT,
                ValidatedByPersonID BIGINT,
                InterpretedByOrganizationID BIGINT,
                InterpretedByPersonID BIGINT,
                TestID BIGINT,
                ValidatedStatusIndicator BIT,
                ReportSessionCreatedIndicator BIT,
                ValidatedComment NVARCHAR(200),
                InterpretedComment NVARCHAR(200),
                ValidatedDate DATETIME2,
                InterpretedDate DATETIME2,
                ReadOnlyIndicator BIT,
                RowStatus INT,
                RowAction INT
            );

        INSERT INTO @CaseLogsTemp
        SELECT *
        FROM
            OPENJSON(@CaseLogs)
            WITH
            (
                CaseLogID BIGINT,
                LogStatusTypeID BIGINT,
                LoggedByPersonID BIGINT,
                LogDate DATETIME2,
                ActionRequired NVARCHAR(200),
                Comments NVARCHAR(1000),
                RowStatus INT,
                RowAction INT
            );

        INSERT INTO @ClinicalInformationTemp
        SELECT *
        FROM
            OPENJSON(@ClinicalInformation)
            WITH
            (
                langId NVARCHAR(200),
                HerdID BIGINT,
                Herd NVARCHAR(200),
                ClinicalSignsTypeID BIGINT,
                SpeciesTypeID BIGINT,
                SpeciesTypeName NVARCHAR(200),
                StatusTypeID BIGINT,
                InvestigationPerformedTypeID BIGINT
            );

        INSERT INTO @EventsTemp
        SELECT *
        FROM
            OPENJSON(@Events)
            WITH
            (
                EventId BIGINT,
                EventTypeId BIGINT,
                UserId BIGINT,
                SiteId BIGINT,
                LoginSiteId BIGINT,
                ObjectId BIGINT,
                DiseaseId BIGINT,
                LocationId BIGINT,
                InformationString NVARCHAR(MAX),
                Note NVARCHAR(MAX)
            );

        IF NOT EXISTS
        (
            SELECT *
            FROM dbo.tlbVetCase
            WHERE idfVetCase = @DiseaseReportID
                  AND intRowStatus = 0
        )
        BEGIN
            -- Get next key value
            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tlbVetCase', @DiseaseReportID OUTPUT;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_GBL_NextNumber_GET 'Vet Disease Report',
                                               @EIDSSReportID OUTPUT,
                                               NULL;

            -- Data audit
            SET @DataAuditEventTypeID = 10016001; -- Data audit create event type

            INSERT INTO @SuppressSelect
            EXEC dbo.USSP_GBL_DataAuditEvent_GET @AuditUserID,
                                                 @AuditSiteID,
                                                 @DataAuditEventTypeID,
                                                 @ObjectTypeID,
                                                 @DiseaseReportID,
                                                 @ObjectTableID,
                                                 @DataAuditEventID OUTPUT;
            -- End data audit

            IF @ReportCategoryTypeID = 10012004 --Avian
            BEGIN
                UPDATE dbo.tlbFarmActual
                SET intAvianTotalAnimalQty = @FarmTotalAnimalQuantity,
                    intAvianSickAnimalQty = @FarmSickAnimalQuantity,
                    intAvianDeadAnimalQty = @FarmDeadAnimalQuantity,
                    AuditUpdateUser = @AuditUserName
                WHERE idfFarmActual = @FarmMasterID;

                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_VET_COPY_FARM_SET @AuditUserName,
                                                   @DataAuditEventID,
                                                   @EIDSSReportID,
                                                   @FarmMasterID,
                                                   @FarmTotalAnimalQuantity,
                                                   @FarmSickAnimalQuantity,
                                                   @FarmDeadAnimalQuantity,
                                                   NULL,
                                                   NULL,
                                                   NULL,
                                                   @FarmLatitude,
                                                   @FarmLongitude,
                                                   NULL,
                                                   @FarmEpidemiologicalObservationID,
                                                   @FarmOwnerID,
                                                   @FarmID OUTPUT,
                                                   @NewFarmOwnerID OUTPUT;

                IF @NewFarmOwnerID IS NOT NULL
                BEGIN
                    SET @FarmOwnerID = @NewFarmOwnerID;
                END;
            END
            ELSE --Livestock
            BEGIN
                UPDATE dbo.tlbFarmActual
                SET intLivestockTotalAnimalQty = @FarmTotalAnimalQuantity,
                    intLivestockSickAnimalQty = @FarmSickAnimalQuantity,
                    intLivestockDeadAnimalQty = @FarmDeadAnimalQuantity,
                    AuditUpdateUser = @AuditUserName
                WHERE idfFarmActual = @FarmMasterID;

                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_VET_COPY_FARM_SET @AuditUserName,
                                                   @DataAuditEventID,
                                                   @EIDSSReportID,
                                                   @FarmMasterID,
                                                   NULL,
                                                   NULL,
                                                   NULL,
                                                   @FarmTotalAnimalQuantity,
                                                   @FarmSickAnimalQuantity,
                                                   @FarmDeadAnimalQuantity,
                                                   @FarmLatitude,
                                                   @FarmLongitude,
                                                   NULL,
                                                   @FarmEpidemiologicalObservationID,
                                                   @FarmOwnerID,
                                                   @FarmID OUTPUT,
                                                   @NewFarmOwnerID OUTPUT;

                IF @NewFarmOwnerID IS NOT NULL
                BEGIN
                    SET @FarmOwnerID = @NewFarmOwnerID;
                END;
            END

            INSERT INTO dbo.tlbVetCase
            (
                idfVetCase,
                idfFarm,
                idfsFinalDiagnosis,
                idfPersonEnteredBy,
                idfPersonReportedBy,
                idfPersonInvestigatedBy,
                idfObservation,
                idfsSite,
                datReportDate,
                datAssignedDate,
                datInvestigationDate,
                datFinalDiagnosisDate,
                strTestNotes,
                strSummaryNotes,
                strClinicalNotes,
                strFieldAccessionID,
                idfsYNTestsConducted,
                intRowStatus,
                idfReportedByOffice,
                idfInvestigatedByOffice,
                idfsCaseReportType,
                strDefaultDisplayDiagnosis,
                idfsCaseClassification,
                idfOutbreak,
                datEnteredDate,
                strCaseID,
                idfsCaseProgressStatus,
                strSampleNotes,
                datModificationForArchiveDate,
                idfParentMonitoringSession,
                idfsCaseType,
                idfReceivedByOffice,
                idfReceivedByPerson,
                AuditCreateUser,
                SourceSystemNameID,
                SourceSystemKeyValue
            )
            VALUES
            (@DiseaseReportID,
             @FarmID,
             @DiseaseID,
             @EnteredByPersonID,
             @ReportedByPersonID,
             @InvestigatedByPersonID,
             @ControlMeasuresObservationID,
             @SiteID,
             @ReportDate,
             @AssignedDate,
             @InvestigationDate,
             @DiagnosisDate,
             NULL,
             NULL,
             NULL,
             @EIDSSFieldAccessionID,
             @TestsConductedIndicator,
             @RowStatus,
             @ReportedByOrganizationID,
             @InvestigatedByOrganizationID,
             @ReportTypeID,
             NULL,
             @ClassificationTypeID,
             @OutbreakID,
             @EnteredDate,
             @EIDSSReportID,
             @StatusTypeID,
             NULL,
             NULL,
             @MonitoringSessionID,
             @ReportCategoryTypeID,
             @ReceivedByOrganizationID,
             @ReceivedByPersonID,
             @AuditUserName,
             10519001,
             '[{"idfVetCase":' + CAST(@DiseaseReportID AS NVARCHAR(300)) + '}]'
            );

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailCreate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser,
                strObject
            )
            VALUES
            (@DataAuditEventID,
             @ObjectTableID,
             @DiseaseReportID,
             10519001,
             '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
             + CAST(@ObjectTableID AS NVARCHAR(300)) + '}]',
             @AuditUserName,
             @EIDSSReportID
            );

            -- Update data audit event ID on tlbObservation and tlbActivityParameters
            -- for flexible forms saved outside this DB transaction.
            UPDATE dbo.tauDataAuditDetailCreate
            SET idfDataAuditEvent = @DataAuditEventID,
                strObject = @EIDSSReportID
            WHERE idfObject = @FarmEpidemiologicalObservationID
                  AND idfDataAuditEvent IS NULL;

            UPDATE dbo.tauDataAuditDetailCreate
            SET idfDataAuditEvent = @DataAuditEventID,
                strObject = @EIDSSReportID
            WHERE idfObject = @ControlMeasuresObservationID
                  AND idfDataAuditEvent IS NULL;
            -- End data audit

            UPDATE @EventsTemp
            SET ObjectId = @DiseaseReportID,
                Note = REPLACE(Note, 'diseaseReportID=0', 'diseaseReportID=' + CAST(@DiseaseReportID AS NVARCHAR(300)))
            WHERE ObjectId = 0;
        END
        ELSE
        BEGIN
            -- Data audit
            SET @DataAuditEventTypeID = 10016003; -- Data audit edit event type

            INSERT INTO @SuppressSelect
            EXEC dbo.USSP_GBL_DataAuditEvent_GET @AuditUserID,
                                                 @AuditSiteID,
                                                 @DataAuditEventTypeID,
                                                 @ObjectTypeID,
                                                 @DiseaseReportID,
                                                 @ObjectTableID,
                                                 @DataAuditEventID OUTPUT;
            -- End data audit

            IF @ReportCategoryTypeID = 10012004 --Avian
            BEGIN
                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_VET_COPY_FARM_SET @AuditUserName,
                                                   @DataAuditEventID,
                                                   @EIDSSReportID,
                                                   @FarmMasterID,
                                                   @FarmTotalAnimalQuantity,
                                                   @FarmSickAnimalQuantity,
                                                   @FarmDeadAnimalQuantity,
                                                   NULL,
                                                   NULL,
                                                   NULL,
                                                   @FarmLatitude,
                                                   @FarmLongitude,
                                                   @MonitoringSessionID,
                                                   @FarmEpidemiologicalObservationID,
                                                   @FarmOwnerID,
                                                   @FarmID OUTPUT,
                                                   @NewFarmOwnerID OUTPUT;

                IF @NewFarmOwnerID IS NOT NULL
                BEGIN
                    SET @FarmOwnerID = @NewFarmOwnerID;
                END;
            END
            ELSE --Livestock
            BEGIN
                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_VET_COPY_FARM_SET @AuditUserName,
                                                   @DataAuditEventID,
                                                   @EIDSSReportID,
                                                   @FarmMasterID,
                                                   NULL,
                                                   NULL,
                                                   NULL,
                                                   @FarmTotalAnimalQuantity,
                                                   @FarmSickAnimalQuantity,
                                                   @FarmDeadAnimalQuantity,
                                                   @FarmLatitude,
                                                   @FarmLongitude,
                                                   @MonitoringSessionID,
                                                   @FarmEpidemiologicalObservationID,
                                                   @FarmOwnerID,
                                                   @FarmID OUTPUT,
                                                   @NewFarmOwnerID OUTPUT;

                IF @NewFarmOwnerID IS NOT NULL
                BEGIN
                    SET @FarmOwnerID = @NewFarmOwnerID;
                END;
            END
            -- Data audit
            INSERT INTO @VeterinaryDiseaseReportBeforeEdit
            (
                DiseaseReportID,
                FarmID,
                DiseaseID,
                PersonEnteredByID,
                PersonReportedByID,
                PersonInvestigatedByID,
                ObservationID,
                ReportDate,
                AssignedDate,
                InvestigationDate,
                FinalDiagnosisDate,
                FieldAccessionID,
                YNTestsConductedTypeID,
                ReportedByOfficeID,
                InvestigatedByOfficeID,
                CaseReportTypeID,
                CaseClassificationTypeID,
                OutbreakID,
                EnteredDate,
                EIDSSReportID,
                CaseProgressStatusTypeID,
                ParentMonitoringSessionID,
                CaseTypeID,
                ReceivedByOfficeID,
                ReceivedByPersonID
            )
            SELECT idfVetCase,
                   idfFarm,
                   idfsFinalDiagnosis,
                   idfPersonEnteredBy,
                   idfPersonReportedBy,
                   idfPersonInvestigatedBy,
                   idfObservation,
                   datReportDate,
                   datAssignedDate,
                   datInvestigationDate,
                   datFinalDiagnosisDate,
                   strFieldAccessionID,
                   idfsYNTestsConducted,
                   idfReportedByOffice,
                   idfInvestigatedByOffice,
                   idfsCaseReportType,
                   idfsCaseClassification,
                   idfOutbreak,
                   datEnteredDate,
                   strCaseID,
                   idfsCaseProgressStatus,
                   idfParentMonitoringSession,
                   idfsCaseType,
                   idfReceivedByOffice,
                   idfReceivedByPerson
            FROM dbo.tlbVetCase
            WHERE idfVetCase = @DiseaseReportID;
            -- End data audit

            UPDATE dbo.tlbVetCase
            SET idfFarm = @FarmID,
                idfsFinalDiagnosis = @DiseaseID,
                idfPersonEnteredBy = @EnteredByPersonID,
                idfPersonReportedBy = @ReportedByPersonID,
                idfPersonInvestigatedBy = @InvestigatedByPersonID,
                idfReceivedByPerson = @ReceivedByPersonID,
                idfObservation = @ControlMeasuresObservationID,
                idfsSite = @SiteID,
                datReportDate = @ReportDate,
                datAssignedDate = @AssignedDate,
                datInvestigationDate = @InvestigationDate,
                datFinalDiagnosisDate = @DiagnosisDate,
                strTestNotes = NULL,
                strSummaryNotes = NULL,
                strClinicalNotes = NULL,
                strFieldAccessionID = @EIDSSFieldAccessionID,
                idfsYNTestsConducted = @TestsConductedIndicator,
                intRowStatus = @RowStatus,
                idfReportedByOffice = @ReportedByOrganizationID,
                idfInvestigatedByOffice = @InvestigatedByOrganizationID,
                idfReceivedByOffice = @ReceivedByOrganizationID,
                idfsCaseReportType = @ReportTypeID,
                idfsCaseClassification = @ClassificationTypeID,
                idfOutbreak = @OutbreakID,
                datEnteredDate = @EnteredDate,
                strCaseID = @EIDSSReportID,
                idfsCaseProgressStatus = @StatusTypeID,
                strSampleNotes = NULL,
                idfParentMonitoringSession = @MonitoringSessionID,
                idfsCaseType = @ReportCategoryTypeID,
                AuditUpdateUser = @AuditUserName
            WHERE idfVetCase = @DiseaseReportID;

            -- Data audit
            INSERT INTO @VeterinaryDiseaseReportAfterEdit
            (
                DiseaseReportID,
                FarmID,
                DiseaseID,
                PersonEnteredByID,
                PersonReportedByID,
                PersonInvestigatedByID,
                ObservationID,
                ReportDate,
                AssignedDate,
                InvestigationDate,
                FinalDiagnosisDate,
                FieldAccessionID,
                YNTestsConductedTypeID,
                ReportedByOfficeID,
                InvestigatedByOfficeID,
                CaseReportTypeID,
                CaseClassificationTypeID,
                OutbreakID,
                EnteredDate,
                EIDSSReportID,
                CaseProgressStatusTypeID,
                ParentMonitoringSessionID,
                CaseTypeID,
                ReceivedByOfficeID,
                ReceivedByPersonID
            )
            SELECT idfVetCase,
                   idfFarm,
                   idfsFinalDiagnosis,
                   idfPersonEnteredBy,
                   idfPersonReportedBy,
                   idfPersonInvestigatedBy,
                   idfObservation,
                   datReportDate,
                   datAssignedDate,
                   datInvestigationDate,
                   datFinalDiagnosisDate,
                   strFieldAccessionID,
                   idfsYNTestsConducted,
                   idfReportedByOffice,
                   idfInvestigatedByOffice,
                   idfsCaseReportType,
                   idfsCaseClassification,
                   idfOutbreak,
                   datEnteredDate,
                   strCaseID,
                   idfsCaseProgressStatus,
                   idfParentMonitoringSession,
                   idfsCaseType,
                   idfReceivedByOffice,
                   idfReceivedByPerson
            FROM dbo.tlbVetCase
            WHERE idfVetCase = @DiseaseReportID;

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4575810000000,
                   a.DiseaseReportID,
                   NULL,
                   b.FarmID,
                   a.FarmID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.FarmID <> b.FarmID)
                  OR (
                         a.FarmID IS NOT NULL
                         AND b.FarmID IS NULL
                     )
                  OR (
                         a.FarmID IS NULL
                         AND b.FarmID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   80940000000,
                   a.DiseaseReportID,
                   NULL,
                   b.DiseaseID,
                   a.DiseaseID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.DiseaseID <> b.DiseaseID)
                  OR (
                         a.DiseaseID IS NOT NULL
                         AND b.DiseaseID IS NULL
                     )
                  OR (
                         a.DiseaseID IS NULL
                         AND b.DiseaseID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   80910000000,
                   a.DiseaseReportID,
                   NULL,
                   b.PersonEnteredByID,
                   a.PersonEnteredByID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.PersonEnteredByID <> b.PersonEnteredByID)
                  OR (
                         a.PersonEnteredByID IS NOT NULL
                         AND b.PersonEnteredByID IS NULL
                     )
                  OR (
                         a.PersonEnteredByID IS NULL
                         AND b.PersonEnteredByID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   80930000000,
                   a.DiseaseReportID,
                   NULL,
                   b.PersonReportedByID,
                   a.PersonReportedByID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.PersonReportedByID <> b.PersonReportedByID)
                  OR (
                         a.PersonReportedByID IS NOT NULL
                         AND b.PersonReportedByID IS NULL
                     )
                  OR (
                         a.PersonReportedByID IS NULL
                         AND b.PersonReportedByID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   80920000000,
                   a.DiseaseReportID,
                   NULL,
                   b.PersonInvestigatedByID,
                   a.PersonInvestigatedByID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.PersonInvestigatedByID <> b.PersonInvestigatedByID)
                  OR (
                         a.PersonInvestigatedByID IS NOT NULL
                         AND b.PersonInvestigatedByID IS NULL
                     )
                  OR (
                         a.PersonInvestigatedByID IS NULL
                         AND b.PersonInvestigatedByID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4566320000000,
                   a.DiseaseReportID,
                   NULL,
                   b.ObservationID,
                   a.ObservationID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.ObservationID <> b.ObservationID)
                  OR (
                         a.ObservationID IS NOT NULL
                         AND b.ObservationID IS NULL
                     )
                  OR (
                         a.ObservationID IS NULL
                         AND b.ObservationID IS NOT NULL
                     )

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   80870000000,
                   a.DiseaseReportID,
                   NULL,
                   b.ReportDate,
                   a.ReportDate,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.ReportDate <> b.ReportDate)
                  OR (
                         a.ReportDate IS NOT NULL
                         AND b.ReportDate IS NULL
                     )
                  OR (
                         a.ReportDate IS NULL
                         AND b.ReportDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   80850000000,
                   a.DiseaseReportID,
                   NULL,
                   b.AssignedDate,
                   a.AssignedDate,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.AssignedDate <> b.AssignedDate)
                  OR (
                         a.AssignedDate IS NOT NULL
                         AND b.AssignedDate IS NULL
                     )
                  OR (
                         a.AssignedDate IS NULL
                         AND b.AssignedDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4566330000000,
                   a.DiseaseReportID,
                   NULL,
                   b.InvestigationDate,
                   a.InvestigationDate,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.InvestigationDate <> b.InvestigationDate)
                  OR (
                         a.InvestigationDate IS NOT NULL
                         AND b.InvestigationDate IS NULL
                     )
                  OR (
                         a.InvestigationDate IS NULL
                         AND b.InvestigationDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   80860000000,
                   a.DiseaseReportID,
                   NULL,
                   b.FinalDiagnosisDate,
                   a.FinalDiagnosisDate,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.FinalDiagnosisDate <> b.FinalDiagnosisDate)
                  OR (
                         a.FinalDiagnosisDate IS NOT NULL
                         AND b.FinalDiagnosisDate IS NULL
                     )
                  OR (
                         a.FinalDiagnosisDate IS NULL
                         AND b.FinalDiagnosisDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4566340000000,
                   a.DiseaseReportID,
                   NULL,
                   b.FieldAccessionID,
                   a.FieldAccessionID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.FieldAccessionID <> b.FieldAccessionID)
                  OR (
                         a.FieldAccessionID IS NOT NULL
                         AND b.FieldAccessionID IS NULL
                     )
                  OR (
                         a.FieldAccessionID IS NULL
                         AND b.FieldAccessionID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4578870000000,
                   a.DiseaseReportID,
                   NULL,
                   b.YNTestsConductedTypeID,
                   a.YNTestsConductedTypeID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.YNTestsConductedTypeID <> b.YNTestsConductedTypeID)
                  OR (
                         a.YNTestsConductedTypeID IS NOT NULL
                         AND b.YNTestsConductedTypeID IS NULL
                     )
                  OR (
                         a.YNTestsConductedTypeID IS NULL
                         AND b.YNTestsConductedTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   6618090000000,
                   a.DiseaseReportID,
                   NULL,
                   b.ReportedByOfficeID,
                   a.ReportedByOfficeID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.ReportedByOfficeID <> b.ReportedByOfficeID)
                  OR (
                         a.ReportedByOfficeID IS NOT NULL
                         AND b.ReportedByOfficeID IS NULL
                     )
                  OR (
                         a.ReportedByOfficeID IS NULL
                         AND b.ReportedByOfficeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   6618100000000,
                   a.DiseaseReportID,
                   NULL,
                   b.InvestigatedByOfficeID,
                   a.InvestigatedByOfficeID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.InvestigatedByOfficeID <> b.InvestigatedByOfficeID)
                  OR (
                         a.InvestigatedByOfficeID IS NOT NULL
                         AND b.InvestigatedByOfficeID IS NULL
                     )
                  OR (
                         a.InvestigatedByOfficeID IS NULL
                         AND b.InvestigatedByOfficeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   6618120000000,
                   a.DiseaseReportID,
                   NULL,
                   b.CaseReportTypeID,
                   a.CaseReportTypeID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.CaseReportTypeID <> b.CaseReportTypeID)
                  OR (
                         a.CaseReportTypeID IS NOT NULL
                         AND b.CaseReportTypeID IS NULL
                     )
                  OR (
                         a.CaseReportTypeID IS NULL
                         AND b.CaseReportTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   12665470000000,
                   a.DiseaseReportID,
                   NULL,
                   b.CaseClassificationTypeID,
                   a.CaseClassificationTypeID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.CaseClassificationTypeID <> b.CaseClassificationTypeID)
                  OR (
                         a.CaseClassificationTypeID IS NOT NULL
                         AND b.CaseClassificationTypeID IS NULL
                     )
                  OR (
                         a.CaseClassificationTypeID IS NULL
                         AND b.CaseClassificationTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   12665490000000,
                   a.DiseaseReportID,
                   NULL,
                   b.OutbreakID,
                   a.OutbreakID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.OutbreakID <> b.OutbreakID)
                  OR (
                         a.OutbreakID IS NOT NULL
                         AND b.OutbreakID IS NULL
                     )
                  OR (
                         a.OutbreakID IS NULL
                         AND b.OutbreakID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   12665500000000,
                   a.DiseaseReportID,
                   NULL,
                   b.EnteredDate,
                   a.EnteredDate,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.EnteredDate <> b.EnteredDate)
                  OR (
                         a.EnteredDate IS NOT NULL
                         AND b.EnteredDate IS NULL
                     )
                  OR (
                         a.EnteredDate IS NULL
                         AND b.EnteredDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   12665510000000,
                   a.DiseaseReportID,
                   NULL,
                   b.EIDSSReportID,
                   a.EIDSSReportID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.EIDSSReportID <> b.EIDSSReportID)
                  OR (
                         a.EIDSSReportID IS NOT NULL
                         AND b.EIDSSReportID IS NULL
                     )
                  OR (
                         a.EIDSSReportID IS NULL
                         AND b.EIDSSReportID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   12665520000000,
                   a.DiseaseReportID,
                   NULL,
                   b.CaseProgressStatusTypeID,
                   a.CaseProgressStatusTypeID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.CaseProgressStatusTypeID <> b.CaseProgressStatusTypeID)
                  OR (
                         a.CaseProgressStatusTypeID IS NOT NULL
                         AND b.CaseProgressStatusTypeID IS NULL
                     )
                  OR (
                         a.CaseProgressStatusTypeID IS NULL
                         AND b.CaseProgressStatusTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   12665540000000,
                   a.DiseaseReportID,
                   NULL,
                   b.ParentMonitoringSessionID,
                   a.ParentMonitoringSessionID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.ParentMonitoringSessionID <> b.ParentMonitoringSessionID)
                  OR (
                         a.ParentMonitoringSessionID IS NOT NULL
                         AND b.ParentMonitoringSessionID IS NULL
                     )
                  OR (
                         a.ParentMonitoringSessionID IS NULL
                         AND b.ParentMonitoringSessionID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   12665560000000,
                   a.DiseaseReportID,
                   NULL,
                   b.CaseTypeID,
                   a.CaseTypeID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.CaseTypeID <> b.CaseTypeID)
                  OR (
                         a.CaseTypeID IS NOT NULL
                         AND b.CaseTypeID IS NULL
                     )
                  OR (
                         a.CaseTypeID IS NULL
                         AND b.CaseTypeID IS NOT NULL
                     );
        END;

        -- VUC11 and VUC12 - connected disease report logic.
        IF @RelatedToDiseaseReportID IS NOT NULL
        BEGIN
            IF NOT EXISTS
            (
                SELECT *
                FROM dbo.VetDiseaseReportRelationship
                WHERE VetDiseaseReportID = @DiseaseReportID
                      AND intRowStatus = 0
            )
            BEGIN
                INSERT INTO @SuppressSelect
                EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'VetDiseaseReportRelationship',
                                                  @VeterinaryDiseaseReportRelationshipID OUTPUT;

                INSERT INTO dbo.VetDiseaseReportRelationship
                (
                    VetDiseaseReportRelnUID,
                    VetDiseaseReportID,
                    RelatedToVetDiseaseReportID,
                    RelationshipTypeID,
                    intRowStatus,
                    SourceSystemNameID,
                    SourceSystemKeyValue,
                    AuditCreateUser
                )
                VALUES
                (@VeterinaryDiseaseReportRelationshipID,
                 @DiseaseReportID,
                 @RelatedToDiseaseReportID,
                 10503001,
                 0  ,
                 10519001,
                 '[{"VetDiseaseReportRelnUID":' + CAST(@VeterinaryDiseaseReportRelationshipID AS NVARCHAR(300))
                 + ',"VetDiseaseReportID":' + CAST(@DiseaseReportID AS NVARCHAR(300)) + '}]',
                 @AuditUserName
                );

                -- Data audit
                INSERT INTO dbo.tauDataAuditDetailCreate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    SourceSystemNameID,
                    SourceSystemKeyValue,
                    AuditCreateUser,
                    strObject
                )
                VALUES
                (@DataAuditEventID,
                 @ObjectVeterinaryDiseaseReportRelationshipTableID,
                 @VeterinaryDiseaseReportRelationshipID,
                 10519001,
                 '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
                 + CAST(@ObjectVeterinaryDiseaseReportRelationshipTableID AS NVARCHAR(300)) + '}]',
                 @AuditUserName,
                 @EIDSSReportID
                );
            -- End data audit
            END;
        END;

        -- An outbreak reference via a case must be created in order to tie the disease report to the outbreak session.
        IF @OutbreakCaseIndicator = 1
        BEGIN
            IF @OutbreakCaseReportUID IS NULL
            BEGIN
                INSERT INTO @SuppressSelect
                EXEC dbo.USP_GBL_NEXTKEYID_GET 'OutbreakCaseReport',
                                               @OutbreakCaseReportUID OUTPUT;

                INSERT INTO @SuppressSelect
                EXEC dbo.USP_GBL_NextNumber_GET 'Vet Outbreak Case',
                                                @EIDSSCaseID OUTPUT,
                                                NULL;

                INSERT INTO dbo.OutbreakCaseReport
                (
                    OutbreakCaseReportUID,
                    idfOutbreak,
                    strOutbreakCaseID,
                    idfHumanCase,
                    idfVetCase,
                    OutbreakCaseObservationId,
                    OutbreakCaseStatusId,
                    OutbreakCaseClassificationID,
                    IsPrimaryCaseFlag,
                    intRowStatus,
                    SourceSystemNameID,
                    SourceSystemKeyValue,
                    AuditCreateUser,
                    AuditCreateDTM,
                    AuditUpdateUser,
                    AuditUpdateDTM
                )
                VALUES
                (@OutbreakCaseReportUID,
                 @OutbreakID,
                 @EIDSSCaseID,
                 NULL,
                 @DiseaseReportID,
                 @OutbreakCaseQuestionnaireObservationID,
                 @OutbreakCaseStatusTypeID,
                 @ClassificationTypeID,
                 @PrimaryCaseIndicator,
                 0  ,
                 10519001,
                 '[{"OutBreakCaseReportUID":' + CAST(@OutbreakCaseReportUID AS NVARCHAR(300)) + ',"idfOutbreak":'
                 + CAST(@OutbreakID AS NVARCHAR(300)) + '}]',
                 @AuditUserName,
                 GETDATE(),
                 @AuditUserName,
                 GETDATE()
                );
            END
            ELSE
            BEGIN
                UPDATE dbo.OutbreakCaseReport
                SET OutbreakCaseStatusId = @OutbreakCaseStatusTypeID,
                    OutbreakCaseClassificationID = @ClassificationTypeID,
                    IsPrimaryCaseFlag = @PrimaryCaseIndicator,
                    intRowStatus = 0,
                    AuditUpdateUser = @AuditUserName,
                    AuditUpdateDTM = GETDATE(),
                    OutbreakCaseObservationID = @OutbreakCaseQuestionnaireObservationID
                WHERE OutbreakCaseReportUID = @OutbreakCaseReportUID;
            END
        END

        WHILE EXISTS (SELECT * FROM @FlocksOrHerdsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = FlockOrHerdID,
                @FlockOrHerdID = FlockOrHerdID,
                @FlockOrHerdMasterID = FlockOrHerdMasterID,
                @EIDSSFlockOrHerdID = EIDSSFlockOrHerdID,
                @SickAnimalQuantity = SickAnimalQuantity,
                @TotalAnimalQuantity = TotalAnimalQuantity,
                @DeadAnimalQuantity = DeadAnimalQuantity,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @FlocksOrHerdsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VET_FLOCK_HERD_SET @AuditUserName,
                                                @DataAuditEventID,
                                                @EIDSSReportID,
                                                @FlockOrHerdID OUTPUT,
                                                @FlockOrHerdMasterID,
                                                @FarmID,
                                                @EIDSSFlockOrHerdID,
                                                @SickAnimalQuantity,
                                                @TotalAnimalQuantity,
                                                @DeadAnimalQuantity,
                                                NULL,
                                                @RowStatus,
                                                @RowAction;

            UPDATE @SpeciesTemp
            SET FlockOrHerdID = @FlockOrHerdID
            WHERE FlockOrHerdID = @RowID;

            DELETE FROM @FlocksOrHerdsTemp
            WHERE FLockOrHerdID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @SpeciesTemp)
        BEGIN
            SELECT TOP 1
                @RowID = SpeciesID,
                @SpeciesID = SpeciesID,
                @SpeciesMasterID = SpeciesMasterID,
                @SpeciesTypeID = SpeciesTypeID,
                @FlockOrHerdID = FlockOrHerdID,
                @StartOfSignsDate = StartOfSignsDate,
                @AverageAge = AverageAge,
                @SickAnimalQuantity = SickAnimalQuantity,
                @TotalAnimalQuantity = TotalAnimalQuantity,
                @DeadAnimalQuantity = DeadAnimalQuantity,
                @Comments = Comments,
                @ObservationID = ObservationID,
                @RowStatus = RowStatus,
                @RowAction = RowAction,
                @RelatedToSpeciesID = RelatedToSpeciesID,
                @RelatedToObservationID = RelatedToObservationID,
                @OutbreakSpeciesCaseStatusTypeID = OutbreakCaseStatusTypeID
            FROM @SpeciesTemp;

            -- VUC11 and VUC12 - connected disease report logic for clinical species investigations.
            IF @RelatedToDiseaseReportID IS NOT NULL
               AND @RowAction = 1 -- Insert
            BEGIN
                IF @RelatedToObservationID IS NOT NULL
                BEGIN
                    SELECT @FormTemplateID = idfsFormTemplate,
                           @ObservationSiteID = idfsSite
                    FROM dbo.tlbObservation
                    WHERE idfObservation = @RelatedToObservationID;

                    SET @ObservationID = -1;

                    INSERT INTO @SuppressSelect
                    EXECUTE dbo.USSP_GBL_OBSERVATION_SET @ObservationID OUTPUT,
                                                         @FormTemplateID,
                                                         @ObservationSiteID,
                                                         0,
                                                         1, 
                                                         @AuditUserName, 
                                                         @DataAuditEventID, 
                                                         @EIDSSReportID;

                    UPDATE @SpeciesTemp
                    SET ObservationID = @ObservationID
                    WHERE SpeciesMasterID = @SpeciesMasterID;

                    INSERT INTO @ActivityParametersTemp
                    SELECT idfActivityParameters,
                           idfsParameter,
                           varValue,
                           idfRow
                    FROM dbo.tlbActivityParameters
                    WHERE idfObservation = @RelatedToObservationID;

                    WHILE EXISTS (SELECT * FROM @ActivityParametersTemp)
                    BEGIN
                        SELECT TOP 1
                            @ActivityID = ActivityID,
                            @ParameterID = ParameterID,
                            @ParameterValue = ParameterValue,
                            @ParameterRowID = ParameterRowID
                        FROM @ActivityParametersTemp;

                        INSERT INTO @SuppressSelect
                        EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tlbActivityParameters',
                                                          @ActivityIDNew OUTPUT;

                        INSERT INTO dbo.tlbActivityParameters
                        (
                            idfActivityParameters,
                            idfsParameter,
                            idfObservation,
                            varValue,
                            idfRow,
                            intRowStatus,
                            SourceSystemNameID,
                            SourceSystemKeyValue,
                            AuditCreateUser,
                            AuditCreateDTM
                        )
                        VALUES
                        (@ActivityIDNew,
                         @ParameterID,
                         @ObservationID,
                         @ParameterValue,
                         @ParameterRowID,
                         0  ,
                         10519001,
                         '[{"idfActivityParameters":' + CAST(@ActivityIDNew AS NVARCHAR(300)) + '}]',
                         @AuditUserName,
                         GETDATE()
                        );

                        -- Data audit
                        INSERT INTO dbo.tauDataAuditDetailCreate
                        (
                            idfDataAuditEvent,
                            idfObjectTable,
                            idfObject,
                            idfObjectDetail,
                            SourceSystemNameID,
                            SourceSystemKeyValue,
                            AuditCreateUser
                        )
                        VALUES
                        (@DataAuditEventID,
                         @ObjectActivityParametersTableID,
                         @ActivityIDNew,
                         @ObservationID,
                         10519001,
                         '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
                         + CAST(@ObjectActivityParametersTableID AS NVARCHAR(300)) + '}]',
                         @AuditUserName
                        );
                        -- End data audit

                        DELETE FROM @ActivityParametersTemp
                        WHERE ActivityID = @ActivityID;
                    END;
                END;
            END;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VET_SPECIES_WITH_AUDITING_SET @AuditUserName,
                                                           @DataAuditEventID,
                                                           @EIDSSReportID,
                                                           @SpeciesID OUTPUT,
                                                           @SpeciesMasterID,
                                                           @SpeciesTypeID,
                                                           @FlockOrHerdID,
                                                           @ObservationID,
                                                           @StartOfSignsDate,
                                                           @AverageAge,
                                                           @SickAnimalQuantity,
                                                           @TotalAnimalQuantity,
                                                           @DeadAnimalQuantity,
                                                           @Comments,
                                                           @RowStatus,
                                                           @RowAction,
                                                           @OutbreakSpeciesCaseStatusTypeID;

            UPDATE @AnimalsTemp
            SET SpeciesID = @SpeciesID
            WHERE SpeciesID = @RowID;

            UPDATE @VaccinationsTemp
            SET SpeciesID = @SpeciesID
            WHERE SpeciesID = @RowID;

            UPDATE @SamplesTemp
            SET SpeciesID = @SpeciesID
            WHERE SpeciesID = @RowID;

            DELETE FROM @SpeciesTemp
            WHERE SpeciesID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @AnimalsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = AnimalID,
                @AnimalID = AnimalID,
                @SexTypeID = SexTypeID,
                @ConditionTypeID = ConditionTypeID,
                @AgeTypeID = AgeTypeID,
                @SpeciesID = SpeciesID,
                @ObservationID = ObservationID,
                @AnimalDescription = AnimalDescription,
                @EIDSSAnimalID = EIDSSAnimalID,
                @AnimalName = AnimalName,
                @Color = Color,
                @ClinicalSignsIndicator = ClinicalSignsIndicator,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @AnimalsTemp;

            -- VUC11 and VUC12 - connected disease report logic for clinical signs.
            IF @RelatedToDiseaseReportID IS NOT NULL
               AND @RowAction = 1 -- Insert
               AND @ObservationID IS NOT NULL
            BEGIN
                SELECT @FormTemplateID = idfsFormTemplate,
                       @ObservationSiteID = idfsSite
                FROM dbo.tlbObservation
                WHERE idfObservation = @RelatedToObservationID;

                SET @ObservationID = -1;

                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_GBL_OBSERVATION_SET @ObservationID OUTPUT,
                                                     @FormTemplateID,
                                                     @ObservationSiteID,
                                                     0,
                                                     1, 
                                                     @AuditUserName, 
                                                     @DataAuditEventID, 
                                                     @EIDSSReportID;

                UPDATE @AnimalsTemp
                SET ObservationID = @ObservationID
                WHERE AnimalID = @RowID;

                INSERT INTO @ActivityParametersTemp
                SELECT idfActivityParameters,
                       idfsParameter,
                       varValue,
                       idfRow
                FROM dbo.tlbActivityParameters
                WHERE idfObservation = @RelatedToObservationID;

                WHILE EXISTS (SELECT * FROM @ActivityParametersTemp)
                BEGIN
                    SELECT TOP 1
                        @ActivityID = ActivityID,
                        @ParameterID = ParameterID,
                        @ParameterValue = ParameterValue,
                        @ParameterRowID = ParameterRowID
                    FROM @ActivityParametersTemp;

                    INSERT INTO @SuppressSelect
                    EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tlbActivityParameters',
                                                      @ActivityIDNew OUTPUT;

                    INSERT INTO dbo.tlbActivityParameters
                    (
                        idfActivityParameters,
                        idfsParameter,
                        idfObservation,
                        varValue,
                        idfRow,
                        intRowStatus,
                        SourceSystemNameID,
                        SourceSystemKeyValue,
                        AuditCreateUser,
                        AuditCreateDTM
                    )
                    VALUES
                    (@ActivityIDNew,
                     @ParameterID,
                     @ObservationID,
                     @ParameterValue,
                     @ParameterRowID,
                     0  ,
                     10519001,
                     '[{"idfActivityParameters":' + CAST(@ActivityIDNew AS NVARCHAR(300)) + '}]',
                     @AuditUserName,
                     GETDATE()
                    );

                    -- Data audit
                    INSERT INTO dbo.tauDataAuditDetailCreate
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfObject,
                        idfObjectDetail,
                        SourceSystemNameID,
                        SourceSystemKeyValue,
                        AuditCreateUser
                    )
                    VALUES
                    (@DataAuditEventID,
                     @ObjectActivityParametersTableID,
                     @ActivityIDNew,
                     @ObservationID,
                     10519001,
                     '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
                     + CAST(@ObjectActivityParametersTableID AS NVARCHAR(300)) + '}]',
                     @AuditUserName
                    );
                    -- End data audit

                    DELETE FROM @ActivityParametersTemp
                    WHERE ActivityID = @ActivityID;
                END;
            END;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VET_ANIMALS_SET @AuditUserName,
                                             @DataAuditEventID,
                                             @EIDSSReportID,
                                             @AnimalID OUTPUT,
                                             @SexTypeID,
                                             @ConditionTypeID,
                                             @AgeTypeID,
                                             @SpeciesID,
                                             @ObservationID,
                                             @AnimalDescription,
                                             @EIDSSAnimalID,
                                             @AnimalName,
                                             @Color,
                                             @ClinicalSignsIndicator,
                                             @RowStatus,
                                             @RowAction;

            UPDATE @SamplesTemp
            SET AnimalID = @AnimalID
            WHERE AnimalID = @RowID;

            DELETE FROM @AnimalsTemp
            WHERE AnimalID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @VaccinationsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = VaccinationID,
                @VaccinationID = VaccinationID,
                @SpeciesID = SpeciesID,
                @VaccinationTypeID = VaccinationTypeID,
                @RouteTypeID = RouteTypeID,
                @DiseaseID = DiseaseID,
                @VaccinationDate = VaccinationDate,
                @Manufacturer = Manufacturer,
                @LotNumber = LotNumber,
                @NumberVaccinated = NumberVaccinated,
                @Comments = Comments,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @VaccinationsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VET_VACCINATIONS_SET @AuditUserName,
                                                  @DataAuditEventID,
                                                  @EIDSSReportID,
                                                  @VaccinationID OUTPUT,
                                                  @DiseaseReportID,
                                                  @SpeciesID,
                                                  @VaccinationTypeID,
                                                  @RouteTypeID,
                                                  @DiseaseID,
                                                  @VaccinationDate,
                                                  @Manufacturer,
                                                  @LotNumber,
                                                  @NumberVaccinated,
                                                  @Comments,
                                                  @RowStatus,
                                                  @RowAction;

            DELETE FROM @VaccinationsTemp
            WHERE VaccinationID = @RowID;
        END;

        IF @Contacts IS NOT NULL
            EXEC dbo.USSP_OMM_CONTACT_SET NULL,
                                          @Contacts,
                                          @User = @AuditUserName,
                                          @OutBreakCaseReportUID = @OutbreakCaseReportUID,
                                          @FunctionCall = 1;

        WHILE EXISTS (SELECT * FROM @SamplesTemp)
        BEGIN
            SELECT TOP 1
                @RowID = SampleID,
                @SampleID = SampleID,
                @SampleTypeID = SampleTypeID,
                @RootSampleID = RootSampleID,
                @ParentSampleID = ParentSampleID,
                @SpeciesID = SpeciesID,
                @AnimalID = AnimalID,
                @SampleDiseaseReportID = VeterinaryDiseaseReportID,
                @MonitoringSessionID = MonitoringSessionID,
                @CollectedByPersonID = CollectedByPersonID,
                @CollectedByOrganizationID = CollectedByOrganizationID,
                @CollectionDate = CollectionDate,
                @SentDate = SentDate,
                @EIDSSLocalOrFieldSampleID = EIDSSLocalOrFieldSampleID,
                @SampleStatusTypeID = SampleStatusTypeID,
                @EnteredDate = EnteredDate,
                @Comments = Comments,
                @SiteID = SiteID,
                @CurrentSiteID = CurrentSiteID,
                @RowStatus = RowStatus,
                @SentToOrganizationID = SentToOrganizationID,
                @BirdStatusTypeID = BirdStatusTypeID,
                @ReadOnlyIndicator = ReadOnlyIndicator,
                @LabModuleSourceIndicator = LabModuleSourceIndicator,
                @RowAction = RowAction
            FROM @SamplesTemp;

            IF (
                   @EIDSSLocalOrFieldSampleID IS NULL
                   OR @EIDSSLocalOrFieldSampleID = ''
               )
               AND @LinkLocalOrFieldSampleIDToReportID = 1
            BEGIN
                SET @Iteration = @Iteration + 1;
                IF @Iteration < 10
                BEGIN
                    SET @EIDSSLocalOrFieldSampleID = @EIDSSReportID + '-0' + CONVERT(NVARCHAR(4), @Iteration);
                END
                ELSE
                BEGIN
                    SET @EIDSSLocalOrFieldSampleID = @EIDSSReportID + '-' + CONVERT(NVARCHAR(4), @Iteration);
                END;
            END;

            -- Check if sample is being de-linked, so use sample disease report ID passed in from 
            -- sample record instead of parent disease report ID.
            IF @LabModuleSourceIndicator = 0
            BEGIN
                SET @SampleDiseaseReportID = @DiseaseReportID;
            END

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_GBL_SAMPLES_SET @AuditUserName,
                                             @DataAuditEventID,
                                             @SampleID OUTPUT,
                                             @SampleTypeID,
                                             @RootSampleID,
                                             @ParentSampleID,
                                             @FarmOwnerID,
                                             @SpeciesID,
                                             @AnimalID,
                                             NULL,
                                             @MonitoringSessionID,
                                             NULL,
                                             NULL,
                                             @SampleDiseaseReportID,
                                             @CollectionDate,
                                             @CollectedByPersonID,
                                             @CollectedByOrganizationID,
                                             @SentDate,
                                             @SentToOrganizationID,
                                             @EIDSSLocalOrFieldSampleID,
                                             @SiteID,
                                             @EnteredDate,
                                             @ReadOnlyIndicator,
                                             @SampleStatusTypeID,
                                             @Comments,
                                             @CurrentSiteID,
                                             @DiseaseID,
                                             @BirdStatusTypeID,
                                             @RowStatus,
                                             @RowAction;

            UPDATE @PensideTestsTemp
            SET SampleID = @SampleID
            WHERE SampleID = @RowID;

            UPDATE @LaboratoryTestsTemp
            SET SampleID = @SampleID
            WHERE SampleID = @RowID;

            DELETE FROM @SamplesTemp
            WHERE SampleID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @PensideTestsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = PensideTestID,
                @PensideTestID = PensideTestID,
                @SampleID = SampleID,
                @PensideTestResultTypeID = PensideTestResultTypeID,
                @PensideTestNameTypeID = PensideTestNameTypeID,
                @RowStatus = RowStatus,
                @TestedByPersonID = TestedByPersonID,
                @TestedByOrganizationID = TestedByOrganizationID,
                @DiseaseID = DiseaseID,
                @TestDate = TestDate,
                @PensideTestCategoryTypeID = PensideTestCategoryTypeID,
                @RowAction = RowAction
            FROM @PensideTestsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VET_PENSIDE_TESTS_SET @AuditUserName,
                                                   @DataAuditEventID,
                                                   @EIDSSReportID,
                                                   @PensideTestID OUTPUT,
                                                   @SampleID,
                                                   @PensideTestResultTypeID,
                                                   @PensideTestNameTypeID,
                                                   @TestedByPersonID,
                                                   @TestedByOrganizationID,
                                                   @DiseaseID,
                                                   @TestDate,
                                                   @PensideTestCategoryTypeID,
                                                   @RowStatus,
                                                   @RowAction;

            DELETE FROM @PensideTestsTemp
            WHERE PensideTestID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @LaboratoryTestsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = TestID,
                @TestID = TestID,
                @TestNameTypeID = TestNameTypeID,
                @TestCategoryTypeID = TestCategoryTypeID,
                @TestResultTypeID = TestResultTypeID,
                @TestStatusTypeID = TestStatusTypeID,
                @DiseaseID = DiseaseID,
                @SampleID = SampleID,
                @Comments = Comments,
                @RowStatus = RowStatus,
                @StartedDate = StartedDate,
                @ResultDate = ResultDate,
                @TestedByOrganizationID = TestedByOrganizationID,
                @TestedByPersonID = TestedByPersonID,
                @ResultEnteredByOrganizationID = ResultEnteredByOrganizationID,
                @ResultEnteredByPersonID = ResultEnteredByPersonID,
                @ValidatedByOrganizationID = ValidatedByOrganizationID,
                @ValidatedByPersonID = ValidatedByPersonID,
                @ReadOnlyIndicator = ReadOnlyIndicator,
                @NonLaboratoryTestIndicator = NonLaboratoryTestIndicator,
                @ExternalTestIndicator = ExternalTestIndicator,
                @PerformedByOrganizationID = PerformedByOrganizationID,
                @ReceivedDate = ReceivedDate,
                @ContactPersonName = ContactPersonName,
                @RowAction = RowAction
            FROM @LaboratoryTestsTemp;

            --If record is being soft-deleted, then check if the test record was originally created 
            --in the laboaratory module.  If it was, then disassociate the test record from the 
            --veterinary disease report, so that the test record remains in the laboratory module 
            --for further action.
            IF @RowStatus = 1
               AND @NonLaboratoryTestIndicator = 0
            BEGIN
                SET @RowStatus = 0;
                SET @TestDiseaseReportID = NULL;
            END
            ELSE
            BEGIN
                SET @TestDiseaseReportID = @DiseaseReportID;
            END;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_GBL_TESTS_SET 'en-US', -- TODO: remove this param. 
                                           @TestID OUTPUT,
                                           @TestNameTypeID,
                                           @TestCategoryTypeID,
                                           @TestResultTypeID,
                                           @TestStatusTypeID,
                                           @DiseaseID,
                                           @SampleID,
                                           NULL,
                                           NULL,
                                           NULL,
                                           @Comments,
                                           @RowStatus,
                                           @StartedDate,
                                           @ResultDate,
                                           @TestedByOrganizationID,
                                           @TestedByPersonID,
                                           @ResultEnteredByOrganizationID,
                                           @ResultEnteredByPersonID,
                                           @ValidatedByOrganizationID,
                                           @ValidatedByPersonID,
                                           @ReadOnlyIndicator,
                                           @NonLaboratoryTestIndicator,
                                           @ExternalTestIndicator,
                                           @PerformedByOrganizationID,
                                           @ReceivedDate,
                                           @ContactPersonName,
                                           NULL,
                                           NULL,
                                           NULL,
                                           @TestDiseaseReportID,
                                           @AuditUserName,
                                           @DataAuditEventID,
                                           @RowAction;

            UPDATE @LaboratoryTestInterpretationsTemp
            SET TestID = @TestID
            WHERE TestID = @RowID;

            DELETE FROM @LaboratoryTestsTemp
            WHERE TestID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @LaboratoryTestInterpretationsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = TestInterpretationID,
                @TestInterpretationID = TestInterpretationID,
                @DiseaseID = DiseaseID,
                @InterpretedStatusTypeID = InterpretedStatusTypeID,
                @ValidatedByOrganizationID = ValidatedByOrganizationID,
                @ValidatedByPersonID = ValidatedByPersonID,
                @InterpretedByOrganizationID = InterpretedByOrganizationID,
                @InterpretedByPersonID = InterpretedByPersonID,
                @TestID = TestID,
                @ValidatedStatusIndicator = ValidatedStatusIndicator,
                @ReportSessionCreatedIndicator = ReportSessionCreatedIndicator,
                @ValidatedComment = ValidatedComment,
                @InterpretedComment = InterpretedComment,
                @ValidatedDate = ValidatedDate,
                @InterpretedDate = InterpretedDate,
                @RowStatus = RowStatus,
                @ReadOnlyIndicator = ReadOnlyIndicator,
                @RowAction = RowAction
            FROM @LaboratoryTestInterpretationsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_GBL_TEST_INTERPRETATIONS_SET @AuditUserName,
                                                          @DataAuditEventID,
                                                          @TestInterpretationID OUTPUT,
                                                          @DiseaseID,
                                                          @InterpretedStatusTypeID,
                                                          @ValidatedByOrganizationID,
                                                          @ValidatedByPersonID,
                                                          @InterpretedByOrganizationID,
                                                          @InterpretedByPersonID,
                                                          @TestID,
                                                          @ValidatedStatusIndicator,
                                                          @ReportSessionCreatedIndicator,
                                                          @ValidatedComment,
                                                          @InterpretedComment,
                                                          @ValidatedDate,
                                                          @InterpretedDate,
                                                          @RowStatus,
                                                          @ReadOnlyIndicator,
                                                          @RowAction;

            DELETE FROM @LaboratoryTestInterpretationsTemp
            WHERE TestInterpretationID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @CaseLogsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = CaseLogID,
                @CaseLogID = CaseLogID,
                @LogStatusTypeID = LogStatusTypeID,
                @LoggedByPersonID = LoggedByPersonID,
                @LogDate = LogDate,
                @ActionRequired = ActionRequired,
                @Comments = Comments,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @CaseLogsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VET_DISEASE_REPORT_LOG_SET @AuditUserName,
                                                        @DataAuditEventID,
                                                        @EIDSSReportID,
                                                        @CaseLogID,
                                                        @LogStatusTypeID,
                                                        @DiseaseReportID,
                                                        @LoggedByPersonID,
                                                        @LogDate,
                                                        @ActionRequired,
                                                        @Comments,
                                                        @RowStatus,
                                                        @RowAction;

            DELETE FROM @CaseLogsTemp
            WHERE CaseLogID = @RowID;
        END;

        IF @CaseMonitorings IS NOT NULL
        BEGIN
            EXEC dbo.USSP_OMM_CASE_MONITORING_SET @CaseMonitorings = @CaseMonitorings,
                                                  @VeterinaryDiseaseReportID = @DiseaseReportID,
                                                  @User = @AuditUserName;
        END

        WHILE EXISTS (SELECT * FROM @EventsTemp)
        BEGIN
            SELECT TOP 1
                @EventId = EventId,
                @EventTypeId = EventTypeId,
                @EventUserId = UserId,
                @EventObjectId = ObjectId,
                @EventSiteId = SiteId,
                @EventDiseaseId = DiseaseId,
                @EventLocationId = LocationId,
                @EventInformationString = InformationString,
                @EventNote = Note,
                @EventLoginSiteId = LoginSiteId
            FROM @EventsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_ADMIN_EVENT_SET @EventId,
                                             @EventTypeId,
                                             @EventUserId,
                                             @EventObjectId,
                                             @EventDiseaseId,
                                             @EventSiteId,
                                             @EventInformationString,
                                             @EventLoginSiteId,
                                             @EventLocationId,
                                             @AuditUserName,
                                             @DataAuditEventID,
                                             @EIDSSReportID;

            DELETE FROM @EventsTemp
            WHERE EventId = @EventId;
        END;

        IF @@TRANCOUNT > 0
            COMMIT TRANSACTION;

        SELECT @ReturnCode ReturnCode,
               @ReturnMessage ReturnMessage,
               @DiseaseReportID DiseaseReportID,
               @EIDSSReportID EIDSSReportID,
               @OutbreakCaseReportUID CaseID,
               @EIDSSCaseID EIDSSCaseID;
    END TRY
    BEGIN CATCH
        IF @@Trancount > 0
            ROLLBACK TRANSACTION;

        THROW;
    END CATCH
END
GO
PRINT N'Refreshing Procedure [dbo].[USP_AGG_CASE_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_AGG_CASE_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_HumanAggregateCase_Delete]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_HumanAggregateCase_Delete]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_LAB_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_LAB_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USSP_OMM_CONVERT_CONTACT_Set]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USSP_OMM_CONVERT_CONTACT_Set]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_OMM_Contact_Set]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_OMM_Contact_Set]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_DEDUPLICATION_VET_DISEASE_Report_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_DEDUPLICATION_VET_DISEASE_Report_SET]';


GO
PRINT N'Update complete.';


GO
