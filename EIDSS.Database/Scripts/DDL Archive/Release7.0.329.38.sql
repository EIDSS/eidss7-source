/*
Deployment script for EIDSS7_GG

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO

PRINT N'Altering Procedure [dbo].[USP_AGG_REPORT_GETList]...';


GO
-- ================================================================================================
-- Name:  USP_AGG_REPORT_GETList
--
-- Description:  Returns list of aggregate reports depending on aggregate report type.
--          
-- Revision History:
-- Name                Date       Change Detail
-- ------------------- ---------- ----------------------------------------------------------------
-- Stephen Long        07/01/2019 Initial release.
-- Stephen Long        07/09/2019 Updated gis string translation to sub selects instead of joins 
--                                for better performance.
-- Stephen Long        08/05/2019 Updated time period join, and changed the select all if/else. 
--                                Was throwing errors on POCO.
-- Stephen Long        08/08/2019 Added entered by person name.
-- Stephen Long        08/13/2019 Corrected administrative unit type id values.
-- Stephen Long        09/26/2019 Changed administrative where clause; reference TFS item
-- Stephen Long        01/22/2020 Added site list parameter for site filtration.
-- Stephen Long        02/18/2020 Added non-configurable site filtration rules.
-- Stephen Long        02/28/2020 Added "display" dates to handle different cultures.
-- Mark Wilson		   03/03/2020 Removed @DistinctIDs table parm and got rid of duplicates
-- Stephen Long        04/29/2020 Added organization statistical area type.
-- Stephen Long        06/30/2020 Made updates so POCO generator would better handle.
-- Stephen Long        07/06/2020 Added trim to EIDSS Report ID.
-- Stephen Long        09/18/2020 Added the four version ID's for the various matrices.
-- Stephen Long        09/21/2020 Added parameter administrative unit type ID and where 
--                                criteria.
-- Stephen Long        11/18/2020 Added site ID to the query.
-- Stephen Long        11/27/2020 Added configurable site filtration rules.
-- Stephen Long        12/13/2020 Added apply configurable filtration indicator parameter.
-- Stephen Long        04/04/2021 Added updated pagination and location hierarchy.
-- Ann Xiong	       10/23/2021 Fixed search by Organization issue
-- Stephen Long        05/17/2022 Added additional criteria for admin unit of organization.
-- Mike Kornegay	   05/19/2022 Updated to reflect new parameters.
-- Stephen Long        05/31/2022 Updated default rule for administrative level check, and added
--                                for organizations connected to the report.
-- Stephen Long        06/03/2022 Updated to point default access rules to base reference.
-- Mike Kornegay	   08/01/2022 Changed CTE for paging and sorting because sorting was not correct.
-- Stephen Long        09/22/2022 Add check for "0" page size.  If "0", then set to 1.
-- Ann Xiong		   09/27/2022 Added parameter LegacyReportID
-- Stephen Long        01/09/2023 Updxates for site filtration queries.
--
-- Legends:
/*
	Aggregate disease report types:
    Human Aggregate = 10102001
    Veterinary Aggregate Disease = 10102002
    Veterinary Aggregate Action = 10102003

	Time interval types:
    None = 0
    Month = 10091001
    Day = 10091002
    Quarter = 10091003
    Week = 10091004
    Year = 10091005

	Administrative unit types:
    None = 0
    Country/Administrative Level 1 = 10089001
	Administrative Level 2 = 10089003
    Administrative Level 3 = 10089002
    Settlement = 10089004
	Organization = 10089005

	Testing Code:
	exec USP_AGG_REPORT_GETList 'en-US', 
	@AggregateReportTypeID=10102001, 
	@UserSiteID=864, 
	@UserOrganizationID=758210000000, 
	@UserEmployeeID=420664190000872
*/
--
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_AGG_REPORT_GETList]
(
    @LanguageID AS NVARCHAR(50),
    @AggregateReportTypeID AS BIGINT = NULL,
    @ReportID AS NVARCHAR(200) = NULL,
    @LegacyReportID NVARCHAR(200) = NULL,
    @AdministrativeUnitTypeID AS BIGINT = NULL,
    @TimeIntervalTypeID AS BIGINT = NULL,
    @StartDate AS DATETIME = NULL,
    @EndDate AS DATETIME = NULL,
    @AdministrativeUnitID AS BIGINT = NULL,
    @OrganizationID BIGINT = NULL,
    @SelectAllIndicator BIT = 0,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT,
    @UserEmployeeID BIGINT,
    @ApplySiteFiltrationIndicator BIT = 0,
    @SortColumn NVARCHAR(30) = 'ReportID',
    @SortOrder NVARCHAR(4) = 'DESC',
    @PageNumber INT = 1,
    @PageSize INT = 10
)
AS
BEGIN
    SET NOCOUNT ON;

    IF @SelectAllIndicator = 1
    BEGIN
        SET @PageSize = 100000;
        SET @PageNumber = 1;
    END;

    DECLARE @firstRec INT;
    DECLARE @lastRec INT;
    SET @firstRec = (@PageNumber - 1) * @PageSize
    SET @lastRec = (@PageNumber * @PageSize + 1);

    DECLARE @AdministrativeLevelNode AS HIERARCHYID;
    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );

    BEGIN TRY
        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        IF @PageSize = 0
        BEGIN
            SET @PageSize = 1;
        END

        IF @AdministrativeUnitID IS NOT NULL
        BEGIN
            SELECT @AdministrativeLevelNode = node
            FROM dbo.gisLocation
            WHERE idfsLocation = @AdministrativeUnitID;
        END;

        -- ========================================================================================
        -- NO CONFIGRUABLE FILTRATION RULES APPLIED
        --
        -- For first and second level sites, do not apply any configurable filtration rules.
        -- ========================================================================================
        IF @ApplySiteFiltrationIndicator = 0
        BEGIN
            INSERT INTO @Results
            SELECT ac.idfAggrCase,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbAggrCase ac
                LEFT JOIN dbo.gisLocation g
                    ON g.idfsLocation = ac.idfsAdministrativeUnit
                LEFT JOIN dbo.gisBaseReference br
                    ON br.idfsGISBaseReference = ac.idfsAdministrativeUnit
                LEFT JOIN dbo.FN_GBL_Institution(@LanguageID) OrganizationAdminUnit
                    ON ac.idfOffice = OrganizationAdminUnit.idfOffice
                LEFT JOIN dbo.trtBaseReference AdminUnit
                    ON AdminUnit.idfsBaseReference = CASE
                                                         WHEN ac.idfOffice IS NOT NULL THEN
                                                             10089005
                                                         WHEN br.idfsGISReferenceType = 19000001 THEN
                                                             10089001
                                                         WHEN br.idfsGISReferenceType = 19000003 THEN
                                                             10089003
                                                         WHEN br.idfsGISReferenceType = 19000002 THEN
                                                             10089002
                                                         WHEN br.idfsGISReferenceType = 19000004 THEN
                                                             10089004
                                                     END
                LEFT JOIN dbo.trtStringNameTranslation AS per
                    ON per.idfsBaseReference = CASE
                                                   WHEN DATEDIFF(DAY, ac.datStartDate, ac.datFinishDate) = 0 THEN
                                                       10091002 /* Day */
                                                   WHEN DATEDIFF(DAY, ac.datStartDate, ac.datFinishDate) = 6 THEN
                                                       10091004 /* Week - use datediff with day because datediff with week will return incorrect result if first day of the week in country differs from Sunday */
                                                   WHEN DATEDIFF(MONTH, ac.datStartDate, ac.datFinishDate) = 0 THEN
                                                       10091001 /* Month */
                                                   WHEN DATEDIFF(QUARTER, ac.datStartDate, ac.datFinishDate) = 0 THEN
                                                       10091003 /* Quarter */
                                                   WHEN DATEDIFF(YEAR, ac.datStartDate, ac.datFinishDate) = 0 THEN
                                                       10091005 /* Year */
                                               END
                       AND per.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
            WHERE ac.intRowStatus = 0
                  AND (
                          ac.idfsAggrCaseType = @AggregateReportTypeID
                          OR @AggregateReportTypeID IS NULL
                      )
                  AND (
                          ac.idfOffice = @OrganizationID
                          OR @OrganizationID IS NULL
                      )
                  AND (
                          AdminUnit.idfsBaseReference = @AdministrativeUnitTypeID
                          OR @AdministrativeUnitTypeID IS NULL
                      )
                  AND (
                          per.idfsBaseReference = @TimeIntervalTypeID
                          OR @TimeIntervalTypeID IS NULL
                      )
                  AND (
                          ac.datStartDate >= @StartDate
                          OR @StartDate IS NULL
                      )
                  AND (
                          ac.datFinishDate <= @EndDate
                          OR @EndDate IS NULL
                      )
                  AND (CASE
                           WHEN @AdministrativeUnitID IS NULL THEN
                               1
                           WHEN g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                                OR (
                                       ac.idfOffice = @AdministrativeUnitID
                                       AND @AdministrativeUnitTypeID = 10089005
                                   ) THEN
                               1
                           ELSE
                               0
                       END = 1
                      )
                  AND (
                          ac.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
                          OR @ReportID IS NULL
                      )
                  AND (
                          ac.strCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
                          OR @LegacyReportID IS NULL
                      );
        END
        ELSE
        BEGIN
            DECLARE @FilteredResults TABLE
            (
                ID BIGINT NOT NULL,
                ReadPermissionIndicator BIT NOT NULL,
                AccessToPersonalDataPermissionIndicator BIT NOT NULL,
                AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
                WritePermissionIndicator BIT NOT NULL,
                DeletePermissionIndicator BIT NOT NULL, INDEX IDX_ID (ID
                                                                     ));
            -- =======================================================================================
            -- DEFAULT CONFIGURABLE FILTRATION RULES
            --
            -- Apply non-configurable filtration rules for third level sites.
            -- =======================================================================================
            DECLARE @RuleActiveStatus INT = 0;
            DECLARE @AdministrativeLevelTypeID INT;
            DECLARE @OrganizationAdministrativeLevelNode HIERARCHYID;
            DECLARE @DefaultAccessRules AS TABLE
            (
                AccessRuleID BIGINT NOT NULL,
                ActiveIndicator INT NOT NULL,
                ReadPermissionIndicator BIT NOT NULL,
                AccessToPersonalDataPermissionIndicator BIT NOT NULL,
                AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
                WritePermissionIndicator BIT NOT NULL,
                DeletePermissionIndicator BIT NOT NULL,
                AdministrativeLevelTypeID INT NULL
            );

            INSERT INTO @DefaultAccessRules
            SELECT AccessRuleID,
                   a.intRowStatus,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator,
                   a.AdministrativeLevelTypeID
            FROM dbo.AccessRule a
            WHERE a.DefaultRuleIndicator = 1;

            --
            -- Human Aggregate Disease Report data shall be available to all sites' organizations 
            -- connected to the particular report.
            --
            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
            WHERE AccessRuleID = 10537023;

            IF @RuleActiveStatus = 0
            BEGIN
                -- Entered by and notification received by and sent to organizations
                INSERT INTO @FilteredResults
                SELECT a.idfAggrCase,
                       1,
                       1,
                       1,
                       1,
                       1
                FROM dbo.tlbAggrCase a
                WHERE a.intRowStatus = 0
                      AND (
                              a.idfEnteredByOffice = @UserOrganizationID
                              OR a.idfReceivedByOffice = @UserOrganizationID
                              OR a.idfSentByOffice = @UserOrganizationID
                          );
            END;

            --
            -- Human Aggregate Disease Report data shall be available to all sites of the same 
            -- administrative level specified in the rule.
            --
            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
            WHERE AccessRuleID = 10537005;

            IF @RuleActiveStatus = 0
            BEGIN
                SELECT @AdministrativeLevelTypeID = AdministrativeLevelTypeID
                FROM @DefaultAccessRules
                WHERE AccessRuleID = 10537005;

                SELECT @OrganizationAdministrativeLevelNode
                    = g.node.GetAncestor(g.node.GetLevel() - @AdministrativeLevelTypeID)
                FROM dbo.tlbOffice o
                    INNER JOIN dbo.tlbGeoLocationShared l
                        ON l.idfGeoLocationShared = o.idfLocation
                    INNER JOIN dbo.gisLocation g
                        ON g.idfsLocation = l.idfsLocation
                WHERE o.idfOffice = @UserOrganizationID
                      AND g.node.GetLevel() >= @AdministrativeLevelTypeID;

                -- Administrative level specified in the rule of the report administrative unit.
                INSERT INTO @FilteredResults
                SELECT ac.idfAggrCase,
                       1,
                       1,
                       1,
                       1,
                       1
                FROM dbo.tlbAggrCase ac
                    INNER JOIN dbo.gisLocation g
                        ON g.idfsLocation = ac.idfsAdministrativeUnit
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537005
                WHERE ac.intRowStatus = 0
                      AND ac.idfsAggrCaseType = 10102001
                      AND g.node.IsDescendantOf(@OrganizationAdministrativeLevelNode) = 1
                      AND ac.idfAggrCase NOT IN (
                                                    SELECT ID FROM @FilteredResults
                                                );

                -- Administrative level of the settlement of the report administrative unit.
                INSERT INTO @FilteredResults
                SELECT ac.idfAggrCase,
                       1,
                       1,
                       1,
                       1,
                       1
                FROM dbo.tlbAggrCase ac
                    INNER JOIN dbo.gisLocation g
                        ON g.idfsLocation = ac.idfsAdministrativeUnit
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537005
                WHERE ac.intRowStatus = 0
                      AND g.node.IsDescendantOf(@OrganizationAdministrativeLevelNode) = 1
                      AND (ac.idfAggrCase NOT IN (
                                                     SELECT ID FROM @FilteredResults
                                                 )
                          );
            END;

            --
            -- Veterinary Aggregate Disease/Action Report data shall be available to all sites' organizations 
            -- connected to the particular report.
            --
            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
            WHERE AccessRuleID = 10537024;

            IF @RuleActiveStatus = 0
            BEGIN
                -- Entered by and notification received by and sent to organizations
                INSERT INTO @FilteredResults
                SELECT a.idfAggrCase,
                       1,
                       1,
                       1,
                       1,
                       1
                FROM dbo.tlbAggrCase a
                WHERE a.intRowStatus = 0
                      AND (
                              a.idfEnteredByOffice = @UserOrganizationID
                              OR a.idfReceivedByOffice = @UserOrganizationID
                              OR a.idfSentByOffice = @UserOrganizationID
                          );
            END;

            --
            -- Veterinary Aggregate Disease/Action Report data shall be available to all sites of the same 
            -- administrative level specified in the rule.
            --
            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
            WHERE AccessRuleID = 10537014;

            IF @RuleActiveStatus = 0
            BEGIN
                SELECT @AdministrativeLevelTypeID = AdministrativeLevelTypeID
                FROM @DefaultAccessRules
                WHERE AccessRuleID = 10537014;

                SELECT @OrganizationAdministrativeLevelNode
                    = g.node.GetAncestor(g.node.GetLevel() - @AdministrativeLevelTypeID)
                FROM dbo.tlbOffice o
                    INNER JOIN dbo.tlbGeoLocationShared l
                        ON l.idfGeoLocationShared = o.idfLocation
                    INNER JOIN dbo.gisLocation g
                        ON g.idfsLocation = l.idfsLocation
                WHERE o.idfOffice = @UserOrganizationID
                      AND g.node.GetLevel() >= @AdministrativeLevelTypeID;

                -- Administrative level specified in the rule of the report administrative unit.
                INSERT INTO @FilteredResults
                SELECT ac.idfAggrCase,
                       1,
                       1,
                       1,
                       1,
                       1
                FROM dbo.tlbAggrCase ac
                    INNER JOIN dbo.gisLocation g
                        ON g.idfsLocation = ac.idfsAdministrativeUnit
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537014
                WHERE ac.intRowStatus = 0
                      AND ac.idfsAggrCaseType = 10102002
                      OR ac.idfAggrCase = 10102003
                         AND g.node.IsDescendantOf(@OrganizationAdministrativeLevelNode) = 1
                         AND ac.idfAggrCase NOT IN (
                                                       SELECT ID FROM @FilteredResults
                                                   );

                -- Administrative level of the settlement of the report administrative unit.
                INSERT INTO @FilteredResults
                SELECT ac.idfAggrCase,
                       1,
                       1,
                       1,
                       1,
                       1
                FROM dbo.tlbAggrCase ac
                    INNER JOIN dbo.gisLocation g
                        ON g.idfsLocation = ac.idfsAdministrativeUnit
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537014
                WHERE ac.intRowStatus = 0
                      AND g.node.IsDescendantOf(@OrganizationAdministrativeLevelNode) = 1
                      AND (ac.idfAggrCase NOT IN (
                                                     SELECT ID FROM @FilteredResults
                                                 )
                          );
            END;

            -- =======================================================================================
            -- CONFIGURABLE FILTRATION RULES
            -- 
            -- Apply configurable filtration rules for use case SAUC34. Some of these rules may 
            -- overlap the non-configurable rules.
            -- =======================================================================================
            --
            -- Apply at the user's site group level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT ag.idfAggrCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbAggrCase ag
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = ag.idfsSite
                INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                    ON userSiteGroup.idfsSite = @UserSiteID
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ag.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT ag.idfAggrCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbAggrCase ag
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = ag.idfsSite
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ag.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's employee group level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT ag.idfAggrCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbAggrCase ag
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = ag.idfsSite
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ag.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's ID level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT ag.idfAggrCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbAggrCase ag
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = ag.idfsSite
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ag.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site group level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT ag.idfAggrCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbAggrCase ag
                INNER JOIN dbo.tflSiteToSiteGroup sgs
                    ON sgs.idfsSite = @UserSiteID
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ag.intRowStatus = 0
                  AND sgs.idfsSite = ag.idfsSite;

            -- 
            -- Apply at the user's site level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT ag.idfAggrCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbAggrCase ag
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ag.intRowStatus = 0
                  AND a.GrantingActorSiteID = ag.idfsSite;

            -- 
            -- Apply at the user's employee group level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT ag.idfAggrCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbAggrCase ag
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ag.intRowStatus = 0
                  AND a.GrantingActorSiteID = ag.idfsSite;

            -- 
            -- Apply at the user's ID level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT ag.idfAggrCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbAggrCase ag
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ag.intRowStatus = 0
                  AND a.GrantingActorSiteID = ag.idfsSite;

            -- Copy filtered results to results and use search criteria
            INSERT INTO @Results
            SELECT ID,
                   ReadPermissionIndicator,
                   AccessToPersonalDataPermissionIndicator,
                   AccessToGenderAndAgeDataPermissionIndicator,
                   WritePermissionIndicator,
                   DeletePermissionIndicator
            FROM @FilteredResults
                INNER JOIN dbo.tlbAggrCase ac
                    ON ac.idfAggrCase = ID
                LEFT JOIN dbo.gisLocation g
                    ON g.idfsLocation = ac.idfsAdministrativeUnit
                LEFT JOIN dbo.gisBaseReference br
                    ON br.idfsGISBaseReference = ac.idfsAdministrativeUnit
                LEFT JOIN dbo.FN_GBL_Institution(@LanguageID) OrganizationAdminUnit
                    ON ac.idfOffice = OrganizationAdminUnit.idfOffice
                LEFT JOIN dbo.trtBaseReference AdminUnit
                    ON AdminUnit.idfsBaseReference = CASE
                                                         WHEN ac.idfOffice IS NOT NULL THEN
                                                             10089005
                                                         WHEN br.idfsGISReferenceType = 19000001 THEN
                                                             10089001
                                                         WHEN br.idfsGISReferenceType = 19000003 THEN
                                                             10089003
                                                         WHEN br.idfsGISReferenceType = 19000002 THEN
                                                             10089002
                                                         WHEN br.idfsGISReferenceType = 19000004 THEN
                                                             10089004
                                                     END
                LEFT JOIN dbo.trtStringNameTranslation AS per
                    ON per.idfsBaseReference = CASE
                                                   WHEN DATEDIFF(DAY, ac.datStartDate, ac.datFinishDate) = 0 THEN
                                                       10091002 /* Day */
                                                   WHEN DATEDIFF(DAY, ac.datStartDate, ac.datFinishDate) = 6 THEN
                                                       10091004 /* Week - use datediff with day because datediff with week will return incorrect result if first day of the week in country differs from Sunday */
                                                   WHEN DATEDIFF(MONTH, ac.datStartDate, ac.datFinishDate) = 0 THEN
                                                       10091001 /* Month */
                                                   WHEN DATEDIFF(QUARTER, ac.datStartDate, ac.datFinishDate) = 0 THEN
                                                       10091003 /* Quarter */
                                                   WHEN DATEDIFF(YEAR, ac.datStartDate, ac.datFinishDate) = 0 THEN
                                                       10091005 /* Year */
                                               END
                       AND per.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
            WHERE (
                      ac.idfsAggrCaseType = @AggregateReportTypeID
                      OR @AggregateReportTypeID IS NULL
                  )
                  AND (
                          ac.idfSentByOffice = @OrganizationID
                          OR @OrganizationID IS NULL
                      )
                  AND (
                          AdminUnit.idfsBaseReference = @AdministrativeUnitTypeID
                          OR @AdministrativeUnitTypeID IS NULL
                      )
                  AND (
                          per.idfsBaseReference = @TimeIntervalTypeID
                          OR @TimeIntervalTypeID IS NULL
                      )
                  AND (
                          ac.datStartDate >= @StartDate
                          OR @StartDate IS NULL
                      )
                  AND (
                          ac.datFinishDate <= @EndDate
                          OR @EndDate IS NULL
                      )
                  AND (CASE
                           WHEN @AdministrativeUnitID IS NULL THEN
                               1
                           WHEN g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                                OR (
                                       ac.idfOffice = @AdministrativeUnitID
                                       AND @AdministrativeUnitTypeID = 10089005
                                   ) THEN
                               1
                           ELSE
                               0
                       END = 1
                      )
                  AND (
                          ac.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
                          OR @ReportID IS NULL
                      )
            GROUP BY ID,
                     ReadPermissionIndicator,
                     AccessToPersonalDataPermissionIndicator,
                     AccessToGenderAndAgeDataPermissionIndicator,
                     WritePermissionIndicator,
                     DeletePermissionIndicator;
        END;

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT ac.idfAggrCase
            FROM dbo.tlbAggrCase ac
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = ac.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE ac.intRowStatus = 0
                  AND oa.idfsObjectOperation = 10059003 -- Read permission
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup
        );
        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        INSERT INTO @Results
        SELECT ac.idfAggrCase,
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = ac.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = ac.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = ac.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = ac.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = ac.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbAggrCase ac
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = ac.idfsSite
                   AND oa.intRowStatus = 0
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            LEFT JOIN dbo.gisLocation g
                ON g.idfsLocation = ac.idfsAdministrativeUnit
            LEFT JOIN dbo.gisBaseReference br
                ON br.idfsGISBaseReference = ac.idfsAdministrativeUnit
            LEFT JOIN dbo.FN_GBL_Institution(@LanguageID) OrganizationAdminUnit
                ON ac.idfOffice = OrganizationAdminUnit.idfOffice
            LEFT JOIN dbo.trtBaseReference AdminUnit
                ON AdminUnit.idfsBaseReference = CASE
                                                     WHEN ac.idfOffice IS NOT NULL THEN
                                                         10089005
                                                     WHEN br.idfsGISReferenceType = 19000001 THEN
                                                         10089001
                                                     WHEN br.idfsGISReferenceType = 19000003 THEN
                                                         10089003
                                                     WHEN br.idfsGISReferenceType = 19000002 THEN
                                                         10089002
                                                     WHEN br.idfsGISReferenceType = 19000004 THEN
                                                         10089004
                                                 END
            LEFT JOIN dbo.trtStringNameTranslation AS per
                ON per.idfsBaseReference = CASE
                                               WHEN DATEDIFF(DAY, ac.datStartDate, ac.datFinishDate) = 0 THEN
                                                   10091002 /* Day */
                                               WHEN DATEDIFF(DAY, ac.datStartDate, ac.datFinishDate) = 6 THEN
                                                   10091004 /* Week - use datediff with day because datediff with week will return incorrect result if first day of the week in country differs from Sunday */
                                               WHEN DATEDIFF(MONTH, ac.datStartDate, ac.datFinishDate) = 0 THEN
                                                   10091001 /* Month */
                                               WHEN DATEDIFF(QUARTER, ac.datStartDate, ac.datFinishDate) = 0 THEN
                                                   10091003 /* Quarter */
                                               WHEN DATEDIFF(YEAR, ac.datStartDate, ac.datFinishDate) = 0 THEN
                                                   10091005 /* Year */
                                           END
                   AND per.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
        WHERE oa.intPermission = 2 -- Allow permission
              AND ac.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup
              AND (
                      ac.idfsAggrCaseType = @AggregateReportTypeID
                      OR @AggregateReportTypeID IS NULL
                  )
              AND (
                      ac.idfSentByOffice = @OrganizationID
                      OR @OrganizationID IS NULL
                  )
              AND (
                      AdminUnit.idfsBaseReference = @AdministrativeUnitTypeID
                      OR @AdministrativeUnitTypeID IS NULL
                  )
              AND (
                      per.idfsBaseReference = @TimeIntervalTypeID
                      OR @TimeIntervalTypeID IS NULL
                  )
              AND (
                      ac.datStartDate >= @StartDate
                      OR @StartDate IS NULL
                  )
              AND (
                      ac.datFinishDate <= @EndDate
                      OR @EndDate IS NULL
                  )
              AND (CASE
                       WHEN @AdministrativeUnitID IS NULL THEN
                           1
                       WHEN g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                            OR (
                                   ac.idfOffice = @AdministrativeUnitID
                                   AND @AdministrativeUnitTypeID = 10089005
                               ) THEN
                           1
                       ELSE
                           0
                   END = 1
                  )
              AND (
                      ac.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
                      OR @ReportID IS NULL
                  )
              AND EXISTS
        (
            SELECT * FROM @UserGroupSitePermissions WHERE SiteID = ac.idfsSite
        )
        GROUP BY ac.idfAggrCase,
                 ac.idfsSite;

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbAggrCase ac
                ON ac.idfAggrCase = res.ID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = ac.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003; -- Read permission

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        INSERT INTO @Results
        SELECT ac.idfAggrCase,
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = ac.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = ac.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = ac.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = ac.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = ac.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbAggrCase ac
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = ac.idfsSite
                   AND oa.intRowStatus = 0
            LEFT JOIN dbo.gisLocation g
                ON g.idfsLocation = ac.idfsAdministrativeUnit
            LEFT JOIN dbo.gisBaseReference br
                ON br.idfsGISBaseReference = ac.idfsAdministrativeUnit
            LEFT JOIN dbo.FN_GBL_Institution(@LanguageID) OrganizationAdminUnit
                ON ac.idfOffice = OrganizationAdminUnit.idfOffice
            LEFT JOIN dbo.trtBaseReference AdminUnit
                ON AdminUnit.idfsBaseReference = CASE
                                                     WHEN ac.idfOffice IS NOT NULL THEN
                                                         10089005
                                                     WHEN br.idfsGISReferenceType = 19000001 THEN
                                                         10089001
                                                     WHEN br.idfsGISReferenceType = 19000003 THEN
                                                         10089003
                                                     WHEN br.idfsGISReferenceType = 19000002 THEN
                                                         10089002
                                                     WHEN br.idfsGISReferenceType = 19000004 THEN
                                                         10089004
                                                 END
            LEFT JOIN dbo.trtStringNameTranslation AS per
                ON per.idfsBaseReference = CASE
                                               WHEN DATEDIFF(DAY, ac.datStartDate, ac.datFinishDate) = 0 THEN
                                                   10091002 /* Day */
                                               WHEN DATEDIFF(DAY, ac.datStartDate, ac.datFinishDate) = 6 THEN
                                                   10091004 /* Week - use datediff with day because datediff with week will return incorrect result if first day of the week in country differs from Sunday */
                                               WHEN DATEDIFF(MONTH, ac.datStartDate, ac.datFinishDate) = 0 THEN
                                                   10091001 /* Month */
                                               WHEN DATEDIFF(QUARTER, ac.datStartDate, ac.datFinishDate) = 0 THEN
                                                   10091003 /* Quarter */
                                               WHEN DATEDIFF(YEAR, ac.datStartDate, ac.datFinishDate) = 0 THEN
                                                   10091005 /* Year */
                                           END
                   AND per.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
        WHERE oa.intPermission = 2 -- Allow permission
              AND ac.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID
              AND (
                      ac.idfsAggrCaseType = @AggregateReportTypeID
                      OR @AggregateReportTypeID IS NULL
                  )
              AND (
                      ac.idfSentByOffice = @OrganizationID
                      OR @OrganizationID IS NULL
                  )
              AND (
                      AdminUnit.idfsBaseReference = @AdministrativeUnitTypeID
                      OR @AdministrativeUnitTypeID IS NULL
                  )
              AND (
                      per.idfsBaseReference = @TimeIntervalTypeID
                      OR @TimeIntervalTypeID IS NULL
                  )
              AND (
                      ac.datStartDate >= @StartDate
                      OR @StartDate IS NULL
                  )
              AND (
                      ac.datFinishDate <= @EndDate
                      OR @EndDate IS NULL
                  )
              AND (CASE
                       WHEN @AdministrativeUnitID IS NULL THEN
                           1
                       WHEN g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                            OR (
                                   ac.idfOffice = @AdministrativeUnitID
                                   AND @AdministrativeUnitTypeID = 10089005
                               ) THEN
                           1
                       ELSE
                           0
                   END = 1
                  )
              AND (
                      ac.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
                      OR @ReportID IS NULL
                  )
              AND EXISTS
        (
            SELECT * FROM @UserSitePermissions WHERE SiteID = ac.idfsSite
        )
        GROUP BY ac.idfAggrCase,
                 ac.idfsSite;

        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT ac.idfAggrCase
            FROM dbo.tlbAggrCase ac
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = ac.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        INSERT INTO @FinalResults
        SELECT ID,
               MAX(res.ReadPermissionIndicator),
               MAX(res.AccessToPersonalDataPermissionIndicator),
               MAX(res.AccessToGenderAndAgeDataPermissionIndicator),
               MAX(res.WritePermissionIndicator),
               MAX(res.DeletePermissionIndicator)
        FROM @Results res
        WHERE res.ReadPermissionIndicator IN ( 1, 3, 5 )
        GROUP BY res.ID;

        WITH paging
        AS (SELECT ROW_NUMBER() OVER (ORDER BY CASE
                                                   WHEN @SortColumn = 'ReportID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       ac.strCaseID
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'ReportID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       ac.strCaseID
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'StartDate'
                                                        AND @SortOrder = 'ASC' THEN
                                                       ac.datStartDate
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'StartDate'
                                                        AND @SortOrder = 'DESC' THEN
                                                       ac.datStartDate
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'TimeIntervalUnitTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       per.strTextString
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'TimeIntervalUnitTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       per.strTextString
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel1Name'
                                                        AND @SortOrder = 'ASC' THEN
                                                       LH.AdminLevel2Name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel1Name'
                                                        AND @SortOrder = 'DESC' THEN
                                                       LH.AdminLevel2Name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel2Name'
                                                        AND @SortOrder = 'ASC' THEN
                                                       LH.AdminLevel3Name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel2Name'
                                                        AND @SortOrder = 'DESC' THEN
                                                       LH.AdminLevel3Name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'SettlementName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       LH.AdminLevel4Name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'SettlementName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       LH.AdminLevel4Name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'OrganizationAdministrativeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       organizationAdminUnit.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'OrganizationAdministrativeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       organizationAdminUnit.name
                                               END DESC
                                     ) AS ROWNUM,
                   res.ID AS ReportKey,
                   ac.strCaseID AS ReportID,
                   receivedByOrganization.name AS ReceivedByOrganizationName,
                   sentByOrganization.name AS SentByOrganizationName,
                   enteredByOrganization.name AS EnteredByOrganizationName,
                   ac.datReceivedByDate AS ReceivedByDate,
                   ac.datSentByDate AS SentByDate,
                   ac.datStartDate AS StartDate,
                   ac.datFinishDate AS EndDate,
                   AdminUnit.strDefault AS AdministrativeUnitTypeName,
                   lh.AdminLevel2Name AS AdministrativeLevel1Name,
                   lh.AdminLevel3Name AS AdministrativeLevel2Name,
                   lh.AdminLevel4Name AS SettlementName,
                   organizationAdminUnit.name AS OrganizationAdministrativeName,
                   per.strTextString AS TimeIntervalUnitTypeName,
                   ac.idfsSite AS SiteID,
                   res.ReadPermissionIndicator AS ReadPermissionIndicator,
                   res.AccessToPersonalDataPermissionIndicator AS AccessToPersonalDataPermissionIndicator,
                   res.AccessToGenderAndAgeDataPermissionIndicator AS AccessToGenderAndAgeDataPermissionIndicator,
                   res.WritePermissionIndicator AS WritePermissionIndicator,
                   res.DeletePermissionIndicator AS DeletePermissionIndicator,
                   0 AS RowSelectionIndicator,
                   COUNT(*) OVER () AS RecordCount,
                   (
                       SELECT COUNT(*)
                       FROM dbo.tlbAggrCase
                       WHERE intRowStatus = 0
                             AND idfsAggrCaseType = @AggregateReportTypeID
                   ) AS TotalCount
            FROM @FinalResults res
                INNER JOIN dbo.tlbAggrCase ac
                    ON ac.idfAggrCase = res.ID
                LEFT JOIN dbo.FN_GBL_Institution(@LanguageID) receivedByOrganization
                    ON ac.idfReceivedByOffice = receivedByOrganization.idfOffice
                LEFT JOIN dbo.FN_GBL_Institution(@LanguageID) enteredByOrganization
                    ON ac.idfEnteredByOffice = enteredByOrganization.idfOffice
                LEFT JOIN dbo.FN_GBL_Institution(@LanguageID) sentByOrganization
                    ON ac.idfSentByOffice = sentByOrganization.idfOffice
                LEFT JOIN dbo.gisLocation g
                    ON g.idfsLocation = ac.idfsAdministrativeUnit
                INNER JOIN FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                    ON lh.idfsLocation = ac.idfsAdministrativeUnit
                LEFT JOIN dbo.FN_GBL_Institution(@LanguageID) organizationAdminUnit
                    ON ac.idfOffice = organizationAdminUnit.idfOffice
                LEFT JOIN dbo.trtBaseReference adminUnit
                    ON adminUnit.idfsBaseReference = CASE
                                                         WHEN NOT ac.idfOffice IS NULL THEN
                                                             10089005
                                                         WHEN NOT lh.AdminLevel4ID IS NULL THEN
                                                             10089004
                                                         WHEN NOT lh.AdminLevel3ID IS NULL THEN
                                                             10089002
                                                         WHEN NOT lh.AdminLevel2ID IS NULL THEN
                                                             10089003
                                                         WHEN NOT lh.AdminLevel1Id IS NULL THEN
                                                             10089001
                                                     END
                LEFT JOIN dbo.trtStringNameTranslation per
                    ON per.idfsBaseReference = CASE
                                                   WHEN DATEDIFF(DAY, ac.datStartDate, ac.datFinishDate) = 0 THEN
                                                       10091002 /* Day */
                                                   WHEN DATEDIFF(DAY, ac.datStartDate, ac.datFinishDate) = 6 THEN
                                                       10091004 /* Week - use datediff with day because datediff with week will return incorrect result if first day of the week in country differs from Sunday */
                                                   WHEN DATEDIFF(MONTH, ac.datStartDate, ac.datFinishDate) = 0 THEN
                                                       10091001 /* Month */
                                                   WHEN DATEDIFF(QUARTER, ac.datStartDate, ac.datFinishDate) = 0 THEN
                                                       10091003 /* Quarter */
                                                   WHEN DATEDIFF(YEAR, ac.datStartDate, ac.datFinishDate) = 0 THEN
                                                       10091005 /* Year */
                                               END
                       AND per.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
           )
        SELECT ReportKey,
               ReportID,
               ReceivedByOrganizationName,
               SentByOrganizationName,
               EnteredByOrganizationName,
               ReceivedByDate,
               SentByDate,
               StartDate,
               EndDate,
               AdministrativeUnitTypeName,
               AdministrativeLevel1Name,
               AdministrativeLevel2Name,
               SettlementName,
               OrganizationAdministrativeName,
               TimeIntervalUnitTypeName,
               SiteID,
               CASE
                   WHEN ReadPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN ReadPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN ReadPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN ReadPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, ReadPermissionIndicator)
               END AS ReadPermissionindicator,
               CASE
                   WHEN AccessToPersonalDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN AccessToPersonalDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN AccessToPersonalDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN AccessToPersonalDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, AccessToPersonalDataPermissionIndicator)
               END AS AccessToPersonalDataPermissionIndicator,
               CASE
                   WHEN AccessToGenderAndAgeDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN AccessToGenderAndAgeDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN AccessToGenderAndAgeDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN AccessToGenderAndAgeDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, AccessToGenderAndAgeDataPermissionIndicator)
               END AS AccessToGenderAndAgeDataPermissionIndicator,
               CASE
                   WHEN WritePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN WritePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN WritePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN WritePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, WritePermissionIndicator)
               END AS WritePermissionIndicator,
               CASE
                   WHEN DeletePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN DeletePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN DeletePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN DeletePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, DeletePermissionIndicator)
               END AS DeletePermissionIndicator,
               RowSelectionIndicator,
               RecordCount,
               TotalCount,
               CurrentPage = @PageNumber,
               TotalPages = (RecordCount / @PageSize) + IIF(RecordCount % @PageSize > 0, 1, 0)
        FROM paging
        WHERE ReadPermissionIndicator IN ( 1, 3, 5 )
              AND RowNum > @firstRec
              AND RowNum < @lastRec;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USP_AS_CAMPAIGN_GETList]...';


GO
-- ================================================================================================
-- Name: USP_AS_CAMPAIGN_GETList
--
-- Description: Gets data for active surveillance campaign search for the human module.
--          
-- Revision History:
-- Name                    Date       Change Detail
-- ----------------------- ---------- ------------------------------------------------------------
-- Stephen Long            07/06/2019 Initial release.
-- Stephen Long            01/26/2020 Added site list parameter for site filtration.
-- Ann Xiong		       02/19/2020 Added script to search by Region and Rayon
-- Stephen Long            05/18/2020 Added disease filtration rules from use case SAUC62.
-- Stephen Long            06/18/2020 Added where criteria to the query when no site filtration is 
--                                    required.
-- Stephen Long            07/07/2020 Added trim to EIDSS identifier like criteria.
-- Stephen Long            11/18/2020 Added site ID to the query.
-- Stephen Long            11/27/2020 Added configurable site filtration rules.
-- Stephen Long            12/13/2020 Added apply configurable filtration indicator parameter.
-- Stephen Long            12/14/2020 Corrected where criteria on site list in the final query.
-- Stephen Long            12/24/2020 Modified join on disease filtration default role rule.
-- Stephen Long            12/29/2020 Changed function call on reference data for inactive records.
-- Stephen Long            04/08/2021 Added updated pagination and location hierarchy.
-- Mark Wilson		       08/10/2021 Added join to tlbCampaignToDiagnosis to pull diagnosis
-- Mark Wilson		       08/26/2021 Added Select Distinct to remove dupes
-- Mark Wilson		       08/27/2021 Added @CampaignTypeID to total count
-- Mark Wilson		       02/22/2022 Renamed from USP_HAS_CAMPAIGN_GETList and added 
--                                    @CampaignCategoryID to support both human and vet campaigns
-- Mark Wilson             02/23/2022 removed parm @AdministrativeLevelID, redo paging and sorting
-- Manickandan Govindrajan 05/12/2022 Fixed the start and End date condition
-- Stephen Long            01/09/2023 Updated for site filtration queries.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_AS_CAMPAIGN_GETList]
(
    @LanguageID AS NVARCHAR(50),
    @CampaignID AS NVARCHAR(200) = NULL,
    @LegacyCampaignID AS NVARCHAR(200) = NULL,
    @CampaignName AS NVARCHAR(200) = NULL,
    @CampaignTypeID AS BIGINT = NULL,
    @CampaignStatusTypeID AS BIGINT = NULL,
    @CampaignCategoryID AS BIGINT,
    @StartDateFrom AS DATETIME = NULL,
    @StartDateTo AS DATETIME = NULL,
    @DiseaseID AS BIGINT = NULL,
    @UserSiteID BIGINT,
    @UserEmployeeID BIGINT,
    @ApplySiteFiltrationIndicator BIT = 0,
    @SortColumn NVARCHAR(30) = 'CampaignID',
    @SortOrder NVARCHAR(4) = 'DESC',
    @Page INT = 1,
    @PageSize INT = 10
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @idfsLanguage BIGINT = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
    DECLARE @firstRec INT
    DECLARE @lastRec INT

    IF @pagesize = 0
    BEGIN
        SET @pagesize = 1;
    END

    SET @firstRec = (@page - 1) * @pagesize
    SET @lastRec = (@page * @pageSize + 1)
    BEGIN TRY

        DECLARE @Results TABLE
        (
            ID BIGINT NOT NULL,
            ReadPermissionIndicator INT NOT NULL,
            AccessToPersonalDataPermissionIndicator INT NOT NULL,
            AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
            WritePermissionIndicator INT NOT NULL,
            DeletePermissionIndicator INT NOT NULL
        );
        DECLARE @FinalResults TABLE
        (
            ID BIGINT NOT NULL,
            ReadPermissionIndicator INT NOT NULL,
            AccessToPersonalDataPermissionIndicator INT NOT NULL,
            AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
            WritePermissionIndicator INT NOT NULL,
            DeletePermissionIndicator INT NOT NULL
        );
        DECLARE @UserSitePermissions TABLE
        (
            SiteID BIGINT NOT NULL,
            PermissionTypeID BIGINT NOT NULL,
            Permission INT NOT NULL
        );
        DECLARE @UserGroupSitePermissions TABLE
        (
            SiteID BIGINT NOT NULL,
            PermissionTypeID BIGINT NOT NULL,
            Permission INT NOT NULL
        );

        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        INSERT INTO @Results
        SELECT DISTINCT
            C.idfCampaign,
            1,
            1,
            1,
            1,
            1
        FROM dbo.tlbCampaign C
            INNER JOIN dbo.tlbCampaignToDiagnosis cd
                ON cd.idfCampaign = C.idfCampaign
            LEFT JOIN dbo.tstSite s
                ON s.idfsSite = c.idfsSite
                   AND s.intRowStatus = 0
            LEFT JOIN dbo.tlbOffice o
                ON s.idfOffice = o.idfOffice
                   AND o.intRowStatus = 0
            LEFT JOIN dbo.tlbGeoLocationShared gl
                ON o.idfLocation = gl.idfGeoLocationShared
            LEFT JOIN dbo.gisLocationDenormalized g
                ON g.idfsLocation = gl.idfsLocation
                   AND g.idfsLanguage = @idfsLanguage
        WHERE c.intRowStatus = 0
              AND c.CampaignCategoryID = @CampaignCategoryID
              AND (
                      (
                          c.idfsSite = @UserSiteID
                          AND @ApplySiteFiltrationIndicator = 1
                      )
                      OR (
                             (@UserSiteID IS NULL)
                             OR (@ApplySiteFiltrationIndicator = 0)
                         )
                  )
              AND (
                      c.strCampaignName LIKE '%' + TRIM(@CampaignName) + '%'
                      OR @CampaignName IS NULL
                  )
              AND (
                      c.idfsCampaignType = @CampaignTypeID
                      OR @CampaignTypeID IS NULL
                  )
              AND (
                      c.idfsCampaignStatus = @CampaignStatusTypeID
                      OR @CampaignStatusTypeID IS NULL
                  )
              AND (
                      cd.idfsDiagnosis = @DiseaseID
                      OR @DiseaseID IS NULL
                  )
              AND (
                      (
                          (c.datCampaignDateStart
              BETWEEN @StartDateFrom AND @StartDateTo
                          )
                          OR (@StartDateFrom IS NULL)
                      )
                      OR (
                             (c.datCampaignDateEnd
              BETWEEN @StartDateFrom AND @StartDateTo
                             )
                             OR (@StartDateTo IS NULL)
                         )
                  )
              AND (
                      c.strCampaignID LIKE '%' + TRIM(@CampaignID) + '%'
                      OR @CampaignID IS NULL
                  )
              AND (
                      c.LegacyCampaignID LIKE '%' + TRIM(@LegacyCampaignID) + '%'
                      OR @LegacyCampaignID IS NULL
                  );

        -- =======================================================================================
        -- CONFIGURABLE FILTRATION RULES
        -- 
        -- Apply configurable filtration rules for use case SAUC34. Some of these rules may 
        -- overlap the non-configurable rules.
        -- =======================================================================================
        IF @ApplySiteFiltrationIndicator = 1
        BEGIN
            DECLARE @FilteredResults TABLE
            (
                ID BIGINT NOT NULL,
                ReadPermissionIndicator BIT NOT NULL,
                AccessToPersonalDataPermissionIndicator BIT NOT NULL,
                AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
                WritePermissionIndicator BIT NOT NULL,
                DeletePermissionIndicator BIT NOT NULL, INDEX IDX_ID (ID
                                                                     ));

            --
            -- Apply at the user's site group level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT c.idfCampaign,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbCampaign c
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = c.idfsSite
                INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                    ON userSiteGroup.idfsSite = @UserSiteID
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE c.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT c.idfCampaign,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbCampaign c
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = c.idfsSite
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE c.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's employee group level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT c.idfCampaign,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbCampaign c
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = c.idfsSite
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE c.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's ID level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT c.idfCampaign,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbCampaign c
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = c.idfsSite
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE c.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site group level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT c.idfCampaign,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbCampaign c
                INNER JOIN dbo.tflSiteToSiteGroup sgs
                    ON sgs.idfsSite = @UserSiteID
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE c.intRowStatus = 0
                  AND sgs.idfsSite = c.idfsSite;

            -- 
            -- Apply at the user's site level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT c.idfCampaign,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbCampaign c
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE c.intRowStatus = 0
                  AND a.GrantingActorSiteID = c.idfsSite;

            -- 
            -- Apply at the user's employee group level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT c.idfCampaign,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbCampaign c
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE c.intRowStatus = 0
                  AND a.GrantingActorSiteID = c.idfsSite;

            -- 
            -- Apply at the user's ID level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT c.idfCampaign,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbCampaign c
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE c.intRowStatus = 0
                  AND a.GrantingActorSiteID = c.idfsSite;

            -- Copy filtered results to results and use search criteria
            INSERT INTO @Results
            SELECT DISTINCT
                f.ID,
                f.ReadPermissionIndicator,
                f.AccessToPersonalDataPermissionIndicator,
                f.AccessToGenderAndAgeDataPermissionIndicator,
                f.WritePermissionIndicator,
                f.DeletePermissionIndicator
            FROM @FilteredResults f
                INNER JOIN dbo.tlbCampaign c
                    ON c.idfCampaign = f.ID
                INNER JOIN dbo.tlbCampaignToDiagnosis cd
                    ON cd.idfCampaign = C.idfCampaign
                       AND cd.intRowStatus = 0
                LEFT JOIN dbo.tstSite s
                    ON s.idfsSite = c.idfsSite
                       AND s.intRowStatus = 0
                LEFT JOIN dbo.tlbOffice o
                    ON s.idfOffice = o.idfOffice
                       AND o.intRowStatus = 0
                LEFT JOIN dbo.tlbGeoLocationShared gl
                    ON o.idfLocation = gl.idfGeoLocationShared
                LEFT JOIN dbo.gisLocationDenormalized g
                    ON g.idfsLocation = gl.idfsLocation
                       AND g.idfsLanguage = @LanguageID
            WHERE c.CampaignCategoryID = @CampaignCategoryID -- Human Active Surveillance Campaign
                  AND (
                          c.strCampaignName LIKE '%' + TRIM(@CampaignName) + '%'
                          OR @CampaignName IS NULL
                      )
                  AND (
                          c.idfsCampaignType = @CampaignTypeID
                          OR @CampaignTypeID IS NULL
                      )
                  AND (
                          c.idfsCampaignStatus = @CampaignStatusTypeID
                          OR @CampaignStatusTypeID IS NULL
                      )
                  AND (
                          cd.idfsDiagnosis = @DiseaseID
                          OR @DiseaseID IS NULL
                      )
                  AND (
                          (
                              (c.datCampaignDateStart
                  BETWEEN @StartDateFrom AND @StartDateTo
                              )
                              OR (@StartDateFrom IS NULL)
                          )
                          OR (
                                 (c.datCampaignDateEnd
                  BETWEEN @StartDateFrom AND @StartDateTo
                                 )
                                 OR (@StartDateTo IS NULL)
                             )
                      )
                  AND (
                          c.strCampaignID LIKE '%' + TRIM(@CampaignID) + '%'
                          OR @CampaignID IS NULL
                      )
                  AND (
                          c.LegacyCampaignID LIKE '%' + TRIM(@LegacyCampaignID) + '%'
                          OR @LegacyCampaignID IS NULL
                      )
                  AND f.ID NOT IN (
                                      SELECT ID FROM @Results
                                  );
        END;

        -- =======================================================================================
        -- DISEASE FILTRATION RULES
        --
        -- Apply disease filtration rules from use case SAUC62.
        -- =======================================================================================
        -- 
        -- Apply level 0 disease filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE ID IN (
                        SELECT C.idfCampaign
                        FROM dbo.tlbCampaign c
                            INNER JOIN dbo.tlbCampaignToDiagnosis cd
                                ON cd.idfCampaign = c.idfCampaign
                                   AND cd.intRowStatus = 0
                            INNER JOIN dbo.tstObjectAccess oa
                                ON oa.idfsObjectID = cd.idfsDiagnosis
                                   AND oa.intRowStatus = 0
                        WHERE c.intRowStatus = 0
                              AND oa.intPermission = 1 -- Deny permission
                              AND oa.idfsObjectType = 10060001 -- Disease
                              AND oa.idfActor = -506 -- Default role
                    );

        --
        -- Apply level 1 disease filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        INSERT INTO @Results
        SELECT DISTINCT
            c.idfCampaign,
            1,
            1,
            1,
            1,
            1
        FROM dbo.tlbCampaign c
            INNER JOIN dbo.tlbCampaignToDiagnosis cd
                ON cd.idfCampaign = c.idfCampaign
                   AND cd.intRowStatus = 0
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = cd.idfsDiagnosis
                   AND oa.intRowStatus = 0
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intPermission = 2 -- Allow permission
              AND c.intRowStatus = 0
              AND oa.idfsObjectType = 10060001 -- Disease
              AND oa.idfActor = egm.idfEmployeeGroup;

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbCampaign C
                ON C.idfCampaign = ID
            INNER JOIN dbo.tlbCampaignToDiagnosis cd
                ON cd.idfCampaign = C.idfCampaign
                   AND cd.intRowStatus = 0
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = cd.idfsDiagnosis
                   AND oa.intRowStatus = 0
        WHERE oa.intPermission = 1 -- Deny permission
              AND oa.idfsObjectType = 10060001 -- Disease
              AND oa.idfActor = egm.idfEmployeeGroup;

        --
        -- Apply level 2 disease filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        INSERT INTO @Results
        SELECT DISTINCT
            c.idfCampaign,
            1,
            1,
            1,
            1,
            1
        FROM dbo.tlbCampaign c
            INNER JOIN dbo.tlbCampaignToDiagnosis cd
                ON cd.idfCampaign = c.idfCampaign
                   AND cd.intRowStatus = 0
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = cd.idfsDiagnosis
                   AND oa.intRowStatus = 0
        WHERE oa.intPermission = 2 -- Allow permission
              AND c.intRowStatus = 0
              AND oa.idfsObjectType = 10060001 -- Disease
              AND oa.idfActor = @UserEmployeeID;

        DELETE FROM @Results
        WHERE ID IN (
                        SELECT c.idfCampaign
                        FROM dbo.tlbCampaign c
                            INNER JOIN dbo.tlbCampaignToDiagnosis cd
                                ON cd.idfCampaign = c.idfCampaign
                                   AND cd.intRowStatus = 0
                            INNER JOIN dbo.tstObjectAccess oa
                                ON oa.idfsObjectID = cd.idfsDiagnosis
                                   AND oa.intRowStatus = 0
                        WHERE c.intRowStatus = 0
                              AND oa.intPermission = 1 -- Deny permission
                              AND oa.idfsObjectType = 10060001 -- Disease
                              AND oa.idfActor = @UserEmployeeID
                    );

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT c.idfCampaign
            FROM dbo.tlbCampaign c
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = c.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE c.intRowStatus = 0
                  AND oa.idfsObjectOperation = 10059003 -- Read permission
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        INSERT INTO @Results
        SELECT DISTINCT
            c.idfCampaign,
            (
                SELECT Permission
                FROM @UserGroupSitePermissions
                WHERE SiteID = c.idfsSite
                      AND PermissionTypeID = 10059003
            ),
            (
                SELECT Permission
                FROM @UserGroupSitePermissions
                WHERE SiteID = c.idfsSite
                      AND PermissionTypeID = 10059006
            ),
            (
                SELECT Permission
                FROM @UserGroupSitePermissions
                WHERE SiteID = c.idfsSite
                      AND PermissionTypeID = 10059007
            ),
            (
                SELECT Permission
                FROM @UserGroupSitePermissions
                WHERE SiteID = c.idfsSite
                      AND PermissionTypeID = 10059004
            ),
            (
                SELECT Permission
                FROM @UserGroupSitePermissions
                WHERE SiteID = c.idfsSite
                      AND PermissionTypeID = 10059002
            )
        FROM dbo.tlbCampaign c
        WHERE c.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserGroupSitePermissions WHERE SiteID = c.idfsSite
        );

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbCampaign c
                ON c.idfCampaign = ID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = c.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003; -- Read permission

        --
        -- Apply level 2 disease filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        INSERT INTO @Results
        SELECT DISTINCT
            c.idfCampaign,
            (
                SELECT Permission
                FROM @UserSitePermissions
                WHERE SiteID = c.idfsSite
                      AND PermissionTypeID = 10059003
            ),
            (
                SELECT Permission
                FROM @UserSitePermissions
                WHERE SiteID = c.idfsSite
                      AND PermissionTypeID = 10059006
            ),
            (
                SELECT Permission
                FROM @UserSitePermissions
                WHERE SiteID = c.idfsSite
                      AND PermissionTypeID = 10059007
            ),
            (
                SELECT Permission
                FROM @UserSitePermissions
                WHERE SiteID = c.idfsSite
                      AND PermissionTypeID = 10059004
            ),
            (
                SELECT Permission
                FROM @UserSitePermissions
                WHERE SiteID = c.idfsSite
                      AND PermissionTypeID = 10059002
            )
        FROM dbo.tlbCampaign c
            INNER JOIN dbo.tlbCampaignToDiagnosis cd
                ON cd.idfCampaign = c.idfCampaign
                   AND cd.intRowStatus = 0
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = c.idfsSite
                   AND oa.intRowStatus = 0
        WHERE c.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserSitePermissions WHERE SiteID = c.idfsSite
        );

        DELETE FROM @Results
        WHERE ID IN (
                        SELECT c.idfCampaign
                        FROM dbo.tlbCampaign c
                            INNER JOIN @UserSitePermissions usp
                                ON usp.SiteID = c.idfsSite
                        WHERE usp.Permission = 4 -- Deny permission
                              AND usp.PermissionTypeID = 10059003 -- Read permission
                    );

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        INSERT INTO @FinalResults
        SELECT res.ID,
               MAX(res.ReadPermissionIndicator),
               MAX(res.AccessToPersonalDataPermissionIndicator),
               MAX(res.AccessToGenderAndAgeDataPermissionIndicator),
               MAX(res.WritePermissionIndicator),
               MAX(res.DeletePermissionIndicator)
        FROM @Results res
        WHERE res.ReadPermissionIndicator IN ( 1, 3, 5 )
        GROUP BY res.ID;

        WITH paging
        AS (SELECT DISTINCT
                c.idfCampaign,
                (
                    SELECT dbo.FN_GBL_Campaign_Disease_Names_GET(C.idfCampaign, @LanguageID)
                ) AS DiseaseList,
                SpeciesList = STUFF(
                                       (
                                           SELECT ', ' + speciesType.name
                                           FROM dbo.tlbCampaignToDiagnosis CD
                                               INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000086) AS speciesType
                                                   ON speciesType.idfsReference = CD.idfsSpeciesType
                                           WHERE CD.idfCampaign = c.idfCampaign
                                           GROUP BY speciesType.name
                                           FOR XML PATH(''), TYPE
                                       ).value('.[1]', 'NVARCHAR(MAX)'),
                                       1,
                                       2,
                                       ''
                                   ),
                SampleTypesList = STUFF(
                                           (
                                               SELECT ', ' + sampleType.name
                                               FROM dbo.tlbCampaignToDiagnosis CD
                                                   INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000087) AS sampleType
                                                       ON sampleType.idfsReference = CD.idfsSampleType
                                               WHERE CD.idfCampaign = c.idfCampaign
                                               GROUP BY sampleType.name
                                               FOR XML PATH(''), TYPE
                                           ).value('.[1]', 'NVARCHAR(MAX)'),
                                           1,
                                           2,
                                           ''
                                       ),
                campaignType.name AS CampaignTypeName,
                campaignStatus.name AS CampaignStatus,
                c.strCampaignID,
                c.strCampaignName,
                c.datCampaignDateStart,
                c.idfsSite,
                c.datCampaignDateEnd,
                c.strCampaignAdministrator,
                c.AuditCreateDTM,
                c.CampaignCategoryID
            FROM dbo.tlbCampaign c
                LEFT JOIN dbo.tlbCampaignToDiagnosis cd
                    ON cd.idfCampaign = c.idfCampaign
                INNER JOIN @FinalResults res
                    ON c.idfCampaign = res.ID
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000115) campaignStatus
                    ON c.idfsCampaignStatus = campaignStatus.idfsReference
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000116) campaignType
                    ON c.idfsCampaignType = campaignType.idfsReference
            WHERE c.CampaignCategoryID = @CampaignCategoryID
                  AND c.intRowStatus = 0
                  AND (
                          (
                              c.idfsSite = @UserSiteID
                              AND @ApplySiteFiltrationIndicator = 1
                          )
                          OR (
                                 (@UserSiteID IS NULL)
                                 OR (@ApplySiteFiltrationIndicator = 0)
                             )
                      )
                  AND (
                          c.strCampaignName LIKE '%' + TRIM(@CampaignName) + '%'
                          OR @CampaignName IS NULL
                      )
                  AND (
                          c.idfsCampaignType = @CampaignTypeID
                          OR @CampaignTypeID IS NULL
                      )
                  AND (
                          c.idfsCampaignStatus = @CampaignStatusTypeID
                          OR @CampaignStatusTypeID IS NULL
                      )
                  AND (
                          cd.idfsDiagnosis = @DiseaseID
                          OR @DiseaseID IS NULL
                      )
                  AND (
                          (
                              (c.datCampaignDateStart
                  BETWEEN @StartDateFrom AND @StartDateTo
                              )
                              OR (@StartDateFrom IS NULL)
                          )
                          OR (
                                 (c.datCampaignDateEnd
                  BETWEEN @StartDateFrom AND @StartDateTo
                                 )
                                 OR (@StartDateTo IS NULL)
                             )
                      )
                  AND (
                          c.strCampaignID LIKE '%' + TRIM(@CampaignID) + '%'
                          OR @CampaignID IS NULL
                      )
                  AND (
                          c.LegacyCampaignID LIKE '%' + TRIM(@LegacyCampaignID) + '%'
                          OR @LegacyCampaignID IS NULL
                      )
           ),
             paging_final
        AS (SELECT DISTINCT
                paging.idfCampaign,
                paging.DiseaseList,
                paging.SpeciesList,
                paging.SampleTypesList,
                paging.CampaignTypeName,
                paging.CampaignStatus,
                paging.strCampaignID,
                paging.strCampaignName,
                paging.datCampaignDateStart,
                paging.idfsSite,
                paging.datCampaignDateEnd,
                paging.strCampaignAdministrator,
                paging.AuditCreateDTM,
                paging.CampaignCategoryID,
                c = COUNT(*) OVER (),
                ROW_NUMBER() OVER (ORDER BY CASE
                                                WHEN @SortColumn = 'CampaignID'
                                                     AND @SortOrder = 'ASC' THEN
                                                    paging.strCampaignID
                                            END ASC,
                                            CASE
                                                WHEN @SortColumn = 'CampaignID'
                                                     AND @SortOrder = 'DESC' THEN
                                                    paging.strCampaignID
                                            END DESC,
                                            CASE
                                                WHEN @SortColumn = 'CampaignName'
                                                     AND @SortOrder = 'ASC' THEN
                                                    paging.strCampaignName
                                            END ASC,
                                            CASE
                                                WHEN @SortColumn = 'CampaignName'
                                                     AND @SortOrder = 'DESC' THEN
                                                    paging.strCampaignName
                                            END DESC,
                                            CASE
                                                WHEN @SortColumn = 'CampaignTypeName'
                                                     AND @SortOrder = 'ASC' THEN
                                                    paging.CampaignTypeName
                                            END ASC,
                                            CASE
                                                WHEN @SortColumn = 'CampaignTypeName'
                                                     AND @SortOrder = 'DESC' THEN
                                                    paging.CampaignTypeName
                                            END DESC,
                                            CASE
                                                WHEN @SortColumn = 'CampaignStatusTypeName'
                                                     AND @SortOrder = 'ASC' THEN
                                                    paging.CampaignStatus
                                            END ASC,
                                            CASE
                                                WHEN @SortColumn = 'CampaignStatusTypeName'
                                                     AND @SortOrder = 'DESC' THEN
                                                    paging.CampaignStatus
                                            END DESC,
                                            CASE
                                                WHEN @SortColumn = '"CampaignStartDate'
                                                     AND @SortOrder = 'ASC' THEN
                                                    paging.datCampaignDateStart
                                            END ASC,
                                            CASE
                                                WHEN @SortColumn = '"CampaignStartDate'
                                                     AND @SortOrder = 'DESC' THEN
                                                    paging.datCampaignDateStart
                                            END DESC,
                                            CASE
                                                WHEN @SortColumn = 'DiseaseName'
                                                     AND @SortOrder = 'ASC' THEN
                                                    paging.DiseaseList
                                            END ASC,
                                            CASE
                                                WHEN @SortColumn = 'DiseaseName'
                                                     AND @SortOrder = 'DESC' THEN
                                                    paging.DiseaseList
                                            END DESC
                                  ) AS RowNo
            FROM paging
           )
        SELECT p.idfCampaign AS CampaignKey,
               p.strCampaignID AS CampaignID,
               p.CampaignTypeName,
               p.CampaignStatus AS CampaignStatusTypeName,
               p.DiseaseList,
               p.SpeciesList,
               p.SampleTypesList,
               p.datCampaignDateStart AS CampaignStartDate,
               p.datCampaignDateEnd AS CampaignEndDate,
               p.strCampaignName AS CampaignName,
               p.strCampaignAdministrator AS CampaignAdministrator,
               p.AuditCreateDTM AS EnteredDate,
               p.idfsSite AS SiteID,
               CASE
                   WHEN res.ReadPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.ReadPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.ReadPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.ReadPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.ReadPermissionIndicator)
               END AS ReadPermissionindicator,
               CASE
                   WHEN res.AccessToPersonalDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.AccessToPersonalDataPermissionIndicator)
               END AS AccessToPersonalDataPermissionIndicator,
               CASE
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.AccessToGenderAndAgeDataPermissionIndicator)
               END AS AccessToGenderAndAgeDataPermissionIndicator,
               CASE
                   WHEN res.WritePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.WritePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.WritePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.WritePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.WritePermissionIndicator)
               END AS WritePermissionIndicator,
               CASE
                   WHEN res.DeletePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.DeletePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.DeletePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.DeletePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.DeletePermissionIndicator)
               END AS DeletePermissionIndicator,
               p.c AS TotalRowCount,
               (
                   SELECT COUNT(*)
                   FROM dbo.tlbCampaign
                   WHERE intRowStatus = 0
                         AND CampaignCategoryID = @CampaignCategoryID -- Human/Veterinary Active Surveillance Campaign
                         AND idfsCampaignType = @CampaignTypeID
               ) AS TotalCount,
               CurrentPage = @Page,
               TotalPages = (p.c / @PageSize) + IIF(p.c % @PageSize > 0, 1, 0)
        FROM paging_final p
            LEFT JOIN @FinalResults res
                ON p.idfCampaign = res.ID
            INNER JOIN dbo.tstSite s
                ON s.idfsSite = p.idfsSite
        WHERE p.CampaignCategoryID = @CampaignCategoryID
        ORDER BY p.RowNo OFFSET @PageSize * (@Page - 1) ROWS FETCH NEXT @PageSize ROWS ONLY;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USP_ASPNetUser_GetRolesAndPermissions]...';


GO
--================================================================================================
-- Author:		Steven L. Verner
-- Create date: 05.07.2019
-- Description:	Retrieve a list of Roles and Permissions for the given user by role and by employee
-- 
-- Name            Date       Change Detail
-- --------------- ---------- --------------------------------------------------------------------
-- Stephen Long    10/03/2019 Added check for row status; only return active employee group 
--                            memberships.
-- Stephen Long    05/23/2020 Added intRowStatus check on system function table.
-- Stephen Long    12/10/2020 Added employee ID parameter as optional parameter, and union for 
--                            users that are employees of multiple organizations.
-- Mani			   01/05/2021	Changed the join to use LkupRoleSystemFunctionAccess fa ON fa.RoleID = r.idfsEmployeeGroupName
-- Mani			   03/12/2021	Added employee level pemission
-- Stephen Long    01/13/2023 Updated for site filtration queries/permissions.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ASPNetUser_GetRolesAndPermissions]
    @idfuserid BIGINT,
    @EmployeeID BIGINT = NULL
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @SiteID BIGINT = (
                                 SELECT idfsSite FROM dbo.tlbEmployee WHERE idfEmployee = @EmployeeID
                             );
    DECLARE @Results TABLE
    (
        idfEmployee BIGINT NOT NULL,
        PermissionId BIGINT NOT NULL,
        [Role] NVARCHAR(MAX) NOT NULL,
        Permission NVARCHAR(200) NOT NULL,
        PermissionLevelId BIGINT NOT NULL,
        PermissionLevel NVARCHAR(200) NOT NULL
    );
    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );

    INSERT INTO @UserGroupSitePermissions
    SELECT oa.idfsOnSite,
           oa.idfsObjectOperation,
           CASE
               WHEN oa.intPermission = 2 THEN
                   3
               ELSE
                   2
           END
    FROM dbo.tstObjectAccess oa
        INNER JOIN dbo.tlbEmployeeGroupMember egm
            ON egm.idfEmployee = @EmployeeID
               AND egm.intRowStatus = 0
    WHERE oa.intRowStatus = 0
          AND oa.idfsObjectType = 10060011 -- Site
          AND oa.idfActor = egm.idfEmployeeGroup;

    INSERT INTO @UserSitePermissions
    SELECT oa.idfsOnSite,
           oa.idfsObjectOperation,
           CASE
               WHEN oa.intPermission = 2 THEN
                   5
               ELSE
                   4
           END
    FROM dbo.tstObjectAccess oa
    WHERE oa.intRowStatus = 0
          AND oa.idfsObjectType = 10060011 -- Site
          AND oa.idfActor = @EmployeeID;

    -- Returned on login - user's default organization permissions.
    INSERT INTO @Results
    SELECT fa.idfEmployee,
           r1.idfsBaseReference PermissionId,
           'Employee' AS [Role],
           r1.strDefault Permission,
           r2.idfsBaseReference PermissionLevelId,
           r2.strDefault PermissionLevel
    FROM dbo.tstUserTable ut
        JOIN dbo.tlbPerson p
            ON p.idfPerson = ut.idfPerson
        Join dbo.tlbEmployee e
            on e.idfEmployee = p.idfPerson
        JOIN dbo.LkupRoleSystemFunctionAccess fa
            ON fa.idfEmployee = e.idfEmployee
        JOIN dbo.trtBaseReference r1
            ON r1.idfsBaseReference = fa.SystemFunctionID
        JOIN dbo.trtReferenceType r11
            ON r11.idfsReferenceType = r1.idfsReferenceType
        JOIN dbo.trtBaseReference r2
            ON r2.idfsBaseReference = fa.SystemFunctionOperationID
    WHERE ut.idfUserID = @idfuserid
          AND p.intRowStatus = 0
          AND e.intRowStatus = 0
          AND fa.intRowStatus = 0
          AND @EmployeeID IS NULL
    UNION

    -- Returned when user switches to another assigned organization outside of the default one.
    SELECT fa.idfEmployee,
           r1.idfsBaseReference PermissionId,
           'Employee' AS [Role],
           r1.strDefault Permission,
           r2.idfsBaseReference PermissionLevelId,
           r2.strDefault PermissionLevel
    FROM dbo.tstUserTable ut
        JOIN dbo.LkupRoleSystemFunctionAccess fa
            ON fa.idfEmployee = ut.idfPerson
               and ut.intRowStatus = 0
        JOIN dbo.trtBaseReference r1
            ON r1.idfsBaseReference = fa.SystemFunctionID
        JOIN dbo.trtReferenceType r11
            ON r11.idfsReferenceType = r1.idfsReferenceType
        JOIN dbo.trtBaseReference r2
            ON r2.idfsBaseReference = fa.SystemFunctionOperationID
    WHERE ut.idfUserID = @idfuserid
          AND fa.intRowStatus = 0
          AND (
                  fa.idfEmployee = @EmployeeID
                  AND @EmployeeID IS NOT NULL
              )
    ORDER BY r1.strDefault;

    -- =======================================================================================
    -- SITE FILTRATION RULES
    --
    -- Apply site filtration rules from use case SAUC29.
    -- =======================================================================================
    -- 
    -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
    -- as all records have been pulled above with or without site filtration rules applied.
    --
    DELETE FROM @Results
    WHERE EXISTS
    (
        SELECT e.idfEmployee
        FROM dbo.tlbEmployee e
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = @SiteID
                   AND oa.intRowStatus = 0
            INNER JOIN dbo.tlbEmployeeGroup eg
                ON eg.idfsSite = @SiteID
                   AND eg.intRowStatus = 0
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = eg.idfEmployeeGroup
                   AND br.intRowStatus = 0
                   AND br.blnSystem = 1
        WHERE e.intRowStatus = 0
              AND oa.idfsObjectOperation = 10059003 -- Read permission
              AND oa.intPermission = 1 -- Deny permission
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = eg.idfEmployeeGroup
    );

    --
    -- Apply level 1 site filtration rules for an employee's associated user group(s).  
    -- Allows and denies will supersede level 0.
    --
    INSERT INTO @Results
    SELECT @EmployeeID,
           r1.idfsBaseReference PermissionId,
           'Employee' AS [Role],
           r1.strDefault Permission,
           r2.idfsBaseReference PermissionLevelId,
           r2.strDefault PermissionLevel
    FROM dbo.LkupRoleSystemFunctionAccess fa
        JOIN dbo.trtBaseReference r1
            ON r1.idfsBaseReference = fa.SystemFunctionID
        JOIN dbo.trtReferenceType r11
            ON r11.idfsReferenceType = r1.idfsReferenceType
        JOIN dbo.trtBaseReference r2
            ON r2.idfsBaseReference = fa.SystemFunctionOperationID
    WHERE fa.intRowStatus = 0
          AND @EmployeeID IS NOT NULL
          AND EXISTS
    (
        SELECT *
        FROM @UserGroupSitePermissions
        WHERE SiteID = @SiteID
              AND Permission = 1 -- Allow permission
    );

    DELETE res
    FROM @Results res
        INNER JOIN @UserGroupSitePermissions ugsp
            ON ugsp.SiteID = @SiteID
    WHERE ugsp.Permission = 3
          AND res.PermissionLevelId = ugsp.PermissionTypeID; -- Deny permission

    --
    -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
    -- will supersede level 1.
    --
    INSERT INTO @Results
    SELECT @EmployeeID,
           r1.idfsBaseReference PermissionId,
           'Employee' AS [Role],
           r1.strDefault Permission,
           r2.idfsBaseReference PermissionLevelId,
           r2.strDefault PermissionLevel
    FROM dbo.LkupRoleSystemFunctionAccess fa
        JOIN dbo.trtBaseReference r1
            ON r1.idfsBaseReference = fa.SystemFunctionID
        JOIN dbo.trtReferenceType r11
            ON r11.idfsReferenceType = r1.idfsReferenceType
        JOIN dbo.trtBaseReference r2
            ON r2.idfsBaseReference = fa.SystemFunctionOperationID
    WHERE fa.intRowStatus = 0
          AND @EmployeeID IS NOT NULL
          AND EXISTS
    (
        SELECT *
        FROM @UserSitePermissions
        WHERE SiteID = @SiteID
              AND Permission = 1 -- Allow permission
    );

    DELETE res
    FROM @Results res
        INNER JOIN @UserSitePermissions usp
            ON usp.SiteID = @SiteID
    WHERE usp.Permission = 4
          AND res.PermissionLevelId = usp.PermissionTypeID; -- Deny permission

    SELECT idfEmployee,
           PermissionId,
           [Role],
           Permission,
           PermissionLevelId,
           PermissionLevel
    FROM @Results
    GROUP BY idfEmployee,
             PermissionId,
             [Role],
             Permission,
             PermissionLevelId,
             PermissionLevel;
END
GO
PRINT N'Altering Procedure [dbo].[USP_HAS_MONITORING_SESSION_GETList]...';


GO
-- ================================================================================================
-- Name: USP_HAS_MONITORING_SESSION_GETList
--
-- Description: Gets a list of human monitoring sessions based on search criteria provided.
--                      
-- Revision History:
-- Name				Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long		12/31/2018 Initial release.
-- Stephen Long		07/06/2019 Fixed category code, and added campaign ID.
-- Stephen Long		01/26/2020 Added site list parameter for site filtration.
-- Stephen Long		02/24/2020 Added non-configurable site filtration rules.
-- Stephen Long		03/25/2020 Added if/else for first-level and second-level site types to 
--                             bypass non-configurable rules.
-- Stephen Long		04/20/2020 Changed join from FN_GBL_INSTITUTION to tstSite as not all sites 
--                             have organizations.
-- Stephen Long		05/18/2020 Added disease filtration rules from use case SAUC62.
-- Stephen Long		06/18/2020 Added where criteria to the query when no site filtration is 
--                             required.
-- Stephen Long		07/07/2020 Added trim to EIDSS identifier like criteria.
-- Stephen Long		11/18/2020 Added site ID to the query.
-- Stephen Long		11/27/2020 Added configurable site filtration rules.
-- Stephen Long		12/13/2020 Added apply configurable filtration indicator parameter.
-- Stephen Long		12/24/2020 Modified join on disease filtration default role rule.
-- Stephen Long		12/29/2020 Changed function call on reference data for inactive records.
-- Stephen Long		04/04/2021 Added updated pagination and location hierarchy.
-- Mark Wilson		08/18/2021 joined tlbMonitoringSessionToDiagnosis to get disease
-- Doug Albanese	11/23/2021 Refactored for use with new HAS module
-- Stephen Long     01/26/2022 Added the disease identifiers and names fields to the query.
-- Doug Albanese	01/27/2022 Completely removed "node" searches and put in full hierarchy 
--                             location joins
-- Stephen Long     03/29/2022 Fix to site filtration to pull back a user's own site records.
-- Doug Albanese	03/30/2022 Refactored to align with Stephen's changes to combine Diseases into 
--                             one row.
-- Doug Albanese	04/01/2022 Creating HAS's on the first o a month exposed an incorrect BETWEEN 
--                             statement use. Adding one day to ending date.
-- Doug Albanese	05/16/2022 Added Admin Level 4 for return of Settlement in Campaign's use
-- Stephen Long     06/03/2022 Updated to point default access rules to base reference.
-- Mike Kornegay	06/14/2022 Fixed filtration rule that was pointing to SessionCategoryID for vet
--                             instead of human.
-- Stephen Long     09/22/2022 Add check for "0" page size.  If "0", then set to 1.
-- Stephen Long     01/09/2023 Updated for site filtration queries.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_HAS_MONITORING_SESSION_GETList]
(
    @LanguageID NVARCHAR(50),
    @SessionID NVARCHAR(200) = NULL,
    @LegacySessionID NVARCHAR(50) = NULL,
    @CampaignID NVARCHAR(200) = NULL,
    @CampaignKey BIGINT = NULL,
    @SessionStatusTypeID BIGINT = NULL,
    @DateEnteredFrom DATETIME = NULL,
    @DateEnteredTo DATETIME = NULL,
    @AdministrativeLevelID BIGINT = NULL,
    @DiseaseID BIGINT = NULL,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT,
    @UserEmployeeID BIGINT,
    @ApplySiteFiltrationIndicator BIT = 0,
    @SortColumn NVARCHAR(30) = 'SessionID',
    @SortOrder NVARCHAR(4) = 'DESC',
    @PageNumber INT = 1,
    @PageSize INT = 10
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @AdministrativeLevelNode AS HIERARCHYID;
    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );

    IF @AdministrativeLevelID IS NOT NULL
    BEGIN
        SELECT @AdministrativeLevelNode = node
        FROM dbo.gisLocation
        WHERE idfsLocation = @AdministrativeLevelID;
    END;

    BEGIN TRY
        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        IF @PageSize = 0
        BEGIN
            SET @PageSize = 1;
        END

        -- ========================================================================================
        -- NO CONFIGURABLE FILTRATION RULES APPLIED
        --
        -- For first and second level sites, do not apply any configurable filtration rules.
        -- ========================================================================================
        IF @ApplySiteFiltrationIndicator = 0
        BEGIN
            INSERT INTO @Results
            (
                ID,
                ReadPermissionIndicator,
                AccessToPersonalDataPermissionIndicator,
                AccessToGenderAndAgeDataPermissionIndicator,
                WritePermissionIndicator,
                DeletePermissionIndicator
            )
            SELECT ms.idfMonitoringSession,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbMonitoringSession ms
                INNER JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                    ON msd.idfMonitoringSession = ms.idfMonitoringSession
                       AND msd.intRowStatus = 0
                LEFT JOIN dbo.tlbCampaign c
                    ON c.idfCampaign = ms.idfCampaign
                       AND c.intRowStatus = 0
                LEFT JOIN dbo.gisLocation g
                    ON g.idfsLocation = ms.idfsLocation
                INNER JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                    ON lh.idfsLocation = ms.idfsLocation
            WHERE ms.intRowStatus = 0
                  AND ms.SessionCategoryID = 10502001 -- Human Active Surveillance Session
                  AND (
                          ms.idfCampaign = @CampaignKey
                          OR @CampaignKey IS NULL
                      )
                  AND (
                          ms.idfsMonitoringSessionStatus = @SessionStatusTypeID
                          OR @SessionStatusTypeID IS NULL
                      )
                  AND (
                          msd.idfsDiagnosis = @DiseaseID
                          OR @DiseaseID IS NULL
                      )
                  AND (
                          g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                          OR @AdministrativeLevelID IS NULL
                      )
                  AND (
                          (ms.datEnteredDate
                  BETWEEN @DateEnteredFrom AND DATEADD(DAY, 1, @DateEnteredTo)
                          )
                          OR (
                                 @DateEnteredFrom IS NULL
                                 OR @DateEnteredTo IS NULL
                             )
                      )
                  AND (
                          ms.strMonitoringSessionID LIKE '%' + TRIM(@SessionID) + '%'
                          OR @SessionID IS NULL
                      )
                  AND (
                          c.strCampaignID LIKE '%' + TRIM(@CampaignID) + '%'
                          OR @CampaignID IS NULL
                      );
        END
        ELSE
        BEGIN
            INSERT INTO @Results
            (
                ID,
                ReadPermissionIndicator,
                AccessToPersonalDataPermissionIndicator,
                AccessToGenderAndAgeDataPermissionIndicator,
                WritePermissionIndicator,
                DeletePermissionIndicator
            )
            SELECT ms.idfMonitoringSession,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbMonitoringSession ms
                INNER JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                    ON msd.idfMonitoringSession = ms.idfMonitoringSession
                       AND msd.intRowStatus = 0
                LEFT JOIN dbo.tlbCampaign c
                    ON c.idfCampaign = ms.idfCampaign
                       AND c.intRowStatus = 0
                LEFT JOIN dbo.gisLocation g
                    ON g.idfsLocation = ms.idfsLocation
                INNER JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                    ON lh.idfsLocation = ms.idfsLocation
            WHERE ms.intRowStatus = 0
                  AND ms.idfsSite = @UserSiteID
                  AND ms.SessionCategoryID = 10502001 -- Human Active Surveillance Session
                  AND (
                          ms.idfCampaign = @CampaignKey
                          OR @CampaignKey IS NULL
                      )
                  AND (
                          ms.idfsMonitoringSessionStatus = @SessionStatusTypeID
                          OR @SessionStatusTypeID IS NULL
                      )
                  AND (
                          msd.idfsDiagnosis = @DiseaseID
                          OR @DiseaseID IS NULL
                      )
                  AND (
                          g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                          OR @AdministrativeLevelID IS NULL
                      )
                  AND (
                          (ms.datEnteredDate
                  BETWEEN @DateEnteredFrom AND DATEADD(DAY, 1, @DateEnteredTo)
                          )
                          OR (
                                 @DateEnteredFrom IS NULL
                                 OR @DateEnteredTo IS NULL
                             )
                      )
                  AND (
                          ms.strMonitoringSessionID LIKE '%' + TRIM(@SessionID) + '%'
                          OR @SessionID IS NULL
                      )
                  AND (
                          c.strCampaignID LIKE '%' + TRIM(@CampaignID) + '%'
                          OR @CampaignID IS NULL
                      );

            DECLARE @FilteredResults TABLE
            (
                ID BIGINT NOT NULL,
                ReadPermissionIndicator BIT NOT NULL,
                AccessToPersonalDataPermissionIndicator BIT NOT NULL,
                AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
                WritePermissionIndicator BIT NOT NULL,
                DeletePermissionIndicator BIT NOT NULL, INDEX IDX_ID (ID
                                                                     ));

            -- =======================================================================================
            -- DEFAULT CONFIGURABLE FILTRATION RULES
            --
            -- Apply non-configurable filtration rules for third level sites.
            -- =======================================================================================
            DECLARE @RuleActiveStatus INT = 0;
            DECLARE @AdministrativeLevelTypeID INT;
            DECLARE @OrganizationAdministrativeLevelNode HIERARCHYID;
            DECLARE @DefaultAccessRules AS TABLE
            (
                AccessRuleID BIGINT NOT NULL,
                ActiveIndicator INT NOT NULL,
                ReadPermissionIndicator BIT NOT NULL,
                AccessToPersonalDataPermissionIndicator BIT NOT NULL,
                AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
                WritePermissionIndicator BIT NOT NULL,
                DeletePermissionIndicator BIT NOT NULL,
                AdministrativeLevelTypeID INT NULL
            );

            INSERT INTO @DefaultAccessRules
            (
                AccessRuleID,
                ActiveIndicator,
                ReadPermissionIndicator,
                AccessToPersonalDataPermissionIndicator,
                AccessToGenderAndAgeDataPermissionIndicator,
                WritePermissionIndicator,
                DeletePermissionIndicator,
                AdministrativeLevelTypeID
            )
            SELECT AccessRuleID,
                   a.intRowStatus,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator,
                   a.AdministrativeLevelTypeID
            FROM dbo.AccessRule a
            WHERE DefaultRuleIndicator = 1;

            --
            -- Session data shall be available to all sites of the same administrative level.
            --
            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
            WHERE AccessRuleID = 10537006;

            IF @RuleActiveStatus = 0
            BEGIN
                SELECT @AdministrativeLevelTypeID = AdministrativeLevelTypeID
                FROM @DefaultAccessRules
                WHERE AccessRuleID = 10537006;

                SELECT @OrganizationAdministrativeLevelNode
                    = g.node.GetAncestor(g.node.GetLevel() - @AdministrativeLevelTypeID)
                FROM dbo.tlbOffice o
                    INNER JOIN dbo.tlbGeoLocationShared l
                        ON l.idfGeoLocationShared = o.idfLocation
                    INNER JOIN dbo.gisLocation g
                        ON g.idfsLocation = l.idfsLocation
                WHERE o.idfOffice = @UserOrganizationID
                      AND g.node.GetLevel() >= @AdministrativeLevelTypeID;

                -- Administrative level specified in the rule of the site where the session was created.
                INSERT INTO @FilteredResults
                (
                    ID,
                    ReadPermissionIndicator,
                    AccessToPersonalDataPermissionIndicator,
                    AccessToGenderAndAgeDataPermissionIndicator,
                    WritePermissionIndicator,
                    DeletePermissionIndicator
                )
                SELECT ms.idfMonitoringSession,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbMonitoringSession ms
                    INNER JOIN dbo.tstSite s
                        ON ms.idfsSite = s.idfsSite
                    INNER JOIN dbo.tlbOffice o
                        ON o.idfOffice = s.idfOffice
                    INNER JOIN dbo.tlbGeoLocationShared l
                        ON l.idfGeoLocationShared = o.idfLocation
                    INNER JOIN dbo.gisLocation g
                        ON g.idfsLocation = l.idfsLocation
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537006
                WHERE ms.intRowStatus = 0
                      AND ms.SessionCategoryID = 10502001 -- Human Active Surveillance Session
                      AND g.node.IsDescendantOf(@OrganizationAdministrativeLevelNode) = 1;

                -- Administrative level specified in the rule of the patient's current residence address
                INSERT INTO @FilteredResults
                (
                    ID,
                    ReadPermissionIndicator,
                    AccessToPersonalDataPermissionIndicator,
                    AccessToGenderAndAgeDataPermissionIndicator,
                    WritePermissionIndicator,
                    DeletePermissionIndicator
                )
                SELECT ms.idfMonitoringSession,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbMonitoringSession ms
                    INNER JOIN dbo.tlbHuman h
                        ON h.idfMonitoringSession = ms.idfMonitoringSession
                    INNER JOIN dbo.tlbGeoLocation l
                        ON l.idfGeoLocation = h.idfCurrentResidenceAddress
                    INNER JOIN dbo.gisLocation g
                        ON g.idfsLocation = l.idfsLocation
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537006
                WHERE ms.intRowStatus = 0
                      AND ms.SessionCategoryID = 10502001 -- Human Active Surveillance Session
                      AND g.node.IsDescendantOf(@OrganizationAdministrativeLevelNode) = 1;
            END;

            --
            -- Session data is always distributed across the sites where the disease reports are 
            -- linked to the session.
            --
            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
            WHERE AccessRuleID = 10537007;

            IF @RuleActiveStatus = 0
            BEGIN
                INSERT INTO @FilteredResults
                (
                    ID,
                    ReadPermissionIndicator,
                    AccessToPersonalDataPermissionIndicator,
                    AccessToGenderAndAgeDataPermissionIndicator,
                    WritePermissionIndicator,
                    DeletePermissionIndicator
                )
                SELECT ms.idfMonitoringSession,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbMonitoringSession ms
                    INNER JOIN dbo.tlbHumanCase hc
                        ON hc.idfParentMonitoringSession = ms.idfMonitoringSession
                           AND hc.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537007
                WHERE ms.intRowStatus = 0
                      AND ms.SessionCategoryID = 10502001 -- Human Active Surveillance Session
                      AND hc.idfsSite = @UserSiteID;
            END;

            --
            -- Session data shall be available to all sites' organizations connected to the particular 
            -- session where samples were transferred out.
            --
            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
            WHERE AccessRuleID = 10537008;

            IF @RuleActiveStatus = 0
            BEGIN
                -- Samples transferred collected by and sent to organizations
                INSERT INTO @FilteredResults
                (
                    ID,
                    ReadPermissionIndicator,
                    AccessToPersonalDataPermissionIndicator,
                    AccessToGenderAndAgeDataPermissionIndicator,
                    WritePermissionIndicator,
                    DeletePermissionIndicator
                )
                SELECT ms.idfMonitoringSession,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbMonitoringSession ms
                    INNER JOIN dbo.tlbMaterial m
                        ON ms.idfMonitoringSession = m.idfMonitoringSession
                           AND m.intRowStatus = 0
                    INNER JOIN dbo.tlbTransferOutMaterial toutm
                        ON m.idfMaterial = toutm.idfMaterial
                           AND toutm.intRowStatus = 0
                    INNER JOIN dbo.tlbTransferOUT tout
                        ON toutm.idfTransferOut = tout.idfTransferOut
                           AND tout.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537008
                WHERE ms.intRowStatus = 0
                      AND ms.SessionCategoryID = 10502001 -- Human Active Surveillance Session
                      AND tout.idfSendToOffice = @UserOrganizationID;

                INSERT INTO @FilteredResults
                (
                    ID,
                    ReadPermissionIndicator,
                    AccessToPersonalDataPermissionIndicator,
                    AccessToGenderAndAgeDataPermissionIndicator,
                    WritePermissionIndicator,
                    DeletePermissionIndicator
                )
                SELECT ms.idfMonitoringSession,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbMonitoringSession ms
                    INNER JOIN dbo.tlbMaterial m
                        ON ms.idfMonitoringSession = m.idfMonitoringSession
                           AND m.intRowStatus = 0
                    INNER JOIN dbo.tlbTransferOutMaterial toutm
                        ON m.idfMaterial = toutm.idfMaterial
                           AND toutm.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537008
                WHERE ms.intRowStatus = 0
                      AND ms.SessionCategoryID = 10502001 -- Human Active Surveillance Session
                      AND (
                              m.idfFieldCollectedByOffice = @UserOrganizationID
                              OR m.idfSendToOffice = @UserOrganizationID
                          );
            END;

            -- =======================================================================================
            -- CONFIGURABLE FILTRATION RULES
            -- 
            -- Apply configurable filtration rules for use case SAUC34. Some of these rules may 
            -- overlap the default rules.
            -- =======================================================================================
            --
            -- Apply at the user's site group level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            (
                ID,
                ReadPermissionIndicator,
                AccessToPersonalDataPermissionIndicator,
                AccessToGenderAndAgeDataPermissionIndicator,
                WritePermissionIndicator,
                DeletePermissionIndicator
            )
            SELECT ms.idfMonitoringSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbMonitoringSession ms
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = ms.idfsSite
                INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                    ON userSiteGroup.idfsSite = @UserSiteID
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ms.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            (
                ID,
                ReadPermissionIndicator,
                AccessToPersonalDataPermissionIndicator,
                AccessToGenderAndAgeDataPermissionIndicator,
                WritePermissionIndicator,
                DeletePermissionIndicator
            )
            SELECT ms.idfMonitoringSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbMonitoringSession ms
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = ms.idfsSite
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ms.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's employee group level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            (
                ID,
                ReadPermissionIndicator,
                AccessToPersonalDataPermissionIndicator,
                AccessToGenderAndAgeDataPermissionIndicator,
                WritePermissionIndicator,
                DeletePermissionIndicator
            )
            SELECT ms.idfMonitoringSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbMonitoringSession ms
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = ms.idfsSite
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ms.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's ID level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            (
                ID,
                ReadPermissionIndicator,
                AccessToPersonalDataPermissionIndicator,
                AccessToGenderAndAgeDataPermissionIndicator,
                WritePermissionIndicator,
                DeletePermissionIndicator
            )
            SELECT ms.idfMonitoringSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbMonitoringSession ms
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = ms.idfsSite
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ms.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site group level, granted by a site.
            --
            INSERT INTO @FilteredResults
            (
                ID,
                ReadPermissionIndicator,
                AccessToPersonalDataPermissionIndicator,
                AccessToGenderAndAgeDataPermissionIndicator,
                WritePermissionIndicator,
                DeletePermissionIndicator
            )
            SELECT ms.idfMonitoringSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbMonitoringSession ms
                INNER JOIN dbo.tflSiteToSiteGroup sgs
                    ON sgs.idfsSite = @UserSiteID
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ms.intRowStatus = 0
                  AND sgs.idfsSite = ms.idfsSite;

            -- 
            -- Apply at the user's site level, granted by a site.
            --
            INSERT INTO @FilteredResults
            (
                ID,
                ReadPermissionIndicator,
                AccessToPersonalDataPermissionIndicator,
                AccessToGenderAndAgeDataPermissionIndicator,
                WritePermissionIndicator,
                DeletePermissionIndicator
            )
            SELECT ms.idfMonitoringSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbMonitoringSession ms
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ms.intRowStatus = 0
                  AND a.GrantingActorSiteID = ms.idfsSite;

            -- 
            -- Apply at the user's employee group level, granted by a site.
            --
            INSERT INTO @FilteredResults
            (
                ID,
                ReadPermissionIndicator,
                AccessToPersonalDataPermissionIndicator,
                AccessToGenderAndAgeDataPermissionIndicator,
                WritePermissionIndicator,
                DeletePermissionIndicator
            )
            SELECT ms.idfMonitoringSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbMonitoringSession ms
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ms.intRowStatus = 0
                  AND a.GrantingActorSiteID = ms.idfsSite;

            -- 
            -- Apply at the user's ID level, granted by a site.
            --
            INSERT INTO @FilteredResults
            (
                ID,
                ReadPermissionIndicator,
                AccessToPersonalDataPermissionIndicator,
                AccessToGenderAndAgeDataPermissionIndicator,
                WritePermissionIndicator,
                DeletePermissionIndicator
            )
            SELECT ms.idfMonitoringSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbMonitoringSession ms
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ms.intRowStatus = 0
                  AND a.GrantingActorSiteID = ms.idfsSite;

            -- Copy filtered results to results and use search criteria
            INSERT INTO @Results
            (
                ID,
                ReadPermissionIndicator,
                AccessToPersonalDataPermissionIndicator,
                AccessToGenderAndAgeDataPermissionIndicator,
                WritePermissionIndicator,
                DeletePermissionIndicator
            )
            SELECT ID,
                   ReadPermissionIndicator,
                   AccessToPersonalDataPermissionIndicator,
                   AccessToGenderAndAgeDataPermissionIndicator,
                   WritePermissionIndicator,
                   DeletePermissionIndicator
            FROM @FilteredResults
                INNER JOIN dbo.tlbMonitoringSession ms
                    ON ms.idfMonitoringSession = ID
                INNER JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                    ON msd.idfMonitoringSession = ms.idfMonitoringSession
                       AND msd.intRowStatus = 0
                LEFT JOIN dbo.tlbCampaign c
                    ON c.idfCampaign = ms.idfCampaign
                       AND c.intRowStatus = 0
                LEFT JOIN dbo.gisLocation g
                    ON g.idfsLocation = ms.idfsLocation
                INNER JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                    ON lh.idfsLocation = ms.idfsLocation
            WHERE ms.SessionCategoryID = 10502001 -- Human Active Surveillance Session
                  AND (
                          ms.idfCampaign = @CampaignKey
                          OR @CampaignKey IS NULL
                      )
                  AND (
                          ms.idfsMonitoringSessionStatus = @SessionStatusTypeID
                          OR @SessionStatusTypeID IS NULL
                      )
                  AND (
                          msd.idfsDiagnosis = @DiseaseID
                          OR @DiseaseID IS NULL
                      )
                  AND (
                          g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                          OR @AdministrativeLevelID IS NULL
                      )
                  AND (
                          (ms.datEnteredDate
                  BETWEEN @DateEnteredFrom AND DATEADD(DAY, 1, @DateEnteredTo)
                          )
                          OR (
                                 @DateEnteredFrom IS NULL
                                 AND @DateEnteredTo IS NULL
                             )
                      )
                  AND (
                          ms.strMonitoringSessionID LIKE '%' + TRIM(@SessionID) + '%'
                          OR @SessionID IS NULL
                      )
                  AND (
                          c.strCampaignID LIKE '%' + TRIM(@CampaignID) + '%'
                          OR @CampaignID IS NULL
                      )
                  AND (
                          LegacySessionID LIKE '%' + TRIM(@LegacySessionID) + '%'
                          OR @LegacySessionID IS NULL
                      )
            GROUP BY ID,
                     ReadPermissionIndicator,
                     AccessToPersonalDataPermissionIndicator,
                     AccessToGenderAndAgeDataPermissionIndicator,
                     WritePermissionIndicator,
                     DeletePermissionIndicator;
        END;

        -- =======================================================================================
        -- DISEASE FILTRATION RULES
        --
        -- Apply disease filtration rules from use case SAUC62.
        -- =======================================================================================
        -- 
        -- Apply level 0 disease filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without filtration rules applied.
        --
        DELETE FROM @Results
        WHERE ID IN (
                        SELECT ms.idfMonitoringSession
                        FROM dbo.tlbMonitoringSession ms
                            INNER JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                                ON msd.idfMonitoringSession = ms.idfMonitoringSession
                                   AND msd.intRowStatus = 0
                            INNER JOIN dbo.tstObjectAccess oa
                                ON oa.idfsObjectID = msd.idfsDiagnosis
                                   AND oa.intRowStatus = 0
                        WHERE ms.intRowStatus = 0
                              AND oa.intPermission = 1 -- Deny permission
                              AND oa.idfsObjectType = 10060001 -- Disease
                              AND oa.idfActor = -506 -- Default role
                    );

        --
        -- Apply level 1 disease filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        INSERT INTO @Results
        (
            ID,
            ReadPermissionIndicator,
            AccessToPersonalDataPermissionIndicator,
            AccessToGenderAndAgeDataPermissionIndicator,
            WritePermissionIndicator,
            DeletePermissionIndicator
        )
        SELECT ms.idfMonitoringSession,
               1,
               1,
               1,
               1,
               1
        FROM dbo.tlbMonitoringSession ms
            INNER JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                ON msd.idfMonitoringSession = ms.idfMonitoringSession
                   AND msd.intRowStatus = 0
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = msd.idfsDiagnosis
                   AND oa.intRowStatus = 0
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intPermission = 2 -- Allow permission
              AND ms.intRowStatus = 0
              AND oa.idfsObjectType = 10060001 -- Disease
              AND oa.idfActor = egm.idfEmployeeGroup;

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbMonitoringSession ms
                ON ms.idfMonitoringSession = res.ID
            INNER JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                ON msd.idfMonitoringSession = ms.idfMonitoringSession
                   AND msd.intRowStatus = 0
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = msd.idfsDiagnosis
                   AND oa.intRowStatus = 0
        WHERE oa.intPermission = 1 -- Deny permission
              AND oa.idfsObjectType = 10060001 -- Disease
              AND oa.idfActor = egm.idfEmployeeGroup;

        --
        -- Apply level 2 disease filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        INSERT INTO @Results
        (
            ID,
            ReadPermissionIndicator,
            AccessToPersonalDataPermissionIndicator,
            AccessToGenderAndAgeDataPermissionIndicator,
            WritePermissionIndicator,
            DeletePermissionIndicator
        )
        SELECT ms.idfMonitoringSession,
               1,
               1,
               1,
               1,
               1
        FROM dbo.tlbMonitoringSession ms
            INNER JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                ON msd.idfMonitoringSession = ms.idfMonitoringSession
                   AND msd.intRowStatus = 0
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = msd.idfsDiagnosis
                   AND oa.intRowStatus = 0
        WHERE oa.intPermission = 2 -- Allow permission
              AND ms.intRowStatus = 0
              AND oa.idfsObjectType = 10060001 -- Disease
              AND oa.idfActor = @UserEmployeeID;

        DELETE FROM @Results
        WHERE ID IN (
                        SELECT ms.idfMonitoringSession
                        FROM dbo.tlbMonitoringSession ms
                            INNER JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                                ON msd.idfMonitoringSession = ms.idfMonitoringSession
                                   AND msd.intRowStatus = 0
                            INNER JOIN dbo.tstObjectAccess oa
                                ON oa.idfsObjectID = msd.idfsDiagnosis
                                   AND oa.intRowStatus = 0
                        WHERE ms.intRowStatus = 0
                              AND oa.intPermission = 1 -- Deny permission
                              AND oa.idfsObjectType = 10060001 -- Disease
                              AND oa.idfActor = @UserEmployeeID
                    );

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT ms.idfMonitoringSession
            FROM dbo.tlbMonitoringSession ms
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = ms.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE ms.intRowStatus = 0
                  AND oa.idfsObjectOperation = 10059003 -- Read permission
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        INSERT INTO @Results
        (
            ID,
            ReadPermissionIndicator,
            AccessToPersonalDataPermissionIndicator,
            AccessToGenderAndAgeDataPermissionIndicator,
            WritePermissionIndicator,
            DeletePermissionIndicator
        )
        SELECT ms.idfMonitoringSession,
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = ms.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = ms.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = ms.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = ms.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = ms.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbMonitoringSession ms
        WHERE ms.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserGroupSitePermissions WHERE SiteID = ms.idfsSite
        );

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbMonitoringSession ms
                ON ms.idfMonitoringSession = res.ID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = ms.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003; -- Read permission

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        INSERT INTO @Results
        (
            ID,
            ReadPermissionIndicator,
            AccessToPersonalDataPermissionIndicator,
            AccessToGenderAndAgeDataPermissionIndicator,
            WritePermissionIndicator,
            DeletePermissionIndicator
        )
        SELECT ms.idfMonitoringSession,
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = ms.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = ms.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = ms.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = ms.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = ms.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbMonitoringSession ms
        WHERE ms.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserSitePermissions WHERE SiteID = ms.idfsSite
        );

        DELETE FROM @Results
        WHERE ID IN (
                        SELECT ms.idfMonitoringSession
                        FROM dbo.tlbMonitoringSession ms
                            INNER JOIN @UserSitePermissions usp
                                ON usp.SiteID = ms.idfsSite
                        WHERE usp.Permission = 4 -- Deny permission
                              AND usp.PermissionTypeID = 10059003 -- Read permission
                    );

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        INSERT INTO @FinalResults
        SELECT ID,
               MAX(res.ReadPermissionIndicator),
               MAX(res.AccessToPersonalDataPermissionIndicator),
               MAX(res.AccessToGenderAndAgeDataPermissionIndicator),
               MAX(res.WritePermissionIndicator),
               MAX(res.DeletePermissionIndicator)
        FROM @Results res
            INNER JOIN dbo.tlbMonitoringSession ms
                ON ms.idfMonitoringSession = res.ID
            INNER JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                ON msd.idfMonitoringSession = ms.idfMonitoringSession
                   AND msd.intRowStatus = 0
            LEFT JOIN dbo.tlbCampaign c
                ON c.idfCampaign = ms.idfCampaign
                   AND c.intRowStatus = 0
            LEFT JOIN dbo.gisLocation g
                ON g.idfsLocation = ms.idfsLocation
            INNER JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                ON lh.idfsLocation = ms.idfsLocation
        WHERE res.ReadPermissionIndicator IN ( 1, 3, 5 )
              AND ms.SessionCategoryID = 10502001 -- Human Active Surveillance Session
              AND (
                      ms.idfCampaign = @CampaignKey
                      OR @CampaignKey IS NULL
                  )
              AND (
                      ms.idfsMonitoringSessionStatus = @SessionStatusTypeID
                      OR @SessionStatusTypeID IS NULL
                  )
              AND (
                      msd.idfsDiagnosis = @DiseaseID
                      OR @DiseaseID IS NULL
                  )
              AND (
                      g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                      OR @AdministrativeLevelID IS NULL
                  )
              AND (
                      (ms.datEnteredDate
              BETWEEN @DateEnteredFrom AND DATEADD(DAY, 1, @DateEnteredTo)
                      )
                      OR (
                             @DateEnteredFrom IS NULL
                             AND @DateEnteredTo IS NULL
                         )
                  )
              AND (
                      ms.strMonitoringSessionID LIKE '%' + TRIM(@SessionID) + '%'
                      OR @SessionID IS NULL
                  )
              AND (
                      c.strCampaignID LIKE '%' + TRIM(@CampaignID) + '%'
                      OR @CampaignID IS NULL
                  )
              AND (
                      LegacySessionID LIKE '%' + TRIM(@LegacySessionID) + '%'
                      OR @LegacySessionID IS NULL
                  )
        GROUP BY ID;

        WITH paging
        AS (SELECT ID,
                   c = COUNT(*) OVER ()
            FROM @FinalResults res
                INNER JOIN dbo.tlbMonitoringSession ms
                    ON ms.idfMonitoringSession = res.ID
                INNER JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                    ON lh.idfsLocation = ms.idfsLocation
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000117) sessionStatus
                    ON sessionStatus.idfsReference = ms.idfsMonitoringSessionStatus
            ORDER BY CASE
                         WHEN @SortColumn = 'SessionID'
                              AND @SortOrder = 'ASC' THEN
                             ms.strMonitoringSessionID
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'SessionID'
                              AND @SortOrder = 'DESC' THEN
                             ms.strMonitoringSessionID
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'SessionStatusTypeName'
                              AND @SortOrder = 'ASC' THEN
                             sessionStatus.name
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'SessionStatusTypeName'
                              AND @SortOrder = 'DESC' THEN
                             sessionStatus.name
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'EnteredDate'
                              AND @SortOrder = 'ASC' THEN
                             ms.datEnteredDate
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'EnteredDate'
                              AND @SortOrder = 'DESC' THEN
                             ms.datEnteredDate
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'AdministrativeLevel1Name'
                              AND @SortOrder = 'ASC' THEN
                             lh.AdminLevel1Name
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'AdministrativeLevel1Name'
                              AND @SortOrder = 'DESC' THEN
                             lh.AdminLevel1Name
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'AdministrativeLevel2Name'
                              AND @SortOrder = 'ASC' THEN
                             lh.AdminLevel2Name
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'AdministrativeLevel2Name'
                              AND @SortOrder = 'DESC' THEN
                             lh.AdminLevel2Name
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'AdministrativeLevel3Name'
                              AND @SortOrder = 'ASC' THEN
                             lh.AdminLevel2Name
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'AdministrativeLevel3Name'
                              AND @SortOrder = 'DESC' THEN
                             lh.AdminLevel2Name
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'AdministrativeLevel4Name'
                              AND @SortOrder = 'ASC' THEN
                             lh.AdminLevel2Name
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'AdministrativeLevel4Name'
                              AND @SortOrder = 'DESC' THEN
                             lh.AdminLevel2Name
                     END DESC OFFSET @PageSize * (@PageNumber - 1) ROWS FETCH NEXT @PageSize ROWS ONLY
           )
        SELECT res.ID AS SessionKey,
               ms.strMonitoringSessionID AS SessionID,
               ms.idfCampaign AS CampaignKey,
               c.strCampaignID AS CampaignID,
               sessionStatus.name AS SessionStatusTypeName,
               ms.datStartDate AS StartDate,
               ms.datEndDate AS EndDate,
               diseaseIDs.diseaseIDs AS DiseaseIdentifiers,
               diseaseNames.diseaseNames AS DiseaseNames,
               lh.AdminLevel1Name AS AdministrativeLevel1Name,
               lh.AdminLevel2Name AS AdministrativeLevel2Name,
               lh.AdminLevel3Name AS AdministrativeLevel3Name,
               lh.AdminLevel4Name AS AdministrativeLevel4Name,
               ms.datEnteredDate AS EnteredDate,
               ISNULL(p.strFirstName, '') + ' ' + ISNULL(p.strFamilyName, '') AS EnteredByPersonName,
               ms.idfsSite AS SiteKey,
               siteName.strSiteName AS SiteName,
               CASE
                   WHEN res.ReadPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.ReadPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.ReadPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.ReadPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.ReadPermissionIndicator)
               END AS ReadPermissionindicator,
               CASE
                   WHEN res.AccessToPersonalDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.AccessToPersonalDataPermissionIndicator)
               END AS AccessToPersonalDataPermissionIndicator,
               CASE
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.AccessToGenderAndAgeDataPermissionIndicator)
               END AS AccessToGenderAndAgeDataPermissionIndicator,
               CASE
                   WHEN res.WritePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.WritePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.WritePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.WritePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.WritePermissionIndicator)
               END AS WritePermissionIndicator,
               CASE
                   WHEN res.DeletePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.DeletePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.DeletePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.DeletePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.DeletePermissionIndicator)
               END AS DeletePermissionIndicator,
               c AS RecordCount,
               (
                   SELECT COUNT(*)
                   FROM dbo.tlbMonitoringSession
                   WHERE intRowStatus = 0
                         AND SessionCategoryID = 10502001 -- Human Active Surveillance Session
               ) AS TotalCount,
               CurrentPage = @PageNumber,
               TotalPages = (c / @PageSize) + IIF(c % @PageSize > 0, 1, 0)
        FROM @FinalResults res
            INNER JOIN paging
                ON paging.ID = res.ID
            INNER JOIN dbo.tlbMonitoringSession ms
                ON ms.idfMonitoringSession = paging.ID
            CROSS APPLY
        (
            SELECT dbo.FN_GBL_SESSION_DISEASEIDS_GET(ms.idfMonitoringSession) diseaseIDs
        ) diseaseIDs
            CROSS APPLY
        (
            SELECT dbo.FN_GBL_SESSION_DISEASE_NAMES_GET(ms.idfMonitoringSession, @LanguageID) diseaseNames
        ) diseaseNames
            INNER JOIN dbo.tstSite siteName
                ON siteName.idfsSite = ms.idfsSite
            LEFT JOIN dbo.tlbCampaign c
                ON c.idfCampaign = ms.idfCampaign
                   AND c.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000117) sessionStatus
                ON sessionStatus.idfsReference = ms.idfsMonitoringSessionStatus
            INNER JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                ON lh.idfsLocation = ms.idfsLocation
            LEFT JOIN dbo.tlbPerson p
                ON p.idfPerson = ms.idfPersonEnteredBy;
    END TRY
    BEGIN CATCH

    END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USP_HUM_DISEASE_GETDetail]...';


GO
--*************************************************************
-- Name 				: USP_HUM_DISEASE_GETDetail
-- Description			: List Human Disease Report
--          
-- Author               : Mandar Kulkarni
-- Revision History
-- Name	Date		Change Detail
-- JWJ	20180418	Added cols for hum disease summary section of the hum disease page
-- HAP  20180801    Added columns DiseaseReportTypeID and strMonitoringSessionID to be returned
-- HAP  20181102    Added column LegacyCaseID to be returned 
-- HAP  20181130    Added columns blnClinicalDiagBasis, blnLabDiagBasis, blnEpiDiagBasis, DateofClassification, idfsYNExposureLocationKnown to be returned
-- HAP  20181207    Added column tlbOutBreak.strOutbreakID to be returned
-- HAP  20181213    Removed VaccinationName and VaccinationDate columns to be returned
-- HAP  20190210    Added column idfCSObservation to be returned for Flex Form integration
-- HAP  20190409    Added columns parentHumanDiseaseReportID and relatedHumanDiseaseReportIdList to be returned for use case HUC11 Changed Diagnosis Human Disease Report​ 
-- HAP  20190614    Added columns for Point location values to be returned
-- HAP  20190629    Added column strPointForeignAddress to be returned
-- SLV	20190703	Removed redundant call to FN_GBL_ReferenceRepair
-- Ann Xiong	   09/12/2019 Added script to select PatientStatus, HospitalName, PreviouslySoughtCare, 
--                            YNSpecificVaccinationAdministered, YNSpecimenCollected, YNExposureLocationKnown, 
--                            ExposureLocationType, ExposureLocationDescription, Country, Settlement for Human Disease Report Deduplication.
-- Ann Xiong	   09/13/2019 Modified SP to replace InitialCaseClassification.idfsReferenceType = 19000111 with InitialCaseClassification.idfsReferenceType = 19000011,
-- 							  replace NonNotifiableDiagnosis.idfsReferenceType = 19000019 with NonNotifiableDiagnosis.idfsReferenceType = 19000149
-- Ann Xiong	   09/16/2019 Modified SP to replace SoughtCareFacility.name as strSoughtCareFacility with tlbHumanCase.strSoughtCareFacility
-- 							  replace HospitalizationStatus.idfsReferenceType = 19000100 with HospitalizationStatus.idfsReferenceType = 19000041
-- Stephen Long    10/02/2019 Changed select person calls over to left joins to person.  POCO was not generating with the function call.
-- Ann Xiong	   03/13/2020 Uncommented 10 fields of Human Disease Report Deduplication were commented out
-- LM				06/07/2020 Updated Selecting Connected Disease Reports
-- LM				11/02/2020 Added strNotCollectedReason To Ouput
-- Mark Wilson		12/22/2020 Changed Institution join to E7 SP
-- Mike Kornegay	09/23/2021 Removed duplicate fields from select.
-- Mark Wilson		09/23/2021 Fixed Locations and offices
-- Mark Wilson		10/01/2021 updated join to gisLocation
-- Minal Shah	    10/22/2021 Added strGroundType, dblPointAccuracy and dblPointAlignment
-- Minal Shah		11/03/2021 Added blnInitialSSD and blnFinalSSD columns
-- Minal Shah		01/25/2021 Replaced long name to org abbrev
-- Stephen Long     01/16/2023 Fixes to use translated values on reference types.
--
-- Testing code:
-- 
/* 
EXEC USP_HUM_DISEASE_GETDetail 'en-US', 71413

*/
--*************************************************************
ALTER PROCEDURE [dbo].[USP_HUM_DISEASE_GETDetail]
(
    @LangID NVARCHAR(50),
    @SearchHumanCaseId BIGINT = NULL
)
AS
BEGIN
    BEGIN TRY
        SET NOCOUNT ON;

        DECLARE @ReturnMessage VARCHAR(MAX) = 'Success';
        DECLARE @ReturnCode BIGINT = 0;
        --Declare @ConnectedReports Varchar(Max);
        --		Select @ConnectedReports = ( SELECT ',' + CAST(RelatedToHumanDiseaseReportIdRoot AS VARCHAR)  + '-' +  (Select strCaseId from tlbhumancase where idfHumancase =  RelatedToHumanDiseaseReportIdRoot)
        --		From  dbo.HumanDiseaseReportRelationship where RelatedToHumanDiseaseReportIdRoot =  @SearchHumanCaseId)
        DECLARE @parentHumanCaseId int
        DECLARE @ParentCaseId int
        DECLARE @ChildCaseId int
        SET @ParentCaseId =
        (
            SELECT TOP 1
                RelatedToHumanDiseaseReportIdRoot
            FROM dbo.HumanDiseaseReportRelationship
            WHERE (HumanDiseaseReportID = @SearchHumanCaseId)
        )
        SET @ChildCaseId =
        (
            SELECT TOP 1
                HumanDiseaseReportID
            FROM dbo.HumanDiseaseReportRelationship
            WHERE (RelatedToHumanDiseaseReportIdRoot = @SearchHumanCaseId)
        )
        SELECT hc.idfHumanCase,
               NULL AS parentHumanDiseaseReportID,     --HumanDiseaseReportRelationship.RelateToHumanDiseaseReportID as parentHumanDiseaseReportID,  
               (
                   SELECT DISTINCT
                       STUFF(
                       (
                           SELECT ',' + CAST(t2.RelatedToHumanDiseaseReportIdRoot AS VARCHAR) + '-' +
                                  (
                                      SELECT strCaseId
                                      FROM dbo.tlbhumancase
                                      WHERE idfHumancase = t2.RelatedToHumanDiseaseReportIdRoot
                                  )
                           FROM dbo.HumanDiseaseReportRelationship t2
                           WHERE t2.RelatedToHumanDiseaseReportIdRoot = @ParentCaseId -- (Select top 1 RelatedToHumanDiseaseReportIdRoot  from HumanDiseaseReportRelationship where (HumanDiseaseReportID = @SearchHumanCaseId) )
                                 --AND ((t2.RelateToHumanDiseaseReportID = hc.idfHumanCase) or (t2.HumanDiseaseReportID = hc.idfHumanCase)))
                                 AND t2.intRowStatus = 0
                           FOR XML PATH('')
                       ),
                       1,
                       1,
                       ''
                            )
                   FROM dbo.HumanDiseaseReportRelationship t1
               --NULL
               ) AS relatedParentHumanDiseaseReportIdList,
               (
                   SELECT DISTINCT
                       STUFF(
                       (
                           SELECT ',' + CAST(t2.HumanDiseaseReportID AS VARCHAR) + '-' +
                                  (
                                      SELECT strCaseId
                                      FROM dbo.tlbhumancase
                                      WHERE idfHumancase = t2.HumanDiseaseReportID
                                  )
                           FROM dbo.HumanDiseaseReportRelationship t2
                           WHERE t2.HumanDiseaseReportID = @ChildCaseId -- (Select top 1 RelatedToHumanDiseaseReportIdRoot  from HumanDiseaseReportRelationship where (HumanDiseaseReportID = @SearchHumanCaseId) )
                                 --AND ((t2.RelateToHumanDiseaseReportID = hc.idfHumanCase) or (t2.HumanDiseaseReportID = hc.idfHumanCase)))
                                 AND t2.intRowStatus = 0
                           FOR XML PATH('')
                       ),
                       1,
                       1,
                       ''
                            )
                   FROM dbo.HumanDiseaseReportRelationship t1
               --NULL
               ) AS relatedChildHumanDiseaseReportIdList,
               hc.idfHuman,
               hc.idfsHospitalizationStatus,
               hc.idfsYNSpecimenCollected,
               hc.idfsHumanAgeType,
               hc.idfsYNAntimicrobialTherapy,
               hc.idfsYNHospitalization,
               hc.idfsYNRelatedToOutbreak,
               hc.idfsOutCome,
               hc.idfsInitialCaseStatus,
               hc.idfsFinalDiagnosis,
               FinalDiagnosis.name AS strFinalDiagnosis,
               hc.idfsFinalCaseStatus,
               FinalCaseClassification.name AS strFinalCaseStatus,
               hc.idfSentByOffice,
               hc.idfInvestigatedByOffice,
               hc.idfReceivedByOffice,
               hc.idfEpiObservation,
               hc.idfCSObservation,
               hc.datNotificationDate,
               hc.datCompletionPaperFormDate,
               hc.datFirstSoughtCareDate,
               hc.datHospitalizationDate,
               hc.datFacilityLastVisit,
               hc.datExposureDate,
               hc.datDischargeDate,
               hc.datOnSetDate,
               hc.datInvestigationStartDate AS StartDateofInvestigation,
               CASE
                   WHEN EXISTS
                        (
                            SELECT 1
                            FROM dbo.tlbHumanCase hci
                            WHERE hci.LegacyCaseID = hc.LegacyCaseID
                                  AND hci.idfHumanCase <> hc.idfHumanCase
                        ) THEN
                       CASE
                           WHEN hc.idfsFinalCaseStatus = 370000000 THEN
                               hc.datTentativeDiagnosisDate
                           ELSE
                               hc.datModificationDate
                       END
                   ELSE
                       hc.datFinalDiagnosisDate
               END datDateOfDiagnosis,
               hc.datFinalDiagnosisDate,
               hc.strNote,
               hc.strCurrentLocation,
               hc.strHospitalizationPlace,
               hc.strLocalIdentifier,
               SoughtByOfficeRef.name AS strSoughtCareFacility,
               hc.strSentByFirstName,
               hc.strSentByPatronymicName,
               hc.strSentByLastName,
               hc.strReceivedByFirstName,
               hc.strReceivedByPatronymicName,
               hc.strReceivedByLastName,
               hc.strEpidemiologistsName,
               hc.strClinicalDiagnosis,
               hc.strClinicalNotes,
               hc.strSummaryNotes,
               hc.intPatientAge,
               hc.blnClinicalDiagBasis,
               hc.blnLabDiagBasis,
               hc.blnEpiDiagBasis,
               hc.idfPersonEnteredBy,
               hc.idfPointGeoLocation,
               gl.idfsGroundType AS idfsPointGroundType,
               gl.idfsGeoLocationType AS idfsPointGeoLocationType,
               gl.idfsCountry AS idfsPointCountry,
               gl.idfsRegion AS idfsPointRegion,
               gl.idfsRayon AS idfsPointRayon,
               gl.idfsSettlement AS idfsPointSettlement,
               gl.dblDistance AS dblPointDistance,
               gl.dblLatitude AS dblPointLatitude,
               gl.dblLongitude AS dblPointLongitude,
               gl.dblElevation AS dblPointElevation,
               gl.dblAlignment AS dblPointAlignment,
               gl.dblAccuracy AS dblPointAccuracy,
               gl.strForeignAddress AS strPointForeignAddress,
               hc.idfSentByPerson,
               hc.idfReceivedByPerson,
               hc.idfInvestigatedByPerson,
               hc.idfsYNTestsConducted,
               hc.idfSoughtCareFacility,
               hc.idfsNonNotifiableDiagnosis,
               NonNotifiableDiagnosisRef.name AS stridfsNonNotifiableDiagnosis,
               hc.idfOutbreak,
               hc.strCaseId,
               hc.idfsCaseProgressStatus,
               hc.idfsSite,
               hc.strSampleNotes,
               hc.uidOfflineCaseID,
               hc.datFinalCaseClassificationDate,
               hc.idfHospital,
               hc.idfsYNSpecificVaccinationAdministered,
               hc.idfsNotCollectedReason,
               hc.strNotCollectedReason,
               hc.idfsYNPreviouslySoughtCare,
               hc.idfsYNExposureLocationKnown,
               hc.datEnteredDate,
               hc.datModificationDate,
               hc.idfsFinalDiagnosis AS idfsDiagnosis, --possible duplicate
               hc.idfsFinalState,
               hc.DiseaseReportTypeID,
               ReportTypeRef.name AS 'ReportType',
               hc.LegacyCaseID,
               hc.datFinalCaseClassificationDate AS DateofClassification,
               o.strOutbreakID,
               o.strDescription,
               h.strPersonId,
               h.datDateOfDeath,
               RegionRef.[name] AS Region,
               RayonRef.[name] AS Rayon,
               HumanAgeRef.[name] AS HumanAgeType,
               OutcomeRef.[name] AS Outcome,
               NonNotifiableDiagnosisRef.[name] AS NonNotifiableDiagnosis,
               NotCollectedReasonRef.[name] AS NotCollectedReason,
               CaseProgressStatusRef.[name] AS CaseProgressStatus,
               SpecificVaccinationAdministered.[name] AS YNSpecificVaccinationAdministered,
               PreviouslySoughtCareRef.[name] AS PreviouslySoughtCare,
               ExposureLocationKnown.[name] AS YNExposureLocationKnown,
               HospitalizationStatusRef.[name] AS HospitalizationStatus,
               Hospitalization.[name] AS YNHospitalization,
               AntimicrobialTherapy.[name] AS YNAntimicrobialTherapy,
               SpecimenCollection.[name] AS YNSpecimenCollected,
               RelatedToOutBreak.[name] AS YNRelatedToOutBreak,
               tentativeDiagnosisRef.[name] AS TentativeDiagnosis,
               FinalDiagnosis.[name] AS SummaryIdfsFinalDiagnosis,
               InitialCaseClassification.[name] AS InitialCaseStatus,
               FinalCaseClassification.[name] AS FinalCaseStatus,
               SentByOfficeRef.LongName AS SentByOffice,
               ReceivedByOfficeRef.LongName AS ReceivedByOffice,
               HospitalRef.LongName AS HospitalName,
               InvestigateByOfficeRef.LongName AS InvestigatedByOffice,
               TestConducted.[name] AS YNTestConducted,
               MonitoringSession.strMonitoringSessionID,
               ExposureLocationTypeRef.[name] AS ExposureLocationType,
               groundTypeRef.[name] AS strGroundType,
               gl.strDescription AS ExposureLocationDescription,
               ISNULL(FinalCaseClassification.[name], InitialCaseClassification.[name]) AS SummaryCaseClassification,
               ISNULL(sentByPersonRef.strFamilyName, N'') + ISNULL(' ' + sentByPersonRef.strFirstName, '')
               + ISNULL(' ' + sentByPersonRef.strSecondName, '') AS SentByPerson,
               ISNULL(receivedByPersonRef.strFamilyName, N'') + ISNULL(' ' + receivedByPersonRef.strFirstName, '')
               + ISNULL(' ' + receivedByPersonRef.strSecondName, '') AS ReceivedByPerson,
               ISNULL(investigatedByPersonRef.strFamilyName, N'')
               + ISNULL(' ' + investigatedByPersonRef.strFirstName, '')
               + ISNULL(' ' + investigatedByPersonRef.strSecondName, '') AS InvestigatedByPerson,
               dbo.fnConcatFullName(
                                       personEnteredByRef.strFamilyName,
                                       personEnteredByRef.strFirstName,
                                       personEnteredByRef.strSecondName
                                   ) AS EnteredByPerson,
               tlbEnteredByOffice.name AS strOfficeEnteredBy,
               tlbEnteredByOffice.idfOffice AS idfOfficeEnteredBy,
               SentByOfficeRef.name AS strNotificationSentby,
               '' AS strNotificationReceivedby,
               PatientState.[name] AS PatientStatus,
               CountryRef.[name] AS Country,
               SettlementRef.[name] AS Settlement,
               ISNULL(ha.strFirstName, '') + ' ' + ISNULL(ha.strLastName, '') AS PatientFarmOwnerName,
               addinfo.EIDSSPersonID AS EIDSSPersonID,
               ha.idfHumanActual AS HumanActualId,
               initialSyndromicSurveielanceDiseases.blnSyndrome AS blnInitialSSD,
               finalSyndromicSurveielanceDiseases.blnSyndrome AS blnFinalSSD,
               relatedTo.RelateToHumanDiseaseReportID AS RelateToHumanDiseaseReportID,
               relatedToReport.strCaseID AS RelatedToHumanDiseaseEIDSSReportID,
               connectedTo.HumanDiseaseReportID AS ConnectedDiseaseReportID,
               connectedToReport.strCaseID AS ConnectedDiseaseEIDSSReportID
        FROM dbo.tlbHumanCase hc WITH (NOLOCK)
            LEFT JOIN dbo.tlbOutbreak AS o
                ON o.idfOutbreak = hc.idfOutbreak
            LEFT JOIN dbo.tlbHuman AS h
                ON h.idfHuman = hc.idfHuman
            LEFT JOIN dbo.tlbHumanActual AS ha
                ON ha.idfHumanActual = h.idfHumanActual
                   AND h.intRowStatus = 0
            LEFT JOIN dbo.HumanActualAddlInfo AS addinfo
                ON addinfo.HumanActualAddlInfoUID = h.idfHumanActual
                   AND addinfo.intRowStatus = 0
            LEFT JOIN dbo.tlbGeoLocation AS gl
                ON gl.idfGeoLocation = hc.idfPointGeoLocation
                   AND gl.intRowStatus = 0
            LEFT JOIN dbo.tlbPerson AS sentByPersonRef
                ON sentByPersonRef.idfPerson = hc.idfSentByPerson
                   AND sentByPersonRef.intRowStatus = 0
            LEFT JOIN dbo.tlbPerson AS receivedByPersonRef
                ON receivedByPersonRef.idfPerson = hc.idfReceivedByPerson
                   AND receivedByPersonRef.intRowStatus = 0
            LEFT JOIN dbo.tlbPerson AS investigatedByPersonRef
                ON investigatedByPersonRef.idfPerson = hc.idfInvestigatedByPerson
                   AND investigatedByPersonRef.intRowStatus = 0
            LEFT JOIN dbo.tlbPerson AS personEnteredByRef
                ON personEnteredByRef.idfPerson = hc.idfPersonEnteredBy
                   AND personEnteredByRef.intRowStatus = 0
            LEFT JOIN dbo.gisLocation L
                ON L.idfsLocation = gl.idfsLocation
            LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000001) AS CountryRef
                ON L.node.IsDescendantOf(CountryRef.node) = 1
            LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000003) AS RegionRef
                ON L.node.IsDescendantOf(RegionRef.node) = 1
            LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000002) AS RayonRef
                ON L.node.IsDescendantOf(RayonRef.node) = 1
            LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000004) AS SettlementRef
                ON L.node.IsDescendantOf(SettlementRef.node) = 1
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000042) AS HumanAgeRef
                ON HumanAgeRef.idfsReference = hc.idfsHumanAgeType
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000064) AS OutcomeRef
                ON OutcomeRef.idfsReference = hc.idfsOutcome
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000019) AS FinalDiagnosis
                ON FinalDiagnosis.idfsReference = hc.idfsFinalDiagnosis
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000011) AS InitialCaseClassification
                ON InitialCaseClassification.idfsReference = hc.idfsInitialCaseStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000011) AS FinalCaseClassification
                ON FinalCaseClassification.idfsReference = hc.idfsFinalCaseStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000149) AS NonNotifiableDiagnosisRef
                ON NonNotifiableDiagnosisRef.idfsReference = hc.idfsNonNotifiableDiagnosis
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000144) AS ReportTypeRef
                ON ReportTypeRef.idfsReference = hc.DiseaseReportTypeID
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000019) AS NotCollectedReasonRef
                ON NotCollectedReasonRef.idfsReference = hc.idfsNotCollectedReason
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000111) CaseProgressStatusRef
                ON CaseProgressStatusRef.idfsReference = hc.idfsCaseProgressStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000100) AS SpecificVaccinationAdministered
                ON SpecificVaccinationAdministered.idfsReference = hc.idfsYNSpecificVaccinationAdministered
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000100) AS PreviouslySoughtCareRef
                ON PreviouslySoughtCareRef.idfsReference = hc.idfsYNPreviouslySoughtCare
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000100) AS ExposureLocationKnown
                ON ExposureLocationKnown.idfsReference = hc.idfsYNExposureLocationKnown
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000041) AS HospitalizationStatusRef
                ON HospitalizationStatusRef.idfsReference = hc.idfsHospitalizationStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000100) AS Hospitalization
                ON Hospitalization.idfsReference = hc.idfsYNHospitalization
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000100) AS AntimicrobialTherapy
                ON AntimicrobialTherapy.idfsReference = hc.idfsYNAntimicrobialTherapy
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000100) AS SpecimenCollection
                ON SpecimenCollection.idfsReference = hc.idfsYNSpecimenCollected
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000100) AS RelatedToOutBreak
                ON RelatedToOutBreak.idfsReference = hc.idfsYNRelatedToOutbreak
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000036) AS ExposureLocationTypeRef
                ON ExposureLocationTypeRef.idfsReference = gl.idfsGeoLocationType
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000019) AS tentativeDiagnosisRef
                ON tentativeDiagnosisRef.idfsReference = hc.idfsTentativeDiagnosis
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000038) AS groundTypeRef
                ON groundTypeRef.idfsReference = gl.idfsGroundType
            LEFT JOIN dbo.tlbOffice RBO
                ON RBO.idfOffice = hc.idfReceivedByOffice
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000045) ReceivedByOfficeRef
                ON ReceivedByOfficeRef.idfsReference = RBO.idfsOfficeAbbreviation
            LEFT JOIN dbo.tlbOffice IBO
                ON IBO.idfOffice = hc.idfInvestigatedByOffice
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000045) InvestigateByOfficeRef
                ON InvestigateByOfficeRef.idfsReference = IBO.idfsOfficeAbbreviation
            LEFT JOIN dbo.tlbOffice SBO
                ON SBO.idfOffice = hc.idfSentByOffice
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000045) SentByOfficeRef
                ON SentByOfficeRef.idfsReference = SBO.idfsOfficeAbbreviation
            LEFT JOIN dbo.tlbOffice SoughtByOffice
                ON SBO.idfOffice = hc.idfSoughtCareFacility
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000045) SoughtByOfficeRef
                ON SoughtByOfficeRef.idfsReference = SoughtByOffice.idfsOfficeAbbreviation
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000100) AS TestConducted
                ON TestConducted.idfsReference = hc.idfsYNTestsConducted
            LEFT JOIN dbo.tlbMonitoringSession AS MonitoringSession
                ON MonitoringSession.idfMonitoringSession = hc.idfParentMonitoringSession
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000035) AS PatientState
                ON PatientState.idfsReference = hc.idfsFinalState
            LEFT JOIN dbo.tlbOffice Hospital
                ON Hospital.idfOffice = hc.idfHospital
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000045) HospitalRef
                ON HospitalRef.idfsReference = Hospital.idfsOfficeAbbreviation
            LEFT JOIN dbo.tstSite S
                ON S.idfsSite = hc.idfsSite
            LEFT JOIN dbo.FN_HUM_Institution_GET(@LangID) AS tlbEnteredByOffice
                ON tlbEnteredByOffice.idfOffice = S.idfOffice
                   AND tlbEnteredByOffice.idfsSite = hc.idfsSite
            LEFT JOIN dbo.trtDiagnosis AS finalSyndromicSurveielanceDiseases
                ON finalSyndromicSurveielanceDiseases.idfsDiagnosis = hc.idfsFinalDiagnosis
            LEFT JOIN dbo.trtDiagnosis AS initialSyndromicSurveielanceDiseases
                ON initialSyndromicSurveielanceDiseases.idfsDiagnosis = hc.idfsTentativeDiagnosis
            LEFT JOIN dbo.HumanDiseaseReportRelationship relatedTo
                ON relatedTo.HumanDiseaseReportID = hc.idfHumanCase
                   AND relatedTo.intRowStatus = 0
                   AND relatedTo.RelationshipTypeID = 10503001
            LEFT JOIN dbo.tlbHumanCase relatedToReport
                ON relatedToReport.idfHumanCase = relatedTo.RelateToHumanDiseaseReportID
                   AND relatedToReport.intRowStatus = 0
            LEFT JOIN dbo.HumanDiseaseReportRelationship connectedTo
                ON connectedTo.RelateToHumanDiseaseReportID = hc.idfHumanCase
                   AND connectedTo.intRowStatus = 0
                   AND connectedTo.RelationshipTypeID = 10503001
            LEFT JOIN dbo.tlbHumanCase connectedToReport
                ON connectedToReport.idfHumanCase = connectedTo.HumanDiseaseReportID
                   AND connectedToReport.intRowStatus = 0
        WHERE hc.idfHumanCase = @SearchHumanCaseId
              OR @SearchHumanCaseId IS NULL;
    END TRY
    BEGIN CATCH
        SET @ReturnCode = ERROR_NUMBER();
        SET @ReturnMessage = ERROR_MESSAGE();

        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_HUM_DISEASE_REPORT_GETList]...';


GO
-- ================================================================================================
-- Name: USP_HUM_DISEASE_REPORT_GETList
--
-- Description: Get a list of human disease reports for the human module.
--          
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Mandar Kulkarni             Initial release.
-- Stephen Long     03/26/2018 Added the person reported by name for the farm use case.
-- JWJ	            04/17/2018 Added extra col to return:  tlbHuman.idfHumanActual. Added alias 
--                             for region rayon to make them unique in results added report status 
--                             to results 
-- Harold Pryor     10/22/2018 Added input search parameters SearchStrPersonFirstName, 
--                             SearchStrPersonMiddleName, and SearchStrPersonLastName
-- Harold Pryor     10/31/2018 Added input search parameters SearchLegacyCaseID and	
--                             added strLocation (region, rayon) field to list result set
-- Harold Pryor     11/12/2018 Changed @SearchLegacyCaseID parameter from BIGINT to NVARCHAR(200)
-- Stephen Long     12/19/2018 Added pagination logic.
-- Stephen Long     07/07/2019 Added monitoring session ID to parameters and where clause.
-- Stephen Long     07/10/2019 Changed address join from exposure location to patient's current 
--                             residence address.
-- Stephen Long     07/19/2019 Corrected patient name and person entered by name ', '.
-- Stephen Long     02/26/2020 Added non-configurable site filtration rules.
-- Lamont Mitchell  03/03/2020 Modified all joins on human case and human to join on human actual.
-- Stephen Long     04/01/2020 Added if/else for first-level and second-level site types to bypass 
--                             non-configurable rules.
-- Stephen Long     05/18/2020 Added disease filtration rules from use case SAUC62.
-- Stephen Long     06/18/2020 Corrected the join on the rayon of the report current residence 
--                             address (human ID to human ID instead of human ID to human actual 
--                             ID).
-- Stephen Long     06/18/2020 Added where criteria to the query when no site filtration is 
--                             required.
-- Stephen Long     07/07/2020 Added trim to EIDSS identifier like criteria.
-- Doug Albanese	11/16/2020 Added Outbreak Tied filtering
-- Stephen Long     11/18/2020 Added site ID to the query.
-- Stephen Long     11/28/2020 Added configurable site filtration rules.
-- Stephen Long     12/13/2020 Added apply configurable filtration indicator parameter.
-- Stephen Long     12/24/2020 Modified join on disease filtration default role rule.
-- Stephen Long     12/29/2020 Changed function call on reference data for inactive records.
-- Stephen Long     01/04/2020 Added option recompile due to number of optional parameters for 
--                             better execution plan.
-- Stephen Long     04/04/2021 Added updated pagination and location hierarchy.
-- Mike Kornegay	09/23/2021 Added HospitalizationStatus field
-- Stephen Long     11/03/2021 Added disease ID field.
-- Mike Kornegay	11/16/2021 Fix hospitalization field for translations
-- Mike Kornegay	12/07/2021 Added back EnteredByPersonName 
-- Mike Kornegay	12/08/2021 Swapped out FN_GBL_GIS_ReferenceRepair for new flat hierarchy
-- Mike Kornegay	12/23/2021 Fixed YN hospitalization where clause
-- Manickandan Govindarajan 03/21/2022  Rename Param PageNumber to Page
-- Stephen Long     03/29/2022 Fix to site filtration to pull back a user's own site records.
-- Stephen Long     06/03/2022 Updated to point default access rules to base reference.
-- Mike Kornegay    06/06/2022 Added parameter OutcomeID.
-- Mike Kornegay	06/13/2022 Changed inner joins to left joins in final query because result set 
--                             was incorrect.
-- Stephen Long     08/14/2022 Added additional criteria for outbreak cases for laboratory module.
--                             TODO: replace filter outbreak cases parameter, and just filter in 
--                             the initial query to avoid getting extra unneeded records; also just 
--                             make it a boolean value.
-- Mark Wilson      09/01/2022 update to use denormalized locations to work with site filtration.
-- Stephen Long     09/22/2022 Add check for "0" page size.  If "0", then set to 1.
-- Mike Kornegay	10/11/2022 Move order by back to CTE row partition for performance and add 
--                             LanguageID to default filtration rule joins.
-- Stephen Long     11/02/2022 Fixes for 4599 - site filtration returning the wrong results.
-- Stephen Long     11/09/2022 Fix on where criteria when filtration is run; added groupings for 
--                             the user entered parameters from the search criteria page.
-- Ann Xiong		11/29/2022 Updated to return records correctly when filter by only 
--                             DateEnteredFrom or DateEnteredTo.
-- Ann Xiong		11/30/2022 Updated to return records including DateEnteredTo.
-- Stephen Long     01/09/2023 Updated for site filtration queries.
--
-- Testing code:
-- EXEC USP_HUM_DISEASE_REPORT_GETList 'en-US'
-- EXEC USP_HUM_DISEASE_REPORT_GETList 'en-US', @EIDSSReportID = 'H'
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_HUM_DISEASE_REPORT_GETList]
    @LanguageID NVARCHAR(50),
    @ReportKey BIGINT = NULL,
    @ReportID NVARCHAR(200) = NULL,
    @LegacyReportID NVARCHAR(200) = NULL,
    @SessionKey BIGINT = NULL,
    @PatientID BIGINT = NULL,
    @PersonID NVARCHAR(200) = NULL,
    @DiseaseID BIGINT = NULL,
    @ReportStatusTypeID BIGINT = NULL,
    @AdministrativeLevelID BIGINT = NULL,
    @DateEnteredFrom DATETIME = NULL,
    @DateEnteredTo DATETIME = NULL,
    @ClassificationTypeID BIGINT = NULL,
    @HospitalizationYNID BIGINT = NULL,
    @PatientFirstName NVARCHAR(200) = NULL,
    @PatientMiddleName NVARCHAR(200) = NULL,
    @PatientLastName NVARCHAR(200) = NULL,
    @SentByFacilityID BIGINT = NULL,
    @ReceivedByFacilityID BIGINT = NULL,
    @DiagnosisDateFrom DATETIME = NULL,
    @DiagnosisDateTo DATETIME = NULL,
    @LocalOrFieldSampleID NVARCHAR(200) = NULL,
    @DataEntrySiteID BIGINT = NULL,
    @DateOfSymptomsOnsetFrom DATETIME = NULL,
    @DateOfSymptomsOnsetTo DATETIME = NULL,
    @NotificationDateFrom DATETIME = NULL,
    @NotificationDateTo DATETIME = NULL,
    @DateOfFinalCaseClassificationFrom DATETIME = NULL,
    @DateOfFinalCaseClassificationTo DATETIME = NULL,
    @LocationOfExposureAdministrativeLevelID BIGINT = NULL,
    @OutcomeID BIGINT = NULL,
    @FilterOutbreakTiedReports INT = 0,
    @OutbreakCasesIndicator BIT = 0,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT,
    @UserEmployeeID BIGINT,
    @ApplySiteFiltrationIndicator BIT = 0,
    @SortColumn NVARCHAR(30) = 'ReportID',
    @SortOrder NVARCHAR(4) = 'DESC',
    @Page INT = 1,
    @PageSize INT = 10
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @firstRec INT,
            @lastRec INT,
            @FiltrationSiteAdministrativeLevelID AS BIGINT,
            @LanguageCode AS BIGINT = dbo.FN_GBL_LanguageCode_GET(@LanguageID);
    SET @firstRec = (@Page - 1) * @PageSize
    SET @lastRec = (@Page * @PageSize + 1);

    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL, INDEX IDX_ID (ID
                                                             ));
    DECLARE @FinalResults TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );

    BEGIN TRY
        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        IF @PageSize = 0
        BEGIN
            SET @PageSize = 1;
        END

        -- ========================================================================================
        -- NO CONFIGURABLE FILTRATION RULES APPLIED
        --
        -- For first and second level sites, do not apply any site filtration rules.
        -- ========================================================================================
        IF @ApplySiteFiltrationIndicator = 0
        BEGIN
            INSERT INTO @Results
            SELECT hc.idfHumanCase,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbHumanCase hc
                INNER JOIN dbo.tlbHuman h
                    ON h.idfHuman = hc.idfHuman
                       AND h.intRowStatus = 0
                INNER JOIN dbo.tlbGeoLocation currentAddress
                    ON currentAddress.idfGeoLocation = h.idfCurrentResidenceAddress
                LEFT JOIN dbo.gisLocationDenormalized g
                    ON g.idfsLocation = currentAddress.idfsLocation
                       AND g.idfsLanguage = @LanguageCode
                LEFT JOIN dbo.tlbMaterial m
                    ON m.idfHumanCase = hc.idfHumanCase
                       AND m.intRowStatus = 0
                LEFT JOIN dbo.tlbGeoLocation exposure
                    ON exposure.idfGeoLocation = hc.idfPointGeoLocation
                LEFT JOIN dbo.gisLocationDenormalized gExposure
                    ON gExposure.idfsLocation = exposure.idfsLocation
                       AND gExposure.idfsLanguage = @LanguageCode
            WHERE hc.intRowStatus = 0
                  AND hc.idfsFinalDiagnosis IS NOT NULL
                  AND (
                          hc.idfHumanCase = @ReportKey
                          OR @ReportKey IS NULL
                      )
                  AND (
                          hc.idfParentMonitoringSession = @SessionKey
                          OR @SessionKey IS NULL
                      )
                  AND (
                          h.idfHumanActual = @PatientID
                          OR @PatientID IS NULL
                      )
                  AND (
                          h.strPersonId = @PersonID
                          OR @PersonID IS NULL
                      )
                  AND (
                          idfsFinalDiagnosis = @DiseaseID
                          OR @DiseaseID IS NULL
                      )
                  AND (
                          idfsCaseProgressStatus = @ReportStatusTypeID
                          OR @ReportStatusTypeID IS NULL
                      )
                  AND (
                          g.Level1ID = @AdministrativeLevelID
                          OR g.Level2ID = @AdministrativeLevelID
                          OR g.Level3ID = @AdministrativeLevelID
                          OR g.Level4ID = @AdministrativeLevelID
                          OR g.Level5ID = @AdministrativeLevelID
                          OR g.Level6ID = @AdministrativeLevelID
                          OR g.Level7ID = @AdministrativeLevelID
                          OR @AdministrativeLevelID IS NULL
                      )
                  AND (
                          hc.datEnteredDate >= @DateEnteredFrom
                          OR @DateEnteredFrom IS NULL
                      )
                  AND (
                          (convert(date, hc.datEnteredDate, 102) <= @DateEnteredTo)
                          OR @DateEnteredTo IS NULL
                      )
                  AND (
                          (CAST(hc.datFinalDiagnosisDate AS DATE)
                  BETWEEN @DiagnosisDateFrom AND @DiagnosisDateTo
                          )
                          OR (
                                 @DiagnosisDateFrom IS NULL
                                 OR @DiagnosisDateTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datNotificationDate AS DATE)
                  BETWEEN @NotificationDateFrom AND @NotificationDateTo
                          )
                          OR (
                                 @NotificationDateFrom IS NULL
                                 OR @NotificationDateTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datOnSetDate AS DATE)
                  BETWEEN @DateOfSymptomsOnsetFrom AND @DateOfSymptomsOnsetTo
                          )
                          OR (
                                 @DateOfSymptomsOnsetFrom IS NULL
                                 OR @DateOfSymptomsOnsetTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datFinalCaseClassificationDate AS DATE)
                  BETWEEN @DateOfFinalCaseClassificationFrom AND @DateOfFinalCaseClassificationTo
                          )
                          OR (
                                 @DateOfFinalCaseClassificationFrom IS NULL
                                 OR @DateOfFinalCaseClassificationTo IS NULL
                             )
                      )
                  AND (
                          hc.idfReceivedByOffice = @ReceivedByFacilityID
                          OR @ReceivedByFacilityID IS NULL
                      )
                  AND (
                          hc.idfSentByOffice = @SentByFacilityID
                          OR @SentByFacilityID IS NULL
                      )
                  AND (
                          idfsFinalCaseStatus = @ClassificationTypeID
                          OR @ClassificationTypeID IS NULL
                      )
                  AND (
                          idfsYNHospitalization = @HospitalizationYNID
                          OR @HospitalizationYNID IS NULL
                      )
                  AND (
                          g.Level1ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level2ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level3ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level4ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level5ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level6ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level7ID = @LocationOfExposureAdministrativeLevelID
                          OR @LocationOfExposureAdministrativeLevelID IS NULL
                      )
                  AND (
                          (ISNULL(h.strFirstName, '') = CASE ISNULL(@PatientFirstName, '')
                                                            WHEN '' THEN
                                                                ISNULL(h.strFirstName, '')
                                                            ELSE
                                                                @PatientFirstName
                                                        END
                          )
                          OR (CHARINDEX(@PatientFirstName, ISNULL(h.strFirstName, '')) > 0)
                      )
                  AND (
                          (ISNULL(h.strSecondName, '') = CASE ISNULL(@PatientMiddleName, '')
                                                             WHEN '' THEN
                                                                 ISNULL(h.strSecondName, '')
                                                             ELSE
                                                                 @PatientMiddleName
                                                         END
                          )
                          OR (CHARINDEX(@PatientMiddleName, ISNULL(h.strSecondName, '')) > 0)
                      )
                  AND (
                          (ISNULL(h.strLastName, '') = CASE ISNULL(@PatientLastName, '')
                                                           WHEN '' THEN
                                                               ISNULL(h.strLastName, '')
                                                           ELSE
                                                               @PatientLastName
                                                       END
                          )
                          OR (CHARINDEX(@PatientLastName, ISNULL(h.strLastName, '')) > 0)
                      )
                  AND (
                          hc.idfsSite = @DataEntrySiteID
                          OR @DataEntrySiteID IS NULL
                      )
                  AND (
                          (
                              hc.idfOutbreak IS NULL
                              AND @OutbreakCasesIndicator = 0
                          )
                          OR (
                                 hc.idfOutbreak IS NOT NULL
                                 AND @OutbreakCasesIndicator = 1
                             )
                          OR (@OutbreakCasesIndicator IS NULL)
                      )
                  AND (
                          hc.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
                          OR @ReportID IS NULL
                      )
                  AND (
                          hc.LegacyCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
                          OR @LegacyReportID IS NULL
                      )
                  AND (
                          m.strFieldBarcode LIKE '%' + TRIM(@LocalOrFieldSampleID) + '%'
                          OR @LocalOrFieldSampleID IS NULL
                      )
                  AND (
                          hc.idfsOutcome = @OutcomeID
                          OR @OutcomeID IS NULL
                      )
            GROUP BY hc.idfHumanCase;
        END
        ELSE
        BEGIN -- Configurable Filtration Rules
            DECLARE @InitialFilteredResults TABLE
            (
                ID BIGINT NOT NULL,
                ReadPermissionIndicator INT NOT NULL,
                AccessToPersonalDataPermissionIndicator INT NOT NULL,
                AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
                WritePermissionIndicator INT NOT NULL,
                DeletePermissionIndicator INT NOT NULL, INDEX IDX_ID (ID
                                                                     ));

            INSERT INTO @InitialFilteredResults
            SELECT hc.idfHumanCase,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbHumanCase hc
            WHERE hc.intRowStatus = 0
                  AND hc.idfsSite = @UserSiteID;

            INSERT INTO @Results
            SELECT hc.idfHumanCase,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM @InitialFilteredResults res
                INNER JOIN dbo.tlbHumanCase hc
                    ON hc.idfHumanCase = res.ID
                INNER JOIN dbo.tlbHuman h
                    ON h.idfHuman = hc.idfHuman
                       AND h.intRowStatus = 0
                INNER JOIN dbo.tlbGeoLocation currentAddress
                    ON currentAddress.idfGeoLocation = h.idfCurrentResidenceAddress
                LEFT JOIN dbo.gisLocationDenormalized g
                    ON g.idfsLocation = currentAddress.idfsLocation
                       AND g.idfsLanguage = @LanguageCode
                LEFT JOIN dbo.tlbMaterial m
                    ON m.idfHumanCase = hc.idfHumanCase
                       AND m.intRowStatus = 0
                LEFT JOIN dbo.tlbGeoLocation exposure
                    ON exposure.idfGeoLocation = hc.idfPointGeoLocation
                LEFT JOIN dbo.gisLocationDenormalized gExposure
                    ON gExposure.idfsLocation = exposure.idfsLocation
                       AND gExposure.idfsLanguage = @LanguageCode
            WHERE hc.idfsFinalDiagnosis IS NOT NULL
                  AND (
                          hc.idfHumanCase = @ReportKey
                          OR @ReportKey IS NULL
                      )
                  AND (
                          hc.idfParentMonitoringSession = @SessionKey
                          OR @SessionKey IS NULL
                      )
                  AND (
                          h.idfHumanActual = @PatientID
                          OR @PatientID IS NULL
                      )
                  AND (
                          h.strPersonId = @PersonID
                          OR @PersonID IS NULL
                      )
                  AND (
                          idfsFinalDiagnosis = @DiseaseID
                          OR @DiseaseID IS NULL
                      )
                  AND (
                          idfsCaseProgressStatus = @ReportStatusTypeID
                          OR @ReportStatusTypeID IS NULL
                      )
                  AND (
                          g.Level1ID = @AdministrativeLevelID
                          OR g.Level2ID = @AdministrativeLevelID
                          OR g.Level3ID = @AdministrativeLevelID
                          OR g.Level4ID = @AdministrativeLevelID
                          OR g.Level5ID = @AdministrativeLevelID
                          OR g.Level6ID = @AdministrativeLevelID
                          OR g.Level7ID = @AdministrativeLevelID
                          OR @AdministrativeLevelID IS NULL
                      )
                  AND (
                          hc.datEnteredDate >= @DateEnteredFrom
                          OR @DateEnteredFrom IS NULL
                      )
                  AND (
                          (convert(date, hc.datEnteredDate, 102) <= @DateEnteredTo)
                          OR @DateEnteredTo IS NULL
                      )
                  AND (
                          (CAST(hc.datFinalDiagnosisDate AS DATE)
                  BETWEEN @DiagnosisDateFrom AND @DiagnosisDateTo
                          )
                          OR (
                                 @DiagnosisDateFrom IS NULL
                                 OR @DiagnosisDateTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datNotificationDate AS DATE)
                  BETWEEN @NotificationDateFrom AND @NotificationDateTo
                          )
                          OR (
                                 @NotificationDateFrom IS NULL
                                 OR @NotificationDateTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datOnSetDate AS DATE)
                  BETWEEN @DateOfSymptomsOnsetFrom AND @DateOfSymptomsOnsetTo
                          )
                          OR (
                                 @DateOfSymptomsOnsetFrom IS NULL
                                 OR @DateOfSymptomsOnsetTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datFinalCaseClassificationDate AS DATE)
                  BETWEEN @DateOfFinalCaseClassificationFrom AND @DateOfFinalCaseClassificationTo
                          )
                          OR (
                                 @DateOfFinalCaseClassificationFrom IS NULL
                                 OR @DateOfFinalCaseClassificationTo IS NULL
                             )
                      )
                  AND (
                          hc.idfReceivedByOffice = @ReceivedByFacilityID
                          OR @ReceivedByFacilityID IS NULL
                      )
                  AND (
                          hc.idfSentByOffice = @SentByFacilityID
                          OR @SentByFacilityID IS NULL
                      )
                  AND (
                          idfsFinalCaseStatus = @ClassificationTypeID
                          OR @ClassificationTypeID IS NULL
                      )
                  AND (
                          idfsYNHospitalization = @HospitalizationYNID
                          OR @HospitalizationYNID IS NULL
                      )
                  AND (
                          g.Level1ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level2ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level3ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level4ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level5ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level6ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level7ID = @LocationOfExposureAdministrativeLevelID
                          OR @LocationOfExposureAdministrativeLevelID IS NULL
                      )
                  AND (
                          (ISNULL(h.strFirstName, '') = CASE ISNULL(@PatientFirstName, '')
                                                            WHEN '' THEN
                                                                ISNULL(h.strFirstName, '')
                                                            ELSE
                                                                @PatientFirstName
                                                        END
                          )
                          OR (CHARINDEX(@PatientFirstName, ISNULL(h.strFirstName, '')) > 0)
                      )
                  AND (
                          (ISNULL(h.strSecondName, '') = CASE ISNULL(@PatientMiddleName, '')
                                                             WHEN '' THEN
                                                                 ISNULL(h.strSecondName, '')
                                                             ELSE
                                                                 @PatientMiddleName
                                                         END
                          )
                          OR (CHARINDEX(@PatientMiddleName, ISNULL(h.strSecondName, '')) > 0)
                      )
                  AND (
                          (ISNULL(h.strLastName, '') = CASE ISNULL(@PatientLastName, '')
                                                           WHEN '' THEN
                                                               ISNULL(h.strLastName, '')
                                                           ELSE
                                                               @PatientLastName
                                                       END
                          )
                          OR (CHARINDEX(@PatientLastName, ISNULL(h.strLastName, '')) > 0)
                      )
                  AND (
                          hc.idfsSite = @DataEntrySiteID
                          OR @DataEntrySiteID IS NULL
                      )
                  AND (
                          (
                              hc.idfOutbreak IS NULL
                              AND @OutbreakCasesIndicator = 0
                          )
                          OR (
                                 hc.idfOutbreak IS NOT NULL
                                 AND @OutbreakCasesIndicator = 1
                             )
                          OR (@OutbreakCasesIndicator IS NULL)
                      )
                  AND (
                          hc.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
                          OR @ReportID IS NULL
                      )
                  AND (
                          hc.LegacyCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
                          OR @LegacyReportID IS NULL
                      )
                  AND (
                          m.strFieldBarcode LIKE '%' + TRIM(@LocalOrFieldSampleID) + '%'
                          OR @LocalOrFieldSampleID IS NULL
                      )
                  AND (
                          hc.idfsOutcome = @OutcomeID
                          OR @OutcomeID IS NULL
                      )
            GROUP BY hc.idfHumanCase;

            DECLARE @FilteredResults TABLE
            (
                ID BIGINT NOT NULL,
                ReadPermissionIndicator INT NOT NULL,
                AccessToPersonalDataPermissionIndicator INT NOT NULL,
                AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
                WritePermissionIndicator INT NOT NULL,
                DeletePermissionIndicator INT NOT NULL, INDEX IDX_ID (ID
                                                                     ));

            -- =======================================================================================
            -- DEFAULT CONFIGURABLE FILTRATION RULES
            --
            -- Apply active default filtration rules for third level sites.
            -- =======================================================================================
            DECLARE @RuleActiveStatus INT = 0;
            DECLARE @AdministrativeLevelTypeID INT;
            DECLARE @DefaultAccessRules AS TABLE
            (
                AccessRuleID BIGINT NOT NULL,
                ActiveIndicator INT NOT NULL,
                ReadPermissionIndicator INT NOT NULL,
                AccessToPersonalDataPermissionIndicator INT NOT NULL,
                AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
                WritePermissionIndicator INT NOT NULL,
                DeletePermissionIndicator INT NOT NULL,
                AdministrativeLevelTypeID INT NULL
            );

            INSERT INTO @DefaultAccessRules
            SELECT AccessRuleID,
                   a.intRowStatus,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator,
                   a.AdministrativeLevelTypeID
            FROM dbo.AccessRule a
            WHERE DefaultRuleIndicator = 1;

            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
            WHERE AccessRuleID = 10537000;

            IF @RuleActiveStatus = 0
            BEGIN
                SELECT @AdministrativeLevelTypeID = AdministrativeLevelTypeID
                FROM @DefaultAccessRules
                WHERE AccessRuleID = 10537000;

                SELECT @FiltrationSiteAdministrativeLevelID = CASE
                                                                  WHEN @AdministrativeLevelTypeID = 1 THEN
                                                                      g.Level1ID
                                                                  WHEN @AdministrativeLevelTypeID = 2 THEN
                                                                      g.Level2ID
                                                                  WHEN @AdministrativeLevelTypeID = 3 THEN
                                                                      g.Level3ID
                                                                  WHEN @AdministrativeLevelTypeID = 4 THEN
                                                                      g.Level4ID
                                                                  WHEN @AdministrativeLevelTypeID = 5 THEN
                                                                      g.Level5ID
                                                                  WHEN @AdministrativeLevelTypeID = 6 THEN
                                                                      g.Level6ID
                                                                  WHEN @AdministrativeLevelTypeID = 7 THEN
                                                                      g.Level7ID
                                                              END
                FROM dbo.tlbOffice o
                    INNER JOIN dbo.tlbGeoLocationShared l
                        ON l.idfGeoLocationShared = o.idfLocation
                           AND l.intRowStatus = 0
                    INNER JOIN dbo.gisLocationDenormalized g
                        ON g.idfsLocation = l.idfsLocation
                           AND g.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
                WHERE o.intRowStatus = 0
                      AND o.idfOffice = @UserOrganizationID;

                -- Administrative level specified in the rule of the site where the report was created.
                INSERT INTO @FilteredResults
                SELECT h.idfHumanCase,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbHumanCase h
                    INNER JOIN dbo.tstSite s
                        ON h.idfsSite = s.idfsSite
                    INNER JOIN dbo.tlbOffice o
                        ON o.idfOffice = s.idfOffice
                           AND o.intRowStatus = 0
                    INNER JOIN dbo.tlbGeoLocationShared l
                        ON l.idfGeoLocationShared = o.idfLocation
                           AND l.intRowStatus = 0
                    INNER JOIN dbo.gisLocationDenormalized g
                        ON g.idfsLocation = l.idfsLocation
                           AND g.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537000
                WHERE h.intRowStatus = 0
                      AND (
                              g.Level1ID = @FiltrationSiteAdministrativeLevelID
                              AND @AdministrativeLevelTypeID = 1
                              OR g.Level2ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 2
                              OR g.Level3ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 3
                              OR g.Level4ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 4
                              OR g.Level5ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 5
                              OR g.Level6ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 6
                              OR g.Level7ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 7
                          )

                -- Administrative level specified in the rule of the report current residence address.
                INSERT INTO @FilteredResults
                SELECT h.idfHumanCase,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbHumanCase h
                    INNER JOIN dbo.tlbHuman hu
                        ON hu.idfHuman = h.idfHuman
                           AND hu.intRowStatus = 0
                    INNER JOIN dbo.tlbGeoLocation l
                        ON l.idfGeoLocation = hu.idfCurrentResidenceAddress
                           AND l.intRowStatus = 0
                    INNER JOIN dbo.gisLocationDenormalized g
                        ON g.idfsLocation = l.idfsLocation
                           AND g.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537000
                WHERE h.intRowStatus = 0
                      AND (
                              g.Level1ID = @FiltrationSiteAdministrativeLevelID
                              AND @AdministrativeLevelTypeID = 1
                              OR g.Level2ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 2
                              OR g.Level3ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 3
                              OR g.Level4ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 4
                              OR g.Level5ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 5
                              OR g.Level6ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 6
                              OR g.Level7ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 7
                          )

                -- Administrative level specified in the rule of the report location of exposure, 
                -- if corresponding field was filled in.
                INSERT INTO @FilteredResults
                SELECT h.idfHumanCase,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbHumanCase h
                    INNER JOIN dbo.tlbGeoLocation l
                        ON l.idfGeoLocation = h.idfPointGeoLocation
                           AND l.intRowStatus = 0
                    INNER JOIN dbo.gisLocationDenormalized g
                        ON g.idfsLocation = l.idfsLocation
                           AND g.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537000
                WHERE h.intRowStatus = 0
                      AND (
                              g.Level1ID = @FiltrationSiteAdministrativeLevelID
                              AND @AdministrativeLevelTypeID = 1
                              OR g.Level2ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 2
                              OR g.Level3ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 3
                              OR g.Level4ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 4
                              OR g.Level5ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 5
                              OR g.Level6ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 6
                              OR g.Level7ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 7
                          )
            END;

            -- Report data shall be available to all sites' organizations connected to the particular report.
            -- Notification sent by, notification received by, facility where the patient first sought 
            -- care, hospital, and the conducting investigation organizations.
            SELECT @RuleActiveStatus = intRowStatus
            FROM dbo.AccessRule
            WHERE AccessRuleID = 10537001;

            IF @RuleActiveStatus = 0
            BEGIN
                INSERT INTO @FilteredResults
                SELECT h.idfHumanCase,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbHumanCase h
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537001
                WHERE h.intRowStatus = 0
                      AND (
                              h.idfSentByOffice = @UserOrganizationID
                              OR h.idfReceivedByOffice = @UserOrganizationID
                              OR h.idfSoughtCareFacility = @UserOrganizationID
                              OR h.idfHospital = @UserOrganizationID
                              OR h.idfInvestigatedByOffice = @UserOrganizationID
                          )
                ORDER BY h.idfHumanCase;

                -- Sample collected by and sent to organizations
                INSERT INTO @FilteredResults
                SELECT MAX(m.idfHumanCase),
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbMaterial m
                    INNER JOIN dbo.tlbHumanCase h
                        ON h.idfHumanCase = m.idfHumanCase
                           AND h.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537001
                WHERE m.intRowStatus = 0
                      AND (
                              m.idfFieldCollectedByOffice = @UserOrganizationID
                              OR m.idfSendToOffice = @UserOrganizationID
                          )
                GROUP BY m.idfHumanCase,
                         a.ReadPermissionIndicator,
                         a.AccessToPersonalDataPermissionIndicator,
                         a.AccessToGenderAndAgeDataPermissionIndicator,
                         a.WritePermissionIndicator,
                         a.DeletePermissionIndicator;

                -- Sample transferred to organizations
                INSERT INTO @FilteredResults
                SELECT MAX(m.idfHumanCase),
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbMaterial m
                    INNER JOIN dbo.tlbHumanCase h
                        ON h.idfHumanCase = m.idfHumanCase
                           AND h.intRowStatus = 0
                    INNER JOIN dbo.tlbTransferOutMaterial tom
                        ON m.idfMaterial = tom.idfMaterial
                           AND tom.intRowStatus = 0
                    INNER JOIN dbo.tlbTransferOUT t
                        ON tom.idfTransferOut = t.idfTransferOut
                           AND t.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537001
                WHERE m.intRowStatus = 0
                      AND t.idfSendToOffice = @UserOrganizationID
                GROUP BY m.idfHumanCase,
                         a.ReadPermissionIndicator,
                         a.AccessToPersonalDataPermissionIndicator,
                         a.AccessToGenderAndAgeDataPermissionIndicator,
                         a.WritePermissionIndicator,
                         a.DeletePermissionIndicator;
            END;

            --
            -- Report data shall be available to the sites with the connected outbreak, if the report 
            -- is the primary report/session for an outbreak.
            --
            SELECT @RuleActiveStatus = intRowStatus
            FROM dbo.AccessRule
            WHERE AccessRuleID = 10537002;

            IF @RuleActiveStatus = 0
            BEGIN
                INSERT INTO @FilteredResults
                SELECT h.idfHumanCase,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbHumanCase h
                    INNER JOIN dbo.tlbOutbreak o
                        ON h.idfHumanCase = o.idfPrimaryCaseOrSession
                           AND o.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537002
                WHERE h.intRowStatus = 0
                      AND o.idfsSite = @UserSiteID;
            END;

            -- =======================================================================================
            -- CONFIGURABLE FILTRATION RULES
            -- 
            -- Apply configurable filtration rules for use case SAUC34. Some of these rules may 
            -- overlap the default rules.
            -- =======================================================================================
            --
            -- Apply at the user's site group level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = h.idfsSite
                INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                    ON userSiteGroup.idfsSite = @UserSiteID
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = h.idfsSite
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's employee group level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = h.idfsSite
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's ID level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = h.idfsSite
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site group level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tflSiteToSiteGroup sgs
                    ON sgs.idfsSite = @UserSiteID
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND sgs.idfsSite = h.idfsSite;

            -- 
            -- Apply at the user's site level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteID = h.idfsSite;

            -- 
            -- Apply at the user's employee group level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteID = h.idfsSite;

            -- 
            -- Apply at the user's ID level, granted by a site.
            ----
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteID = h.idfsSite;

            -- Copy filtered results to results and use search criteria
            INSERT INTO @Results
            SELECT ID,
                   ReadPermissionIndicator,
                   AccessToPersonalDataPermissionIndicator,
                   AccessToGenderAndAgeDataPermissionIndicator,
                   WritePermissionIndicator,
                   DeletePermissionIndicator
            FROM @FilteredResults
                INNER JOIN dbo.tlbHumanCase hc
                    ON hc.idfHumanCase = ID
                INNER JOIN dbo.tlbHuman h
                    ON h.idfHuman = hc.idfHuman
                       AND h.intRowStatus = 0
                INNER JOIN dbo.tlbHumanActual ha
                    ON ha.idfHumanActual = h.idfHumanActual
                       AND ha.intRowStatus = 0
                INNER JOIN dbo.tlbGeoLocation currentAddress
                    ON currentAddress.idfGeoLocation = h.idfCurrentResidenceAddress
                LEFT JOIN dbo.gisLocationDenormalized g
                    ON g.idfsLocation = currentAddress.idfsLocation
                       AND g.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
                LEFT JOIN dbo.tlbMaterial m
                    ON m.idfHumanCase = hc.idfHumanCase
                       AND m.intRowStatus = 0
                LEFT JOIN dbo.tlbGeoLocation exposure
                    ON exposure.idfGeoLocation = hc.idfPointGeoLocation
                LEFT JOIN dbo.gisLocationDenormalized gExposure
                    ON gExposure.idfsLocation = exposure.idfsLocation
                       AND gExposure.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
            WHERE hc.intRowStatus = 0
                  AND hc.idfsFinalDiagnosis IS NOT NULL
                  AND (
                          hc.idfHumanCase = @ReportKey
                          OR @ReportKey IS NULL
                      )
                  AND (
                          hc.idfParentMonitoringSession = @SessionKey
                          OR @SessionKey IS NULL
                      )
                  AND (
                          ha.idfHumanActual = @PatientID
                          OR @PatientID IS NULL
                      )
                  AND (
                          h.strPersonId = @PersonID
                          OR @PersonID IS NULL
                      )
                  AND (
                          idfsFinalDiagnosis = @DiseaseID
                          OR @DiseaseID IS NULL
                      )
                  AND (
                          idfsCaseProgressStatus = @ReportStatusTypeID
                          OR @ReportStatusTypeID IS NULL
                      )
                  AND (
                          g.Level1ID = @AdministrativeLevelID
                          OR g.Level2ID = @AdministrativeLevelID
                          OR g.Level3ID = @AdministrativeLevelID
                          OR g.Level4ID = @AdministrativeLevelID
                          OR g.Level5ID = @AdministrativeLevelID
                          OR g.Level6ID = @AdministrativeLevelID
                          OR g.Level7ID = @AdministrativeLevelID
                          OR @AdministrativeLevelID IS NULL
                      )
                  AND (
                          hc.datEnteredDate >= @DateEnteredFrom
                          OR @DateEnteredFrom IS NULL
                      )
                  AND (
                          (convert(date, hc.datEnteredDate, 102) <= @DateEnteredTo)
                          OR @DateEnteredTo IS NULL
                      )
                  AND (
                          (CAST(hc.datFinalDiagnosisDate AS DATE)
                  BETWEEN @DiagnosisDateFrom AND @DiagnosisDateTo
                          )
                          OR (
                                 @DiagnosisDateFrom IS NULL
                                 OR @DiagnosisDateTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datNotificationDate AS DATE)
                  BETWEEN @NotificationDateFrom AND @NotificationDateTo
                          )
                          OR (
                                 @NotificationDateFrom IS NULL
                                 OR @NotificationDateTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datOnSetDate AS DATE)
                  BETWEEN @DateOfSymptomsOnsetFrom AND @DateOfSymptomsOnsetTo
                          )
                          OR (
                                 @DateOfSymptomsOnsetFrom IS NULL
                                 OR @DateOfSymptomsOnsetTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datFinalCaseClassificationDate AS DATE)
                  BETWEEN @DateOfFinalCaseClassificationFrom AND @DateOfFinalCaseClassificationTo
                          )
                          OR (
                                 @DateOfFinalCaseClassificationFrom IS NULL
                                 OR @DateOfFinalCaseClassificationTo IS NULL
                             )
                      )
                  AND (
                          hc.idfReceivedByOffice = @ReceivedByFacilityID
                          OR @ReceivedByFacilityID IS NULL
                      )
                  AND (
                          hc.idfSentByOffice = @SentByFacilityID
                          OR @SentByFacilityID IS NULL
                      )
                  AND (
                          idfsFinalCaseStatus = @ClassificationTypeID
                          OR @ClassificationTypeID IS NULL
                      )
                  AND (
                          idfsYNHospitalization = @HospitalizationYNID
                          OR @HospitalizationYNID IS NULL
                      )
                  AND (
                          g.Level1ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level2ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level3ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level4ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level5ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level6ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level7ID = @LocationOfExposureAdministrativeLevelID
                          OR @LocationOfExposureAdministrativeLevelID IS NULL
                      )
                  AND (
                          (ISNULL(h.strFirstName, '') = CASE ISNULL(@PatientFirstName, '')
                                                            WHEN '' THEN
                                                                ISNULL(h.strFirstName, '')
                                                            ELSE
                                                                @PatientFirstName
                                                        END
                          )
                          OR (CHARINDEX(@PatientFirstName, ISNULL(h.strFirstName, '')) > 0)
                      )
                  AND (
                          (ISNULL(h.strSecondName, '') = CASE ISNULL(@PatientMiddleName, '')
                                                             WHEN '' THEN
                                                                 ISNULL(h.strSecondName, '')
                                                             ELSE
                                                                 @PatientMiddleName
                                                         END
                          )
                          OR (CHARINDEX(@PatientMiddleName, ISNULL(h.strSecondName, '')) > 0)
                      )
                  AND (
                          (ISNULL(h.strLastName, '') = CASE ISNULL(@PatientLastName, '')
                                                           WHEN '' THEN
                                                               ISNULL(h.strLastName, '')
                                                           ELSE
                                                               @PatientLastName
                                                       END
                          )
                          OR (CHARINDEX(@PatientLastName, ISNULL(h.strLastName, '')) > 0)
                      )
                  AND (
                          hc.idfsSite = @DataEntrySiteID
                          OR @DataEntrySiteID IS NULL
                      )
                  AND (
                          (
                              hc.idfOutbreak IS NULL
                              AND @OutbreakCasesIndicator = 0
                          )
                          OR (
                                 hc.idfOutbreak IS NOT NULL
                                 AND @OutbreakCasesIndicator = 1
                             )
                          OR (@OutbreakCasesIndicator IS NULL)
                      )
                  AND (
                          hc.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
                          OR @ReportID IS NULL
                      )
                  AND (
                          hc.LegacyCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
                          OR @LegacyReportID IS NULL
                      )
                  AND (
                          m.strFieldBarcode LIKE '%' + TRIM(@LocalOrFieldSampleID) + '%'
                          OR @LocalOrFieldSampleID IS NULL
                      )
                  AND (
                          hc.idfsOutcome = @OutcomeID
                          OR @OutcomeID IS NULL
                      )
            GROUP BY ID,
                     ReadPermissionIndicator,
                     AccessToPersonalDataPermissionIndicator,
                     AccessToGenderAndAgeDataPermissionIndicator,
                     WritePermissionIndicator,
                     DeletePermissionIndicator;
        END;

        -- =======================================================================================
        -- Remove "Outbreak" tied disease reports, if filtering is needed
        -- =======================================================================================
        IF @FilterOutbreakTiedReports = 1
        BEGIN
            DELETE I
            FROM @Results I
                INNER JOIN dbo.tlbHumanCase hc
                    ON hc.idfHumanCase = I.ID
            WHERE hc.idfOutbreak IS NOT NULL;
        END;

        -- =======================================================================================
        -- DISEASE FILTRATION RULES
        --
        -- Apply disease filtration rules from use case SAUC62.
        -- =======================================================================================
        -- 
        -- Apply level 0 disease filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without disease filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT hc.idfHumanCase
            FROM dbo.tlbHumanCase hc
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = hc.idfsFinalDiagnosis
                       AND oa.intRowStatus = 0
            WHERE hc.intRowStatus = 0
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060001 -- Disease
                  AND oa.idfActor = -506 -- Default role
        );

        --
        -- Apply level 1 disease filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        INSERT INTO @Results
        SELECT hc.idfHumanCase,
               1,
               1,
               1,
               1,
               1
        FROM dbo.tlbHumanCase hc
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = hc.idfsFinalDiagnosis
                   AND oa.intRowStatus = 0
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intPermission = 2 -- Allow permission
              AND hc.intRowStatus = 0
              AND oa.idfsObjectType = 10060001 -- Disease
              AND oa.idfActor = egm.idfEmployeeGroup
              AND hc.idfsFinalDiagnosis IS NOT NULL
        GROUP BY hc.idfHumanCase;

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbHumanCase hc
                ON hc.idfHumanCase = res.ID
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = hc.idfsFinalDiagnosis
                   AND oa.intRowStatus = 0
        WHERE oa.intPermission = 1 -- Deny permission
              AND oa.idfsObjectType = 10060001 -- Disease
              AND oa.idfActor = egm.idfEmployeeGroup;

        --
        -- Apply level 2 disease filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        INSERT INTO @Results
        SELECT hc.idfHumanCase,
               1,
               1,
               1,
               1,
               1
        FROM dbo.tlbHumanCase hc
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = hc.idfsFinalDiagnosis
                   AND oa.intRowStatus = 0
        WHERE oa.intPermission = 2 -- Allow permission
              AND hc.intRowStatus = 0
              AND oa.idfsObjectType = 10060001 -- Disease
              AND oa.idfActor = @UserEmployeeID
              AND hc.idfsFinalDiagnosis IS NOT NULL
        GROUP BY hc.idfHumanCase;

        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT hc.idfHumanCase
            FROM dbo.tlbHumanCase hc
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = hc.idfsFinalDiagnosis
                       AND oa.intRowStatus = 0
            WHERE hc.intRowStatus = 0
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060001 -- Disease
                  AND oa.idfActor = @UserEmployeeID
        );

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT hc.idfHumanCase
            FROM dbo.tlbHumanCase hc
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = hc.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE hc.intRowStatus = 0
                  AND oa.idfsObjectOperation = 10059003 -- Read permission
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        INSERT INTO @Results
        SELECT hc.idfHumanCase,
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = hc.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = hc.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = hc.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = hc.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = hc.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbHumanCase hc
        WHERE hc.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserGroupSitePermissions WHERE SiteID = hc.idfsSite
        );

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbHumanCase hc
                ON hc.idfHumanCase = res.ID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = hc.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003; -- Read permission

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        INSERT INTO @Results
        SELECT hc.idfHumanCase,
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = hc.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = hc.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = hc.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = hc.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = hc.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbHumanCase hc
        WHERE hc.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserSitePermissions WHERE SiteID = hc.idfsSite
        );

        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT hc.idfHumanCase
            FROM dbo.tlbHumanCase hc
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = hc.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        INSERT INTO @FinalResults
        SELECT ID,
               MAX(res.ReadPermissionIndicator),
               MAX(res.AccessToPersonalDataPermissionIndicator),
               MAX(res.AccessToGenderAndAgeDataPermissionIndicator),
               MAX(res.WritePermissionIndicator),
               MAX(res.DeletePermissionIndicator)
        FROM @Results res
            INNER JOIN dbo.tlbHumanCase hc
                ON hc.idfHumanCase = res.ID
            INNER JOIN dbo.tlbHuman h
                ON h.idfHuman = hc.idfHuman
                   AND h.intRowStatus = 0
            INNER JOIN dbo.tlbHumanActual ha
                ON ha.idfHumanActual = h.idfHumanActual
                   AND ha.intRowStatus = 0
            INNER JOIN dbo.tlbGeoLocation currentAddress
                ON currentAddress.idfGeoLocation = h.idfCurrentResidenceAddress
            LEFT JOIN dbo.gisLocationDenormalized g
                ON g.idfsLocation = currentAddress.idfsLocation
                   AND g.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
            LEFT JOIN dbo.tlbMaterial m
                ON m.idfHumanCase = hc.idfHumanCase
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbGeoLocation exposure
                ON exposure.idfGeoLocation = hc.idfPointGeoLocation
            LEFT JOIN dbo.gisLocationDenormalized gExposure
                ON gExposure.idfsLocation = exposure.idfsLocation
                   AND gExposure.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
        WHERE res.ReadPermissionIndicator IN ( 1, 3, 5 )
              AND hc.idfsFinalDiagnosis IS NOT NULL
              AND (
                      hc.idfHumanCase = @ReportKey
                      OR @ReportKey IS NULL
                  )
              AND (
                      hc.idfParentMonitoringSession = @SessionKey
                      OR @SessionKey IS NULL
                  )
              AND (
                      h.idfHumanActual = @PatientID
                      OR @PatientID IS NULL
                  )
              AND (
                      h.strPersonId = @PersonID
                      OR @PersonID IS NULL
                  )
              AND (
                      idfsFinalDiagnosis = @DiseaseID
                      OR @DiseaseID IS NULL
                  )
              AND (
                      idfsCaseProgressStatus = @ReportStatusTypeID
                      OR @ReportStatusTypeID IS NULL
                  )
              AND (
                      g.Level1ID = @AdministrativeLevelID
                      OR g.Level2ID = @AdministrativeLevelID
                      OR g.Level3ID = @AdministrativeLevelID
                      OR g.Level4ID = @AdministrativeLevelID
                      OR g.Level5ID = @AdministrativeLevelID
                      OR g.Level6ID = @AdministrativeLevelID
                      OR g.Level7ID = @AdministrativeLevelID
                      OR @AdministrativeLevelID IS NULL
                  )
              AND (
                      hc.datEnteredDate >= @DateEnteredFrom
                      OR @DateEnteredFrom IS NULL
                  )
              AND (
                      (CONVERT(date, hc.datEnteredDate, 102) <= @DateEnteredTo)
                      OR @DateEnteredTo IS NULL
                  )
              AND (
                      (CAST(hc.datFinalDiagnosisDate AS DATE)
              BETWEEN @DiagnosisDateFrom AND @DiagnosisDateTo
                      )
                      OR (
                             @DiagnosisDateFrom IS NULL
                             OR @DiagnosisDateTo IS NULL
                         )
                  )
              AND (
                      (CAST(hc.datNotificationDate AS DATE)
              BETWEEN @NotificationDateFrom AND @NotificationDateTo
                      )
                      OR (
                             @NotificationDateFrom IS NULL
                             OR @NotificationDateTo IS NULL
                         )
                  )
              AND (
                      (CAST(hc.datOnSetDate AS DATE)
              BETWEEN @DateOfSymptomsOnsetFrom AND @DateOfSymptomsOnsetTo
                      )
                      OR (
                             @DateOfSymptomsOnsetFrom IS NULL
                             OR @DateOfSymptomsOnsetTo IS NULL
                         )
                  )
              AND (
                      (CAST(hc.datFinalCaseClassificationDate AS DATE)
              BETWEEN @DateOfFinalCaseClassificationFrom AND @DateOfFinalCaseClassificationTo
                      )
                      OR (
                             @DateOfFinalCaseClassificationFrom IS NULL
                             OR @DateOfFinalCaseClassificationTo IS NULL
                         )
                  )
              AND (
                      hc.idfReceivedByOffice = @ReceivedByFacilityID
                      OR @ReceivedByFacilityID IS NULL
                  )
              AND (
                      hc.idfSentByOffice = @SentByFacilityID
                      OR @SentByFacilityID IS NULL
                  )
              AND (
                      idfsFinalCaseStatus = @ClassificationTypeID
                      OR @ClassificationTypeID IS NULL
                  )
              AND (
                      idfsYNHospitalization = @HospitalizationYNID
                      OR @HospitalizationYNID IS NULL
                  )
              AND (
                      g.Level1ID = @LocationOfExposureAdministrativeLevelID
                      OR g.Level2ID = @LocationOfExposureAdministrativeLevelID
                      OR g.Level3ID = @LocationOfExposureAdministrativeLevelID
                      OR g.Level4ID = @LocationOfExposureAdministrativeLevelID
                      OR g.Level5ID = @LocationOfExposureAdministrativeLevelID
                      OR g.Level6ID = @LocationOfExposureAdministrativeLevelID
                      OR g.Level7ID = @LocationOfExposureAdministrativeLevelID
                      OR @LocationOfExposureAdministrativeLevelID IS NULL
                  )
              AND (
                      (ISNULL(h.strFirstName, '') = CASE ISNULL(@PatientFirstName, '')
                                                        WHEN '' THEN
                                                            ISNULL(h.strFirstName, '')
                                                        ELSE
                                                            @PatientFirstName
                                                    END
                      )
                      OR (CHARINDEX(@PatientFirstName, ISNULL(h.strFirstName, '')) > 0)
                  )
              AND (
                      (ISNULL(h.strSecondName, '') = CASE ISNULL(@PatientMiddleName, '')
                                                         WHEN '' THEN
                                                             ISNULL(h.strSecondName, '')
                                                         ELSE
                                                             @PatientMiddleName
                                                     END
                      )
                      OR (CHARINDEX(@PatientMiddleName, ISNULL(h.strSecondName, '')) > 0)
                  )
              AND (
                      (ISNULL(h.strLastName, '') = CASE ISNULL(@PatientLastName, '')
                                                       WHEN '' THEN
                                                           ISNULL(h.strLastName, '')
                                                       ELSE
                                                           @PatientLastName
                                                   END
                      )
                      OR (CHARINDEX(@PatientLastName, ISNULL(h.strLastName, '')) > 0)
                  )
              AND (
                      hc.idfsSite = @DataEntrySiteID
                      OR @DataEntrySiteID IS NULL
                  )
              AND (
                      (
                          hc.idfOutbreak IS NULL
                          AND @OutbreakCasesIndicator = 0
                      )
                      OR (
                             hc.idfOutbreak IS NOT NULL
                             AND @OutbreakCasesIndicator = 1
                         )
                      OR (@OutbreakCasesIndicator IS NULL)
                  )
              AND (
                      hc.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
                      OR @ReportID IS NULL
                  )
              AND (
                      hc.LegacyCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
                      OR @LegacyReportID IS NULL
                  )
              AND (
                      m.strFieldBarcode LIKE '%' + TRIM(@LocalOrFieldSampleID) + '%'
                      OR @LocalOrFieldSampleID IS NULL
                  )
              AND (
                      hc.idfsOutcome = @OutcomeID
                      OR @OutcomeID IS NULL
                  )
        GROUP BY ID;

        WITH paging
        AS (SELECT ROW_NUMBER() OVER (ORDER BY CASE
                                                   WHEN @SortColumn = 'ReportID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       hc.strCaseID
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'ReportID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       hc.strCaseID
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'EnteredDate'
                                                        AND @SortOrder = 'ASC' THEN
                                                       hc.datEnteredDate
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EnteredDate'
                                                        AND @SortOrder = 'DESC' THEN
                                                       hc.datEnteredDate
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'DiseaseName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       disease.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'DiseaseName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       disease.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'PersonName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       ISNULL(h.strLastName, N'') + ISNULL(', ' + h.strFirstName, N'')
                                                       + ISNULL(' ' + h.strSecondName, N'')
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'PersonName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       ISNULL(h.strLastName, N'') + ISNULL(', ' + h.strFirstName, N'')
                                                       + ISNULL(' ' + h.strSecondName, N'')
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'PersonLocation'
                                                        AND @SortOrder = 'ASC' THEN
                                               (LH.AdminLevel1Name + ', ' + LH.AdminLevel2Name)
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'PersonLocation'
                                                        AND @SortOrder = 'DESC' THEN
                                               (LH.AdminLevel1Name + ', ' + LH.AdminLevel2Name)
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'ClassificationTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       finalClassification.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'ClassificationTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       finalClassification.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'ReportStatusTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       reportStatus.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'ReportStatusTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       reportStatus.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'LegacyReportID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       hc.LegacyCaseID
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'LegacyReportID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       hc.LegacyCaseID
                                               END DESC
                                     ) AS ROWNUM,
                   res.ID AS ReportKey,
                   hc.strCaseId AS ReportID,
                   hc.LegacyCaseID AS LegacyReportID,
                   reportStatus.name AS ReportStatusTypeName,
                   reportType.name AS ReportTypeName,
                   hc.datTentativeDiagnosisDate AS TentativeDiagnosisDate,
                   hc.datFinalDiagnosisDate AS FinalDiagnosisDate,
                   ISNULL(finalClassification.name, initialClassification.name) AS ClassificationTypeName,
                   finalClassification.name AS FinalClassificationTypeName,
                   hc.datOnSetDate AS DateOfOnset,
                   hc.idfsFinalDiagnosis AS DiseaseID,
                   disease.Name AS DiseaseName,
                   h.idfHumanActual AS PersonMasterID,
                   hc.idfHuman AS PersonKey,
                   haai.EIDSSPersonID AS PersonID,
                   h.strPersonID AS PersonalID,
                   dbo.FN_GBL_ConcatFullName(h.strLastName, h.strFirstName, h.strSecondName) AS PersonName,
                   ISNULL(LH.AdminLevel1Name, '') + IIF(LH.AdminLevel2Name IS NULL, '', ', ')
                   + ISNULL(LH.AdminLevel2Name, '') AS PersonLocation,
                   ha.strEmployerName AS EmployerName,
                   hc.datEnteredDate AS EnteredDate,
                   ISNULL(p.strFamilyName, N'') + ISNULL(', ' + p.strFirstName, N'')
                   + ISNULL(' ' + p.strSecondName, N'') AS EnteredByPersonName,
                   hc.datModificationDate AS ModificationDate,
                   ISNULL(hospitalization.name, hospitalization.strDefault) AS HospitalizationStatus,
                   hc.idfsSite AS SiteID,
                   res.ReadPermissionIndicator AS ReadPermissionIndicator,
                   res.AccessToPersonalDataPermissionIndicator AS AccessToPersonalDataPermissionIndicator,
                   res.AccessToGenderAndAgeDataPermissionIndicator AS AccessToGenderAndAgeDataPermissionIndicator,
                   res.WritePermissionIndicator AS WritePermissionIndicator,
                   res.DeletePermissionIndicator AS DeletePermissionIndicator,
                   COUNT(*) OVER () AS RecordCount,
                   (
                       SELECT COUNT(*) FROM dbo.tlbHumanCase hc WHERE hc.intRowStatus = 0
                   ) AS TotalCount,
                   LH.AdminLevel2Name AS Region,
                   LH.AdminLevel3Name AS Rayon
            FROM @FinalResults res
                INNER JOIN dbo.tlbHumanCase hc
                    ON hc.idfHumanCase = res.ID
                INNER JOIN dbo.tlbHuman h
                    ON h.idfHuman = hc.idfHuman
                       AND h.intRowStatus = 0
                INNER JOIN dbo.tlbHumanActual ha
                    ON ha.idfHumanActual = h.idfHumanActual
                       AND ha.intRowStatus = 0
                LEFT JOIN dbo.tlbGeoLocation gl
                    ON gl.idfGeoLocation = h.idfCurrentResidenceAddress
                LEFT JOIN dbo.gisLocation g
                    ON g.idfsLocation = gl.idfsLocation
                LEFT JOIN FN_GBL_LocationHierarchy_Flattened(@LanguageID) LH
                    ON LH.idfsLocation = gl.idfsLocation
                LEFT JOIN dbo.HumanActualAddlInfo haai
                    ON haai.HumanActualAddlInfoUID = ha.idfHumanActual
                       AND haai.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000019) disease
                    ON disease.idfsReference = hc.idfsFinalDiagnosis
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000011) initialClassification
                    ON initialClassification.idfsReference = hc.idfsInitialCaseStatus
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000011) finalClassification
                    ON finalClassification.idfsReference = hc.idfsFinalCaseStatus
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000111) reportStatus
                    ON reportStatus.idfsReference = hc.idfsCaseProgressStatus
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000144) reportType
                    ON reportType.idfsReference = hc.DiseaseReportTypeID
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000041) hospitalization
                    ON hospitalization.idfsReference = idfsHospitalizationStatus
                LEFT JOIN dbo.tlbPerson p
                    ON p.idfPerson = hc.idfPersonEnteredBy
                       AND p.intRowStatus = 0
           )
        SELECT ReportKey,
               ReportID,
               LegacyReportID,
               ReportStatusTypeName,
               ReportTypeName,
               TentativeDiagnosisDate,
               FinalDiagnosisDate,
               ClassificationTypeName,
               FinalClassificationTypeName,
               DateOfOnset,
               DiseaseID,
               DiseaseName,
               PersonMasterID,
               PersonKey,
               PersonID,
               PersonalID,
               PersonName,
               PersonLocation,
               EmployerName,
               EnteredDate,
               EnteredByPersonName,
               ModificationDate,
               HospitalizationStatus,
               SiteID,
               CASE
                   WHEN ReadPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN ReadPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN ReadPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN ReadPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, ReadPermissionIndicator)
               END AS ReadPermissionindicator,
               CASE
                   WHEN AccessToPersonalDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN AccessToPersonalDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN AccessToPersonalDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN AccessToPersonalDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, AccessToPersonalDataPermissionIndicator)
               END AS AccessToPersonalDataPermissionIndicator,
               CASE
                   WHEN AccessToGenderAndAgeDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN AccessToGenderAndAgeDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN AccessToGenderAndAgeDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN AccessToGenderAndAgeDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, AccessToGenderAndAgeDataPermissionIndicator)
               END AS AccessToGenderAndAgeDataPermissionIndicator,
               CASE
                   WHEN WritePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN WritePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN WritePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN WritePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, WritePermissionIndicator)
               END AS WritePermissionIndicator,
               CASE
                   WHEN DeletePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN DeletePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN DeletePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN DeletePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, DeletePermissionIndicator)
               END AS DeletePermissionIndicator,
               RecordCount,
               TotalCount,
               TotalPages = (RecordCount / @PageSize) + IIF(RecordCount % @PageSize > 0, 1, 0),
               CurrentPage = @Page,
               Region,
               Rayon
        FROM paging
        WHERE RowNum > @firstRec
              AND RowNum < @lastRec;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USP_HUM_TESTS_GetList]...';


GO
-- ================================================================================================
-- Name: USP_HUM_TESTS_GetList
--
-- Description: List human disease report tests by human disease report identifier.
--          
-- Author: JWJ
--
-- Revision History:
-- Name	            Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- JWJ				20180603   created 
-- HAP				2018110    Added strTestResult field to result set 
-- HAP              20181109   Added TestValidation fields to result set 
-- LJM				20201230   Added strTestedByPerson and strTestedByOffice as output 
--                             parameters
-- LJM				20210105   Added strTestCategory and blnNonLaboratoryTest, 
--                             idfInterpretedByPerson,idfValidatedByPerson as output parameters.
-- Leo Tracchia		10/21/2022 Fix for properly deleting tests for human disease report DevOps 
--                             defect 5006
-- Stephen Long     01/04/2023 Added check for deleted test status.  Fixed main table to be
--                             tlbTesting and not the material table.  Changed to join.
-- Doug Albanese    01/06/2023 Removed the coalescing of null values on Interpreted and Validated 
--                             dates. They have to be done on the application side.
-- Stephen Long     01/09/2023 Fix to show the validated by person from tlbTesting when the test 
--                             record was created and updated from the laboratory module.
-- Stephen Long     01/16/2023 Fix to look at test status types when a laboratory assigned test 
--                             to determine if validated or not (final and amended status types).
-- 
--
-- Testing code:
-- EXEC USP_HUM_TESTS_GetList 'en', @idfHumanCase=19  --10
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_HUM_TESTS_GetList]
    @LangID NVARCHAR(50),
    @idfHumanCase BIGINT = NULL,
    @SearchDiagnosis BIGINT = NULL
AS
BEGIN
    BEGIN TRY
        SELECT Samples.idfHumanCase,
               Samples.idfMaterial,
               Samples.strBarcode,          -- Lab sample ID
               Samples.strFieldBarcode,     -- Local Sample ID
               Samples.idfsSampleType,
               SampleType.name AS strSampleTypeName,
               Samples.datFieldCollectionDate,
               Samples.idfSendToOffice,
               OfficeSendTo.[name] AS strSendToOffice,
               Samples.idfFieldCollectedByOffice,
               CollectedByOffice.name AS strFieldCollectedByOffice,
               Samples.datFieldSentDate,
               Samples.idfsSampleKind,
               sampleKind.name AS SampleKindTypeName,
               Samples.idfsSampleStatus,
               sampleStatus.name AS SampleStatusTypeName,
               Samples.idfFieldCollectedByPerson,
               Samples.datSampleStatusDate, --verify this is the result date
               Samples.rowGuid AS sampleGuid,
               t.idfTesting,
               t.idfsTestName,
               t.idfsTestCategory,
               testCat.name AS strTestCategory,
               t.idfsTestResult,
               t.idfsTestStatus,
               t.idfsDiagnosis,
               (
                   select strDefault
                   from trtbasereference
                   where idfsbasereference = t.idfsDiagnosis
               ) AS 'strDiagnosis',
               tstatus.name AS strTestStatus,
               tresult.name AS strTestResult,
               TestName.name,
               t.datReceivedDate,
               t.datConcludedDate,
               t.idfTestedByPerson,
               t.idfTestedByOffice,
               --ISNULL(tv.datInterpretationDate, GETDATE()) AS datInterpretedDate, --can't assigg a value here. It's to be determined on the application side
			   tv.datInterpretationDate AS datInterpretedDate,
               tv.idfsInterpretedStatus,
               testinterpretedstatus.name AS strInterpretedStatus,
               tv.strInterpretedComment,
               p.strFamilyName AS strInterpretedBy,
               --ISNULL(tv.datValidationDate, GETDATE()) AS datValidationDate, --can't assigg a value here. It's to be determined on the application side
               CASE WHEN t.blnNonLaboratoryTest = 0 THEN
                   CASE WHEN t.idfsTestStatus = 10001001 THEN -- Final
                       t.datConcludedDate
                   WHEN t.idfsTestStatus = 10001006 THEN -- Amended
                       t.datConcludedDate
                   ELSE
                       NULL
                    END
               ELSE
    			   tv.datValidationDate END AS datValidationDate,
               CASE WHEN t.blnNonLaboratoryTest = 0 THEN
                   CASE WHEN t.idfsTestStatus = 10001001 THEN -- Final
                       CONVERT(BIT, 1)
                   WHEN t.idfsTestStatus = 10001006 THEN -- Amended
                       CONVERT(BIT, 1)
                   ELSE 
                       CONVERT(BIT, 0)
                   END
               ELSE
                   ISNULL(tv.blnValidateStatus, 0) END AS blnValidateStatus,
               tv.strValidateComment,
               CASE WHEN t.blnNonLaboratoryTest = 0 THEN
                   ISNULL(validatedByPerson.strFamilyName, N'') + ISNULL(', ' + validatedByPerson.strFirstName, N'')
                   + ISNULL(' ' + validatedByPerson.strSecondName, N'')
               ELSE
                   p.strFamilyName END AS strValidatedBy,
               u.strAccountName,
               t.rowGuid AS testGuid,
               t.intRowStatus,
               testedbyPerson.strFirstName + ' ' + ISNULL(testedbyPerson.strSecondName, '') + '  '
               + testedbyPerson.strFamilyName AS strTestedByPerson,
               testedByOffice.FullName AS strTestedByOffice,
               ISNULL(t.blnNonLaboratoryTest, 0) AS blnNonLaboratoryTest,
               tv.idfInterpretedByPerson,
               CASE WHEN t.blnNonLaboratoryTest = 0 THEN
                   t.idfValidatedByPerson
                ELSE 
               tv.idfValidatedByPerson END AS idfValidatedByPerson,
               tv.idfTestValidation
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial Samples
                ON Samples.idfMaterial = t.idfMaterial
            INNER JOIN dbo.tlbHumanCase hc
                ON Samples.idfHumanCase = hc.idfHumanCase
            INNER JOIN dbo.FN_GBL_REFERENCEREPAIR(@LangID, 19000087) SampleType
                ON SampleType.idfsReference = Samples.idfsSampleType
            LEFT JOIN dbo.tlbGeoLocation Location
                ON Location.idfGeoLocation = hc.idfPointGeoLocation
            LEFT JOIN FN_GBL_GIS_Reference(@LangID, 19000003) Region
                ON Region.idfsReference = Location.idfsRegion
            LEFT JOIN FN_GBL_GIS_Reference(@LangID, 19000002) Rayon
                ON Rayon.idfsReference = Location.idfsRayon
            LEFT JOIN tlbMaterial ParentSample
                ON ParentSample.idfMaterial = Samples.idfParentMaterial
                   AND ParentSample.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_INSTITUTION(@LangID) CollectedByOffice
                ON CollectedByOffice.idfOffice = Samples.idfFieldCollectedByOffice
            LEFT JOIN dbo.FN_GBL_INSTITUTION(@LangID) OfficeSendTo
                ON OfficeSendTo.idfOffice = Samples.idfSendToOffice
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000158) sampleKind
                ON sampleKind.idfsReference = Samples.idfsSampleKind
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000015) sampleStatus
                ON sampleStatus.idfsReference = Samples.idfsSampleStatus
            LEFT JOIN dbo.FN_GBL_REFERENCEREPAIR(@LangID, 19000097) TestName
                ON TestName.idfsReference = t.idfsTestName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000001) tstatus
                ON tstatus.idfsReference = t.idfsTestStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000096) tresult
                ON tresult.idfsReference = t.idfsTestResult
            LEFT JOIN dbo.tlbTestValidation tv
                ON tv.idfTesting = t.idfTesting
                   AND tv.intRowStatus = 0
            LEFT JOIN dbo.tstUserTable u
                ON (
                       tv.idfInterpretedByPerson = u.idfPerson
                       or tv.idfValidatedByPerson = u.idfPerson
                   )
                   and u.intRowStatus = 0
            LEFT JOIN dbo.tlbPerson p
                ON (
                       p.idfPerson = tv.idfInterpretedByPerson
                       or p.idfPerson = tv.idfValidatedByPerson
                   )
                   and p.intRowStatus = 0
            LEFT JOIN dbo.tlbPerson testedbyPerson
                ON (testedbyPerson.idfPerson = t.idfTestedByPerson)
            LEFT JOIN dbo.FN_GBL_INSTITUTION(@LangID) testedByOffice
                ON testedByOffice.idfOffice = t.idfTestedByOffice
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000095) testCat
                ON testCat.idfsReference = t.idfsTestCategory
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000106) testinterpretedstatus
                ON testinterpretedstatus.idfsReference = tv.idfsInterpretedStatus
            LEFT JOIN dbo.tlbPerson validatedByPerson
                ON (validatedByPerson.idfPerson = t.idfValidatedByPerson)
        WHERE Samples.idfHumanCase = @idfHumanCase
              AND Samples.intRowStatus = 0
              and t.idfHumanCase is not null
              AND t.intRowStatus = 0
              AND t.idfsTestStatus <> 10001007; -- Deleted
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_ILI_Aggregate_GetList]...';


GO
-- ================================================================================================
-- Name: USP_ILI_Aggregate_GetList
--
-- Description: Get ILI aggregate list for the ILI aggregate use cases
--          
-- Author: Arnold Kennedy
--
-- Revision History
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Arnold Kennedy   03/21/2019 Initial release.
-- Arnold Kennedy	04/16/2019 Updates for details added
-- Stephen Long     01/26/2020 Changed site ID to site list parameter for site filtration.
-- Ann Xiong		02/28/2020 Modified to get a list of rows instead of one single row from table 
--                             tlbBasicSyndromicSurveillanceAggregateDetail 
-- Ann Xiong		03/06/2020 Fixed NULL HospitalName
-- Stephen Long     11/29/2020 Added configurable site filtration rules.
-- Stephen Long     12/13/2020 Added apply configurable filtration indicator parameter.
-- Stephen Long     04/08/2021 Added updated pagination and location hierarchy.
-- Leo Tracchia		08/17/2021 Added LegacyFormID parameter for search and added distinct select
-- Leo Tracchia		03/11/2022 Added check for intRowStatus
-- Leo Tracchia		07/11/2022 Modified to return correct record counts for pagination
-- Leo Tracchia		07/20/2022 changed AggregateHeaderKey to bigint 
-- Stephen Long     09/22/2022 Add check for "0" page size.  If "0", then set to 1.
-- Stephen Long     01/13/2023 Updated for site filtration queries.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ILI_Aggregate_GetList]
(
    @LanguageID NVARCHAR(50),
    @FormID NVARCHAR(200),
    @LegacyFormID NVARCHAR(200),
    @AggregateHeaderID BIGINT = NULL,
    @HospitalID BIGINT = NULL,
    @StartDate DATETIME = NULL,
    @FinishDate DATETIME = NULL,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT,
    @UserEmployeeID BIGINT,
    @ApplySiteFiltrationIndicator BIT = 0,
    @SortColumn NVARCHAR(30) = 'FormID',
    @SortOrder NVARCHAR(4) = 'DESC',
    @PageNumber INT = 1,
    @PageSize INT = 10
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @firstRec INT,
            @lastRec INT;

    IF @PageSize = 0
    BEGIN
        SET @PageSize = 1;
    END

    SET @firstRec = (@PageNumber - 1) * @PageSize;
    SET @lastRec = (@PageNumber * @PageSize + 1);

    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );

    DECLARE @TempResultsTable TABLE
    (
        AggregateHeaderKey BIGINT not null,
        FormID NVARCHAR(200),
        LegacyFormID NVARCHAR(200),
        DateEntered NVARCHAR(200),
        DateLastSaved NVARCHAR(200),
        UserName NVARCHAR(200),
        OrganizationName NVARCHAR(200),
        [Year] INT,
        [Week] INT,
        StartDate DATETIME,
        EndDate DATETIME,
        ILITablesList NVARCHAR(MAX),
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL,
        TotalCount INT,
        CurrentPage INT
    );

    BEGIN TRY
        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        INSERT INTO @Results
        SELECT DISTINCT
            ah.idfAggregateHeader,
            1,
            1,
            1,
            1,
            1
        FROM dbo.tlbBasicSyndromicSurveillanceAggregateHeader ah
            LEFT JOIN dbo.tlbBasicSyndromicSurveillanceAggregateDetail ad
                ON ah.idfAggregateHeader = ad.idfAggregateHeader
        WHERE ah.intRowStatus = 0
              AND (
                      @AggregateHeaderID IS NULL
                      OR ah.idfAggregateHeader = @AggregateHeaderID
                  )
              AND (
                      ah.strFormID LIKE '%' + @FormID + '%'
                      OR @FormID IS NULL
                  )
              AND (
                      ah.LegacyFormID LIKE '%' + @LegacyFormID + '%'
                      OR @LegacyFormID IS NULL
                  )
              AND (
                      ah.idfsSite = @UserSiteID
                      OR (@UserSiteID IS NULL)
                  )
              AND (
                      @HospitalID IS NULL
                      OR ad.idfHospital = @HospitalID
                  )
              AND (
                      (
                          (
                              @StartDate IS NOT NULL
                              AND @FinishDate IS NOT NULL
                          )
                          AND (
                                  ah.datStartDate >= @StartDate
                                  AND ah.datFinishDate <= @FinishDate
                              )
                      )
                      OR (
                             @StartDate IS NOT NULL
                             AND @FinishDate IS NULL
                             AND ah.datStartDate >= @StartDate
                         )
                      OR (
                             @StartDate IS NULL
                             AND @FinishDate IS NOT NULL
                             AND ah.datFinishDate <= @FinishDate
                         )
                      OR (
                             @StartDate IS NULL
                             AND @FinishDate IS NULL
                         )
                  );

        -- =======================================================================================
        -- CONFIGURABLE FILTRATION RULES
        -- 
        -- Apply configurable filtration rules for use case SAUC34. Some of these rules may 
        -- overlap the default rules.
        -- =======================================================================================
        IF @ApplySiteFiltrationIndicator = 1
        BEGIN
            --
            -- Apply at the user's site group level, granted by a site group.
            --
            INSERT INTO @Results
            SELECT ah.idfAggregateHeader,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbBasicSyndromicSurveillanceAggregateHeader ah
                INNER JOIN dbo.tflSiteToSiteGroup AS grantingSGS
                    ON grantingSGS.idfsSite = ah.idfsSite
                INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                    ON userSiteGroup.idfsSite = @UserSiteID
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ah.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site level, granted by a site group.
            --
            INSERT INTO @Results
            SELECT ah.idfAggregateHeader,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbBasicSyndromicSurveillanceAggregateHeader ah
                INNER JOIN dbo.tflSiteToSiteGroup AS grantingSGS
                    ON grantingSGS.idfsSite = ah.idfsSite
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ah.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's employee group level, granted by a site group.
            --
            INSERT INTO @Results
            SELECT ah.idfAggregateHeader,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbBasicSyndromicSurveillanceAggregateHeader ah
                INNER JOIN dbo.tflSiteToSiteGroup AS grantingSGS
                    ON grantingSGS.idfsSite = ah.idfsSite
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ah.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's ID level, granted by a site group.
            --
            INSERT INTO @Results
            SELECT ah.idfAggregateHeader,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbBasicSyndromicSurveillanceAggregateHeader ah
                INNER JOIN dbo.tflSiteToSiteGroup AS grantingSGS
                    ON grantingSGS.idfsSite = ah.idfsSite
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ah.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site group level, granted by a site.
            --
            INSERT INTO @Results
            SELECT ah.idfAggregateHeader,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbBasicSyndromicSurveillanceAggregateHeader ah
                INNER JOIN dbo.tflSiteToSiteGroup sgs
                    ON sgs.idfsSite = @UserSiteID
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ah.intRowStatus = 0
                  AND sgs.idfsSite = ah.idfsSite;

            -- 
            -- Apply at the user's site level, granted by a site.
            --
            INSERT INTO @Results
            SELECT ah.idfAggregateHeader,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbBasicSyndromicSurveillanceAggregateHeader ah
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ah.intRowStatus = 0
                  AND a.GrantingActorSiteID = ah.idfsSite;

            -- 
            -- Apply at the user's employee group level, granted by a site.
            --
            INSERT INTO @Results
            SELECT ah.idfAggregateHeader,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbBasicSyndromicSurveillanceAggregateHeader ah
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ah.intRowStatus = 0
                  AND a.GrantingActorSiteID = ah.idfsSite;

            -- 
            -- Apply at the user's ID level, granted by a site.
            --
            INSERT INTO @Results
            SELECT ah.idfAggregateHeader,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbBasicSyndromicSurveillanceAggregateHeader ah
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ah.intRowStatus = 0
                  AND a.GrantingActorSiteID = ah.idfsSite;
        END;

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT ah.idfAggregateHeader
            FROM dbo.tlbBasicSyndromicSurveillanceAggregateHeader ah
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = ah.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE ah.intRowStatus = 0
                  AND oa.idfsObjectOperation = 10059003 -- Read permission
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        INSERT INTO @Results
        SELECT ah.idfAggregateHeader,
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = ah.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = ah.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = ah.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = ah.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = ah.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbBasicSyndromicSurveillanceAggregateHeader ah
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = ah.idfsSite
                   AND oa.intRowStatus = 0
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE ah.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserGroupSitePermissions WHERE SiteID = ah.idfsSite
        );

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbBasicSyndromicSurveillanceAggregateHeader ah
                ON ah.idfAggregateHeader = res.ID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = ah.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003; -- Read permission

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        INSERT INTO @Results
        SELECT ah.idfAggregateHeader,
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = ah.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = ah.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = ah.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = ah.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = ah.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbBasicSyndromicSurveillanceAggregateHeader ah
        WHERE ah.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserSitePermissions WHERE SiteID = ah.idfsSite
        );

        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT ah.idfAggregateHeader
            FROM dbo.tlbBasicSyndromicSurveillanceAggregateHeader ah
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = ah.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        INSERT INTO @TempResultsTable
        SELECT DISTINCT
            ah.idfAggregateHeader AS AggregateHeaderKey,
            ah.strFormID AS FormID,
            ah.LegacyFormID,
            ah.datDateEntered AS DateEntered,
            ah.datDateLastSaved AS DateLastSaved,
            p.strFamilyName + ', ' + p.strFirstName AS UserName,
            br.strDefault AS OrganizationName,
            ah.intYear AS [Year],
            ah.intWeek AS [Week],
            ah.datStartDate AS StartDate,
            ah.datFinishDate AS EndDate,
            ILITablesList = STUFF(
                                     (
                                         SELECT ', ' + hr.strDefault
                                         FROM dbo.tlbBasicSyndromicSurveillanceAggregateDetail ad
                                             LEFT JOIN dbo.tlbOffice h
                                                 ON h.idfOffice = ad.idfHospital
                                             LEFT JOIN dbo.trtBaseReference hr
                                                 ON h.idfsOfficeName = hr.idfsBaseReference
                                         WHERE ad.idfAggregateHeader = ah.idfAggregateHeader
                                               AND ad.intRowStatus = 0
                                         GROUP BY hr.strDefault
                                         FOR XML PATH(''), TYPE
                                     ).value('.[1]', 'NVARCHAR(MAX)'),
                                     1,
                                     2,
                                     ''
                                 ),
            MAX(res.ReadPermissionIndicator),
            MAX(res.AccessToPersonalDataPermissionIndicator),
            MAX(res.AccessToGenderAndAgeDataPermissionIndicator),
            MAX(res.WritePermissionIndicator),
            MAX(res.DeletePermissionIndicator),
            (
                SELECT COUNT(*)
                FROM dbo.tlbBasicSyndromicSurveillanceAggregateHeader
                WHERE intRowStatus = 0
            ) AS TotalCount,
            CurrentPage = @PageNumber
        FROM @Results res
            INNER JOIN dbo.tlbBasicSyndromicSurveillanceAggregateHeader ah
                ON ah.idfAggregateHeader = res.ID
            LEFT JOIN dbo.tlbPerson p
                ON p.idfPerson = ah.idfEnteredBy
            LEFT JOIN dbo.tlbOffice o
                ON o.idfOffice = p.idfInstitution
            LEFT JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = o.idfsOfficeAbbreviation
            LEFT JOIN dbo.tlbBasicSyndromicSurveillanceAggregateDetail ad
                ON ah.idfAggregateHeader = ad.idfAggregateHeader
            LEFT JOIN dbo.tlbOffice h
                ON h.idfOffice = ad.idfHospital
            LEFT JOIN dbo.trtBaseReference hr
                ON h.idfsOfficeName = hr.idfsBaseReference
        WHERE res.ReadPermissionIndicator IN ( 1, 3, 5 )
        GROUP BY ah.idfAggregateHeader,
                 ah.strFormID,
                 ah.LegacyFormID,
                 ah.datDateEntered,
                 ah.datDateLastSaved,
                 p.strFamilyName,
                 p.strFirstName,
                 br.strDefault,
                 ah.intYear,
                 ah.intWeek,
                 ah.datStartDate,
                 ah.datFinishDate;

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        WITH CTEResults
        AS (SELECT ROW_NUMBER() OVER (ORDER BY CASE
                                                   WHEN @SortColumn = 'FormID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       trt.FormID
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'FormID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       trt.FormID
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'StartDate'
                                                        AND @SortOrder = 'ASC' THEN
                                                       trt.StartDate
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'StartDate'
                                                        AND @SortOrder = 'DESC' THEN
                                                       trt.StartDate
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'EndDate'
                                                        AND @SortOrder = 'ASC' THEN
                                                       trt.EndDate
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EndDate'
                                                        AND @SortOrder = 'DESC' THEN
                                                       trt.EndDate
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'LegacyFormID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       trt.LegacyFormID
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'LegacyFormID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       trt.LegacyFormID
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'ILITablesList'
                                                        AND @SortOrder = 'ASC' THEN
                                                       trt.ILITablesList
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'ILITablesList'
                                                        AND @SortOrder = 'DESC' THEN
                                                       trt.ILITablesList
                                               END DESC
                                     ) AS ROWNUM,
                   COUNT(*) OVER () AS TotalRowCount,
                   trt.AggregateHeaderKey,
                   trt.FormID,
                   trt.LegacyFormID,
                   trt.DateEntered,
                   trt.DateLastSaved,
                   trt.UserName,
                   trt.OrganizationName,
                   trt.[Year],
                   trt.[Week],
                   trt.StartDate,
                   trt.EndDate,
                   trt.ILITablesList,
                   trt.ReadPermissionIndicator,
                   trt.AccessToPersonalDataPermissionIndicator,
                   trt.AccessToGenderAndAgeDataPermissionIndicator,
                   trt.WritePermissionIndicator,
                   trt.DeletePermissionIndicator,
                   trt.TotalCount,
                   trt.CurrentPage
            FROM @TempResultsTable trt
           )
        SELECT res.ROWNUM,
               TotalRowCount,
               res.AggregateHeaderKey,
               res.FormID,
               res.LegacyFormID,
               res.DateEntered,
               res.DateLastSaved,
               res.UserName,
               res.OrganizationName,
               res.Year,
               res.Week,
               res.StartDate,
               res.EndDate,
               res.ILITablesList,
               CASE
                   WHEN ReadPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN ReadPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN ReadPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN ReadPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, ReadPermissionIndicator)
               END AS ReadPermissionindicator,
               CASE
                   WHEN AccessToPersonalDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN AccessToPersonalDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN AccessToPersonalDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN AccessToPersonalDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, AccessToPersonalDataPermissionIndicator)
               END AS AccessToPersonalDataPermissionIndicator,
               CASE
                   WHEN AccessToGenderAndAgeDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN AccessToGenderAndAgeDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN AccessToGenderAndAgeDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN AccessToGenderAndAgeDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, AccessToGenderAndAgeDataPermissionIndicator)
               END AS AccessToGenderAndAgeDataPermissionIndicator,
               CASE
                   WHEN WritePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN WritePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN WritePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN WritePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, WritePermissionIndicator)
               END AS WritePermissionIndicator,
               CASE
                   WHEN DeletePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN DeletePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN DeletePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN DeletePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, DeletePermissionIndicator)
               END AS DeletePermissionIndicator,
               TotalPages = (TotalRowCount / @pageSize) + IIF(TotalRowCount % @pageSize > 0, 1, 0),
               CurrentPage = @PageNumber
        FROM CTEResults res
        WHERE RowNum > @firstRec
              AND RowNum < @lastRec;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_APPROVAL_ADVANCED_SEARCH_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_APPROVAL_ADVANCED_SEARCH_GETList
--
-- Description:	Get approval advanced search list for the laboratory module use case LUC13.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     02/27/2019 Initial relase.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     10/07/2019 Removed @CampaignID variable; just use EIDSSReportCampaignSessionID.
-- Stephen Long     01/21/2020 Converted site ID to site list for site filtration.
-- Stephen Long     03/11/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     04/16/2020 Added sample and test list parameters and where clause criteria.
-- Stephen Long     04/20/2020 Removed farm and herd left joins.
-- Stephen Long     04/23/2020 Correction on disease ID and disease name; add vector surveillance 
--                             session.
-- Stephen Long     08/25/2020 Added criteria to ignore time on date betweens.
-- Stephen Long     09/02/2020 Changed accessioned indicator from int to varchar to handle searches
--                             with un-accessioned and accessioned samples in the same query.
-- Stephen Long     10/30/2020 Remove unneeded joins.
-- Stephen Long     11/30/2020 Changed site list to site ID and bigint and made required.
-- Stephen Long     12/16/2020 Changed join for vector surveillance session diseases to the sample
--                             table.
-- Stephen Long     12/23/2020 Correction on accession indicator list where criteria.
-- Stephen Long     12/31/2020 Change function on reference data to handle inactive records.
-- Stephen Long     01/03/2020 Added option recompile to select queries.
-- Stephen Long     01/21/2021 Changed counts to use group by in sub-query instead of count 
--                             distinct and added with recompile to handle number of nullable 
--                             parameters.
-- Stephen Long     01/24/2021 Correct where criteria on accession indicator list.
-- Stephen Long     09/25/2021 Added new pagination and order by.
-- Stephen Long     10/14/2021 Changed report or session type ID to bigint.
-- Stephen Long     11/18/2021 Added action requested ID to the query.
-- Stephen Long     12/08/2021 Changed pagination logic and removed option recompile.
-- Stephen Long     12/15/2021 Added configurable filtration rules.
-- Stephen Long     01/03/2022 Corrected sample status type to use the correct field.
-- Stephen Long     02/10/2022 Removed unneeded joins on the disease fields.
-- Stephen Long     05/17/2022 Removed primary key from monitoring and vector session disease 
--                             table variables.
-- Stephen Long     05/20/2022 Added string agg to session diseases.
-- Mike Kornegay	06/14/2022 Added new additional SessionCategoryID for Vet Avian / Vet Livestock 
--                             breakout.
-- Stephen Long     07/26/2022 Updated case statement on disease id and name.
-- Stephen Long     08/11/2022 Changed monitoring session disease join from inner to left.
-- Stephen Long     08/12/2022 Removed where criteria for surveillance type of both; de-activated 
--                             base reference record.
-- Stephen Long     08/26/2022 Added additional checks on accession and entered date range checks.
-- Stephen Long     09/28/2022 Added translated value for action requested name.
-- Stephen Long     10/11/2022 Added check for closed batch test status to display test records 
--                             ready for validation.
-- Stephen Long     10/21/2022 Added display disease names separated by comma.
-- Stephen Long     10/23/2022 Added check for non-laboratory test indicator of false.
-- Stephen Long     12/29/2022 Removed sorting and pagination logic; business decision so records
--                             pending save could be shown at the top of the list prior to saving.
-- Stephen Long     01/11/2023 Updated for site filtration queries.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_APPROVAL_ADVANCED_SEARCH_GETList]
(
    @LanguageID NVARCHAR(50),
    @ReportOrSessionTypeID BIGINT = NULL,
    @SurveillanceTypeID BIGINT = NULL,
    @SampleStatusTypeList VARCHAR(MAX) = NULL,
    @AccessionedIndicatorList VARCHAR(3) = NULL,
    @EIDSSLocalOrFieldSampleID NVARCHAR(200) = NULL,
    @EIDSSReportCampaignOrSessionID NVARCHAR(200) = NULL,
    @SentToOrganizationID BIGINT,
    @TransferredToOrganizationID BIGINT = NULL,
    @EIDSSTransferID NVARCHAR(200) = NULL,
    @ResultsReceivedFromID BIGINT = NULL,
    @DateFrom DATETIME = NULL,
    @DateTo DATETIME = NULL,
    @EIDSSLaboratorySampleID NVARCHAR(200) = NULL,
    @SampleTypeID BIGINT = NULL,
    @TestNameTypeID BIGINT = NULL,
    @DiseaseID BIGINT = NULL,
    @TestStatusTypeID BIGINT = NULL,
    @TestResultTypeID BIGINT = NULL,
    @TestResultDateFrom DATETIME = NULL,
    @TestResultDateTo DATETIME = NULL,
    @PatientName NVARCHAR(200) = NULL,
    @FarmOwnerName NVARCHAR(200) = NULL,
    @SpeciesTypeID BIGINT = NULL,
    @SampleList VARCHAR(MAX) = NULL,
    @TestList VARCHAR(MAX) = NULL,
    @UserID BIGINT,
    @UserEmployeeID BIGINT,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT = NULL,
    @UserSiteGroupID BIGINT = NULL
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @MonitoringSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL,
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @VectorSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL,
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @Results TABLE
    (
        ID INT NOT NULL IDENTITY,
        SampleID BIGINT NOT NULL,
        TestID BIGINT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID INT NOT NULL IDENTITY,
        SampleID BIGINT NOT NULL,
        TestID BIGINT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @LanguageCode BIGINT,
            @SampleDeletion NVARCHAR(MAX),
            @SampleDestruction NVARCHAR(MAX),
            @TestDeletion NVARCHAR(MAX),
            @Validation NVARCHAR(MAX);

    BEGIN TRY
        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        SET @LanguageCode = dbo.FN_GBL_LanguageCode_Get(@LanguageID);
        SET @SampleDeletion =
        (
            SELECT COALESCE(rt.strResourceString, r.strResourceName)
            FROM dbo.trtResource r
                LEFT JOIN dbo.trtResourceTranslation rt
                    ON rt.idfsResource = r.idfsResource
                       AND rt.idfsLanguage = @LanguageCode
                       AND rt.intRowStatus = 0
            WHERE r.idfsResource = 812
        );
        SET @SampleDestruction =
        (
            SELECT COALESCE(rt.strResourceString, r.strResourceName)
            FROM dbo.trtResource r
                LEFT JOIN dbo.trtResourceTranslation rt
                    ON rt.idfsResource = r.idfsResource
                       AND rt.idfsLanguage = @LanguageCode
                       AND rt.intRowStatus = 0
            WHERE r.idfsResource = 1040
        );
        SET @TestDeletion =
        (
            SELECT COALESCE(rt.strResourceString, r.strResourceName)
            FROM dbo.trtResource r
                LEFT JOIN dbo.trtResourceTranslation rt
                    ON rt.idfsResource = r.idfsResource
                       AND rt.idfsLanguage = @LanguageCode
                       AND rt.intRowStatus = 0
            WHERE r.idfsResource = 4493
        );
        SET @Validation =
        (
            SELECT COALESCE(rt.strResourceString, r.strResourceName)
            FROM dbo.trtResource r
                LEFT JOIN dbo.trtResourceTranslation rt
                    ON rt.idfsResource = r.idfsResource
                       AND rt.idfsLanguage = @LanguageCode
                       AND rt.intRowStatus = 0
            WHERE r.idfsResource = 4492
        );

        INSERT INTO @MonitoringSessionDiseases
        SELECT MonitoringSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames,
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames
        FROM dbo.FN_LAB_MONITORING_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY MonitoringSessionID;

        INSERT INTO @VectorSessionDiseases
        SELECT VectorSurveillanceSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames,
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames
        FROM dbo.FN_LAB_VECTOR_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY VectorSurveillanceSessionID;

        INSERT INTO @Results
        SELECT m.idfMaterial,
               NULL,
               1,
               1,
               1,
               1,
               1
        FROM dbo.tlbMaterial m
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
        WHERE m.intRowStatus = 0
              AND (
                      m.idfsSampleStatus = 10015002 --Marked for Deletion 
                      OR m.idfsSampleStatus = 10015003 --Marked for Destruction
                  )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      m.idfSendToOffice = @UserOrganizationID
                      OR @UserOrganizationID IS NULL
                  )
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  );

        -- =======================================================================================
        -- CONFIGURABLE FILTRATION RULES
        -- 
        -- Apply configurable filtration rules for use case SAUC34. Some of these rules may 
        -- overlap the non-configurable rules.
        -- =======================================================================================
        --
        -- Apply at the user's site group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               NULL,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                ON userSiteGroup.idfsSite = @UserSiteID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               NULL,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's employee group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               NULL,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's ID level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               NULL,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               NULL,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup sgs
                ON sgs.idfsSite = @UserSiteID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND sgs.idfsSite = m.idfsSite;

        -- 
        -- Apply at the user's site level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               NULL,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND a.GrantingActorSiteID = m.idfsSite;

        -- 
        -- Apply at the user's employee group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               NULL,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND a.GrantingActorSiteID = m.idfsSite;

        -- 
        -- Apply at the user's ID level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               NULL,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND a.GrantingActorSiteID = m.idfsSite;

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = m.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE m.intRowStatus = 0
                  AND oa.idfsObjectOperation = 10059003 -- Read permission
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               NULL, 
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbMaterial m
        WHERE m.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserGroupSitePermissions WHERE SiteID = m.idfsSite
        )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  );

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.ID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = m.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003; -- Read permission

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               NULL,
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbMaterial m
        WHERE m.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserSitePermissions WHERE SiteID = m.idfsSite
        )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  );

        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = m.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        INSERT INTO @FinalResults
        SELECT m.idfMaterial,
               NULL,
               MAX(ReadPermissionIndicator),
               MAX(AccessToPersonalDataPermissionIndicator),
               MAX(AccessToGenderAndAgeDataPermissionIndicator),
               MAX(WritePermissionIndicator),
               MAX(DeletePermissionIndicator)
        FROM @Results res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
            LEFT JOIN dbo.tlbMonitoringSession ms
                ON ms.idfMonitoringSession = m.idfMonitoringSession
                   AND ms.intRowStatus = 0
            LEFT JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                ON msd.idfMonitoringSession = ms.idfMonitoringSession
                   AND msd.intRowStatus = 0
            LEFT JOIN @VectorSessionDiseases vsDiseases
                ON vsDiseases.ID = m.idfVectorSurveillanceSession
            LEFT JOIN dbo.tlbCampaign c
                ON c.idfCampaign = ms.idfCampaign
                   AND c.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = m.idfMaterial
                   AND tom.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOUT tro
                ON tro.idfTransferOut = tom.idfTransferOut
                   AND tro.intRowStatus = 0
            LEFT JOIN dbo.tlbDepartment d
                ON d.idfDepartment = m.idfInDepartment
                   AND d.intRowStatus = 0
            LEFT JOIN dbo.tlbSpecies species
                ON species.idfSpecies = m.idfSpecies
                   AND species.intRowStatus = 0
        WHERE res.ReadPermissionIndicator IN ( 1, 3, 5 )
              AND (
                      (m.idfMaterial IN (
                                            SELECT CAST([Value] AS BIGINT)
                                            FROM dbo.FN_GBL_SYS_SplitList(@SampleList, NULL, ',')
                                        )
                      )
                      OR (@SampleList IS NULL)
                  )
              AND (
                      (
                          @ReportOrSessionTypeID = 10012001 --Human Disease Report
                          AND (
                                  (m.idfHumanCase IS NOT NULL)
                                  OR (
                                         m.idfMonitoringSession IS NOT NULL
                                         AND ms.SessionCategoryID = 10502001 --Human Active Surveillance Session
                                     )
                              )
                      )
                      OR (
                             @ReportOrSessionTypeID = 10012006 --Vector Surveillance Session
                             AND m.idfVectorSurveillanceSession IS NOT NULL
                         )
                      OR (
                             @ReportOrSessionTypeID = 10012005 --Veterinary Disease Report
                             AND (
                                     (m.idfVetCase IS NOT NULL)
                                     OR (
                                            m.idfMonitoringSession IS NOT NULL
                                            AND ms.SessionCategoryID IN ( 10502002, 10502009 ) --Veterinary Active Surveillance Session (Avian and Livestock)
                                        )
                                 )
                         )
                      OR (@ReportOrSessionTypeID IS NULL)
                  )
              AND (
                      (
                          @SurveillanceTypeID = 4578940000001 --Active
                          AND (
                                  m.idfMonitoringSession IS NOT NULL
                                  OR m.idfVectorSurveillanceSession IS NOT NULL
                              )
                      )
                      OR (
                             @SurveillanceTypeID = 4578940000002 --Passive
                             AND (
                                     m.idfHumanCase IS NOT NULL
                                     OR m.idfVetCase IS NOT NULL
                                 )
                         )
                      OR (@SurveillanceTypeID IS NULL)
                  )
              AND (
                      (
                          (
                              m.blnAccessioned = @AccessionedIndicatorList
                              AND m.idfsAccessionCondition IS NULL
                          )
                          OR (
                                 @AccessionedIndicatorList IS NULL
                                 AND @SampleStatusTypeList IS NULL
                             )
                      )
                      OR (
                             (
                                 (m.idfsSampleStatus IN (
                                                            SELECT CAST([Value] AS BIGINT)
                                                            FROM dbo.FN_GBL_SYS_SplitList(
                                                                                             @SampleStatusTypeList,
                                                                                             NULL,
                                                                                             ','
                                                                                         )
                                                        )
                                 )
                                 OR (
                                        m.idfsAccessionCondition IN (
                                                                        SELECT CAST([Value] AS BIGINT)
                                                                        FROM dbo.FN_GBL_SYS_SplitList(
                                                                                                         @SampleStatusTypeList,
                                                                                                         NULL,
                                                                                                         ','
                                                                                                     )
                                                                    )
                                        AND (
                                                m.idfsSampleStatus IS NULL
                                                OR m.idfsSampleStatus = 10015007 --In Repository
                                            )
                                    )
                             )
                             OR (
                                    @SampleStatusTypeList IS NULL
                                    AND @AccessionedIndicatorList IS NULL
                                )
                         )
                  )
              AND (
                      m.idfSendToOffice = @SentToOrganizationID
                      OR @SentToOrganizationID IS NULL
                  )
              AND (
                      tro.idfSendToOffice = @TransferredToOrganizationID
                      OR @TransferredToOrganizationID IS NULL
                  )
              AND (
                      t.idfTestedByOffice = @ResultsReceivedFromID
                      OR @ResultsReceivedFromID IS NULL
                  )
              AND (
                      m.idfsSampleType = @SampleTypeID
                      OR @SampleTypeID IS NULL
                  )
              AND (
                      t.idfsTestName = @TestNameTypeID
                      OR @TestNameTypeID IS NULL
                  )
              AND (
                      msd.idfsDiagnosis = @DiseaseID
                      OR @DiseaseID IN (
                                           SELECT CAST([Value] AS BIGINT)
                                           FROM dbo.FN_GBL_SYS_SplitList(vsDiseases.DiseaseIdentifiers, NULL, ',')
                                       )
                      OR m.DiseaseID = @DiseaseID
                      OR @DiseaseID IS NULL
                  )
              AND (
                      t.idfsTestStatus = @TestStatusTypeID
                      OR @TestStatusTypeID IS NULL
                  )
              AND (
                      t.idfsTestResult = @TestResultTypeID
                      OR @TestResultTypeID IS NULL
                  )
              AND (
                      species.idfsSpeciesType = @SpeciesTypeID
                      OR @SpeciesTypeID IS NULL
                  )
              AND (
                      (t.datConcludedDate
              BETWEEN @TestResultDateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @TestResultDateTo)))
                      )
                      OR (
                             @TestResultDateFrom IS NULL
                             OR @TestResultDateTo IS NULL
                         )
                  )
              AND (
                      (
                          m.strCalculatedCaseID LIKE '%' + @EIDSSReportCampaignOrSessionID + '%'
                          OR c.strCampaignID LIKE '%' + @EIDSSReportCampaignOrSessionID + '%'
                      )
                      OR (@EIDSSReportCampaignOrSessionID IS NULL)
                  )
              AND (
                      m.strCalculatedHumanName LIKE '%' + @PatientName + '%'
                      OR @PatientName IS NULL
                  )
              AND (
                      (m.strCalculatedHumanName LIKE '%' + @FarmOwnerName + '%')
                      OR (@FarmOwnerName IS NULL)
                  )
              AND (
                      m.strFieldBarcode LIKE '%' + @EIDSSLocalOrFieldSampleID + '%'
                      OR @EIDSSLocalOrFieldSampleID IS NULL
                  )
              AND (
                      tro.strBarcode LIKE '%' + @EIDSSTransferID + '%'
                      OR @EIDSSTransferID IS NULL
                  )
              AND (
                      m.strBarcode LIKE '%' + @EIDSSLaboratorySampleID + '%'
                      OR @EIDSSLaboratorySampleID IS NULL
                  )
        GROUP BY m.idfMaterial;

        DELETE FROM @Results;

        -- Test Approvals --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               1,
               1,
               1,
               1,
               1
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestStatus IN (   10001004, --Preliminary 
                                          10001008
                                      ) --Marked for Deletion
              AND (
                      t.idfBatchTest IS NULL
                      OR (
                             t.idfBatchTest IS NOT NULL
                             AND b.idfsBatchStatus = 10001001
                         ) -- Closed
                  )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      m.idfSendToOffice = @UserOrganizationID
                      OR @UserOrganizationID IS NULL
                  )
              AND (
                      (
                          m.blnAccessioned = 1
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.blnAccessioned = 0
                             AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  );

        -- =======================================================================================
        -- CONFIGURABLE FILTRATION RULES
        -- 
        -- Apply configurable filtration rules for use case SAUC34. Some of these rules may 
        -- overlap the non-configurable rules.
        -- =======================================================================================
        --
        -- Apply at the user's site group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                ON userSiteGroup.idfsSite = @UserSiteID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestStatus IN (   10001004, --Preliminary 
                                          10001008
                                      ) --Marked for Deletion
              AND (
                      t.idfBatchTest IS NULL
                      OR (
                             t.idfBatchTest IS NOT NULL
                             AND b.idfsBatchStatus = 10001001
                         ) -- Closed
                  )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.blnAccessioned = 1
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.blnAccessioned = 0
                             AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestStatus IN (   10001004, --Preliminary 
                                          10001008
                                      ) --Marked for Deletion
              AND (
                      t.idfBatchTest IS NULL
                      OR (
                             t.idfBatchTest IS NOT NULL
                             AND b.idfsBatchStatus = 10001001
                         ) -- Closed
                  )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.blnAccessioned = 1
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.blnAccessioned = 0
                             AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's employee group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestStatus IN (   10001004, --Preliminary 
                                          10001008
                                      ) --Marked for Deletion
              AND (
                      t.idfBatchTest IS NULL
                      OR (
                             t.idfBatchTest IS NOT NULL
                             AND b.idfsBatchStatus = 10001001
                         ) -- Closed
                  )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.blnAccessioned = 1
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.blnAccessioned = 0
                             AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's ID level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestStatus IN (   10001004, --Preliminary 
                                          10001008
                                      ) --Marked for Deletion
              AND (
                      t.idfBatchTest IS NULL
                      OR (
                             t.idfBatchTest IS NOT NULL
                             AND b.idfsBatchStatus = 10001001
                         ) -- Closed
                  )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.blnAccessioned = 1
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.blnAccessioned = 0
                             AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup sgs
                ON sgs.idfsSite = @UserSiteID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestStatus IN (   10001004, --Preliminary 
                                          10001008
                                      ) --Marked for Deletion
              AND (
                      t.idfBatchTest IS NULL
                      OR (
                             t.idfBatchTest IS NOT NULL
                             AND b.idfsBatchStatus = 10001001
                         ) -- Closed
                  )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.blnAccessioned = 1
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.blnAccessioned = 0
                             AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND sgs.idfsSite = m.idfsSite;

        -- 
        -- Apply at the user's site level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestStatus IN (   10001004, --Preliminary 
                                          10001008
                                      ) --Marked for Deletion
              AND (
                      t.idfBatchTest IS NULL
                      OR (
                             t.idfBatchTest IS NOT NULL
                             AND b.idfsBatchStatus = 10001001
                         ) -- Closed
                  )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.blnAccessioned = 1
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.blnAccessioned = 0
                             AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND a.GrantingActorSiteID = m.idfsSite;

        -- 
        -- Apply at the user's employee group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestStatus IN (   10001004, --Preliminary 
                                          10001008
                                      ) --Marked for Deletion
              AND (
                      t.idfBatchTest IS NULL
                      OR (
                             t.idfBatchTest IS NOT NULL
                             AND b.idfsBatchStatus = 10001001
                         ) -- Closed
                  )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.blnAccessioned = 1
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.blnAccessioned = 0
                             AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND a.GrantingActorSiteID = m.idfsSite;

        -- 
        -- Apply at the user's ID level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestStatus IN (   10001004, --Preliminary 
                                          10001008
                                      ) --Marked for Deletion
              AND (
                      t.idfBatchTest IS NULL
                      OR (
                             t.idfBatchTest IS NOT NULL
                             AND b.idfsBatchStatus = 10001001
                         ) -- Closed
                  )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.blnAccessioned = 1
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.blnAccessioned = 0
                             AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND a.GrantingActorSiteID = m.idfsSite;

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT t.idfTesting
            FROM dbo.tlbTesting t
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
                       AND m.intRowStatus = 0
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = m.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE t.intRowStatus = 0
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup -- Default role
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserGroupSitePermissions WHERE SiteID = m.idfsSite
        )
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestStatus IN (   10001004, --Preliminary 
                                          10001008
                                      ) --Marked for Deletion
              AND (
                      t.idfBatchTest IS NULL
                      OR (
                             t.idfBatchTest IS NOT NULL
                             AND b.idfsBatchStatus = 10001001
                         ) -- Closed
                  )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.blnAccessioned = 1
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.blnAccessioned = 0
                             AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  );

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbTesting t
                ON t.idfTesting = res.ID
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = m.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003; -- Read permission

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserSitePermissions WHERE SiteID = m.idfsSite
        )
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestStatus IN (   10001004, --Preliminary 
                                          10001008
                                      ) --Marked for Deletion
              AND (
                      t.idfBatchTest IS NULL
                      OR (
                             t.idfBatchTest IS NOT NULL
                             AND b.idfsBatchStatus = 10001001
                         ) -- Closed
                  )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.blnAccessioned = 1
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.blnAccessioned = 0
                             AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  );

        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT t.idfTesting
            FROM dbo.tlbTesting t
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
                       AND m.intRowStatus = 0
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = m.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        INSERT INTO @FinalResults
        SELECT m.idfMaterial,
               t.idfTesting,
               MAX(ReadPermissionIndicator),
               MAX(AccessToPersonalDataPermissionIndicator),
               MAX(AccessToGenderAndAgeDataPermissionIndicator),
               MAX(WritePermissionIndicator),
               MAX(DeletePermissionIndicator)
        FROM @Results res
            INNER JOIN dbo.tlbTesting t
                ON t.idfTesting = res.TestID
            INNER JOIN dbo.tlbMaterial m
                ON t.idfMaterial = m.idfMaterial
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbMonitoringSession ms
                ON ms.idfMonitoringSession = m.idfMonitoringSession
                   AND ms.intRowStatus = 0
            LEFT JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                ON msd.idfMonitoringSession = ms.idfMonitoringSession
                   AND msd.intRowStatus = 0
            LEFT JOIN @VectorSessionDiseases vsDiseases
                ON vsDiseases.ID = m.idfVectorSurveillanceSession
            LEFT JOIN dbo.tlbCampaign c
                ON c.idfCampaign = ms.idfCampaign
                   AND c.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = m.idfMaterial
                   AND tom.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOUT tro
                ON tro.idfTransferOut = tom.idfTransferOut
                   AND tro.intRowStatus = 0
            LEFT JOIN dbo.tlbDepartment d
                ON d.idfDepartment = m.idfInDepartment
                   AND d.intRowStatus = 0
            LEFT JOIN dbo.tlbSpecies species
                ON species.idfSpecies = m.idfSpecies
                   AND species.intRowStatus = 0
        WHERE res.ReadPermissionIndicator IN ( 1, 3, 5 )
              AND (
                      t.idfTesting IN (
                                          SELECT CAST([Value] AS BIGINT)
                                          FROM dbo.FN_GBL_SYS_SplitList(@TestList, NULL, ',')
                                      )
                      OR @TestList IS NULL
                  )
              AND (
                      (
                          @ReportOrSessionTypeID = 10012001 --Human Disease Report
                          AND (
                                  (m.idfHumanCase IS NOT NULL)
                                  OR (
                                         m.idfMonitoringSession IS NOT NULL
                                         AND ms.SessionCategoryID = 10502001 --Human Active Surveillance Session
                                     )
                              )
                      )
                      OR (
                             @ReportOrSessionTypeID = 10012006 --Vector Surveillance Session
                             AND m.idfVectorSurveillanceSession IS NOT NULL
                         )
                      OR (
                             @ReportOrSessionTypeID = 10012005 --Veterinary Disease Report
                             AND (
                                     (m.idfVetCase IS NOT NULL)
                                     OR (
                                            m.idfMonitoringSession IS NOT NULL
                                            AND ms.SessionCategoryID IN ( 10502002, 10502009 ) --Veterinary Active Surveillance Session (Avian and Livestock)
                                        )
                                 )
                         )
                      OR (@ReportOrSessionTypeID IS NULL)
                  )
              AND (
                      (
                          @SurveillanceTypeID = 4578940000001 --Active
                          AND (
                                  m.idfMonitoringSession IS NOT NULL
                                  OR m.idfVectorSurveillanceSession IS NOT NULL
                              )
                      )
                      OR (
                             @SurveillanceTypeID = 4578940000002 --Passive
                             AND (
                                     m.idfHumanCase IS NOT NULL
                                     OR m.idfVetCase IS NOT NULL
                                 )
                         )
                      OR (@SurveillanceTypeID IS NULL)
                  )
              AND (
                      (
                          (
                              m.blnAccessioned = @AccessionedIndicatorList
                              AND m.idfsAccessionCondition IS NULL
                          )
                          OR (
                                 @AccessionedIndicatorList IS NULL
                                 AND @SampleStatusTypeList IS NULL
                             )
                      )
                      OR (
                             (
                                 (m.idfsSampleStatus IN (
                                                            SELECT CAST([Value] AS BIGINT)
                                                            FROM dbo.FN_GBL_SYS_SplitList(
                                                                                             @SampleStatusTypeList,
                                                                                             NULL,
                                                                                             ','
                                                                                         )
                                                        )
                                 )
                                 OR (
                                        m.idfsAccessionCondition IN (
                                                                        SELECT CAST([Value] AS BIGINT)
                                                                        FROM dbo.FN_GBL_SYS_SplitList(
                                                                                                         @SampleStatusTypeList,
                                                                                                         NULL,
                                                                                                         ','
                                                                                                     )
                                                                    )
                                        AND (
                                                m.idfsSampleStatus IS NULL
                                                OR m.idfsSampleStatus = 10015007 --In Repository
                                            )
                                    )
                             )
                             OR (
                                    @SampleStatusTypeList IS NULL
                                    AND @AccessionedIndicatorList IS NULL
                                )
                         )
                  )
              AND (
                      m.idfSendToOffice = @SentToOrganizationID
                      OR @SentToOrganizationID IS NULL
                  )
              AND (
                      tro.idfSendToOffice = @TransferredToOrganizationID
                      OR @TransferredToOrganizationID IS NULL
                  )
              AND (
                      t.idfTestedByOffice = @ResultsReceivedFromID
                      OR @ResultsReceivedFromID IS NULL
                  )
              AND (
                      m.idfsSampleType = @SampleTypeID
                      OR @SampleTypeID IS NULL
                  )
              AND (
                      t.idfsTestName = @TestNameTypeID
                      OR @TestNameTypeID IS NULL
                  )
              AND (
                      msd.idfsDiagnosis = @DiseaseID
                      OR @DiseaseID IN (
                                           SELECT CAST([Value] AS BIGINT)
                                           FROM dbo.FN_GBL_SYS_SplitList(vsDiseases.DiseaseIdentifiers, NULL, ',')
                                       )
                      OR m.DiseaseID = @DiseaseID
                      OR @DiseaseID IS NULL
                  )
              AND (
                      t.idfsTestStatus = @TestStatusTypeID
                      OR @TestStatusTypeID IS NULL
                  )
              AND (
                      t.idfsTestResult = @TestResultTypeID
                      OR @TestResultTypeID IS NULL
                  )
              AND (
                      species.idfsSpeciesType = @SpeciesTypeID
                      OR @SpeciesTypeID IS NULL
                  )
              AND (
                      (t.datConcludedDate
              BETWEEN @TestResultDateFrom AND @TestResultDateTo
                      )
                      OR (
                             @TestResultDateFrom IS NULL
                             OR @TestResultDateTo IS NULL
                         )
                  )
              AND (
                      (
                          m.strCalculatedCaseID LIKE '%' + @EIDSSReportCampaignOrSessionID + '%'
                          OR c.strCampaignID LIKE '%' + @EIDSSReportCampaignOrSessionID + '%'
                      )
                      OR (@EIDSSReportCampaignOrSessionID IS NULL)
                  )
              AND (
                      m.strCalculatedHumanName LIKE '%' + @PatientName + '%'
                      OR @PatientName IS NULL
                  )
              AND (
                      m.strCalculatedHumanName LIKE '%' + @FarmOwnerName + '%'
                      OR @FarmOwnerName IS NULL
                  )
              AND (
                      m.strFieldBarcode LIKE '%' + @EIDSSLocalOrFieldSampleID + '%'
                      OR @EIDSSLocalOrFieldSampleID IS NULL
                  )
              AND (
                      tro.strBarcode LIKE '%' + @EIDSSTransferID + '%'
                      OR @EIDSSTransferID IS NULL
                  )
              AND (
                      m.strBarcode LIKE '%' + @EIDSSLaboratorySampleID + '%'
                      OR @EIDSSLaboratorySampleID IS NULL
                  )
        GROUP BY t.idfTesting,
                 m.idfMaterial;

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        SELECT CASE
                   WHEN m.idfsSampleStatus = 10015002 --Marked for Deletion
            THEN
                       m.idfsSampleStatus
                   WHEN m.idfsSampleStatus = 10015003 --Marked for Destruction
            THEN
                       m.idfsSampleStatus
                   WHEN t.idfsTestStatus = 10001004 --Preliminary
            THEN
                       t.idfsTestStatus
                   WHEN t.idfsTestStatus = 10001008 --Marked for Deletion
            THEN
                       t.idfsTestStatus
               END AS ActionRequestedID,
               CASE
                   WHEN m.idfsSampleStatus = 10015002 --Marked for Deletion
               THEN
                       @SampleDeletion
                   WHEN m.idfsSampleStatus = 10015003 --Marked for Destruction
               THEN
                       @SampleDestruction
                   WHEN t.idfsTestStatus = 10001004 --Preliminary
               THEN
                       @Validation
                   WHEN t.idfsTestStatus = 10001008 --Marked for Deletion
               THEN
                       @TestDeletion
               END AS ActionRequested,
               m.idfMaterial AS SampleID,
               m.strBarcode AS EIDSSLaboratorySampleID,
               m.strCalculatedCaseID AS EIDSSReportOrSessionID,
               a.strAnimalCode AS EIDSSAnimalID,
               CASE
                   WHEN res.AccessToPersonalDataPermissionIndicator = 0 THEN
                       '********'
                   ELSE
                       m.strCalculatedHumanName
               END AS PatientOrFarmOwnerName,
               sampleType.name AS SampleTypeName,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       CAST(m.DiseaseID AS NVARCHAR(MAX))
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseIdentifiers
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseIdentifiers
                   ELSE
                       ''
               END AS DiseaseID,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       diseaseName.name
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseNames
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseNames
                   ELSE
                       ''
               END AS DiseaseName,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       diseaseName.name
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DisplayDiseaseNames
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DisplayDiseaseNames
                   ELSE
                       ''
               END AS DisplayDiseaseName,
               t.idfTesting AS TestID,
               t.idfsTestName AS TestNameTypeID,
               t.idfsTestCategory AS TestCategoryTypeID,
               t.idfsTestResult AS TestResultTypeID,
               t.idfsTestStatus AS TestStatusTypeID,
               testNameType.name AS TestNameTypeName,
               testStatusType.name AS TestStatusTypeName,
               testResultType.name AS TestResultTypeName,
               u.idfUserID AS ResultEnteredByUserID,
               m.datAccession AS AccessionDate,
               m.idfsSampleStatus AS SampleStatusTypeID,
               (CASE
                    WHEN m.blnAccessioned = 0
                         AND m.idfsAccessionCondition IS NULL THEN
                        'Un-accessioned'
                    WHEN m.idfsSampleStatus IS NULL THEN
                        accessionConditionType.name
                    WHEN m.idfsSampleStatus = 10015007 --In Repository
               THEN
                        accessionConditionType.name
                    ELSE
                        sampleStatusType.name
                END
               ) AS AccessionConditionOrSampleStatusTypeName,
               t.datConcludedDate AS ResultDate,
               m.PreviousSampleStatusID AS PreviousSampleStatusTypeID,
               NULL AS PreviousTestStatusTypeID,
               m.intRowStatus AS RowStatus,
               CASE
                   WHEN res.ReadPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.ReadPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.ReadPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.ReadPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.ReadPermissionIndicator)
               END AS ReadPermissionindicator,
               CASE
                   WHEN res.AccessToPersonalDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.AccessToPersonalDataPermissionIndicator)
               END AS AccessToPersonalDataPermissionIndicator,
               CASE
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.AccessToGenderAndAgeDataPermissionIndicator)
               END AS AccessToGenderAndAgeDataPermissionIndicator,
               CASE
                   WHEN res.WritePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.WritePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.WritePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.WritePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.WritePermissionIndicator)
               END AS WritePermissionIndicator,
               CASE
                   WHEN res.DeletePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.DeletePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.DeletePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.DeletePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.DeletePermissionIndicator)
               END AS DeletePermissionIndicator,
               0 AS RowAction,
               0 AS RowSelectionIndicator,
               COUNT(*) OVER () AS TotalRowCount
        FROM @FinalResults res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfTesting = res.TestID
                   AND t.intRowStatus = 0
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                ON sampleType.idfsReference = m.idfsSampleType
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) diseaseName
                ON diseaseName.idfsReference = m.DiseaseID
            LEFT JOIN @MonitoringSessionDiseases msDiseases
                ON msDiseases.ID = m.idfMonitoringSession
            LEFT JOIN @VectorSessionDiseases vsDiseases
                ON vsDiseases.ID = m.idfVectorSurveillanceSession
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                ON accessionConditionType.idfsReference = m.idfsAccessionCondition
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                ON sampleStatusType.idfsReference = m.idfsSampleStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                ON testNameType.idfsReference = t.idfsTestName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                ON testStatusType.idfsReference = t.idfsTestStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                ON testResultType.idfsReference = t.idfsTestResult
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                ON testCategoryType.idfsReference = t.idfsTestCategory
            LEFT JOIN dbo.tlbAnimal a
                ON a.idfAnimal = m.idfAnimal
                   AND a.intRowStatus = 0
            LEFT JOIN dbo.tstUserTable u
                ON u.idfPerson = t.idfResultEnteredByPerson
                   AND u.intRowStatus = 0;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_APPROVAL_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_APPROVAL_GETList
--
-- Description:	Get laboratory approval list for the various lab use cases.
--
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     12/03/2018 Initial release.
-- Stephen Long     12/19/2018 Added pagination logic.
-- Stephen Long     01/25/2019 Added previous sample and test status types.
-- Stephen Long     01/30/2019 Added sample disease reference join and removed the vector 
--                             surveillance session joins as they are no longer needed.
-- Stephen Long     02/19/2019 Split out selects between sample and test and added test deletion 
--                             as one of the options.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     08/30/2019 Added organization ID parameter and where clause changes for site.
-- Stephen Long     09/14/2019 Added pagination set 0 to bring back "all" records.
-- Stephen Long     09/28/2019 Updated test deletion base reference value to newly added entry.
-- Stephen Long     01/21/2020 Converted site ID to site list for site filtration.
-- Stephen Long     03/11/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     04/23/2020 Correction on disease ID and disease name; add vector surveillance 
--                             session.
-- Stephen Long     09/04/2020 Updated reference value for marked for deletion test status.
-- Stephen Long     11/30/2020 Removed site ID parameter and updated where criteria to use 
--                             sent to organization ID.
-- Stephen Long     12/16/2020 Changed join for vector surveillance session diseases to the sample
--                             table.
-- Stephen Long     12/31/2020 Change function on reference data to handle inactive records.
-- Stephen Long     09/25/2021 Added new pagination and order by.
-- Stephen Long     11/18/2021 Added sample ID and test ID parameters and action requested ID to 
--                             the query.
-- Stephen Long     12/08/2021 Changed pagination logic and removed option recompile.
-- Stephen Long     01/03/2022 Corrected sample status type to use the correct field.
-- Stephen Long     01/10/2022 Corrected join on user table, removed identity column, and changed 
--                             default sort order.
-- Stephen Long     02/03/2022 Corrected monitoring session to diagnosis join.
-- Stephen Long     02/10/2022 Removed unneeded joins on the disease fields.
-- Stephen Long     05/17/2022 Removed primary key from monitoring and vector session disease 
--                             table variables.
-- Stephen Long     05/20/2022 Added string agg to vector session diseases.
-- Stephen Long     07/26/2022 Updated case statement on disease id and name.
-- Stephen Long     09/28/2022 Added translated value for action requested name.
-- Stephen Long     10/11/2022 Added check for closed batch test status to display test records 
--                             ready for validation.
-- Stephen Long     10/21/2022 Added display disease names separated by comma.
-- Stephen Long     10/23/2022 Added check for non-laboratory test indicator of false.
-- Stephen Long     11/16/2022 Removed sorting and pagination logic; business decision so records
--                             pending save could be shown at the top of the list prior to saving.
-- Stephen Long     01/11/2023 Updated for site filtration queries.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_APPROVAL_GETList]
(
    @LanguageID NVARCHAR(50),
    @SampleID BIGINT = NULL,
    @TestID BIGINT = NULL,
    @UserOrganizationID BIGINT,
    @UserEmployeeID BIGINT,
    @UserSiteID BIGINT
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @Results TABLE
    (
        SampleID BIGINT NOT NULL,
        TestID BIGINT NULL
    );
    DECLARE @MonitoringSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL, 
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL 
    );
    DECLARE @VectorSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL, 
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL 
    );
    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @TotalRowCount INT = 0,
            @LanguageCode BIGINT,
            @SampleDeletion NVARCHAR(MAX),
            @SampleDestruction NVARCHAR(MAX),
            @TestDeletion NVARCHAR(MAX),
            @Validation NVARCHAR(MAX);

    BEGIN TRY
        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        SET @LanguageCode = dbo.FN_GBL_LanguageCode_Get(@LanguageID);
        SET @SampleDeletion =
        (
            SELECT COALESCE(rt.strResourceString, r.strResourceName)
            FROM dbo.trtResource r
                LEFT JOIN dbo.trtResourceTranslation rt
                    ON rt.idfsResource = r.idfsResource
                       AND rt.idfsLanguage = @LanguageCode
                       AND rt.intRowStatus = 0
            WHERE r.idfsResource = 812
        );
        SET @SampleDestruction =
        (
            SELECT COALESCE(rt.strResourceString, r.strResourceName)
            FROM dbo.trtResource r
                LEFT JOIN dbo.trtResourceTranslation rt
                    ON rt.idfsResource = r.idfsResource
                       AND rt.idfsLanguage = @LanguageCode
                       AND rt.intRowStatus = 0
            WHERE r.idfsResource = 1040
        );
        SET @TestDeletion =
        (
            SELECT COALESCE(rt.strResourceString, r.strResourceName)
            FROM dbo.trtResource r
                LEFT JOIN dbo.trtResourceTranslation rt
                    ON rt.idfsResource = r.idfsResource
                       AND rt.idfsLanguage = @LanguageCode
                       AND rt.intRowStatus = 0
            WHERE r.idfsResource = 4493
        );
        SET @Validation =
        (
            SELECT COALESCE(rt.strResourceString, r.strResourceName)
            FROM dbo.trtResource r
                LEFT JOIN dbo.trtResourceTranslation rt
                    ON rt.idfsResource = r.idfsResource
                       AND rt.idfsLanguage = @LanguageCode
                       AND rt.intRowStatus = 0
            WHERE r.idfsResource = 4492
        );

        INSERT INTO @MonitoringSessionDiseases
        SELECT MonitoringSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames, 
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames 
        FROM dbo.FN_LAB_MONITORING_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY MonitoringSessionID;

        INSERT INTO @VectorSessionDiseases
        SELECT VectorSurveillanceSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames, 
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames 
        FROM dbo.FN_LAB_VECTOR_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY VectorSurveillanceSessionID;

        INSERT INTO @Results
        SELECT m.idfMaterial,
               NULL
        FROM dbo.tlbMaterial m
        WHERE m.intRowStatus = 0
              AND m.idfsSampleStatus IN (   10015002, --Marked for Deletion 
                                            10015003
                                        ) --Marked for Destruction
              AND m.idfSendToOffice = @UserOrganizationID
              AND (
                      m.idfMaterial = @SampleID
                      OR @SampleID IS NULL
                  );

        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON t.idfMaterial = m.idfMaterial
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestStatus IN (   10001004, --Preliminary 
                                          10001008
                                      ) --Marked for Deletion
              AND (
                      t.idfBatchTest IS NULL
                      OR (
                             t.idfBatchTest IS NOT NULL
                             AND b.idfsBatchStatus = 10001001
                         ) -- Closed
                  )
              AND m.idfSendToOffice = @UserOrganizationID
              AND (
                      t.idfTesting = @TestID
                      OR @TestID IS NULL
                  );

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = m.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE m.intRowStatus = 0
                  AND oa.idfsObjectOperation = 10059003 -- Read permission
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup
        );

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.SampleID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = m.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003; -- Read permission

        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = m.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        SET @TotalRowCount =
        (
            SELECT COUNT(*) FROM @Results
        );

        SELECT CASE
                       WHEN m.idfsSampleStatus = 10015002 --Marked for Deletion
                   THEN
                           m.idfsSampleStatus
                       WHEN m.idfsSampleStatus = 10015003 --Marked for Destruction
                   THEN
                           m.idfsSampleStatus
                       WHEN t.idfsTestStatus = 10001004 --Preliminary
                   THEN
                           t.idfsTestStatus
                       WHEN t.idfsTestStatus = 10001008 --Marked for Deletion
                   THEN
                           t.idfsTestStatus
                   END AS ActionRequestedID,
                   CASE
                       WHEN m.idfsSampleStatus = 10015002 --Marked for Deletion
                   THEN
                           @SampleDeletion
                       WHEN m.idfsSampleStatus = 10015003 --Marked for Destruction
                   THEN
                           @SampleDestruction
                       WHEN t.idfsTestStatus = 10001004 --Preliminary
                   THEN
                           @Validation
                       WHEN t.idfsTestStatus = 10001008 --Marked for Deletion
                   THEN
                           @TestDeletion
                   END AS ActionRequested,
                   m.idfMaterial AS SampleID,
                   m.strBarcode AS EIDSSLaboratorySampleID,
                   m.strCalculatedCaseID AS EIDSSReportOrSessionID,
                   a.strAnimalCode AS EIDSSAnimalID,
                   m.strCalculatedHumanName AS PatientOrFarmOwnerName,
                   sampleType.name AS SampleTypeName,
                   CASE
                       WHEN m.DiseaseID IS NOT NULL THEN
                           CAST(m.DiseaseID AS NVARCHAR(MAX))
                       WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                           msDiseases.DiseaseIdentifiers
                       WHEN
                       (
                           m.DiseaseID IS NULL
                           AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                       ) THEN
                           vsDiseases.DiseaseIdentifiers
                       ELSE
                           ''
                   END AS DiseaseID,
                   CASE
                       WHEN m.DiseaseID IS NOT NULL THEN
                           diseaseName.name
                       WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                           msDiseases.DiseaseNames
                       WHEN
                       (
                           m.DiseaseID IS NULL
                           AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                       ) THEN
                           vsDiseases.DiseaseNames
                       ELSE
                           ''
                   END AS DiseaseName,
                   CASE
                       WHEN m.DiseaseID IS NOT NULL THEN 
                           diseaseName.name
                       WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                           msDiseases.DisplayDiseaseNames
                       WHEN (m.DiseaseID IS NULL AND ISNULL(m.idfVectorSurveillanceSession, '') = '') THEN
                           vsDiseases.DisplayDiseaseNames
                       ELSE
                           ''
                   END AS DisplayDiseaseName,
                   t.idfTesting AS TestID,
                   t.idfsTestName AS TestNameTypeID,
                   t.idfsTestCategory AS TestCategoryTypeID,
                   t.idfsTestResult AS TestResultTypeID,
                   t.idfsTestStatus AS TestStatusTypeID,
                   testNameType.name AS TestNameTypeName,
                   testStatusType.name AS TestStatusTypeName,
                   testResultType.name AS TestResultTypeName,
                   u.idfUserID AS ResultEnteredByUserID,
                   m.datAccession AS AccessionDate,
                   m.idfsSampleStatus AS SampleStatusTypeID,
                   (CASE
                        WHEN m.blnAccessioned = 0
                             AND m.idfsAccessionCondition IS NULL THEN
                            'Un-accessioned'
                        WHEN m.idfsSampleStatus IS NULL THEN
                            accessionConditionType.name
                        WHEN m.idfsSampleStatus = 10015007 --In Repository
                   THEN
                            accessionConditionType.name
                        ELSE
                            sampleStatusType.name
                    END
                   ) AS AccessionConditionOrSampleStatusTypeName,
                   t.datConcludedDate AS ResultDate,
                   m.PreviousSampleStatusID AS PreviousSampleStatusTypeID,
                   NULL AS PreviousTestStatusTypeID,
                   m.intRowStatus AS RowStatus,
                   0 AS RowAction,
                   0 AS RowSelectionIndicator,
                   @TotalRowCount AS TotalRowCount
            FROM @Results res
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = res.SampleID
                       AND m.intRowStatus = 0
                INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                    ON sampleType.idfsReference = m.idfsSampleType
                LEFT JOIN dbo.tlbTesting t
                    ON t.idfTesting = res.TestID
                       AND t.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) diseaseName
                    ON diseaseName.idfsReference = m.DiseaseID
                LEFT JOIN @MonitoringSessionDiseases msDiseases
                    ON msDiseases.ID = m.idfMonitoringSession
                LEFT JOIN @VectorSessionDiseases vsDiseases
                    ON vsDiseases.ID = m.idfVectorSurveillanceSession
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                    ON accessionConditionType.idfsReference = m.idfsAccessionCondition
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                    ON sampleStatusType.idfsReference = m.idfsSampleStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                    ON testNameType.idfsReference = t.idfsTestName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                    ON testStatusType.idfsReference = t.idfsTestStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                    ON testResultType.idfsReference = t.idfsTestResult
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                    ON testCategoryType.idfsReference = t.idfsTestCategory
                LEFT JOIN dbo.tlbAnimal a
                    ON a.idfAnimal = m.idfAnimal
                       AND a.intRowStatus = 0
                LEFT JOIN dbo.tstUserTable u
                    ON u.idfPerson = t.idfResultEnteredByPerson
                       AND u.intRowStatus = 0;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_APPROVAL_SEARCH_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_APPROVAL_SEARCH_GETList
--
-- Description:	Get laboratory approval list for the various lab use cases.
--
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     02/21/2019 Initial release.
-- Stephen Long     07/09/2019 Added disease to search wildcard.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     01/21/2020 Converted site ID to site list for site filtration.
-- Stephen Long     03/11/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     04/23/2020 Correction on disease ID and disease name; add vector surveillance 
--                             session.
-- Stephen Long     06/07/2020 Added additional search fields to the where clause.
-- Stephen Long     09/04/2020 Updated reference value for marked for deletion test status.
-- Stephen Long     11/30/2020 Modified where clause to look at sent to organization and removed 
--                             user ID as a parameter.
-- Stephen Long     12/16/2020 Changed join for vector surveillance session diseases to the sample
--                             table.
-- Stephen Long     12/31/2020 Change function on reference data to handle inactive records.
-- Stephen Long     01/03/2021 Moved pagination to table variable insert.
-- Stephen Long     01/05/2021 Changed where criteria strNote to strCondition.
-- Stephen Long     01/07/2021 Removed leading wildcard (%) as full table scans are performed even 
--                             with indices resulting in long query run times.  Recommend NOT 
--                             putting those back in.
-- Stephen Long     09/24/2021 Removed unneeded fields and joins to improve performance.
-- Stephen Long     11/18/2021 Added action requested ID to the query.
-- Stephen Long     12/08/2021 Changed pagination logic and removed option recompile.
-- Stephen Long     12/17/2021 Added group by to eliminate duplicate records.
-- Stephen Long     01/03/2022 Corrected sample status type to use the correct field.
-- Stephen Long     02/10/2022 Removed unneeded joins on the disease fields.
-- Stephen Long     05/17/2022 Removed primary key from monitoring and vector session disease 
--                             table variables.
-- Stephen Long     05/20/2022 Added string agg to session diseases.
-- Stephen Long     07/26/2022 Updated case statement on disease id and name.
-- Stephen Long     09/28/2022 Bug fix on item 5111, 5115 and 5116.
-- Stephen Long     10/11/2022 Added check for closed batch test status to display test records 
--                             ready for validation.
-- Stephen Long     10/17/2022 Bug fix on item 5018 - searching by dates.
-- Stephen Long     10/21/2022 Added display disease names separated by comma.
-- Stephen Long     10/23/2022 Added check for non-laboratory test indicator of false.
-- Stephen Long     12/29/2022 Removed sorting and pagination logic; business decision so records
--                             pending save could be shown at the top of the list prior to saving.
-- Stephen Long     01/14/2023 Updated for site filtration queries.
--
-- Testing Code:
/*
DECLARE	@return_value int

EXEC	@return_value = [dbo].[USP_LAB_APPROVAL_SEARCH_GETList]
		@LanguageID = N'en-US',
		@SearchString = N'PCR', -- Use 'Gnhnscvxb', 'Brucellosis', 'SWAZ200GEDD' as other tests.
		@TestUnassignedIndicator = NULL,
		@TestCompletedIndicator = NULL,
		@UserID = 161287150000872, -- rykermase
		@UserOrganizationID = 758210000000,
		@Page = 1,
		@PageSize = 10,
		@SortColumn = N'EIDSSLaboratorySampleID',
		@SortOrder = N'DESC'

SELECT	'Return Value' = @return_value

GO
*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_APPROVAL_SEARCH_GETList]
(
    @LanguageID NVARCHAR(50),
    @SearchString NVARCHAR(2000),
    @AccessionedIndicator BIT = NULL,
    @UserID BIGINT,
    @UserEmployeeID BIGINT, 
    @UserOrganizationID BIGINT, 
    @UserSiteID BIGINT
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );

    DECLARE @MonitoringSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL,
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @VectorSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL,
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @InitialResults TABLE
    (
        ID INT NOT NULL IDENTITY,
        ActionRequested NVARCHAR(MAX) NOT NULL,
        SampleID BIGINT NOT NULL,
        TestID BIGINT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID INT NOT NULL IDENTITY,
        ActionRequested NVARCHAR(MAX) NOT NULL,
        SampleID BIGINT NOT NULL,
        TestID BIGINT NULL
    );
    DECLARE @FinalResultsDedup TABLE
    (
        SampleID BIGINT NOT NULL,
        TestID BIGINT NULL
    );
    DECLARE @SampleTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @SampleStatusTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @AccessionConditionTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @TestNameTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @TestResultTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @TestCategoryTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @TestStatusTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @Diseases TABLE (ID BIGINT NOT NULL);
    DECLARE @FunctionalAreas TABLE (ID BIGINT NOT NULL);
    DECLARE @Favorites XML,
            @LanguageCode BIGINT,
            @TotalRowCount INT = 0,
            @SampleDeletion NVARCHAR(MAX),
            @SampleDestruction NVARCHAR(MAX),
            @TestDeletion NVARCHAR(MAX),
            @Validation NVARCHAR(MAX);
    BEGIN TRY
        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        SET @LanguageCode = dbo.FN_GBL_LanguageCode_Get(@LanguageID);
        SET @SampleDeletion =
        (
            SELECT COALESCE(rt.strResourceString, r.strResourceName)
            FROM dbo.trtResource r
                LEFT JOIN dbo.trtResourceTranslation rt
                    ON rt.idfsResource = r.idfsResource
                       AND rt.idfsLanguage = @LanguageCode
                       AND rt.intRowStatus = 0
            WHERE r.idfsResource = 812
        );
        SET @SampleDestruction =
        (
            SELECT COALESCE(rt.strResourceString, r.strResourceName)
            FROM dbo.trtResource r
                LEFT JOIN dbo.trtResourceTranslation rt
                    ON rt.idfsResource = r.idfsResource
                       AND rt.idfsLanguage = @LanguageCode
                       AND rt.intRowStatus = 0
            WHERE r.idfsResource = 1040
        );
        SET @TestDeletion =
        (
            SELECT COALESCE(rt.strResourceString, r.strResourceName)
            FROM dbo.trtResource r
                LEFT JOIN dbo.trtResourceTranslation rt
                    ON rt.idfsResource = r.idfsResource
                       AND rt.idfsLanguage = @LanguageCode
                       AND rt.intRowStatus = 0
            WHERE r.idfsResource = 4493
        );
        SET @Validation =
        (
            SELECT COALESCE(rt.strResourceString, r.strResourceName)
            FROM dbo.trtResource r
                LEFT JOIN dbo.trtResourceTranslation rt
                    ON rt.idfsResource = r.idfsResource
                       AND rt.idfsLanguage = @LanguageCode
                       AND rt.intRowStatus = 0
            WHERE r.idfsResource = 4492
        );

        INSERT INTO @MonitoringSessionDiseases
        SELECT MonitoringSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames,
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames
        FROM dbo.FN_LAB_MONITORING_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY MonitoringSessionID;

        INSERT INTO @VectorSessionDiseases
        SELECT VectorSurveillanceSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames,
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames
        FROM dbo.FN_LAB_VECTOR_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY VectorSurveillanceSessionID;

        INSERT INTO @InitialResults
        SELECT CASE
                   WHEN m.idfsSampleStatus = 10015002 --Marked for Deletion
            THEN
                       @SampleDeletion
                   WHEN m.idfsSampleStatus = 10015003 --Marked for Destruction
            THEN
                       @SampleDestruction
               END,
               m.idfMaterial,
               NULL
        FROM dbo.tlbMaterial m
        WHERE m.intRowStatus = 0
              AND (
                      m.idfsSampleStatus = 10015002 --Marked for Deletion 
                      OR m.idfsSampleStatus = 10015003 --Marked for Destruction
                  )
              AND m.idfSendToOffice = @UserOrganizationID;

        INSERT INTO @InitialResults
        SELECT CASE
                   WHEN t.idfsTestStatus = 10001004 --Preliminary
            THEN
                       @Validation
                   WHEN t.idfsTestStatus = 10001008 --Marked for Deletion
            THEN
                       @TestDeletion
               END,
               m.idfMaterial,
               t.idfTesting
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON t.idfMaterial = m.idfMaterial
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND (
                      t.idfsTestStatus = 10001004 --Preliminary 
                      OR t.idfsTestStatus = 10001008 --Marked for Deletion 
                  )
              AND (
                      t.idfBatchTest IS NULL
                      OR (
                             t.idfBatchTest IS NOT NULL
                             AND b.idfsBatchStatus = 10001001
                         ) -- Closed
                  )
              AND m.idfSendToOffice = @UserOrganizationID;

        INSERT INTO @SampleTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000087
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @SampleStatusTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000015
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @AccessionConditionTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000110
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @Diseases
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000019
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @TestNameTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000097
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @TestResultTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000096
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @TestCategoryTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000095
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @TestStatusTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000001
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @FunctionalAreas
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000164
              AND idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @FinalResults
        SELECT ActionRequested,
               SampleID,
               TestID
        FROM @InitialResults
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = SampleID
        WHERE (
                  m.blnAccessioned = @AccessionedIndicator
                  AND m.idfsAccessionCondition IS NULL
                  AND m.idfsSampleStatus IS NULL
                  AND @AccessionedIndicator IS NOT NULL
              ) -- Un-accessioned samples
              OR (
                     CONVERT(NVARCHAR(MAX), FORMAT(m.datAccession, 'g', @LanguageID)) LIKE '%' + @SearchString + '%'
                     OR CONVERT(NVARCHAR(MAX), FORMAT(t.datStartedDate, 'd', @LanguageID)) LIKE '%' + @SearchString
                                                                                                + '%'
                     OR CONVERT(NVARCHAR(MAX), FORMAT(t.datConcludedDate, 'd', @LanguageID)) LIKE '%' + @SearchString
                                                                                                  + '%'
                     OR (
                            m.strBarcode IS NOT NULL
                            AND m.strBarcode <> ''
                            AND m.strBarcode LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strFieldBarcode IS NOT NULL
                            AND m.strFieldBarcode <> ''
                            AND m.strFieldBarcode LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strCondition IS NOT NULL
                            AND m.strCondition <> ''
                            AND m.strCondition LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strCalculatedCaseID IS NOT NULL
                            AND m.strCalculatedCaseID <> ''
                            AND m.strCalculatedCaseID LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strCalculatedHumanName IS NOT NULL
                            AND m.strCalculatedHumanName <> ''
                            AND m.strCalculatedHumanName LIKE '%' + @SearchString + '%'
                        )
                     OR (ActionRequested LIKE '%' + @SearchString + '%')
                 );

        INSERT INTO @FinalResults
        SELECT ActionRequested,
               SampleID,
               TestID
        FROM @InitialResults
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = SampleID
            INNER JOIN dbo.tlbAnimal a
                ON a.idfAnimal = m.idfAnimal
                   AND a.intRowStatus = 0
        WHERE m.idfAnimal IS NOT NULL
              AND a.strAnimalCode LIKE '%' + @SearchString + '%';

        INSERT INTO @FinalResults
        SELECT ActionRequested,
               SampleID,
               TestID
        FROM @InitialResults
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = SampleID
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = SampleID
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbTransferOUT tro
                ON tro.idfTransferOut = tom.idfTransferOut
                   AND tro.intRowStatus = 0
        WHERE tro.strBarcode LIKE '%' + @SearchString + '%';

        IF
        (
            SELECT COUNT(*) FROM @SampleTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ActionRequested,
                   SampleID,
                   TestID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                LEFT JOIN dbo.tlbTesting t
                    ON t.idfMaterial = SampleID
            WHERE EXISTS
            (
                SELECT ID FROM @SampleTypes WHERE m.idfsSampleType = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @SampleStatusTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ActionRequested,
                   SampleID,
                   TestID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                LEFT JOIN dbo.tlbTesting t
                    ON t.idfMaterial = SampleID
            WHERE EXISTS
            (
                SELECT ID FROM @SampleStatusTypes WHERE m.idfsSampleStatus = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @AccessionConditionTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ActionRequested,
                   SampleID,
                   TestID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                LEFT JOIN dbo.tlbTesting t
                    ON t.idfMaterial = SampleID
            WHERE (
                      m.idfsSampleStatus IS NULL
                      OR m.idfsSampleStatus = 10015007
                  ) --In Repository
                  AND EXISTS
            (
                SELECT ID
                FROM @AccessionConditionTypes
                WHERE m.idfsAccessionCondition = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @FunctionalAreas
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ActionRequested,
                   SampleID,
                   TestID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                LEFT JOIN dbo.tlbTesting t
                    ON t.idfMaterial = SampleID
                INNER JOIN dbo.tlbDepartment d
                    ON d.idfDepartment = m.idfInDepartment
                       AND d.intRowStatus = 0
            WHERE m.idfInDepartment IS NOT NULL
                  AND EXISTS
            (
                SELECT ID FROM @FunctionalAreas WHERE d.idfsDepartmentName = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @Diseases
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ActionRequested,
                   SampleID,
                   TestID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
            WHERE m.DiseaseID IS NOT NULL
                  AND EXISTS
            (
                SELECT ID FROM @Diseases WHERE m.DiseaseID = ID
            );

            INSERT INTO @FinalResults
            SELECT ActionRequested,
                   SampleID,
                   TestID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                INNER JOIN @VectorSessionDiseases vsDiseases
                    ON vsDiseases.ID = m.idfVectorSurveillanceSession
            WHERE m.idfVectorSurveillanceSession IS NOT NULL
                  AND EXISTS
            (
                SELECT ID
                FROM @Diseases
                WHERE ID IN (
                                SELECT CAST([Value] AS BIGINT)
                                FROM dbo.FN_GBL_SYS_SplitList(vsDiseases.DiseaseIdentifiers, NULL, ',')
                            )
            );

            INSERT INTO @FinalResults
            SELECT ActionRequested,
                   SampleID,
                   TestID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                INNER JOIN dbo.tlbMonitoringSession ms
                    ON ms.idfMonitoringSession = m.idfMonitoringSession
                       AND ms.intRowStatus = 0
                INNER JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                    ON msd.idfMonitoringSession = ms.idfMonitoringSession
                       AND msd.intRowStatus = 0
            WHERE m.idfMonitoringSession IS NOT NULL
                  AND m.DiseaseID IS NULL
                  AND EXISTS
            (
                SELECT ID FROM @Diseases WHERE msd.idfsDiagnosis = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @TestNameTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ActionRequested,
                   SampleID,
                   TestID
            FROM @InitialResults
                INNER JOIN dbo.tlbTesting t
                    ON t.idfTesting = TestID
            WHERE EXISTS
            (
                SELECT ID FROM @TestNameTypes WHERE t.idfsTestName = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @TestResultTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ActionRequested,
                   SampleID,
                   TestID
            FROM @InitialResults
                INNER JOIN dbo.tlbTesting t
                    ON t.idfTesting = TestID
            WHERE EXISTS
            (
                SELECT ID FROM @TestResultTypes WHERE t.idfsTestResult = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @TestCategoryTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ActionRequested,
                   SampleID,
                   TestID
            FROM @InitialResults
                INNER JOIN dbo.tlbTesting t
                    ON t.idfTesting = TestID
            WHERE EXISTS
            (
                SELECT ID FROM @TestCategoryTypes WHERE t.idfsTestCategory = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @TestStatusTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ActionRequested,
                   SampleID,
                   TestID
            FROM @InitialResults
                INNER JOIN dbo.tlbTesting t
                    ON t.idfTesting = TestID
            WHERE EXISTS
            (
                SELECT ID FROM @TestStatusTypes WHERE t.idfsTestStatus = ID
            );
        END;

        INSERT INTO @FinalResultsDedup
        SELECT SampleID,
               TestID
        FROM @FinalResults
        GROUP BY SampleID,
                 TestID;

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @FinalResultsDedup
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = m.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE m.intRowStatus = 0
                  AND oa.idfsObjectOperation = 10059003 -- Read permission
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup
        );

        DELETE res
        FROM @FinalResultsDedup res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.SampleID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = m.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003 -- Read permission
              AND NOT EXISTS (
                              SELECT * FROM @UserSitePermissions WHERE SiteID = m.idfsSite
              );

        DELETE FROM @FinalResultsDedup
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = m.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        SET @TotalRowCount =
        (
            SELECT COUNT(*) FROM @FinalResultsDedup
        );

        SELECT CASE
                   WHEN m.idfsSampleStatus = 10015002 --Marked for Deletion
            THEN
                       m.idfsSampleStatus
                   WHEN m.idfsSampleStatus = 10015003 --Marked for Destruction
            THEN
                       m.idfsSampleStatus
                   WHEN t.idfsTestStatus = 10001004 --Preliminary
            THEN
                       t.idfsTestStatus
                   WHEN t.idfsTestStatus = 10001008 --Marked for Deletion
            THEN
                       t.idfsTestStatus
               END AS ActionRequestedID,
               CASE
                   WHEN m.idfsSampleStatus = 10015002 --Marked for Deletion
               THEN
                       @SampleDeletion
                   WHEN m.idfsSampleStatus = 10015003 --Marked for Destruction
               THEN
                       @SampleDestruction
                   WHEN t.idfsTestStatus = 10001004 --Preliminary
               THEN
                       @Validation
                   WHEN t.idfsTestStatus = 10001008 --Marked for Deletion
               THEN
                       @TestDeletion
               END AS ActionRequested,
               m.idfMaterial AS SampleID,
               m.strBarcode AS EIDSSLaboratorySampleID,
               m.strCalculatedCaseID AS EIDSSReportOrSessionID,
               a.strAnimalCode AS EIDSSAnimalID,
               m.strCalculatedHumanName AS PatientOrFarmOwnerName,
               sampleType.name AS SampleTypeName,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       CAST(m.DiseaseID AS NVARCHAR(MAX))
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseIdentifiers
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseIdentifiers
                   ELSE
                       ''
               END AS DiseaseID,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       diseaseName.name
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseNames
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseNames
                   ELSE
                       ''
               END AS DiseaseName,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       diseaseName.name
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DisplayDiseaseNames
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DisplayDiseaseNames
                   ELSE
                       ''
               END AS DisplayDiseaseName,
               t.idfTesting AS TestID,
               t.idfsTestName AS TestNameTypeID,
               t.idfsTestCategory AS TestCategoryTypeID,
               t.idfsTestResult AS TestResultTypeID,
               t.idfsTestStatus AS TestStatusTypeID,
               testNameType.name AS TestNameTypeName,
               testStatusType.name AS TestStatusTypeName,
               testResultType.name AS TestResultTypeName,
               u.idfUserID AS ResultEnteredByUserID,
               m.datAccession AS AccessionDate,
               m.idfsSampleStatus AS SampleStatusTypeID,
               (CASE
                    WHEN m.blnAccessioned = 0
                         AND m.idfsAccessionCondition IS NULL THEN
                        'Un-accessioned'
                    WHEN m.idfsSampleStatus IS NULL THEN
                        accessionConditionType.name
                    WHEN m.idfsSampleStatus = 10015007 --In Repository
               THEN
                        accessionConditionType.name
                    ELSE
                        sampleStatusType.name
                END
               ) AS AccessionConditionOrSampleStatusTypeName,
               t.datConcludedDate AS ResultDate,
               m.PreviousSampleStatusID AS PreviousSampleStatusTypeID,
               NULL AS PreviousTestStatusTypeID,
               m.intRowStatus AS RowStatus,
               0 AS RowAction,
               0 AS RowSelectionIndicator,
               @TotalRowCount AS TotalRowCount
        FROM @FinalResultsDedup res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.SampleID
                   AND m.intRowStatus = 0
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                ON sampleType.idfsReference = m.idfsSampleType
            LEFT JOIN dbo.tlbTesting t
                ON t.idfTesting = res.TestID
                   AND t.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) diseaseName
                ON diseaseName.idfsReference = m.DiseaseID
            LEFT JOIN @MonitoringSessionDiseases msDiseases
                ON msDiseases.ID = m.idfMonitoringSession
            LEFT JOIN @VectorSessionDiseases vsDiseases
                ON vsDiseases.ID = m.idfVectorSurveillanceSession
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                ON accessionConditionType.idfsReference = m.idfsAccessionCondition
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                ON sampleStatusType.idfsReference = m.idfsSampleStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                ON testNameType.idfsReference = t.idfsTestName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                ON testStatusType.idfsReference = t.idfsTestStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                ON testResultType.idfsReference = t.idfsTestResult
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                ON testCategoryType.idfsReference = t.idfsTestCategory
            LEFT JOIN dbo.tlbAnimal a
                ON a.idfAnimal = m.idfAnimal
                   AND a.intRowStatus = 0
            LEFT JOIN dbo.tstUserTable u
                ON u.idfPerson = t.idfResultEnteredByPerson
                   AND u.intRowStatus = 0;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_BATCH_ADVANCED_SEARCH_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_BATCH_ADVANCED_SEARCH_GETList
--
-- Description:	Get laboratory batch list for the various laboratory use cases.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     03/25/2019 Initial release.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     10/07/2019 Removed @CampaignID variable; just use EIDSSReportCampaignSessionID.
-- Stephen Long     01/21/2020 Converted site ID to site list for site filtration.
-- Stephen Long     03/11/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     04/23/2020 Correction on disease ID and disease name; add vector surveillance 
--                             session.
-- Stephen Long     04/25/2020 Added batch test list parameter and where clause criteria.
-- Stephen Long     08/25/2020 Added criteria to ignore time on date betweens.
-- Stephen Long     09/02/2020 Changed accessioned indicator from int to varchar to handle searches
--                             with un-accessioned and accessioned samples in the same query.
-- Stephen Long     10/30/2020 Remove unneeded joins.
-- Stephen Long     11/28/2020 Added configurable site filtration rules.
-- Stephen Long     12/16/2020 Changed join for vector surveillance session diseases to the sample
--                             table.
-- Stephen Long     12/23/2020 Correction on accession indicator list where criteria.
-- Stephen Long     12/31/2020 Change function on reference data to handle inactive records.
-- Stephen Long     01/03/2020 Added option recompile to select queries.
-- Stephen Long     01/21/2021 Changed counts to use group by in sub-query instead of count 
--                             distinct and added with recompile to handle number of nullable 
--                             parameters.
-- Stephen Long     01/24/2021 Correct where criteria on accession indicator list.
-- Mark Wilson		08/16/2021 Join tlbMonitoringSessionToDiagnosis to get diagnosis
-- Stephen Long     09/25/2021 Added new pagination and order by.
-- Stephen Long     10/14/2021 Changed report or session type ID to bigint.
-- Stephen Long     12/08/2021 Changed pagination logic and removed option recompile.
-- Stephen Long     12/15/2021 Added configurable filtration rules.
-- Stephen Long     02/10/2022 Removed unneeded joins.
-- Stephen Long     03/25/2022 Removed primary key from final results table variable.
-- Mike Kornegay	06/14/2022 Added new additional SessionCategoryID for Vet Avian / Vet Livestock 
--                             breakout.
-- Stephen Long     07/26/2022 Changed from repair to reference repair function.
-- Stephen Long     08/12/2022 Removed where criteria for surveillance type of both; de-activated 
--                             base reference record.
-- Stephen Long     08/26/2022 Added additional checks on accession and entered date range checks.
-- Stephen Long     10/24/2022 Moved where clause check on tests count to insert of final results.
-- Stephen Long     12/29/2022 Removed sorting and pagination logic; business decision so records
--                             pending save could be shown at the top of the list prior to saving.
-- Stephen Long     01/12/2023 Updated for site filtration queries.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_BATCH_ADVANCED_SEARCH_GETList]
(
    @LanguageID NVARCHAR(50),
    @ReportOrSessionTypeID BIGINT = NULL,
    @SurveillanceTypeID BIGINT = NULL,
    @SampleStatusTypeList VARCHAR(MAX) = NULL,
    @AccessionedIndicatorList VARCHAR(3) = NULL,
    @EIDSSLocalOrFieldSampleID NVARCHAR(200) = NULL,
    @EIDSSReportCampaignOrSessionID NVARCHAR(200) = NULL,
    @SentToOrganizationID BIGINT = NULL,
    @TransferredToOrganizationID BIGINT = NULL,
    @EIDSSTransferID NVARCHAR(200) = NULL,
    @ResultsReceivedFromID BIGINT = NULL,
    @DateFrom DATETIME = NULL,
    @DateTo DATETIME = NULL,
    @EIDSSLaboratorySampleID NVARCHAR(200) = NULL,
    @SampleTypeID BIGINT = NULL,
    @TestNameTypeID BIGINT = NULL,
    @DiseaseID BIGINT = NULL,
    @TestStatusTypeID BIGINT = NULL,
    @TestResultTypeID BIGINT = NULL,
    @TestResultDateFrom DATETIME = NULL,
    @TestResultDateTo DATETIME = NULL,
    @PatientName NVARCHAR(200) = NULL,
    @FarmOwnerName NVARCHAR(200) = NULL,
    @SpeciesTypeID BIGINT = NULL,
    @BatchTestList VARCHAR(MAX),
    @UserID BIGINT,
    @UserEmployeeID BIGINT,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT = NULL,
    @UserSiteGroupID BIGINT = NULL
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL,
        BatchStatusTypeID BIGINT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID INT NOT NULL,
        BatchStatusTypeID BIGINT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL,
        TestsCount INT NOT NULL
    );
    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @Favorites XML,
            @InProgressCount INT = 0;

    BEGIN TRY
        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        SET @Favorites =
        (
            SELECT PreferenceDetail
            FROM dbo.UserPreference Laboratory
            WHERE idfUserID = @UserID
                  AND ModuleConstantID = 10508006
                  AND intRowStatus = 0
        );

        INSERT INTO @Results
        SELECT b.idfBatchTest,
               b.idfsBatchStatus,
               1,
               1,
               1,
               1,
               1
        FROM dbo.tlbBatchTest b
            INNER JOIN dbo.tlbTesting t
                ON t.idfBatchTest = b.idfBatchTest
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
        WHERE b.intRowStatus = 0
              AND t.idfsTestName IS NOT NULL
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      m.idfSendToOffice = @UserOrganizationID
                      OR @UserOrganizationID IS NULL
                  )
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  );

        -- =======================================================================================
        -- CONFIGURABLE FILTRATION RULES
        -- 
        -- Apply configurable filtration rules for use case SAUC34. Some of these rules may 
        -- overlap the non-configurable rules.
        -- =======================================================================================
        --
        -- Apply at the user's site group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest,
               b.idfsBatchStatus,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbBatchTest b
            INNER JOIN dbo.tlbTesting t
                ON t.idfBatchTest = b.idfBatchTest
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = b.idfsSite
            INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                ON userSiteGroup.idfsSite = @UserSiteID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE b.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest,
               b.idfsBatchStatus,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbBatchTest b
            INNER JOIN dbo.tlbTesting t
                ON t.idfBatchTest = b.idfBatchTest
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = b.idfsSite
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE b.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's employee group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest,
               b.idfsBatchStatus,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbBatchTest b
            INNER JOIN dbo.tlbTesting t
                ON t.idfBatchTest = b.idfBatchTest
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = b.idfsSite
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE b.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's ID level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest,
               b.idfsBatchStatus,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbBatchTest b
            INNER JOIN dbo.tlbTesting t
                ON t.idfBatchTest = b.idfBatchTest
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = b.idfsSite
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE b.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest,
               b.idfsBatchStatus,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbBatchTest b
            INNER JOIN dbo.tlbTesting t
                ON t.idfBatchTest = b.idfBatchTest
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup sgs
                ON sgs.idfsSite = @UserSiteID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE b.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND sgs.idfsSite = b.idfsSite;

        -- 
        -- Apply at the user's site level, granted by a site.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest,
               b.idfsBatchStatus,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbBatchTest b
            INNER JOIN dbo.tlbTesting t
                ON t.idfBatchTest = b.idfBatchTest
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE b.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND a.GrantingActorSiteID = b.idfsSite;

        -- 
        -- Apply at the user's employee group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest,
               b.idfsBatchStatus,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbBatchTest b
            INNER JOIN dbo.tlbTesting t
                ON t.idfBatchTest = b.idfBatchTest
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE b.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND a.GrantingActorSiteID = b.idfsSite;

        -- 
        -- Apply at the user's ID level, granted by a site.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest,
               b.idfsBatchStatus,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbBatchTest b
            INNER JOIN dbo.tlbTesting t
                ON t.idfBatchTest = b.idfBatchTest
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE b.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND a.GrantingActorSiteID = b.idfsSite;

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT b.idfBatchTest
            FROM dbo.tlbBatchTest b
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = b.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE b.intRowStatus = 0
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup -- Default role
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest,
               b.idfsBatchStatus,
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = b.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = b.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = b.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = b.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = b.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbBatchTest b
            INNER JOIN dbo.tlbTesting t
                ON t.idfBatchTest = b.idfBatchTest
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
        WHERE b.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserGroupSitePermissions WHERE SiteID = b.idfsSite
        )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  );

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = res.ID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = b.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003; -- Read permission

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest,
               b.idfsBatchStatus,
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = b.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = b.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = b.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = b.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = b.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbBatchTest b
            INNER JOIN dbo.tlbTesting t
                ON t.idfBatchTest = b.idfBatchTest
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
        WHERE b.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserSitePermissions WHERE SiteID = b.idfsSite
        )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  );

        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT b.idfBatchTest
            FROM dbo.tlbBatchTest b
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = b.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        INSERT INTO @FinalResults
        SELECT res.ID,
               MAX(res.BatchStatusTypeID),
               MAX(ReadPermissionIndicator),
               MAX(AccessToPersonalDataPermissionIndicator),
               MAX(AccessToGenderAndAgeDataPermissionIndicator),
               MAX(WritePermissionIndicator),
               MAX(DeletePermissionIndicator),
               (
                   SELECT COUNT(idfTesting)
                   FROM dbo.tlbTesting
                   WHERE idfBatchTest = res.ID
                         AND intRowStatus = 0
               ) AS TestsCount
        FROM @Results res
            INNER JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = res.ID
            INNER JOIN dbo.tlbTesting t
                ON t.idfBatchTest = b.idfBatchTest
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbMonitoringSession ms
                ON ms.idfMonitoringSession = m.idfMonitoringSession
                   AND ms.intRowStatus = 0
            LEFT JOIN dbo.tlbCampaign c
                ON c.idfCampaign = ms.idfCampaign
                   AND c.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = m.idfMaterial
                   AND tom.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOUT tro
                ON tro.idfTransferOut = tom.idfTransferOut
                   AND tro.intRowStatus = 0
            LEFT JOIN dbo.tlbSpecies species
                ON species.idfSpecies = m.idfSpecies
                   AND species.intRowStatus = 0
        WHERE res.ReadPermissionIndicator IN ( 1, 3, 5 )
              AND (
                      (b.idfBatchTest IN (
                                             SELECT CAST([Value] AS BIGINT)
                                             FROM dbo.FN_GBL_SYS_SplitList(@BatchTestList, NULL, ',')
                                         )
                      )
                      OR @BatchTestList IS NULL
                  )
              AND (
                      (
                          @ReportOrSessionTypeID = 10012001 --Human Disease Report
                          AND (
                                  (m.idfHumanCase IS NOT NULL)
                                  OR (
                                         m.idfMonitoringSession IS NOT NULL
                                         AND ms.SessionCategoryID = 10502001 --Human Active Surveillance Session
                                     )
                              )
                      )
                      OR (
                             @ReportOrSessionTypeID = 10012006 --Vector Surveillance Session
                             AND m.idfVectorSurveillanceSession IS NOT NULL
                         )
                      OR (
                             @ReportOrSessionTypeID = 10012005 --Veterinary Disease Report
                             AND (
                                     (m.idfVetCase IS NOT NULL)
                                     OR (
                                            m.idfMonitoringSession IS NOT NULL
                                            AND ms.SessionCategoryID IN ( 10502002, 10502009 ) --Veterinary Active Surveillance Session (Avian and Livestock)
                                        )
                                 )
                         )
                      OR (@ReportOrSessionTypeID IS NULL)
                  )
              AND (
                      (
                          @SurveillanceTypeID = 4578940000001 --Active
                          AND (
                                  m.idfMonitoringSession IS NOT NULL
                                  OR m.idfVectorSurveillanceSession IS NOT NULL
                              )
                      )
                      OR (
                             @SurveillanceTypeID = 4578940000002 --Passive
                             AND (
                                     m.idfHumanCase IS NOT NULL
                                     OR m.idfVetCase IS NOT NULL
                                 )
                         )
                      OR (@SurveillanceTypeID IS NULL)
                  )
              AND (
                      (
                          (
                              m.blnAccessioned = @AccessionedIndicatorList
                              AND m.idfsAccessionCondition IS NULL
                          )
                          OR (
                                 @AccessionedIndicatorList IS NULL
                                 AND @SampleStatusTypeList IS NULL
                             )
                      )
                      OR (
                             (
                                 (m.idfsSampleStatus IN (
                                                            SELECT CAST([Value] AS BIGINT)
                                                            FROM dbo.FN_GBL_SYS_SplitList(
                                                                                             @SampleStatusTypeList,
                                                                                             NULL,
                                                                                             ','
                                                                                         )
                                                        )
                                 )
                                 OR (
                                        m.idfsAccessionCondition IN (
                                                                        SELECT CAST([Value] AS BIGINT)
                                                                        FROM dbo.FN_GBL_SYS_SplitList(
                                                                                                         @SampleStatusTypeList,
                                                                                                         NULL,
                                                                                                         ','
                                                                                                     )
                                                                    )
                                        AND (
                                                m.idfsSampleStatus IS NULL
                                                OR m.idfsSampleStatus = 10015007 --In Repository
                                            )
                                    )
                             )
                             OR (
                                    @SampleStatusTypeList IS NULL
                                    AND @AccessionedIndicatorList IS NULL
                                )
                         )
                  )
              AND (
                      m.idfSendToOffice = @SentToOrganizationID
                      OR @SentToOrganizationID IS NULL
                  )
              AND (
                      tro.idfSendToOffice = @TransferredToOrganizationID
                      OR @TransferredToOrganizationID IS NULL
                  )
              AND (
                      t.idfTestedByOffice = @ResultsReceivedFromID
                      OR @ResultsReceivedFromID IS NULL
                  )
              AND (
                      m.idfsSampleType = @SampleTypeID
                      OR @SampleTypeID IS NULL
                  )
              AND (
                      t.idfsTestName = @TestNameTypeID
                      OR @TestNameTypeID IS NULL
                  )
              AND (
                      t.idfsDiagnosis = @DiseaseID
                      OR @DiseaseID IS NULL
                  )
              AND (
                      t.idfsTestStatus = @TestStatusTypeID
                      OR @TestStatusTypeID IS NULL
                  )
              AND (
                      t.idfsTestResult = @TestResultTypeID
                      OR @TestResultTypeID IS NULL
                  )
              AND (
                      species.idfsSpeciesType = @SpeciesTypeID
                      OR @SpeciesTypeID IS NULL
                  )
              AND (
                      (t.datConcludedDate
              BETWEEN @TestResultDateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @TestResultDateTo)))
                      )
                      OR (
                             @TestResultDateFrom IS NULL
                             OR @TestResultDateTo IS NULL
                         )
                  )
              AND (
                      (
                          m.strCalculatedCaseID LIKE '%' + @EIDSSReportCampaignOrSessionID + '%'
                          OR c.strCampaignID LIKE '%' + @EIDSSReportCampaignOrSessionID + '%'
                      )
                      OR (@EIDSSReportCampaignOrSessionID IS NULL)
                  )
              AND (
                      m.strCalculatedHumanName LIKE '%' + @PatientName + '%'
                      OR @PatientName IS NULL
                  )
              AND (
                      m.strCalculatedHumanName LIKE '%' + @FarmOwnerName + '%'
                      OR @FarmOwnerName IS NULL
                  )
              AND (
                      m.strFieldBarcode LIKE '%' + @EIDSSLocalOrFieldSampleID + '%'
                      OR @EIDSSLocalOrFieldSampleID IS NULL
                  )
              AND (
                      tro.strBarcode LIKE '%' + @EIDSSTransferID + '%'
                      OR @EIDSSTransferID IS NULL
                  )
              AND (
                      m.strBarcode LIKE '%' + @EIDSSLaboratorySampleID + '%'
                      OR @EIDSSLaboratorySampleID IS NULL
                  )
        GROUP by res.ID;

        DELETE FROM @FinalResults
        WHERE TestsCount = 0;

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        SET @InProgressCount =
        (
            SELECT IIF(
                       SUM(   CASE
                                  WHEN BatchStatusTypeID = 10001003 --In Progress
                              THEN
                                      1
                                  ELSE
                                      0
                              END
                          ) IS NULL,
                       0,
                       SUM(   CASE
                                  WHEN BatchStatusTypeID = 10001003 --In Progress
                              THEN
                                      1
                                  ELSE
                                      0
                              END
                          ))
            FROM @FinalResults res
                INNER JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = res.ID
        );

        SELECT b.idfBatchTest AS BatchTestID,
               CASE
                   WHEN f.SampleID IS NULL THEN
                       0
                   ELSE
                       1
               END AS FavoriteIndicator,
               b.strBarcode AS EIDSSBatchTestID,
               b.idfsBatchStatus AS BatchStatusTypeID,
               batchStatusType.name AS BatchStatusTypeName,
               b.idfPerformedByOffice AS BatchTestPerformedByOrganizationID,
               b.idfPerformedByPerson AS BatchTestPerformedByPersonID,
               b.idfsTestName AS BatchTestTestNameTypeID,
               batchTestTestNameType.name AS BatchTestTestNameTypeName,
               t.idfTesting AS TestID,
               t.idfsTestName AS TestNameTypeID,
               t.idfsTestCategory AS TestCategoryTypeID,
               t.idfsTestResult AS TestResultTypeID,
               t.idfsTestStatus AS TestStatusTypeID,
               t.idfsDiagnosis AS DiseaseID,
               disease.name AS DiseaseName,
               m.idfMaterial AS SampleID,
               m.idfSendToOffice AS SentToOrganizationID,
               t.intTestNumber AS TestNumber,
               t.strNote AS Note,
               t.datStartedDate AS StartedDate,
               t.datConcludedDate AS ResultDate,
               t.idfTestedByOffice AS TestedByOrganizationID,
               t.idfTestedByPerson AS TestedByPersonID,
               t.idfResultEnteredByOffice AS ResultEnteredByOrganizationID,
               t.idfResultEnteredByPerson AS ResultEnteredByPersonID,
               t.idfValidatedByOffice AS ValidatedByOrganizationID,
               t.idfValidatedByPerson AS ValidatedByPersonID,
               t.blnReadOnly AS ReadOnlyIndicator,
               t.blnNonLaboratoryTest AS NonLaboratoryTestIndicator,
               t.blnExternalTest AS ExternalTestIndicator,
               t.idfPerformedByOffice AS PerformedByOrganizationID,
               t.datReceivedDate AS ReceivedDate,
               t.strContactPerson AS ContactPersonName,
               m.strCalculatedCaseID AS EIDSSReportOrSessionID,
               CASE
                   WHEN res.AccessToPersonalDataPermissionIndicator = 0 THEN
                       '**********'
                   ELSE
                       m.strCalculatedHumanName
               END AS PatientOrFarmOwnerName,
               sampleType.name AS SampleTypeName,
               m.strBarcode AS EIDSSLaboratorySampleID,
               testNameType.name AS TestNameTypeName,
               testStatusType.name AS TestStatusTypeName,
               testResultType.name AS TestResultTypeName,
               testCategoryType.name AS TestCategoryTypeName,
               m.datAccession AS AccessionDate,
               functionalArea.name AS FunctionalAreaName,
               m.idfsAccessionCondition AS SampleStatusTypeID,
               (CASE
                    WHEN m.blnAccessioned = 0
                         AND m.idfsAccessionCondition IS NULL THEN
                        'Un-accessioned'
                    WHEN m.idfsSampleStatus IS NULL THEN
                        accessionConditionType.name
                    WHEN m.idfsSampleStatus = 10015007 --In Repository
               THEN
                        accessionConditionType.name
                    ELSE
                        sampleStatusType.name
                END
               ) AS AccessionConditionOrSampleStatusTypeName,
               m.strCondition AS AccessionComment,
               a.strAnimalCode AS EIDSSAnimalID,
               b.TestRequested,
               b.idfObservation AS ObservationID,
               b.idfPerformedByPerson AS PerformedByPersonID,
               b.datPerformedDate AS PerformedDate,
               b.datValidatedDate AS ValidationDate,
               b.idfsSite AS SiteID,
               t.intRowStatus AS RowStatus,
               CASE
                   WHEN res.ReadPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.ReadPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.ReadPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.ReadPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.ReadPermissionIndicator)
               END AS ReadPermissionindicator,
               CASE
                   WHEN res.AccessToPersonalDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.AccessToPersonalDataPermissionIndicator)
               END AS AccessToPersonalDataPermissionIndicator,
               CASE
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.AccessToGenderAndAgeDataPermissionIndicator)
               END AS AccessToGenderAndAgeDataPermissionIndicator,
               CASE
                   WHEN res.WritePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.WritePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.WritePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.WritePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.WritePermissionIndicator)
               END AS WritePermissionIndicator,
               CASE
                   WHEN res.DeletePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.DeletePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.DeletePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.DeletePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.DeletePermissionIndicator)
               END AS DeletePermissionIndicator,
               0 AS RowAction,
               0 AS RowSelectionIndicator,
               COUNT(*) OVER () AS TotalRowCount,
               @InProgressCount AS InProgressCount,
               res.TestsCount
        FROM @FinalResults res
            INNER JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = res.ID
            INNER JOIN dbo.tlbTesting t
                ON t.idfBatchTest = b.idfBatchTest
                   AND t.intRowStatus = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) disease
                ON disease.idfsReference = t.idfsDiagnosis
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                ON sampleType.idfsReference = m.idfsSampleType
            LEFT JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbAnimal a
                ON a.idfAnimal = m.idfAnimal
                   AND a.intRowStatus = 0
            LEFT JOIN dbo.tlbDepartment d
                ON d.idfDepartment = m.idfInDepartment
                   AND d.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000164) functionalArea
                ON functionalArea.idfsReference = d.idfsDepartmentName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) batchTestTestNameType
                ON batchTestTestNameType.idfsReference = b.idfsTestName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                ON testNameType.idfsReference = t.idfsTestName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                ON testStatusType.idfsReference = t.idfsTestStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                ON testResultType.idfsReference = t.idfsTestResult
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                ON testCategoryType.idfsReference = t.idfsTestCategory
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                ON accessionConditionType.idfsReference = m.idfsAccessionCondition
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                ON sampleStatusType.idfsReference = m.idfsSampleStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) batchStatusType
                ON batchStatusType.idfsReference = b.idfsBatchStatus;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_BATCH_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_BATCH_GETList
--
-- Description:	Get laboratory batch list for the various laboratory use cases.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     11/10/2018 Initial release.
-- Stephen Long     12/19/2018 Added pagination logic.
-- Stephen Long     01/25/2019 Changed where clause to look at batch test row status instead of 
--                             test.
-- Stephen Long     02/01/2019 Added sample disease reference join and removed the vector 
--                             surveillance session joins as they are no longer needed.
-- Stephen Long     02/19/2019 Removed positive and negative control and reagent lot numbers.
--                             Added organization ID parameter.
-- Stephen Long     03/25/2019 Added the overall batch test test name type ID and name.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     09/14/2019 Added pagination set 0 to bring back "all" records.
-- Stephen Long     01/22/2020 Added site list parameter for site filtration.
-- Stephen Long     03/11/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     04/23/2020 Correction on disease ID and disease name; add vector surveillance 
--                             session.
-- Stephen Long     04/26/2020 Added sent to organization ID to the model.
-- Stephen Long     11/28/2020 Added configurable site filtration rules.
-- Stephen Long     12/16/2020 Changed join for vector surveillance session diseases to the sample
--                             table.
-- Stephen Long     12/31/2020 Change function on reference data to handle inactive records.
-- Mark Wilson		08/16/2021 Join tlbMonitoringSessionToDiagnosis to get diagnosis
-- Stephen Long     09/25/2021 Added new pagination and order by.
-- Stephen Long     12/08/2021 Changed pagination logic and removed option recompile.
-- Stephen Long     04/21/2022 Added final results to remove duplicates from filtration.
-- Stephen Long     07/26/2022 Changed from repair to reference repair function.
-- Stephen Long     08/08/2022 Added where criteria to only return batches with tests.
-- Stephen Long     10/24/2022 Moved where clause check on tests count to insert of final results.
-- Stephen Long     12/29/2022 Removed sorting and pagination logic; business decision so records
--                             pending save could be shown at the top of the list prior to saving.
-- Stephen Long     01/12/2023 Updated for site filtration queries.
--
-- Testing Code:
/*
DECLARE	@return_value int

EXEC	@return_value = [dbo].[USP_LAB_BATCH_GETList]
		@LanguageID = N'en-US',
		@UserID = 161287150000872, --rykermase
		@UserEmployeeID = 420664190000872,
		@UserSiteID = 864,
		@UserOrganizationID = 758210000000,
		@UserSiteGroupID = NULL,
		@Page = 1,
		@PageSize = 10,
		@SortColumn = N'EIDSSLaboratorySampleID',
		@SortOrder = N'DESC'

SELECT	'Return Value' = @return_value

GO
*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_BATCH_GETList]
(
    @LanguageID NVARCHAR(50),
    @UserID BIGINT,
    @UserEmployeeID BIGINT,
    @UserOrganizationID BIGINT = NULL,
    @UserSiteID BIGINT,
    @UserSiteGroupID BIGINT = NULL
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL,
        BatchStatusTypeID BIGINT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID BIGINT NOT NULL,
        BatchStatusTypeID BIGINT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL,
        TestsCount INT NOT NULL
    );
    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @Favorites XML,
            @InProgressCount INT = 0;

    BEGIN TRY
        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        SET @Favorites =
        (
            SELECT PreferenceDetail
            FROM dbo.UserPreference Laboratory
            WHERE idfUserID = @UserID
                  AND ModuleConstantID = 10508006
                  AND intRowStatus = 0
        );

        INSERT INTO @Results
        SELECT b.idfBatchTest,
               b.idfsBatchStatus,
               1,
               1,
               1,
               1,
               1
        FROM dbo.tlbBatchTest b
        WHERE b.idfPerformedByOffice = @UserOrganizationID
              AND b.idfsSite = @UserSiteID
              AND b.intRowStatus = 0;

        -- =======================================================================================
        -- CONFIGURABLE FILTRATION RULES
        -- 
        -- Apply configurable filtration rules for use case SAUC34. Some of these rules may 
        -- overlap the non-configurable rules.
        -- =======================================================================================
        --
        -- Apply at the user's site group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest,
               b.idfsBatchStatus,
               ar.ReadPermissionIndicator,
               ar.AccessToPersonalDataPermissionIndicator,
               ar.AccessToGenderAndAgeDataPermissionIndicator,
               ar.WritePermissionIndicator,
               ar.DeletePermissionIndicator
        FROM dbo.tlbBatchTest b
            INNER JOIN dbo.tflSiteToSiteGroup AS grantingSGS
                ON grantingSGS.idfsSite = b.idfsSite
            INNER JOIN dbo.tstUserTable AS u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor AS ara
                ON ara.ActorSiteGroupID = @UserSiteGroupID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule AS ar
                ON ar.AccessRuleID = ara.AccessRuleID
                   AND ar.intRowStatus = 0
        WHERE b.intRowStatus = 0
              AND @UserSiteGroupID IS NOT NULL
              AND ar.GrantingActorSiteGroupID IS NOT NULL
              AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest,
               b.idfsBatchStatus,
               ar.ReadPermissionIndicator,
               ar.AccessToPersonalDataPermissionIndicator,
               ar.AccessToGenderAndAgeDataPermissionIndicator,
               ar.WritePermissionIndicator,
               ar.DeletePermissionIndicator
        FROM dbo.tlbBatchTest b
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = b.idfsSite
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule ar
                ON ar.AccessRuleID = ara.AccessRuleID
                   AND ar.intRowStatus = 0
        WHERE b.intRowStatus = 0
              AND ar.GrantingActorSiteGroupID IS NOT NULL
              AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's employee group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest,
               b.idfsBatchStatus,
               ar.ReadPermissionIndicator,
               ar.AccessToPersonalDataPermissionIndicator,
               ar.AccessToGenderAndAgeDataPermissionIndicator,
               ar.WritePermissionIndicator,
               ar.DeletePermissionIndicator
        FROM dbo.tlbBatchTest b
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = b.idfsSite
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule ar
                ON ar.AccessRuleID = ara.AccessRuleID
                   AND ar.intRowStatus = 0
        WHERE b.intRowStatus = 0
              AND ar.GrantingActorSiteGroupID IS NOT NULL
              AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's ID level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest,
               b.idfsBatchStatus,
               ar.ReadPermissionIndicator,
               ar.AccessToPersonalDataPermissionIndicator,
               ar.AccessToGenderAndAgeDataPermissionIndicator,
               ar.WritePermissionIndicator,
               ar.DeletePermissionIndicator
        FROM dbo.tlbBatchTest b
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = b.idfsSite
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule ar
                ON ar.AccessRuleID = ara.AccessRuleID
                   AND ar.intRowStatus = 0
        WHERE b.intRowStatus = 0
              AND ar.GrantingActorSiteGroupID IS NOT NULL
              AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest,
               b.idfsBatchStatus,
               ar.ReadPermissionIndicator,
               ar.AccessToPersonalDataPermissionIndicator,
               ar.AccessToGenderAndAgeDataPermissionIndicator,
               ar.WritePermissionIndicator,
               ar.DeletePermissionIndicator
        FROM dbo.tlbBatchTest b
            INNER JOIN dbo.tflSiteToSiteGroup sgs
                ON sgs.idfSiteGroup = @UserSiteGroupID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule ar
                ON ar.AccessRuleID = ara.AccessRuleID
                   AND ar.intRowStatus = 0
        WHERE b.intRowStatus = 0
              AND @UserSiteGroupID IS NOT NULL
              AND sgs.idfsSite = b.idfsSite;

        -- 
        -- Apply at the user's site level, granted by a site.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest,
               b.idfsBatchStatus,
               ar.ReadPermissionIndicator,
               ar.AccessToPersonalDataPermissionIndicator,
               ar.AccessToGenderAndAgeDataPermissionIndicator,
               ar.WritePermissionIndicator,
               ar.DeletePermissionIndicator
        FROM dbo.AccessRule ar
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.tlbBatchTest b
                ON b.intRowStatus = 0
        WHERE ar.GrantingActorSiteID IS NOT NULL
              AND b.idfsSite = ar.GrantingActorSiteID;

        -- 
        -- Apply at the user's employee group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest,
               b.idfsBatchStatus,
               ar.ReadPermissionIndicator,
               ar.AccessToPersonalDataPermissionIndicator,
               ar.AccessToGenderAndAgeDataPermissionIndicator,
               ar.WritePermissionIndicator,
               ar.DeletePermissionIndicator
        FROM dbo.AccessRule ar
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.tlbBatchTest b
                ON b.intRowStatus = 0
        WHERE ar.GrantingActorSiteID IS NOT NULL
              AND b.idfsSite = ar.GrantingActorSiteID;

        -- 
        -- Apply at the user's ID level, granted by a site.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest,
               b.idfsBatchStatus,
               ar.ReadPermissionIndicator,
               ar.AccessToPersonalDataPermissionIndicator,
               ar.AccessToGenderAndAgeDataPermissionIndicator,
               ar.WritePermissionIndicator,
               ar.DeletePermissionIndicator
        FROM dbo.AccessRule ar
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.tlbBatchTest b
                ON b.intRowStatus = 0
        WHERE ar.GrantingActorSiteID IS NOT NULL
              AND b.idfsSite = ar.GrantingActorSiteID;

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT b.idfBatchTest
            FROM dbo.tlbBatchTest b
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = b.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE b.intRowStatus = 0
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup -- Default role
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = res.ID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = b.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003 -- Read permission
              AND NOT EXISTS
        (
            SELECT * FROM @UserSitePermissions WHERE SiteID = b.idfsSite
        );

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT b.idfBatchTest
            FROM dbo.tlbBatchTest b
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = b.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        INSERT INTO @FinalResults
        SELECT ID,
               MAX(res.BatchStatusTypeID),
               MAX(ReadPermissionIndicator),
               MAX(AccessToPersonalDataPermissionIndicator),
               MAX(AccessToGenderAndAgeDataPermissionIndicator),
               MAX(WritePermissionIndicator),
               MAX(DeletePermissionIndicator),
               (
                   SELECT COUNT(idfTesting)
                   FROM dbo.tlbTesting
                   WHERE idfBatchTest = res.ID
                         AND intRowStatus = 0
               ) AS TestsCount
        FROM @Results res
        WHERE res.ReadPermissionIndicator IN ( 1, 3, 5 )
        GROUP BY ID;

        DELETE FROM @FinalResults
        WHERE TestsCount = 0;

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        SET @InProgressCount =
        (
            SELECT IIF(
                       SUM(   CASE
                                  WHEN BatchStatusTypeID = 10001003 --In Progress
                              THEN
                                      1
                                  ELSE
                                      0
                              END
                          ) IS NULL,
                       0,
                       SUM(   CASE
                                  WHEN BatchStatusTypeID = 10001003 --In Progress
                              THEN
                                      1
                                  ELSE
                                      0
                              END
                          ))
            FROM @FinalResults res
                INNER JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = res.ID
                       AND b.intRowStatus = 0
            WHERE b.idfPerformedByOffice = @UserOrganizationID
                  AND b.idfsSite = @UserSiteID
                  AND b.intRowStatus = 0
                  AND
                  (
                      SELECT COUNT(t.idfTesting)
                      FROM dbo.tlbTesting t
                      WHERE t.idfBatchTest = b.idfBatchTest
                  ) > 0
        );

        SELECT b.idfBatchTest AS BatchTestID,
               b.strBarcode AS EIDSSBatchTestID,
               b.idfsBatchStatus AS BatchStatusTypeID,
               batchStatusType.name AS BatchStatusTypeName,
               b.idfPerformedByOffice AS PerformedByOrganizationID,
               b.idfPerformedByPerson AS PerformedByPersonID,
               b.idfResultEnteredByOffice AS ResultEnteredByOrganizationID,
               b.idfResultEnteredByPerson AS ResultEnteredByPersonID,
               b.idfValidatedByOffice AS ValidatedByOrganizationID,
               b.idfValidatedByPerson AS ValidatedByPersonID,
               b.idfsTestName AS BatchTestTestNameTypeID,
               batchTestTestNameType.name AS BatchTestTestNameTypeName,
               b.TestRequested,
               b.idfObservation AS ObservationID,
               b.datPerformedDate AS PerformedDate,
               b.datValidatedDate AS ValidationDate,
               b.idfsSite AS SiteID,
               (
                   SELECT TOP 1
                       idfsDiagnosis
                   FROM dbo.tlbTesting
                   WHERE idfBatchTest = b.idfBatchTest
                         AND intRowStatus = 0
               ) AS DiseaseID,
               CASE
                   WHEN res.ReadPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.ReadPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.ReadPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.ReadPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.ReadPermissionIndicator)
               END AS ReadPermissionindicator,
               CASE
                   WHEN res.AccessToPersonalDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.AccessToPersonalDataPermissionIndicator)
               END AS AccessToPersonalDataPermissionIndicator,
               CASE
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.AccessToGenderAndAgeDataPermissionIndicator)
               END AS AccessToGenderAndAgeDataPermissionIndicator,
               CASE
                   WHEN res.WritePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.WritePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.WritePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.WritePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.WritePermissionIndicator)
               END AS WritePermissionIndicator,
               CASE
                   WHEN res.DeletePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.DeletePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.DeletePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.DeletePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.DeletePermissionIndicator)
               END AS DeletePermissionIndicator,
               0 AS RowAction,
               0 AS RowSelectionIndicator,
               COUNT(*) OVER () AS TotalRowCount,
               @InProgressCount AS InProgressCount,
               res.TestsCount
        FROM @FinalResults res
            INNER JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = res.ID
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) batchTestTestNameType
                ON batchTestTestNameType.idfsReference = b.idfsTestName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) batchStatusType
                ON batchStatusType.idfsReference = b.idfsBatchStatus;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_FAVORITE_ADVANCED_SEARCH_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_FAVORITE_ADVANCED_SEARCH_GETList
--
-- Description:	Get laboratory favorites list for the various laboratory use cases.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     02/21/2019 Initial release.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     10/07/2019 Removed @CampaignID variable; just use EIDSSReportCampaignSessionID.
-- Stephen Long     01/15/2020 Added transfer ID to query.
-- Stephen Long     01/22/2020 Converted site ID to site list for site filtration.
-- Stephen Long     03/11/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     04/16/2020 Added sample and test list parameters and where clause criteria.
-- Stephen Long     04/23/2020 Correction on disease ID and disease name; add vector surveillance 
--                             session.
-- Stephen Long     04/26/2020 Added sent to organization ID to the model.
-- Stephen Long     06/06/2020 Added batch status type ID to the model.
-- Stephen Long     06/14/2020 Added action requested to the model.
-- Stephen Long     06/24/2020 Added test completed indicator to the model.
-- Stephen Long     08/25/2020 Added criteria to ignore time on date betweens.
-- Stephen Long     09/02/2020 Changed accessioned indicator from int to varchar to handle searches
--                             with un-accessioned and accessioned samples in the same query.
-- Stephen Long     10/30/2020 Removing unneeded joins.
-- Stephen Long     11/29/2020 Added configurable site filtration rules.
-- Stephen Long     12/16/2020 Changed join for vector surveillance session diseases to the sample
--                             table.
-- Stephen Long     12/23/2020 Correction on accession indicator list where criteria.
-- Stephen Long     12/31/2020 Change function on reference data to handle inactive records.
-- Stephen Long     01/03/2020 Added option recompile to select queries.
-- Stephen Long     01/21/2021 Changed counts to use group by in sub-query instead of count 
--                             distinct and added with recompile to handle number of nullable 
--                             parameters.
-- Stephen Long     01/24/2021 Correct where criteria on accession indicator list.
-- Mark Wilson		08/16/2021 Join tlbMonitoringSessionToDiagnosis to get diagnosis
-- Stephen Long     09/25/2021 Added new pagination and order by.
-- Stephen Long     10/14/2021 Changed report or session type ID to bigint.
-- Stephen Long     11/18/2021 Added action requested ID and previous test status type to the 
--                             query.
-- Stephen Long     12/08/2021 Changed pagination logic and removed option recompile.
-- Stephen Long     12/14/2021 Added sample status date to the query.
-- Stephen Long     12/15/2021 Added configurable filtration rules.
-- Stephen Long     02/10/2022 Removed unneeded joins on the disease fields.
-- Stephen Long     03/10/2022 Added note field to the query.
-- Stephen Long     05/17/2022 Removed primary key from monitoring and vector session disease 
--                             table variables.
-- Stephen Long     05/20/2022 Added string agg to session diseases.
-- Mike Kornegay	06/14/2022 Added new additional SessionCategoryID for Vet Avian / Vet Livestock 
--                             breakout.
-- Stephen Long     07/26/2022 Updated case statement on disease id and name.
-- Stephen Long     08/11/2022 Removed show in lab list criteria.
-- Stephen Long     08/12/2022 Removed where criteria for surveillance type of both; de-activated 
--                             base reference record.  Changed group by on insert of final results.
-- Stephen Long     08/26/2022 Added additional checks on accession and entered date range checks.
-- Stephen Long     09/28/2022 Bug fix on item 5117.
-- Stephen Long     10/21/2022 Added display disease names separated by comma.
-- Stephen Long     12/29/2022 Removed sorting and pagination logic; business decision so records
--                             pending save could be shown at the top of the list prior to saving.
-- Stephen Long     01/12/2023 Updated for site filtration queries.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_FAVORITE_ADVANCED_SEARCH_GETList]
(
    @LanguageID NVARCHAR(50),
    @ReportOrSessionTypeID BIGINT = NULL,
    @SurveillanceTypeID BIGINT = NULL,
    @SampleStatusTypeList VARCHAR(MAX) = NULL,
    @AccessionedIndicatorList VARCHAR(3) = NULL,
    @EIDSSLocalOrFieldSampleID NVARCHAR(200) = NULL,
    @EIDSSReportCampaignOrSessionID NVARCHAR(200) = NULL,
    @SentToOrganizationID BIGINT = NULL,
    @TransferredToOrganizationID BIGINT = NULL,
    @EIDSSTransferID NVARCHAR(200) = NULL,
    @ResultsReceivedFromID BIGINT = NULL,
    @DateFrom DATETIME = NULL,
    @DateTo DATETIME = NULL,
    @EIDSSLaboratorySampleID NVARCHAR(200) = NULL,
    @SampleTypeID BIGINT = NULL,
    @TestNameTypeID BIGINT = NULL,
    @DiseaseID BIGINT = NULL,
    @TestStatusTypeID BIGINT = NULL,
    @TestResultTypeID BIGINT = NULL,
    @TestResultDateFrom DATETIME = NULL,
    @TestResultDateTo DATETIME = NULL,
    @PatientName NVARCHAR(200) = NULL,
    @FarmOwnerName NVARCHAR(200) = NULL,
    @SpeciesTypeID BIGINT = NULL,
    @SampleList VARCHAR(MAX) = NULL,
    @TestList VARCHAR(MAX) = NULL,
    @UserID BIGINT,
    @UserEmployeeID BIGINT,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT = NULL,
    @UserSiteGroupID BIGINT = NULL
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @MonitoringSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL,
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @VectorSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL,
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @Results TABLE
    (
        ID INT NOT NULL IDENTITY,
        SampleID BIGINT NOT NULL,
        TestID BIGINT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID INT NOT NULL IDENTITY,
        SampleID BIGINT NOT NULL,
        TestID BIGINT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @Favorites XML;

    BEGIN TRY
        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        SET @Favorites =
        (
            SELECT PreferenceDetail
            FROM dbo.UserPreference Laboratory
            WHERE idfUserID = @UserID
                  AND ModuleConstantID = 10508006
                  AND intRowStatus = 0
        );

        INSERT INTO @MonitoringSessionDiseases
        SELECT MonitoringSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames,
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames
        FROM dbo.FN_LAB_MONITORING_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY MonitoringSessionID;

        INSERT INTO @VectorSessionDiseases
        SELECT VectorSurveillanceSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames,
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames
        FROM dbo.FN_LAB_VECTOR_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY VectorSurveillanceSessionID;

        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               1,
               1,
               1,
               1,
               1
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
        WHERE m.intRowStatus = 0
              AND (
                      m.idfSendToOffice = @UserOrganizationID
                      OR @UserOrganizationID IS NULL
                  )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND (
                                     (
                                         m.datFieldCollectionDate IS NOT NULL
                                         AND m.datFieldCollectionDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                     )
                                     OR (
                                            m.datEnteringDate IS NOT NULL
                                            AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                        )
                                 )
                         )
                  );

        -- =======================================================================================
        -- CONFIGURABLE FILTRATION RULES
        -- 
        -- Apply configurable filtration rules for use case SAUC34. Some of these rules may 
        -- overlap the non-configurable rules.
        -- =======================================================================================
        --
        -- Apply at the user's site group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                ON userSiteGroup.idfsSite = @UserSiteID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND (
                                     (
                                         m.datFieldCollectionDate IS NOT NULL
                                         AND m.datFieldCollectionDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                     )
                                     OR (
                                            m.datEnteringDate IS NOT NULL
                                            AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                        )
                                 )
                         )
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND (
                                     (
                                         m.datFieldCollectionDate IS NOT NULL
                                         AND m.datFieldCollectionDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                     )
                                     OR (
                                            m.datEnteringDate IS NOT NULL
                                            AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                        )
                                 )
                         )
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's employee group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND (
                                     (
                                         m.datFieldCollectionDate IS NOT NULL
                                         AND m.datFieldCollectionDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                     )
                                     OR (
                                            m.datEnteringDate IS NOT NULL
                                            AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                        )
                                 )
                         )
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's ID level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND (
                                     (
                                         m.datFieldCollectionDate IS NOT NULL
                                         AND m.datFieldCollectionDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                     )
                                     OR (
                                            m.datEnteringDate IS NOT NULL
                                            AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                        )
                                 )
                         )
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tflSiteToSiteGroup sgs
                ON sgs.idfsSite = @UserSiteID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND (
                                     (
                                         m.datFieldCollectionDate IS NOT NULL
                                         AND m.datFieldCollectionDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                     )
                                     OR (
                                            m.datEnteringDate IS NOT NULL
                                            AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                        )
                                 )
                         )
                  )
              AND sgs.idfsSite = m.idfsSite;

        -- 
        -- Apply at the user's site level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND (
                                     (
                                         m.datFieldCollectionDate IS NOT NULL
                                         AND m.datFieldCollectionDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                     )
                                     OR (
                                            m.datEnteringDate IS NOT NULL
                                            AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                        )
                                 )
                         )
                  )
              AND a.GrantingActorSiteID = m.idfsSite;

        -- 
        -- Apply at the user's employee group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND (
                                     (
                                         m.datFieldCollectionDate IS NOT NULL
                                         AND m.datFieldCollectionDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                     )
                                     OR (
                                            m.datEnteringDate IS NOT NULL
                                            AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                        )
                                 )
                         )
                  )
              AND a.GrantingActorSiteID = m.idfsSite;

        -- 
        -- Apply at the user's ID level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND (
                                     (
                                         m.datFieldCollectionDate IS NOT NULL
                                         AND m.datFieldCollectionDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                     )
                                     OR (
                                            m.datEnteringDate IS NOT NULL
                                            AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                        )
                                 )
                         )
                  )
              AND a.GrantingActorSiteID = m.idfsSite;

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = m.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE m.intRowStatus = 0
                  AND oa.idfsObjectOperation = 10059003 -- Read permission
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
        WHERE m.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserGroupSitePermissions WHERE SiteID = m.idfsSite
        )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND (
                                     (
                                         m.datFieldCollectionDate IS NOT NULL
                                         AND m.datFieldCollectionDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                     )
                                     OR (
                                            m.datEnteringDate IS NOT NULL
                                            AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                        )
                                 )
                         )
                  );

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.ID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = m.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003; -- Read permission

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
        WHERE m.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserSitePermissions WHERE SiteID = m.idfsSite
        )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND (
                                     (
                                         m.datFieldCollectionDate IS NOT NULL
                                         AND m.datFieldCollectionDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                     )
                                     OR (
                                            m.datEnteringDate IS NOT NULL
                                            AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                        )
                                 )
                         )
                  );

        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = m.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        INSERT INTO @FinalResults
        SELECT m.idfMaterial,
               t.idfTesting,
               MAX(res.ReadPermissionIndicator),
               MAX(res.AccessToPersonalDataPermissionIndicator),
               MAX(res.AccessToGenderAndAgeDataPermissionIndicator),
               MAX(res.WritePermissionIndicator),
               MAX(res.DeletePermissionIndicator)
        FROM @Results res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.SampleID
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            LEFT JOIN dbo.tlbMonitoringSession ms
                ON ms.idfMonitoringSession = m.idfMonitoringSession
                   AND ms.intRowStatus = 0
            LEFT JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                ON msd.idfMonitoringSession = ms.idfMonitoringSession
                   AND msd.intRowStatus = 0
            LEFT JOIN @VectorSessionDiseases vsDiseases
                ON vsDiseases.ID = m.idfVectorSurveillanceSession
            LEFT JOIN dbo.tlbCampaign c
                ON c.idfCampaign = ms.idfCampaign
                   AND c.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = m.idfMaterial
                   AND tom.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOUT tro
                ON tro.idfTransferOut = tom.idfTransferOut
                   AND tro.intRowStatus = 0
            LEFT JOIN dbo.tlbSpecies species
                ON species.idfSpecies = m.idfSpecies
                   AND species.intRowStatus = 0
        WHERE res.ReadPermissionIndicator IN ( 1, 3, 5 )
              AND (
                      (m.idfMaterial IN (
                                            SELECT CAST([Value] AS BIGINT)
                                            FROM dbo.FN_GBL_SYS_SplitList(@SampleList, NULL, ',')
                                        )
                      )
                      OR (@SampleList IS NULL)
                  )
              AND (
                      (t.idfTesting IN (
                                           SELECT CAST([Value] AS BIGINT)
                                           FROM dbo.FN_GBL_SYS_SplitList(@TestList, NULL, ',')
                                       )
                      )
                      OR (@TestList IS NULL)
                  )
              AND (
                      (
                          @ReportOrSessionTypeID = 10012001 --Human Disease Report
                          AND (
                                  (m.idfHumanCase IS NOT NULL)
                                  OR (
                                         m.idfMonitoringSession IS NOT NULL
                                         AND ms.SessionCategoryID = 10502001 --Human Active Surveillance Session
                                     )
                              )
                      )
                      OR (
                             @ReportOrSessionTypeID = 10012006 --Vector Surveillance Session
                             AND m.idfVectorSurveillanceSession IS NOT NULL
                         )
                      OR (
                             @ReportOrSessionTypeID = 10012005 --Veterinary Disease Report
                             AND (
                                     (m.idfVetCase IS NOT NULL)
                                     OR (
                                            m.idfMonitoringSession IS NOT NULL
                                            AND ms.SessionCategoryID IN ( 10502002, 10502009 ) --Veterinary Active Surveillance Session (Avian and Livestock)
                                        )
                                 )
                         )
                      OR (@ReportOrSessionTypeID IS NULL)
                  )
              AND (
                      (
                          @SurveillanceTypeID = 4578940000001 --Active
                          AND (
                                  m.idfMonitoringSession IS NOT NULL
                                  OR m.idfVectorSurveillanceSession IS NOT NULL
                              )
                      )
                      OR (
                             @SurveillanceTypeID = 4578940000002 --Passive
                             AND (
                                     m.idfHumanCase IS NOT NULL
                                     OR m.idfVetCase IS NOT NULL
                                 )
                         )
                      OR (@SurveillanceTypeID IS NULL)
                  )
              AND (
                      (
                          (
                              m.blnAccessioned = @AccessionedIndicatorList
                              AND m.idfsAccessionCondition IS NULL
                          )
                          OR (
                                 @AccessionedIndicatorList IS NULL
                                 AND @SampleStatusTypeList IS NULL
                             )
                      )
                      OR (
                             (
                                 (m.idfsSampleStatus IN (
                                                            SELECT CAST([Value] AS BIGINT)
                                                            FROM dbo.FN_GBL_SYS_SplitList(
                                                                                             @SampleStatusTypeList,
                                                                                             NULL,
                                                                                             ','
                                                                                         )
                                                        )
                                 )
                                 OR (
                                        m.idfsAccessionCondition IN (
                                                                        SELECT CAST([Value] AS BIGINT)
                                                                        FROM dbo.FN_GBL_SYS_SplitList(
                                                                                                         @SampleStatusTypeList,
                                                                                                         NULL,
                                                                                                         ','
                                                                                                     )
                                                                    )
                                        AND (
                                                m.idfsSampleStatus IS NULL
                                                OR m.idfsSampleStatus = 10015007 --In Repository
                                            )
                                    )
                             )
                             OR (
                                    @SampleStatusTypeList IS NULL
                                    AND @AccessionedIndicatorList IS NULL
                                )
                         )
                  )
              AND (
                      m.idfSendToOffice = @SentToOrganizationID
                      OR @SentToOrganizationID IS NULL
                  )
              AND (
                      tro.idfSendToOffice = @TransferredToOrganizationID
                      OR @TransferredToOrganizationID IS NULL
                  )
              AND (
                      t.idfTestedByOffice = @ResultsReceivedFromID
                      OR @ResultsReceivedFromID IS NULL
                  )
              AND (
                      m.idfsSampleType = @SampleTypeID
                      OR @SampleTypeID IS NULL
                  )
              AND (
                      t.idfsTestName = @TestNameTypeID
                      OR @TestNameTypeID IS NULL
                  )
              AND (
                      msd.idfsDiagnosis = @DiseaseID
                      OR @DiseaseID IN (
                                           SELECT CAST([Value] AS BIGINT)
                                           FROM dbo.FN_GBL_SYS_SplitList(vsDiseases.DiseaseIdentifiers, NULL, ',')
                                       )
                      OR m.DiseaseID = @DiseaseID
                      OR @DiseaseID IS NULL
                  )
              AND (
                      t.idfsTestStatus = @TestStatusTypeID
                      OR @TestStatusTypeID IS NULL
                  )
              AND (
                      t.idfsTestResult = @TestResultTypeID
                      OR @TestResultTypeID IS NULL
                  )
              AND (
                      species.idfsSpeciesType = @SpeciesTypeID
                      OR @SpeciesTypeID IS NULL
                  )
              AND (
                      (t.datConcludedDate
              BETWEEN @TestResultDateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @TestResultDateTo)))
                      )
                      OR (
                             @TestResultDateFrom IS NULL
                             OR @TestResultDateTo IS NULL
                         )
                  )
              AND (
                      (
                          m.strCalculatedCaseID LIKE '%' + @EIDSSReportCampaignOrSessionID + '%'
                          OR c.strCampaignID LIKE '%' + @EIDSSReportCampaignOrSessionID + '%'
                      )
                      OR (@EIDSSReportCampaignOrSessionID IS NULL)
                  )
              AND (
                      m.strCalculatedHumanName LIKE '%' + @PatientName + '%'
                      OR @PatientName IS NULL
                  )
              AND (
                      m.strCalculatedHumanName LIKE '%' + @FarmOwnerName + '%'
                      OR @FarmOwnerName IS NULL
                  )
              AND (
                      m.strFieldBarcode LIKE '%' + @EIDSSLocalOrFieldSampleID + '%'
                      OR @EIDSSLocalOrFieldSampleID IS NULL
                  )
              AND (
                      tro.strBarcode LIKE '%' + @EIDSSTransferID + '%'
                      OR @EIDSSTransferID IS NULL
                  )
              AND (
                      m.strBarcode LIKE '%' + @EIDSSLaboratorySampleID + '%'
                      OR @EIDSSLaboratorySampleID IS NULL
                  )
        GROUP BY m.idfMaterial,
                 t.idfTesting;

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        DECLARE @FavoriteCount AS INT = (
                                            SELECT COUNT(*)
                                            FROM @FinalResults
                                                INNER JOIN
                                                (
                                                    SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                                                    FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
                                                ) f
                                                    ON ID = f.SampleID
                                        );

        SELECT m.idfMaterial AS SampleID,
               m.idfsSite AS SiteID,
               m.idfsCurrentSite AS CurrentSiteID,
               t.idfTesting AS TestID,
               tom.idfTransferOut AS TransferID,
               m.strCalculatedCaseID AS EIDSSReportOrSessionID,
               m.strCalculatedHumanName AS PatientOrFarmOwnerName,
               m.idfsSampleType AS SampleTypeID,
               sampleType.name AS SampleTypeName,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       CAST(m.DiseaseID AS NVARCHAR(MAX))
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseIdentifiers
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseIdentifiers
                   ELSE
                       ''
               END AS DiseaseID,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       diseaseName.name
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseNames
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseNames
                   ELSE
                       ''
               END AS DiseaseName,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       diseaseName.name
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DisplayDiseaseNames
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DisplayDiseaseNames
                   ELSE
                       ''
               END AS DisplayDiseaseName,
               m.idfRootMaterial AS RootSampleID,
               m.idfParentMaterial AS ParentSampleID,
               m.strBarcode AS EIDSSLaboratorySampleID,
               m.strFieldBarcode AS EIDSSLocalOrFieldSampleID,
               m.datFieldCollectionDate AS CollectionDate,
               m.idfFieldCollectedByPerson AS CollectedByPersonID,
               m.idfFieldCollectedByOffice AS CollectedByOrganizationID,
               m.datFieldSentDate AS SentDate,
               m.idfSendToOffice AS SentToOrganizationID,
               t.idfsTestName AS TestNameTypeID,
               testNameType.name AS TestNameTypeName,
               t.idfsTestStatus AS TestStatusTypeID,
               testStatusType.name AS TestStatusTypeName,
               t.datStartedDate AS StartedDate,
               t.idfsTestResult AS TestResultTypeID,
               testResultType.name AS TestResultTypeName,
               t.datConcludedDate AS ResultDate,
               t.idfsTestCategory AS TestCategoryTypeID,
               testCategoryType.name AS TestCategoryTypeName,
               m.blnAccessioned AS AccessionIndicator,
               m.datAccession AS AccessionDate,
               m.idfInDepartment AS FunctionalAreaID,
               functionalArea.name AS FunctionalAreaName,
               m.idfSubdivision AS FreezerSubdivisionID,
               m.StorageBoxPlace,
               m.datEnteringDate AS EnteredDate,
               m.datOutOfRepositoryDate AS OutOfRepositoryDate,
               m.idfMarkedForDispositionByPerson AS MarkedForDispositionByPersonID,
               m.blnReadOnly AS ReadOnlyIndicator,
               m.idfsAccessionCondition AS AccessionConditionTypeID,
               m.idfsSampleStatus AS SampleStatusTypeID,
               (CASE
                    WHEN m.blnAccessioned = 0
                         AND m.idfsAccessionCondition IS NULL THEN
                        'Un-accessioned'
                    WHEN m.idfsSampleStatus IS NULL THEN
                        accessionConditionType.name
                    WHEN m.idfsSampleStatus = 10015007 --In Repository
               THEN
                        accessionConditionType.name
                    ELSE
                        sampleStatusType.name
                END
               ) AS AccessionConditionOrSampleStatusTypeName,
               m.idfAccesionByPerson AS AccessionedInByPersonID,
               m.datSampleStatusDate AS SampleStatusDate,
               m.strCondition AS AccessionComment,
               m.strNote AS Comment,
               a.strAnimalCode AS EIDSSAnimalID,
               m.idfsBirdStatus AS BirdStatusTypeID,
               m.idfMainTest AS MainTestID,
               m.idfsSampleKind AS SampleKindTypeID,
               b.idfsBatchStatus AS BatchStatusTypeID,
               ISNULL(   IIF(
                            (
                                SELECT COUNT(t3.idfTesting)
                                FROM dbo.tlbTesting t3
                                WHERE t3.idfsTestStatus IN (   10001003,
                                                                        --In Progress
                                                               10001004 --Preliminary
                                                           )
                                      AND t3.idfMaterial = m.idfMaterial
                                      AND t3.intRowStatus = 0
                                      AND t3.blnNonLaboratoryTest = 0
                            ) > 0,
                            1,
                            0),
                         0
                     ) AS TestAssignedIndicator,
               CASE
                   WHEN m.idfsSampleStatus = 10015002 --Marked for Deletion
               THEN
                       m.idfsSampleStatus
                   WHEN m.idfsSampleStatus = 10015003 --Marked for Destruction
               THEN
                       m.idfsSampleStatus
                   WHEN t.idfsTestStatus = 10001004 --Preliminary
               THEN
                       t.idfsTestStatus
                   WHEN t.idfsTestStatus = 10001008 --Marked for Deletion
               THEN
                       t.idfsTestStatus
               END AS ActionRequestedID,
               CASE
                   WHEN m.idfsSampleStatus = 10015002 --Marked for Deletion
               THEN
                       'Sample Deletion'
                   WHEN m.idfsSampleStatus = 10015003 --Marked for Destruction
               THEN
                       'Sample Destruction'
                   WHEN t.idfsTestStatus = 10001004 --Preliminary
               THEN
                       'Validation'
                   WHEN t.idfsTestStatus = 19000502 --Marked for Deletion
               THEN
                       'Test Deletion'
               END AS ActionRequested,
               ISNULL(   IIF(
                            (
                                SELECT COUNT(t2.idfTesting)
                                FROM dbo.tlbTesting t2
                                WHERE t2.idfsTestStatus IN (   10001001,
                                                                        --Final
                                                               10001006 --Amended
                                                           )
                                      AND t2.idfMaterial = m.idfMaterial
                                      AND t2.intRowStatus = 0
                                      AND t2.blnNonLaboratoryTest = 0
                            ) > 0,
                            1,
                            0),
                         0
                     ) AS TestCompletedIndicator,
               m.PreviousSampleStatusID AS PreviousSampleStatusTypeID,
               t.PreviousTestStatusID AS PreviousTestStatusTypeID,
               m.LabModuleSourceIndicator,
               m.idfHumanCase AS HumanDiseaseReportID,
               m.idfVetCase AS VeterinaryDiseaseReportID,
               m.idfMonitoringSession AS MonitoringSessionID,
               m.idfVectorSurveillanceSession AS VectorSessionID,
               m.idfVector AS VectorID,
               CASE
                   WHEN res.ReadPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.ReadPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.ReadPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.ReadPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.ReadPermissionIndicator)
               END AS ReadPermissionindicator,
               CASE
                   WHEN res.AccessToPersonalDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.AccessToPersonalDataPermissionIndicator)
               END AS AccessToPersonalDataPermissionIndicator,
               CASE
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.AccessToGenderAndAgeDataPermissionIndicator)
               END AS AccessToGenderAndAgeDataPermissionIndicator,
               CASE
                   WHEN res.WritePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.WritePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.WritePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.WritePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.WritePermissionIndicator)
               END AS WritePermissionIndicator,
               CASE
                   WHEN res.DeletePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.DeletePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.DeletePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.DeletePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.DeletePermissionIndicator)
               END AS DeletePermissionIndicator,
               0 AS RowAction,
               0 AS RowSelectionIndicator,
               COUNT(*) OVER () AS TotalRowCount,
               @FavoriteCount AS FavoriteCount
        FROM @FinalResults res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.SampleID
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                ON sampleType.idfsReference = m.idfsSampleType
            LEFT JOIN dbo.tlbTesting t
                ON t.idfTesting = res.TestID
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = m.idfMaterial
                   AND tom.intRowStatus = 0
            LEFT JOIN dbo.tlbAnimal a
                ON a.idfAnimal = m.idfAnimal
                   AND a.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) diseaseName
                ON diseaseName.idfsReference = m.DiseaseID
            LEFT JOIN @MonitoringSessionDiseases msDiseases
                ON msDiseases.ID = m.idfMonitoringSession
            LEFT JOIN @VectorSessionDiseases vsDiseases
                ON vsDiseases.ID = m.idfVectorSurveillanceSession
            LEFT JOIN dbo.tlbDepartment d
                ON d.idfDepartment = m.idfInDepartment
                   AND d.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000164) functionalArea
                ON functionalArea.idfsReference = d.idfsDepartmentName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                ON testNameType.idfsReference = t.idfsTestName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                ON testStatusType.idfsReference = t.idfsTestStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                ON testResultType.idfsReference = t.idfsTestResult
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                ON testCategoryType.idfsReference = t.idfsTestCategory
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                ON accessionConditionType.idfsReference = m.idfsAccessionCondition
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                ON sampleStatusType.idfsReference = m.idfsSampleStatus;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_FAVORITE_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_FAVORITE_GETList
--
-- Description:	Get laboratory favorites list for the various laboratory use cases.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     10/20/2018 Initial release.
-- Stephen Long     12/19/2018 Added pagination logic.
-- Stephen Long     01/25/2019 Added intRowStatus check to where clause.
-- Stephen Long     01/30/2019 Added sample disease reference join and removed the vector 
--                             surveillance session joins as they are no longer needed.
-- Stephen Long     02/20/2019 Added disease ID to the select list.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     09/14/2019 Added pagination set 0 to bring back "all" records.
-- Stephen Long     10/20/2019 Added test assigned indicator and test name type ID to the list of 
--                             fields.
-- Stephen Long     01/15/2020 Added transfer ID to query.
-- Stephen Long     01/22/2020 Cleaned up stored procedure.
-- Stephen Long     03/11/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     04/23/2020 Correction on disease ID and disease name; add vector surveillance 
--                             session.
-- Stephen Long     04/26/2020 Added sent to organization ID to the model.
-- Stephen Long     06/06/2020 Added batch status type ID to the model.
-- Stephen Long     06/14/2020 Added action requested to the model.
-- Stephen Long     06/24/2020 Added test completed indicator to the model.
-- Stephen Long     11/29/2020 Added configurable site filtration rules.
-- Stephen Long     12/16/2020 Changed join for vector surveillance session diseases to the sample
--                             table.
-- Stephen Long     12/31/2020 Change function on reference data to handle inactive records.
-- Mark Wilson		08/16/2021 Join tlbMonitoringSessionToDiagnosis to get diagnosis
-- Stephen Long     09/25/2021 Added new pagination and order by.
-- Stephen Long     11/10/2021 Added sample ID parameter and where criteria.
-- Stephen Long     11/16/2021 Changed to use select row over instead of with cte.
-- Stephen Long     11/18/2021 Added action requested ID and previous test status type to the 
--                  query.
-- Stephen Long     12/14/2021 Added sample status date to the query.
-- Stephen Long     02/10/2022 Removed unneeded joins on the disease fields.
-- Stephen Long     03/10/2022 Added note field to the query.
-- Stephen Long     04/15/2022 Added join for favorites to the filtration queries.
-- Stephen Long     05/17/2022 Removed primary key from monitoring and vector session disease 
--                             table variables.
-- Stephen Long     05/20/2022 Added string agg to session diseases.
-- Stephen Long     07/26/2022 Updated case statement on disease id and name.
-- Stephen Long     10/21/2022 Added display disease names separated by comma.
-- Stephen Long     12/29/2022 Removed sorting and pagination logic; business decision so records
--                             pending save could be shown at the top of the list prior to saving.
-- Stephen Long     01/12/2023 Updated for site filtration queries.
--
-- Testing Code:
/*
DECLARE	@return_value int

EXEC	@return_value = [dbo].[USP_LAB_FAVORITE_GETList]
		@LanguageID = N'en-US',
		@UserID = 161287150000872, --rykermase
		@UserEmployeeID = 420664190000872,
		@UserSiteID = 864,
		@UserOrganizationID = 758210000000,
		@UserSiteGroupID = NULL,
		@Page = 1,
		@PageSize = 10,
		@SortColumn = N'EIDSSLaboratorySampleID',
		@SortOrder = N'DESC'

SELECT	'Return Value' = @return_value

GO
*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_FAVORITE_GETList]
(
    @LanguageID NVARCHAR(50),
    @SampleID BIGINT = NULL,
    @UserID BIGINT,
    @UserEmployeeID BIGINT,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT = NULL,
    @UserSiteGroupID BIGINT = NULL
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @MonitoringSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL,
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @VectorSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL,
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @Favorites XML;

    BEGIN TRY
        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        SET @Favorites =
        (
            SELECT PreferenceDetail
            FROM dbo.UserPreference Laboratory
            WHERE idfUserID = @UserID
                  AND ModuleConstantID = 10508006
                  AND intRowStatus = 0
        );

        INSERT INTO @MonitoringSessionDiseases
        SELECT MonitoringSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames,
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames
        FROM dbo.FN_LAB_MONITORING_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY MonitoringSessionID;

        INSERT INTO @VectorSessionDiseases
        SELECT VectorSurveillanceSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames,
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames
        FROM dbo.FN_LAB_VECTOR_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY VectorSurveillanceSessionID;

        INSERT INTO @Results
        SELECT m.idfMaterial,
               1,
               1,
               1,
               1,
               1
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
        WHERE m.intRowStatus = 0
              AND (
                      m.idfMaterial = @SampleID
                      OR @SampleID IS NULL
                  );

        -- =======================================================================================
        -- CONFIGURABLE FILTRATION RULES
        -- 
        -- Apply configurable filtration rules for use case SAUC34. Some of these rules may 
        -- overlap the non-configurable rules.
        -- =======================================================================================
        --
        -- Apply at the user's site group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = @UserSiteGroupID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
        WHERE m.intRowStatus = 0
              AND (
                      m.idfMaterial = @SampleID
                      OR @SampleID IS NULL
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
        WHERE m.intRowStatus = 0
              AND (
                      m.idfMaterial = @SampleID
                      OR @SampleID IS NULL
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's employee group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
        WHERE m.intRowStatus = 0
              AND (
                      m.idfMaterial = @SampleID
                      OR @SampleID IS NULL
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's ID level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
        WHERE m.intRowStatus = 0
              AND (
                      m.idfMaterial = @SampleID
                      OR @SampleID IS NULL
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            INNER JOIN dbo.tflSiteToSiteGroup sgs
                ON sgs.idfSiteGroup = @UserSiteGroupID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
        WHERE m.intRowStatus = 0
              AND (
                      m.idfMaterial = @SampleID
                      OR @SampleID IS NULL
                  )
              AND sgs.idfsSite = m.idfsSite;

        -- 
        -- Apply at the user's site level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
        WHERE m.intRowStatus = 0
              AND (
                      m.idfMaterial = @SampleID
                      OR @SampleID IS NULL
                  )
              AND a.GrantingActorSiteID = m.idfsSite;

        -- 
        -- Apply at the user's employee group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
        WHERE m.intRowStatus = 0
              AND (
                      m.idfMaterial = @SampleID
                      OR @SampleID IS NULL
                  )
              AND a.GrantingActorSiteID = m.idfsSite;

        -- 
        -- Apply at the user's ID level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
        WHERE m.intRowStatus = 0
              AND (
                      m.idfMaterial = @SampleID
                      OR @SampleID IS NULL
                  )
              AND a.GrantingActorSiteID = m.idfsSite;

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = m.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE m.intRowStatus = 0
                  AND oa.idfsObjectOperation = 10059003 -- Read permission
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.ID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = m.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003 -- Read permission
              AND NOT EXISTS (
                              SELECT * FROM @UserSitePermissions WHERE SiteID = m.idfsSite
              );

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = m.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        INSERT INTO @FinalResults
        SELECT res.ID,
               MAX(res.ReadPermissionIndicator),
               MAX(res.AccessToPersonalDataPermissionIndicator),
               MAX(res.AccessToGenderAndAgeDataPermissionIndicator),
               MAX(res.WritePermissionIndicator),
               MAX(res.DeletePermissionIndicator)
        FROM @Results res
        WHERE res.ReadPermissionIndicator IN ( 1, 3, 5 )
        GROUP BY res.ID;

        DECLARE @FavoriteCount AS INT = (
                                            SELECT COUNT(*)
                                            FROM @FinalResults
                                                INNER JOIN
                                                (
                                                    SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                                                    FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
                                                ) f
                                                    ON ID = f.SampleID
                                        );

        SELECT m.idfMaterial AS SampleID,
               m.idfsSite AS SiteID,
               m.idfsCurrentSite AS CurrentSiteID,
               t.idfTesting AS TestID,
               tom.idfTransferOut AS TransferID,
               m.strCalculatedCaseID AS EIDSSReportOrSessionID,
               m.strCalculatedHumanName AS PatientOrFarmOwnerName,
               m.idfsSampleType AS SampleTypeID,
               sampleType.name AS SampleTypeName,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       CAST(m.DiseaseID AS NVARCHAR(MAX))
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseIdentifiers
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseIdentifiers
                   ELSE
                       ''
               END AS DiseaseID,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       diseaseName.name
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseNames
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseNames
                   ELSE
                       ''
               END AS DiseaseName,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       diseaseName.name
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DisplayDiseaseNames
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DisplayDiseaseNames
                   ELSE
                       ''
               END AS DisplayDiseaseName,
               m.idfRootMaterial AS RootSampleID,
               m.idfParentMaterial AS ParentSampleID,
               m.strBarcode AS EIDSSLaboratorySampleID,
               m.strFieldBarcode AS EIDSSLocalOrFieldSampleID,
               m.datFieldCollectionDate AS CollectionDate,
               m.idfFieldCollectedByPerson AS CollectedByPersonID,
               m.idfFieldCollectedByOffice AS CollectedByOrganizationID,
               m.datFieldSentDate AS SentDate,
               m.idfSendToOffice AS SentToOrganizationID,
               t.idfsTestName AS TestNameTypeID,
               testNameType.name AS TestNameTypeName,
               t.idfsTestStatus AS TestStatusTypeID,
               testStatusType.name AS TestStatusTypeName,
               t.datStartedDate AS StartedDate,
               t.idfsTestResult AS TestResultTypeID,
               testResultType.name AS TestResultTypeName,
               t.datConcludedDate AS ResultDate,
               t.idfsTestCategory AS TestCategoryTypeID,
               testCategoryType.name AS TestCategoryTypeName,
               m.blnAccessioned AS AccessionIndicator,
               m.datAccession AS AccessionDate,
               m.idfInDepartment AS FunctionalAreaID,
               functionalArea.name AS FunctionalAreaName,
               m.idfSubdivision AS FreezerSubdivisionID,
               m.StorageBoxPlace,
               m.datEnteringDate AS EnteredDate,
               m.datOutOfRepositoryDate AS OutOfRepositoryDate,
               m.idfMarkedForDispositionByPerson AS MarkedForDispositionByPersonID,
               m.blnReadOnly AS ReadOnlyIndicator,
               m.idfsAccessionCondition AS AccessionConditionTypeID,
               m.idfsSampleStatus AS SampleStatusTypeID,
               (CASE
                    WHEN m.blnAccessioned = 0
                         AND m.idfsAccessionCondition IS NULL THEN
                        'Un-accessioned'
                    WHEN m.idfsSampleStatus IS NULL THEN
                        accessionConditionType.name
                    WHEN m.idfsSampleStatus = 10015007 --In Repository
               THEN
                        accessionConditionType.name
                    ELSE
                        sampleStatusType.name
                END
               ) AS AccessionConditionOrSampleStatusTypeName,
               m.idfAccesionByPerson AS AccessionedInByPersonID,
               m.datSampleStatusDate AS SampleStatusDate,
               m.strCondition AS AccessionComment,
               m.strNote AS Comment,
               a.strAnimalCode AS EIDSSAnimalID,
               m.idfsBirdStatus AS BirdStatusTypeID,
               m.idfMainTest AS MainTestID,
               m.idfsSampleKind AS SampleKindTypeID,
               b.idfsBatchStatus AS BatchStatusTypeID,
               ISNULL(   IIF(
                            (
                                SELECT COUNT(t3.idfTesting)
                                FROM dbo.tlbTesting t3
                                WHERE t3.idfsTestStatus IN (   10001003,
                                                                        --In Progress
                                                               10001004 --Preliminary
                                                           )
                                      AND t3.idfMaterial = m.idfMaterial
                                      AND t3.intRowStatus = 0
                                      AND t3.blnNonLaboratoryTest = 0
                            ) > 0,
                            1,
                            0),
                         0
                     ) AS TestAssignedIndicator,
               CASE
                   WHEN m.idfsSampleStatus = 10015002 --Marked for Deletion
               THEN
                       m.idfsSampleStatus
                   WHEN m.idfsSampleStatus = 10015003 --Marked for Destruction
               THEN
                       m.idfsSampleStatus
                   WHEN t.idfsTestStatus = 10001004 --Preliminary
               THEN
                       t.idfsTestStatus
                   WHEN t.idfsTestStatus = 10001008 --Marked for Deletion
               THEN
                       t.idfsTestStatus
               END AS ActionRequestedID,
               CASE
                   WHEN m.idfsSampleStatus = 10015002 --Marked for Deletion
               THEN
                       'Sample Deletion'
                   WHEN m.idfsSampleStatus = 10015003 --Marked for Destruction
               THEN
                       'Sample Destruction'
                   WHEN t.idfsTestStatus = 10001004 --Preliminary
               THEN
                       'Validation'
                   WHEN t.idfsTestStatus = 19000502 --Marked for Deletion
               THEN
                       'Test Deletion'
               END AS ActionRequested,
               ISNULL(   IIF(
                            (
                                SELECT COUNT(t2.idfTesting)
                                FROM dbo.tlbTesting t2
                                WHERE t2.idfsTestStatus IN (   10001001,
                                                                        --Final
                                                               10001006 --Amended
                                                           )
                                      AND t2.idfMaterial = m.idfMaterial
                                      AND t2.intRowStatus = 0
                                      AND t2.blnNonLaboratoryTest = 0
                            ) > 0,
                            1,
                            0),
                         0
                     ) AS TestCompletedIndicator,
               m.PreviousSampleStatusID AS PreviousSampleStatusTypeID,
               t.PreviousTestStatusID AS PreviousTestStatusTypeID,
               m.LabModuleSourceIndicator,
               m.idfHumanCase AS HumanDiseaseReportID,
               m.idfVetCase AS VeterinaryDiseaseReportID,
               m.idfMonitoringSession AS MonitoringSessionID,
               m.idfVectorSurveillanceSession AS VectorSessionID,
               m.idfVector AS VectorID,
               CASE
                   WHEN res.ReadPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.ReadPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.ReadPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.ReadPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.ReadPermissionIndicator)
               END AS ReadPermissionindicator,
               CASE
                   WHEN res.AccessToPersonalDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.AccessToPersonalDataPermissionIndicator)
               END AS AccessToPersonalDataPermissionIndicator,
               CASE
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.AccessToGenderAndAgeDataPermissionIndicator)
               END AS AccessToGenderAndAgeDataPermissionIndicator,
               CASE
                   WHEN res.WritePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.WritePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.WritePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.WritePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.WritePermissionIndicator)
               END AS WritePermissionIndicator,
               CASE
                   WHEN res.DeletePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.DeletePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.DeletePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.DeletePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.DeletePermissionIndicator)
               END AS DeletePermissionIndicator,
               0 AS RowAction,
               0 AS RowSelectionIndicator,
               COUNT(*) OVER () AS TotalRowCount,
               @FavoriteCount AS FavoriteCount
        FROM @FinalResults res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.ID
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                ON sampleType.idfsReference = m.idfsSampleType
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = m.idfMaterial
                   AND tom.intRowStatus = 0
            LEFT JOIN dbo.tlbAnimal a
                ON a.idfAnimal = m.idfAnimal
                   AND a.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) diseaseName
                ON diseaseName.idfsReference = m.DiseaseID
            LEFT JOIN @MonitoringSessionDiseases msDiseases
                ON msDiseases.ID = m.idfMonitoringSession
            LEFT JOIN @VectorSessionDiseases vsDiseases
                ON vsDiseases.ID = m.idfVectorSurveillanceSession
            LEFT JOIN dbo.tlbDepartment d
                ON d.idfDepartment = m.idfInDepartment
                   AND d.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000164) functionalArea
                ON functionalArea.idfsReference = d.idfsDepartmentName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                ON testNameType.idfsReference = t.idfsTestName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                ON testStatusType.idfsReference = t.idfsTestStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                ON testResultType.idfsReference = t.idfsTestResult
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                ON testCategoryType.idfsReference = t.idfsTestCategory
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                ON accessionConditionType.idfsReference = m.idfsAccessionCondition
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                ON sampleStatusType.idfsReference = m.idfsSampleStatus;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_FAVORITE_SEARCH_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_FAVORITE_SEARCH_GETList
--
-- Description:	Get laboratory favorites list for the various laboratory use cases.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     02/21/2019 Initial release.
-- Stephen Long     07/09/2019 Added disease to wildcard search.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     09/05/2019 Removed transfer where clause and organization ID check.
-- Stephen Long     01/15/2020 Added transfer ID to query.
-- Stephen Long     01/22/2020 Cleaned up stored procedure.
-- Stephen Long     03/11/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     04/23/2020 Correction on disease ID and disease name; add vector surveillance 
--                             session.
-- Stephen Long     04/26/2020 Added sent to organization ID to the model.
-- Stephen Long     06/06/2020 Added batch status type ID to the model.
-- Stephen Long     06/07/2020 Added additional search fields to the where clause.
-- Stephen Long     06/14/2020 Added action requested to the model.
-- Stephen Long     06/24/2020 Added test completed indicator to the model.
-- Stephen Long     11/29/2020 Added configurable site filtration rules.
-- Stephen Long     12/16/2020 Changed join for vector surveillance session diseases to the sample
--                             table.
-- Stephen Long     12/31/2020 Change function on reference data to handle inactive records.
-- Stephen Long     01/03/2021 Moved pagination to table variable insert.
-- Stephen Long     01/05/2021 Removed sent to organization where criteria.
-- Stephen Long     01/07/2021 Removed leading wildcard (%) as full table scans are performed even 
--                             with indices resulting in long query run times.  Recommend NOT 
--                             putting those back in.
-- Mark Wilson		08/16/2021 Join tlbMonitoringSessionToDiagnosis to get diagnosis
-- Stephen Long     09/20/2021 Removed unneeded fields and joins to improve performance.
-- Stephen Long     11/18/2021 Added action requested ID and previous test status type to the 
--                  query.
-- Stephen Long     12/07/2021 Added group by on final results.
-- Stephen Long     12/14/2021 Added sample status date to the query.
-- Stephen Long     02/10/2022 Removed unneeded joins on the disease fields.
-- Stephen Long     03/10/2022 Added note field to the query.
-- Stephen Long     05/17/2022 Removed primary key from monitoring and vector session disease 
--                             table variables.
-- Stephen Long     07/26/2022 Updated case statement on disease id and name.
-- Stephen Long     09/28/2022 Bug fix on item 5111, 5112, 5113 and 5114.
-- Stephen Long     10/17/2022 Bug fix on item 5018 - searching by dates.
-- Stephen Long     10/21/2022 Added display disease names separated by comma.
-- Stephen Long     10/24/2022 Bug fix on GIT #464.
-- Stephen Long     12/29/2022 Removed sorting and pagination logic; business decision so records
--                             pending save could be shown at the top of the list prior to saving.
-- Stephen Long     01/14/2023 Updated for site filtration queries.
--
-- Testing Code:
/*
DECLARE	@return_value int

EXEC	@return_value = [dbo].[USP_LAB_FAVORITE_SEARCH_GETList]
		@LanguageID = N'en-US',
		@SearchString = N'COVID', -- Use 'Gnhnscvxb', 'Blood', 'XWEB00' as other tests.
		@TestUnassignedIndicator = NULL,
		@TestCompletedIndicator = NULL,
		@UserID = 161287150000872, -- rykermase
		@UserOrganizationID = 758210000000,
		@Page = 1,
		@PageSize = 10,
		@SortColumn = N'EIDSSLaboratorySampleID',
		@SortOrder = N'DESC'

SELECT	'Return Value' = @return_value

GO
*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_FAVORITE_SEARCH_GETList]
(
    @LanguageID NVARCHAR(50),
    @SearchString NVARCHAR(2000),
    @AccessionedIndicator BIT = NULL,
    @UserID BIGINT,
    @UserEmployeeID BIGINT, 
    @UserOrganizationID BIGINT,
    @UserSiteID BIGINT 
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );

    DECLARE @MonitoringSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL,
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @VectorSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL,
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @InitialResults TABLE
    (
        ID INT NOT NULL IDENTITY,
        SampleID BIGINT NOT NULL,
        TestID BIGINT NULL
    );
    DECLARE @Results TABLE
    (
        ID INT NOT NULL IDENTITY,
        SampleID BIGINT NOT NULL,
        TestID BIGINT NULL,
        BatchStatusTypeID BIGINT NULL,
        TestNameTypeID BIGINT NULL,
        TestNameTypeName NVARCHAR(MAX) NULL,
        TestStatusTypeID BIGINT NULL,
        TestStatusTypeName NVARCHAR(MAX) NULL,
        StartedDate DATETIME NULL,
        TestResultTypeID BIGINT NULL,
        TestResultTypeName NVARCHAR(MAX) NULL,
        ResultDate DATETIME NULL,
        TestCategoryTypeID BIGINT NULL,
        TestCategoryTypeName NVARCHAR(MAX) NULL,
        PreviousTestStatusID BIGINT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID INT NOT NULL IDENTITY,
        SampleID BIGINT NOT NULL,
        TestID BIGINT NULL,
        BatchStatusTypeID BIGINT NULL,
        TestNameTypeID BIGINT NULL,
        TestNameTypeName NVARCHAR(MAX) NULL,
        TestStatusTypeID BIGINT NULL,
        TestStatusTypeName NVARCHAR(MAX) NULL,
        StartedDate DATETIME NULL,
        TestResultTypeID BIGINT NULL,
        TestResultTypeName NVARCHAR(MAX) NULL,
        ResultDate DATETIME NULL,
        TestCategoryTypeID BIGINT NULL,
        TestCategoryTypeName NVARCHAR(MAX) NULL,
        PreviousTestStatusID BIGINT NULL
    );
    DECLARE @SampleTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @SampleStatusTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @AccessionConditionTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @TestNameTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @TestResultTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @TestCategoryTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @TestStatusTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @Diseases TABLE (ID BIGINT NOT NULL);
    DECLARE @FunctionalAreas TABLE (ID BIGINT NOT NULL);
    DECLARE @Favorites XML,
            @LanguageCode BIGINT;

    BEGIN TRY
        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        SET @LanguageCode = dbo.FN_GBL_LanguageCode_Get(@LanguageID);
        SET @Favorites =
        (
            SELECT PreferenceDetail
            FROM dbo.UserPreference Laboratory
            WHERE idfUserID = @UserID
                  AND ModuleConstantID = 10508006
                  AND intRowStatus = 0
        );

        INSERT INTO @MonitoringSessionDiseases
        SELECT MonitoringSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames,
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames
        FROM dbo.FN_LAB_MONITORING_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY MonitoringSessionID;

        INSERT INTO @VectorSessionDiseases
        SELECT VectorSurveillanceSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames,
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames
        FROM dbo.FN_LAB_VECTOR_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY VectorSurveillanceSessionID;

        INSERT INTO @InitialResults
        SELECT m.idfMaterial,
               NULL
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
        WHERE m.intRowStatus = 0;

        INSERT INTO @SampleTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000087
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @SampleStatusTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000015
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @AccessionConditionTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000110
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @Diseases
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000019
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @TestNameTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000097
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @TestResultTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000096
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @TestCategoryTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000095
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @TestStatusTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000001
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @FunctionalAreas
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000164
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @Results
        SELECT SampleID,
               t.idfTesting,
               b.idfsBatchStatus,
               t.idfsTestName,
               testNameType.name,
               t.idfsTestStatus,
               testStatusType.name,
               t.datStartedDate,
               t.idfsTestResult,
               testResultType.name,
               t.datConcludedDate,
               t.idfsTestCategory,
               testCategoryType.name,
               t.PreviousTestStatusID
        FROM @InitialResults
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                ON testNameType.idfsReference = t.idfsTestName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                ON testStatusType.idfsReference = t.idfsTestStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                ON testResultType.idfsReference = t.idfsTestResult
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                ON testCategoryType.idfsReference = t.idfsTestCategory
        WHERE (
                  m.blnAccessioned = @AccessionedIndicator
                  AND m.idfsAccessionCondition IS NULL
                  AND m.idfsSampleStatus IS NULL
                  AND @AccessionedIndicator IS NOT NULL
              ) -- Un-accessioned samples
              OR (
                     CONVERT(NVARCHAR(MAX), FORMAT(m.datAccession, 'g', @LanguageID)) LIKE '%' + @SearchString + '%'
                     OR CONVERT(NVARCHAR(MAX), FORMAT(t.datStartedDate, 'd', @LanguageID)) LIKE '%' + @SearchString
                                                                                                + '%'
                     OR CONVERT(NVARCHAR(MAX), FORMAT(t.datConcludedDate, 'd', @LanguageID)) LIKE '%' + @SearchString
                                                                                                  + '%'
                     OR (
                            m.strBarcode IS NOT NULL
                            AND m.strBarcode <> ''
                            AND m.strBarcode LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strFieldBarcode IS NOT NULL
                            AND m.strFieldBarcode <> ''
                            AND m.strFieldBarcode LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strCondition IS NOT NULL
                            AND m.strCondition <> ''
                            AND m.strCondition LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strCalculatedCaseID IS NOT NULL
                            AND m.strCalculatedCaseID <> ''
                            AND m.strCalculatedCaseID LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strCalculatedHumanName IS NOT NULL
                            AND m.strCalculatedHumanName <> ''
                            AND m.strCalculatedHumanName LIKE '%' + @SearchString + '%'
                        )
                 );

        INSERT INTO @Results
        SELECT SampleID,
               t.idfTesting,
               b.idfsBatchStatus,
               t.idfsTestName,
               testNameType.name,
               t.idfsTestStatus,
               testStatusType.name,
               t.datStartedDate,
               t.idfsTestResult,
               testResultType.name,
               t.datConcludedDate,
               t.idfsTestCategory,
               testCategoryType.name,
               t.PreviousTestStatusID
        FROM @InitialResults
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = SampleID
            INNER JOIN dbo.tlbAnimal a
                ON a.idfAnimal = m.idfAnimal
                   AND a.intRowStatus = 0
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                ON testNameType.idfsReference = t.idfsTestName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                ON testStatusType.idfsReference = t.idfsTestStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                ON testResultType.idfsReference = t.idfsTestResult
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                ON testCategoryType.idfsReference = t.idfsTestCategory
        WHERE m.idfAnimal IS NOT NULL
              AND a.strAnimalCode LIKE '%' + @SearchString + '%';

        INSERT INTO @Results
        SELECT SampleID,
               TestID,
               NULL,
               NULL,
               NULL,
               NULL,
               NULL,
               NULL,
               NULL,
               NULL,
               NULL,
               NULL,
               NULL,
               NULL
        FROM @InitialResults
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = SampleID
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbTransferOUT tro
                ON tro.idfTransferOut = tom.idfTransferOut
                   AND tro.intRowStatus = 0
        WHERE tro.strBarcode LIKE '%' + @SearchString + '%';

        IF
        (
            SELECT COUNT(*) FROM @SampleTypes
        ) > 0
        BEGIN
            INSERT INTO @Results
            SELECT SampleID,
                   t.idfTesting,
                   b.idfsBatchStatus,
                   t.idfsTestName,
                   testNameType.name,
                   t.idfsTestStatus,
                   testStatusType.name,
                   t.datStartedDate,
                   t.idfsTestResult,
                   testResultType.name,
                   t.datConcludedDate,
                   t.idfsTestCategory,
                   testCategoryType.name,
                   t.PreviousTestStatusID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                LEFT JOIN dbo.tlbTesting t
                    ON t.idfMaterial = m.idfMaterial
                       AND t.intRowStatus = 0
                       AND t.blnNonLaboratoryTest = 0
                LEFT JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = t.idfBatchTest
                       AND b.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                    ON testNameType.idfsReference = t.idfsTestName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                    ON testStatusType.idfsReference = t.idfsTestStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                    ON testResultType.idfsReference = t.idfsTestResult
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                    ON testCategoryType.idfsReference = t.idfsTestCategory
            WHERE EXISTS
            (
                SELECT ID FROM @SampleTypes WHERE m.idfsSampleType = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @SampleStatusTypes
        ) > 0
        BEGIN
            INSERT INTO @Results
            SELECT SampleID,
                   t.idfTesting,
                   b.idfsBatchStatus,
                   t.idfsTestName,
                   testNameType.name,
                   t.idfsTestStatus,
                   testStatusType.name,
                   t.datStartedDate,
                   t.idfsTestResult,
                   testResultType.name,
                   t.datConcludedDate,
                   t.idfsTestCategory,
                   testCategoryType.name,
                   t.PreviousTestStatusID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                LEFT JOIN dbo.tlbTesting t
                    ON t.idfMaterial = m.idfMaterial
                       AND t.intRowStatus = 0
                       AND t.blnNonLaboratoryTest = 0
                LEFT JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = t.idfBatchTest
                       AND b.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                    ON testNameType.idfsReference = t.idfsTestName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                    ON testStatusType.idfsReference = t.idfsTestStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                    ON testResultType.idfsReference = t.idfsTestResult
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                    ON testCategoryType.idfsReference = t.idfsTestCategory
            WHERE EXISTS
            (
                SELECT ID FROM @SampleStatusTypes WHERE m.idfsSampleStatus = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @AccessionConditionTypes
        ) > 0
        BEGIN
            INSERT INTO @Results
            SELECT SampleID,
                   t.idfTesting,
                   b.idfsBatchStatus,
                   t.idfsTestName,
                   testNameType.name,
                   t.idfsTestStatus,
                   testStatusType.name,
                   t.datStartedDate,
                   t.idfsTestResult,
                   testResultType.name,
                   t.datConcludedDate,
                   t.idfsTestCategory,
                   testCategoryType.name,
                   t.PreviousTestStatusID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                LEFT JOIN dbo.tlbTesting t
                    ON t.idfMaterial = m.idfMaterial
                       AND t.intRowStatus = 0
                       AND t.blnNonLaboratoryTest = 0
                LEFT JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = t.idfBatchTest
                       AND b.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                    ON testNameType.idfsReference = t.idfsTestName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                    ON testStatusType.idfsReference = t.idfsTestStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                    ON testResultType.idfsReference = t.idfsTestResult
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                    ON testCategoryType.idfsReference = t.idfsTestCategory
            WHERE (
                      m.idfsSampleStatus IS NULL
                      OR m.idfsSampleStatus = 10015007
                  ) --In Repository
                  AND EXISTS
            (
                SELECT ID
                FROM @AccessionConditionTypes
                WHERE m.idfsAccessionCondition = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @TestNameTypes
        ) > 0
        BEGIN
            INSERT INTO @Results
            SELECT SampleID,
                   t.idfTesting,
                   b.idfsBatchStatus,
                   t.idfsTestName,
                   testNameType.name,
                   t.idfsTestStatus,
                   testStatusType.name,
                   t.datStartedDate,
                   t.idfsTestResult,
                   testResultType.name,
                   t.datConcludedDate,
                   t.idfsTestCategory,
                   testCategoryType.name,
                   t.PreviousTestStatusID
            FROM @InitialResults
                INNER JOIN dbo.tlbTesting t
                    ON t.idfMaterial = SampleID
                       AND t.intRowStatus = 0
                       AND t.blnNonLaboratoryTest = 0
                LEFT JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = t.idfBatchTest
                       AND b.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                    ON testNameType.idfsReference = t.idfsTestName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                    ON testStatusType.idfsReference = t.idfsTestStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                    ON testResultType.idfsReference = t.idfsTestResult
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                    ON testCategoryType.idfsReference = t.idfsTestCategory
            WHERE EXISTS
            (
                SELECT ID FROM @TestNameTypes WHERE t.idfsTestName = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @TestResultTypes
        ) > 0
        BEGIN
            INSERT INTO @Results
            SELECT SampleID,
                   t.idfTesting,
                   b.idfsBatchStatus,
                   t.idfsTestName,
                   testNameType.name,
                   t.idfsTestStatus,
                   testStatusType.name,
                   t.datStartedDate,
                   t.idfsTestResult,
                   testResultType.name,
                   t.datConcludedDate,
                   t.idfsTestCategory,
                   testCategoryType.name,
                   t.PreviousTestStatusID
            FROM @InitialResults
                INNER JOIN dbo.tlbTesting t
                    ON t.idfMaterial = SampleID
                       AND t.intRowStatus = 0
                       AND t.blnNonLaboratoryTest = 0
                LEFT JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = t.idfBatchTest
                       AND b.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                    ON testNameType.idfsReference = t.idfsTestName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                    ON testStatusType.idfsReference = t.idfsTestStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                    ON testResultType.idfsReference = t.idfsTestResult
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                    ON testCategoryType.idfsReference = t.idfsTestCategory
            WHERE EXISTS
            (
                SELECT ID FROM @TestResultTypes WHERE t.idfsTestResult = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @TestCategoryTypes
        ) > 0
        BEGIN
            INSERT INTO @Results
            SELECT SampleID,
                   t.idfTesting,
                   b.idfsBatchStatus,
                   t.idfsTestName,
                   testNameType.name,
                   t.idfsTestStatus,
                   testStatusType.name,
                   t.datStartedDate,
                   t.idfsTestResult,
                   testResultType.name,
                   t.datConcludedDate,
                   t.idfsTestCategory,
                   testCategoryType.name,
                   t.PreviousTestStatusID
            FROM @InitialResults
                INNER JOIN dbo.tlbTesting t
                    ON t.idfMaterial = SampleID
                       AND t.intRowStatus = 0
                       AND t.blnNonLaboratoryTest = 0
                LEFT JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = t.idfBatchTest
                       AND b.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                    ON testNameType.idfsReference = t.idfsTestName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                    ON testStatusType.idfsReference = t.idfsTestStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                    ON testResultType.idfsReference = t.idfsTestResult
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                    ON testCategoryType.idfsReference = t.idfsTestCategory
            WHERE EXISTS
            (
                SELECT ID FROM @TestCategoryTypes WHERE t.idfsTestCategory = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @TestStatusTypes
        ) > 0
        BEGIN
            INSERT INTO @Results
            SELECT SampleID,
                   t.idfTesting,
                   b.idfsBatchStatus,
                   t.idfsTestName,
                   testNameType.name,
                   t.idfsTestStatus,
                   testStatusType.name,
                   t.datStartedDate,
                   t.idfsTestResult,
                   testResultType.name,
                   t.datConcludedDate,
                   t.idfsTestCategory,
                   testCategoryType.name,
                   t.PreviousTestStatusID
            FROM @InitialResults
                INNER JOIN dbo.tlbTesting t
                    ON t.idfMaterial = SampleID
                       AND t.intRowStatus = 0
                       AND t.blnNonLaboratoryTest = 0
                LEFT JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = t.idfBatchTest
                       AND b.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                    ON testNameType.idfsReference = t.idfsTestName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                    ON testStatusType.idfsReference = t.idfsTestStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                    ON testResultType.idfsReference = t.idfsTestResult
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                    ON testCategoryType.idfsReference = t.idfsTestCategory
            WHERE EXISTS
            (
                SELECT ID FROM @TestStatusTypes WHERE t.idfsTestStatus = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @FunctionalAreas
        ) > 0
        BEGIN
            INSERT INTO @Results
            SELECT SampleID,
                   t.idfTesting,
                   b.idfsBatchStatus,
                   t.idfsTestName,
                   testNameType.name,
                   t.idfsTestStatus,
                   testStatusType.name,
                   t.datStartedDate,
                   t.idfsTestResult,
                   testResultType.name,
                   t.datConcludedDate,
                   t.idfsTestCategory,
                   testCategoryType.name,
                   t.PreviousTestStatusID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                INNER JOIN dbo.tlbDepartment d
                    ON d.idfDepartment = m.idfInDepartment
                       AND d.intRowStatus = 0
                LEFT JOIN dbo.tlbTesting t
                    ON t.idfMaterial = m.idfMaterial
                       AND t.intRowStatus = 0
                       AND t.blnNonLaboratoryTest = 0
                LEFT JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = t.idfBatchTest
                       AND b.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                    ON testNameType.idfsReference = t.idfsTestName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                    ON testStatusType.idfsReference = t.idfsTestStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                    ON testResultType.idfsReference = t.idfsTestResult
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                    ON testCategoryType.idfsReference = t.idfsTestCategory
            WHERE m.idfInDepartment IS NOT NULL
                  AND EXISTS
            (
                SELECT ID FROM @FunctionalAreas WHERE d.idfsDepartmentName = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @Diseases
        ) > 0
        BEGIN
            INSERT INTO @Results
            SELECT SampleID,
                   t.idfTesting,
                   b.idfsBatchStatus,
                   t.idfsTestName,
                   testNameType.name,
                   t.idfsTestStatus,
                   testStatusType.name,
                   t.datStartedDate,
                   t.idfsTestResult,
                   testResultType.name,
                   t.datConcludedDate,
                   t.idfsTestCategory,
                   testCategoryType.name,
                   t.PreviousTestStatusID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                LEFT JOIN dbo.tlbTesting t
                    ON t.idfMaterial = m.idfMaterial
                       AND t.intRowStatus = 0
                       AND t.blnNonLaboratoryTest = 0
                LEFT JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = t.idfBatchTest
                       AND b.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                    ON testNameType.idfsReference = t.idfsTestName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                    ON testStatusType.idfsReference = t.idfsTestStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                    ON testResultType.idfsReference = t.idfsTestResult
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                    ON testCategoryType.idfsReference = t.idfsTestCategory
            WHERE m.DiseaseID IS NOT NULL
                  AND EXISTS
            (
                SELECT ID FROM @Diseases WHERE m.DiseaseID = ID
            );

            INSERT INTO @FinalResults
            SELECT ir.SampleID,
                   ir.TestID,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL
            FROM @InitialResults ir
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = ir.SampleID
                INNER JOIN @VectorSessionDiseases vsDiseases
                    ON vsDiseases.ID = m.idfVectorSurveillanceSession
            WHERE m.idfVectorSurveillanceSession IS NOT NULL
                  AND m.DiseaseID IS NULL
                  AND EXISTS
            (
                SELECT ID
                FROM @Diseases
                WHERE ID IN (
                                SELECT CAST([Value] AS BIGINT)
                                FROM dbo.FN_GBL_SYS_SplitList(vsDiseases.DiseaseIdentifiers, NULL, ',')
                            )
            );

            INSERT INTO @Results
            SELECT SampleID,
                   TestID,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                INNER JOIN dbo.tlbMonitoringSession ms
                    ON ms.idfMonitoringSession = m.idfMonitoringSession
                       AND ms.intRowStatus = 0
                INNER JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                    ON msd.idfMonitoringSession = ms.idfMonitoringSession
                       AND msd.intRowStatus = 0
            WHERE m.idfMonitoringSession IS NOT NULL
                  AND m.DiseaseID IS NULL
                  AND EXISTS
            (
                SELECT ID FROM @Diseases WHERE msd.idfsDiagnosis = ID
            );
        END;

        INSERT INTO @FinalResults
        SELECT SampleID,
               TestID,
               BatchStatusTypeID,
               TestNameTypeID,
               TestNameTypeName,
               TestStatusTypeID,
               TestStatusTypeName,
               StartedDate,
               TestResultTypeID,
               TestResultTypeName,
               ResultDate,
               TestCategoryTypeID,
               TestCategoryTypeName,
               PreviousTestStatusID
        FROM @Results
        GROUP BY SampleID,
                 TestID,
                 BatchStatusTypeID,
                 TestNameTypeID,
                 TestNameTypeName,
                 TestStatusTypeID,
                 TestStatusTypeName,
                 StartedDate,
                 TestResultTypeID,
                 TestResultTypeName,
                 ResultDate,
                 TestCategoryTypeID,
                 TestCategoryTypeName,
                 PreviousTestStatusID;

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @FinalResults
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = m.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE m.intRowStatus = 0
                  AND oa.idfsObjectOperation = 10059003 -- Read permission
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        DELETE res
        FROM @FinalResults res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.ID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = m.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003 -- Read permission
              AND NOT EXISTS (
                              SELECT * FROM @UserSitePermissions WHERE SiteID = m.idfsSite
              );

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        DELETE FROM @FinalResults
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = m.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        DECLARE @FavoriteCount AS INT = (
                                            SELECT COUNT(*)
                                            FROM @FinalResults r
                                                INNER JOIN
                                                (
                                                    SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                                                    FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
                                                ) f
                                                    ON r.SampleID = f.SampleID
                                        );

        SELECT m.idfMaterial AS SampleID,
               m.idfsSite AS SiteID,
               m.idfsCurrentSite AS CurrentSiteID,
               res.TestID AS TestID,
               tom.idfTransferOut AS TransferID,
               m.strCalculatedCaseID AS EIDSSReportOrSessionID,
               m.strCalculatedHumanName AS PatientOrFarmOwnerName,
               m.idfsSampleType AS SampleTypeID,
               sampleType.name AS SampleTypeName,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       CAST(m.DiseaseID AS NVARCHAR(MAX))
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseIdentifiers
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseIdentifiers
                   ELSE
                       ''
               END AS DiseaseID,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       diseaseName.name
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseNames
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseNames
                   ELSE
                       ''
               END AS DiseaseName,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       diseaseName.name
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DisplayDiseaseNames
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DisplayDiseaseNames
                   ELSE
                       ''
               END AS DisplayDiseaseName,
               m.idfRootMaterial AS RootSampleID,
               m.idfParentMaterial AS ParentSampleID,
               m.strBarcode AS EIDSSLaboratorySampleID,
               m.strFieldBarcode AS EIDSSLocalOrFieldSampleID,
               m.datFieldCollectionDate AS CollectionDate,
               m.idfFieldCollectedByPerson AS CollectedByPersonID,
               m.idfFieldCollectedByOffice AS CollectedByOrganizationID,
               m.datFieldSentDate AS SentDate,
               m.idfSendToOffice AS SentToOrganizationID,
               TestNameTypeID,
               TestNameTypeName,
               TestStatusTypeID,
               TestStatusTypeName,
               StartedDate,
               TestResultTypeID,
               TestResultTypeName,
               ResultDate,
               TestCategoryTypeID,
               TestCategoryTypeName,
               m.blnAccessioned AS AccessionIndicator,
               m.datAccession AS AccessionDate,
               m.idfInDepartment AS FunctionalAreaID,
               functionalArea.name AS FunctionalAreaName,
               m.idfSubdivision AS FreezerSubdivisionID,
               m.StorageBoxPlace,
               m.datEnteringDate AS EnteredDate,
               m.datOutOfRepositoryDate AS OutOfRepositoryDate,
               m.idfMarkedForDispositionByPerson AS MarkedForDispositionByPersonID,
               m.blnReadOnly AS ReadOnlyIndicator,
               m.idfsAccessionCondition AS AccessionConditionTypeID,
               m.idfsSampleStatus AS SampleStatusTypeID,
               (CASE
                    WHEN m.blnAccessioned = 0
                         AND m.idfsAccessionCondition IS NULL THEN
                        'Un-accessioned'
                    WHEN m.idfsSampleStatus IS NULL THEN
                        accessionConditionType.name
                    WHEN m.idfsSampleStatus = 10015007 --In Repository
               THEN
                        accessionConditionType.name
                    ELSE
                        sampleStatusType.name
                END
               ) AS AccessionConditionOrSampleStatusTypeName,
               m.idfAccesionByPerson AS AccessionedInByPersonID,
               m.datSampleStatusDate AS SampleStatusDate,
               m.strCondition AS AccessionComment,
               m.strNote AS Comment,
               a.strAnimalCode AS EIDSSAnimalID,
               m.idfsBirdStatus AS BirdStatusTypeID,
               m.idfMainTest AS MainTestID,
               m.idfsSampleKind AS SampleKindTypeID,
               BatchStatusTypeID,
               ISNULL(   IIF(
                            (
                                SELECT COUNT(t3.idfTesting)
                                FROM dbo.tlbTesting t3
                                WHERE t3.idfsTestStatus IN (   10001003,
                                                                        --In Progress
                                                               10001004 --Preliminary
                                                           )
                                      AND t3.idfMaterial = m.idfMaterial
                                      AND t3.intRowStatus = 0
                                      AND t3.blnNonLaboratoryTest = 0
                            ) > 0,
                            1,
                            0),
                         0
                     ) AS TestAssignedIndicator,
               CASE
                   WHEN m.idfsSampleStatus = 10015002 --Marked for Deletion
               THEN
                       m.idfsSampleStatus
                   WHEN m.idfsSampleStatus = 10015003 --Marked for Destruction
               THEN
                       m.idfsSampleStatus
                   WHEN TestStatusTypeID = 10001004 --Preliminary
               THEN
                       TestStatusTypeID
                   WHEN TestStatusTypeID = 10001008 --Marked for Deletion
               THEN
                       TestStatusTypeID
               END AS ActionRequestedID,
               CASE
                   WHEN m.idfsSampleStatus = 10015002 --Marked for Deletion
               THEN
                       'Sample Deletion'
                   WHEN m.idfsSampleStatus = 10015003 --Marked for Destruction
               THEN
                       'Sample Destruction'
                   WHEN TestStatusTypeID = 10001004 --Preliminary
               THEN
                       'Validation'
                   WHEN TestStatusTypeID = 19000502 --Marked for Deletion
               THEN
                       'Test Deletion'
               END AS ActionRequested,
               ISNULL(   IIF(
                            (
                                SELECT COUNT(t2.idfTesting)
                                FROM dbo.tlbTesting t2
                                WHERE t2.idfsTestStatus IN (   10001001,
                                                                        --Final
                                                               10001006 --Amended
                                                           )
                                      AND t2.idfMaterial = m.idfMaterial
                                      AND t2.intRowStatus = 0
                                      AND t2.blnNonLaboratoryTest = 0
                            ) > 0,
                            1,
                            0),
                         0
                     ) AS TestCompletedIndicator,
               m.PreviousSampleStatusID AS PreviousSampleStatusTypeID,
               PreviousTestStatusID AS PreviousTestStatusTypeID,
               m.LabModuleSourceIndicator,
               m.idfHumanCase AS HumanDiseaseReportID,
               m.idfVetCase AS VeterinaryDiseaseReportID,
               m.idfMonitoringSession AS MonitoringSessionID,
               m.idfVectorSurveillanceSession AS VectorSessionID,
               m.idfVector AS VectorID,
               1 AS ReadPermissionIndicator,
               1 AS AccessToPersonalDataPermissionIndicator,
               1 AS AccessToGenderAndAgeDataPermissionIndicator,
               1 AS WritePermissionIndicator,
               1 AS DeletePermissionIndicator,
               0 AS RowAction,
               0 AS RowSelectionIndicator,
               COUNT(*) OVER () AS TotalRowCount,
               @FavoriteCount AS FavoriteCount
        FROM @FinalResults res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.SampleID
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                ON sampleType.idfsReference = m.idfsSampleType
            LEFT JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = m.idfMaterial
                   AND tom.intRowStatus = 0
            LEFT JOIN dbo.tlbAnimal a
                ON a.idfAnimal = m.idfAnimal
                   AND a.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) diseaseName
                ON diseaseName.idfsReference = m.DiseaseID
            LEFT JOIN @MonitoringSessionDiseases msDiseases
                ON msDiseases.ID = m.idfMonitoringSession
            LEFT JOIN @VectorSessionDiseases vsDiseases
                ON vsDiseases.ID = m.idfVectorSurveillanceSession
            LEFT JOIN dbo.tlbDepartment d
                ON d.idfDepartment = m.idfInDepartment
                   AND d.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000164) functionalArea
                ON functionalArea.idfsReference = d.idfsDepartmentName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                ON accessionConditionType.idfsReference = m.idfsAccessionCondition
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                ON sampleStatusType.idfsReference = m.idfsSampleStatus;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_SAMPLE_ADVANCED_SEARCH_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_SAMPLE_ADVANCED_SEARCH_GETList
--
-- Description:	Get sample advanced search list for the laboratory module use case LUC13.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     01/14/2019 Initial relase.
-- Stephen Long     01/30/2019 Added sample disease reference join, and removed the vector 
--                             surveillance session joins as they are not needed.
-- Stephen Long     02/11/2019 Changed sample status type ID from bigint to nvarchar(max).  Can 
--                             have multiple sample status types.
-- Stephen Long     02/21/2019 Renamed parameters to be consistent with other objects.
-- Stephen Long     03/28/2019 Removed test status 'Not Started' as criteria to pull back in the 
--                             test assigned indicator.
-- Stephen Long     07/01/2019 Corrected reference type on monitoring session category.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     08/29/2019 Added accession condition type field as one of the where clauses.
-- Stephen Long     10/07/2019 Removed @CampaignID variable; just use EIDSSReportCampaignSessionID.
-- Stephen Long     11/04/2019 Corrected tlbSpecies join; joined to tlbMaterial instead of tlbHerd.
-- Stephen Long     01/16/2020 Corrected where clause on sample status type for defect 5699.
-- Stephen Long     01/21/2020 Converted site ID to site list for site filtration.
-- Stephen Long     03/11/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     04/08/2020 Added sample list parameter and where clause criteria.
-- Stephen Long     04/16/2020 Removed un-needed joins for farm, herd and species type.
-- Stephen Long     04/23/2020 Correction on disease ID and disease name; add vector surveillance 
--                             session.
-- Stephen Long     07/06/2020 Added lab module source indicator to the model.
-- Stephen Long     08/25/2020 Added criteria to ignore time on date betweens.
-- Stephen Long     09/02/2020 Changed accessioned indicator from int to varchar to handle searches
--                             with un-accessioned and accessioned samples in the same query.
-- Stephen Long     10/28/2020 Removed site left joins as not needed.
-- Stephen Long     10/30/2020 Remove test assigned indicator; use test assigned count instead.
--                             Added EIDSS freezer ID.
-- Stephen Long     11/28/2020 Added configurable site filtration rules.
-- Stephen Long     12/16/2020 Changed join for vector surveillance session diseases to the sample
--                             table.
-- Stephen Long     12/23/2020 Correction on accession indicator list where criteria.
-- Stephen Long     12/31/2020 Change function on reference data to handle inactive records.
-- Stephen Long     01/03/2020 Added option recompile to select queries.
-- Stephen Long     01/21/2021 Changed counts to use group by in sub-query instead of count 
--                             distinct and added with recompile to handle number of nullable 
--                             parameters.
-- Stephen Long     01/24/2021 Correct where criteria on accession indicator list.
-- Stephen Long     02/10/2021 Remove unneeded joins and add check for blnShowInLabList.
-- Stephen Long     06/28/2021 Applied new pagination parameters.
-- Mark Wilson		08/11/2021 updated to join tlbMonitoringSessionToDiagnosis
-- Stephen Long     09/18/2021 Removed unneeded fields and joins to improve performance.
-- Stephen Long     10/14/2021 Changed report or session type ID to bigint.
-- Stephen Long     12/08/2021 Changed pagination logic and removed option recompile.
-- Stephen Long     12/11/2021 Split out query to get initial results using required date range.
-- Stephen Long     12/14/2021 Added sample status date to the query.
-- Stephen Long     12/15/2021 Added configurable filtration rules.
-- Stephen Long     02/08/2022 Removed unneeded joins.
-- Stephen Long     03/10/2022 Changed note to comment and transfer count to transferred count.
-- Stephen Long     03/24/2022 Removed primary key from results and final results table variables.
-- Stephen Long     03/30/2022 Remove show in lab list from where criteria.
-- Stephen Long     05/17/2022 Removed primary key from monitoring and vector session disease 
--                             table variables.
-- Stephen Long     05/20/2022 Added string agg to session diseases.
-- Mike Kornegay	06/14/2022 Added new additional SessionCategoryID for Vet Avian / Vet Livestock 
--                             breakout.
-- Stephen Long     07/26/2022 Updated case statement on disease id and name.
-- Stephen Long     08/12/2022 Removed where criteria for surveillance type of both; de-activated 
--                             base reference record.
-- Stephen Long     08/26/2022 Added additional checks on accession and entered date range checks.
-- Stephen Long     09/28/2022 Bug fix on item 5117.
-- Stephen Long     10/21/2022 Added display disease names separated by comma.
-- Stephen Long     12/16/2022 Fix on initial query to use sent to organization and not user 
--                             organization.
-- Stephen Long     12/29/2022 Removed sorting and pagination logic; business decision so records
--                             pending save could be shown at the top of the list prior to saving.
-- Stephen Long     01/11/2023 Updated for site filtration queries for SAUC29.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_SAMPLE_ADVANCED_SEARCH_GETList]
(
    @LanguageID NVARCHAR(50),
    @ReportOrSessionTypeID BIGINT = NULL,
    @SurveillanceTypeID BIGINT = NULL,
    @SampleStatusTypeList VARCHAR(MAX) = NULL,
    @AccessionedIndicatorList VARCHAR(3) = NULL,
    @EIDSSLocalOrFieldSampleID NVARCHAR(200) = NULL,
    @EIDSSReportCampaignOrSessionID NVARCHAR(200) = NULL,
    @SentToOrganizationID BIGINT = NULL,
    @TransferredToOrganizationID BIGINT = NULL,
    @EIDSSTransferID NVARCHAR(200) = NULL,
    @ResultsReceivedFromID BIGINT = NULL,
    @DateFrom DATETIME = NULL,
    @DateTo DATETIME = NULL,
    @EIDSSLaboratorySampleID NVARCHAR(200) = NULL,
    @SampleTypeID BIGINT = NULL,
    @TestNameTypeID BIGINT = NULL,
    @DiseaseID BIGINT = NULL,
    @TestStatusTypeID BIGINT = NULL,
    @TestResultTypeID BIGINT = NULL,
    @TestResultDateFrom DATETIME = NULL,
    @TestResultDateTo DATETIME = NULL,
    @PatientName NVARCHAR(200) = NULL,
    @FarmOwnerName NVARCHAR(200) = NULL,
    @SpeciesTypeID BIGINT = NULL,
    @SampleList VARCHAR(MAX) = NULL,
    @TestUnassignedIndicator BIT = NULL,
    @TestCompletedIndicator BIT = NULL,
    @UserID BIGINT,
    @UserEmployeeID BIGINT,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT = NULL,
    @UserSiteGroupID BIGINT = NULL
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL,
        AccessionedIndicator BIT NOT NULL,
        AccessionConditionTypeID BIGINT NULL,
        ReadPermissionIndicator BIT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID BIGINT NOT NULL,
        AccessionedIndicator BIT NOT NULL,
        AccessionConditionTypeID BIGINT NULL,
        ReadPermissionIndicator BIT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @RecordCount AS INT = 0,
            @UnaccessionedCount AS INT = 0;
    DECLARE @MonitoringSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL,
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @VectorSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL,
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @SampleListTable TABLE (ID BIGINT NOT NULL);
    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @Favorites XML,
            @LanguageCode BIGINT;

    IF @SampleList IS NOT NULL
        INSERT INTO @SampleListTable
        SELECT CAST([Value] AS BIGINT)
        FROM dbo.FN_GBL_SYS_SplitList(@SampleList, NULL, ',');

    DECLARE @SampleStatusTypeListTable TABLE (ID BIGINT NOT NULL);

    IF @SampleStatusTypeList IS NOT NULL
        INSERT INTO @SampleStatusTypeListTable
        SELECT CAST([Value] AS BIGINT)
        FROM dbo.FN_GBL_SYS_SplitList(@SampleStatusTypeList, NULL, ',');

    BEGIN TRY
        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        INSERT INTO @MonitoringSessionDiseases
        SELECT MonitoringSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames,
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames
        FROM dbo.FN_LAB_MONITORING_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY MonitoringSessionID;

        INSERT INTO @VectorSessionDiseases
        SELECT VectorSurveillanceSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames,
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames
        FROM dbo.FN_LAB_VECTOR_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY VectorSurveillanceSessionID;

        SET @Favorites =
        (
            SELECT PreferenceDetail
            FROM dbo.UserPreference Laboratory
            WHERE idfUserID = @UserID
                  AND ModuleConstantID = 10508006
                  AND intRowStatus = 0
        );

        INSERT INTO @Results
        SELECT m.idfMaterial,
               m.blnAccessioned,
               m.idfsAccessionCondition,
               1,
               CASE
                   WHEN m.idfsSite = @UserSiteID THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN m.idfsSite = @UserSiteID THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN m.idfsSite = @UserSiteID THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN m.idfsSite = @UserSiteID THEN
                       1
                   ELSE
                       0
               END
        FROM dbo.tlbMaterial m
        WHERE m.intRowStatus = 0
              AND (
                      m.idfSendToOffice = @SentToOrganizationID
                      OR @SentToOrganizationID IS NULL
                  )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND (
                                     (
                                         m.datFieldCollectionDate IS NOT NULL
                                         AND m.datFieldCollectionDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                     )
                                     OR (
                                            m.datEnteringDate IS NOT NULL
                                            AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                        )
                                 )
                         )
                  );

        -- =======================================================================================
        -- CONFIGURABLE FILTRATION RULES
        -- 
        -- Apply configurable filtration rules for use case SAUC34. Some of these rules may 
        -- overlap the default rules.
        -- =======================================================================================
        --
        -- Apply at the user's site group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               m.blnAccessioned,
               m.idfsAccessionCondition,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                ON userSiteGroup.idfsSite = @UserSiteID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND (
                                     (
                                         m.datFieldCollectionDate IS NOT NULL
                                         AND m.datFieldCollectionDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                     )
                                     OR (
                                            m.datEnteringDate IS NOT NULL
                                            AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                        )
                                 )
                         )
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               m.blnAccessioned,
               m.idfsAccessionCondition,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND (
                                     (
                                         m.datFieldCollectionDate IS NOT NULL
                                         AND m.datFieldCollectionDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                     )
                                     OR (
                                            m.datEnteringDate IS NOT NULL
                                            AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                        )
                                 )
                         )
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's employee group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               m.blnAccessioned,
               m.idfsAccessionCondition,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND (
                                     (
                                         m.datFieldCollectionDate IS NOT NULL
                                         AND m.datFieldCollectionDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                     )
                                     OR (
                                            m.datEnteringDate IS NOT NULL
                                            AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                        )
                                 )
                         )
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's ID level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               m.blnAccessioned,
               m.idfsAccessionCondition,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND (
                                     (
                                         m.datFieldCollectionDate IS NOT NULL
                                         AND m.datFieldCollectionDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                     )
                                     OR (
                                            m.datEnteringDate IS NOT NULL
                                            AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                        )
                                 )
                         )
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               m.blnAccessioned,
               m.idfsAccessionCondition,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN dbo.tflSiteToSiteGroup sgs
                ON sgs.idfsSite = @UserSiteID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND (
                                     (
                                         m.datFieldCollectionDate IS NOT NULL
                                         AND m.datFieldCollectionDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                     )
                                     OR (
                                            m.datEnteringDate IS NOT NULL
                                            AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                        )
                                 )
                         )
                  )
              AND sgs.idfsSite = m.idfsSite;

        -- 
        -- Apply at the user's site level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               m.blnAccessioned,
               m.idfsAccessionCondition,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND (
                                     (
                                         m.datFieldCollectionDate IS NOT NULL
                                         AND m.datFieldCollectionDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                     )
                                     OR (
                                            m.datEnteringDate IS NOT NULL
                                            AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                        )
                                 )
                         )
                  )
              AND a.GrantingActorSiteID = m.idfsSite;

        -- 
        -- Apply at the user's employee group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               m.blnAccessioned,
               m.idfsAccessionCondition,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND (
                                     (
                                         m.datFieldCollectionDate IS NOT NULL
                                         AND m.datFieldCollectionDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                     )
                                     OR (
                                            m.datEnteringDate IS NOT NULL
                                            AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                        )
                                 )
                         )
                  )
              AND a.GrantingActorSiteID = m.idfsSite;

        -- 
        -- Apply at the user's ID level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               m.blnAccessioned,
               m.idfsAccessionCondition,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND (
                                     (
                                         m.datFieldCollectionDate IS NOT NULL
                                         AND m.datFieldCollectionDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                     )
                                     OR (
                                            m.datEnteringDate IS NOT NULL
                                            AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                        )
                                 )
                         )
                  )
              AND a.GrantingActorSiteID = m.idfsSite;

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = m.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE m.intRowStatus = 0
                  AND oa.idfsObjectOperation = 10059003 -- Read permission
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               m.blnAccessioned,
               m.idfsAccessionCondition,
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbMaterial m
        WHERE m.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserGroupSitePermissions WHERE SiteID = m.idfsSite
        )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND (
                                     (
                                         m.datFieldCollectionDate IS NOT NULL
                                         AND m.datFieldCollectionDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                     )
                                     OR (
                                            m.datEnteringDate IS NOT NULL
                                            AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                        )
                                 )
                         )
                  );

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.ID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = m.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003; -- Read permission

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               m.blnAccessioned,
               m.idfsAccessionCondition,
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbMaterial m
        WHERE m.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserGroupSitePermissions WHERE SiteID = m.idfsSite
        )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND (
                                     (
                                         m.datFieldCollectionDate IS NOT NULL
                                         AND m.datFieldCollectionDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                     )
                                     OR (
                                            m.datEnteringDate IS NOT NULL
                                            AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                        )
                                 )
                         )
                  );

        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = m.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        INSERT INTO @FinalResults
        SELECT m.idfMaterial,
               MAX(m.blnAccessioned),
               MAX(m.idfsAccessionCondition),
               1,
               MAX(AccessToPersonalDataPermissionIndicator),
               MAX(AccessToGenderAndAgeDataPermissionIndicator),
               MAX(WritePermissionIndicator),
               MAX(DeletePermissionIndicator)
        FROM @Results res
            LEFT JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.ID
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            LEFT JOIN dbo.tlbMonitoringSession ms
                ON ms.idfMonitoringSession = m.idfMonitoringSession
                   AND ms.intRowStatus = 0
            LEFT JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                ON msd.idfMonitoringSession = ms.idfMonitoringSession
                   AND msd.intRowStatus = 0
            LEFT JOIN dbo.tlbCampaign c
                ON c.idfCampaign = ms.idfCampaign
                   AND c.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = m.idfMaterial
                   AND tom.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOUT tro
                ON tro.idfTransferOut = tom.idfTransferOut
                   AND tro.intRowStatus = 0
            LEFT JOIN dbo.tlbSpecies species
                ON species.idfSpecies = m.idfSpecies
                   AND species.intRowStatus = 0
        WHERE res.ReadPermissionIndicator IN ( 1, 3, 5 )
              AND (
                      (
                          @ReportOrSessionTypeID = 10012001 --Human Disease Report
                          AND (
                                  (m.idfHumanCase IS NOT NULL)
                                  OR (
                                         m.idfMonitoringSession IS NOT NULL
                                         AND ms.SessionCategoryID = 10502001 --Human Active Surveillance Session
                                     )
                              )
                      )
                      OR (
                             @ReportOrSessionTypeID = 10012006 --Vector Surveillance Session
                             AND m.idfVectorSurveillanceSession IS NOT NULL
                         )
                      OR (
                             @ReportOrSessionTypeID = 10012005 --Veterinary Disease Report
                             AND (
                                     (m.idfVetCase IS NOT NULL)
                                     OR (
                                            m.idfMonitoringSession IS NOT NULL
                                            AND ms.SessionCategoryID IN ( 10502002, 10502009 ) --Veterinary Active Surveillance Session (Avian and Livestock)
                                        )
                                 )
                         )
                      OR (@ReportOrSessionTypeID IS NULL)
                  )
              AND (
                      (
                          @SurveillanceTypeID = 4578940000001 --Active
                          AND (
                                  m.idfMonitoringSession IS NOT NULL
                                  OR m.idfVectorSurveillanceSession IS NOT NULL
                              )
                      )
                      OR (
                             @SurveillanceTypeID = 4578940000002 --Active
                             AND (
                                     m.idfHumanCase IS NOT NULL
                                     OR m.idfVetCase IS NOT NULL
                                 )
                         )
                      OR (@SurveillanceTypeID IS NULL)
                  )
              AND (
                      (
                          (
                              m.blnAccessioned = @AccessionedIndicatorList
                              AND m.idfsAccessionCondition IS NULL
                          )
                          OR (
                                 @AccessionedIndicatorList IS NULL
                                 AND @SampleStatusTypeList IS NULL
                             )
                      )
                      OR (
                             (
                                 (m.idfsSampleStatus IN (
                                                            SELECT ID FROM @SampleStatusTypeListTable
                                                        )
                                 )
                                 OR (
                                        m.idfsAccessionCondition IN (
                                                                        SELECT ID FROM @SampleStatusTypeListTable
                                                                    )
                                        AND (
                                                m.idfsSampleStatus IS NULL
                                                OR m.idfsSampleStatus = 10015007 --In Repository
                                            )
                                    )
                             )
                             OR (
                                    @SampleStatusTypeList IS NULL
                                    AND @AccessionedIndicatorList IS NULL
                                )
                         )
                  )
              AND (
                      tro.idfSendToOffice = @TransferredToOrganizationID
                      OR @TransferredToOrganizationID IS NULL
                  )
              AND (
                      t.idfTestedByOffice = @ResultsReceivedFromID
                      OR @ResultsReceivedFromID IS NULL
                  )
              AND (
                      m.idfsSampleType = @SampleTypeID
                      OR @SampleTypeID IS NULL
                  )
              AND (
                      t.idfsTestName = @TestNameTypeID
                      OR @TestNameTypeID IS NULL
                  )
              AND (
                      msd.idfsDiagnosis = @DiseaseID
                      OR m.DiseaseID = @DiseaseID
                      OR @DiseaseID IS NULL
                  )
              AND (
                      t.idfsTestStatus = @TestStatusTypeID
                      OR @TestStatusTypeID IS NULL
                  )
              AND (
                      t.idfsTestResult = @TestResultTypeID
                      OR @TestResultTypeID IS NULL
                  )
              AND (
                      species.idfsSpeciesType = @SpeciesTypeID
                      OR @SpeciesTypeID IS NULL
                  )
              AND (
                      (t.datConcludedDate
              BETWEEN @TestResultDateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @TestResultDateTo)))
                      )
                      OR (
                             @TestResultDateFrom IS NULL
                             OR @TestResultDateTo IS NULL
                         )
                  )
              AND (
                      (
                          m.strCalculatedCaseID LIKE '%' + @EIDSSReportCampaignOrSessionID + '%'
                          OR c.strCampaignID LIKE '%' + @EIDSSReportCampaignOrSessionID + '%'
                      )
                      OR @EIDSSReportCampaignOrSessionID IS NULL
                  )
              AND (
                      m.strCalculatedHumanName LIKE '%' + @PatientName + '%'
                      OR @PatientName IS NULL
                  )
              AND (
                      m.strCalculatedHumanName LIKE '%' + @FarmOwnerName + '%'
                      OR @FarmOwnerName IS NULL
                  )
              AND (
                      m.strFieldBarcode LIKE '%' + @EIDSSLocalOrFieldSampleID + '%'
                      OR @EIDSSLocalOrFieldSampleID IS NULL
                  )
              AND (
                      tro.strBarcode LIKE '%' + @EIDSSTransferID + '%'
                      OR @EIDSSTransferID IS NULL
                  )
              AND (
                      m.strBarcode LIKE '%' + @EIDSSLaboratorySampleID + '%'
                      OR @EIDSSLaboratorySampleID IS NULL
                  )
              AND (
                      (
                          m.TestUnassignedIndicator = 1
                          AND @TestUnassignedIndicator = 1
                      )
                      OR @TestUnassignedIndicator IS NULL
                  )
              AND (
                      (
                          m.TestCompletedIndicator = 1
                          AND @TestCompletedIndicator = 1
                      )
                      OR @TestCompletedIndicator IS NULL
                  )
        GROUP BY m.idfMaterial;

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        SET @UnaccessionedCount =
        (
            SELECT COUNT(ID)
            FROM @FinalResults
            WHERE AccessionedIndicator = 0
                  AND AccessionConditionTypeID IS NULL
        );

        SELECT m.idfMaterial AS SampleID,
               m.strBarcode AS EIDSSLaboratorySampleID,
               CASE
                   WHEN f.SampleID IS NULL THEN
                       0
                   ELSE
                       1
               END AS FavoriteIndicator,
               m.idfRootMaterial AS RootSampleID,
               m.idfParentMaterial AS ParentSampleID,
               m.idfsSampleType AS SampleTypeID,
               sampleType.name AS SampleTypeName,
               m.idfHuman AS HumanID,
               CASE
                   WHEN res.AccessToPersonalDataPermissionIndicator = 0 THEN
                       '********'
                   ELSE
                       m.strCalculatedHumanName
               END AS PatientOrFarmOwnerName,
               m.idfSpecies AS SpeciesID,
               m.idfAnimal AS AnimalID,
               a.strAnimalCode AS EIDSSAnimalID,
               m.idfVector AS VectorID,
               m.idfMonitoringSession AS MonitoringSessionID,
               m.idfVectorSurveillanceSession AS VectorSessionID,
               m.idfHumanCase AS HumanDiseaseReportID,
               m.idfVetCase AS VeterinaryDiseaseReportID,
               m.strCalculatedCaseID AS EIDSSReportOrSessionID,
               m.TestCompletedIndicator,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       CAST(m.DiseaseID AS NVARCHAR(MAX))
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseIdentifiers
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseIdentifiers
                   ELSE
                       ''
               END AS DiseaseID,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       diseaseName.name
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseNames
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseNames
                   ELSE
                       ''
               END AS DiseaseName,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       diseaseName.name
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DisplayDiseaseNames
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DisplayDiseaseNames
                   ELSE
                       ''
               END AS DisplayDiseaseName,
               m.idfInDepartment AS FunctionalAreaID,
               functionalArea.name AS FunctionalAreaName,
               m.idfSubdivision AS FreezerSubdivisionID,
               m.StorageBoxPlace,
               m.datFieldCollectionDate AS CollectionDate,
               m.idfFieldCollectedByPerson AS CollectedByPersonID,
               m.idfFieldCollectedByOffice AS CollectedByOrganizationID,
               m.datFieldSentDate AS SentDate,
               m.idfSendToOffice AS SentToOrganizationID,
               m.idfsSite AS SiteID,
               m.strFieldBarcode AS EIDSSLocalOrFieldSampleID,
               m.datEnteringDate AS EnteredDate,
               m.datOutOfRepositoryDate AS OutOfRepositoryDate,
               m.idfMarkedForDispositionByPerson AS MarkedForDispositionByPersonID,
               m.blnReadOnly AS ReadOnlyIndicator,
               m.blnAccessioned AS AccessionIndicator,
               accessionConditionType.name AS AccessionConditionTypeName,
               m.datAccession AS AccessionDate,
               m.idfsAccessionCondition AS AccessionConditionTypeID,
               (CASE
                    WHEN m.blnAccessioned = 0
                         AND m.idfsAccessionCondition IS NULL THEN
                        'Un-accessioned'
                    WHEN m.idfsSampleStatus IS NULL THEN
                        accessionConditionType.name
                    WHEN m.idfsSampleStatus = 10015007 --In Repository
               THEN
                        accessionConditionType.name
                    ELSE
                        sampleStatusType.name
                END
               ) AS AccessionConditionOrSampleStatusTypeName,
               sampleStatusType.name AS SampleStatusTypeName,
               m.idfAccesionByPerson AS AccessionByPersonID,
               m.idfsSampleStatus AS SampleStatusTypeID,
               m.datSampleStatusDate AS SampleStatusDate,
               m.strCondition AS AccessionComment,
               m.idfsDestructionMethod AS DestructionMethodTypeID,
               m.datDestructionDate AS DestructionDate,
               m.idfDestroyedByPerson AS DestroyedByPersonID,
               CASE
                   WHEN m.TestUnassignedIndicator = 1 THEN
                       0
                   ELSE
                       1
               END AS TestAssignedCount,
               m.TransferIndicator AS TransferredCount,
               m.strNote AS Comment,
               m.idfsCurrentSite AS CurrentSiteID,
               m.idfsBirdStatus AS BirdStatusTypeID,
               m.idfMainTest AS MainTestID,
               m.idfsSampleKind AS SampleKindTypeID,
               m.PreviousSampleStatusID AS PreviousSampleStatusTypeID,
               m.LabModuleSourceIndicator,
               m.intRowStatus AS RowStatus,
               CASE
                   WHEN res.ReadPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.ReadPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.ReadPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.ReadPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.ReadPermissionIndicator)
               END AS ReadPermissionindicator,
               CASE
                   WHEN res.AccessToPersonalDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.AccessToPersonalDataPermissionIndicator)
               END AS AccessToPersonalDataPermissionIndicator,
               CASE
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.AccessToGenderAndAgeDataPermissionIndicator)
               END AS AccessToGenderAndAgeDataPermissionIndicator,
               CASE
                   WHEN res.WritePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.WritePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.WritePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.WritePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.WritePermissionIndicator)
               END AS WritePermissionIndicator,
               CASE
                   WHEN res.DeletePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.DeletePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.DeletePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.DeletePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.DeletePermissionIndicator)
               END AS DeletePermissionIndicator,
               0 AS RowAction,
               0 AS RowSelectionIndicator,
               COUNT(*) OVER () AS TotalRowCount,
               @UnaccessionedCount AS UnaccessionedSampleCount
        FROM @FinalResults res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.ID
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                ON sampleType.idfsReference = m.idfsSampleType
            LEFT JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbAnimal a
                ON a.idfAnimal = m.idfAnimal
                   AND a.intRowStatus = 0
            LEFT JOIN dbo.tlbDepartment d
                ON d.idfDepartment = m.idfInDepartment
                   AND d.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) diseaseName
                ON diseaseName.idfsReference = m.DiseaseID
            LEFT JOIN @MonitoringSessionDiseases msDiseases
                ON msDiseases.ID = m.idfMonitoringSession
            LEFT JOIN @VectorSessionDiseases vsDiseases
                ON vsDiseases.ID = m.idfVectorSurveillanceSession
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000164) functionalArea
                ON functionalArea.idfsReference = d.idfsDepartmentName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                ON sampleStatusType.idfsReference = m.idfsSampleStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                ON accessionConditionType.idfsReference = m.idfsAccessionCondition
        OPTION (RECOMPILE);
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_SAMPLE_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_SAMPLE_GETList
--
-- Description:	Get sample list for the laboratory module use case LUC01.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     07/18/2018 Initial release.
-- Stephen Long	    12/19/2018 Added pagination logic.
-- Stephen Long     01/14/2019 Split out search functionality (where conditions) for better 
--                             performance on this procedure.
-- Stephen Long     01/30/2019 Added sample disease reference join and removed the vector 
--                             surveillance session joins as they are no longer needed.
-- Stephen Long     02/11/2019 Fix to the value used for the test completed indicator.  It was 
--                             using the wrong base reference value.
-- Stephen Long     02/21/2019 Changed field collection and field sent to collection and sent to 
--                             be consistent on naming.  Added parent sample ID to support the 
--                             edit transfer use case.
-- Stephen Long     03/28/2019 Removed test status 'Not Started' as criteria for the test assigned 
--                             indicator and test assigned count.
-- Stephen Long     06/22/2019 Removal of herd join and joined species on the sample table.
-- Stephen Long     07/01/2019 Corrected reference type on monitoring session category.
-- Stephen Long     07/09/2019 Added human master ID to select as placeholder for model.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     07/17/2019 Added vector join and field vector ID to the patient/species/vector.
-- Stephen Long     07/28/2019 Corrected sample kind ID where clause for aliquots/derivatives.
-- Stephen Long     08/12/2019 Corrected parenthesis for POCO error on sample kind where clause.
-- Stephen Long     08/30/2019 Removed commented out IF ELSE for individual sample.
-- Stephen Long     09/11/2019 Added sample destroyed status to sample status where clause.  Added 
--                             pagination set 0 to bring back "all" records.
-- Stephen Long     09/26/2019 Added sample list parameter and where clause.
-- Stephen Long     10/03/2019 Added comma to split sample list delimeter.
-- Stephen Long     10/17/2019 Added intRowStatus and non-laboratory test check on test completed 
--                             and test assigned indicators, and test assigned count.
-- Stephen Long     01/21/2020 Converted site ID to site list for site filtration.
-- Stephen Long     02/19/2020 Corrected left joins needing intRowStatus = 0.
-- Stephen Long     03/11/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     03/16/2020 Added sample status type of transferred out to include in the list.
-- Stephen Long     04/16/2020 Correction on vector surveillance session disease ID's and names.
-- Stephen Long     04/20/2020 Added vector type ID and vector species type ID to the model.
-- Stephen Long     05/05/2020 Added transfer status type ID of final when sample status type ID 
--                             is transferred out.
-- Stephen Long     06/21/2020 Added additional criteria to show samples with a final or amended 
--                             test to be selected within the accession timeframe.
-- Stephen Long     06/30/2020 Added additional criteria to pull back transferred in records after
--                             accessioned in.
-- Stephen Long     07/06/2020 Added lab module source indicator to model.
-- Stephen Long     10/27/2020 Removed test assigned indicator, and split out queries for better 
--                             performance.
-- Stephen Long     10/29/2020 Added test unassigned and test completed parameters and where 
--                             criteria.
-- Stephen Long     10/31/2020 Correct disease report/session query where criteria; prevent dups.
-- Stephen Long     11/28/2020 Added configurable site filtration rules.
-- Stephen Long     12/15/2020 Changed join for vector surveillance session diseases to the sample
--                             table.
-- Stephen Long     12/31/2020 Correct record and unaccessioned counts.
-- Stephen Long     01/21/2021 Change counts from distinct count to group by with sub-query.
-- Stephen Long     02/08/2021 Change where criteria to handle null organization for the central
--                             data repository.
-- Stephen Long     06/28/2021 Applied new pagination parameters.
-- Mark Wilson		08/11/2021 updated to join tlbMonitoringSessionToDiagnosis
-- Stephen Long     09/18/2021 Removed unneeded fields and joins to improve performance.
-- Stephen Long     12/14/2021 Added sample status date to the query.
-- Stephen Long     02/03/2022 Corrected monitoring session to diagnosis join.
-- Stephen Long     02/07/2022 Removed unneeded joins on the disease fields.
-- Stephen Long     02/17/2022 Fix on where criteria for test status types.
-- Stephen Long     03/10/2022 Changed note to comment and transfer count to transferred count.
-- Stephen Long     03/24/2022 Added final results table variable to account for duplicates that 
--                             may return from filtration rules.
-- Stephen Long     04/15/2022 Fix to filtration query grouping.
-- Stephen Long     05/17/2022 Removed primary key from monitoring and vector session disease 
--                             table variables.
-- Stephen Long     05/20/2022 Added string agg to session diseases.
-- Stephen Long     05/23/2022 Added check on testing table to only look for laboratory tests and
--                             rejected samples check within sample window.
-- Stephen Long     06/20/2022 Added row status check when looking for parent samples.
-- Stephen Long     06/28/2022 Added check to include transferred out samples only when the 
--                             transfer is final and within the accession date window.
-- Stephen Long     07/26/2022 Updated case statement on disease id and name.
-- Stephen Long     08/17/2022 Added collection and entered date to the default sort order.
-- Stephen Long     09/21/2022 Removed test status types of final and amended from the in 
--                             repository samples within the accession date window check.  Changed 
--                             rejected samples to use collection date or entered date against the 
--                             date window (number of days for samples to stay in the list).
-- Stephen Long     10/04/2022 Bug fix on item 5057; don't show marked for deletion or marked 
--                             for destruction in the default listing.
-- Stephen Long     10/21/2022 Added display disease names separated by comma.
-- Stephen Long     11/03/2022 Added date to the table variable to store the collection date, if 
--                             available, otherwise entered date.  Sort order for default base on 
--                             this new date field.
-- Stephen Long     12/29/2022 Removed sorting and pagination logic; business decision so records
--                             pending save could be shown at the top of the list prior to saving.
-- Stephen Long     01/03/2023 Added check for user's site identifier when the sent to organization 
--                             is not present.
-- Stephen Long     01/10/2023 Updated for site filtration queries.
-- 
-- Testing Code:
/*
DECLARE	@return_value int

EXEC	@return_value = [dbo].[USP_LAB_SAMPLE_GETList]
		@LanguageID = N'en-US',
		@SampleID = NULL,
		@ParentSampleID = NULL,
		@DaysFromAccessionDate = 60,
		@SampleList = NULL,
		@TestUnassignedIndicator = NULL,
		@TestCompletedIndicator = NULL,
		@UserID = 161287150000872, --rykermase
		@UserEmployeeID = 420664190000872,
		@UserSiteID = 864,
		@UserOrganizationID = 758210000000,
		@UserSiteGroupID = NULL,
		@Page = 1,
		@PageSize = 100,
		@SortColumn = N'AccessionDate',
		@SortOrder = N'ASC'

SELECT	'Return Value' = @return_value

GO
*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_SAMPLE_GETList]
(
    @LanguageID NVARCHAR(50),
    @SampleID BIGINT = NULL,
    @ParentSampleID BIGINT = NULL,
    @DaysFromAccessionDate INT,
    @SampleList VARCHAR(MAX) = NULL,
    @TestUnassignedIndicator BIT = NULL,
    @TestCompletedIndicator BIT = NULL,
    @UserID BIGINT,
    @UserEmployeeID BIGINT,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT = NULL,
    @UserSiteGroupID BIGINT = NULL,
    @SortColumn VARCHAR(200) = 'Default'
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @UnaccessionedCount INT = 0,
            @TotalRowCount INT = 0;
    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL,
        AccessionedIndicator BIT NOT NULL,
        AccessionConditionTypeID BIGINT NULL,
        SortDate DATETIME NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID BIGINT NOT NULL,
        AccessionedIndicator BIT NOT NULL,
        AccessionConditionTypeID BIGINT NULL,
        SortDate DATETIME NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @MonitoringSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL,
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @VectorSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL,
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @SampleListTable TABLE (ID BIGINT NOT NULL);
    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @Favorites XML;

    IF @SampleList IS NOT NULL
        INSERT INTO @SampleListTable
        SELECT CAST([Value] AS BIGINT)
        FROM dbo.FN_GBL_SYS_SplitList(@SampleList, NULL, ',')

    BEGIN TRY
        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        INSERT INTO @MonitoringSessionDiseases
        SELECT MonitoringSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames,
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames
        FROM dbo.FN_LAB_MONITORING_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY MonitoringSessionID;

        INSERT INTO @VectorSessionDiseases
        SELECT VectorSurveillanceSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames,
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames
        FROM dbo.FN_LAB_VECTOR_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY VectorSurveillanceSessionID;

        SET @Favorites =
        (
            SELECT PreferenceDetail
            FROM dbo.UserPreference Laboratory
            WHERE idfUserID = @UserID
                  AND ModuleConstantID = 10508006
                  AND intRowStatus = 0
        );

        IF @SampleID IS NOT NULL
           OR @SampleList IS NOT NULL
           OR @ParentSampleID IS NOT NULL
        BEGIN
            INSERT INTO @FinalResults
            SELECT m.idfMaterial,
                   m.blnAccessioned,
                   m.idfsAccessionCondition,
                   CASE
                       WHEN m.datFieldCollectionDate IS NULL THEN
                           m.datEnteringDate
                       ELSE
                           m.datFieldCollectionDate
                   END,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbMaterial m
            WHERE m.intRowStatus = 0
                  AND (
                          @SampleList IS NULL
                          OR m.idfMaterial IN (
                                                  SELECT ID FROM @SampleListTable
                                              )
                      )
                  AND (
                          @SampleID IS NULL
                          OR m.idfMaterial = @SampleID
                      )
                  AND (
                          @ParentSampleID IS NULL
                          OR m.idfParentMaterial = @ParentSampleID
                      );
        END
        ELSE
        BEGIN
            INSERT INTO @Results
            SELECT m.idfMaterial,
                   m.blnAccessioned,
                   m.idfsAccessionCondition,
                   CASE
                       WHEN m.datFieldCollectionDate IS NULL THEN
                           m.datEnteringDate
                       ELSE
                           m.datFieldCollectionDate
                   END,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbMaterial m
            WHERE m.intRowStatus = 0
                  AND m.idfsSampleType <> 10320001 --Unknown
                  AND (
                          (
                              m.idfSendToOffice = @UserOrganizationID
                              AND m.idfSendToOffice IS NOT NULL
                          )
                          OR (
                                 m.idfsSite = @UserSiteID
                                 AND m.idfSendToOffice IS NULL
                             )
                      )
                  AND (
                          (
                              GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                              AND
                              (
                                  SELECT COUNT(*)
                                  FROM dbo.tlbTesting t
                                  WHERE t.idfMaterial = m.idfMaterial
                                        AND t.intRowStatus = 0
                                        AND t.blnNonLaboratoryTest = 0
                                        AND t.idfsTestStatus IN ( 10001003, 10001004, 10001005 ) -- In Progress, Preliminary and Not Started
                              ) = 0
                              AND @TestUnassignedIndicator IS NOT NULL
                              AND m.blnAccessioned = 1
                              AND m.datAccession IS NOT NULL
                              AND m.idfsAccessionCondition IS NOT NULL
                              AND m.idfsSampleStatus = 10015007 -- In Repository
                          )
                          OR (
                                 GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                                 AND
                                 (
                                     SELECT COUNT(*)
                                     FROM dbo.tlbTesting t
                                     WHERE t.idfMaterial = m.idfMaterial
                                           AND t.intRowStatus = 0
                                           AND t.blnNonLaboratoryTest = 0
                                           AND t.idfsTestStatus IN ( 10001001, 10001006 ) -- Final and Amended
                                 ) > 0
                                 AND @TestCompletedIndicator IS NOT NULL
                             )
                          OR (
                                 m.blnAccessioned = 0
                                 AND m.idfsAccessionCondition IS NULL
                                 AND m.idfsSampleStatus IS NULL
                                 AND @TestCompletedIndicator IS NULL
                                 AND @TestUnassignedIndicator IS NULL
                             )
                          OR ( -- Accessioned In with no in progress, preliminary tests assigned, Deleted or Destroyed
                                 GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                                 AND
                                 (
                                     SELECT COUNT(*)
                                     FROM dbo.tlbTesting t
                                     WHERE t.idfMaterial = m.idfMaterial
                                           AND t.intRowStatus = 0
                                           AND t.blnNonLaboratoryTest = 0
                                           AND t.idfsTestStatus IN ( 10001003, 10001004, 10001005 ) -- In Progress, Preliminary and Not Started
                                 ) = 0
                                 AND m.idfsSampleStatus IN ( 10015007, 10015008, 10015009 ) -- In Repository, Deleted, Destroyed
                                 AND @TestUnassignedIndicator IS NULL
                                 AND @TestCompletedIndicator IS NULL
                             )
                          OR (
                                 GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                                 AND m.idfsSampleStatus = 10015010 -- Transferred Out
                                 AND
                                 (
                                     SELECT COUNT(tr.idfTransferOut)
                                     FROM dbo.tlbTransferOutMaterial tom
                                         INNER JOIN dbo.tlbTransferOUT tr
                                             ON tr.idfTransferOut = tom.idfTransferOut
                                     WHERE tom.idfMaterial = m.idfMaterial
                                           AND tr.intRowStatus = 0
                                           AND tr.idfsTransferStatus IN ( 10001003 ) -- Final
                                 ) = 0
                                 AND @TestCompletedIndicator IS NULL
                                 AND @TestUnassignedIndicator IS NULL
                             ) --Transferred Out and Final
                          OR (
                                 (
                                     (
                                         m.datFieldCollectionDate IS NOT NULL
                                         AND GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datFieldCollectionDate)
                                     )
                                     OR (
                                            m.datEnteringDate IS NOT NULL
                                            AND GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datEnteringDate)
                                        )
                                 )
                                 AND m.blnAccessioned = 0
                                 AND m.idfsAccessionCondition = 10108003 -- Rejected sample
                             )
                      );
        END

        -- =======================================================================================
        -- CONFIGURABLE FILTRATION RULES
        -- 
        -- Apply configurable filtration rules for use case SAUC34. Some of these rules may 
        -- overlap the non-configurable rules.
        -- =======================================================================================
        --
        -- Apply at the user's site group level, granted by a site group.
        --
        IF @UserOrganizationID IS NOT NULL --First-level sites (central data repository, general data repository, etc.) do not filter results.
        BEGIN
            INSERT INTO @Results
            SELECT m.idfMaterial,
                   m.blnAccessioned,
                   m.idfsAccessionCondition,
                   CASE
                       WHEN m.datFieldCollectionDate IS NULL THEN
                           m.datEnteringDate
                       ELSE
                           m.datFieldCollectionDate
                   END,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = m.idfsSite
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = @UserSiteGroupID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
            WHERE m.intRowStatus = 0
                  AND @UserSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site level, granted by a site group.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial,
                   m.blnAccessioned,
                   m.idfsAccessionCondition,
                   CASE
                       WHEN m.datFieldCollectionDate IS NULL THEN
                           m.datEnteringDate
                       ELSE
                           m.datFieldCollectionDate
                   END,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = m.idfsSite
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
            WHERE m.intRowStatus = 0
                  AND ar.GrantingActorSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's employee group level, granted by a site group.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial,
                   m.blnAccessioned,
                   m.idfsAccessionCondition,
                   CASE
                       WHEN m.datFieldCollectionDate IS NULL THEN
                           m.datEnteringDate
                       ELSE
                           m.datFieldCollectionDate
                   END,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = m.idfsSite
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
            WHERE m.intRowStatus = 0
                  AND ar.GrantingActorSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's ID level, granted by a site group.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial,
                   m.blnAccessioned,
                   m.idfsAccessionCondition,
                   CASE
                       WHEN m.datFieldCollectionDate IS NULL THEN
                           m.datEnteringDate
                       ELSE
                           m.datFieldCollectionDate
                   END,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = m.idfsSite
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
            WHERE m.intRowStatus = 0
                  AND ar.GrantingActorSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site group level, granted by a site.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial,
                   m.blnAccessioned,
                   m.idfsAccessionCondition,
                   CASE
                       WHEN m.datFieldCollectionDate IS NULL THEN
                           m.datEnteringDate
                       ELSE
                           m.datFieldCollectionDate
                   END,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tflSiteToSiteGroup sgs
                    ON sgs.idfSiteGroup = @UserSiteGroupID
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
            WHERE m.intRowStatus = 0
                  AND @UserSiteGroupID IS NOT NULL
                  AND sgs.idfsSite = m.idfsSite;

            -- 
            -- Apply at the user's site level, granted by a site.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial,
                   m.blnAccessioned,
                   m.idfsAccessionCondition,
                   CASE
                       WHEN m.datFieldCollectionDate IS NULL THEN
                           m.datEnteringDate
                       ELSE
                           m.datFieldCollectionDate
                   END,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.AccessRule ar
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.tlbMaterial m
                    ON m.intRowStatus = 0
            WHERE ar.GrantingActorSiteID IS NOT NULL
                  AND m.idfsSite = ar.GrantingActorSiteID;

            DECLARE @UserEmployeeGroupID BIGINT = (
                                                      SELECT TOP 1
                                                          egm.idfEmployeeGroup
                                                      FROM dbo.tlbEmployeeGroupMember egm
                                                      WHERE egm.idfEmployee = @UserEmployeeID
                                                            AND egm.intRowStatus = 0
                                                  );

            -- Apply at the user's employee group level, granted by a site.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial,
                   m.blnAccessioned,
                   m.idfsAccessionCondition,
                   CASE
                       WHEN m.datFieldCollectionDate IS NULL THEN
                           m.datEnteringDate
                       ELSE
                           m.datFieldCollectionDate
                   END,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.AccessRuleActor ara
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
                       AND ar.GrantingActorSiteID IS NOT NULL
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfsSite = ar.GrantingActorSiteID
                       AND m.intRowStatus = 0
            WHERE ara.ActorEmployeeGroupID = @UserEmployeeGroupID
                  AND ara.intRowStatus = 0;

            -- 
            -- Apply at the user's ID level, granted by a site.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial,
                   m.blnAccessioned,
                   m.idfsAccessionCondition,
                   CASE
                       WHEN m.datFieldCollectionDate IS NULL THEN
                           m.datEnteringDate
                       ELSE
                           m.datFieldCollectionDate
                   END,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.AccessRule ar
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.tlbMaterial m
                    ON m.intRowStatus = 0
            WHERE ar.GrantingActorSiteID IS NOT NULL
                  AND m.idfsSite = ar.GrantingActorSiteID;
        END;

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = m.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE m.intRowStatus = 0
                  AND oa.idfsObjectOperation = 10059003 -- Read permission
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.ID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = m.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003 -- Read permission
              AND NOT EXISTS (
                              SELECT * FROM @UserSitePermissions WHERE SiteID = m.idfsSite
              );

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = m.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        IF @SortColumn <> 'Query'
        BEGIN
            INSERT INTO @FinalResults
            SELECT res.ID,
                   res.AccessionedIndicator,
                   res.AccessionConditionTypeID,
                   res.SortDate,
                   MAX(res.ReadPermissionIndicator),
                   MAX(res.AccessToPersonalDataPermissionIndicator),
                   MAX(res.AccessToGenderAndAgeDataPermissionIndicator),
                   MAX(res.WritePermissionIndicator),
                   MAX(res.DeletePermissionIndicator)
            FROM @Results res
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = res.ID
                                      AND m.intRowStatus = 0
            WHERE (res.ReadPermissionIndicator IN ( 1, 3, 5 )
                  AND m.idfsSampleType <> 10320001 --Unknown
                  AND (
                          (
                              GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                              AND
                              (
                                  SELECT COUNT(*)
                                  FROM dbo.tlbTesting t
                                  WHERE t.idfMaterial = m.idfMaterial
                                        AND t.intRowStatus = 0
                                        AND t.blnNonLaboratoryTest = 0
                                        AND t.idfsTestStatus IN ( 10001003, 10001004, 10001005 ) -- In Progress, Preliminary and Not Started
                              ) = 0
                              AND @TestUnassignedIndicator IS NOT NULL
                              AND m.blnAccessioned = 1
                              AND m.datAccession IS NOT NULL
                              AND m.idfsAccessionCondition IS NOT NULL
                              AND m.idfsSampleStatus = 10015007 -- In Repository
                          )
                          OR (
                                 GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                                 AND
                                 (
                                     SELECT COUNT(*)
                                     FROM dbo.tlbTesting t
                                     WHERE t.idfMaterial = m.idfMaterial
                                           AND t.intRowStatus = 0
                                           AND t.blnNonLaboratoryTest = 0
                                           AND t.idfsTestStatus IN ( 10001001, 10001006 ) -- Final and Amended
                                 ) > 0
                                 AND @TestCompletedIndicator IS NOT NULL
                             )
                          OR (
                                 m.blnAccessioned = 0
                                 AND m.idfsAccessionCondition IS NULL
                                 AND m.idfsSampleStatus IS NULL
                                 AND @TestCompletedIndicator IS NULL
                                 AND @TestUnassignedIndicator IS NULL
                             )
                          OR (
                                 GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                                 AND
                                 (
                                     SELECT COUNT(*)
                                     FROM dbo.tlbTesting t
                                     WHERE t.idfMaterial = m.idfMaterial
                                           AND t.intRowStatus = 0
                                           AND t.blnNonLaboratoryTest = 0
                                           AND t.idfsTestStatus IN ( 10001003, 10001004, 10001005 ) -- In Progress, Preliminary and Not Started
                                 ) = 0
                                 AND m.idfsSampleStatus IN ( 10015007, 10015008, 10015009 ) -- In Repository, Deleted, Destroyed
                                 AND @TestUnassignedIndicator IS NULL
                                 AND @TestCompletedIndicator IS NULL
                             )
                          OR (
                                 GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                                 AND m.idfsSampleStatus = 10015010 -- Transferred Out
                                 AND
                                 (
                                     SELECT COUNT(tr.idfTransferOut)
                                     FROM dbo.tlbTransferOutMaterial tom
                                         INNER JOIN dbo.tlbTransferOUT tr
                                             ON tr.idfTransferOut = tom.idfTransferOut
                                     WHERE tom.idfMaterial = m.idfMaterial
                                           AND tr.intRowStatus = 0
                                           AND tr.idfsTransferStatus IN ( 10001003 ) -- Final
                                 ) = 0
                                 AND @TestCompletedIndicator IS NULL
                                 AND @TestUnassignedIndicator IS NULL
                             ) --Transferred Out and Final
                          OR (
                                 (
                                     (
                                         m.datFieldCollectionDate IS NOT NULL
                                         AND GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datFieldCollectionDate)
                                     )
                                     OR (
                                            m.datEnteringDate IS NOT NULL
                                            AND GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datEnteringDate)
                                        )
                                 )
                                 AND m.blnAccessioned = 0
                                 AND m.idfsAccessionCondition = 10108003 -- Rejected sample
                             )
                      )
                      )
            GROUP BY res.ID,
                     res.AccessionedIndicator,
                                        res.AccessionConditionTypeID,
                   res.SortDate;
        END

        SET @TotalRowCount =
        (
            SELECT COUNT(ID) FROM @FinalResults
        );
        SET @UnaccessionedCount =
        (
            SELECT COUNT(ID)
            FROM @FinalResults
            WHERE AccessionedIndicator = 0
                  AND AccessionConditionTypeID IS NULL
        );

        SELECT m.idfMaterial AS SampleID,
               m.strBarcode AS EIDSSLaboratorySampleID,
               CASE
                   WHEN f.SampleID IS NULL THEN
                       0
                   ELSE
                       1
               END AS FavoriteIndicator,
               m.idfRootMaterial AS RootSampleID,
               m.idfParentMaterial AS ParentSampleID,
               m.idfsSampleType AS SampleTypeID,
               sampleType.name AS SampleTypeName,
               m.idfHuman AS HumanID,
               m.strCalculatedHumanName AS PatientOrFarmOwnerName,
               m.idfSpecies AS SpeciesID,
               m.idfAnimal AS AnimalID,
               a.strAnimalCode AS EIDSSAnimalID,
               m.idfVector AS VectorID,
               m.idfMonitoringSession AS MonitoringSessionID,
               m.idfVectorSurveillanceSession AS VectorSessionID,
               m.idfHumanCase AS HumanDiseaseReportID,
               m.idfVetCase AS VeterinaryDiseaseReportID,
               m.strCalculatedCaseID AS EIDSSReportOrSessionID,
               '' AS ReportOrSessionTypeName,
               m.TestCompletedIndicator,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       CAST(m.DiseaseID AS NVARCHAR(MAX))
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseIdentifiers
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseIdentifiers
                   ELSE
                       ''
               END AS DiseaseID,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       diseaseName.name
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseNames
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseNames
                   ELSE
                       ''
               END AS DiseaseName,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       diseaseName.name
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DisplayDiseaseNames
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DisplayDiseaseNames
                   ELSE
                       ''
               END AS DisplayDiseaseName,
               m.idfInDepartment AS FunctionalAreaID,
               functionalArea.name AS FunctionalAreaName,
               m.idfSubdivision AS FreezerSubdivisionID,
               m.StorageBoxPlace,
               m.datFieldCollectionDate AS CollectionDate,
               m.idfFieldCollectedByPerson AS CollectedByPersonID,
               m.idfFieldCollectedByOffice AS CollectedByOrganizationID,
               m.datFieldSentDate AS SentDate,
               m.idfSendToOffice AS SentToOrganizationID,
               m.idfsSite AS SiteID,
               m.strFieldBarcode AS EIDSSLocalOrFieldSampleID,
               m.datEnteringDate AS EnteredDate,
               m.datOutOfRepositoryDate AS OutOfRepositoryDate,
               m.idfMarkedForDispositionByPerson AS MarkedForDispositionByPersonID,
               m.blnReadOnly AS ReadOnlyIndicator,
               m.blnAccessioned AS AccessionIndicator,
               m.datAccession AS AccessionDate,
               m.idfsAccessionCondition AS AccessionConditionTypeID,
               CASE
                   WHEN m.blnAccessioned = 0
                        AND m.idfsAccessionCondition IS NULL THEN
                       'Un-accessioned'
                   WHEN m.idfsSampleStatus IS NULL THEN
                       accessionConditionType.name
                   WHEN m.idfsSampleStatus = 10015007 --In Repository
               THEN
                       accessionConditionType.name
                   ELSE
                       sampleStatusType.name
               END AS AccessionConditionOrSampleStatusTypeName,
               m.idfAccesionByPerson AS AccessionByPersonID,
               m.idfsSampleStatus AS SampleStatusTypeID,
               m.datSampleStatusDate AS SampleStatusDate,
               m.strCondition AS AccessionComment,
               m.idfsDestructionMethod AS DestructionMethodTypeID,
               m.datDestructionDate AS DestructionDate,
               m.idfDestroyedByPerson AS DestroyedByPersonID,
               CASE
                   WHEN m.TestUnassignedIndicator = 1 THEN
                       0
                   ELSE
                       1
               END AS TestAssignedCount,
               m.TransferIndicator AS TransferredCount,
               m.strNote AS Comment,
               m.idfsCurrentSite AS CurrentSiteID,
               m.idfsBirdStatus AS BirdStatusTypeID,
               m.idfMainTest AS MainTestID,
               m.idfsSampleKind AS SampleKindTypeID,
               m.PreviousSampleStatusID AS PreviousSampleStatusTypeID,
               m.LabModuleSourceIndicator,
               m.intRowStatus AS RowStatus,
               CASE
                   WHEN res.ReadPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.ReadPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.ReadPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.ReadPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.ReadPermissionIndicator)
               END AS ReadPermissionindicator,
               CASE
                   WHEN res.AccessToPersonalDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.AccessToPersonalDataPermissionIndicator)
               END AS AccessToPersonalDataPermissionIndicator,
               CASE
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.AccessToGenderAndAgeDataPermissionIndicator)
               END AS AccessToGenderAndAgeDataPermissionIndicator,
               CASE
                   WHEN res.WritePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.WritePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.WritePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.WritePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.WritePermissionIndicator)
               END AS WritePermissionIndicator,
               CASE
                   WHEN res.DeletePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.DeletePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.DeletePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.DeletePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.DeletePermissionIndicator)
               END AS DeletePermissionIndicator,
               0 AS RowAction,
               0 AS RowSelectionIndicator,
               @TotalRowCount AS TotalRowCount,
               @UnaccessionedCount AS UnaccessionedSampleCount
        FROM @FinalResults res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.ID
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                ON sampleType.idfsReference = m.idfsSampleType
            LEFT JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) diseaseName
                ON diseaseName.idfsReference = m.DiseaseID
            LEFT JOIN @MonitoringSessionDiseases msDiseases
                ON msDiseases.ID = m.idfMonitoringSession
            LEFT JOIN @VectorSessionDiseases vsDiseases
                ON vsDiseases.ID = m.idfVectorSurveillanceSession
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                ON sampleStatusType.idfsReference = m.idfsSampleStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                ON accessionConditionType.idfsReference = m.idfsAccessionCondition
            LEFT JOIN dbo.tlbAnimal a
                ON a.idfAnimal = m.idfAnimal
                   AND a.intRowStatus = 0
            LEFT JOIN dbo.tlbDepartment d
                ON d.idfDepartment = m.idfInDepartment
                   AND d.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000164) functionalArea
                ON functionalArea.idfsReference = d.idfsDepartmentName
        ORDER BY m.blnAccessioned,
                 m.idfsSampleStatus DESC,
                 m.idfsAccessionCondition,
                 res.SortDate DESC;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_SAMPLE_SEARCH_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_SAMPLE_SEARCH_GETList
--
-- Description:	Get sample search list for the laboratory module use case LUC13.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     01/14/2019 Initial release.
-- Stephen Long     01/30/2019 Removed joins to vector surveillance session, and added reference 
--                             to the disease reference table for the sample table.
-- Stephen Long     02/21/2019 Added organization ID parameter to narrow search.
-- Stephen Long     07/01/2019 Corrected reference type on monitoring session category.
-- Stephen Long     07/09/2019 Added disease to the wildcard search.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     08/18/2019 Removed herd left join and modified species left join to material 
--                             table.
-- Stephen Long     01/21/2020 Added site list for site filtration.
-- Stephen Long     03/09/2020 Added additional search filters to match the default get.
-- Stephen Long     03/10/2020 Removed filter on sample disease, and added disease report and 
--                             monitoring session ones.
-- Stephen Long     03/11/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     04/23/2020 Correction on disease ID and disease name; add vector surveillance 
--                             session.
-- Stephen Long     05/05/2020 Added transfer status type ID of final when sample status type ID 
--                             is transferred out.
-- Stephen Long     06/07/2020 Added additional search fields to the where clause.
-- Stephen Long     07/06/2020 Added lab module source indicator to the model.
-- Stephen Long     10/27/2020 Removed test assigned indicator, and split out queries for better 
--                             performance.
-- Stephen Long     10/30/2020 Added test unassigned and test completed indicators.
-- Stephen Long     10/31/2020 Correct disease report/session query where criteria; prevent dups.
-- Stephen Long     11/28/2020 Added configurable site filtration rules.
-- Stephen Long     12/16/2020 Changed join for vector surveillance session diseases to the sample
--                             table.
-- Stephen Long     12/31/2020 Change function on reference data to handle inactive records.
-- Stephen Long     01/03/2021 Moved pagination to table variable insert.
-- Stephen Long     01/05/2021 Changed over missed functions for reference data.
-- Stephen Long     01/07/2021 Removed leading wildcard (%) as full table scans are performed even 
--                             with indices resulting in long query run times.  Recommend NOT 
--                             putting those back in.
-- Stephen Long     06/28/2021 Applied new pagination parameters.
-- Stephen Long     09/20/2021 Removed unneeded fields and joins to improve performance.
-- Stephen Long     12/06/2021 Correction to EIDSSReportOrSessionID alias name.
-- Stephen Long     12/14/2021 Added sample status date to the query.
-- Stephen Long     02/08/2022 Removed unneeded joins.
-- Stephen Long     02/17/2022 Fix on where criteria for test status types.
-- Stephen Long     03/10/2022 Changed note to comment and transfer count to transferred count.
-- Stephen Long     05/17/2022 Removed primary key from monitoring and vector session disease 
--                             table variables.
-- Stephen Long     05/20/2022 Added string agg to session diseases.
-- Stephen Long     05/23/2022 Fix to show rejected samples on sample search.
-- Stephen Long     07/26/2022 Updated case statement on disease id and name.
-- Stephen Long     08/04/2022 Add where criteria from the default sample listing, so only
--                             records for the simple search are filtered from the default set.
-- Stephen Long     08/16/2022 Added null DaysFromAccessionDate to the where criteria.
-- Stephen Long     09/21/2022 Removed test status types of final and amended from the in 
--                             repository samples within the accession date window check.  Changed 
--                             rejected samples to use collection date or entered date against the 
--                             date window (number of days for samples to stay in the list).
-- Stephen Long     10/17/2022 Bug fix on item 5111 and 5018.
-- Stephen Long     10/21/2022 Added display disease names separated by comma.
-- Stephen Long     12/29/2022 Removed sorting and pagination logic; business decision so records
--                             pending save could be shown at the top of the list prior to saving.
-- Stephen Long     01/03/2023 Added check for user's site identifier when the sent to organization 
--                             is not present.
-- Stephen Long     01/14/2023 Updated for site filtration queries.
--
-- Testing Code:
/*
DECLARE	@return_value int

EXEC	@return_value = [dbo].[USP_LAB_SAMPLE_SEARCH_GETList]
		@LanguageID = N'en-US',
		@SearchString = N'COVID', -- Use 'Gnhnscvxb', 'Blood', 'XWEB00' as other tests.
		@TestUnassignedIndicator = NULL,
		@TestCompletedIndicator = NULL,
		@UserID = 161287150000872, -- rykermase
		@UserOrganizationID = 758210000000,
		@Page = 1,
		@PageSize = 10,
		@SortColumn = N'EIDSSLaboratorySampleID',
		@SortOrder = N'DESC'

SELECT	'Return Value' = @return_value

GO
*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_SAMPLE_SEARCH_GETList]
(
    @LanguageID NVARCHAR(50),
    @SearchString NVARCHAR(2000),
    @AccessionedIndicator BIT = NULL,
    @TestUnassignedIndicator BIT = NULL,
    @TestCompletedIndicator BIT = NULL,
    @UserID BIGINT,
    @UserEmployeeID BIGINT, 
    @UserOrganizationID BIGINT,
    @UserSiteID BIGINT, 
    @DaysFromAccessionDate INT = NULL
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @InitialResults TABLE (ID BIGINT NOT NULL);
    DECLARE @FinalResults TABLE (ID BIGINT NOT NULL);
    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @MonitoringSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL,
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @VectorSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL,
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @SampleTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @SampleStatusTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @AccessionConditionTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @Diseases TABLE (ID BIGINT NOT NULL);
    DECLARE @FunctionalAreas TABLE (ID BIGINT NOT NULL);
    DECLARE @Favorites XML,
            @LanguageCode BIGINT;

    BEGIN TRY
        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        SET @LanguageCode = dbo.FN_GBL_LanguageCode_Get(@LanguageID);

        INSERT INTO @MonitoringSessionDiseases
        SELECT MonitoringSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames,
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames
        FROM dbo.FN_LAB_MONITORING_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY MonitoringSessionID;

        INSERT INTO @VectorSessionDiseases
        SELECT VectorSurveillanceSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames,
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames
        FROM dbo.FN_LAB_VECTOR_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY VectorSurveillanceSessionID;

        SET @Favorites =
        (
            SELECT PreferenceDetail
            FROM dbo.UserPreference Laboratory
            WHERE idfUserID = @UserID
                  AND ModuleConstantID = 10508006
                  AND intRowStatus = 0
        );

        INSERT INTO @InitialResults
        SELECT m.idfMaterial
        FROM dbo.tlbMaterial m
            LEFT JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = m.idfMaterial
                   AND tom.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOUT tro
                ON tro.idfTransferOut = tom.idfTransferOut
                   AND tro.intRowStatus = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (m.idfSendToOffice = @UserOrganizationID AND m.idfSendToOffice IS NOT NULL)
                      OR (m.idfsSite = @UserSiteID AND m.idfSendToOffice IS NULL)
                  )
              AND (
                      (
                          (
                              GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                              OR @DaysFromAccessionDate IS NULL
                          )
                          AND
                          (
                              SELECT COUNT(*)
                              FROM dbo.tlbTesting t
                              WHERE t.idfMaterial = m.idfMaterial
                                    AND t.intRowStatus = 0
                                    AND t.blnNonLaboratoryTest = 0
                                    AND t.idfsTestStatus IN ( 10001003, 10001004, 10001005 ) -- In Progress, Preliminary and Not Started
                          ) = 0
                          AND @TestUnassignedIndicator IS NOT NULL
                          AND m.blnAccessioned = 1
                          AND m.datAccession IS NOT NULL
                          AND m.idfsAccessionCondition IS NOT NULL
                          AND m.idfsSampleStatus = 10015007 -- In Repository
                      )
                      OR (
                             (
                                 GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                                 OR @DaysFromAccessionDate IS NULL
                             )
                             AND
                             (
                                 SELECT COUNT(*)
                                 FROM dbo.tlbTesting t
                                 WHERE t.idfMaterial = m.idfMaterial
                                       AND t.intRowStatus = 0
                                       AND t.blnNonLaboratoryTest = 0
                                       AND t.idfsTestStatus IN ( 10001001, 10001006 ) -- Final and Amended
                             ) > 0
                             AND @TestCompletedIndicator IS NOT NULL
                         )
                      OR (
                             m.blnAccessioned = 0
                             AND m.idfsAccessionCondition IS NULL
                             AND m.idfsSampleStatus IS NULL
                             AND @TestCompletedIndicator IS NULL
                             AND @TestUnassignedIndicator IS NULL
                         )
                      OR (
                             (
                                 GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                                 OR @DaysFromAccessionDate IS NULL
                             )
                             AND
                             (
                                 SELECT COUNT(*)
                                 FROM dbo.tlbTesting t
                                 WHERE t.idfMaterial = m.idfMaterial
                                       AND t.intRowStatus = 0
                                       AND t.blnNonLaboratoryTest = 0
                                       AND t.idfsTestStatus IN ( 10001003, 10001004, 10001005 ) -- In Progress, Preliminary and Not Started
                             ) = 0
                             AND m.idfsSampleStatus <> 10015010 -- Transferred Out
                             AND @TestUnassignedIndicator IS NULL
                             AND @TestCompletedIndicator IS NULL
                         )
                      OR (
                             (
                                 GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                                 OR @DaysFromAccessionDate IS NULL
                             )
                             AND m.idfsSampleStatus = 10015010 -- Transferred Out
                             AND
                             (
                                 SELECT COUNT(tr.idfTransferOut)
                                 FROM dbo.tlbTransferOutMaterial tom
                                     INNER JOIN dbo.tlbTransferOUT tr
                                         ON tr.idfTransferOut = tom.idfTransferOut
                                 WHERE tom.idfMaterial = m.idfMaterial
                                       AND tr.intRowStatus = 0
                                       AND tr.idfsTransferStatus IN ( 10001003 ) -- Final
                             ) = 0
                             AND @TestCompletedIndicator IS NULL
                             AND @TestUnassignedIndicator IS NULL
                         ) --Transferred Out and Final
                      OR (
                             (
                                 (
                                     m.datFieldCollectionDate IS NOT NULL
                                     AND GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datFieldCollectionDate)
                                 )
                                 OR (
                                        m.datEnteringDate IS NOT NULL
                                        AND GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datEnteringDate)
                                    )
                             )
                             AND m.blnAccessioned = 0
                             AND m.idfsAccessionCondition = 10108003 -- Rejected sample
                         )
                  )
        GROUP BY m.idfMaterial;

        INSERT INTO @SampleTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000087
              AND idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @SampleStatusTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000015
              AND idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @AccessionConditionTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000110
              AND idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @Diseases
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000019
              AND idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @FunctionalAreas
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000164
              AND idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @FinalResults
        SELECT ID
        FROM @InitialResults
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = ID
        WHERE (
                  m.blnAccessioned = @AccessionedIndicator
                  AND m.idfsAccessionCondition IS NULL
                  AND m.idfsSampleStatus IS NULL
                  AND @AccessionedIndicator IS NOT NULL
              ) -- Un-accessioned samples
              OR (
                     CONVERT(NVARCHAR(MAX), FORMAT(m.datAccession, 'g', @LanguageID)) LIKE '%' + @SearchString + '%'
                     OR (
                            m.strBarcode IS NOT NULL
                            AND m.strBarcode <> ''
                            AND m.strBarcode LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strFieldBarcode IS NOT NULL
                            AND m.strFieldBarcode <> ''
                            AND m.strFieldBarcode LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strCondition IS NOT NULL
                            AND m.strCondition <> ''
                            AND m.strCondition LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strCalculatedCaseID IS NOT NULL
                            AND m.strCalculatedCaseID <> ''
                            AND m.strCalculatedCaseID LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strCalculatedHumanName IS NOT NULL
                            AND m.strCalculatedHumanName <> ''
                            AND m.strCalculatedHumanName LIKE '%' + @SearchString + '%'
                        )
                 );

        INSERT INTO @FinalResults
        SELECT ID
        FROM @InitialResults
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = ID
            INNER JOIN dbo.tlbAnimal a
                ON a.idfAnimal = m.idfAnimal
                   AND a.intRowStatus = 0
        WHERE m.idfAnimal IS NOT NULL
              AND a.strAnimalCode LIKE '%' + @SearchString + '%';

        INSERT INTO @FinalResults
        SELECT ID
        FROM @InitialResults
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = ID
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = m.idfMaterial
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbTransferOUT tro
                ON tro.idfTransferOut = tom.idfTransferOut
                   AND tro.intRowStatus = 0
        WHERE tro.strBarcode LIKE '%' + @SearchString + '%';

        IF
        (
            SELECT COUNT(*) FROM @SampleTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = ID
            WHERE EXISTS
            (
                SELECT ID FROM @SampleTypes WHERE m.idfsSampleType = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @SampleStatusTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = ID
            WHERE EXISTS
            (
                SELECT ID FROM @SampleStatusTypes WHERE m.idfsSampleStatus = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @AccessionConditionTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = ID
            WHERE (
                      m.idfsSampleStatus IS NULL
                      OR m.idfsSampleStatus = 10015007
                  ) --In Repository
                  AND EXISTS
            (
                SELECT ID
                FROM @AccessionConditionTypes
                WHERE m.idfsAccessionCondition = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @FunctionalAreas
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = ID
                INNER JOIN dbo.tlbDepartment d
                    ON d.idfDepartment = m.idfInDepartment
                       AND d.intRowStatus = 0
            WHERE m.idfInDepartment IS NOT NULL
                  AND EXISTS
            (
                SELECT ID FROM @FunctionalAreas WHERE d.idfsDepartmentName = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @Diseases
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = ID
            WHERE m.DiseaseID IS NOT NULL
                  AND EXISTS
            (
                SELECT ID FROM @Diseases WHERE m.DiseaseID = ID
            );

            INSERT INTO @FinalResults
            SELECT ID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = ID
                INNER JOIN dbo.tlbMonitoringSession ms
                    ON ms.idfMonitoringSession = m.idfMonitoringSession
                       AND ms.intRowStatus = 0
                INNER JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                    ON msd.idfMonitoringSession = ms.idfMonitoringSession
                       AND msd.intRowStatus = 0
            WHERE m.idfMonitoringSession IS NOT NULL
                  AND m.DiseaseID IS NULL
                  AND EXISTS
            (
                SELECT ID FROM @Diseases WHERE msd.idfsDiagnosis = ID
            );
        END

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @FinalResults
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = m.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE m.intRowStatus = 0
                  AND oa.idfsObjectOperation = 10059003 -- Read permission
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        DELETE res
        FROM @FinalResults res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.ID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = m.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003 -- Read permission
              AND NOT EXISTS (
                              SELECT * FROM @UserSitePermissions WHERE SiteID = m.idfsSite
              );

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        DELETE FROM @FinalResults
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = m.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        DECLARE @UnaccessionedSampleCount AS INT = (
                                                       SELECT COUNT(m.idfMaterial)
                                                       FROM @FinalResults res
                                                           INNER JOIN dbo.tlbMaterial m
                                                               ON m.idfMaterial = res.ID
                                                       WHERE (
                                                                 m.blnAccessioned = 0
                                                                 AND m.idfsAccessionCondition IS NULL
                                                             )
                                                   );

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        SELECT m.idfMaterial AS SampleID,
               m.strBarcode AS EIDSSLaboratorySampleID,
               CASE
                   WHEN f.SampleID IS NULL THEN
                       0
                   ELSE
                       1
               END AS FavoriteIndicator,
               m.idfRootMaterial AS RootSampleID,
               m.idfParentMaterial AS ParentSampleID,
               m.idfsSampleType AS SampleTypeID,
               sampleType.name AS SampleTypeName,
               m.idfHuman AS HumanID,
               m.strCalculatedHumanName AS PatientOrFarmOwnerName,
               m.idfSpecies AS SpeciesID,
               m.idfAnimal AS AnimalID,
               a.strAnimalCode AS EIDSSAnimalID,
               m.idfVector AS VectorID,
               m.idfMonitoringSession AS MonitoringSessionID,
               m.idfVectorSurveillanceSession AS VectorSessionID,
               m.idfHumanCase AS HumanDiseaseReportID,
               m.idfVetCase AS VeterinaryDiseaseReportID,
               m.strCalculatedCaseID AS EIDSSReportOrSessionID,
               ISNULL(   IIF(
                            (
                                SELECT COUNT(t2.idfTesting)
                                FROM dbo.tlbTesting t2
                                WHERE t2.idfsTestStatus IN (   10001001,
                                                                        --Final
                                                               10001006 --Amended
                                                           )
                                      AND t2.idfMaterial = m.idfMaterial
                                      AND t2.intRowStatus = 0
                                      AND t2.blnNonLaboratoryTest = 0
                            ) > 0,
                            1,
                            0),
                         0
                     ) AS TestCompletedIndicator,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       CAST(m.DiseaseID AS NVARCHAR(MAX))
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseIdentifiers
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseIdentifiers
                   ELSE
                       ''
               END AS DiseaseID,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       diseaseName.name
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseNames
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseNames
                   ELSE
                       ''
               END AS DiseaseName,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       diseaseName.name
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DisplayDiseaseNames
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DisplayDiseaseNames
                   ELSE
                       ''
               END AS DisplayDiseaseName,
               m.idfInDepartment AS FunctionalAreaID,
               functionalArea.name AS FunctionalAreaName,
               m.idfSubdivision AS FreezerSubdivisionID,
               m.StorageBoxPlace,
               m.datFieldCollectionDate AS CollectionDate,
               m.idfFieldCollectedByPerson AS CollectedByPersonID,
               m.idfFieldCollectedByOffice AS CollectedByOrganizationID,
               m.datFieldSentDate AS SentDate,
               m.idfSendToOffice AS SentToOrganizationID,
               m.idfsSite AS SiteID,
               m.strFieldBarcode AS EIDSSLocalOrFieldSampleID,
               m.datEnteringDate AS EnteredDate,
               m.datOutOfRepositoryDate AS OutOfRepositoryDate,
               m.idfMarkedForDispositionByPerson AS MarkedForDispositionByPersonID,
               m.blnReadOnly AS ReadOnlyIndicator,
               m.blnAccessioned AS AccessionIndicator,
               m.datAccession AS AccessionDate,
               m.idfsAccessionCondition AS AccessionConditionTypeID,
               (CASE
                    WHEN m.blnAccessioned = 0
                         AND m.idfsAccessionCondition IS NULL THEN
                        'Un-accessioned'
                    WHEN m.idfsSampleStatus IS NULL THEN
                        accessionConditionType.name
                    WHEN m.idfsSampleStatus = 10015007 --In Repository
               THEN
                        accessionConditionType.name
                    ELSE
                        sampleStatusType.name
                END
               ) AS AccessionConditionOrSampleStatusTypeName,
               m.idfAccesionByPerson AS AccessionByPersonID,
               m.idfsSampleStatus AS SampleStatusTypeID,
               m.datSampleStatusDate AS SampleStatusDate,
               m.strCondition AS AccessionComment,
               m.idfsDestructionMethod AS DestructionMethodTypeID,
               m.datDestructionDate AS DestructionDate,
               m.idfDestroyedByPerson AS DestroyedByPersonID,
               ISNULL(
               (
                   SELECT COUNT(NULLIF(t4.idfTesting, 0))
                   FROM dbo.tlbTesting t4
                   WHERE t4.idfsTestStatus IN (   10001003,
                                                           --In Progress
                                                  10001004 --Preliminary
                                              )
                         AND t4.idfMaterial = m.idfMaterial
                         AND t4.intRowStatus = 0
                         AND t4.blnNonLaboratoryTest = 0
               ),
               0
                     ) AS TestAssignedCount,
               ISNULL(
               (
                   SELECT COUNT(NULLIF(tom2.idfTransferOUT, 0))
                   FROM dbo.tlbTransferOutMaterial tom2
                   WHERE tom2.idfMaterial = m.idfMaterial
                         AND tom2.intRowStatus = 0
               ),
               0
                     ) AS TransferredCount,
               m.strNote AS Comment,
               m.idfsCurrentSite AS CurrentSiteID,
               m.idfsBirdStatus AS BirdStatusTypeID,
               m.idfMainTest AS MainTestID,
               m.idfsSampleKind AS SampleKindTypeID,
               m.PreviousSampleStatusID AS PreviousSampleStatusTypeID,
               m.LabModuleSourceIndicator,
               m.intRowStatus AS RowStatus,
               1 AS ReadPermissionIndicator,
               1 AS AccessToPersonalDataPermissionIndicator,
               1 AS AccessToGenderAndAgeDataPermissionIndicator,
               1 AS WritePermissionIndicator,
               1 AS DeletePermissionIndicator,
               0 AS RowAction,
               0 AS RowSelectionIndicator,
               COUNT(*) OVER () AS TotalRowCount,
               @UnaccessionedSampleCount AS UnaccessionedSampleCount
        FROM @FinalResults res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.ID
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                ON sampleType.idfsReference = m.idfsSampleType
            LEFT JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = m.idfMaterial
                   AND tom.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOUT tro
                ON tro.idfTransferOut = tom.idfTransferOut
                   AND tro.intRowStatus = 0
            LEFT JOIN dbo.tlbAnimal a
                ON a.idfAnimal = m.idfAnimal
                   AND a.intRowStatus = 0
            LEFT JOIN @MonitoringSessionDiseases msDiseases
                ON msDiseases.ID = m.idfMonitoringSession
            LEFT JOIN @VectorSessionDiseases vsDiseases
                ON vsDiseases.ID = m.idfVectorSurveillanceSession
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) diseaseName
                ON diseaseName.idfsReference = m.DiseaseID
            LEFT JOIN dbo.tlbDepartment d
                ON d.idfDepartment = m.idfInDepartment
                   AND d.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000164) functionalArea
                ON functionalArea.idfsReference = d.idfsDepartmentName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                ON sampleStatusType.idfsReference = m.idfsSampleStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                ON accessionConditionType.idfsReference = m.idfsAccessionCondition;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_TAB_COUNTS_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_TAB_COUNTS_GETList
--
-- Description:	Gets a list of counts for each laboratory module tab: samples (un-accessioned), 
-- testing (in progress tests), transferred, my favorites, batches (in progress) and approvals.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     10/18/2021 Initial release.
-- Stephen Long     12/21/2021 Removed filtration rules as these are the default counts.
-- Stephen Long     02/10/2022 Added send to office on transfer count.
-- Stephen Long     04/15/2022 Fix to account for filtration counts.
-- Stephen Long     07/26/2022 Simplified where criteria on testing in progress count.
-- Stephen Long     08/10/2022 Corrected where criteria on batches in progress count; include only
--                             batches with at least one test.
-- Stephen Long     10/11/2022 Added check for closed batch test status to display test records 
--                             ready for validation.
-- Stephen Long     10/23/2022 Added non-laboratory test indicator to where criteria on test 
--                             records for approval.
-- Stephen Long     01/03/2023 Added check for user's site identifier when the sent to organization 
--                             is not present.
-- Stephen Long     01/14/2023 Updated for site filtration queries.
-- 
-- Testing Code:
/*
DECLARE	@return_value int

EXEC	@return_value = [dbo].[USP_LAB_TAB_COUNTS_GETList]
		@DaysFromAccessionDate = 60,
		@UserID = 161287150000872, --rykermase
		@UserEmployeeID = 420664190000872,
		@UserSiteID = 864,
		@UserOrganizationID = 758210000000,
		@UserSiteGroupID = NULL

SELECT	'Return Value' = @return_value

GO
*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_TAB_COUNTS_GETList]
(
    @DaysFromAccessionDate INT,
    @UserID BIGINT,
    @UserEmployeeID BIGINT,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT = NULL,
    @UserSiteGroupID BIGINT = NULL
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @SamplesUnaccessionedCount INT = 0,
            @TestingInProgressCount INT = 0,
            @TransferredCount INT = 0,
            @MyFavoritesCount INT = 0,
            @BatchesInProgressCount INT = 0,
            @ApprovalsCount INT = 0;
    DECLARE @Results TABLE (ID BIGINT NOT NULL);
    DECLARE @FinalResults TABLE (ID BIGINT NOT NULL);
    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @Favorites XML;
    DECLARE @UserEmployeeGroupID BIGINT = (
                                              SELECT TOP 1
                                                  egm.idfEmployeeGroup
                                              FROM dbo.tlbEmployeeGroupMember egm
                                              WHERE egm.idfEmployee = @UserEmployeeID
                                                    AND egm.intRowStatus = 0
                                          );

    BEGIN TRY
        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        -- =======================================================================================
        -- Samples Tab Unaccessioned Count
        -- =======================================================================================
        INSERT INTO @Results
        SELECT m.idfMaterial
        FROM dbo.tlbMaterial m
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.idfSendToOffice = @UserOrganizationID
                          AND m.idfSendToOffice IS NOT NULL
                      )
                      OR (
                             m.idfsSite = @UserSiteID
                             AND m.idfSendToOffice IS NULL
                         )
                  )
              AND m.blnAccessioned = 0
              AND m.idfsAccessionCondition IS NULL
              AND m.idfsSampleStatus IS NULL;

        -- =======================================================================================
        -- CONFIGURABLE SITE FILTRATION RULES
        -- 
        -- Apply configurable site filtration rules for use case SAUC34. Some of these rules may 
        -- overlap the non-configurable rules.
        -- =======================================================================================
        --
        -- Apply at the user's site group level, granted by a site group.
        --
        IF @UserOrganizationID IS NOT NULL --First-level sites (central data repository, general data repository, etc.) do not filter results.
        BEGIN
            INSERT INTO @Results
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = m.idfsSite
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = @UserSiteGroupID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
            WHERE m.intRowStatus = 0
                  AND m.idfsSampleType <> 10320001 --Unknown
                  AND m.blnAccessioned = 0
                  AND m.idfsAccessionCondition IS NULL
                  AND m.idfsSampleStatus IS NULL
                  AND @UserSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site level, granted by a site group.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = m.idfsSite
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
            WHERE m.intRowStatus = 0
                  AND m.idfsSampleType <> 10320001 --Unknown
                  AND m.blnAccessioned = 0
                  AND m.idfsAccessionCondition IS NULL
                  AND m.idfsSampleStatus IS NULL
                  AND ar.GrantingActorSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's employee group level, granted by a site group.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = m.idfsSite
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
            WHERE m.intRowStatus = 0
                  AND m.idfsSampleType <> 10320001 --Unknown
                  AND m.blnAccessioned = 0
                  AND m.idfsAccessionCondition IS NULL
                  AND m.idfsSampleStatus IS NULL
                  AND ar.GrantingActorSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's ID level, granted by a site group.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = m.idfsSite
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
            WHERE m.intRowStatus = 0
                  AND m.idfsSampleType <> 10320001 --Unknown
                  AND m.blnAccessioned = 0
                  AND m.idfsAccessionCondition IS NULL
                  AND m.idfsSampleStatus IS NULL
                  AND ar.GrantingActorSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site group level, granted by a site.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tflSiteToSiteGroup sgs
                    ON sgs.idfSiteGroup = @UserSiteGroupID
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
            WHERE m.intRowStatus = 0
                  AND m.idfsSampleType <> 10320001 --Unknown
                  AND m.blnAccessioned = 0
                  AND m.idfsAccessionCondition IS NULL
                  AND m.idfsSampleStatus IS NULL
                  AND @UserSiteGroupID IS NOT NULL
                  AND sgs.idfsSite = m.idfsSite;

            -- 
            -- Apply at the user's site level, granted by a site.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial
            FROM dbo.AccessRule ar
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.tlbMaterial m
                    ON m.intRowStatus = 0
            WHERE ar.GrantingActorSiteID IS NOT NULL
                  AND m.idfsSampleType <> 10320001 --Unknown
                  AND m.blnAccessioned = 0
                  AND m.idfsAccessionCondition IS NULL
                  AND m.idfsSampleStatus IS NULL
                  AND m.idfsSite = ar.GrantingActorSiteID;

            -- Apply at the user's employee group level, granted by a site.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial
            FROM dbo.AccessRuleActor ara
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
                       AND ar.GrantingActorSiteID IS NOT NULL
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfsSite = ar.GrantingActorSiteID
                       AND m.intRowStatus = 0
            WHERE ara.ActorEmployeeGroupID = @UserEmployeeGroupID
                  AND ara.intRowStatus = 0
                  AND m.idfsSampleType <> 10320001 --Unknown
                  AND m.blnAccessioned = 0
                  AND m.idfsAccessionCondition IS NULL
                  AND m.idfsSampleStatus IS NULL
                  AND m.idfsSite = ar.GrantingActorSiteID;

            -- 
            -- Apply at the user's ID level, granted by a site.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial
            FROM dbo.AccessRule ar
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.tlbMaterial m
                    ON m.intRowStatus = 0
            WHERE ar.GrantingActorSiteID IS NOT NULL
                  AND m.idfsSampleType <> 10320001 --Unknown
                  AND m.blnAccessioned = 0
                  AND m.idfsAccessionCondition IS NULL
                  AND m.idfsSampleStatus IS NULL
                  AND m.idfsSite = ar.GrantingActorSiteID;
        END;

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = m.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE m.intRowStatus = 0
                  AND oa.idfsObjectOperation = 10059003 -- Read permission
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.ID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = m.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003 -- Read permission
              AND NOT EXISTS
        (
            SELECT * FROM @UserSitePermissions WHERE SiteID = m.idfsSite
        );

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = m.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        INSERT INTO @FinalResults
        SELECT ID
        FROM @Results res
        GROUP BY ID;

        SET @SamplesUnaccessionedCount =
        (
            SELECT COUNT(*) FROM @FinalResults
        );

        -- =======================================================================================
        -- Testing Tab In Progress Count
        -- =======================================================================================
        DELETE FROM @Results;
        DELETE FROM @FinalResults;

        INSERT INTO @Results
        SELECT t.idfTesting
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND t.idfsTestName IS NOT NULL
              AND t.idfsTestStatus = 10001003 --In Progress
              AND t.blnNonLaboratoryTest = 0
              AND (
                      (
                          m.idfSendToOffice = @UserOrganizationID
                          AND m.idfSendToOffice IS NOT NULL
                      )
                      OR (
                             m.idfsSite = @UserSiteID
                             AND m.idfSendToOffice IS NULL
                         )
                  )
              AND (
                      GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                      OR @DaysFromAccessionDate IS NULL
                  )
              AND (
                      t.idfBatchTest IS NULL
                      OR (
                             t.idfBatchTest IS NOT NULL
                             AND b.idfsBatchStatus = 10001001 --Closed
                         )
                  );

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT t.idfTesting
            FROM dbo.tlbTesting t
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
                       AND m.intRowStatus = 0
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = m.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE t.intRowStatus = 0
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup -- Default role
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbTesting t
                ON t.idfTesting = res.ID
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = m.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003 -- Read permission
              AND NOT EXISTS
        (
            SELECT * FROM @UserSitePermissions WHERE SiteID = m.idfsSite
        );

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT t.idfTesting
            FROM dbo.tlbTesting t
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
                       AND m.intRowStatus = 0
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = m.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        SET @TestingInProgressCount =
        (
            SELECT COUNT(*) FROM @Results
        );

        -- =======================================================================================
        -- Transferred Tab Count
        -- =======================================================================================
        DELETE FROM @Results;
        DELETE FROM @FinalResults;

        INSERT INTO @Results
        SELECT tr.idfTransferOut
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
        WHERE (
                  tr.idfSendFromOffice = @UserOrganizationID
                  OR tr.idfSendToOffice = @UserOrganizationID
              )
              AND (tr.idfsTransferStatus IN (   10001003, --In Progress
                                                10001006  --Amended
                                            )
                  )
              AND tr.intRowStatus = 0;

        -- =======================================================================================
        -- CONFIGURABLE SITE FILTRATION RULES
        -- 
        -- Apply configurable site filtration rules for use case SAUC34. Some of these rules may 
        -- overlap the non-configurable rules.
        -- =======================================================================================
        --
        -- Apply at the user's site group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = tr.idfsSite
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = @UserSiteGroupID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule ar
                ON ar.AccessRuleID = ara.AccessRuleID
                   AND ar.intRowStatus = 0
        WHERE tr.intRowStatus = 0
              AND @UserSiteGroupID IS NOT NULL
              AND ar.GrantingActorSiteGroupID IS NOT NULL
              AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = tr.idfsSite
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule ar
                ON ar.AccessRuleID = ara.AccessRuleID
                   AND ar.intRowStatus = 0
        WHERE tr.intRowStatus = 0
              AND ar.GrantingActorSiteGroupID IS NOT NULL
              AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's employee group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = tr.idfsSite
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule ar
                ON ar.AccessRuleID = ara.AccessRuleID
                   AND ar.intRowStatus = 0
        WHERE tr.intRowStatus = 0
              AND ar.GrantingActorSiteGroupID IS NOT NULL
              AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's ID level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = tr.idfsSite
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule ar
                ON ar.AccessRuleID = ara.AccessRuleID
                   AND ar.intRowStatus = 0
        WHERE tr.intRowStatus = 0
              AND ar.GrantingActorSiteGroupID IS NOT NULL
              AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup sgs
                ON sgs.idfSiteGroup = @UserSiteGroupID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule ar
                ON ar.AccessRuleID = ara.AccessRuleID
                   AND ar.intRowStatus = 0
        WHERE tr.intRowStatus = 0
              AND @UserSiteGroupID IS NOT NULL
              AND sgs.idfsSite = tr.idfsSite;

        -- 
        -- Apply at the user's site level, granted by a site.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut
        FROM dbo.AccessRule ar
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.tlbTransferOUT tr
                ON tr.intRowStatus = 0
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
        WHERE ar.GrantingActorSiteID IS NOT NULL
              AND tr.idfsSite = ar.GrantingActorSiteID;

        -- 
        -- Apply at the user's employee group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut
        FROM dbo.AccessRuleActor ara
            INNER JOIN dbo.AccessRule ar
                ON ar.AccessRuleID = ara.AccessRuleID
                   AND ar.intRowStatus = 0
                   AND ar.GrantingActorSiteID IS NOT NULL
            INNER JOIN dbo.tlbTransferOUT tr
                ON tr.intRowStatus = 0
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
        WHERE ara.ActorEmployeeGroupID = @UserEmployeeGroupID
              AND ara.intRowStatus = 0
              AND tr.idfsSite = ar.GrantingActorSiteID;

        -- 
        -- Apply at the user's ID level, granted by a site.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut
        FROM dbo.AccessRule ar
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.tlbTransferOUT tr
                ON tr.intRowStatus = 0
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
        WHERE ar.GrantingActorSiteID IS NOT NULL
              AND tr.idfsSite = ar.GrantingActorSiteID;

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT tr.idfTransferOut
            FROM dbo.tlbTransferOUT tr
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = tr.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE tr.intRowStatus = 0
                  AND oa.idfsObjectOperation = 10059003 -- Read permission
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbTransferOUT tr
                ON tr.idfTransferOut = res.ID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = tr.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003 -- Read permission
              AND NOT EXISTS
        (
            SELECT * FROM @UserSitePermissions WHERE SiteID = tr.idfsSite
        );

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT tr.idfTransferOut
            FROM dbo.tlbTransferOUT tr
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = tr.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        INSERT INTO @FinalResults
        SELECT ID
        FROM @Results res
            INNER JOIN dbo.tlbTransferOUT tr
                ON tr.idfTransferOut = res.ID
        WHERE tr.intRowStatus = 0
              AND tr.idfsTransferStatus IN (   10001003, --In Progress
                                               10001006  --Amended
                                           )
        GROUP BY ID;

        SET @TransferredCount =
        (
            SELECT COUNT(*) FROM @FinalResults res
        );

        -- =======================================================================================
        -- My Favorites Tab Count
        -- =======================================================================================
        DELETE FROM @Results;
        DELETE FROM @FinalResults;

        SET @Favorites =
        (
            SELECT PreferenceDetail
            FROM dbo.UserPreference Laboratory
            WHERE idfUserID = @UserID
                  AND ModuleConstantID = 10508006
                  AND intRowStatus = 0
        );

        INSERT INTO @Results
        SELECT m.idfMaterial
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
        WHERE m.intRowStatus = 0;

        -- =======================================================================================
        -- CONFIGURABLE SITE FILTRATION RULES
        -- 
        -- Apply configurable site filtration rules for use case SAUC34. Some of these rules may 
        -- overlap the non-configurable rules.
        -- =======================================================================================
        --
        -- Apply at the user's site group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = @UserSiteGroupID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
        WHERE m.intRowStatus = 0
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
        WHERE m.intRowStatus = 0
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's employee group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
        WHERE m.intRowStatus = 0
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's ID level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
        WHERE m.intRowStatus = 0
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            INNER JOIN dbo.tflSiteToSiteGroup sgs
                ON sgs.idfSiteGroup = @UserSiteGroupID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
        WHERE m.intRowStatus = 0
              AND sgs.idfsSite = m.idfsSite;

        -- 
        -- Apply at the user's site level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
        WHERE m.intRowStatus = 0
              AND a.GrantingActorSiteID = m.idfsSite;

        -- 
        -- Apply at the user's employee group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
        WHERE m.intRowStatus = 0
              AND a.GrantingActorSiteID = m.idfsSite;

        -- 
        -- Apply at the user's ID level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
        WHERE m.intRowStatus = 0
              AND a.GrantingActorSiteID = m.idfsSite;

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = m.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE m.intRowStatus = 0
                  AND oa.idfsObjectOperation = 10059003 -- Read permission
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.ID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = m.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003 -- Read permission
              AND NOT EXISTS
        (
            SELECT * FROM @UserSitePermissions WHERE SiteID = m.idfsSite
        );

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = m.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        INSERT INTO @FinalResults
        SELECT ID
        FROM @Results
        GROUP BY ID;

        SET @MyFavoritesCount =
        (
            SELECT COUNT(*) FROM @FinalResults
        );

        -- =======================================================================================
        -- Batches Tab Count
        -- =======================================================================================
        DELETE FROM @Results;
        DELETE FROM @FinalResults;

        INSERT INTO @Results
        SELECT b.idfBatchTest
        FROM dbo.tlbBatchTest b
        WHERE b.idfPerformedByOffice = @UserOrganizationID
              AND b.idfsSite = @UserSiteID
              AND b.intRowStatus = 0
              AND
              (
                  SELECT COUNT(t.idfTesting)
                  FROM dbo.tlbTesting t
                  WHERE t.idfBatchTest = b.idfBatchTest
              ) > 0;

        -- =======================================================================================
        -- CONFIGURABLE SITE FILTRATION RULES
        -- 
        -- Apply configurable site filtration rules for use case SAUC34. Some of these rules may 
        -- overlap the non-configurable rules.
        -- =======================================================================================
        --
        -- Apply at the user's site group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest
        FROM dbo.tlbBatchTest b
            INNER JOIN dbo.tflSiteToSiteGroup AS grantingSGS
                ON grantingSGS.idfsSite = b.idfsSite
            INNER JOIN dbo.tstUserTable AS u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor AS ara
                ON ara.ActorSiteGroupID = @UserSiteGroupID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule AS ar
                ON ar.AccessRuleID = ara.AccessRuleID
                   AND ar.intRowStatus = 0
        WHERE b.intRowStatus = 0
              AND
              (
                  SELECT COUNT(t.idfTesting)
                  FROM dbo.tlbTesting t
                  WHERE t.idfBatchTest = b.idfBatchTest
              ) > 0
              AND @UserSiteGroupID IS NOT NULL
              AND ar.GrantingActorSiteGroupID IS NOT NULL
              AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest
        FROM dbo.tlbBatchTest b
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = b.idfsSite
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule ar
                ON ar.AccessRuleID = ara.AccessRuleID
                   AND ar.intRowStatus = 0
        WHERE b.intRowStatus = 0
              AND
              (
                  SELECT COUNT(t.idfTesting)
                  FROM dbo.tlbTesting t
                  WHERE t.idfBatchTest = b.idfBatchTest
              ) > 0
              AND ar.GrantingActorSiteGroupID IS NOT NULL
              AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's employee group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest
        FROM dbo.tlbBatchTest b
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = b.idfsSite
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule ar
                ON ar.AccessRuleID = ara.AccessRuleID
                   AND ar.intRowStatus = 0
        WHERE b.intRowStatus = 0
              AND
              (
                  SELECT COUNT(t.idfTesting)
                  FROM dbo.tlbTesting t
                  WHERE t.idfBatchTest = b.idfBatchTest
              ) > 0
              AND ar.GrantingActorSiteGroupID IS NOT NULL
              AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's ID level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest
        FROM dbo.tlbBatchTest b
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = b.idfsSite
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule ar
                ON ar.AccessRuleID = ara.AccessRuleID
                   AND ar.intRowStatus = 0
        WHERE b.intRowStatus = 0
              AND
              (
                  SELECT COUNT(t.idfTesting)
                  FROM dbo.tlbTesting t
                  WHERE t.idfBatchTest = b.idfBatchTest
              ) > 0
              AND ar.GrantingActorSiteGroupID IS NOT NULL
              AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest
        FROM dbo.tlbBatchTest b
            INNER JOIN dbo.tflSiteToSiteGroup sgs
                ON sgs.idfSiteGroup = @UserSiteGroupID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule ar
                ON ar.AccessRuleID = ara.AccessRuleID
                   AND ar.intRowStatus = 0
        WHERE b.intRowStatus = 0
              AND
              (
                  SELECT COUNT(t.idfTesting)
                  FROM dbo.tlbTesting t
                  WHERE t.idfBatchTest = b.idfBatchTest
              ) > 0
              AND @UserSiteGroupID IS NOT NULL
              AND sgs.idfsSite = b.idfsSite;

        -- 
        -- Apply at the user's site level, granted by a site.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest
        FROM dbo.AccessRule ar
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.tlbBatchTest b
                ON b.intRowStatus = 0
        WHERE ar.GrantingActorSiteID IS NOT NULL
              AND b.idfsSite = ar.GrantingActorSiteID
              AND
              (
                  SELECT COUNT(t.idfTesting)
                  FROM dbo.tlbTesting t
                  WHERE t.idfBatchTest = b.idfBatchTest
              ) > 0;

        -- 
        -- Apply at the user's employee group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest
        FROM dbo.AccessRule ar
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.tlbBatchTest b
                ON b.intRowStatus = 0
        WHERE ar.GrantingActorSiteID IS NOT NULL
              AND b.idfsSite = ar.GrantingActorSiteID
              AND
              (
                  SELECT COUNT(t.idfTesting)
                  FROM dbo.tlbTesting t
                  WHERE t.idfBatchTest = b.idfBatchTest
              ) > 0;

        -- 
        -- Apply at the user's ID level, granted by a site.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest
        FROM dbo.AccessRule ar
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.tlbBatchTest b
                ON b.intRowStatus = 0
        WHERE ar.GrantingActorSiteID IS NOT NULL
              AND b.idfsSite = ar.GrantingActorSiteID
              AND
              (
                  SELECT COUNT(t.idfTesting)
                  FROM dbo.tlbTesting t
                  WHERE t.idfBatchTest = b.idfBatchTest
              ) > 0;

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT b.idfBatchTest
            FROM dbo.tlbBatchTest b
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = b.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE b.intRowStatus = 0
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup -- Default role
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = res.ID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = b.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003 -- Read permission
              AND NOT EXISTS
        (
            SELECT * FROM @UserSitePermissions WHERE SiteID = b.idfsSite
        );

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT b.idfBatchTest
            FROM dbo.tlbBatchTest b
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = b.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        INSERT INTO @FinalResults
        SELECT ID
        FROM @Results res
            INNER JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = res.ID
        WHERE b.idfsBatchStatus = 10001003 --In Progress
        GROUP BY ID;

        SET @BatchesInProgressCount =
        (
            SELECT COUNT(*) FROM @FinalResults
        );

        -- =======================================================================================
        -- Approvals Tab Count
        -- =======================================================================================
        DELETE FROM @Results;
        DELETE FROM @FinalResults;

        INSERT INTO @Results
        SELECT m.idfMaterial
        FROM dbo.tlbMaterial m
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.idfsSampleStatus IN (   10015002, --Marked for Deletion 
                                            10015003
                                        ) --Marked for Destruction
              AND m.idfSendToOffice = @UserOrganizationID;

        INSERT INTO @Results
        SELECT t.idfTesting
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON t.idfMaterial = m.idfMaterial
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestStatus IN (   10001004, --Preliminary 
                                          10001008
                                      ) --Marked for Deletion 
              AND (
                      t.idfBatchTest IS NULL
                      OR (
                             t.idfBatchTest IS NOT NULL
                             AND b.idfsBatchStatus = 10001001
                         ) -- Closed
                  )
              AND m.idfSendToOffice = @UserOrganizationID;

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = m.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE m.intRowStatus = 0
                  AND oa.idfsObjectOperation = 10059003 -- Read permission
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup
        );

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.ID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = m.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003; -- Read permission

        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = m.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        SET @ApprovalsCount =
        (
            SELECT COUNT(ID) FROM @Results
        );

        SELECT @SamplesUnaccessionedCount AS SamplesTabCount,
               @TestingInProgressCount AS TestingTabCount,
               @TransferredCount AS TransferredTabCount,
               @MyFavoritesCount AS MyFavoritesTabCount,
               @BatchesInProgressCount AS BatchesTabCount,
               @ApprovalsCount AS ApprovalsTabCount;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_TEST_ADVANCED_SEARCH_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_TEST_ADVANCED_SEARCH_GETList
--
-- Description:	Get laboratory tests list for the various lab use cases.
--
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     02/21/2019 Initial release.
-- Stephen Long     03/28/2019 Added EIDSS local/field sample ID field.
-- Stephen Long     04/27/2019 Added EIDSS batch ID, observation ID and batch status type name for 
--                             additional test information.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     10/07/2019 Removed @CampaignID variable; just use EIDSSReportCampaignSessionID.
-- Stephen Long     01/22/2020 Converted site ID to site list for site filtration.
-- Stephen Long     02/03/2020 Added non-laboratory test indicator where clause.
-- Stephen Long     03/11/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     04/16/2020 Added test list parameter and where clause criteria.
-- Stephen Long     04/26/2020 Added sent to organization ID to the model.
-- Stephen Long     06/06/2020 Added batch status type ID to the model.
-- Stephen Long     08/25/2020 Added criteria to ignore time on date betweens.
-- Stephen Long     09/02/2020 Changed accessioned indicator from int to varchar to handle searches
--                             with un-accessioned and accessioned samples in the same query.
-- Stephen Long     10/30/2020 Remove unneeded joins.
-- Stephen Long     11/28/2020 Added configurable site filtration rules.
-- Stephen Long     12/23/2020 Correction on accession indicator list where criteria.
-- Stephen Long     12/31/2020 Change function on reference data to handle inactive records.
-- Stephen Long     01/03/2020 Added option recompile to select queries.
-- Stephen Long     01/21/2021 Changed counts to use group by in sub-query instead of count 
--                             distinct and added with recompile to handle number of nullable 
--                             parameters.
-- Stephen Long     01/24/2021 Correct where criteria on accession indicator list.
-- Mark Wilson		08/20/2021 Join tlbMonitoringSessionToDiagnosis to get diagnosis
-- Stephen Long     09/25/2021 Added new pagination and order by.
-- Stephen Long     10/14/2021 Changed report or session type ID to bigint.
-- Stephen Long     12/08/2021 Changed pagination logic and removed option recompile.
-- Stephen Long     12/15/2021 Added configurable filtration rules.
-- Stephen Long     03/24/2022 Removed primary key from final results table variable.
-- Mike Kornegay	06/14/2022 Added new additional SessionCategoryID for Vet Avian / Vet Livestock 
--                             breakout.
-- Stephen Long     07/26/2022 Changed from repair to reference repair function.
-- Stephen Long     08/09/2022 Added batch test association indicator parameter.
-- Stephen Long     08/12/2022 Removed where criteria for surveillance type of both; de-activated 
--                             base reference record.
-- Stephen Long     08/26/2022 Added additional checks on accession and entered date range checks.
-- Stephen Long     10/18/2022 Fix on external test indicator to use the field on the testing 
--                             table.
-- Stephen Long     10/21/2022 Added human disease report, veterinary disease report, monitoring 
--                             session and vector identifiers to the query.
-- Stephen Long     12/29/2022 Removed sorting and pagination logic; business decision so records
--                             pending save could be shown at the top of the list prior to saving.
-- Stephen Long     01/11/2023 Updated for site filtration queries.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_TEST_ADVANCED_SEARCH_GETList]
(
    @LanguageID NVARCHAR(50),
    @ReportOrSessionTypeID BIGINT = NULL,
    @SurveillanceTypeID BIGINT = NULL,
    @SampleStatusTypeList VARCHAR(MAX) = NULL,
    @AccessionedIndicatorList VARCHAR(3) = NULL,
    @EIDSSLocalOrFieldSampleID NVARCHAR(200) = NULL,
    @EIDSSReportCampaignOrSessionID NVARCHAR(200) = NULL,
    @SentToOrganizationID BIGINT = NULL,
    @TransferredToOrganizationID BIGINT = NULL,
    @EIDSSTransferID NVARCHAR(200) = NULL,
    @ResultsReceivedFromID BIGINT = NULL,
    @DateFrom DATETIME = NULL,
    @DateTo DATETIME = NULL,
    @EIDSSLaboratorySampleID NVARCHAR(200) = NULL,
    @SampleTypeID BIGINT = NULL,
    @TestNameTypeID BIGINT = NULL,
    @DiseaseID BIGINT = NULL,
    @TestStatusTypeID BIGINT = NULL,
    @TestResultTypeID BIGINT = NULL,
    @TestResultDateFrom DATETIME = NULL,
    @TestResultDateTo DATETIME = NULL,
    @PatientName NVARCHAR(200) = NULL,
    @FarmOwnerName NVARCHAR(200) = NULL,
    @SpeciesTypeID BIGINT = NULL,
    @TestList VARCHAR(MAX) = NULL,
    @BatchTestAssociationIndicator BIT = NULL,
    @UserID BIGINT,
    @UserEmployeeID BIGINT,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT = NULL,
    @UserSiteGroupID BIGINT = NULL
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @ReturnMessage VARCHAR(MAX) = 'SUCCESS',
            @ReturnCode INT = 0,
            @InProgressCount INT;
    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL INDEX IDX_1,
        TestStatusTypeID BIGINT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID BIGINT NOT NULL INDEX IDX_1,
        TestStatusTypeID BIGINT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @Favorites XML;

    BEGIN TRY
        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        SET @Favorites =
        (
            SELECT PreferenceDetail
            FROM dbo.UserPreference Laboratory
            WHERE idfUserID = @UserID
                  AND ModuleConstantID = 10508006
                  AND intRowStatus = 0
        );

        INSERT INTO @Results
        SELECT t.idfTesting,
               t.idfsTestStatus,
               1,
               1,
               1,
               1,
               1
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestName IS NOT NULL
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      m.idfSendToOffice = @SentToOrganizationID
                      OR @SentToOrganizationID IS NULL
                  )
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  );

        -- =======================================================================================
        -- CONFIGURABLE FILTRATION RULES
        -- 
        -- Apply configurable filtration rules for use case SAUC34. Some of these rules may 
        -- overlap the non-configurable rules.
        -- =======================================================================================
        --
        -- Apply at the user's site group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT t.idfTesting,
               t.idfsTestStatus,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                ON userSiteGroup.idfsSite = @UserSiteID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestName IS NOT NULL
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT t.idfTesting,
               t.idfsTestStatus,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestName IS NOT NULL
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's employee group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT t.idfTesting,
               t.idfsTestStatus,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestName IS NOT NULL
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's ID level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT t.idfTesting,
               t.idfsTestStatus,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestName IS NOT NULL
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT t.idfTesting,
               t.idfsTestStatus,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup sgs
                ON sgs.idfsSite = @UserSiteID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestName IS NOT NULL
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND sgs.idfsSite = m.idfsSite;

        -- 
        -- Apply at the user's site level, granted by a site.
        --
        INSERT INTO @Results
        SELECT t.idfTesting,
               t.idfsTestStatus,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestName IS NOT NULL
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND a.GrantingActorSiteID = m.idfsSite;

        -- 
        -- Apply at the user's employee group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT t.idfTesting,
               t.idfsTestStatus,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestName IS NOT NULL
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND a.GrantingActorSiteID = m.idfsSite;

        -- 
        -- Apply at the user's ID level, granted by a site.
        --
        INSERT INTO @Results
        SELECT t.idfTesting,
               t.idfsTestStatus,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestName IS NOT NULL
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND a.GrantingActorSiteID = m.idfsSite;

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT t.idfTesting
            FROM dbo.tlbTesting t
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
                       AND m.intRowStatus = 0
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = m.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE t.intRowStatus = 0
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup -- Default role
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        INSERT INTO @Results
        SELECT t.idfTesting,
               t.idfsTestStatus,
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserGroupSitePermissions WHERE SiteID = m.idfsSite
        )
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestName IS NOT NULL
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  );

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbTesting t
                ON t.idfTesting = res.ID
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = m.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003; -- Read permission

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        INSERT INTO @Results
        SELECT t.idfTesting,
               t.idfsTestStatus,
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserSitePermissions WHERE SiteID = m.idfsSite
        )
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestName IS NOT NULL
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  );

        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT t.idfTesting
            FROM dbo.tlbTesting t
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
                       AND m.intRowStatus = 0
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = m.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        INSERT INTO @FinalResults
        SELECT res.ID,
               res.TestStatusTypeID,
               MAX(ReadPermissionIndicator),
               MAX(AccessToPersonalDataPermissionIndicator),
               MAX(AccessToGenderAndAgeDataPermissionIndicator),
               MAX(WritePermissionIndicator),
               MAX(DeletePermissionIndicator)
        FROM @Results res
            INNER JOIN dbo.tlbTesting t
                ON t.idfTesting = res.ID
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbMonitoringSession ms
                ON ms.idfMonitoringSession = m.idfMonitoringSession
                   AND ms.intRowStatus = 0
            LEFT JOIN dbo.tlbCampaign c
                ON c.idfCampaign = ms.idfCampaign
                   AND c.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = m.idfMaterial
                   AND tom.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOUT tro
                ON tro.idfTransferOut = tom.idfTransferOut
                   AND tro.intRowStatus = 0
            LEFT JOIN dbo.tlbSpecies species
                ON species.idfSpecies = m.idfSpecies
                   AND species.intRowStatus = 0
        WHERE res.ReadPermissionIndicator IN ( 1, 3, 5 )
              AND (
                      (
                          t.idfBatchTest IS NULL
                          AND t.idfsTestResult IS NULL
                          AND @BatchTestAssociationIndicator = 1
                      )
                      OR @BatchTestAssociationIndicator IS NULL
                  ) -- Adding a test to a batch, so should not currently be a batch test ID.
              AND (
                      (t.idfTesting IN (
                                           SELECT CAST([Value] AS BIGINT)
                                           FROM dbo.FN_GBL_SYS_SplitList(@TestList, NULL, ',')
                                       )
                      )
                      OR (@TestList IS NULL)
                  )
              AND (
                      (
                          @ReportOrSessionTypeID = 10012001 --Human Disease Report
                          AND (
                                  (m.idfHumanCase IS NOT NULL)
                                  OR (
                                         m.idfMonitoringSession IS NOT NULL
                                         AND ms.SessionCategoryID = 10502001 --Human Active Surveillance Session
                                     )
                              )
                      )
                      OR (
                             @ReportOrSessionTypeID = 10012006 --Vector Surveillance Session
                             AND m.idfVectorSurveillanceSession IS NOT NULL
                         )
                      OR (
                             @ReportOrSessionTypeID = 10012005 --Veterinary Disease Report
                             AND (
                                     (m.idfVetCase IS NOT NULL)
                                     OR (
                                            m.idfMonitoringSession IS NOT NULL
                                            AND ms.SessionCategoryID IN ( 10502002, 10502009 ) --Veterinary Active Surveillance Session
                                        )
                                 )
                         )
                      OR (@ReportOrSessionTypeID IS NULL)
                  )
              AND (
                      (
                          @SurveillanceTypeID = 4578940000001 --Active
                          AND (
                                  m.idfMonitoringSession IS NOT NULL
                                  OR m.idfVectorSurveillanceSession IS NOT NULL
                              )
                      )
                      OR (
                             @SurveillanceTypeID = 4578940000002 --Passive
                             AND (
                                     m.idfHumanCase IS NOT NULL
                                     OR m.idfVetCase IS NOT NULL
                                 )
                         )
                      OR (@SurveillanceTypeID IS NULL)
                  )
              AND (
                      (
                          (
                              m.blnAccessioned = @AccessionedIndicatorList
                              AND m.idfsAccessionCondition IS NULL
                          )
                          OR (
                                 @AccessionedIndicatorList IS NULL
                                 AND @SampleStatusTypeList IS NULL
                             )
                      )
                      OR (
                             (
                                 (m.idfsSampleStatus IN (
                                                            SELECT CAST([Value] AS BIGINT)
                                                            FROM dbo.FN_GBL_SYS_SplitList(
                                                                                             @SampleStatusTypeList,
                                                                                             NULL,
                                                                                             ','
                                                                                         )
                                                        )
                                 )
                                 OR (
                                        m.idfsAccessionCondition IN (
                                                                        SELECT CAST([Value] AS BIGINT)
                                                                        FROM dbo.FN_GBL_SYS_SplitList(
                                                                                                         @SampleStatusTypeList,
                                                                                                         NULL,
                                                                                                         ','
                                                                                                     )
                                                                    )
                                        AND (
                                                m.idfsSampleStatus IS NULL
                                                OR m.idfsSampleStatus = 10015007 --In Repository
                                            )
                                    )
                             )
                             OR (
                                    @SampleStatusTypeList IS NULL
                                    AND @AccessionedIndicatorList IS NULL
                                )
                         )
                  )
              AND (
                      m.idfSendToOffice = @SentToOrganizationID
                      OR @SentToOrganizationID IS NULL
                  )
              AND (
                      tro.idfSendToOffice = @TransferredToOrganizationID
                      OR @TransferredToOrganizationID IS NULL
                  )
              AND (
                      t.idfTestedByOffice = @ResultsReceivedFromID
                      OR @ResultsReceivedFromID IS NULL
                  )
              AND (
                      m.idfsSampleType = @SampleTypeID
                      OR @SampleTypeID IS NULL
                  )
              AND (
                      t.idfsTestName = @TestNameTypeID
                      OR @TestNameTypeID IS NULL
                  )
              AND (
                      t.idfsDiagnosis = @DiseaseID
                      OR @DiseaseID IS NULL
                  )
              AND (
                      t.idfsTestStatus = @TestStatusTypeID
                      OR @TestStatusTypeID IS NULL
                  )
              AND (
                      t.idfsTestResult = @TestResultTypeID
                      OR @TestResultTypeID IS NULL
                  )
              AND (
                      species.idfsSpeciesType = @SpeciesTypeID
                      OR @SpeciesTypeID IS NULL
                  )
              AND (
                      (t.datConcludedDate
              BETWEEN @TestResultDateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @TestResultDateTo)))
                      )
                      OR (
                             @TestResultDateFrom IS NULL
                             OR @TestResultDateTo IS NULL
                         )
                  )
              AND (
                      (
                          m.strCalculatedCaseID LIKE '%' + @EIDSSReportCampaignOrSessionID + '%'
                          OR c.strCampaignID LIKE '%' + @EIDSSReportCampaignOrSessionID + '%'
                      )
                      OR @EIDSSReportCampaignOrSessionID IS NULL
                  )
              AND (
                      m.strCalculatedHumanName LIKE '%' + @PatientName + '%'
                      OR @PatientName IS NULL
                  )
              AND (
                      m.strCalculatedHumanName LIKE '%' + @FarmOwnerName + '%'
                      OR @FarmOwnerName IS NULL
                  )
              AND (
                      m.strFieldBarcode LIKE '%' + @EIDSSLocalOrFieldSampleID + '%'
                      OR @EIDSSLocalOrFieldSampleID IS NULL
                  )
              AND (
                      tro.strBarcode LIKE '%' + @EIDSSTransferID + '%'
                      OR @EIDSSTransferID IS NULL
                  )
              AND (
                      m.strBarcode LIKE '%' + @EIDSSLaboratorySampleID + '%'
                      OR @EIDSSLaboratorySampleID IS NULL
                  )
        GROUP BY res.ID,
                 res.TestStatusTypeID;

        SET @InProgressCount =
        (
            SELECT COUNT(*)
            FROM @FinalResults res
                INNER JOIN dbo.tlbTesting t
                    ON t.idfTesting = res.ID
                       AND t.intRowStatus = 0
                LEFT JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = t.idfBatchTest
                       AND b.intRowStatus = 0
            WHERE t.idfsTestStatus = 10001003
                  AND t.idfsTestName IS NOT NULL
                  AND t.blnNonLaboratoryTest = 0
                  AND (
                          (
                              t.idfBatchTest IS NULL
                              AND (
                                      t.idfsTestStatus = 10001001 --Final
                                      OR t.idfsTestStatus = 10001003 --In Progress
                                      OR t.idfstestStatus = 10001006 --Amended
                                  )
                          )
                          OR (
                                 t.idfBatchTest IS NOT NULL
                                 AND b.idfsBatchStatus = 10001003 --In Progress
                                 AND (
                                         t.idfsTestStatus = 10001001 --Final 
                                         OR t.idfstestStatus = 10001006 --Amended
                                     )
                             )
                          OR (
                                 t.idfBatchTest IS NOT NULL
                                 AND b.idfsBatchStatus = 10001001 --Closed
                                 AND (
                                         t.idfsTestStatus = 10001001 --Final
                                         OR t.idfsTestStatus = 10001003 --In Progress
                                         OR t.idfsTestStatus = 10001004 --Preliminary
                                         OR t.idfstestStatus = 10001006 --Amended
                                     )
                             )
                      )
        );

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        SELECT t.idfTesting AS TestID,
               CASE
                   WHEN f.SampleID IS NULL THEN
                       0
                   ELSE
                       1
               END AS FavoriteIndicator,
               m.idfsSite AS SiteID,
               m.idfsCurrentSite AS CurrentSiteID,
               t.idfsTestName AS TestNameTypeID,
               t.idfsTestCategory AS TestCategoryTypeID,
               t.idfsTestResult AS TestResultTypeID,
               t.idfsTestStatus AS TestStatusTypeID,
               t.PreviousTestStatusID AS PreviousTestStatusTypeID,
               t.idfsDiagnosis AS DiseaseID,
               m.idfMaterial AS SampleID,
               m.idfRootMaterial AS RootSampleID,
               m.idfParentMaterial AS ParentSampleID,
               m.idfSendToOffice AS SentToOrganizationID,
               t.idfBatchTest AS BatchTestID,
               t.idfObservation AS ObservationID,
               t.intTestNumber AS TestNumber,
               t.strNote AS Note,
               t.datStartedDate AS StartedDate,
               t.datConcludedDate AS ResultDate,
               t.idfTestedByOffice AS TestedByOrganizationID,
               t.idfTestedByPerson AS TestedByPersonID,
               t.idfResultEnteredByOffice AS ResultEnteredByOrganizationID,
               t.idfResultEnteredByPerson AS ResultEnteredByPersonID,
               t.idfValidatedByOffice AS ValidatedByOrganizationID,
               t.idfValidatedByPerson AS ValidatedByPersonID,
               t.blnReadOnly AS ReadOnlyIndicator,
               t.blnNonLaboratoryTest AS NonLaboratoryTestIndicator,
               t.blnExternalTest AS ExternalTestIndicator,
               t.idfPerformedByOffice AS PerformedByOrganizationID,
               t.datReceivedDate AS ReceivedDate,
               t.strContactPerson AS ContactPersonName,
               m.strCalculatedCaseID AS EIDSSReportOrSessionID,
               CASE
                   WHEN res.AccessToPersonalDataPermissionIndicator = 0 THEN
                       '**********'
                   ELSE
                       m.strCalculatedHumanName
               END AS PatientOrFarmOwnerName,
               sampleType.name AS SampleTypeName,
               disease.name AS DiseaseName,
               m.strBarcode AS EIDSSLaboratorySampleID,
               m.strFieldBarcode AS EIDSSLocalOrFieldSampleID,
               testNameType.name AS TestNameTypeName,
               testStatusType.name AS TestStatusTypeName,
               testResultType.name AS TestResultTypeName,
               testCategoryType.name AS TestCategoryTypeName,
               m.datAccession AS AccessionDate,
               functionalArea.name AS FunctionalAreaName,
               m.idfsAccessionCondition AS AccessionConditionTypeID,
               m.idfsSampleStatus AS SampleStatusTypeID,
               (CASE
                    WHEN m.blnAccessioned = 0
                         AND m.idfsAccessionCondition IS NULL THEN
                        'Un-accessioned'
                    WHEN m.idfsSampleStatus IS NULL THEN
                        accessionConditionType.name
                    WHEN m.idfsSampleStatus = 10015007 --In Repository
               THEN
                        accessionConditionType.name
                    ELSE
                        sampleStatusType.name
                END
               ) AS AccessionConditionOrSampleStatusTypeName,
               m.strCondition AS AccessionComment,
               a.strAnimalCode AS EIDSSAnimalID,
               ISNULL(
               (
                   SELECT COUNT(NULLIF(tom2.idfTransferOUT, 0))
                   FROM dbo.tlbTransferOutMaterial tom2
                   WHERE tom2.idfMaterial = m.idfMaterial
                         AND tom2.intRowStatus = 0
               ),
               0
                     ) AS TransferCount,
               tro.idfTransferOut AS TransferID,
               t.idfHumanCase AS HumanDiseaseReportID,
               t.idfVetCase AS VeterinaryDiseaseReportID,
               t.idfMonitoringSession AS MonitoringSessionID,
               t.idfVector AS VectorID,
               t.intRowStatus AS RowStatus,
               CASE
                   WHEN res.ReadPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.ReadPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.ReadPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.ReadPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.ReadPermissionIndicator)
               END AS ReadPermissionindicator,
               CASE
                   WHEN res.AccessToPersonalDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.AccessToPersonalDataPermissionIndicator)
               END AS AccessToPersonalDataPermissionIndicator,
               CASE
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.AccessToGenderAndAgeDataPermissionIndicator)
               END AS AccessToGenderAndAgeDataPermissionIndicator,
               CASE
                   WHEN res.WritePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.WritePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.WritePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.WritePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.WritePermissionIndicator)
               END AS WritePermissionIndicator,
               CASE
                   WHEN res.DeletePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.DeletePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.DeletePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.DeletePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.DeletePermissionIndicator)
               END AS DeletePermissionIndicator,
               0 AS RowAction,
               0 AS RowSelectionIndicator,
               COUNT(*) OVER () AS TotalRowCount,
               @InProgressCount AS InProgressCount
        FROM @FinalResults res
            INNER JOIN dbo.tlbTesting t
                ON t.idfTesting = res.ID
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) disease
                ON disease.idfsReference = t.idfsDiagnosis
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                ON sampleType.idfsReference = m.idfsSampleType
            LEFT JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = m.idfMaterial
                   AND tom.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOUT tro
                ON tro.idfTransferOut = tom.idfTransferOut
                   AND tro.intRowStatus = 0
            LEFT JOIN dbo.tlbAnimal a
                ON a.idfAnimal = m.idfAnimal
                   AND a.intRowStatus = 0
            LEFT JOIN dbo.tlbDepartment d
                ON d.idfDepartment = m.idfInDepartment
                   AND d.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000164) functionalArea
                ON functionalArea.idfsReference = d.idfsDepartmentName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                ON testNameType.idfsReference = t.idfsTestName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                ON testStatusType.idfsReference = t.idfsTestStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                ON testResultType.idfsReference = t.idfsTestResult
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                ON testCategoryType.idfsReference = t.idfsTestCategory
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                ON accessionConditionType.idfsReference = m.idfsAccessionCondition
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                ON sampleStatusType.idfsReference = m.idfsSampleStatus;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_TEST_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_TEST_GETList
--
-- Description:	Get laboratory tests list for the various lab use cases.
--
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     10/18/2018 Initial release.
-- Stephen Long     12/19/2018 Added pagination logic.
-- Stephen Long     01/18/2019 Added row selection indicator.
-- Stephen Long     01/30/2019 Added sample disease reference join, and removed the vector 
--                             surveillance session joins as they are no longer needed.
-- Stephen Long     02/12/2019 Added sample ID parameter.
-- Stephen Long     02/21/2019 Added root and parent sample ID's to the select list.  Added 
--                             test status type ID, batch test ID, site ID and test ID parameters.
-- Stephen Long     03/28/2019 Added EIDSS local/field sample ID field.
--                             Changed batch test portion of the where clause to bring back test 
--                             records with a null batch test/in progress unless an actual 
--                             batch test records is specified.  The Testing grid on the labor-
--                             atory module should exclude tests associated with a batch.  These 
--                             display on the Batches tab.
-- Stephen Long     04/03/2019 Changed tests where clause to look at the performed by organization 
--                             instead of sample sent to organization.
-- Stephen Long     04/27/2019 Added EIDSS batch ID, observation ID and batch status type name for 
--                             additional test information.
-- Stephen Long     07/02/2019 Updated joins for sample type and test status type from left to 
--                             inner.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     07/29/2019 Correction on test status typeID where clause conditions.
-- Stephen Long     08/28/2019 Added @TestID null check on the test status type id where clause.
-- Stephen Long     09/03/2019 Added send to organization as part of the where clause.
-- Stephen Long     09/14/2019 Added pagination set 0 to bring back "all" records.
-- Stephen Long     09/26/2019 Added null OR portion on SiteID and OrganizationID where clauses.
-- Stephen Long     10/03/2019 Added test id parameter if/else.
-- Stephen Long     10/22/2019 Added test list parameter and where clause.
-- Stephen Long     01/22/2020 Converted site ID to site list for site filtration.
-- Stephen Long     02/03/2020 Added non-laboratory test indicator where clause.
-- Stephen Long     02/19/2020 Corrected left joins needing intRowStatus = 0.
-- Stephen Long     03/10/2020 Added additional test status types: amended and final and days from 
--                             accession date.
-- Stephen Long     04/07/2020 Added option of no pagination for batch tests.
-- Stephen Long     04/26/2020 Added sent to organization ID to the model.
-- Stephen Long     06/06/2020 Added batch status type ID to the model.
-- Stephen Long     06/11/2020 Correction on where clause criteria for batch tests in final or 
--                             amended status.
-- Stephen Long     09/16/2020 Removed test status type preliminary as these should only show in 
--                             the approvals query.
-- Stephen Long     11/28/2020 Added configurable site filtration rules.
-- Stephen Long     12/31/2020 Change function on reference data to handle inactive records.
-- Stephen Long     01/21/2021 Change function on reference data to handle inactive records.
-- Stephen Long     09/25/2021 Added new pagination and order by.
-- Stephen Long     11/16/2021 Changed to use select row over instead of with cte.
-- Stephen Long     12/17/2021 Removed filtration rules; only apply on advanced search.
-- Stephen Long     12/18/2021 Changed left to inner join on accession condition and sample 
--                             status types.
-- Stephen Long     04/20/2022 Changed to include preliminary in the testing list for tests 
--                             not associated with a batch.
-- Stephen Long     05/24/2022 Added additional test status types for batch of in progress.
-- Stephen Long     05/25/2022 Fix for GIT item 326.
-- Stephen Long     07/25/2022 Removed option (recompile).
-- Stephen Long     08/12/2022 Removed preliminary from where criteria for default list.
-- Stephen Long     08/29/2012 Bug fix on DevOps item 4404.
-- Stephen Long     10/18/2022 Fix on external test indicator to use the field on the testing 
--                             table.
-- Stephen Long     10/21/2022 Added human disease report, veterinary disease report, monitoring 
--                             session and vector identifiers to the query.
-- Stephen Long     12/29/2022 Removed sorting and pagination logic; business decision so records
--                             pending save could be shown at the top of the list prior to saving.
-- Stephen Long     01/11/2023 Updated for site filtration queries.
--
-- Testing Code:
/*
DECLARE	@return_value int

EXEC	@return_value = [dbo].[USP_LAB_TEST_GETList]
		@LanguageID = N'en-US',
		@TestStatusTypeID = NULL,
		@SampleID = NULL,
		@TestID = NULL,
		@BatchTestID = NULL,
		@TestList = NULL,
		@DaysFromAccessionDate = 60,
		@UserID = 161287150000872, --rykermase
		@UserEmployeeID = 420664190000872,
		@UserSiteID = 864,
		@UserOrganizationID = 758210000000,
		@UserSiteGroupID = NULL,
		@Page = 1,
		@PageSize = 10,
		@SortColumn = N'EIDSSLaboratorySampleID',
		@SortOrder = N'DESC'

SELECT	'Return Value' = @return_value

GO
*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_TEST_GETList]
(
    @LanguageID NVARCHAR(50),
    @TestStatusTypeID BIGINT = NULL,
    @SampleID BIGINT = NULL,
    @TestID BIGINT = NULL,
    @BatchTestID BIGINT = NULL,
    @TestList VARCHAR(MAX) = NULL,
    @DaysFromAccessionDate INT = NULL,
    @UserID BIGINT,
    @UserEmployeeID BIGINT,
    @UserOrganizationID BIGINT = NULL,
    @UserSiteID BIGINT,
    @UserSiteGroupID BIGINT = NULL
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL,
        TestStatusTypeID BIGINT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID BIGINT NOT NULL,
        TestStatusTypeID BIGINT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @Favorites XML,
            @InProgressCount INT;

    BEGIN TRY
        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        SET @Favorites =
        (
            SELECT PreferenceDetail
            FROM dbo.UserPreference Laboratory
            WHERE idfUserID = @UserID
                  AND ModuleConstantID = 10508006
                  AND intRowStatus = 0
        );

        IF @TestID IS NULL
           AND @TestList IS NULL
        BEGIN
            INSERT INTO @Results
            SELECT t.idfTesting,
                   t.idfsTestStatus,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbTesting t
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
                       AND m.intRowStatus = 0
                INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000019) disease
                    ON disease.idfsReference = t.idfsDiagnosis
                LEFT JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = t.idfBatchTest
                       AND b.intRowStatus = 0
            WHERE t.intRowStatus = 0
                  AND t.idfsTestName IS NOT NULL
                  AND t.blnNonLaboratoryTest = 0
                  AND m.idfSendToOffice = @UserOrganizationID
                  AND (
                          GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                          OR @DaysFromAccessionDate IS NULL
                      )
                  AND (
                          t.idfsTestStatus = @TestStatusTypeID
                          OR @TestStatusTypeID IS NULL
                      )
                  AND (
                          (
                              t.idfBatchTest IS NULL
                              AND t.idfsTestStatus IN (   10001001, --Final
                                                          10001007, --Deleted
                                                          10001003, --In Progress
                                                          10001006
                                                      ) --Amended
                          )
                          OR (
                                 t.idfBatchTest IS NOT NULL
                                 AND b.idfsBatchStatus = 10001003 --In Progress
                                 AND t.idfsTestStatus IN (   10001001, --Final 
                                                             10001003, -- In Progress
                                                             10001004, --Preliminary
                                                             10001006
                                                         ) --Amended
                             )
                          OR (
                                 t.idfBatchTest IS NOT NULL
                                 AND b.idfsBatchStatus = 10001001 --Closed
                                 AND t.idfsTestStatus IN (   10001001, --Final 
                                                             10001003, -- In Progress
                                                             10001004, --Preliminary
                                                             10001006
                                                         ) --Amended
                             )
                      )
                  AND (
                          t.idfMaterial = @SampleID
                          OR @SampleID IS NULL
                      )
                  AND (
                          (t.idfBatchTest = @BatchTestID)
                          OR (
                                 t.idfBatchTest IS NULL
                                 AND @BatchTestID IS NULL
                             )
                      );

            -- =======================================================================================
            -- SITE FILTRATION RULES
            --
            -- Apply site filtration rules from use case SAUC29.
            -- =======================================================================================
            -- 
            -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
            -- as all records have been pulled above with or without site filtration rules applied.
            --
            DELETE FROM @Results
            WHERE EXISTS
            (
                SELECT t.idfTesting
                FROM dbo.tlbTesting t
                    INNER JOIN dbo.tlbMaterial m
                        ON m.idfMaterial = t.idfMaterial
                           AND m.intRowStatus = 0
                    INNER JOIN dbo.tstObjectAccess oa
                        ON oa.idfsObjectID = m.idfsSite
                           AND oa.intRowStatus = 0
                    INNER JOIN dbo.tlbEmployeeGroup eg
                        ON eg.idfsSite = @UserSiteID
                           AND eg.intRowStatus = 0
                    INNER JOIN dbo.trtBaseReference br
                        ON br.idfsBaseReference = eg.idfEmployeeGroup
                           AND br.intRowStatus = 0
                           AND br.blnSystem = 1
                WHERE t.intRowStatus = 0
                      AND oa.intPermission = 1 -- Deny permission
                      AND oa.idfsObjectType = 10060011 -- Site
                      AND oa.idfActor = eg.idfEmployeeGroup -- Default role
            );

            --
            -- Apply level 1 site filtration rules for an employee's associated user group(s).  
            -- Allows and denies will supersede level 0.
            --
            DELETE res
            FROM @Results res
                INNER JOIN dbo.tlbTesting t
                    ON t.idfTesting = res.ID
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
                       AND m.intRowStatus = 0
                INNER JOIN @UserGroupSitePermissions ugsp
                    ON ugsp.SiteID = m.idfsSite
            WHERE ugsp.Permission = 2 -- Deny permission
                  AND ugsp.PermissionTypeID = 10059003 -- Read permission
                  AND NOT EXISTS (
                              SELECT * FROM @UserSitePermissions WHERE SiteID = m.idfsSite
            );

            --
            -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
            -- will supersede level 1.
            --
            DELETE FROM @Results
            WHERE EXISTS
            (
                SELECT t.idfTesting
                FROM dbo.tlbTesting t
                    INNER JOIN dbo.tlbMaterial m
                        ON m.idfMaterial = t.idfMaterial
                           AND m.intRowStatus = 0
                    INNER JOIN @UserSitePermissions usp
                        ON usp.SiteID = m.idfsSite
                WHERE usp.Permission = 4 -- Deny permission
                      AND usp.PermissionTypeID = 10059003 -- Read permission
            );

            INSERT INTO @FinalResults
            SELECT res.ID,
                   res.TestStatusTypeID,
                   MAX(res.ReadPermissionIndicator),
                   MAX(res.AccessToPersonalDataPermissionIndicator),
                   MAX(res.AccessToGenderAndAgeDataPermissionIndicator),
                   MAX(res.WritePermissionIndicator),
                   MAX(res.DeletePermissionIndicator)
            FROM @Results res
            WHERE res.ReadPermissionIndicator IN ( 1, 3, 5 )
            GROUP BY res.ID,
                     res.TestStatusTypeID;
        END
        ELSE
        BEGIN
            INSERT INTO @FinalResults
            SELECT t.idfTesting,
                   t.idfsTestStatus,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbTesting t
            WHERE t.intRowStatus = 0
                  AND (
                          t.idfTesting = @TestID
                          OR @TestID IS NULL
                      )
                  AND (
                          t.idfTesting IN (
                                              SELECT CAST([Value] AS BIGINT)
                                              FROM dbo.FN_GBL_SYS_SplitList(@TestList, NULL, ',')
                                          )
                          OR @TestList IS NULL
                      );
        END;

        SET @InProgressCount =
        (
            SELECT COUNT(   CASE
                                WHEN TestStatusTypeID = 10001003 --In Progress
                            THEN
                                    ID
                                ELSE
                                    NULL
                            END
                        )
            FROM @FinalResults res
                INNER JOIN dbo.tlbTesting t
                    ON t.idfTesting = res.ID
                       AND t.intRowStatus = 0
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
                       AND m.intRowStatus = 0
                LEFT JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = t.idfBatchTest
                       AND b.intRowStatus = 0
            WHERE t.intRowStatus = 0
                  AND (
                          t.idfTesting = @TestID
                          OR @TestID IS NULL
                      )
                  AND t.idfsTestName IS NOT NULL
                  AND t.blnNonLaboratoryTest = 0
                  AND m.idfSendToOffice = @UserOrganizationID
                  AND (
                          GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                          OR @DaysFromAccessionDate IS NULL
                      )
                  AND (
                          t.idfTesting IN (
                                              SELECT CAST([Value] AS BIGINT)
                                              FROM dbo.FN_GBL_SYS_SplitList(@TestList, NULL, ',')
                                          )
                          OR @TestList IS NULL
                      )
                  AND (
                          t.idfsTestStatus = @TestStatusTypeID
                          OR @TestStatusTypeID IS NULL
                      )
                  AND (
                          (
                              t.idfBatchTest IS NULL
                              AND t.idfsTestStatus IN (   10001001, --Final
                                                          10001003, --In Progress
                                                          10001006
                                                      ) --Amended
                          )
                          OR (
                                 t.idfBatchTest IS NOT NULL
                                 AND b.idfsBatchStatus = 10001003 --In Progress
                                 AND t.idfsTestStatus IN (   10001001, --Final 
                                                             10001004, --Preliminary
                                                             10001006  --Amended
                                                         )
                             )
                          OR (
                                 t.idfBatchTest IS NOT NULL
                                 AND b.idfsBatchStatus = 10001001 --Closed
                                 AND t.idfsTestStatus IN (   10001001, --Final 
                                                             10001003, -- In Progress
                                                             10001004, --Preliminary
                                                             10001006
                                                         ) --Amended
                             )
                      )
                  AND (
                          t.idfMaterial = @SampleID
                          OR @SampleID IS NULL
                      )
                  AND (
                          (t.idfBatchTest = @BatchTestID)
                          OR (
                                 t.idfBatchTest IS NULL
                                 AND @BatchTestID IS NULL
                             )
                      )
        );

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        SELECT t.idfTesting AS TestID,
               CASE
                   WHEN f.SampleID IS NULL THEN
                       0
                   ELSE
                       1
               END AS FavoriteIndicator,
               m.idfsSite AS SiteID,
               m.idfsCurrentSite AS CurrentSiteID,
               t.idfsTestName AS TestNameTypeID,
               t.idfsTestCategory AS TestCategoryTypeID,
               t.idfsTestResult AS TestResultTypeID,
               t.idfsTestStatus AS TestStatusTypeID,
               t.PreviousTestStatusID AS PreviousTestStatusTypeID,
               t.idfsDiagnosis AS DiseaseID,
               m.idfMaterial AS SampleID,
               m.idfRootMaterial AS RootSampleID,
               m.idfParentMaterial AS ParentSampleID,
               m.idfSendToOffice AS SentToOrganizationID,
               t.idfBatchTest AS BatchTestID,
               t.idfObservation AS ObservationID,
               t.intTestNumber AS TestNumber,
               t.strNote AS Note,
               t.datStartedDate AS StartedDate,
               t.datConcludedDate AS ResultDate,
               t.idfTestedByOffice AS TestedByOrganizationID,
               t.idfTestedByPerson AS TestedByPersonID,
               t.idfResultEnteredByOffice AS ResultEnteredByOrganizationID,
               t.idfResultEnteredByPerson AS ResultEnteredByPersonID,
               t.idfValidatedByOffice AS ValidatedByOrganizationID,
               t.idfValidatedByPerson AS ValidatedByPersonID,
               t.blnReadOnly AS ReadOnlyIndicator,
               t.blnNonLaboratoryTest AS NonLaboratoryTestIndicator,
               t.blnExternalTest AS ExternalTestIndicator,
               t.idfPerformedByOffice AS PerformedByOrganizationID,
               t.datReceivedDate AS ReceivedDate,
               t.strContactPerson AS ContactPersonName,
               m.strCalculatedCaseID AS EIDSSReportOrSessionID,
               m.strCalculatedHumanName AS PatientOrFarmOwnerName,
               sampleType.name AS SampleTypeName,
               disease.name AS DiseaseName,
               m.strBarcode AS EIDSSLaboratorySampleID,
               m.strFieldBarcode AS EIDSSLocalOrFieldSampleID,
               testNameType.name AS TestNameTypeName,
               testStatusType.name AS TestStatusTypeName,
               testResultType.name AS TestResultTypeName,
               testCategoryType.name AS TestCategoryTypeName,
               m.datAccession AS AccessionDate,
               functionalArea.name AS FunctionalAreaName,
               m.idfsAccessionCondition AS AccessionConditionTypeID,
               m.idfsSampleStatus AS SampleStatusTypeID,
               (CASE
                    WHEN m.blnAccessioned = 0
                         AND m.idfsAccessionCondition IS NULL THEN
                        'Un-accessioned'
                    WHEN m.idfsSampleStatus IS NULL THEN
                        accessionConditionType.name
                    WHEN m.idfsSampleStatus = 10015007 --In Repository
               THEN
                        accessionConditionType.name
                    ELSE
                        sampleStatusType.name
                END
               ) AS AccessionConditionOrSampleStatusTypeName,
               m.strCondition AS AccessionComment,
               a.strAnimalCode AS EIDSSAnimalID,
               ISNULL(
               (
                   SELECT COUNT(NULLIF(tom2.idfTransferOUT, 0))
                   FROM dbo.tlbTransferOutMaterial tom2
                   WHERE tom2.idfMaterial = m.idfMaterial
                         AND tom2.intRowStatus = 0
               ),
               0
                     ) AS TransferCount,
               tro.idfTransferOut AS TransferID,
               t.idfHumanCase AS HumanDiseaseReportID,
               t.idfVetCase AS VeterinaryDiseaseReportID,
               t.idfMonitoringSession AS MonitoringSessionID,
               t.idfVector AS VectorID,
               t.intRowStatus AS RowStatus,
               CASE
                   WHEN res.ReadPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.ReadPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.ReadPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.ReadPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.ReadPermissionIndicator)
               END AS ReadPermissionindicator,
               CASE
                   WHEN res.AccessToPersonalDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.AccessToPersonalDataPermissionIndicator)
               END AS AccessToPersonalDataPermissionIndicator,
               CASE
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.AccessToGenderAndAgeDataPermissionIndicator)
               END AS AccessToGenderAndAgeDataPermissionIndicator,
               CASE
                   WHEN res.WritePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.WritePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.WritePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.WritePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.WritePermissionIndicator)
               END AS WritePermissionIndicator,
               CASE
                   WHEN res.DeletePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.DeletePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.DeletePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.DeletePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.DeletePermissionIndicator)
               END AS DeletePermissionIndicator,
               0 AS RowAction,
               0 AS RowSelectionIndicator,
               COUNT(*) OVER () AS TotalRowCount,
               @InProgressCount AS InProgressCount
        FROM @FinalResults res
            INNER JOIN dbo.tlbTesting t
                ON t.idfTesting = res.ID
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) disease
                ON disease.idfsReference = t.idfsDiagnosis
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                ON sampleType.idfsReference = m.idfsSampleType
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                ON testStatusType.idfsReference = t.idfsTestStatus
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                ON accessionConditionType.idfsReference = m.idfsAccessionCondition
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                ON sampleStatusType.idfsReference = m.idfsSampleStatus
            LEFT JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = m.idfMaterial
                   AND tom.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOUT tro
                ON tro.idfTransferOut = tom.idfTransferOut
                   AND tro.intRowStatus = 0
            LEFT JOIN dbo.tlbAnimal a
                ON a.idfAnimal = m.idfAnimal
                   AND a.intRowStatus = 0
            LEFT JOIN dbo.tlbDepartment d
                ON d.idfDepartment = m.idfInDepartment
                   AND d.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000164) functionalArea
                ON functionalArea.idfsReference = d.idfsDepartmentName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                ON testNameType.idfsReference = t.idfsTestName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                ON testResultType.idfsReference = t.idfsTestResult
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                ON testCategoryType.idfsReference = t.idfsTestCategory;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_TEST_SEARCH_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_TEST_SEARCH_GETList
--
-- Description:	Get laboratory tests list for the various lab use cases.
--
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     02/21/2019 Initial release.
-- Stephen Long     03/28/2019 Added EIDSS local/field sample ID field.
-- Stephen Long     04/27/2019 Added EIDSS batch ID, observation ID and batch status type name for 
--                             additional test information.
-- Stephen Long     07/09/2019 Added disease to wildcard search.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     01/22/2020 Added site list parameter for site filtration.
-- Stephen Long     02/03/2020 Added non-laboratory test indicator where clause.
-- Stephen Long     03/10/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     04/26/2020 Added sent to organization ID to the model.
-- Stephen Long     06/06/2020 Added batch status type ID to the model.
-- Stephen Long     06/07/2020 Added additional search fields to the where clause.
-- Stephen Long     10/28/2020 Added where criteria from the test get list.
-- Stephen Long     11/28/2020 Added configurable site filtration rules.
-- Stephen Long     12/31/2020 Change function on reference data to handle inactive records.
-- Stephen Long     01/03/2020 Moved pagination to table variable insert.
-- Stephen Long     01/05/2021 Removed sent to organization where criteria.
-- Stephen Long     01/07/2021 Removed leading wildcard (%) as full table scans are performed even 
--                             with indices resulting in long query run times.  Recommend NOT 
--                             putting those back in.
-- Stephen Long     09/24/2021 Removed unneeded fields and joins to improve performance.
-- Stephen Long     12/08/2021 Changed pagination logic and removed optiont recompile.
-- Stephen Long     12/18/2021 Changed left to inner join on accession condition and sample 
--                             status types.
-- Stephen Long     07/26/2022 Changed from repair to reference repair function.
-- Stephen Long     08/04/2022 Add where criteria from the default testing listing, so only
--                             records for the simple search are filtered from the default set.
-- Stephen Long     09/28/2022 Bug fix on item 5111.
-- Stephen Long     10/17/2022 Bug fix on item 5018 - searching by dates.
-- Stephen Long     10/18/2022 Fix on external test indicator to use the field on the testing 
--                             table.
-- Stephen Long     10/21/2022 Added human disease report, veterinary disease report, monitoring 
--                             session and vector identifiers to the query.
-- Stephen Long     12/29/2022 Removed sorting and pagination logic; business decision so records
--                             pending save could be shown at the top of the list prior to saving.
-- Stephen Long     01/14/2023 Updated for site filtration queries.
--
-- Testing Code:
/*
DECLARE	@return_value int

EXEC	@return_value = [dbo].[USP_LAB_TEST_SEARCH_GETList]
		@LanguageID = N'en-US',
		@SearchString = N'PCR', -- Use 'Gnhnscvxb', 'Brucellosis', 'SWAZ200GEDD' as other tests.
		@TestUnassignedIndicator = NULL,
		@TestCompletedIndicator = NULL,
		@UserID = 161287150000872, -- rykermase
		@UserOrganizationID = 758210000000,
		@Page = 1,
		@PageSize = 10,
		@SortColumn = N'EIDSSLaboratorySampleID',
		@SortOrder = N'DESC'

SELECT	'Return Value' = @return_value

GO
*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_TEST_SEARCH_GETList]
(
    @LanguageID NVARCHAR(50),
    @SearchString NVARCHAR(2000),
    @AccessionedIndicator BIT = NULL,
    @UserID BIGINT,
    @UserEmployeeID BIGINT,
    @UserOrganizationID BIGINT,
    @UserSiteID BIGINT,
    @DaysFromAccessionDate INT = NULL
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @InProgressCount INT;
    DECLARE @InitialResults TABLE (ID BIGINT NOT NULL);
    DECLARE @FinalResults TABLE (ID BIGINT NOT NULL);
    DECLARE @FinalResultsDedup TABLE (ID BIGINT NOT NULL);
    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @SampleTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @SampleStatusTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @AccessionConditionTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @TestNameTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @TestResultTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @TestCategoryTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @TestStatusTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @Diseases TABLE (ID BIGINT NOT NULL);
    DECLARE @FunctionalAreas TABLE (ID BIGINT NOT NULL);
    DECLARE @Favorites XML,
            @LanguageCode BIGINT;

    BEGIN TRY
        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        SET @LanguageCode = dbo.FN_GBL_LanguageCode_Get(@LanguageID);
        SET @Favorites =
        (
            SELECT PreferenceDetail
            FROM dbo.UserPreference Laboratory
            WHERE idfUserID = @UserID
                  AND ModuleConstantID = 10508006
                  AND intRowStatus = 0
        );

        INSERT INTO @InitialResults
        SELECT t.idfTesting
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND t.idfsTestName IS NOT NULL
              AND t.blnNonLaboratoryTest = 0
              AND m.idfSendToOffice = @UserOrganizationID
              AND (
                      GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                      OR @DaysFromAccessionDate IS NULL
                  )
              AND (
                      (
                          t.idfBatchTest IS NULL
                          AND t.idfsTestStatus IN (   10001001, --Final
                                                      10001007, --Deleted
                                                      10001003, --In Progress
                                                      10001004, --Preliminary
                                                      10001006
                                                  ) --Amended
                      )
                      OR (
                             t.idfBatchTest IS NOT NULL
                             AND b.idfsBatchStatus = 10001003 --In Progress
                             AND t.idfsTestStatus IN (   10001001, --Final 
                                                         10001003, -- In Progress
                                                         10001004, --Preliminary
                                                         10001006
                                                     ) --Amended
                         )
                      OR (
                             t.idfBatchTest IS NOT NULL
                             AND b.idfsBatchStatus = 10001001 --Closed
                             AND t.idfsTestStatus IN (   10001001, --Final 
                                                         10001003, -- In Progress
                                                         10001004, --Preliminary
                                                         10001006
                                                     ) --Amended
                         )
                  );

        INSERT INTO @SampleTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000087
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @SampleStatusTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000015
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @AccessionConditionTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000110
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @Diseases
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000019
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @TestNameTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000097
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @TestResultTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000096
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @TestCategoryTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000095
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @TestStatusTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000001
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @FunctionalAreas
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000164
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @FinalResults
        SELECT ID
        FROM @InitialResults
            INNER JOIN dbo.tlbTesting t
                ON t.idfTesting = ID
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
        WHERE (
                  m.blnAccessioned = @AccessionedIndicator
                  AND m.idfsAccessionCondition IS NULL
                  AND m.idfsSampleStatus IS NULL
                  AND @AccessionedIndicator IS NOT NULL
              ) -- Un-accessioned samples
              OR (
                     CONVERT(NVARCHAR(MAX), FORMAT(m.datAccession, 'g', @LanguageID)) LIKE '%' + @SearchString + '%'
                     OR CONVERT(NVARCHAR(MAX), FORMAT(t.datStartedDate, 'd', @LanguageID)) LIKE '%' + @SearchString
                                                                                                + '%'
                     OR CONVERT(NVARCHAR(MAX), FORMAT(t.datConcludedDate, 'd', @LanguageID)) LIKE '%' + @SearchString
                                                                                                  + '%'
                     OR (
                            m.strBarcode IS NOT NULL
                            AND m.strBarcode <> ''
                            AND m.strBarcode LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strFieldBarcode IS NOT NULL
                            AND m.strFieldBarcode <> ''
                            AND m.strFieldBarcode LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strCondition IS NOT NULL
                            AND m.strCondition <> ''
                            AND m.strCondition LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strCalculatedCaseID IS NOT NULL
                            AND m.strCalculatedCaseID <> ''
                            AND m.strCalculatedCaseID LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strCalculatedHumanName IS NOT NULL
                            AND m.strCalculatedHumanName <> ''
                            AND m.strCalculatedHumanName LIKE '%' + @SearchString + '%'
                        )
                 );

        INSERT INTO @FinalResults
        SELECT ID
        FROM @InitialResults
            INNER JOIN dbo.tlbTesting t
                ON t.idfTesting = ID
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
            INNER JOIN dbo.tlbAnimal a
                ON a.idfAnimal = m.idfAnimal
                   AND a.intRowStatus = 0
        WHERE m.idfAnimal IS NOT NULL
              AND a.strAnimalCode LIKE '%' + @SearchString + '%';

        INSERT INTO @FinalResults
        SELECT ID
        FROM @InitialResults
            INNER JOIN dbo.tlbTesting t
                ON t.idfTesting = ID
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = m.idfMaterial
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbTransferOUT tro
                ON tro.idfTransferOut = tom.idfTransferOut
                   AND tro.intRowStatus = 0
        WHERE tro.strBarcode LIKE '%' + @SearchString + '%';

        IF
        (
            SELECT COUNT(*) FROM @SampleTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID
            FROM @InitialResults
                INNER JOIN dbo.tlbTesting t
                    ON t.idfTesting = ID
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
            WHERE EXISTS
            (
                SELECT ID FROM @SampleTypes WHERE m.idfsSampleType = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @SampleStatusTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID
            FROM @InitialResults
                INNER JOIN dbo.tlbTesting t
                    ON t.idfTesting = ID
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
            WHERE (
                      m.idfsSampleStatus IS NULL
                      OR m.idfsSampleStatus = 10015007
                  ) --In Repository
                  AND EXISTS
            (
                SELECT ID FROM @SampleStatusTypes WHERE m.idfsSampleStatus = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @AccessionConditionTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID
            FROM @InitialResults
                INNER JOIN dbo.tlbTesting t
                    ON t.idfTesting = ID
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
            WHERE EXISTS
            (
                SELECT ID
                FROM @AccessionConditionTypes
                WHERE m.idfsAccessionCondition = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @TestNameTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID
            FROM @InitialResults
                INNER JOIN dbo.tlbTesting t
                    ON t.idfTesting = ID
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
            WHERE EXISTS
            (
                SELECT ID FROM @TestNameTypes WHERE t.idfsTestName = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @TestResultTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID
            FROM @InitialResults
                INNER JOIN dbo.tlbTesting t
                    ON t.idfTesting = ID
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
            WHERE EXISTS
            (
                SELECT ID FROM @TestResultTypes WHERE t.idfsTestResult = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @TestCategoryTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID
            FROM @InitialResults
                INNER JOIN dbo.tlbTesting t
                    ON t.idfTesting = ID
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
            WHERE EXISTS
            (
                SELECT ID FROM @TestCategoryTypes WHERE t.idfsTestCategory = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @TestStatusTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID
            FROM @InitialResults
                INNER JOIN dbo.tlbTesting t
                    ON t.idfTesting = ID
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
            WHERE EXISTS
            (
                SELECT ID FROM @TestStatusTypes WHERE t.idfsTestStatus = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @FunctionalAreas
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID
            FROM @InitialResults
                INNER JOIN dbo.tlbTesting t
                    ON t.idfTesting = ID
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
                INNER JOIN dbo.tlbDepartment d
                    ON d.idfDepartment = m.idfInDepartment
                       AND d.intRowStatus = 0
            WHERE m.idfInDepartment IS NOT NULL
                  AND EXISTS
            (
                SELECT ID FROM @FunctionalAreas WHERE d.idfsDepartmentName = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @Diseases
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID
            FROM @InitialResults
                INNER JOIN dbo.tlbTesting t
                    ON t.idfTesting = ID
            WHERE t.idfsDiagnosis IS NOT NULL
                  AND EXISTS
            (
                SELECT ID FROM @Diseases WHERE t.idfsDiagnosis = ID
            );
        END

        INSERT INTO @FinalResultsDedup
        SELECT *
        FROM @FinalResults;

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @FinalResultsDedup
        WHERE EXISTS
        (
            SELECT t.idfTesting
            FROM dbo.tlbTesting t
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
                       AND m.intRowStatus = 0
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = m.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE t.intRowStatus = 0
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup -- Default role
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        DELETE res
        FROM @FinalResultsDedup res
            INNER JOIN dbo.tlbTesting t
                ON t.idfTesting = res.ID
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = m.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003 -- Read permission
              AND NOT EXISTS
        (
            SELECT * FROM @UserSitePermissions WHERE SiteID = m.idfsSite
        );

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        DELETE FROM @FinalResultsDedup
        WHERE EXISTS
        (
            SELECT t.idfTesting
            FROM dbo.tlbTesting t
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
                       AND m.intRowStatus = 0
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = m.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        SET @InProgressCount =
        (
            SELECT COUNT(*)
            FROM @FinalResultsDedup res
                INNER JOIN dbo.tlbTesting t
                    ON t.idfTesting = res.ID
                       AND t.intRowStatus = 0
                LEFT JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = t.idfBatchTest
                       AND b.intRowStatus = 0
            WHERE (t.idfsTestStatus = 10001003)
                  AND (t.idfsTestName IS NOT NULL)
                  AND (t.blnNonLaboratoryTest = 0)
                  AND (
                          (
                              t.idfBatchTest IS NULL
                              AND (
                                      t.idfsTestStatus = 10001001 --Final
                                      OR t.idfsTestStatus = 10001003 --In Progress
                                      OR t.idfstestStatus = 10001006 --Amended
                                  )
                          )
                          OR (
                                 t.idfBatchTest IS NOT NULL
                                 AND b.idfsBatchStatus = 10001003 --In Progress
                                 AND (
                                         t.idfsTestStatus = 10001001 --Final 
                                         OR t.idfstestStatus = 10001006 --Amended
                                     )
                             )
                          OR (
                                 t.idfBatchTest IS NOT NULL
                                 AND b.idfsBatchStatus = 10001001 --Closed
                                 AND (
                                         t.idfsTestStatus = 10001001 --Final
                                         OR t.idfsTestStatus = 10001003 --In Progress
                                         OR t.idfsTestStatus = 10001004 --Preliminary
                                         OR t.idfstestStatus = 10001006 --Amended
                                     )
                             )
                      )
        );

        SELECT t.idfTesting AS TestID,
               CASE
                   WHEN f.SampleID IS NULL THEN
                       0
                   ELSE
                       1
               END AS FavoriteIndicator,
               m.idfsSite AS SiteID,
               m.idfsCurrentSite AS CurrentSiteID,
               t.idfsTestName AS TestNameTypeID,
               t.idfsTestCategory AS TestCategoryTypeID,
               t.idfsTestResult AS TestResultTypeID,
               t.idfsTestStatus AS TestStatusTypeID,
               t.PreviousTestStatusID AS PreviousTestStatusTypeID,
               t.idfsDiagnosis AS DiseaseID,
               m.idfMaterial AS SampleID,
               m.idfRootMaterial AS RootSampleID,
               m.idfParentMaterial AS ParentSampleID,
               m.idfSendToOffice AS SentToOrganizationID,
               t.idfBatchTest AS BatchTestID,
               t.idfObservation AS ObservationID,
               t.intTestNumber AS TestNumber,
               t.strNote AS Note,
               t.datStartedDate AS StartedDate,
               t.datConcludedDate AS ResultDate,
               t.idfTestedByOffice AS TestedByOrganizationID,
               t.idfTestedByPerson AS TestedByPersonID,
               t.idfResultEnteredByOffice AS ResultEnteredByOrganizationID,
               t.idfResultEnteredByPerson AS ResultEnteredByPersonID,
               t.idfValidatedByOffice AS ValidatedByOrganizationID,
               t.idfValidatedByPerson AS ValidatedByPersonID,
               t.blnReadOnly AS ReadOnlyIndicator,
               t.blnNonLaboratoryTest AS NonLaboratoryTestIndicator,
               t.blnExternalTest AS ExternalTestIndicator,
               t.idfPerformedByOffice AS PerformedByOrganizationID,
               t.datReceivedDate AS ReceivedDate,
               t.strContactPerson AS ContactPersonName,
               m.strCalculatedCaseID AS EIDSSReportOrSessionID,
               m.strCalculatedHumanName AS PatientOrFarmOwnerName,
               sampleType.name AS SampleTypeName,
               disease.name AS DiseaseName,
               m.strBarcode AS EIDSSLaboratorySampleID,
               m.strFieldBarcode AS EIDSSLocalOrFieldSampleID,
               testNameType.name AS TestNameTypeName,
               testStatusType.name AS TestStatusTypeName,
               testResultType.name AS TestResultTypeName,
               testCategoryType.name AS TestCategoryTypeName,
               m.datAccession AS AccessionDate,
               functionalArea.name AS FunctionalAreaName,
               m.idfsAccessionCondition AS AccessionConditionTypeID,
               m.idfsSampleStatus AS SampleStatusTypeID,
               (CASE
                    WHEN m.blnAccessioned = 0
                         AND m.idfsAccessionCondition IS NULL THEN
                        'Un-accessioned'
                    WHEN m.idfsSampleStatus IS NULL THEN
                        accessionConditionType.name
                    WHEN m.idfsSampleStatus = 10015007 --In Repository
               THEN
                        accessionConditionType.name
                    ELSE
                        sampleStatusType.name
                END
               ) AS AccessionConditionOrSampleStatusTypeName,
               m.strCondition AS AccessionComment,
               a.strAnimalCode AS EIDSSAnimalID,
               ISNULL(
               (
                   SELECT COUNT(NULLIF(tom2.idfTransferOUT, 0))
                   FROM dbo.tlbTransferOutMaterial tom2
                   WHERE tom2.idfMaterial = m.idfMaterial
                         AND tom2.intRowStatus = 0
               ),
               0
                     ) AS TransferCount,
               tro.idfTransferOut AS TransferID,
               t.idfHumanCase AS HumanDiseaseReportID,
               t.idfVetCase AS VeterinaryDiseaseReportID,
               t.idfMonitoringSession AS MonitoringSessionID,
               t.idfVector AS VectorID,
               t.intRowStatus AS RowStatus,
               1 AS ReadPermissionIndicator,
               1 AS AccessToPersonalDataPermissionIndicator,
               1 AS AccessToGenderAndAgeDataPermissionIndicator,
               1 AS WritePermissionIndicator,
               1 AS DeletePermissionIndicator,
               0 AS RowAction,
               0 AS RowSelectionIndicator,
               COUNT(*) OVER () AS TotalRowCount,
               @InProgressCount AS InProgressCount
        FROM @FinalResultsDedup res
            INNER JOIN dbo.tlbTesting t
                ON t.idfTesting = res.ID
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                ON testStatusType.idfsReference = t.idfsTestStatus
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) disease
                ON disease.idfsReference = t.idfsDiagnosis
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                ON sampleType.idfsReference = m.idfsSampleType
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                ON sampleStatusType.idfsReference = m.idfsSampleStatus
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                ON accessionConditionType.idfsReference = m.idfsAccessionCondition
            LEFT JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = m.idfMaterial
                   AND tom.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOUT tro
                ON tro.idfTransferOut = tom.idfTransferOut
                   AND tro.intRowStatus = 0
            LEFT JOIN dbo.tlbAnimal a
                ON a.idfAnimal = m.idfAnimal
                   AND a.intRowStatus = 0
            LEFT JOIN dbo.tlbDepartment d
                ON d.idfDepartment = m.idfInDepartment
                   AND d.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000164) functionalArea
                ON functionalArea.idfsReference = d.idfsDepartmentName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                ON testNameType.idfsReference = t.idfsTestName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                ON testResultType.idfsReference = t.idfsTestResult
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                ON testCategoryType.idfsReference = t.idfsTestCategory;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_TRANSFER_ADVANCED_SEARCH_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_TRANSFER_ADVANCED_SEARCH_GETList
--
-- Description:	Get transferred advanced search list for the laboratory module use case LUC13.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     02/18/2019 Initial relase.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     10/07/2019 Removed @CampaignID variable; just use EIDSSReportCampaignSessionID.
-- Stephen Long     10/21/2019 Added accession indicator and test status type ID to the list of 
--                             fields.
-- Stephen Long     01/22/2020 Converted site ID to site list for site filtration.
-- Stephen Long     03/11/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     04/07/2020 Added test name type ID to the model.
-- Stephen Long     04/15/2020 Changed select from table to tlbTransferOUT instead of tlbMaterial.
-- Stephen Long     04/23/2020 Correction on disease ID and disease name; add vector surveillance 
--                             session.
-- Stephen Long     04/26/2020 Added sent to organization ID to the model.
-- Stephen Long     05/06/2020 Added test started date and test category type name to the model.
-- Stephen Long     06/24/2020 Added external test check to the test left join.
-- Stephen Long     08/25/2020 Added criteria to ignore time on date betweens.
-- Stephen Long     09/02/2020 Changed accessioned indicator from int to varchar to handle searches
--                             with un-accessioned and accessioned samples in the same query.
-- Stephen Long     10/30/2020 Remove unneeded joins.
-- Stephen Long     11/28/2020 Added configurable site filtration rules.
-- Stephen Long     12/16/2020 Changed join for vector surveillance session diseases to the sample
--                             table.
-- Stephen Long     12/23/2020 Correction on accession indicator list where criteria.
-- Stephen Long     12/31/2020 Change function on reference data to handle inactive records.
-- Stephen Long     01/03/2020 Added option recompile to select queries.
-- Stephen Long     01/21/2021 Changed counts to use group by in sub-query instead of count 
--                             distinct and added with recompile to handle number of nullable 
--                             parameters.
-- Stephen Long     01/24/2021 Correct where criteria on accession indicator list.
-- Mark Wilson		08/16/2021 Join tlbMonitoringSessionToDiagnosis to get diagnosis
-- Stephen Long     09/25/2021 Added new pagination and order by.
-- Stephen Long     10/14/2021 Changed report or session type ID to bigint.
-- Stephen Long     12/08/2021 Changed pagination logic and removed option recompile.
-- Stephen Long     12/15/2021 Added configurable filtration rules.
-- Stephen Long     02/10/2022 Replaced joins for monitoring session and vector session
--                             disease references to improve performance.
-- Stephen Long     03/24/2022 Removed primary key from final results table variable.
-- Stephen Long     05/17/2022 Removed primary key from monitoring and vector session disease 
--                             table variables.
-- Stephen Long     05/20/2022 Added string agg to session diseases.
-- Mike Kornegay	06/14/2022 Added new additional SessionCategoryID for Vet Avian / Vet Livestock 
--                             breakout.
-- Stephen Long     07/26/2022 Updated case statement on disease id and name.
-- Stephen Long     08/11/2022 Changed monitoring session disease join from inner to left.
-- Stephen Long     08/24/2022 Added test name type name parameter and where criteria against test 
--                             requested.
-- Stephen Long     08/26/2022 Added additional checks on accession and entered date range checks.
-- Stephen Long     10/14/2022 Changed monitoring session disease function to monitoring session
--                             to sample disease function.
-- Stephen Long     10/18/2022 Added test disease ID to the query.
-- Stephen Long     12/29/2022 Removed sorting and pagination logic; business decision so records
--                             pending save could be shown at the top of the list prior to saving.
-- Stephen Long     01/12/2023 Updated for site filtration queries.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_TRANSFER_ADVANCED_SEARCH_GETList]
(
    @LanguageID NVARCHAR(50),
    @ReportOrSessionTypeID BIGINT = NULL,
    @SurveillanceTypeID BIGINT = NULL,
    @SampleStatusTypeList VARCHAR(MAX) = NULL,
    @AccessionedIndicatorList VARCHAR(3) = NULL,
    @EIDSSLocalOrFieldSampleID NVARCHAR(200) = NULL,
    @EIDSSReportCampaignOrSessionID NVARCHAR(200) = NULL,
    @SentToOrganizationID BIGINT = NULL,
    @TransferredToOrganizationID BIGINT = NULL,
    @EIDSSTransferID NVARCHAR(200) = NULL,
    @ResultsReceivedFromID BIGINT = NULL,
    @DateFrom DATETIME = NULL,
    @DateTo DATETIME = NULL,
    @EIDSSLaboratorySampleID NVARCHAR(200) = NULL,
    @SampleTypeID BIGINT = NULL,
    @TestNameTypeID BIGINT = NULL,
    @TestNameTypeName NVARCHAR(200) = NULL,
    @DiseaseID BIGINT = NULL,
    @TestStatusTypeID BIGINT = NULL,
    @TestResultTypeID BIGINT = NULL,
    @TestResultDateFrom DATETIME = NULL,
    @TestResultDateTo DATETIME = NULL,
    @PatientName NVARCHAR(200) = NULL,
    @FarmOwnerName NVARCHAR(200) = NULL,
    @SpeciesTypeID BIGINT = NULL,
    @TransferList VARCHAR(MAX) = NULL,
    @UserID BIGINT,
    @UserEmployeeID BIGINT,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT = NULL,
    @UserSiteGroupID BIGINT = NULL
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @MonitoringSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @VectorSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL,
        SampleID BIGINT NOT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID BIGINT NOT NULL,
        SampleID BIGINT NOT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @Favorites XML;

    BEGIN TRY
        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        SET @Favorites =
        (
            SELECT PreferenceDetail
            FROM dbo.UserPreference Laboratory
            WHERE idfUserID = @UserID
                  AND ModuleConstantID = 10508006
                  AND intRowStatus = 0
        );

        INSERT INTO @MonitoringSessionDiseases
        SELECT SampleID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames
        FROM dbo.FN_LAB_MONITORING_SESSION_TO_SAMPLE_DISEASES_GET(@LanguageID)
        GROUP BY SampleID;

        INSERT INTO @VectorSessionDiseases
        SELECT VectorSurveillanceSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, ';') AS DiseaseNames
        FROM dbo.FN_LAB_VECTOR_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY VectorSurveillanceSessionID;

        INSERT INTO @Results
        SELECT tr.idfTransferOut,
               m.idfMaterial,
               1,
               1,
               1,
               1,
               1
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = tom.idfMaterial
                   AND m.intRowStatus = 0
        WHERE tr.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          tr.idfSendFromOffice = @UserOrganizationID
                          OR tr.idfSendToOffice = @UserOrganizationID
                      )
                      OR @UserOrganizationID IS NULL
                  )
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  );

        -- =======================================================================================
        -- CONFIGURABLE FILTRATION RULES
        -- 
        -- Apply configurable filtration rules for use case SAUC34. Some of these rules may 
        -- overlap the non-configurable rules.
        -- =======================================================================================
        --
        -- Apply at the user's site group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut,
               m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = tom.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = tr.idfsSite
            INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                ON userSiteGroup.idfsSite = @UserSiteID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE tr.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut,
               m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = tom.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = tr.idfsSite
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE tr.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's employee group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut,
               m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = tom.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = tr.idfsSite
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE tr.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's ID level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut,
               m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = tom.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = tr.idfsSite
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE tr.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut,
               m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = tom.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup sgs
                ON sgs.idfsSite = @UserSiteID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE tr.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND sgs.idfsSite = tr.idfsSite;

        -- 
        -- Apply at the user's site level, granted by a site.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut,
               m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = tom.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE tr.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND a.GrantingActorSiteID = tr.idfsSite;

        -- 
        -- Apply at the user's employee group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut,
               m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = tom.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE tr.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND a.GrantingActorSiteID = tr.idfsSite;

        -- 
        -- Apply at the user's ID level, granted by a site.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut,
               m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = tom.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE tr.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND a.GrantingActorSiteID = tr.idfsSite;

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT tr.idfTransferOut
            FROM dbo.tlbTransferOUT tr
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = tr.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE tr.intRowStatus = 0
                  AND oa.idfsObjectOperation = 10059003 -- Read permission
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut,
               tom.idfMaterial,
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = tr.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = tr.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = tr.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = tr.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = tr.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = tom.idfMaterial
                   AND m.intRowStatus = 0
        WHERE tr.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserGroupSitePermissions WHERE SiteID = tr.idfsSite
        )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  );

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbTransferOUT tr
                ON tr.idfTransferOut = res.ID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = tr.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003; -- Read permission

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut,
               tom.idfMaterial,
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = tr.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = tr.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = tr.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = tr.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = tr.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = tom.idfMaterial
                   AND m.intRowStatus = 0
        WHERE tr.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserSitePermissions WHERE SiteID = tr.idfsSite
        )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  );

        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT tr.idfTransferOut
            FROM dbo.tlbTransferOUT tr
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = tr.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        INSERT INTO @FinalResults
        SELECT tr.idfTransferOut,
               m.idfMaterial,
               MAX(res.ReadPermissionIndicator),
               MAX(res.AccessToPersonalDataPermissionIndicator),
               MAX(res.AccessToGenderAndAgeDataPermissionIndicator),
               MAX(res.WritePermissionIndicator),
               MAX(res.DeletePermissionIndicator)
        FROM @Results res
            INNER JOIN dbo.tlbTransferOUT tr
                ON tr.idfTransferOut = res.ID
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = tom.idfMaterial
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnExternalTest = 1
            LEFT JOIN dbo.tlbHumanCase hc
                ON hc.idfHumanCase = m.idfHumanCase
                   AND hc.intRowStatus = 0
            LEFT JOIN dbo.tlbVetCase vc
                ON vc.idfVetCase = m.idfVetCase
                   AND vc.intRowStatus = 0
            LEFT JOIN dbo.tlbMonitoringSession ms
                ON ms.idfMonitoringSession = m.idfMonitoringSession
                   AND ms.intRowStatus = 0
            LEFT JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                ON msd.idfMonitoringSession = ms.idfMonitoringSession
                   AND msd.intRowStatus = 0
            LEFT JOIN @VectorSessionDiseases vsDiseases
                ON vsDiseases.ID = m.idfVectorSurveillanceSession
            LEFT JOIN dbo.tlbCampaign c
                ON c.idfCampaign = ms.idfCampaign
                   AND c.intRowStatus = 0
            LEFT JOIN dbo.tlbSpecies species
                ON species.idfSpecies = m.idfSpecies
                   AND species.intRowStatus = 0
        WHERE res.ReadPermissionIndicator IN ( 1, 3, 5 )
              AND (
                      (tr.idfTransferOut IN (
                                                SELECT CAST([Value] AS BIGINT)
                                                FROM dbo.FN_GBL_SYS_SplitList(@TransferList, NULL, ',')
                                            )
                      )
                      OR (@TransferList IS NULL)
                  )
              AND (
                      (
                          @ReportOrSessionTypeID = 10012001 --Human Disease Report
                          AND (
                                  (m.idfHumanCase IS NOT NULL)
                                  OR (
                                         m.idfMonitoringSession IS NOT NULL
                                         AND ms.SessionCategoryID = 10502001 --Human Active Surveillance Session
                                     )
                              )
                      )
                      OR (
                             @ReportOrSessionTypeID = 10012006 --Vector Surveillance Session
                             AND m.idfVectorSurveillanceSession IS NOT NULL
                         )
                      OR (
                             @ReportOrSessionTypeID = 10012005 --Veterinary Disease Report
                             AND (
                                     (m.idfVetCase IS NOT NULL)
                                     OR (
                                            m.idfMonitoringSession IS NOT NULL
                                            AND ms.SessionCategoryID IN ( 10502002, 10502009 ) --Veterinary Active Surveillance Session (Avian and Livestock)
                                        )
                                 )
                         )
                      OR (@ReportOrSessionTypeID IS NULL)
                  )
              AND (
                      (
                          @SurveillanceTypeID = 4578940000001 --Active
                          AND (
                                  m.idfMonitoringSession IS NOT NULL
                                  OR m.idfVectorSurveillanceSession IS NOT NULL
                              )
                      )
                      OR (
                             @SurveillanceTypeID = 4578940000002 --Passive
                             AND (
                                     m.idfHumanCase IS NOT NULL
                                     OR m.idfVetCase IS NOT NULL
                                 )
                         )
                      OR (@SurveillanceTypeID IS NULL)
                  )
              AND (
                      (
                          (
                              m.blnAccessioned = @AccessionedIndicatorList
                              AND m.idfsAccessionCondition IS NULL
                          )
                          OR (
                                 @AccessionedIndicatorList IS NULL
                                 AND @SampleStatusTypeList IS NULL
                             )
                      )
                      OR (
                             (
                                 (m.idfsSampleStatus IN (
                                                            SELECT CAST([Value] AS BIGINT)
                                                            FROM dbo.FN_GBL_SYS_SplitList(
                                                                                             @SampleStatusTypeList,
                                                                                             NULL,
                                                                                             ','
                                                                                         )
                                                        )
                                 )
                                 OR (
                                        m.idfsAccessionCondition IN (
                                                                        SELECT CAST([Value] AS BIGINT)
                                                                        FROM dbo.FN_GBL_SYS_SplitList(
                                                                                                         @SampleStatusTypeList,
                                                                                                         NULL,
                                                                                                         ','
                                                                                                     )
                                                                    )
                                        AND (
                                                m.idfsSampleStatus IS NULL
                                                OR m.idfsSampleStatus = 10015007 --In Repository
                                            )
                                    )
                             )
                             OR (
                                    @SampleStatusTypeList IS NULL
                                    AND @AccessionedIndicatorList IS NULL
                                )
                         )
                  )
              AND (
                      m.idfSendToOffice = @SentToOrganizationID
                      OR @SentToOrganizationID IS NULL
                  )
              AND (
                      tr.idfSendToOffice = @TransferredToOrganizationID
                      OR @TransferredToOrganizationID IS NULL
                  )
              AND (
                      t.idfTestedByOffice = @ResultsReceivedFromID
                      OR @ResultsReceivedFromID IS NULL
                  )
              AND (
                      m.idfsSampleType = @SampleTypeID
                      OR @SampleTypeID IS NULL
                  )
              AND (
                      t.idfsTestName = @TestNameTypeID
                      OR @TestNameTypeID IS NULL
                      OR tr.TestRequested LIKE '%' + @TestNameTypeName + '%'
                      OR @TestNameTypeName IS NULL
                  )
              AND (
                      msd.idfsDiagnosis = @DiseaseID
                      OR @DiseaseID IN (
                                           SELECT CAST([Value] AS BIGINT)
                                           FROM dbo.FN_GBL_SYS_SplitList(vsDiseases.DiseaseIdentifiers, NULL, ',')
                                       )
                      OR m.DiseaseID = @DiseaseID
                      OR @DiseaseID IS NULL
                  )
              AND (
                      t.idfsTestStatus = @TestStatusTypeID
                      OR @TestStatusTypeID IS NULL
                  )
              AND (
                      t.idfsTestResult = @TestResultTypeID
                      OR @TestResultTypeID IS NULL
                  )
              AND (
                      species.idfsSpeciesType = @SpeciesTypeID
                      OR @SpeciesTypeID IS NULL
                  )
              AND (
                      (t.datConcludedDate
              BETWEEN @TestResultDateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @TestResultDateTo)))
                      )
                      OR (
                             @TestResultDateFrom IS NULL
                             OR @TestResultDateTo IS NULL
                         )
                  )
              AND (
                      (
                          m.strCalculatedCaseID LIKE '%' + @EIDSSReportCampaignOrSessionID + '%'
                          OR c.strCampaignID LIKE '%' + @EIDSSReportCampaignOrSessionID + '%'
                      )
                      OR (@EIDSSReportCampaignOrSessionID IS NULL)
                  )
              AND (
                      (m.strCalculatedHumanName LIKE '%' + @PatientName + '%')
                      OR (@PatientName IS NULL)
                  )
              AND (
                      m.strCalculatedHumanName LIKE '%' + @FarmOwnerName + '%'
                      OR @FarmOwnerName IS NULL
                  )
              AND (
                      m.strFieldBarcode LIKE '%' + @EIDSSLocalOrFieldSampleID + '%'
                      OR @EIDSSLocalOrFieldSampleID IS NULL
                  )
              AND (
                      tr.strBarcode LIKE '%' + @EIDSSTransferID + '%'
                      OR @EIDSSTransferID IS NULL
                  )
              AND (
                      m.strBarcode LIKE '%' + @EIDSSLaboratorySampleID + '%'
                      OR @EIDSSLaboratorySampleID IS NULL
                  )
        GROUP BY tr.idfTransferOut,
                 m.idfMaterial;

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        DECLARE @InProgressCount INT = (
                                           SELECT COUNT(res.ID)
                                           FROM @FinalResults res
                                               INNER JOIN dbo.tlbTransferOUT tr
                                                   ON tr.idfTransferOut = res.ID
                                           WHERE tr.idfsTransferStatus IN (   10001003, --In Progress
                                                                              10001006  --Amended
                                                                          )
                                       );

        SELECT tr.idfTransferOut AS TransferID,
               tr.strBarcode AS EIDSSTransferID,
               m.idfMaterial AS TransferredOutSampleID,
               (
                   SELECT TOP 1
                       idfMaterial
                   FROM dbo.tlbMaterial
                   WHERE idfRootMaterial = m.idfMaterial
                         AND intRowStatus = 0
                         AND idfsSampleKind = 12675430000000 --Transferred in
               ) AS TransferredInSampleID,
               CASE
                   WHEN f.SampleID IS NULL THEN
                       0
                   ELSE
                       1
               END AS FavoriteIndicator,
               m.strCalculatedCaseID AS EIDSSReportOrSessionID,
               CASE
                   WHEN res.AccessToPersonalDataPermissionIndicator = 0 THEN
                       '********'
                   ELSE
                       m.strCalculatedHumanName
               END AS PatientOrFarmOwnerName,
               m.strBarcode AS EIDSSLaboratorySampleID,
               tr.idfSendToOffice AS TransferredToOrganizationID,
               transferredToOrganization.[FullName] AS TransferredToOrganizationName,
               tr.idfSendFromOffice AS TransferredFromOrganizationID,
               tr.datSendDate AS TransferDate,
               tr.TestRequested,
               t.idfTesting AS TestID,
               t.idfsTestName AS TestNameTypeID,
               testNameType.name AS TestNameTypeName,
               t.idfsTestResult AS TestResultTypeID,
               testResultType.name AS TestResultTypeName,
               t.idfsTestStatus AS TestStatusTypeID,
               testStatusType.name AS TestStatusTypeName,
               t.idfsTestCategory AS TestCategoryTypeID,
               t.idfsDiagnosis AS TestDiseaseID,
               t.datStartedDate AS StartedDate,
               t.datConcludedDate AS ResultDate,
               t.strContactPerson AS ContactPersonName,
               m.strFieldBarcode AS EIDSSLocalOrFieldSampleID,
               sampleType.name AS SampleTypeName,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       CAST(m.DiseaseID AS NVARCHAR(MAX))
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseIdentifiers
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseIdentifiers
                   ELSE
                       ''
               END AS DiseaseID,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       diseaseName.name
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseNames
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseNames
                   ELSE
                       ''
               END AS DiseaseName,
               m.datAccession AS AccessionDate,
               m.idfInDepartment AS FunctionalAreaID,
               functionalArea.name AS FunctionalAreaName,
               m.blnAccessioned AS AccessionIndicator,
               m.idfsAccessionCondition AS AccessionConditionTypeID,
               m.idfsSampleStatus AS SampleStatusTypeID,
               (CASE
                    WHEN m.blnAccessioned = 0
                         AND m.idfsAccessionCondition IS NULL THEN
                        'Un-accessioned'
                    WHEN m.idfsSampleStatus IS NULL THEN
                        accessionConditionType.name
                    WHEN m.idfsSampleStatus = 10015007 --In Repository
               THEN
                        accessionConditionType.name
                    ELSE
                        sampleStatusType.name
                END
               ) AS AccessionConditionOrSampleStatusTypeName,
               m.strCondition AS AccessionComment,
               tr.strNote AS PurposeOfTransfer,
               tr.idfsSite AS TransferredFromOrganizationSiteID,
               m.idfSendToOffice AS SentToOrganizationID,
               tr.idfSendByPerson AS SentByPersonID,
               tr.idfsTransferStatus AS TransferStatusTypeID,
               tr.intRowStatus AS RowStatus,
               a.strAnimalCode AS EIDSSAnimalID,
               IIF(
                  (
                      SELECT COUNT(t2.idfTesting)
                      FROM dbo.tlbTesting t2
                      WHERE t2.idfsTestStatus IN (   10001003,
                                                              --In Progress
                                                     10001004,
                                                              --Preliminary
                                                     10001005 --Not Started
                                                 )
                            AND t2.idfMaterial = m.idfMaterial
                  ) > 0,
                  1,
                  0) AS TestAssignedIndicator,
               (CASE
                    WHEN transferredToOrganization.idfsSite IS NULL THEN
                        1
                    ELSE
                        0
                END
               ) AS NonEIDSSLaboratoryIndicator,
               CASE
                   WHEN res.ReadPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.ReadPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.ReadPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.ReadPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.ReadPermissionIndicator)
               END AS ReadPermissionindicator,
               CASE
                   WHEN res.AccessToPersonalDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.AccessToPersonalDataPermissionIndicator)
               END AS AccessToPersonalDataPermissionIndicator,
               CASE
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.AccessToGenderAndAgeDataPermissionIndicator)
               END AS AccessToGenderAndAgeDataPermissionIndicator,
               CASE
                   WHEN res.WritePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.WritePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.WritePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.WritePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.WritePermissionIndicator)
               END AS WritePermissionIndicator,
               CASE
                   WHEN res.DeletePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.DeletePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.DeletePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.DeletePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.DeletePermissionIndicator)
               END AS DeletePermissionIndicator,
               0 AS RowAction,
               0 AS RowSelectionIndicator,
               @InProgressCount AS InProgressCount,
               COUNT(*) OVER () AS TotalRowCount
        FROM @FinalResults res
            INNER JOIN dbo.tlbTransferOUT tr
                ON tr.idfTransferOut = res.ID
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.SampleID
                   AND m.intRowStatus = 0
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                ON sampleType.idfsReference = m.idfsSampleType
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnExternalTest = 1
            LEFT JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbAnimal a
                ON a.idfAnimal = m.idfAnimal
                   AND a.intRowStatus = 0
            LEFT JOIN @MonitoringSessionDiseases msDiseases
                ON msDiseases.ID = m.idfMaterial
                   AND m.idfMonitoringSession IS NOT NULL
            LEFT JOIN @VectorSessionDiseases vsDiseases
                ON vsDiseases.ID = m.idfVectorSurveillanceSession
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) diseaseName
                ON diseaseName.idfsReference = m.DiseaseID
            LEFT JOIN dbo.FN_GBL_Institution(@LanguageID) transferredToOrganization
                ON transferredToOrganization.idfOffice = tr.idfSendToOffice
                   AND transferredToOrganization.intRowStatus = 0
            LEFT JOIN dbo.tlbDepartment d
                ON d.idfDepartment = m.idfInDepartment
                   AND d.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000164) functionalArea
                ON functionalArea.idfsReference = d.idfsDepartmentName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                ON testNameType.idfsReference = t.idfsTestName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                ON testResultType.idfsReference = t.idfsTestResult
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                ON testStatusType.idfsReference = t.idfsTestStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                ON accessionConditionType.idfsReference = m.idfsAccessionCondition
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                ON sampleStatusType.idfsReference = m.idfsSampleStatus;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_TRANSFER_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_TRANSFER_GETList
--
-- Description:	Get laboratory transfer list for the various laboratory use cases.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     10/18/2018 Initial release.
-- Stephen Long     12/19/2018 Added pagination logic.
-- Stephen Long     01/25/2019 Added row selection indicator and corrected intRowStatus in where 
--                             clause to use sample table instead of testing table.
-- Stephen Long     01/30/2019 Added sample disease reference join, and removed the vector 
--                             surveillance session joins as they are no longer needed.
-- Stephen Long     02/09/2019 Added sample ID parameter.
-- Stephen Long     02/19/2019 Added test requested, disease ID and functional area to the select 
--                             list.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     08/19/2019 Added comma to sent by person name (last name ', ' first name).
-- Stephen Long     09/14/2019 Added pagination set 0 to bring back "all" records.
-- Stephen Long     10/21/2019 Added accession indicator and test status type ID to the list of 
--                             fields.
-- Stephen Long     01/22/2020 Added site list for site filtration.
-- Stephen Long     03/11/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     03/17/2020 Removed declined transfer status from inclusion in the list.
-- Stephen Long     03/30/2020 Changed criteria on transferred in sample left join.
-- Stephen Long     04/07/2020 Added test name type ID to model, and corrected test assigned 
--                             indicator.
-- Stephen Long     04/23/2020 Correction on disease ID and disease name; add vector surveillance 
--                             session.
-- Stephen Long     04/26/2020 Added sent to organization ID to the model.
-- Stephen Long     05/06/2020 Added test started date and test category type name to the model.
-- Stephen Long     06/09/2020 Added intRowStatus check on transferred from organization.
-- Stephen Long     06/24/2020 Added external test check to the test left join.
-- Jason Li			09/24/2020 Remove blnExternalTest --AND t.blnExternalTest = 1 at line 224
-- Stephen Long     11/28/2020 Added configurable site filtration rules.
-- Stephen Long     12/16/2020 Changed join for vector surveillance session diseases to the sample
--                             table.
-- Stephen Long     12/31/2020 Change function on reference data to handle inactive records.
-- Mark Wilson		08/17/2021 Join tlbMonitoringSessionToDiagnosis to get diagnosis
-- Stephen Long     09/25/2021 Added new pagination and order by.
-- Stephen Long     11/18/2021 Added test status type name to the query.
-- Stephen Long     12/08/2021 Changed pagination logic and removed option recompile.
-- Stephen Long     02/03/2022 Corrected monitoring session to diagnosis join.
-- Stephen Long     02/10/2022 Replaced joins for monitoring session and vector session
--                             disease references to improve performance.
-- Stephen Long     03/24/2022 Added final results table variable to account for duplicates that 
--                             may return from filtration rules.
-- Stephen Long     05/17/2022 Removed primary key from monitoring and vector session disease 
--                             table variables.
-- Stephen Long     05/20/2022 Added string agg to session diseases.
-- Stephen Long     07/26/2022 Updated case statement on disease id and name.
-- Stephen Long     08/12/2022 Changed default sort column to EIDSSTransferID.
-- Stephen Long     10/14/2022 Changed monitoring session disease function to monitoring session
--                             to sample disease function.
-- Stephen Long     10/18/2022 Added test disease ID to the query.
-- Stephen Long     12/29/2022 Removed sorting and pagination logic; business decision so records
--                             pending save could be shown at the top of the list prior to saving.
-- Stephen Long     01/12/2023 Updated for site filtration queries.
--
-- Testing Code:
/*
DECLARE	@return_value int

EXEC	@return_value = [dbo].[USP_LAB_TRANSFER_GETList]
		@LanguageID = N'en-US',
		@UserID = 161287150000872, --rykermase
		@UserEmployeeID = 420664190000872,
		@UserSiteID = 864,
		@UserOrganizationID = 758210000000,
		@UserSiteGroupID = NULL,
		@Page = 1,
		@PageSize = 10,
		@SortColumn = N'EIDSSLaboratorySampleID',
		@SortOrder = N'DESC'

SELECT	'Return Value' = @return_value

GO
*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_TRANSFER_GETList]
(
    @LanguageID NVARCHAR(50),
    @SampleID BIGINT = NULL,
    @UserID BIGINT,
    @UserEmployeeID BIGINT,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT = NULL,
    @UserSiteGroupID BIGINT = NULL
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @MonitoringSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @VectorSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL,
        SampleID BIGINT NOT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID BIGINT NOT NULL,
        SampleID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @TransferredInSampleIdentifiers TABLE
    (
        SampleID BIGINT NOT NULL,
        TransferredInSampleID BIGINT NULL
    );
    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @Favorites XML;

    BEGIN TRY
        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        SET @Favorites =
        (
            SELECT PreferenceDetail
            FROM dbo.UserPreference Laboratory
            WHERE idfUserID = @UserID
                  AND ModuleConstantID = 10508006
                  AND intRowStatus = 0
        );

        INSERT INTO @MonitoringSessionDiseases
        SELECT SampleID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames
        FROM dbo.FN_LAB_MONITORING_SESSION_TO_SAMPLE_DISEASES_GET(@LanguageID)
        GROUP BY SampleID;

        INSERT INTO @VectorSessionDiseases
        SELECT VectorSurveillanceSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, ';') AS DiseaseNames
        FROM dbo.FN_LAB_VECTOR_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY VectorSurveillanceSessionID;

        IF @SampleID IS NULL
        BEGIN
            INSERT INTO @Results
            SELECT tr.idfTransferOut,
                   tom.idfMaterial,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbTransferOUT tr
                INNER JOIN dbo.tlbTransferOutMaterial tom
                    ON tom.idfTransferOut = tr.idfTransferOut
                       AND tom.intRowStatus = 0
            WHERE (
                      tr.idfSendFromOffice = @UserOrganizationID
                      OR tr.idfSendToOffice = @UserOrganizationID
                  )
                  AND (tr.idfsTransferStatus IN (   10001003,
                                                             --In Progress
                                                    10001006 --Amended
                                                )
                      )
                  AND tr.intRowStatus = 0;

            -- =======================================================================================
            -- CONFIGURABLE FILTRATION RULES
            -- 
            -- Apply configurable filtration rules for use case SAUC34. Some of these rules may 
            -- overlap the non-configurable rules.
            -- =======================================================================================
            --
            -- Apply at the user's site group level, granted by a site group.
            --
            INSERT INTO @Results
            SELECT tr.idfTransferOut,
                   tom.idfMaterial,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.tlbTransferOUT tr
                INNER JOIN dbo.tlbTransferOutMaterial tom
                    ON tom.idfTransferOut = tr.idfTransferOut
                       AND tom.intRowStatus = 0
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = tr.idfsSite
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = @UserSiteGroupID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
            WHERE tr.intRowStatus = 0
                  AND @UserSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site level, granted by a site group.
            --
            INSERT INTO @Results
            SELECT tr.idfTransferOut,
                   tom.idfMaterial,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.tlbTransferOUT tr
                INNER JOIN dbo.tlbTransferOutMaterial tom
                    ON tom.idfTransferOut = tr.idfTransferOut
                       AND tom.intRowStatus = 0
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = tr.idfsSite
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
            WHERE tr.intRowStatus = 0
                  AND ar.GrantingActorSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's employee group level, granted by a site group.
            --
            INSERT INTO @Results
            SELECT tr.idfTransferOut,
                   tom.idfMaterial,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.tlbTransferOUT tr
                INNER JOIN dbo.tlbTransferOutMaterial tom
                    ON tom.idfTransferOut = tr.idfTransferOut
                       AND tom.intRowStatus = 0
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = tr.idfsSite
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
            WHERE tr.intRowStatus = 0
                  AND ar.GrantingActorSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's ID level, granted by a site group.
            --
            INSERT INTO @Results
            SELECT tr.idfTransferOut,
                   tom.idfMaterial,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.tlbTransferOUT tr
                INNER JOIN dbo.tlbTransferOutMaterial tom
                    ON tom.idfTransferOut = tr.idfTransferOut
                       AND tom.intRowStatus = 0
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = tr.idfsSite
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
            WHERE tr.intRowStatus = 0
                  AND ar.GrantingActorSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site group level, granted by a site.
            --
            INSERT INTO @Results
            SELECT tr.idfTransferOut,
                   tom.idfMaterial,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.tlbTransferOUT tr
                INNER JOIN dbo.tlbTransferOutMaterial tom
                    ON tom.idfTransferOut = tr.idfTransferOut
                       AND tom.intRowStatus = 0
                INNER JOIN dbo.tflSiteToSiteGroup sgs
                    ON sgs.idfSiteGroup = @UserSiteGroupID
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
            WHERE tr.intRowStatus = 0
                  AND @UserSiteGroupID IS NOT NULL
                  AND sgs.idfsSite = tr.idfsSite;

            -- 
            -- Apply at the user's site level, granted by a site.
            --
            INSERT INTO @Results
            SELECT tr.idfTransferOut,
                   tom.idfMaterial,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.AccessRule ar
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.tlbTransferOUT tr
                    ON tr.intRowStatus = 0
                INNER JOIN dbo.tlbTransferOutMaterial tom
                    ON tom.idfTransferOut = tr.idfTransferOut
                       AND tom.intRowStatus = 0
            WHERE ar.GrantingActorSiteID IS NOT NULL
                  AND tr.idfsSite = ar.GrantingActorSiteID;

            -- 
            -- Apply at the user's employee group level, granted by a site.
            --
            INSERT INTO @Results
            SELECT tr.idfTransferOut,
                   tom.idfMaterial,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.AccessRule ar
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.tlbTransferOUT tr
                    ON tr.intRowStatus = 0
                INNER JOIN dbo.tlbTransferOutMaterial tom
                    ON tom.idfTransferOut = tr.idfTransferOut
                       AND tom.intRowStatus = 0
            WHERE ar.GrantingActorSiteID IS NOT NULL
                  AND tr.idfsSite = ar.GrantingActorSiteID;

            -- 
            -- Apply at the user's ID level, granted by a site.
            --
            INSERT INTO @Results
            SELECT tr.idfTransferOut,
                   tom.idfMaterial,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.AccessRule ar
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.tlbTransferOUT tr
                    ON tr.intRowStatus = 0
                INNER JOIN dbo.tlbTransferOutMaterial tom
                    ON tom.idfTransferOut = tr.idfTransferOut
                       AND tom.intRowStatus = 0
            WHERE ar.GrantingActorSiteID IS NOT NULL
                  AND tr.idfsSite = ar.GrantingActorSiteID;

            -- =======================================================================================
            -- SITE FILTRATION RULES
            --
            -- Apply site filtration rules from use case SAUC29.
            -- =======================================================================================
            -- 
            -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
            -- as all records have been pulled above with or without site filtration rules applied.
            --
            DELETE FROM @Results
            WHERE EXISTS
            (
                SELECT tr.idfTransferOut
                FROM dbo.tlbTransferOUT tr
                    INNER JOIN dbo.tstObjectAccess oa
                        ON oa.idfsObjectID = tr.idfsSite
                           AND oa.intRowStatus = 0
                    INNER JOIN dbo.tlbEmployeeGroup eg
                        ON eg.idfsSite = @UserSiteID
                           AND eg.intRowStatus = 0
                    INNER JOIN dbo.trtBaseReference br
                        ON br.idfsBaseReference = eg.idfEmployeeGroup
                           AND br.intRowStatus = 0
                           AND br.blnSystem = 1
                WHERE tr.intRowStatus = 0
                      AND oa.idfsObjectOperation = 10059003 -- Read permission
                      AND oa.intPermission = 1 -- Deny permission
                      AND oa.idfsObjectType = 10060011 -- Site
                      AND oa.idfActor = eg.idfEmployeeGroup
            );

            --
            -- Apply level 1 site filtration rules for an employee's associated user group(s).  
            -- Allows and denies will supersede level 0.
            --
            DELETE res
            FROM @Results res
                INNER JOIN dbo.tlbTransferOUT tr
                    ON tr.idfTransferOut = res.ID
                INNER JOIN @UserGroupSitePermissions ugsp
                    ON ugsp.SiteID = tr.idfsSite
            WHERE ugsp.Permission = 2 -- Deny permission
                  AND ugsp.PermissionTypeID = 10059003 -- Read permission
                  AND NOT EXISTS (
                              SELECT * FROM @UserSitePermissions WHERE SiteID = tr.idfsSite
            );

            --
            -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
            -- will supersede level 1.
            --
            DELETE FROM @Results
            WHERE EXISTS
            (
                SELECT tr.idfTransferOut
                FROM dbo.tlbTransferOUT tr
                    INNER JOIN @UserSitePermissions usp
                        ON usp.SiteID = tr.idfsSite
                WHERE usp.Permission = 4 -- Deny permission
                      AND usp.PermissionTypeID = 10059003 -- Read permission
            );

            INSERT INTO @FinalResults
            SELECT res.ID,
                   res.SampleID,
                   MAX(res.ReadPermissionIndicator),
                   MAX(res.AccessToPersonalDataPermissionIndicator),
                   MAX(res.AccessToGenderAndAgeDataPermissionIndicator),
                   MAX(res.WritePermissionIndicator),
                   MAX(res.DeletePermissionIndicator)
            FROM @Results res
                INNER JOIN dbo.tlbTransferOUT tr
                    ON tr.idfTransferOut = res.ID
                INNER JOIN dbo.tlbTransferOutMaterial tom
                    ON tom.idfTransferOut = tr.idfTransferOut
                       AND tom.intRowStatus = 0
            WHERE res.ReadPermissionIndicator IN ( 1, 3, 5 )
                  AND (
                          tr.idfSendFromOffice = @UserOrganizationID
                          OR tr.idfSendToOffice = @UserOrganizationID
                      )
                  AND (
                          tom.idfMaterial = @SampleID
                          OR @SampleID IS NULL
                      )
                  AND (tr.idfsTransferStatus IN (   10001003,
                                                             --In Progress
                                                    10001006 --Amended
                                                )
                      )
                  AND tr.intRowStatus = 0
            GROUP BY ID,
                     SampleID;
        END
        ELSE
        BEGIN
            INSERT INTO @FinalResults
            SELECT tr.idfTransferOut,
                   tom.idfMaterial,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbTransferOUT tr
                INNER JOIN dbo.tlbTransferOutMaterial tom
                    ON tom.idfTransferOut = tr.idfTransferOut
                       AND tom.intRowStatus = 0
            WHERE tom.idfMaterial = @SampleID
                  AND tr.intRowStatus = 0;
        END

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        DECLARE @InProgressCount INT = (
                                           SELECT COUNT(DISTINCT res.ID)
                                           FROM @FinalResults res
                                               INNER JOIN dbo.tlbTransferOUT tr
                                                   ON tr.idfTransferOut = res.ID
                                           WHERE tr.idfsTransferStatus IN (   10001003, --In Progress
                                                                              10001006  --Amended
                                                                          )
                                       );

        INSERT INTO @TransferredInSampleIdentifiers
        SELECT SampleID,
               transferredInSample.idfMaterial
        FROM @FinalResults
            INNER JOIN dbo.tlbMaterial AS transferredInSample
                ON transferredInSample.idfRootMaterial = SampleID
                   AND transferredInSample.intRowStatus = 0
                   AND transferredInSample.idfsSampleKind = 12675430000000; --Transferred in
        --GROUP BY SampleID,
        --         transferredInSample.idfMaterial;

        SELECT tr.idfTransferOut AS TransferID,
               tr.strBarcode AS EIDSSTransferID,
               m.idfMaterial AS TransferredOutSampleID,
               (
                   SELECT TOP 1
                       TransferredInSampleID
                   FROM @TransferredInSampleIdentifiers
                   WHERE SampleID = res.SampleID
               ) AS TransferredInSampleID,
               CASE
                   WHEN f.SampleID IS NULL THEN
                       0
                   ELSE
                       1
               END AS FavoriteIndicator,
               m.strCalculatedCaseID AS EIDSSReportOrSessionID,
               m.strCalculatedHumanName AS PatientOrFarmOwnerName,
               m.strBarcode AS EIDSSLaboratorySampleID,
               tr.idfSendToOffice AS TransferredToOrganizationID,
               transferredToOrganization.AbbreviatedName AS TransferredToOrganizationName,
               tr.idfSendFromOffice AS TransferredFromOrganizationID,
               tr.datSendDate AS TransferDate,
               tr.TestRequested,
               t.idfTesting AS TestID,
               t.idfsTestName AS TestNameTypeID,
               testNameType.name AS TestNameTypeName,
               t.idfsTestResult AS TestResultTypeID,
               testResultType.name AS TestResultTypeName,
               t.idfsTestStatus AS TestStatusTypeID,
               testStatusType.name AS TestStatusTypeName,
               t.idfsTestCategory AS TestCategoryTypeID,
               t.idfsDiagnosis AS TestDiseaseID,
               t.datStartedDate AS StartedDate,
               t.datConcludedDate AS ResultDate,
               t.strContactPerson AS ContactPersonName,
               m.strFieldBarcode AS EIDSSLocalOrFieldSampleID,
               sampleType.name AS SampleTypeName,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       CAST(m.DiseaseID AS NVARCHAR(MAX))
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseIdentifiers
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseIdentifiers
                   ELSE
                       ''
               END AS DiseaseID,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       diseaseName.name
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseNames
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseNames
                   ELSE
                       ''
               END AS DiseaseName,
               m.datAccession AS AccessionDate,
               m.idfInDepartment AS FunctionalAreaID,
               functionalArea.name AS FunctionalAreaName,
               m.blnAccessioned AS AccessionIndicator,
               m.idfsAccessionCondition AS AccessionConditionTypeID,
               m.idfsSampleStatus AS SampleStatusTypeID,
               CASE
                   WHEN m.blnAccessioned = 0
                        AND m.idfsAccessionCondition IS NULL THEN
                       'Un-accessioned'
                   WHEN m.idfsSampleStatus IS NULL THEN
                       accessionConditionType.name
                   WHEN m.idfsSampleStatus = 10015007 --In Repository
               THEN
                       accessionConditionType.name
                   ELSE
                       sampleStatusType.name
               END AS AccessionConditionOrSampleStatusTypeName,
               m.strCondition AS AccessionComment,
               tr.strNote AS PurposeOfTransfer,
               tr.idfsSite AS TransferredFromOrganizationSiteID,
               transferredToOrganization.idfsSite AS TransferredToOrganizationSiteID,
               m.idfSendToOffice AS SentToOrganizationID,
               tr.idfSendByPerson AS SentByPersonID,
               tr.idfsTransferStatus AS TransferStatusTypeID,
               tr.intRowStatus AS RowStatus,
               a.strAnimalCode AS EIDSSAnimalID,
               CASE
                   WHEN m.TestUnassignedIndicator = 1 THEN
                       0
                   ELSE
                       1
               END AS TestAssignedIndicator,
               CASE
                   WHEN transferredToOrganization.idfsSite IS NULL THEN
                       1
                   ELSE
                       0
               END AS NonEIDSSLaboratoryIndicator,
               CASE
                   WHEN res.ReadPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.ReadPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.ReadPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.ReadPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.ReadPermissionIndicator)
               END AS ReadPermissionindicator,
               CASE
                   WHEN res.AccessToPersonalDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.AccessToPersonalDataPermissionIndicator)
               END AS AccessToPersonalDataPermissionIndicator,
               CASE
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.AccessToGenderAndAgeDataPermissionIndicator)
               END AS AccessToGenderAndAgeDataPermissionIndicator,
               CASE
                   WHEN res.WritePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.WritePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.WritePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.WritePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.WritePermissionIndicator)
               END AS WritePermissionIndicator,
               CASE
                   WHEN res.DeletePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.DeletePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.DeletePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.DeletePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.DeletePermissionIndicator)
               END AS DeletePermissionIndicator,
               0 AS RowAction,
               0 AS RowSelectionIndicator,
               @InProgressCount AS InProgressCount,
               COUNT(*) OVER () AS TotalRowCount
        FROM @FinalResults res
            INNER JOIN dbo.tlbTransferOUT tr
                ON tr.idfTransferOut = res.ID
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.SampleID
                   AND m.intRowStatus = 0
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                ON sampleType.idfsReference = m.idfsSampleType
            INNER JOIN dbo.FN_GBL_Institution_Min(@LanguageID) transferredToOrganization
                ON transferredToOrganization.idfOffice = tr.idfSendToOffice
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnExternalTest = 1
            LEFT JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbAnimal a
                ON a.idfAnimal = m.idfAnimal
                   AND a.intRowStatus = 0
            LEFT JOIN @MonitoringSessionDiseases msDiseases
                ON msDiseases.ID = m.idfMaterial
                   AND m.idfMonitoringSession IS NOT NULL
            LEFT JOIN @VectorSessionDiseases vsDiseases
                ON vsDiseases.ID = m.idfVectorSurveillanceSession
                   AND m.idfVectorSurveillanceSession IS NOT NULL
            LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000019) diseaseName
                ON diseaseName.idfsReference = m.DiseaseID
            LEFT JOIN dbo.tlbDepartment d
                ON d.idfDepartment = m.idfInDepartment
                   AND d.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000164) functionalArea
                ON functionalArea.idfsReference = d.idfsDepartmentName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                ON testNameType.idfsReference = t.idfsTestName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                ON testResultType.idfsReference = t.idfsTestResult
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                ON testStatusType.idfsReference = t.idfsTestStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                ON accessionConditionType.idfsReference = m.idfsAccessionCondition
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                ON sampleStatusType.idfsReference = m.idfsSampleStatus;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_TRANSFER_SEARCH_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_TRANSFER_SEARCH_GETList
--
-- Description:	Get laboratory transfer list for the various laboratory use cases.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     02/21/2019 Initial release.
-- Stephen Long     07/09/2019 Added disease to wildcard search.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     10/21/2019 Added accession indicator and test status type ID to the list of 
--                             fields.
-- Stephen Long     01/22/2020 Added site list for site filtration.
-- Stephen Long     03/11/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     04/07/2020 Added test name type ID to the model.
-- Stephen Long     04/23/2020 Correction on disease ID and disease name; add vector surveillance 
--                             session.
-- Stephen Long     04/26/2020 Added sent to organization ID to the model.
-- Stephen Long     05/06/2020 Added test started date and test category type name to the model.
-- Stephen Long     06/07/2020 Added additional search fields to the where clause.
-- Stephen Long     06/24/2020 Added external test check to the test left join.
-- Stephen Long     11/29/2020 Added configurable site filtration rules.
-- Stephen Long     12/16/2020 Changed join for vector surveillance session diseases to the sample
--                             table.
-- Stephen Long     12/31/2020 Change function on reference data to handle inactive records.
-- Stephen Long     01/03/2021 Moved pagination to table variable insert.
-- Stephen Long     01/05/2021 Removed sent to organization where criteria.
-- Stephen Long     01/07/2021 Removed leading wildcard (%) as full table scans are performed even 
--                             with indices resulting in long query run times.  Recommend NOT 
--                             putting those back in.
-- Mark Wilson		08/17/2021 Join tlbMonitoringSessionToDiagnosis to get diagnosis
-- Stephen Long     09/23/2021 Removed unneeded fields and joins to improve performance.
-- Stephen Long     12/08/2021 Changed pagination logic and removed option recompile.
-- Stephen Long     02/10/2022 Replaced joins for monitoring session and vector session
--                             disease references to improve performance.
-- Stephen Long     05/17/2022 Removed primary key from monitoring and vector session disease 
--                             table variables.
-- Stephen Long     05/20/2022 Added string agg to session diseases.
-- Stephen Long     07/26/2022 Updated case statement on disease id and name.
-- Stephen Long     08/04/2022 Add where criteria from the default sample listing, so only
--                             records for the simple search are filtered from the default set.
-- Stephen Long     09/28/2022 Bug fix on item 5111.
-- Stephen Long     10/14/2022 Changed monitoring session disease function to monitoring session
--                             to sample disease function.
-- Stephen Long     10/17/2022 Bug fix on item 5018 - searching by dates.
-- Stephen Long     10/18/2022 Added test disease ID to the query.
-- Stephen Long     10/24/2022 Fix for GIT item #46 - duplciate records comming back.
-- Stephen Long     12/29/2022 Removed sorting and pagination logic; business decision so records
--                             pending save could be shown at the top of the list prior to saving.
-- Stephen Long     01/14/2023 Updated for site filtration queries.
--
-- Testing Code:
/*
DECLARE	@return_value int

EXEC	@return_value = [dbo].[USP_LAB_TRANSFER_SEARCH_GETList]
		@LanguageID = N'en-US',
		@SearchString = N'COVID', -- Use 'Gnhnscvxb', 'Brucellosis', 'XWEB00' as other tests.
		@UserID = 161287150000872, -- rykermase
		@UserOrganizationID = 758210000000,
		@Page = 1,
		@PageSize = 10,
		@SortColumn = N'EIDSSLaboratorySampleID',
		@SortOrder = N'DESC'

SELECT	'Return Value' = @return_value

GO
*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_TRANSFER_SEARCH_GETList]
(
    @LanguageID NVARCHAR(50),
    @SearchString NVARCHAR(2000),
    @AccessionedIndicator BIT = NULL,
    @UserID BIGINT,
    @UserEmployeeID BIGINT,
    @UserOrganizationID BIGINT,
    @UserSiteID BIGINT
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @InitialResults TABLE
    (
        ID BIGINT NOT NULL,
        SampleID BIGINT NOT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID BIGINT NOT NULL,
        SampleID BIGINT NOT NULL
    );
    DECLARE @DeduplicatedFinalResults TABLE
    (
        ID BIGINT NOT NULL,
        SampleID BIGINT NOT NULL
    );
    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @SampleTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @SampleStatusTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @AccessionConditionTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @TestNameTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @TestResultTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @TestCategoryTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @TestStatusTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @Diseases TABLE (ID BIGINT NOT NULL);
    DECLARE @FunctionalAreas TABLE (ID BIGINT NOT NULL);
    DECLARE @MonitoringSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @VectorSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @Favorites XML,
            @LanguageCode BIGINT;

    BEGIN TRY
        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        SET @LanguageCode = dbo.FN_GBL_LanguageCode_Get(@LanguageID);
        SET @Favorites =
        (
            SELECT PreferenceDetail
            FROM dbo.UserPreference Laboratory
            WHERE idfUserID = @UserID
                  AND ModuleConstantID = 10508006
                  AND intRowStatus = 0
        );

        INSERT INTO @MonitoringSessionDiseases
        SELECT SampleID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames
        FROM dbo.FN_LAB_MONITORING_SESSION_TO_SAMPLE_DISEASES_GET(@LanguageID)
        GROUP BY SampleID;

        INSERT INTO @VectorSessionDiseases
        SELECT VectorSurveillanceSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, ';') AS DiseaseNames
        FROM dbo.FN_LAB_VECTOR_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY VectorSurveillanceSessionID;

        INSERT INTO @InitialResults
        SELECT tr.idfTransferOut,
               tom.idfMaterial
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
        WHERE (
                  tr.idfSendFromOffice = @UserOrganizationID
                  OR tr.idfSendToOffice = @UserOrganizationID
              )
              AND (tr.idfsTransferStatus IN (   10001003,
                                                         --In Progress
                                                10001006 --Amended
                                            )
                  )
              AND tr.intRowStatus = 0;

        INSERT INTO @SampleTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000087
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @SampleStatusTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000015
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @AccessionConditionTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000110
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @Diseases
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000019
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @TestNameTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000097
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @TestResultTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000096
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @FunctionalAreas
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000164
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @FinalResults
        SELECT ID,
               SampleID
        FROM @InitialResults
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = SampleID
                   AND m.intRowStatus = 0
        WHERE (
                  m.blnAccessioned = @AccessionedIndicator
                  AND m.idfsAccessionCondition IS NULL
                  AND m.idfsSampleStatus IS NULL
                  AND @AccessionedIndicator IS NOT NULL
              ) -- Un-accessioned samples
              OR (
                     CONVERT(NVARCHAR(MAX), FORMAT(m.datAccession, 'g', @LanguageID)) LIKE '%' + @SearchString + '%'
                     OR (
                            m.strBarcode IS NOT NULL
                            AND m.strBarcode <> ''
                            AND m.strBarcode LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strFieldBarcode IS NOT NULL
                            AND m.strFieldBarcode <> ''
                            AND m.strFieldBarcode LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strCondition IS NOT NULL
                            AND m.strCondition <> ''
                            AND m.strCondition LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strCalculatedCaseID IS NOT NULL
                            AND m.strCalculatedCaseID <> ''
                            AND m.strCalculatedCaseID LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strCalculatedHumanName IS NOT NULL
                            AND m.strCalculatedHumanName <> ''
                            AND m.strCalculatedHumanName LIKE '%' + @SearchString + '%'
                        )
                 );

        INSERT INTO @FinalResults
        SELECT ID,
               SampleID
        FROM @InitialResults
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = SampleID
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnExternalTest = 1
        WHERE CONVERT(NVARCHAR(MAX), FORMAT(t.datConcludedDate, 'd', @LanguageID)) LIKE '%' + @SearchString + '%';


        INSERT INTO @FinalResults
        SELECT ID,
               SampleID
        FROM @InitialResults
            INNER JOIN dbo.tlbTransferOUT tr
                ON tr.idfTransferOut = ID
        WHERE CONVERT(NVARCHAR(MAX), FORMAT(tr.datSendDate, 'd', @LanguageID)) LIKE '%' + @SearchString + '%';

        IF
        (
            SELECT COUNT(*) FROM @SampleTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID,
                   SampleID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                       AND m.intRowStatus = 0
            WHERE EXISTS
            (
                SELECT ID FROM @SampleTypes WHERE m.idfsSampleType = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @SampleStatusTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID,
                   SampleID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                       AND m.intRowStatus = 0
            WHERE (
                      m.idfsSampleStatus IS NULL
                      OR m.idfsSampleStatus = 10015007
                  ) --In Repository
                  AND EXISTS
            (
                SELECT ID FROM @SampleStatusTypes WHERE m.idfsSampleStatus = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @AccessionConditionTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID,
                   SampleID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                       AND m.intRowStatus = 0
            WHERE EXISTS
            (
                SELECT ID
                FROM @AccessionConditionTypes
                WHERE m.idfsAccessionCondition = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @TestNameTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID,
                   SampleID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                       AND m.intRowStatus = 0
                INNER JOIN dbo.tlbTesting t
                    ON t.idfMaterial = m.idfMaterial
                       AND t.intRowStatus = 0
                       AND t.blnExternalTest = 1
            WHERE EXISTS
            (
                SELECT ID FROM @TestNameTypes WHERE t.idfsTestName = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @TestResultTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID,
                   SampleID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                       AND m.intRowStatus = 0
                INNER JOIN dbo.tlbTesting t
                    ON t.idfMaterial = m.idfMaterial
                       AND t.intRowStatus = 0
                       AND t.blnExternalTest = 1
            WHERE EXISTS
            (
                SELECT ID FROM @TestResultTypes WHERE t.idfsTestResult = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @FunctionalAreas
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID,
                   SampleID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                       AND m.intRowStatus = 0
                INNER JOIN dbo.tlbDepartment d
                    ON d.idfDepartment = m.idfInDepartment
                       AND d.intRowStatus = 0
            WHERE m.idfInDepartment IS NOT NULL
                  AND EXISTS
            (
                SELECT ID FROM @FunctionalAreas WHERE d.idfsDepartmentName = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @Diseases
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID,
                   SampleID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                       AND m.intRowStatus = 0
            WHERE m.DiseaseID IS NOT NULL
                  AND EXISTS
            (
                SELECT ID FROM @Diseases WHERE m.DiseaseID = ID
            );

            INSERT INTO @FinalResults
            SELECT ir.ID,
                   ir.SampleID
            FROM @InitialResults ir
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = ir.SampleID
                INNER JOIN @VectorSessionDiseases vsDiseases
                    ON vsDiseases.ID = m.idfVectorSurveillanceSession
            WHERE m.idfVectorSurveillanceSession IS NOT NULL
                  AND EXISTS
            (
                SELECT ID
                FROM @Diseases
                WHERE ID IN (
                                SELECT CAST([Value] AS BIGINT)
                                FROM dbo.FN_GBL_SYS_SplitList(vsDiseases.DiseaseIdentifiers, NULL, ',')
                            )
            );

            INSERT INTO @FinalResults
            SELECT ID,
                   SampleID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                INNER JOIN dbo.tlbMonitoringSession ms
                    ON ms.idfMonitoringSession = m.idfMonitoringSession
                       AND ms.intRowStatus = 0
                INNER JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                    ON msd.idfMonitoringSession = ms.idfMonitoringSession
                       AND msd.intRowStatus = 0
            WHERE EXISTS
            (
                SELECT ID FROM @Diseases WHERE msd.idfsDiagnosis = ID
            );
        END

        INSERT INTO @FinalResults
        SELECT ID,
               SampleID
        FROM @InitialResults
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = SampleID
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tlbAnimal a
                ON a.idfAnimal = m.idfAnimal
                   AND a.intRowStatus = 0
        WHERE m.idfAnimal IS NOT NULL
              AND a.strAnimalCode LIKE '%' + @SearchString + '%';

        INSERT INTO @FinalResults
        SELECT ID,
               SampleID
        FROM @InitialResults
            INNER JOIN dbo.tlbTransferOUT tr
                ON tr.idfTransferOut = ID
        WHERE tr.strBarcode LIKE '%' + @SearchString + '%';

        INSERT INTO @FinalResults
        SELECT ID,
               SampleID
        FROM @InitialResults
            INNER JOIN dbo.tlbTransferOUT tr
                ON tr.idfTransferOut = ID
        WHERE tr.TestRequested LIKE '%' + @SearchString + '%';

        INSERT INTO @FinalResults
        SELECT ID,
               SampleID
        FROM @InitialResults
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = SampleID
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnExternalTest = 1
        WHERE t.strContactPerson LIKE '%' + @SearchString + '%';

        INSERT INTO @FinalResults
        SELECT ID,
               SampleID
        FROM @InitialResults
            INNER JOIN dbo.tlbTransferOUT tr
                ON tr.idfTransferOut = ID
            INNER JOIN dbo.FN_GBL_Institution_Min(@LanguageID) transferredFromOrganization
                ON transferredFromOrganization.idfOffice = tr.idfSendFromOffice
        WHERE transferredFromOrganization.AbbreviatedName LIKE '%' + @SearchString + '%';

        INSERT INTO @FinalResults
        SELECT ID,
               SampleID
        FROM @InitialResults
            INNER JOIN dbo.tlbTransferOUT tr
                ON tr.idfTransferOut = ID
            INNER JOIN dbo.FN_GBL_Institution_Min(@LanguageID) transferredToOrganization
                ON transferredToOrganization.idfOffice = tr.idfSendToOffice
        WHERE transferredToOrganization.AbbreviatedName LIKE '%' + @SearchString + '%';

        INSERT INTO @DeduplicatedFinalResults
        SELECT ID,
               SampleID
        FROM @FinalResults
        GROUP BY ID,
                 SampleID;

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @DeduplicatedFinalResults
        WHERE EXISTS
        (
            SELECT tr.idfTransferOut
            FROM dbo.tlbTransferOUT tr
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = tr.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE tr.intRowStatus = 0
                  AND oa.idfsObjectOperation = 10059003 -- Read permission
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        DELETE res
        FROM @DeduplicatedFinalResults res
            INNER JOIN dbo.tlbTransferOUT tr
                ON tr.idfTransferOut = res.ID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = tr.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003 -- Read permission
              AND NOT EXISTS
        (
            SELECT * FROM @UserSitePermissions WHERE SiteID = tr.idfsSite
        );

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        DELETE FROM @DeduplicatedFinalResults
        WHERE EXISTS
        (
            SELECT tr.idfTransferOut
            FROM dbo.tlbTransferOUT tr
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = tr.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        DECLARE @InProgressCount INT = (
                                           SELECT COUNT(DISTINCT res.ID)
                                           FROM @DeduplicatedFinalResults res
                                               INNER JOIN dbo.tlbTransferOUT tr
                                                   ON tr.idfTransferOut = res.ID
                                           WHERE tr.idfsTransferStatus IN (   10001003, --In Progress
                                                                              10001006  --Amended
                                                                          )
                                       );

        SELECT tr.idfTransferOut AS TransferID,
               tr.strBarcode AS EIDSSTransferID,
               m.idfMaterial AS TransferredOutSampleID,
               (
                   SELECT TOP 1
                       idfMaterial
                   FROM dbo.tlbMaterial
                   WHERE idfRootMaterial = m.idfMaterial
                         AND intRowStatus = 0
                         AND idfsSampleKind = 12675430000000 --Transferred in
               ) AS TransferredInSampleID,
               CASE
                   WHEN f.SampleID IS NULL THEN
                       0
                   ELSE
                       1
               END AS FavoriteIndicator,
               m.strCalculatedCaseID AS EIDSSReportOrSessionID,
               m.strCalculatedHumanName AS PatientOrFarmOwnerName,
               m.strBarcode AS EIDSSLaboratorySampleID,
               tr.idfSendToOffice AS TransferredToOrganizationID,
               transferredToOrganization.[FullName] AS TransferredToOrganizationName,
               tr.idfSendFromOffice AS TransferredFromOrganizationID,
               tr.datSendDate AS TransferDate,
               tr.TestRequested,
               t.idfTesting AS TestID,
               t.idfsTestName AS TestNameTypeID,
               testNameType.name AS TestNameTypeName,
               t.idfsTestResult AS TestResultTypeID,
               testResultType.name AS TestResultTypeName,
               t.idfsTestStatus AS TestStatusTypeID,
               testStatusType.name AS TestStatusTypeName,
               t.idfsTestCategory AS TestCategoryTypeID,
               t.idfsDiagnosis AS TestDiseaseID,
               t.datStartedDate AS StartedDate,
               t.datConcludedDate AS ResultDate,
               t.strContactPerson AS ContactPersonName,
               m.strFieldBarcode AS EIDSSLocalOrFieldSampleID,
               sampleType.name AS SampleTypeName,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       CAST(m.DiseaseID AS NVARCHAR(MAX))
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseIdentifiers
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseIdentifiers
                   ELSE
                       ''
               END AS DiseaseID,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       diseaseName.name
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseNames
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseNames
                   ELSE
                       ''
               END AS DiseaseName,
               m.datAccession AS AccessionDate,
               m.idfInDepartment AS FunctionalAreaID,
               functionalArea.name AS FunctionalAreaName,
               m.blnAccessioned AS AccessionIndicator,
               m.idfsAccessionCondition AS AccessionConditionTypeID,
               m.idfsSampleStatus AS SampleStatusTypeID,
               (CASE
                    WHEN m.blnAccessioned = 0
                         AND m.idfsAccessionCondition IS NULL THEN
                        'Un-accessioned'
                    WHEN m.idfsSampleStatus IS NULL THEN
                        accessionConditionType.name
                    WHEN m.idfsSampleStatus = 10015007 --In Repository
               THEN
                        accessionConditionType.name
                    ELSE
                        sampleStatusType.name
                END
               ) AS AccessionConditionOrSampleStatusTypeName,
               m.strCondition AS AccessionComment,
               tr.strNote AS PurposeOfTransfer,
               tr.idfsSite AS TransferredFromOrganizationSiteID,
               m.idfSendToOffice AS SentToOrganizationID,
               tr.idfSendByPerson AS SentByPersonID,
               tr.idfsTransferStatus AS TransferStatusTypeID,
               tr.intRowStatus AS RowStatus,
               a.strAnimalCode AS EIDSSAnimalID,
               IIF(
                  (
                      SELECT COUNT(t2.idfTesting)
                      FROM dbo.tlbTesting t2
                      WHERE t2.idfsTestStatus IN (   10001003,
                                                              --In Progress
                                                     10001004,
                                                              --Preliminary
                                                     10001005 --Not Started
                                                 )
                            AND t2.idfMaterial = m.idfMaterial
                  ) > 0,
                  1,
                  0) AS TestAssignedIndicator,
               (CASE
                    WHEN transferredToOrganization.idfsSite IS NULL THEN
                        1
                    ELSE
                        0
                END
               ) AS NonEIDSSLaboratoryIndicator,
               1 AS ReadPermissionIndicator,
               1 AS AccessToPersonalDataPermissionIndicator,
               1 AS AccessToGenderAndAgeDataPermissionIndicator,
               1 AS WritePermissionIndicator,
               1 AS DeletePermissionIndicator,
               0 AS RowAction,
               0 AS RowSelectionIndicator,
               @InProgressCount AS InProgressCount,
               COUNT(*) OVER () AS TotalRowCount
        FROM @DeduplicatedFinalResults res
            INNER JOIN dbo.tlbTransferOUT tr
                ON tr.idfTransferOut = res.ID
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.SampleID
                   AND m.intRowStatus = 0
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                ON sampleType.idfsReference = m.idfsSampleType
            INNER JOIN dbo.FN_GBL_Institution(@LanguageID) transferredToOrganization
                ON transferredToOrganization.idfOffice = tr.idfSendToOffice
                   AND transferredToOrganization.intRowStatus = 0
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnExternalTest = 1
            LEFT JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbAnimal a
                ON a.idfAnimal = m.idfAnimal
                   AND a.intRowStatus = 0
            LEFT JOIN @MonitoringSessionDiseases msDiseases
                ON msDiseases.ID = m.idfMaterial
                   AND m.idfMonitoringSession IS NOT NULL
            LEFT JOIN @VectorSessionDiseases vsDiseases
                ON vsDiseases.ID = m.idfVectorSurveillanceSession
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) diseaseName
                ON diseaseName.idfsReference = m.DiseaseID
            LEFT JOIN dbo.tlbDepartment d
                ON d.idfDepartment = m.idfInDepartment
                   AND d.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000164) functionalArea
                ON functionalArea.idfsReference = d.idfsDepartmentName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                ON testNameType.idfsReference = t.idfsTestName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                ON testResultType.idfsReference = t.idfsTestResult
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                ON testStatusType.idfsReference = t.idfsTestStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                ON accessionConditionType.idfsReference = m.idfsAccessionCondition
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                ON sampleStatusType.idfsReference = m.idfsSampleStatus;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_OMM_Session_GetList]...';


GO
-- ================================================================================================
-- Name: USP_OMM_Session_GetList
--
-- Description: Get a list of outbreak sessions for the outbreak module.
--          
-- Author: Doug Albanese
--
-- Revision History:
-- Name            Date       Change Detail
-- --------------- ---------- --------------------------------------------------------------------
-- Lamont Mitchell 01/09/2019 Removed ReturnCode and Return Message
-- Stephen Long	   01/13/2020 Changed from strDefault to name to pick up language translation.
-- Stephen Long	   01/26/2020 Added site list parameter for site filtration.
-- Stephen Long	   05/19/2020 Added disease filtration rules from use case SAUC62.
-- Stephen Long	   11/18/2020 Added site ID to the query.
-- Stephen Long	   11/27/2020 Added configurable site filtration rules.
-- Stephen Long	   12/13/2020 Added apply configurable filtration indicator parameter.
-- Stephen Long	   12/24/2020 Modified join on disease filtration default role rule.  Changed 
--                            function call to bring back inactive outbreak status and type to 
--                            handle v6.1 data that has been made obsolete.
-- Stephen Long	   12/29/2020 Changed function call on reference data for inactive records.
-- Stephen Long	   04/04/2021 Added updated pagination and location hierarchy.
-- Stephen Long	   08/16/2021 Added gisLocation and location joins where IsDescendent is called.
-- Doug Albanese   11/17/2021 Fixed the default range for returning Outbreak for the past year only.
-- Doug Albanese   12/03/2021 Integrated the new FN_GBL_LocationHierarchy_Flattened for use with 
--                             the Location Hierarchy
-- Stephen Long    03/29/2022 Fix to site filtration to pull back a user's own site records.
-- Doug Albanese   05/16/2022 Corrected Date Range, when not passed. This causes other searches 
--                             not to work well.
-- Stephen Long    06/03/2022 Updated to point default access rules to base reference.
-- Doug Albanese   01/10/2023 Changed the default sorting to correctly sort for "Status" and then 
--                            "Start Date"
-- Stephen Long    01/11/2023 Updated for site filtration queries.
-- Doug Albanese   01/12/2023 Further correction on default sorting on initial load.
-- Stephen Long    01/14/2023 Fix on site filtration queries; added site permission table 
--                            variables.
-- exec [dbo].[USP_OMM_Session_GetList] @LanguageId= 'en-us', @UserSiteId = 0, @UserOrganizationID = 0, @UserEmployeeId = 0
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_OMM_Session_GetList]
(
    @LanguageID NVARCHAR(50),
    @OutbreakID NVARCHAR(200) = NULL,
    @OutbreakTypeID BIGINT = NULL,
    @SearchDiagnosesGroup BIGINT = NULL,
    @StartDateFrom DATETIME = NULL,
    @StartDateTo DATETIME = NULL,
    @OutbreakStatusTypeID BIGINT = NULL,
    @AdministrativeLevelID BIGINT = NULL,
    @QuickSearch NVARCHAR(200) = '',
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT,
    @UserEmployeeID BIGINT,
    @ApplySiteFiltrationIndicator BIT = 0,
    @SortColumn NVARCHAR(30) = 'INIT',
    @SortOrder NVARCHAR(4) = 'DESC',
    @PageNumber INT = 1,
    @PageSize INT = 10
)
AS
BEGIN
    SET NOCOUNT ON;

    IF @StartDateFrom IS NULL
       or @StartDateFrom = NULL
    BEGIN
        SET @StartDateFrom = CAST(CAST(CAST(0xD1BA AS BIGINT) * -1 AS DATETIME) AS DATE)
    END

    IF @StartDateTo IS NULL
       OR @StartDateTo = NULL
    BEGIN
        SET @StartDateTo = CAST(CAST(CAST(0x2D247f AS BIGINT) AS DATETIME) AS DATE)
    END

    DECLARE @firstRec INT
    DECLARE @lastRec INT
    SET @firstRec = (@PageNumber - 1) * @pagesize
    SET @lastRec = (@PageNumber * @pageSize + 1)

    DECLARE @AdministrativeLevelNode AS HIERARCHYID;
    DECLARE @RuleActiveStatus INT = 0;
    DECLARE @AdministrativeLevelTypeID INT;
    DECLARE @OrganizationAdministrativeLevelNode HIERARCHYID;
    DECLARE @DefaultAccessRules AS TABLE
    (
        AccessRuleID BIGINT NOT NULL,
        ActiveIndicator INT NOT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL,
        AdministrativeLevelTypeID INT NULL
    );

    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @FilteredResults TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL, INDEX IDX_ID (ID
                                                             ));
    DECLARE @FinalResults TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );

    -- Set defaults for invalid passed parameters
    IF (@StartDateFrom IS NULL)
    BEGIN
        SET @StartDateFrom = DATEADD(day, -365, GETDATE())
    END

    IF (@StartDateTo IS NULL)
    BEGIN
        SET @StartDateTo = GETDATE()
    END

    BEGIN TRY
        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        IF @AdministrativeLevelID IS NOT NULL
        BEGIN
            SELECT @AdministrativeLevelNode = node
            FROM dbo.gisLocation
            WHERE idfsLocation = @AdministrativeLevelID;
        END;

        IF @QuickSearch = ''
           OR @QuickSearch IS NULL
        BEGIN
            -- ========================================================================================
            -- NO CONFIGURABLE FILTRATION RULES APPLIED
            --
            -- For first and second level sites, do not apply any site configurable rules.
            -- ========================================================================================
            IF @ApplySiteFiltrationIndicator = 0
            BEGIN
                INSERT INTO @Results
                SELECT idfOutbreak,
                       1,
                       1,
                       1,
                       1,
                       1
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000019) d
                        ON d.idfsReference = o.idfsDiagnosisOrDiagnosisGroup
                    INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000063) os
                        ON os.idfsReference = o.idfsOutbreakStatus
                    LEFT JOIN dbo.tlbGeoLocation gl
                        ON o.idfGeoLocation = gl.idfGeoLocation
                    LEFT JOIN dbo.gisLocation g
                        ON g.idfsLocation = gl.idfsLocation
                    LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000513) ot
                        ON ot.idfsReference = o.OutbreakTypeId
                WHERE o.intRowStatus = 0
                      AND o.datStartDate
                      BETWEEN @StartDateFrom AND @StartDateTo
                      AND (
                              (o.OutbreakTypeID = CASE ISNULL(@OutbreakTypeID, '')
                                                      WHEN '' THEN
                                                          OutbreakTypeID
                                                      ELSE
                                                          @OutbreakTypeID
                                                  END
                              )
                              OR @OutbreakTypeID IS NULL
                          )
                      AND (
                              (o.idfsOutbreakStatus = CASE ISNULL(@OutbreakStatusTypeID, '')
                                                          WHEN '' THEN
                                                              idfsOutbreakStatus
                                                          ELSE
                                                              @OutbreakStatusTypeID
                                                      END
                              )
                              OR @OutbreakStatusTypeID IS NULL
                          )
                      AND (
                              g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                              OR @AdministrativeLevelID IS NULL
                          )
                      AND (
                              (o.idfsDiagnosisOrDiagnosisGroup = CASE ISNULL(@SearchDiagnosesGroup, '')
                                                                     WHEN '' THEN
                                                                         o.idfsDiagnosisOrDiagnosisGroup
                                                                     ELSE
                                                                         @SearchDiagnosesGroup
                                                                 END
                              )
                              OR @SearchDiagnosesGroup IS NULL
                          )
                      AND (strOutbreakID LIKE CASE ISNULL(@OutbreakID, '')
                                                  WHEN '' THEN
                                                      '%%'
                                                  ELSE
                                                      '%' + @OutbreakID + '%'
                                              END
                          );
            END
            ELSE
            BEGIN
                -- =======================================================================================
                -- CONFIGURABLE FILTRATION RULES
                -- 
                -- Apply configurable filtration rules for use case SAUC34. Some of these rules may 
                -- overlap the default rules.
                -- =======================================================================================
                INSERT INTO @Results
                SELECT idfOutbreak,
                       1,
                       1,
                       1,
                       1,
                       1
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000019) d
                        ON d.idfsReference = o.idfsDiagnosisOrDiagnosisGroup
                    INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000063) os
                        ON os.idfsReference = o.idfsOutbreakStatus
                    LEFT JOIN dbo.tlbGeoLocation gl
                        ON o.idfGeoLocation = gl.idfGeoLocation
                    LEFT JOIN dbo.gisLocation g
                        ON g.idfsLocation = gl.idfsLocation
                    LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000513) ot
                        ON ot.idfsReference = o.OutbreakTypeId
                WHERE o.intRowStatus = 0
                      AND o.idfsSite = @UserSiteID
                      AND o.datStartDate
                      BETWEEN @StartDateFrom AND @StartDateTo
                      AND (
                              (o.OutbreakTypeID = CASE ISNULL(@OutbreakTypeID, '')
                                                      WHEN '' THEN
                                                          OutbreakTypeID
                                                      ELSE
                                                          @OutbreakTypeID
                                                  END
                              )
                              OR @OutbreakTypeID IS NULL
                          )
                      AND (
                              (o.idfsOutbreakStatus = CASE ISNULL(@OutbreakStatusTypeID, '')
                                                          WHEN '' THEN
                                                              idfsOutbreakStatus
                                                          ELSE
                                                              @OutbreakStatusTypeID
                                                      END
                              )
                              OR @OutbreakStatusTypeID IS NULL
                          )
                      AND (
                              g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                              OR @AdministrativeLevelID IS NULL
                          )
                      AND (
                              (o.idfsDiagnosisOrDiagnosisGroup = CASE ISNULL(@SearchDiagnosesGroup, '')
                                                                     WHEN '' THEN
                                                                         o.idfsDiagnosisOrDiagnosisGroup
                                                                     ELSE
                                                                         @SearchDiagnosesGroup
                                                                 END
                              )
                              OR @SearchDiagnosesGroup IS NULL
                          )
                      AND (strOutbreakID LIKE CASE ISNULL(@OutbreakID, '')
                                                  WHEN '' THEN
                                                      '%%'
                                                  ELSE
                                                      '%' + @OutbreakID + '%'
                                              END
                          );

                -- =======================================================================================
                -- DEFAULT CONFIGURABLE FILTRATION RULES
                --
                -- Apply active default configurable filtration rules for third level sites.
                -- =======================================================================================
                INSERT INTO @DefaultAccessRules
                SELECT AccessRuleID,
                       a.intRowStatus,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator,
                       a.AdministrativeLevelTypeID
                FROM dbo.AccessRule a
                WHERE AccessRuleID = 10537022;

                SELECT @RuleActiveStatus = ActiveIndicator
                FROM @DefaultAccessRules
                WHERE AccessRuleID = 10537022;

                IF @RuleActiveStatus = 0
                BEGIN
                    SELECT @AdministrativeLevelTypeID = AdministrativeLevelTypeID
                    FROM @DefaultAccessRules
                    WHERE AccessRuleID = 10537022;

                    SELECT @AdministrativeLevelNode
                        = g.node.GetAncestor(g.node.GetLevel() - @AdministrativeLevelTypeID)
                    FROM dbo.tlbOffice o
                        INNER JOIN dbo.tlbGeoLocationShared AS l
                            ON l.idfGeoLocationShared = o.idfLocation
                        INNER JOIN dbo.gisLocation g
                            ON g.idfsLocation = l.idfsLocation
                               AND g.intRowStatus = 0
                    WHERE o.idfOffice = @UserOrganizationID
                          AND g.node.GetLevel() >= @AdministrativeLevelTypeID;

                    -- Administrative level specified in the rule of the site where the session was created.
                    INSERT INTO @FilteredResults
                    SELECT ob.idfOutbreak,
                           a.ReadPermissionIndicator,
                           a.AccessToPersonalDataPermissionIndicator,
                           a.AccessToGenderAndAgeDataPermissionIndicator,
                           a.WritePermissionIndicator,
                           a.DeletePermissionIndicator
                    FROM dbo.tlbOutbreak ob
                        INNER JOIN dbo.tstSite s
                            ON ob.idfsSite = s.idfsSite
                        INNER JOIN dbo.tlbOffice o
                            ON o.idfOffice = s.idfOffice
                               AND o.intRowStatus = 0
                        INNER JOIN dbo.tlbGeoLocationShared l
                            ON l.idfGeoLocationShared = o.idfLocation
                               AND l.intRowStatus = 0
                        INNER JOIN dbo.gisLocation g
                            ON g.idfsLocation = l.idfsLocation
                               AND g.intRowStatus = 0
                        INNER JOIN @DefaultAccessRules a
                            ON a.AccessRuleID = 10537022
                    WHERE ob.intRowStatus = 0
                          AND g.node.IsDescendantOf(@OrganizationAdministrativeLevelNode) = 1;
                END;

                --
                -- Apply at the user's site group level, granted by a site group.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                        ON grantingSGS.idfsSite = o.idfsSite
                    INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                        ON userSiteGroup.idfsSite = @UserSiteID
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

                --
                -- Apply at the user's site level, granted by a site group.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                        ON grantingSGS.idfsSite = o.idfsSite
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorSiteID = @UserSiteID
                           AND ara.ActorEmployeeGroupID IS NULL
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

                -- 
                -- Apply at the user's employee group level, granted by a site group.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                        ON grantingSGS.idfsSite = o.idfsSite
                    INNER JOIN dbo.tlbEmployeeGroupMember egm
                        ON egm.idfEmployee = @UserEmployeeID
                           AND egm.intRowStatus = 0
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

                -- 
                -- Apply at the user's ID level, granted by a site group.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                        ON grantingSGS.idfsSite = o.idfsSite
                    INNER JOIN dbo.tstUserTable u
                        ON u.idfPerson = @UserEmployeeID
                           AND u.intRowStatus = 0
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorUserID = u.idfUserID
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

                --
                -- Apply at the user's site group level, granted by a site.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tflSiteToSiteGroup sgs
                        ON sgs.idfsSite = @UserSiteID
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND sgs.idfsSite = o.idfsSite;

                -- 
                -- Apply at the user's site level, granted by a site.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorSiteID = @UserSiteID
                           AND ara.ActorEmployeeGroupID IS NULL
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteID = o.idfsSite;

                -- 
                -- Apply at the user's employee group level, granted by a site.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tlbEmployeeGroupMember egm
                        ON egm.idfEmployee = @UserEmployeeID
                           AND egm.intRowStatus = 0
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteID = o.idfsSite;

                -- 
                -- Apply at the user's ID level, granted by a site.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tstUserTable u
                        ON u.idfPerson = @UserEmployeeID
                           AND u.intRowStatus = 0
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorUserID = u.idfUserID
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteID = o.idfsSite;

                -- Copy filtered results to results and use search criteria
                INSERT INTO @Results
                SELECT ID,
                       ReadPermissionIndicator,
                       AccessToPersonalDataPermissionIndicator,
                       AccessToGenderAndAgeDataPermissionIndicator,
                       WritePermissionIndicator,
                       DeletePermissionIndicator
                FROM @FilteredResults
                    INNER JOIN dbo.tlbOutbreak o
                        ON o.idfOutbreak = ID
                    INNER JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000019) d
                        ON d.idfsReference = o.idfsDiagnosisOrDiagnosisGroup
                    INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000063) os
                        ON os.idfsReference = o.idfsOutbreakStatus
                    LEFT JOIN dbo.tlbGeoLocation gl
                        ON o.idfGeoLocation = gl.idfGeoLocation
                    LEFT JOIN dbo.gisLocation g
                        ON g.idfsLocation = gl.idfsLocation
                    LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000513) ot
                        ON ot.idfsReference = o.OutbreakTypeId
                WHERE o.intRowStatus = 0
                      AND o.datStartDate
                      BETWEEN @StartDateFrom AND @StartDateTo
                      AND (
                              (o.OutbreakTypeID = CASE ISNULL(@OutbreakTypeID, '')
                                                      WHEN '' THEN
                                                          OutbreakTypeID
                                                      ELSE
                                                          @OutbreakTypeID
                                                  END
                              )
                              OR @OutbreakTypeID IS NULL
                          )
                      AND (
                              (o.idfsOutbreakStatus = CASE ISNULL(@OutbreakStatusTypeID, '')
                                                          WHEN '' THEN
                                                              idfsOutbreakStatus
                                                          ELSE
                                                              @OutbreakStatusTypeID
                                                      END
                              )
                              OR @OutbreakStatusTypeID IS NULL
                          )
                      AND (
                              g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                              OR @AdministrativeLevelID IS NULL
                          )
                      AND (
                              (o.idfsDiagnosisOrDiagnosisGroup = CASE ISNULL(@SearchDiagnosesGroup, '')
                                                                     WHEN '' THEN
                                                                         o.idfsDiagnosisOrDiagnosisGroup
                                                                     ELSE
                                                                         @SearchDiagnosesGroup
                                                                 END
                              )
                              OR @SearchDiagnosesGroup IS NULL
                          )
                      AND (strOutbreakID LIKE CASE ISNULL(@OutbreakID, '')
                                                  WHEN '' THEN
                                                      '%%'
                                                  ELSE
                                                      '%' + @OutbreakID + '%'
                                              END
                          )
                GROUP BY ID,
                         ReadPermissionIndicator,
                         AccessToPersonalDataPermissionIndicator,
                         AccessToGenderAndAgeDataPermissionIndicator,
                         WritePermissionIndicator,
                         DeletePermissionIndicator;
            END;

            -- =======================================================================================
            -- DISEASE FILTRATION RULES
            --
            -- Apply disease filtration rules from use case SAUC62.
            -- =======================================================================================		
            -- 
            -- Apply level 0 disease filtration rules for the employee default user group - Denies ONLY
            -- as all records have been pulled above with or without site filtration rules applied.
            --
            DELETE FROM @Results
            WHERE ID IN (
                            SELECT o.idfOutbreak
                            FROM dbo.tlbOutbreak o
                                INNER JOIN dbo.tstObjectAccess oa
                                    ON oa.idfsObjectID = o.idfsDiagnosisOrDiagnosisGroup
                                       AND oa.intRowStatus = 0
                            WHERE o.intRowStatus = 0
                                  AND oa.intPermission = 1
                                  AND oa.idfsObjectType = 10060001 -- Disease
                                  AND oa.idfActor = -506 -- Default role
                        );

            --
            -- Apply level 1 disease filtration rules for an employee's associated user group(s).  
            -- Allows and denies will supersede level 0.
            --
            INSERT INTO @Results
            SELECT o.idfOutbreak,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbOutbreak o
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = o.idfsDiagnosisOrDiagnosisGroup
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                LEFT JOIN dbo.tlbGeoLocation gl
                    ON o.idfGeoLocation = gl.idfGeoLocation
                LEFT JOIN dbo.gisLocation g
                    ON g.idfsLocation = gl.idfsLocation
            WHERE oa.intPermission = 2 -- Allow permission
                  AND oa.idfsObjectType = 10060001 -- Disease
                  AND o.intRowStatus = 0
                  AND oa.idfActor = egm.idfEmployeeGroup
                  AND datStartDate
                  BETWEEN @StartDateFrom AND @StartDateTo
                  AND (
                          (OutbreakTypeID = CASE ISNULL(@OutbreakTypeID, '')
                                                WHEN '' THEN
                                                    OutbreakTypeID
                                                ELSE
                                                    @OutbreakTypeID
                                            END
                          )
                          OR @OutbreakTypeID IS NULL
                      )
                  AND (
                          (idfsOutbreakStatus = CASE ISNULL(@OutbreakStatusTypeID, '')
                                                    WHEN '' THEN
                                                        idfsOutbreakStatus
                                                    ELSE
                                                        @OutbreakStatusTypeID
                                                END
                          )
                          OR @OutbreakStatusTypeID IS NULL
                      )
                  AND (
                          g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                          OR @AdministrativeLevelID IS NULL
                      )
                  AND (
                          (o.idfsDiagnosisOrDiagnosisGroup = CASE ISNULL(@SearchDiagnosesGroup, '')
                                                                 WHEN '' THEN
                                                                     o.idfsDiagnosisOrDiagnosisGroup
                                                                 ELSE
                                                                     @SearchDiagnosesGroup
                                                             END
                          )
                          OR @SearchDiagnosesGroup IS NULL
                      )
                  AND (strOutbreakID LIKE CASE ISNULL(@OutbreakID, '')
                                              WHEN '' THEN
                                                  '%%'
                                              ELSE
                                                  '%' + @OutbreakID + '%'
                                          END
                      );

            DELETE res
            FROM @Results res
                INNER JOIN dbo.tlbOutbreak o
                    ON o.idfOutbreak = res.ID
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = o.idfsDiagnosisOrDiagnosisGroup
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
            WHERE o.intRowStatus = 0
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060001 -- Disease
                  AND oa.idfActor = egm.idfEmployeeGroup;

            --
            -- Apply level 2 disease filtration rules for the employee's identity.  Allows and denies 
            -- will supersede level 1.
            --
            INSERT INTO @Results
            SELECT o.idfOutbreak,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbOutbreak o
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = o.idfsDiagnosisOrDiagnosisGroup
                       AND oa.intRowStatus = 0
                LEFT JOIN dbo.tlbGeoLocation gl
                    ON o.idfGeoLocation = gl.idfGeoLocation
                LEFT JOIN dbo.gisLocation g
                    ON g.idfsLocation = gl.idfsLocation
            WHERE oa.intPermission = 2 -- Allow permission
                  AND oa.idfsObjectType = 10060001 -- Disease
                  AND o.intRowStatus = 0
                  AND oa.idfActor = @UserEmployeeID
                  AND datStartDate
                  BETWEEN @StartDateFrom AND @StartDateTo
                  AND (
                          (OutbreakTypeID = CASE ISNULL(@OutbreakTypeID, '')
                                                WHEN '' THEN
                                                    OutbreakTypeID
                                                ELSE
                                                    @OutbreakTypeID
                                            END
                          )
                          OR @OutbreakTypeID IS NULL
                      )
                  AND (
                          (idfsOutbreakStatus = CASE ISNULL(@OutbreakStatusTypeID, '')
                                                    WHEN '' THEN
                                                        idfsOutbreakStatus
                                                    ELSE
                                                        @OutbreakStatusTypeID
                                                END
                          )
                          OR @OutbreakStatusTypeID IS NULL
                      )
                  AND (
                          g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                          OR @AdministrativeLevelID IS NULL
                      )
                  AND (
                          (o.idfsDiagnosisOrDiagnosisGroup = CASE ISNULL(@SearchDiagnosesGroup, '')
                                                                 WHEN '' THEN
                                                                     o.idfsDiagnosisOrDiagnosisGroup
                                                                 ELSE
                                                                     @SearchDiagnosesGroup
                                                             END
                          )
                          OR @SearchDiagnosesGroup IS NULL
                      )
                  AND (strOutbreakID LIKE CASE ISNULL(@OutbreakID, '')
                                              WHEN '' THEN
                                                  '%%'
                                              ELSE
                                                  '%' + @OutbreakID + '%'
                                          END
                      );

            DELETE FROM @Results
            WHERE ID IN (
                            SELECT o.idfOutbreak
                            FROM dbo.tlbOutbreak o
                                INNER JOIN dbo.tstObjectAccess oa
                                    ON oa.idfsObjectID = o.idfsDiagnosisOrDiagnosisGroup
                                       AND oa.intRowStatus = 0
                            WHERE o.intRowStatus = 0
                                  AND oa.intPermission = 1 -- Deny permission
                                  AND oa.idfsObjectType = 10060001 -- Disease
                                  AND idfActor = @UserEmployeeID
                        );

            -- =======================================================================================
            -- SITE FILTRATION RULES
            --
            -- Apply site filtration rules from use case SAUC29.
            -- =======================================================================================		
            -- 
            -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
            -- as all records have been pulled above with or without filtration rules applied.
            --
            DELETE FROM @Results
            WHERE EXISTS
            (
                SELECT o.idfOutbreak
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tstObjectAccess oa
                        ON oa.idfsObjectID = o.idfsSite
                           AND oa.intRowStatus = 0
                    INNER JOIN dbo.tlbEmployeeGroup eg
                        ON eg.idfsSite = @UserSiteID
                           AND eg.intRowStatus = 0
                    INNER JOIN dbo.trtBaseReference br
                        ON br.idfsBaseReference = eg.idfEmployeeGroup
                           AND br.intRowStatus = 0
                           AND br.blnSystem = 1
                WHERE o.intRowStatus = 0
                      AND oa.idfsObjectOperation = 10059003 -- Read permission
                      AND oa.intPermission = 1 -- Deny permission
                      AND oa.idfsObjectType = 10060011 -- Site
                      AND oa.idfActor = eg.idfEmployeeGroup
            );

            --
            -- Apply level 1 site filtration rules for an employee's associated user group(s).  
            -- Allows and denies will supersede level 0.
            --
            INSERT INTO @Results
            SELECT o.idfOutbreak,
                   (
                       SELECT Permission
                       FROM @UserGroupSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059003
                   ),
                   (
                       SELECT Permission
                       FROM @UserGroupSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059006
                   ),
                   (
                       SELECT Permission
                       FROM @UserGroupSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059007
                   ),
                   (
                       SELECT Permission
                       FROM @UserGroupSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059004
                   ),
                   (
                       SELECT Permission
                       FROM @UserGroupSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059002
                   )
            FROM dbo.tlbOutbreak o
                LEFT JOIN dbo.tlbGeoLocation gl
                    ON o.idfGeoLocation = gl.idfGeoLocation
                LEFT JOIN dbo.gisLocation g
                    ON g.idfsLocation = gl.idfsLocation
            WHERE o.intRowStatus = 0
                  AND EXISTS
            (
                SELECT * FROM @UserGroupSitePermissions WHERE SiteID = o.idfsSite
            )
                  AND datStartDate
                  BETWEEN @StartDateFrom AND @StartDateTo
                  AND (
                          (OutbreakTypeID = CASE ISNULL(@OutbreakTypeID, '')
                                                WHEN '' THEN
                                                    OutbreakTypeID
                                                ELSE
                                                    @OutbreakTypeID
                                            END
                          )
                          OR @OutbreakTypeID IS NULL
                      )
                  AND (
                          (idfsOutbreakStatus = CASE ISNULL(@OutbreakStatusTypeID, '')
                                                    WHEN '' THEN
                                                        idfsOutbreakStatus
                                                    ELSE
                                                        @OutbreakStatusTypeID
                                                END
                          )
                          OR @OutbreakStatusTypeID IS NULL
                      )
                  AND (
                          g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                          OR @AdministrativeLevelID IS NULL
                      )
                  AND (
                          (o.idfsDiagnosisOrDiagnosisGroup = CASE ISNULL(@SearchDiagnosesGroup, '')
                                                                 WHEN '' THEN
                                                                     o.idfsDiagnosisOrDiagnosisGroup
                                                                 ELSE
                                                                     @SearchDiagnosesGroup
                                                             END
                          )
                          OR @SearchDiagnosesGroup IS NULL
                      )
                  AND (strOutbreakID LIKE CASE ISNULL(@OutbreakID, '')
                                              WHEN '' THEN
                                                  '%%'
                                              ELSE
                                                  '%' + @OutbreakID + '%'
                                          END
                      );

            DELETE res
            FROM @Results res
                INNER JOIN dbo.tlbOutbreak o
                    ON o.idfOutbreak = res.ID
                INNER JOIN @UserGroupSitePermissions ugsp
                    ON ugsp.SiteID = o.idfsSite
            WHERE ugsp.Permission = 2 -- Deny permission
                  AND ugsp.PermissionTypeID = 10059003; -- Read permission

            --
            -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
            -- will supersede level 1.
            --
            INSERT INTO @Results
            SELECT o.idfOutbreak,
                   (
                       SELECT Permission
                       FROM @UserSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059003
                   ),
                   (
                       SELECT Permission
                       FROM @UserSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059006
                   ),
                   (
                       SELECT Permission
                       FROM @UserSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059007
                   ),
                   (
                       SELECT Permission
                       FROM @UserSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059004
                   ),
                   (
                       SELECT Permission
                       FROM @UserSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059002
                   )
            FROM dbo.tlbOutbreak o
                LEFT JOIN dbo.tlbGeoLocation gl
                    ON o.idfGeoLocation = gl.idfGeoLocation
                LEFT JOIN dbo.gisLocation g
                    ON g.idfsLocation = gl.idfsLocation
            WHERE o.intRowStatus = 0
                  AND EXISTS
            (
                SELECT * FROM @UserSitePermissions WHERE SiteID = o.idfsSite
            )
                  AND datStartDate
                  BETWEEN @StartDateFrom AND @StartDateTo
                  AND (
                          (OutbreakTypeID = CASE ISNULL(@OutbreakTypeID, '')
                                                WHEN '' THEN
                                                    OutbreakTypeID
                                                ELSE
                                                    @OutbreakTypeID
                                            END
                          )
                          OR @OutbreakTypeID IS NULL
                      )
                  AND (
                          (idfsOutbreakStatus = CASE ISNULL(@OutbreakStatusTypeID, '')
                                                    WHEN '' THEN
                                                        idfsOutbreakStatus
                                                    ELSE
                                                        @OutbreakStatusTypeID
                                                END
                          )
                          OR @OutbreakStatusTypeID IS NULL
                      )
                  AND (
                          g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                          OR @AdministrativeLevelID IS NULL
                      )
                  AND (
                          (o.idfsDiagnosisOrDiagnosisGroup = CASE ISNULL(@SearchDiagnosesGroup, '')
                                                                 WHEN '' THEN
                                                                     o.idfsDiagnosisOrDiagnosisGroup
                                                                 ELSE
                                                                     @SearchDiagnosesGroup
                                                             END
                          )
                          OR @SearchDiagnosesGroup IS NULL
                      )
                  AND (strOutbreakID LIKE CASE ISNULL(@OutbreakID, '')
                                              WHEN '' THEN
                                                  '%%'
                                              ELSE
                                                  '%' + @OutbreakID + '%'
                                          END
                      );

            DELETE FROM @Results
            WHERE ID IN (
                            SELECT o.idfOutbreak
                            FROM dbo.tlbOutbreak o
                                INNER JOIN @UserSitePermissions usp
                                    ON usp.SiteID = o.idfsSite
                            WHERE usp.Permission = 4 -- Deny permission
                                  AND usp.PermissionTypeID = 10059003 -- Read permission
                        );
        END
        ELSE
        BEGIN
            -- ========================================================================================
            -- NO CONFIGURABLE FILTRATION RULES APPLIED
            --
            -- For first and second level sites, do not apply any configurable filtration rules.
            -- ========================================================================================
            IF @ApplySiteFiltrationIndicator = 0
            BEGIN
                INSERT INTO @Results
                SELECT idfOutbreak,
                       1,
                       1,
                       1,
                       1,
                       1
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000019) d
                        ON d.idfsReference = o.idfsDiagnosisOrDiagnosisGroup
                    INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000063) os
                        ON os.idfsReference = o.idfsOutbreakStatus
                    LEFT JOIN dbo.tlbGeoLocation gl
                        ON o.idfGeoLocation = gl.idfGeoLocation
                    INNER JOIN FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                        ON lh.idfsLocation = gl.idfsLocation
                    LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000513) ot
                        ON ot.idfsReference = o.OutbreakTypeId
                WHERE o.intRowStatus = 0
                      AND (
                              strOutbreakID LIKE '%' + @QuickSearch + '%'
                              OR d.name LIKE '%' + @QuickSearch + '%'
                              OR os.strDefault LIKE '%' + @QuickSearch + '%'
                              OR ot.strDefault LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel1Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel2Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel3Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel4Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel5Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel6Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel7Name LIKE '%' + @QuickSearch + '%'
                              OR o.datStartDate LIKE '%' + @QuickSearch + '%'
                          );
            END
            ELSE
            BEGIN
                -- =======================================================================================
                -- CONFIGURABLE FILTRATION RULES
                -- 
                -- Apply configurable filtration rules for use case SAUC34. Some of these rules may 
                -- overlap the default rules.
                -- =======================================================================================
                INSERT INTO @Results
                SELECT idfOutbreak,
                       1,
                       1,
                       1,
                       1,
                       1
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000019) d
                        ON d.idfsReference = o.idfsDiagnosisOrDiagnosisGroup
                    INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000063) os
                        ON os.idfsReference = o.idfsOutbreakStatus
                    LEFT JOIN dbo.tlbGeoLocation gl
                        ON o.idfGeoLocation = gl.idfGeoLocation
                    INNER JOIN FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                        ON lh.idfsLocation = gl.idfsLocation
                    LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000513) ot
                        ON ot.idfsReference = o.OutbreakTypeId
                WHERE o.intRowStatus = 0
                      AND o.idfsSite = @UserSiteID
                      AND (
                              strOutbreakID LIKE '%' + @QuickSearch + '%'
                              OR d.name LIKE '%' + @QuickSearch + '%'
                              OR os.strDefault LIKE '%' + @QuickSearch + '%'
                              OR ot.strDefault LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel1Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel2Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel3Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel4Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel5Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel6Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel7Name LIKE '%' + @QuickSearch + '%'
                              OR o.datStartDate LIKE '%' + @QuickSearch + '%'
                          );

                -- =======================================================================================
                -- DEFAULT CONFIGURABLE FILTRATION RULES
                --
                -- Apply active default configurable filtration rules for third level sites.
                -- =======================================================================================
                INSERT INTO @DefaultAccessRules
                SELECT AccessRuleID,
                       a.intRowStatus,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator,
                       a.AdministrativeLevelTypeID
                FROM dbo.AccessRule a
                WHERE AccessRuleID = 10537022;

                SELECT @RuleActiveStatus = ActiveIndicator
                FROM @DefaultAccessRules
                WHERE AccessRuleID = 10537022;

                IF @RuleActiveStatus = 0
                BEGIN
                    SELECT @AdministrativeLevelTypeID = AdministrativeLevelTypeID
                    FROM @DefaultAccessRules
                    WHERE AccessRuleID = 10537022;

                    SELECT @AdministrativeLevelNode
                        = g.node.GetAncestor(g.node.GetLevel() - @AdministrativeLevelTypeID)
                    FROM dbo.tlbOffice o
                        INNER JOIN dbo.tlbGeoLocationShared AS l
                            ON l.idfGeoLocationShared = o.idfLocation
                        INNER JOIN dbo.gisLocation g
                            ON g.idfsLocation = l.idfsLocation
                               AND g.intRowStatus = 0
                    WHERE o.idfOffice = @UserOrganizationID
                          AND g.node.GetLevel() >= @AdministrativeLevelTypeID;

                    -- Administrative level specified in the rule of the site where the session was created.
                    INSERT INTO @FilteredResults
                    SELECT ob.idfOutbreak,
                           a.ReadPermissionIndicator,
                           a.AccessToPersonalDataPermissionIndicator,
                           a.AccessToGenderAndAgeDataPermissionIndicator,
                           a.WritePermissionIndicator,
                           a.DeletePermissionIndicator
                    FROM dbo.tlbOutbreak ob
                        INNER JOIN dbo.tstSite s
                            ON ob.idfsSite = s.idfsSite
                        INNER JOIN dbo.tlbOffice o
                            ON o.idfOffice = s.idfOffice
                               AND o.intRowStatus = 0
                        INNER JOIN dbo.tlbGeoLocationShared l
                            ON l.idfGeoLocationShared = o.idfLocation
                               AND l.intRowStatus = 0
                        INNER JOIN dbo.gisLocation g
                            ON g.idfsLocation = l.idfsLocation
                               AND g.intRowStatus = 0
                        INNER JOIN @DefaultAccessRules a
                            ON a.AccessRuleID = 10537022
                    WHERE ob.intRowStatus = 0
                          AND g.node.IsDescendantOf(@OrganizationAdministrativeLevelNode) = 1;
                END;

                --
                -- Apply at the user's site group level, granted by a site group.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                        ON grantingSGS.idfsSite = o.idfsSite
                    INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                        ON userSiteGroup.idfsSite = @UserSiteID
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

                --
                -- Apply at the user's site level, granted by a site group.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                        ON grantingSGS.idfsSite = o.idfsSite
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorSiteID = @UserSiteID
                           AND ara.ActorEmployeeGroupID IS NULL
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

                -- 
                -- Apply at the user's employee group level, granted by a site group.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                        ON grantingSGS.idfsSite = o.idfsSite
                    INNER JOIN dbo.tlbEmployeeGroupMember egm
                        ON egm.idfEmployee = @UserEmployeeID
                           AND egm.intRowStatus = 0
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

                -- 
                -- Apply at the user's ID level, granted by a site group.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                        ON grantingSGS.idfsSite = o.idfsSite
                    INNER JOIN dbo.tstUserTable u
                        ON u.idfPerson = @UserEmployeeID
                           AND u.intRowStatus = 0
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorUserID = u.idfUserID
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

                --
                -- Apply at the user's site group level, granted by a site.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tflSiteToSiteGroup sgs
                        ON sgs.idfsSite = @UserSiteID
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND sgs.idfsSite = o.idfsSite;

                -- 
                -- Apply at the user's site level, granted by a site.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorSiteID = @UserSiteID
                           AND ara.ActorEmployeeGroupID IS NULL
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteID = o.idfsSite;

                -- 
                -- Apply at the user's employee group level, granted by a site.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tlbEmployeeGroupMember egm
                        ON egm.idfEmployee = @UserEmployeeID
                           AND egm.intRowStatus = 0
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteID = o.idfsSite;

                -- 
                -- Apply at the user's ID level, granted by a site.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tstUserTable u
                        ON u.idfPerson = @UserEmployeeID
                           AND u.intRowStatus = 0
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorUserID = u.idfUserID
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteID = o.idfsSite;

                -- Copy filtered results to results and use search criteria
                INSERT INTO @Results
                SELECT ID,
                       ReadPermissionIndicator,
                       AccessToPersonalDataPermissionIndicator,
                       AccessToGenderAndAgeDataPermissionIndicator,
                       WritePermissionIndicator,
                       DeletePermissionIndicator
                FROM @FilteredResults
                    INNER JOIN dbo.tlbOutbreak o
                        ON o.idfOutbreak = ID
                    INNER JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000019) d
                        ON d.idfsReference = o.idfsDiagnosisOrDiagnosisGroup
                    INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000063) os
                        ON os.idfsReference = o.idfsOutbreakStatus
                    LEFT JOIN dbo.tlbGeoLocation gl
                        ON o.idfGeoLocation = gl.idfGeoLocation
                    INNER JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                        ON lh.idfsLocation = gl.idfsLocation
                    LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000513) ot
                        ON ot.idfsReference = o.OutbreakTypeId
                WHERE o.intRowStatus = 0
                      AND (
                              strOutbreakID LIKE '%' + @QuickSearch + '%'
                              OR d.name LIKE '%' + @QuickSearch + '%'
                              OR os.strDefault LIKE '%' + @QuickSearch + '%'
                              OR ot.strDefault LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel1Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel2Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel3Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel4Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel5Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel6Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel7Name LIKE '%' + @QuickSearch + '%'
                              OR o.datStartDate LIKE '%' + @QuickSearch + '%'
                          )
                GROUP BY ID,
                         ReadPermissionIndicator,
                         AccessToPersonalDataPermissionIndicator,
                         AccessToGenderAndAgeDataPermissionIndicator,
                         WritePermissionIndicator,
                         DeletePermissionIndicator;
            END;

            -- =======================================================================================
            -- DISEASE FILTRATION RULES
            --
            -- Apply disease filtration rules from use case SAUC62.
            -- =======================================================================================		
            -- 
            -- Apply level 0 disease filtration rules for the employee default user group - Denies ONLY
            -- as all records have been pulled above with or without site filtration rules applied.
            --
            DELETE FROM @Results
            WHERE ID IN (
                            SELECT o.idfOutbreak
                            FROM dbo.tlbOutbreak o
                                INNER JOIN dbo.tstObjectAccess oa
                                    ON oa.idfsObjectID = o.idfsDiagnosisOrDiagnosisGroup
                                       AND oa.intRowStatus = 0
                            WHERE o.intRowStatus = 0
                                  AND oa.intPermission = 1
                                  AND oa.idfsObjectType = 10060001 -- Disease
                                  AND oa.idfActor = -506 -- Default role
                        );

            --
            -- Apply level 1 disease filtration rules for an employee's associated user group(s).  
            -- Allows and denies will supersede level 0.
            --
            INSERT INTO @Results
            SELECT o.idfOutbreak,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbOutbreak o
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = o.idfsDiagnosisOrDiagnosisGroup
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000019) d
                    ON d.idfsReference = o.idfsDiagnosisOrDiagnosisGroup
                INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000063) os
                    ON os.idfsReference = o.idfsOutbreakStatus
                LEFT JOIN dbo.tlbGeoLocation gl
                    ON o.idfGeoLocation = gl.idfGeoLocation
                INNER JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                    ON lh.idfsLocation = gl.idfsLocation
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000513) ot
                    ON ot.idfsReference = o.OutbreakTypeId
            WHERE oa.intPermission = 2 -- Allow permission
                  AND o.intRowStatus = 0
                  AND oa.idfsObjectType = 10060001 -- Disease
                  AND oa.idfActor = egm.idfEmployeeGroup
                  AND (
                          strOutbreakID LIKE '%' + @QuickSearch + '%'
                          OR d.name LIKE '%' + @QuickSearch + '%'
                          OR os.strDefault LIKE '%' + @QuickSearch + '%'
                          OR ot.strDefault LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel1Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel2Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel3Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel4Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel5Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel6Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel7Name LIKE '%' + @QuickSearch + '%'
                          OR o.datStartDate LIKE '%' + @QuickSearch + '%'
                      );

            DELETE res
            FROM @Results res
                INNER JOIN dbo.tlbOutbreak o
                    ON o.idfOutbreak = res.ID
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = o.idfsDiagnosisOrDiagnosisGroup
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
            WHERE intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060001 -- Disease
                  AND oa.idfActor = egm.idfEmployeeGroup;

            --
            -- Apply level 2 disease filtration rules for the employee's identity.  Allows and denies 
            -- will supersede level 1.
            --
            INSERT INTO @Results
            SELECT o.idfOutbreak,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbOutbreak o
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = o.idfsDiagnosisOrDiagnosisGroup
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000019) d
                    ON d.idfsReference = o.idfsDiagnosisOrDiagnosisGroup
                INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000063) os
                    ON os.idfsReference = o.idfsOutbreakStatus
                LEFT JOIN dbo.tlbGeoLocation gl
                    ON o.idfGeoLocation = gl.idfGeoLocation
                INNER JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                    ON lh.idfsLocation = gl.idfsLocation
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000513) ot
                    ON ot.idfsReference = o.OutbreakTypeId
            WHERE oa.intPermission = 2 -- Allow permission
                  AND o.intRowStatus = 0
                  AND oa.idfsObjectType = 10060001 -- Disease
                  AND oa.idfActor = @UserEmployeeID
                  AND (
                          strOutbreakID LIKE '%' + @QuickSearch + '%'
                          OR d.name LIKE '%' + @QuickSearch + '%'
                          OR os.strDefault LIKE '%' + @QuickSearch + '%'
                          OR ot.strDefault LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel1Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel2Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel3Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel4Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel5Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel6Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel7Name LIKE '%' + @QuickSearch + '%'
                          OR o.datStartDate LIKE '%' + @QuickSearch + '%'
                      );

            DELETE FROM @Results
            WHERE ID IN (
                            SELECT o.idfOutbreak
                            FROM dbo.tlbOutbreak o
                                INNER JOIN dbo.tstObjectAccess oa
                                    ON oa.idfsObjectID = o.idfsDiagnosisOrDiagnosisGroup
                                       AND oa.intRowStatus = 0
                            WHERE o.intRowStatus = 0
                                  AND oa.intPermission = 1 -- Deny permission
                                  AND oa.idfsObjectType = 10060001 -- Disease
                                  AND idfActor = @UserEmployeeID
                        );

            -- =======================================================================================
            -- SITE FILTRATION RULES
            --
            -- Apply site filtration rules from use case SAUC29.
            -- =======================================================================================		
            -- 
            -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
            -- as all records have been pulled above with or without site filtration rules applied.
            --
            DELETE FROM @Results
            WHERE EXISTS
            (
                SELECT o.idfOutbreak
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tstObjectAccess oa
                        ON oa.idfsObjectID = o.idfsSite
                           AND oa.intRowStatus = 0
                    INNER JOIN dbo.tlbEmployeeGroup eg
                        ON eg.idfsSite = @UserSiteID
                           AND eg.intRowStatus = 0
                    INNER JOIN dbo.trtBaseReference br
                        ON br.idfsBaseReference = eg.idfEmployeeGroup
                           AND br.intRowStatus = 0
                           AND br.blnSystem = 1
                WHERE o.intRowStatus = 0
                      AND oa.idfsObjectOperation = 10059003 -- Read permission
                      AND oa.intPermission = 1 -- Deny permission
                      AND oa.idfsObjectType = 10060011 -- Site
                      AND oa.idfActor = eg.idfEmployeeGroup
            );

            --
            -- Apply level 1 site filtration rules for an employee's associated user group(s).  
            -- Allows and denies will supersede level 0.
            --
            INSERT INTO @Results
            SELECT o.idfOutbreak,
                   (
                       SELECT Permission
                       FROM @UserGroupSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059003
                   ),
                   (
                       SELECT Permission
                       FROM @UserGroupSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059006
                   ),
                   (
                       SELECT Permission
                       FROM @UserGroupSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059007
                   ),
                   (
                       SELECT Permission
                       FROM @UserGroupSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059004
                   ),
                   (
                       SELECT Permission
                       FROM @UserGroupSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059002
                   )
            FROM dbo.tlbOutbreak o
                INNER JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000019) d
                    ON d.idfsReference = o.idfsDiagnosisOrDiagnosisGroup
                INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000063) os
                    ON os.idfsReference = o.idfsOutbreakStatus
                LEFT JOIN dbo.tlbGeoLocation gl
                    ON o.idfGeoLocation = gl.idfGeoLocation
                INNER JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                    ON lh.idfsLocation = gl.idfsLocation
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000513) ot
                    ON ot.idfsReference = o.OutbreakTypeId
            WHERE o.intRowStatus = 0
                  AND EXISTS
            (
                SELECT * FROM @UserGroupSitePermissions WHERE SiteID = o.idfsSite
            )
                  AND (
                          strOutbreakID LIKE '%' + @QuickSearch + '%'
                          OR d.name LIKE '%' + @QuickSearch + '%'
                          OR os.strDefault LIKE '%' + @QuickSearch + '%'
                          OR ot.strDefault LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel1Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel2Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel3Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel4Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel5Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel6Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel7Name LIKE '%' + @QuickSearch + '%'
                          OR o.datStartDate LIKE '%' + @QuickSearch + '%'
                      );

            DELETE res
            FROM @Results res
                INNER JOIN dbo.tlbOutbreak o
                    ON o.idfOutbreak = res.ID
                INNER JOIN @UserGroupSitePermissions ugsp
                    ON ugsp.SiteID = o.idfsSite
            WHERE ugsp.Permission = 2 -- Deny permission
                  AND ugsp.PermissionTypeID = 10059003; -- Read permission

            --
            -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
            -- will supersede level 1.
            --
            INSERT INTO @Results
            SELECT o.idfOutbreak,
                   (
                       SELECT Permission
                       FROM @UserSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059003
                   ),
                   (
                       SELECT Permission
                       FROM @UserSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059006
                   ),
                   (
                       SELECT Permission
                       FROM @UserSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059007
                   ),
                   (
                       SELECT Permission
                       FROM @UserSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059004
                   ),
                   (
                       SELECT Permission
                       FROM @UserSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059002
                   )
            FROM dbo.tlbOutbreak o
                INNER JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000019) d
                    ON d.idfsReference = o.idfsDiagnosisOrDiagnosisGroup
                INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000063) os
                    ON os.idfsReference = o.idfsOutbreakStatus
                LEFT JOIN dbo.tlbGeoLocation gl
                    ON o.idfGeoLocation = gl.idfGeoLocation
                INNER JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                    ON lh.idfsLocation = gl.idfsLocation
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000513) ot
                    ON ot.idfsReference = o.OutbreakTypeId
            WHERE o.intRowStatus = 0
                  AND EXISTS
            (
                SELECT * FROM @UserSitePermissions WHERE SiteID = o.idfsSite
            )
                  AND (
                          strOutbreakID LIKE '%' + @QuickSearch + '%'
                          OR d.name LIKE '%' + @QuickSearch + '%'
                          OR os.strDefault LIKE '%' + @QuickSearch + '%'
                          OR ot.strDefault LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel1Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel2Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel3Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel4Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel5Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel6Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel7Name LIKE '%' + @QuickSearch + '%'
                          OR o.datStartDate LIKE '%' + @QuickSearch + '%'
                      );

            DELETE FROM @Results
            WHERE ID IN (
                            SELECT o.idfOutbreak
                            FROM dbo.tlbOutbreak o
                                INNER JOIN @UserSitePermissions usp
                                    ON usp.SiteID = o.idfsSite
                            WHERE usp.Permission = 4 -- Deny permission
                                  AND usp.PermissionTypeID = 10059003 -- Read permission
                        );
        END;

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        INSERT INTO @FinalResults
        SELECT ID,
               MAX(res.ReadPermissionIndicator),
               MAX(res.AccessToPersonalDataPermissionIndicator),
               MAX(res.AccessToGenderAndAgeDataPermissionIndicator),
               MAX(res.WritePermissionIndicator),
               MAX(res.DeletePermissionIndicator)
        FROM @Results res
        WHERE res.ReadPermissionIndicator IN ( 1, 3, 5 )
        GROUP BY ID;

        WITH paging
        AS (SELECT ROW_NUMBER() OVER (ORDER BY CASE
                                                   WHEN @SortColumn = 'OutbreakID'
                                                        AND @SortOrder = 'ASC' THEN
                                          (os.name + ' ' + o.strOutbreakID)
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'OutbreakID'
                                                        AND @SortOrder = 'DESC' THEN
                                               (os.name + ' ' + o.strOutbreakID)
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'OutbreakStatusTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       os.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'OutbreakStatusTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       os.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'OutbreakTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       ot.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'OutbreakTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       ot.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel1Name'
                                                        AND @SortOrder = 'ASC' THEN
                                                       lh.AdminLevel1Name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel1Name'
                                                        AND @SortOrder = 'DESC' THEN
                                                       lh.AdminLevel1Name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel2Name'
                                                        AND @SortOrder = 'ASC' THEN
                                                       lh.AdminLevel2Name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel2Name'
                                                        AND @SortOrder = 'DESC' THEN
                                                       lh.AdminLevel2Name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel3Name'
                                                        AND @SortOrder = 'ASC' THEN
                                                       lh.AdminLevel3Name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel3Name'
                                                        AND @SortOrder = 'DESC' THEN
                                                       lh.AdminLevel3Name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel4Name'
                                                        AND @SortOrder = 'ASC' THEN
                                                       lh.AdminLevel4Name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel4Name'
                                                        AND @SortOrder = 'DESC' THEN
                                                       lh.AdminLevel4Name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel5Name'
                                                        AND @SortOrder = 'ASC' THEN
                                                       lh.AdminLevel5Name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel5Name'
                                                        AND @SortOrder = 'DESC' THEN
                                                       lh.AdminLevel5Name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel6Name'
                                                        AND @SortOrder = 'ASC' THEN
                                                       lh.AdminLevel6Name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel6Name'
                                                        AND @SortOrder = 'DESC' THEN
                                                       lh.AdminLevel6Name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel7Name'
                                                        AND @SortOrder = 'ASC' THEN
                                                       lh.AdminLevel7Name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel7Name'
                                                        AND @SortOrder = 'DESC' THEN
                                                       lh.AdminLevel7Name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'DiseaseName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       d.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'DiseaseName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       d.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'StartDate'
                                                        AND @SortOrder = 'ASC' THEN
                                                       o.datStartDate
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'StartDate'
                                                        AND @SortOrder = 'DESC' THEN
                                                       o.datStartDate
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'INIT' THEN
                                                       os.name + ',' + CONVERT(NVARCHAR, o.datStartDate, 12)
                                               END DESC
                                     ) AS ROWNUM,
                   ID,
                   c = COUNT(*) OVER ()
            FROM @FinalResults res
                INNER JOIN dbo.tlbOutbreak AS o
                    ON o.idfOutbreak = res.ID
                INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000019) d
                    ON d.idfsReference = o.idfsDiagnosisOrDiagnosisGroup
                INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000063) os
                    ON os.idfsReference = o.idfsOutbreakStatus
                LEFT JOIN dbo.tlbGeoLocation gl
                    ON o.idfGeoLocation = gl.idfGeoLocation
                INNER JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                    ON lh.idfsLocation = gl.idfsLocation
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000513) ot
                    ON ot.idfsReference = o.OutbreakTypeId
           )
        SELECT paging.ROWNUM,
               o.idfOutbreak,
               strOutbreakID AS OutbreakID,
               d.name AS DiseaseName,
               os.name AS OutbreakStatusTypeName,
               ot.name AS OutbreakTypeName,
               lh.AdminLevel1Name AS AdministrativeLevel1Name,
               lh.AdminLevel2Name AS AdministrativeLevel2Name,
               lh.AdminLevel3Name AS AdministrativeLevel3Name,
               lh.AdminLevel4Name AS AdministrativeLevel4Name,
               lh.AdminLevel5Name AS AdministrativeLevel5Name,
               lh.AdminLevel6Name AS AdministrativeLevel6Name,
               lh.AdminLevel7Name AS AdministrativeLevel7Name,
               o.datStartDate AS StartDate,
               o.idfsSite AS SiteID,
               CASE
                   WHEN ReadPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN ReadPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN ReadPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN ReadPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, ReadPermissionIndicator)
               END AS ReadPermissionindicator,
               CASE
                   WHEN AccessToPersonalDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN AccessToPersonalDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN AccessToPersonalDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN AccessToPersonalDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, AccessToPersonalDataPermissionIndicator)
               END AS AccessToPersonalDataPermissionIndicator,
               CASE
                   WHEN AccessToGenderAndAgeDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN AccessToGenderAndAgeDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN AccessToGenderAndAgeDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN AccessToGenderAndAgeDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, AccessToGenderAndAgeDataPermissionIndicator)
               END AS AccessToGenderAndAgeDataPermissionIndicator,
               CASE
                   WHEN WritePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN WritePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN WritePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN WritePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, WritePermissionIndicator)
               END AS WritePermissionIndicator,
               CASE
                   WHEN DeletePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN DeletePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN DeletePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN DeletePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, DeletePermissionIndicator)
               END AS DeletePermissionIndicator,
               c AS RecordCount,
               (
                   SELECT COUNT(*) FROM dbo.tlbOutbreak WHERE intRowStatus = 0
               ) AS TotalCount,
               CurrentPage = @PageNumber,
               TotalPages = (c / @PageSize) + IIF(c % @PageSize > 0, 1, 0)
        FROM @FinalResults res
            INNER JOIN paging
                ON paging.ID = res.ID
            INNER JOIN dbo.tlbOutbreak o
                ON o.idfOutbreak = res.ID
            INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000019) d
                ON d.idfsReference = o.idfsDiagnosisOrDiagnosisGroup
            INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000063) os
                ON os.idfsReference = o.idfsOutbreakStatus
            LEFT JOIN dbo.tlbGeoLocation gl
                ON o.idfGeoLocation = gl.idfGeoLocation
            INNER JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                ON lh.idfsLocation = gl.idfsLocation
            LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000513) ot
                ON ot.idfsReference = o.OutbreakTypeId
        WHERE RowNum > @firstRec
              AND RowNum < @lastRec
        ORDER BY paging.ROWNUM;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USP_VAS_MONITORING_SESSION_GETList]...';


GO
-- ================================================================================================
-- Name: USP_VAS_MONITORING_SESSION_GETList
--
-- Description: Gets a list of veterinary active surveillance sessions for the veterinary module 
-- based on search criteria provided.
--
-- Revision History:
-- Name            Date       Change Detail
-- --------------- ---------- --------------------------------------------------------------------
-- Mandar Kulkarni            Initial release.
-- Stephen Long    06/06/2018 Added campaign ID parameter and additional where clause check.
-- Stephen Long    11/18/2018 Renamed with correct module name, and updated parameter names and 
--                            result name field names.
-- Stephen Long    12/31/2018 Added pagination logic.
-- Stephen Long    05/01/2019 Removed additional field parameters to sync with use case, and 
--                            added campaign and monitoring session ID parameters.
-- Stephen Long    06/25/2019 Corrected session category type.
-- Stephen Long    07/06/2019 Added EIDSSCampaignID to the select.
-- Stephen Long    08/28/2019 Corrected date entered from and to when null dates are passed in on 
--                            one of the dates and the other has data.
-- Stephen Long    09/13/2019 Added settlement ID parameter and where clause.
-- Stephen Long    12/18/2019 Added legacy session ID parameter and where clause.
-- Stephen Long    01/22/2020 Added site list parameter for site filtration.
-- Stephen Long    02/02/2020 Added non-configurable filtration rules.
-- Stephen Long    02/20/2020 Added additional non-configurable rules.
-- Stephen Long    03/25/2020 Added if/else for first-level and second-level site types to bypass 
--                            non-configurable rules.
-- Stephen Long    04/17/2020 Changed join from FN_GBL_INSTITUTION to tstSite as not all sites have 
--                            organizations.
-- Stephen Long    05/18/2020 Added disease filtration rules from use case SAUC62.
-- Stephen Long    06/22/2020 Added where criteria to the query when no site filtration is 
--                            required.
-- Stephen Long    07/07/2020 Added trim to EIDSS identifier like criteria.
-- Stephen Long    09/23/2020 Added descending to the order by clause.
-- Stephen Long    11/18/2020 Renamed organization ID and name to site ID and name.
-- Stephen Long    11/25/2020 Added configurable site filtration rules.
-- Stephen Long    12/13/2020 Added apply configurable filtration indicator parameter.
-- Stephen Long    12/24/2020 Modified join on disease filtration default role rule.
-- Stephen Long    12/29/2020 Changed function call on reference data for inactive records.
-- Stephen Long    01/28/2021 Added order by clause to handle user selected sorting across 
--                            pagination sets.
-- Stephen Long    04/02/2021 Added updated pagination and location hierarchy.
-- Mike Kornegay   12/16/2021 Added tlbMonitoringSessionToDiagnosis to all joins involving 
--                            idfsDiagnosis and changed
--                            location hieararchy to use FN_GBL_LocationHierarchy_Flattened
-- Stephen Long    01/26/2022 Added the disease identifiers and names fields to the query.
-- Mike Kornegay   01/31/2022 Removed the left join on tlbMonitoringSessionToDiagnosis because it 
--                            was replaced
--							  by the new disease functions.
-- Mike Kornegay   03/10/2022 Added SessionStatusTypeID and ReportTypeID to return fields.
-- Mike Kornegay   03/20/2022 Corrected date comparisons to use binary compare instead of between.
-- Mike Kornegay   03/25/2022 Further changes to date comparisons to prevent sql overflow.
-- Stephen Long    03/29/2022 Fix to site filtration to pull back a user's own site records.
-- Mike Kornegay   05/16/2022 Correct returned location levels to be country, region, rayon, 
--                            settlement
-- Mike Kornegay   05/19/2022 Correct location search to use node descendants instead of particular 
--                            idfsLocation
-- Stephen Long    06/03/2022 Updated to point default access rules to base reference.
-- Mike Kornegay   06/13/2022 Changed ReportTypeID and ReportTypeName to point to the new SessionCategoryID - this
--							   field now stores the report type of the vet surveillance session so we do not depend 
--							   on the diagnosis list to determine type.
-- Mike Kornegay   07/27/2022 Changed CTE for paging and sorting.
-- Stephen Long    08/13/2022 Added session category type ID parameter and where criteria.
-- Stephen Long    09/22/2022 Add check for "0" page size.  If "0", then set to 1.
-- Mike Kornegay   09/24/2022 Testing stored proc change.
-- Stephen Long    01/09/2023 Updated for site filtration queries.
--
-- Testing Code:
--EXEC	@return_value = [dbo].[USP_VAS_MONITORING_SESSION_GETList]
--		@LanguageID = N'en-US',
--		@SessionID = NULL,
--		@LegacySessionID = NULL,
--		@CampaignID = NULL,
--		@CampaignKey = NULL,
--		@SessionStatusTypeID = NULL,
--		@DateEnteredFrom = NULL,
--		@DateEnteredTo = NULL,
--		@AdministrativeLevelID = 349690000000,
--		@DiseaseID = NULL,
--		@UserSiteID = 1100,
--		@UserOrganizationID = 709150000000,
--		@UserEmployeeID = 155568340001298,
--		@ApplySiteFiltrationIndicator = 0,
--		@SortColumn = N'SessionID',
--		@SortOrder = N'desc',
--		@PageNumber = 1,
--		@PageSize = 10
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_VAS_MONITORING_SESSION_GETList]
(
    @LanguageID NVARCHAR(50),
    @SessionID NVARCHAR(200) = NULL,
    @LegacySessionID NVARCHAR(50) = NULL,
    @CampaignID NVARCHAR(200) = NULL,
    @CampaignKey BIGINT = NULL,
    @SessionStatusTypeID BIGINT = NULL,
    @DateEnteredFrom DATETIME = NULL,
    @DateEnteredTo DATETIME = NULL,
    @AdministrativeLevelID BIGINT = NULL,
    @DiseaseID BIGINT = NULL,
    @SessionCategoryTypeID BIGINT = NULL,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT,
    @UserEmployeeID BIGINT,
    @ApplySiteFiltrationIndicator BIT = 0,
    @SortColumn NVARCHAR(30) = 'SessionID',
    @SortOrder NVARCHAR(4) = 'DESC',
    @PageNumber INT = 1,
    @PageSize INT = 10
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @firstRec INT;
    DECLARE @lastRec INT;
    SET @firstRec = (@PageNumber - 1) * @PageSize
    SET @lastRec = (@PageNumber * @PageSize + 1);

    DECLARE @AdministrativeLevelNode AS HIERARCHYID;
    IF @AdministrativeLevelID IS NOT NULL
    BEGIN
        SELECT @AdministrativeLevelNode = node
        FROM dbo.gisLocation
        WHERE idfsLocation = @AdministrativeLevelID;
    END;
    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );

    BEGIN TRY
        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        IF @PageSize = 0
        BEGIN
            SET @PageSize = 1;
        END

        -- ========================================================================================
        -- NO CONFIGURABLE FILTRATION RULES APPLIED
        --
        -- For first and second level sites, do not apply any configurable filtration rules.
        -- ========================================================================================
        IF @ApplySiteFiltrationIndicator = 0
        BEGIN
            INSERT INTO @Results
            SELECT ms.idfMonitoringSession,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbMonitoringSession ms
                --INNER JOIN FN_GBL_LocationHierarchy_Flattened(@LanguageID) LH ON LH.idfsLocation = ms.idfsLocation
                LEFT JOIN dbo.tlbCampaign c
                    ON c.idfCampaign = ms.idfCampaign
                       AND c.intRowStatus = 0
                LEFT JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                    ON msd.idfMonitoringSession = ms.idfMonitoringSession
                LEFT JOIN dbo.gisLocation g
                    ON g.idfsLocation = ms.idfsLocation
            WHERE ms.intRowStatus = 0
                  AND ms.SessionCategoryID IN ( 10502002, 10502009 ) -- Veterinary Active Surveillance Session (Avian and Livestock)
                  AND (
                          ms.idfCampaign = @CampaignKey
                          OR @CampaignKey IS NULL
                      )
                  AND (
                          ms.idfsMonitoringSessionStatus = @SessionStatusTypeID
                          OR @SessionStatusTypeID IS NULL
                      )
                  AND (
                          msd.idfsDiagnosis = @DiseaseID
                          OR @DiseaseID IS NULL
                      )
                  AND (
                          (CAST(ms.datEnteredDate AS DATE)
                  BETWEEN @DateEnteredFrom AND @DateEnteredTo
                          )
                          OR (
                                 @DateEnteredFrom IS NULL
                                 OR @DateEnteredTo IS NULL
                             )
                      )
                  AND (
                          g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                          OR @AdministrativeLevelID IS NULL
                      )
                  AND (
                          ms.strMonitoringSessionID LIKE '%' + TRIM(@SessionID) + '%'
                          OR @SessionID IS NULL
                      )
                  AND (
                          c.strCampaignID LIKE '%' + TRIM(@CampaignID) + '%'
                          OR @CampaignID IS NULL
                      )
                  AND (
                          LegacySessionID LIKE '%' + TRIM(@LegacySessionID) + '%'
                          OR @LegacySessionID IS NULL
                      )
                  AND (
                          ms.SessionCategoryID = @SessionCategoryTypeID
                          OR @SessionCategoryTypeID IS NULL
                      )
            GROUP BY ms.idfMonitoringSession;
        END
        ELSE
        BEGIN
            INSERT INTO @Results
            SELECT ms.idfMonitoringSession,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbMonitoringSession ms
                --INNER JOIN FN_GBL_LocationHierarchy_Flattened(@LanguageID) LH ON LH.idfsLocation = ms.idfsLocation
                LEFT JOIN dbo.tlbCampaign c
                    ON c.idfCampaign = ms.idfCampaign
                       AND c.intRowStatus = 0
                LEFT JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                    ON msd.idfMonitoringSession = ms.idfMonitoringSession
                LEFT JOIN dbo.gisLocation g
                    ON g.idfsLocation = ms.idfsLocation
            WHERE ms.intRowStatus = 0
                  AND ms.idfsSite = @UserSiteID
                  AND ms.SessionCategoryID IN ( 10502002, 10502009 ) -- Veterinary Active Surveillance Session
                  AND (
                          ms.idfCampaign = @CampaignKey
                          OR @CampaignKey IS NULL
                      )
                  AND (
                          ms.idfsMonitoringSessionStatus = @SessionStatusTypeID
                          OR @SessionStatusTypeID IS NULL
                      )
                  AND (
                          msd.idfsDiagnosis = @DiseaseID
                          OR @DiseaseID IS NULL
                      )
                  AND (
                          (CAST(ms.datEnteredDate AS DATE)
                  BETWEEN @DateEnteredFrom AND @DateEnteredTo
                          )
                          OR (
                                 @DateEnteredFrom IS NULL
                                 OR @DateEnteredTo IS NULL
                             )
                      )
                  AND (
                          g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                          OR @AdministrativeLevelID IS NULL
                      )
                  AND (
                          ms.strMonitoringSessionID LIKE '%' + TRIM(@SessionID) + '%'
                          OR @SessionID IS NULL
                      )
                  AND (
                          c.strCampaignID LIKE '%' + TRIM(@CampaignID) + '%'
                          OR @CampaignID IS NULL
                      )
                  AND (
                          LegacySessionID LIKE '%' + TRIM(@LegacySessionID) + '%'
                          OR @LegacySessionID IS NULL
                      )
                  AND (
                          ms.SessionCategoryID = @SessionCategoryTypeID
                          OR @SessionCategoryTypeID IS NULL
                      )
            GROUP BY ms.idfMonitoringSession;

            DECLARE @FilteredResults TABLE
            (
                ID BIGINT NOT NULL,
                ReadPermissionIndicator BIT NOT NULL,
                AccessToPersonalDataPermissionIndicator BIT NOT NULL,
                AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
                WritePermissionIndicator BIT NOT NULL,
                DeletePermissionIndicator BIT NOT NULL, INDEX IDX_ID (ID
                                                                     ));

            -- =======================================================================================
            -- DEFAULT CONFIGURABLE FILTRATION RULES
            --
            -- Apply non-configurable filtration rules for third level sites.
            -- =======================================================================================
            DECLARE @RuleActiveStatus INT = 0;
            DECLARE @AdministrativeLevelTypeID INT;
            DECLARE @OrganizationAdministrativeLevelNode HIERARCHYID;
            DECLARE @DefaultAccessRules AS TABLE
            (
                AccessRuleID BIGINT NOT NULL,
                ActiveIndicator INT NOT NULL,
                ReadPermissionIndicator BIT NOT NULL,
                AccessToPersonalDataPermissionIndicator BIT NOT NULL,
                AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
                WritePermissionIndicator BIT NOT NULL,
                DeletePermissionIndicator BIT NOT NULL,
                AdministrativeLevelTypeID INT NULL
            );

            INSERT INTO @DefaultAccessRules
            SELECT AccessRuleID,
                   a.intRowStatus,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator,
                   a.AdministrativeLevelTypeID
            FROM dbo.AccessRule a
            WHERE DefaultRuleIndicator = 1;

            --
            -- Session data shall be available to all sites of the same administrative level.
            --
            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
            WHERE AccessRuleID = 10537015;

            IF @RuleActiveStatus = 0
            BEGIN
                SELECT @AdministrativeLevelTypeID = AdministrativeLevelTypeID
                FROM @DefaultAccessRules
                WHERE AccessRuleID = 10537015;

                SELECT @OrganizationAdministrativeLevelNode
                    = g.node.GetAncestor(g.node.GetLevel() - @AdministrativeLevelTypeID)
                FROM dbo.tlbOffice o
                    INNER JOIN dbo.tlbGeoLocationShared l
                        ON l.idfGeoLocationShared = o.idfLocation
                    INNER JOIN dbo.gisLocation g
                        ON g.idfsLocation = l.idfsLocation
                WHERE o.idfOffice = @UserOrganizationID
                      AND g.node.GetLevel() >= @AdministrativeLevelTypeID;

                -- Administrative level specified in the rule of the site where the session was created.
                INSERT INTO @FilteredResults
                SELECT ms.idfMonitoringSession,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbMonitoringSession ms
                    INNER JOIN dbo.tstSite s
                        ON ms.idfsSite = s.idfsSite
                    INNER JOIN dbo.tlbOffice o
                        ON o.idfOffice = s.idfOffice
                    INNER JOIN dbo.tlbGeoLocationShared l
                        ON l.idfGeoLocationShared = o.idfLocation
                    INNER JOIN dbo.gisLocation g
                        ON g.idfsLocation = l.idfsLocation
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537015
                WHERE ms.intRowStatus = 0
                      AND ms.SessionCategoryID IN ( 10502002, 10502009 ) -- Veterinary Active Surveillance Session (Avian and Livestock)
                      AND g.node.IsDescendantOf(@OrganizationAdministrativeLevelNode) = 1;

                -- Administrative level specified in the rule of the farm address.
                INSERT INTO @FilteredResults
                SELECT ms.idfMonitoringSession,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbMonitoringSession ms
                    INNER JOIN dbo.tlbFarm f
                        ON f.idfMonitoringSession = ms.idfMonitoringSession
                    INNER JOIN dbo.tlbGeoLocation l
                        ON l.idfGeoLocation = f.idfFarmAddress
                    INNER JOIN dbo.gisLocation g
                        ON g.idfsLocation = l.idfsLocation
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537015
                WHERE ms.intRowStatus = 0
                      AND ms.SessionCategoryID IN ( 10502002, 10502009 ) -- Veterinary Active Surveillance Session (Avian and Livestock)
                      AND g.node.IsDescendantOf(@OrganizationAdministrativeLevelNode) = 1;
            END;

            --
            -- Session data is always distributed across the sites where the disease reports are 
            -- linked to the session.
            --
            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
            WHERE AccessRuleID = 10537016;

            IF @RuleActiveStatus = 0
            BEGIN
                INSERT INTO @FilteredResults
                SELECT ms.idfMonitoringSession,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbMonitoringSession ms
                    INNER JOIN dbo.tlbVetCase v
                        ON v.idfParentMonitoringSession = ms.idfMonitoringSession
                           AND v.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537016
                WHERE ms.intRowStatus = 0
                      AND ms.SessionCategoryID IN ( 10502002, 10502009 ) -- Veterinary Active Surveillance Session (Avian and Livestock)
                      AND v.idfsSite = @UserSiteID;
            END;

            --
            -- Session data shall be available to all sites' organizations connected to the particular 
            -- session where samples were transferred out.
            --
            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
            WHERE AccessRuleID = 10537017;

            IF @RuleActiveStatus = 0
            BEGIN
                -- Samples transferred collected by and sent to organizations
                INSERT INTO @FilteredResults
                SELECT ms.idfMonitoringSession,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbMonitoringSession ms
                    INNER JOIN dbo.tlbMaterial m
                        ON ms.idfMonitoringSession = m.idfMonitoringSession
                           AND m.intRowStatus = 0
                    INNER JOIN dbo.tlbTransferOutMaterial toutm
                        ON m.idfMaterial = toutm.idfMaterial
                           AND toutm.intRowStatus = 0
                    INNER JOIN dbo.tlbTransferOUT tout
                        ON toutm.idfTransferOut = tout.idfTransferOut
                           AND tout.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537017
                WHERE ms.intRowStatus = 0
                      AND ms.SessionCategoryID IN ( 10502002, 10502009 ) -- Veterinary Active Surveillance Session (Avian and Livestock)
                      AND tout.idfSendToOffice = @UserOrganizationID;

                INSERT INTO @FilteredResults
                SELECT ms.idfMonitoringSession,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbMonitoringSession ms
                    INNER JOIN dbo.tlbMaterial m
                        ON ms.idfMonitoringSession = m.idfMonitoringSession
                           AND m.intRowStatus = 0
                    INNER JOIN dbo.tlbTransferOutMaterial toutm
                        ON m.idfMaterial = toutm.idfMaterial
                           AND toutm.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537017
                WHERE ms.intRowStatus = 0
                      AND ms.SessionCategoryID IN ( 10502002, 10502009 ) -- Veterinary Active Surveillance Session (Avian and Livestock)
                      AND (
                              m.idfFieldCollectedByOffice = @UserOrganizationID
                              OR m.idfSendToOffice = @UserOrganizationID
                          );
            END;

            -- =======================================================================================
            -- CONFIGURABLE FILTRATION RULES
            -- 
            -- Apply configurable filtration rules for use case SAUC34. Some of these rules may 
            -- overlap the default rules.
            -- =======================================================================================
            --
            -- Apply at the user's site group level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT ms.idfMonitoringSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbMonitoringSession ms
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = ms.idfsSite
                INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                    ON userSiteGroup.idfsSite = @UserSiteID
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ms.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT ms.idfMonitoringSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbMonitoringSession ms
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = ms.idfsSite
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ms.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's employee group level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT ms.idfMonitoringSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbMonitoringSession ms
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = ms.idfsSite
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ms.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's ID level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT ms.idfMonitoringSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbMonitoringSession ms
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = ms.idfsSite
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ms.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site group level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT ms.idfMonitoringSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbMonitoringSession ms
                INNER JOIN dbo.tflSiteToSiteGroup sgs
                    ON sgs.idfsSite = @UserSiteID
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ms.intRowStatus = 0
                  AND sgs.idfsSite = ms.idfsSite;

            -- 
            -- Apply at the user's site level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT ms.idfMonitoringSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbMonitoringSession ms
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ms.intRowStatus = 0
                  AND a.GrantingActorSiteID = ms.idfsSite;

            -- 
            -- Apply at the user's employee group level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT ms.idfMonitoringSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbMonitoringSession ms
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ms.intRowStatus = 0
                  AND a.GrantingActorSiteID = ms.idfsSite;

            -- 
            -- Apply at the user's ID level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT ms.idfMonitoringSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbMonitoringSession ms
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ms.intRowStatus = 0
                  AND a.GrantingActorSiteID = ms.idfsSite;

            -- Copy filtered results to results and use search criteria
            INSERT INTO @Results
            SELECT ID,
                   ReadPermissionIndicator,
                   AccessToPersonalDataPermissionIndicator,
                   AccessToGenderAndAgeDataPermissionIndicator,
                   WritePermissionIndicator,
                   DeletePermissionIndicator
            FROM @FilteredResults
                INNER JOIN dbo.tlbMonitoringSession ms
                    ON ms.idfMonitoringSession = ID
                LEFT JOIN dbo.tlbCampaign c
                    ON c.idfCampaign = ms.idfCampaign
                       AND c.intRowStatus = 0
                LEFT JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                    ON msd.idfMonitoringSession = ms.idfMonitoringSession
                LEFT JOIN dbo.gisLocation g
                    ON g.idfsLocation = ms.idfsLocation
            WHERE ms.SessionCategoryID IN ( 10502002, 10502009 ) -- Veterinary Active Surveillance Session (Avian and Livestock)
                  AND (
                          ms.idfCampaign = @CampaignKey
                          OR @CampaignKey IS NULL
                      )
                  AND (
                          ms.idfsMonitoringSessionStatus = @SessionStatusTypeID
                          OR @SessionStatusTypeID IS NULL
                      )
                  AND (
                          msd.idfsDiagnosis = @DiseaseID
                          OR @DiseaseID IS NULL
                      )
                  AND (
                          g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                          OR @AdministrativeLevelID IS NULL
                      )
                  AND (
                          (CAST(ms.datEnteredDate AS DATE)
                  BETWEEN @DateEnteredFrom AND @DateEnteredTo
                          )
                          OR (
                                 @DateEnteredFrom IS NULL
                                 OR @DateEnteredTo IS NULL
                             )
                      )
                  AND (
                          ms.strMonitoringSessionID LIKE '%' + TRIM(@SessionID) + '%'
                          OR @SessionID IS NULL
                      )
                  AND (
                          c.strCampaignID LIKE '%' + TRIM(@CampaignID) + '%'
                          OR @CampaignID IS NULL
                      )
                  AND (
                          LegacySessionID LIKE '%' + TRIM(@LegacySessionID) + '%'
                          OR @LegacySessionID IS NULL
                      )
                  AND (
                          ms.SessionCategoryID = @SessionCategoryTypeID
                          OR @SessionCategoryTypeID IS NULL
                      )
            GROUP BY ID,
                     ReadPermissionIndicator,
                     AccessToPersonalDataPermissionIndicator,
                     AccessToGenderAndAgeDataPermissionIndicator,
                     WritePermissionIndicator,
                     DeletePermissionIndicator;
        END;

        -- =======================================================================================
        -- DISEASE FILTRATION RULES
        --
        -- Apply disease filtration rules from use case SAUC62.
        -- =======================================================================================
        -- 
        -- Apply level 0 disease filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without filtration rules applied.
        --
        DELETE FROM @Results
        WHERE ID IN (
                        SELECT ms.idfMonitoringSession
                        FROM dbo.tlbMonitoringSession ms
                            LEFT JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                                ON msd.idfMonitoringSession = ms.idfMonitoringSession
                            INNER JOIN dbo.tstObjectAccess oa
                                ON oa.idfsObjectID = msd.idfsDiagnosis
                                   AND oa.intRowStatus = 0
                        WHERE ms.intRowStatus = 0
                              AND oa.intPermission = 1 -- Deny permission
                              AND oa.idfsObjectType = 10060001 -- Disease
                              AND oa.idfActor = -506 -- Default role
                    );

        --
        -- Apply level 1 disease filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        INSERT INTO @Results
        SELECT ms.idfMonitoringSession,
               1,
               1,
               1,
               1,
               1
        FROM dbo.tlbMonitoringSession ms
            LEFT JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                ON msd.idfMonitoringSession = ms.idfMonitoringSession
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = msd.idfsDiagnosis
                   AND oa.intRowStatus = 0
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intPermission = 2 -- Allow permission
              AND ms.intRowStatus = 0
              AND oa.idfsObjectType = 10060001 -- Disease
              AND oa.idfActor = egm.idfEmployeeGroup
        GROUP BY ms.idfMonitoringSession;

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbMonitoringSession ms
                ON ms.idfMonitoringSession = res.ID
            LEFT JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                ON msd.idfMonitoringSession = ms.idfMonitoringSession
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = msd.idfsDiagnosis
                   AND oa.intRowStatus = 0
        WHERE oa.intPermission = 1 -- Deny permission
              AND oa.idfsObjectType = 10060001 -- Disease
              AND oa.idfActor = egm.idfEmployeeGroup;

        --
        -- Apply level 2 disease filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        INSERT INTO @Results
        SELECT ms.idfMonitoringSession,
               1,
               1,
               1,
               1,
               1
        FROM dbo.tlbMonitoringSession ms
            LEFT JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                ON msd.idfMonitoringSession = ms.idfMonitoringSession
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = msd.idfsDiagnosis
                   AND oa.intRowStatus = 0
        WHERE oa.intPermission = 2 -- Allow permission
              AND ms.intRowStatus = 0
              AND oa.idfsObjectType = 10060001 -- Disease
              AND oa.idfActor = @UserEmployeeID
        GROUP BY ms.idfMonitoringSession;

        DELETE FROM @Results
        WHERE ID IN (
                        SELECT ms.idfMonitoringSession
                        FROM dbo.tlbMonitoringSession ms
                            LEFT JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                                ON msd.idfMonitoringSession = ms.idfMonitoringSession
                            INNER JOIN dbo.tstObjectAccess oa
                                ON oa.idfsObjectID = msd.idfsDiagnosis
                                   AND oa.intRowStatus = 0
                        WHERE ms.intRowStatus = 0
                              AND oa.intPermission = 1 -- Deny permission
                              AND oa.idfsObjectType = 10060001 -- Disease
                              AND oa.idfActor = @UserEmployeeID
                    );

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT ms.idfMonitoringSession
            FROM dbo.tlbMonitoringSession ms
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = ms.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE ms.intRowStatus = 0
                  AND oa.idfsObjectOperation = 10059003 -- Read permission
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        INSERT INTO @Results
        SELECT ms.idfMonitoringSession,
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = ms.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = ms.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = ms.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = ms.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = ms.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbMonitoringSession ms
        WHERE ms.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserGroupSitePermissions WHERE SiteID = ms.idfsSite
        );

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbMonitoringSession ms
                ON ms.idfMonitoringSession = res.ID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = ms.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003; -- Read permission

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        INSERT INTO @Results
        SELECT ms.idfMonitoringSession,
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = ms.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = ms.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = ms.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = ms.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = ms.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbMonitoringSession ms
        WHERE ms.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserSitePermissions WHERE SiteID = ms.idfsSite
        );

        DELETE FROM @Results
        WHERE ID IN (
                        SELECT ms.idfMonitoringSession
                        FROM dbo.tlbMonitoringSession ms
                            INNER JOIN @UserSitePermissions usp
                                ON usp.SiteID = ms.idfsSite
                        WHERE usp.Permission = 4 -- Deny permission
                              AND usp.PermissionTypeID = 10059003 -- Read permission
                    );

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        INSERT INTO @FinalResults
        SELECT ID,
               MAX(res.ReadPermissionIndicator),
               MAX(res.AccessToPersonalDataPermissionIndicator),
               MAX(res.AccessToGenderAndAgeDataPermissionIndicator),
               MAX(res.WritePermissionIndicator),
               MAX(res.DeletePermissionIndicator)
        FROM @Results res
            INNER JOIN dbo.tlbMonitoringSession ms
                ON ms.idfMonitoringSession = res.ID
            LEFT JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                ON msd.idfMonitoringSession = ms.idfMonitoringSession
            LEFT JOIN dbo.tlbCampaign c
                ON c.idfCampaign = ms.idfCampaign
                   AND c.intRowStatus = 0
            LEFT JOIN dbo.gisLocation g
                ON g.idfsLocation = ms.idfsLocation
        WHERE res.ReadPermissionIndicator IN ( 1, 3, 5 )
              AND ms.SessionCategoryID IN ( 10502002, 10502009 ) -- Veterinary Active Surveillance Session (Avian and Livestock)
              AND (
                      ms.idfCampaign = @CampaignKey
                      OR @CampaignKey IS NULL
                  )
              AND (
                      ms.idfsMonitoringSessionStatus = @SessionStatusTypeID
                      OR @SessionStatusTypeID IS NULL
                  )
              AND (
                      msd.idfsDiagnosis = @DiseaseID
                      OR @DiseaseID IS NULL
                  )
              AND (
                      g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                      OR @AdministrativeLevelID IS NULL
                  )
              AND (
                      (CAST(ms.datEnteredDate AS DATE)
              BETWEEN @DateEnteredFrom AND @DateEnteredTo
                      )
                      OR (
                             @DateEnteredFrom IS NULL
                             OR @DateEnteredTo IS NULL
                         )
                  )
              AND (
                      ms.strMonitoringSessionID LIKE '%' + TRIM(@SessionID) + '%'
                      OR @SessionID IS NULL
                  )
              AND (
                      c.strCampaignID LIKE '%' + TRIM(@CampaignID) + '%'
                      OR @CampaignID IS NULL
                  )
              AND (
                      LegacySessionID LIKE '%' + TRIM(@LegacySessionID) + '%'
                      OR @LegacySessionID IS NULL
                  )
              AND (
                      ms.SessionCategoryID = @SessionCategoryTypeID
                      OR @SessionCategoryTypeID IS NULL
                  )
        GROUP BY ID;

        WITH paging
        AS (SELECT ROW_NUMBER() OVER (ORDER BY CASE
                                                   WHEN @SortColumn = 'SessionID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       ms.strMonitoringSessionID
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'SessionID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       ms.strMonitoringSessionID
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'SessionStatusTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       sessionStatus.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'SessionStatusTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       sessionStatus.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'EnteredDate'
                                                        AND @SortOrder = 'ASC' THEN
                                                       ms.datEnteredDate
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EnteredDate'
                                                        AND @SortOrder = 'DESC' THEN
                                                       ms.datEnteredDate
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel1Name'
                                                        AND @SortOrder = 'ASC' THEN
                                                       lh.AdminLevel2Name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel1Name'
                                                        AND @SortOrder = 'DESC' THEN
                                                       lh.AdminLevel2Name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel2Name'
                                                        AND @SortOrder = 'ASC' THEN
                                                       lh.AdminLevel3Name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel2Name'
                                                        AND @SortOrder = 'DESC' THEN
                                                       lh.AdminLevel3Name
                                               END DESC
                                     ) AS ROWNUM,
                   COUNT(*) OVER () AS RecordCount,
                   res.ID AS SessionKey,
                   ms.strMonitoringSessionID AS SessionID,
                   ms.idfCampaign AS CampaignKey,
                   c.strCampaignID AS CampaignID,
                   sessionStatus.idfsReference AS SessionStatusTypeID,
                   ms.SessionCategoryID AS ReportTypeID,
                   ISNULL(reportType.name, reportType.strDefault) AS ReportTypeName,
                   sessionStatus.name AS SessionStatusTypeName,
                   ms.datStartDate AS StartDate,
                   ms.datEndDate AS EndDate,
                   diseaseIDs.diseaseIDs AS DiseaseIdentifiers,
                   diseaseNames.diseaseNames AS DiseaseNames,
                   '' AS DiseaseName,
                   lh.AdminLevel1Name AS AdministrativeLevel0Name,
                   lh.AdminLevel2Name AS AdministrativeLevel1Name,
                   lh.AdminLevel3Name AS AdministrativeLevel2Name,
                   lh.AdminLevel4Name AS SettlementName,
                   ms.datEnteredDate AS EnteredDate,
                   ISNULL(p.strFirstName, '') + ' ' + ISNULL(p.strFamilyName, '') AS EnteredByPersonName,
                   ms.idfsSite AS SiteKey,
                   s.strSiteName AS SiteName,
                   CASE
                       WHEN res.ReadPermissionIndicator = 5 THEN
                           CONVERT(BIT, 1)
                       WHEN res.ReadPermissionIndicator = 4 THEN
                           CONVERT(BIT, 0)
                       WHEN res.ReadPermissionIndicator = 3 THEN
                           CONVERT(BIT, 1)
                       WHEN res.ReadPermissionIndicator = 2 THEN
                           CONVERT(BIT, 0)
                       ELSE
                           CONVERT(BIT, res.ReadPermissionIndicator)
                   END AS ReadPermissionindicator,
                   CASE
                       WHEN res.AccessToPersonalDataPermissionIndicator = 5 THEN
                           CONVERT(BIT, 1)
                       WHEN res.AccessToPersonalDataPermissionIndicator = 4 THEN
                           CONVERT(BIT, 0)
                       WHEN res.AccessToPersonalDataPermissionIndicator = 3 THEN
                           CONVERT(BIT, 1)
                       WHEN res.AccessToPersonalDataPermissionIndicator = 2 THEN
                           CONVERT(BIT, 0)
                       ELSE
                           CONVERT(BIT, res.AccessToPersonalDataPermissionIndicator)
                   END AS AccessToPersonalDataPermissionIndicator,
                   CASE
                       WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 5 THEN
                           CONVERT(BIT, 1)
                       WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 4 THEN
                           CONVERT(BIT, 0)
                       WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 3 THEN
                           CONVERT(BIT, 1)
                       WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 2 THEN
                           CONVERT(BIT, 0)
                       ELSE
                           CONVERT(BIT, res.AccessToGenderAndAgeDataPermissionIndicator)
                   END AS AccessToGenderAndAgeDataPermissionIndicator,
                   CASE
                       WHEN res.WritePermissionIndicator = 5 THEN
                           CONVERT(BIT, 1)
                       WHEN res.WritePermissionIndicator = 4 THEN
                           CONVERT(BIT, 0)
                       WHEN res.WritePermissionIndicator = 3 THEN
                           CONVERT(BIT, 1)
                       WHEN res.WritePermissionIndicator = 2 THEN
                           CONVERT(BIT, 0)
                       ELSE
                           CONVERT(BIT, res.WritePermissionIndicator)
                   END AS WritePermissionIndicator,
                   CASE
                       WHEN res.DeletePermissionIndicator = 5 THEN
                           CONVERT(BIT, 1)
                       WHEN res.DeletePermissionIndicator = 4 THEN
                           CONVERT(BIT, 0)
                       WHEN res.DeletePermissionIndicator = 3 THEN
                           CONVERT(BIT, 1)
                       WHEN res.DeletePermissionIndicator = 2 THEN
                           CONVERT(BIT, 0)
                       ELSE
                           CONVERT(BIT, res.DeletePermissionIndicator)
                   END AS DeletePermissionIndicator,
                   (
                       SELECT COUNT(*)
                       FROM dbo.tlbMonitoringSession
                       WHERE intRowStatus = 0
                             AND SessionCategoryID = 10502002 -- Veterinary Avian Active Surveillance Session
                             OR SessionCategoryID = 10502009 -- Veterinary Livestock Active Surveillance Session
                   ) AS TotalCount
            FROM @FinalResults res
                INNER JOIN dbo.tlbMonitoringSession ms
                    ON ms.idfMonitoringSession = res.ID
                LEFT JOIN dbo.MonitoringSessionToSampleType mss
                    ON ms.idfMonitoringSession = mss.idfMonitoringSession
                CROSS APPLY
            (
                SELECT dbo.FN_GBL_SESSION_DISEASEIDS_GET(ms.idfMonitoringSession) diseaseIDs
            ) diseaseIDs
                CROSS APPLY
            (
                SELECT dbo.FN_GBL_SESSION_DISEASE_NAMES_GET(ms.idfMonitoringSession, @LanguageID) diseaseNames
            ) diseaseNames
                LEFT JOIN dbo.tstSite s
                    ON s.idfsSite = ms.idfsSite
                LEFT JOIN dbo.tlbCampaign c
                    ON c.idfCampaign = ms.idfCampaign
                       AND c.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000117) sessionStatus
                    ON sessionStatus.idfsReference = ms.idfsMonitoringSessionStatus
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000502) reportType
                    ON reportType.idfsReference = ms.SessionCategoryID
                LEFT JOIN dbo.gisLocation g
                    ON g.idfsLocation = ms.idfsLocation
                INNER JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                    ON lh.idfsLocation = g.idfsLocation
                LEFT JOIN dbo.tlbPerson p
                    ON p.idfPerson = ms.idfPersonEnteredBy
            WHERE ms.intRowStatus = 0
           )
        SELECT SessionKey,
               SessionID,
               CampaignKey,
               CampaignID,
               SessionStatusTypeID,
               ReportTypeID,
               ReportTypeName,
               SessionStatusTypeName,
               StartDate,
               EndDate,
               DiseaseIdentifiers,
               DiseaseNames,
               DiseaseName,
               AdministrativeLevel0Name,
               AdministrativeLevel1Name,
               AdministrativeLevel2Name,
               SettlementName,
               EnteredDate,
               EnteredByPersonName,
               SiteKey,
               SiteName,
               ReadPermissionIndicator,
               AccessToPersonalDataPermissionIndicator,
               AccessToGenderAndAgeDataPermissionIndicator,
               WritePermissionIndicator,
               DeletePermissionIndicator,
               RecordCount,
               TotalCount,
               CurrentPage = @PageNumber,
               TotalPages = (RecordCount / @PageSize) + IIF(RecordCount % @PageSize > 0, 1, 0)
        FROM paging
        WHERE RowNum > @firstRec
              AND RowNum < @lastRec;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USP_VCTS_SURVEILLANCE_SESSION_GetList]...';


GO
-- ================================================================================================
-- Name: USP_VCTS_SURVEILLANCE_SESSION_GetList
--
-- Description: Gets a list of vector surveillance sessions filtered by various criteria.
--          
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     12/31/2018 Added additional search parameters
-- Maheshwar Deo	03/08/2019 Fixed filter for @DiseaseID
-- Stephen Long     07/19/2019 Added summary disease ID and join.
-- Stephen Long     01/22/2020 Converted site ID to site list for site filtration.
-- Stephen Long     02/19/2020 Added non-configurable site filtration rules.
-- Stephen Long     02/26/2020 Corrected all criteria where clauses; returned incorrect results.
-- Stephen Long     03/25/2020 Added if/else for first-level and second-level site types to bypass 
--                             non-configurable rules.
-- Stephen Long     05/18/2020 Added disease filtration rules from use case SAUC62.
-- Stephen Long     06/18/2020 Added where criteria to the query when no site filtration is 
--                             required.
-- Stephen Long     07/07/2020 Added trim to EIDSS identifier like criteria.
-- Doug Albanese	10/16/2020 Added Outbreak's EIDSS ID
-- Doug Albanese	10/16/2020 Added Outbreak's Session Start Date
-- Doug Albanese	11/11/2020 Modified secondary filtering
-- Doug Albanese	11/20/2020 Added dblAlignment (Direction)
-- Stephen Long     11/27/2020 Added configurable site filtration rules.
-- Stephen Long     12/13/2020 Added apply configurable filtration indicator parameter.
-- Stephen Long     12/24/2020 Modified join on disease filtration default role rule.
-- Stephen Long     12/29/2020 Added intRowStatus check on disease filtration insert rules.
-- Doug Albanese	01/21/2021 Change the WHERE claus to detect shared vector types so that it is 
--                             no so strict on records being returned.
-- Stephen Long     04/02/2021 Added updated pagination and location hierarchy.
-- Mike Kornegay	11/05/2021 Added group by surveillance session id to filtration 
--							   intermediate results so final cte join is correct.
-- Stephen Long     11/05/2021 Added vector type ID's and disease ID's to the query.
-- Stephen Long     06/03/2022 Updated to point default access rules to base reference.
-- Mike Kornegay	07/04/2022 Fixed sorting by pointing to correct location tables in final query.
-- Mike Kornegay	07/05/2022 Fixed search by disease and vector type.
-- Mike Kornegay	08/03/2022 Add order by in final select and change location tables back to 
--                             inner join.
-- Stephen Long     09/22/2022 Add check for "0" page size.  If "0", then set to 1.
-- Mike Kornegay	10/06/2022 Move order by back to CTE row number partition for performance and 
--                             correct date clauses.
-- Stephen Long     01/09/2023 Updated for site filtration queries.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_VCTS_SURVEILLANCE_SESSION_GetList]
(
    @LanguageID NVARCHAR(50),
    @SessionID NVARCHAR(200) = NULL,
    @FieldSessionID NVARCHAR(200) = NULL,
    @StatusTypeID BIGINT = NULL,
    @VectorTypeID NVARCHAR(MAX) = NULL,
    @SpeciesTypeID BIGINT = NULL,
    @DiseaseID BIGINT = NULL,
    @DiseaseGroupID NVARCHAR(MAX) = NULL,
    @AdministrativeLevelID BIGINT = NULL,
    @StartDateFrom DATETIME = NULL,
    @StartDateTo DATETIME = NULL,
    @EndDateFrom DATETIME = NULL,
    @EndDateTo DATETIME = NULL,
    @OutbreakKey BIGINT = NULL,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT,
    @UserEmployeeID BIGINT,
    @ApplySiteFiltrationIndicator BIT = 0,
    @SortColumn NVARCHAR(30) = 'SessionID',
    @SortOrder NVARCHAR(4) = 'DESC',
    @PageNumber INT = 1,
    @PageSize INT = 10
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @firstRec INT;
    DECLARE @lastRec INT;
    SET @firstRec = (@PageNumber - 1) * @PageSize
    SET @lastRec = (@PageNumber * @PageSize + 1);

    DECLARE @AdministrativeLevelNode AS HIERARCHYID;

    DECLARE @FinalResults TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );

    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL, INDEX IDX_ID (ID
                                                             ));
    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );

    BEGIN TRY
        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        IF @PageSize = 0
        BEGIN
            SET @PageSize = 1;
        END

        IF @AdministrativeLevelID IS NOT NULL
        BEGIN
            SELECT @AdministrativeLevelNode = node
            FROM dbo.gisLocation
            WHERE idfsLocation = @AdministrativeLevelID;
        END;

        -- ========================================================================================
        -- NO CONFIGURABLE FILTRATION RULES APPLIED
        --
        -- For first and second level sites, do not apply any configurable filtration rules.
        -- ========================================================================================
        IF @ApplySiteFiltrationIndicator = 0
        BEGIN
            INSERT INTO @Results
            SELECT vss.idfVectorSurveillanceSession,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbVectorSurveillanceSession vss
                LEFT JOIN tlbGeoLocation gl
                    ON gl.idfGeoLocation = vss.idfLocation
                       AND gl.intRowStatus = 0
                LEFT JOIN dbo.gisLocation g
                    ON g.idfsLocation = gl.idfsLocation
                CROSS APPLY
            (
                SELECT dbo.FN_VCTS_VSSESSION_VECTORTYPEIDS_GET(vss.idfVectorSurveillanceSession) vectorTypeIDs
            ) vectorTypeIDs
                LEFT JOIN dbo.tlbVector v
                    ON v.idfVectorSurveillanceSession = vss.idfVectorSurveillanceSession
                       AND v.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000141) vectorSubType
                    ON vectorSubType.idfsReference = v.idfsVectorSubType
                CROSS APPLY
            (
                SELECT dbo.FN_VCTS_VSSESSION_DIAGNOSESIDS_GET(vss.idfVectorSurveillanceSession, @LanguageID) diseaseIDs
            ) diseaseIDs
            WHERE vss.intRowStatus = 0
                  AND (
                          vss.idfsVectorSurveillanceStatus = @StatusTypeID
                          OR @StatusTypeID IS NULL
                      )
                  AND (
                          CHARINDEX(@VectorTypeID, vectorTypeIDs) > 0
                          OR @VectorTypeID IS NULL
                      )
                  AND (
                          vectorSubType.idfsReference = @SpeciesTypeID
                          OR @SpeciesTypeID IS NULL
                      )
                  AND (
                          g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                          OR @AdministrativeLevelID IS NULL
                      )
                  AND (
                          vss.idfOUtBreak = @OutbreakKey
                          OR @OutbreakKey IS NULL
                      )
                  AND (
                          (
                              (
                                  CAST(vss.datStartDate AS DATE) >= @StartDateFrom
                                  AND @StartDateTo IS NULL
                              )
                              OR (
                                     CAST(vss.datStartDate AS DATE) <= @StartDateTo
                                     AND @StartDateFrom IS NULL
                                 )
                              OR (CAST(vss.datStartDate AS DATE)
                  BETWEEN @StartDateFrom AND @StartDateTo
                                 )
                          )
                          OR (
                                 @StartDateFrom IS NULL
                                 AND @StartDateTo IS NULL
                             )
                      )
                  AND (
                          (
                              (
                                  CAST(vss.datCloseDate AS DATE) >= @EndDateFrom
                                  AND @EndDateTo IS NULL
                              )
                              OR (
                                     CAST(vss.datCloseDate AS DATE) <= @EndDateTo
                                     AND @EndDateFrom IS NULL
                                 )
                              OR (CAST(vss.datCloseDate AS DATE)
                  BETWEEN @EndDateFrom AND @EndDateTo
                                 )
                          )
                          OR (
                                 @EndDateFrom IS NULL
                                 AND @EndDateTo IS NULL
                             )
                      )
                  AND (
                          vss.strSessionID LIKE '%' + TRIM(@SessionID) + '%'
                          OR @SessionID IS NULL
                      )
                  AND (
                          vss.strFieldSessionID LIKE '%' + TRIM(@FieldSessionID) + '%'
                          OR @FieldSessionID IS NULL
                      )
                  AND (
                          CHARINDEX(CAST(@DiseaseID AS NVARCHAR(2000)), diseaseIDs) > 0
                          OR @DiseaseID IS NULL
                      )
            GROUP BY vss.idfVectorSurveillanceSession;
        END
        ELSE
        BEGIN
            DECLARE @FilteredResults TABLE
            (
                ID BIGINT NOT NULL,
                ReadPermissionIndicator BIT NOT NULL,
                AccessToPersonalDataPermissionIndicator BIT NOT NULL,
                AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
                WritePermissionIndicator BIT NOT NULL,
                DeletePermissionIndicator BIT NOT NULL, INDEX IDX_ID (ID
                                                                     ));
            -- =======================================================================================
            -- DEFAULT CONFIGURABLE FILTRATION RULES
            --
            -- Apply non-configurable filtration rules for third level sites.
            -- =======================================================================================
            DECLARE @RuleActiveStatus INT = 0;
            DECLARE @AdministrativeLevelTypeID INT;
            DECLARE @OrganizationAdministrativeLevelNode HIERARCHYID;
            DECLARE @DefaultAccessRules AS TABLE
            (
                AccessRuleID BIGINT NOT NULL,
                ActiveIndicator INT NOT NULL,
                ReadPermissionIndicator BIT NOT NULL,
                AccessToPersonalDataPermissionIndicator BIT NOT NULL,
                AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
                WritePermissionIndicator BIT NOT NULL,
                DeletePermissionIndicator BIT NOT NULL,
                AdministrativeLevelTypeID INT NULL
            );

            INSERT INTO @DefaultAccessRules
            SELECT AccessRuleID,
                   a.intRowStatus,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator,
                   a.AdministrativeLevelTypeID
            FROM dbo.AccessRule a
            WHERE DefaultRuleIndicator = 1;

            --
            -- Session data shall be available to all sites' organizations connected to the particular 
            -- session.
            --
            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
            WHERE AccessRuleID = 10537019;

            IF @RuleActiveStatus = 0
            BEGIN
                -- Collected and identified by organizations for any vectors/pools
                INSERT INTO @FilteredResults
                SELECT vss.idfVectorSurveillanceSession,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbVectorSurveillanceSession vss
                    INNER JOIN dbo.tlbVector v
                        ON v.idfVectorSurveillanceSession = vss.idfVectorSurveillanceSession
                           AND v.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537019
                WHERE vss.intRowStatus = 0
                      AND (
                              v.idfCollectedByOffice = @UserOrganizationID
                              OR v.idfIdentifiedByOffice = @UserOrganizationID
                          );

                -- Collected by and sent to organizations for any samples
                INSERT INTO @FilteredResults
                SELECT MAX(m.idfVectorSurveillanceSession),
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbMaterial m
                    INNER JOIN dbo.tlbVectorSurveillanceSession vss
                        ON vss.idfVectorSurveillanceSession = m.idfVectorSurveillanceSession
                           AND vss.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537019
                WHERE m.intRowStatus = 0
                      AND (
                              m.idfFieldCollectedByOffice = @UserOrganizationID
                              OR m.idfSendToOffice = @UserOrganizationID
                          )
                GROUP BY m.idfVectorSurveillanceSession,
                         a.ReadPermissionIndicator,
                         a.AccessToPersonalDataPermissionIndicator,
                         a.AccessToGenderAndAgeDataPermissionIndicator,
                         a.WritePermissionIndicator,
                         a.DeletePermissionIndicator;

                -- Tested by organization for any laboratory test
                INSERT INTO @FilteredResults
                SELECT MAX(m.idfVectorSurveillanceSession),
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbMaterial m
                    INNER JOIN dbo.tlbVectorSurveillanceSession vss
                        ON vss.idfVectorSurveillanceSession = m.idfVectorSurveillanceSession
                           AND vss.intRowStatus = 0
                    INNER JOIN dbo.tlbTesting t
                        ON t.idfMaterial = m.idfMaterial
                           AND t.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537019
                WHERE m.intRowStatus = 0
                      AND t.idfTestedByOffice = @UserOrganizationID
                GROUP BY m.idfVectorSurveillanceSession,
                         a.ReadPermissionIndicator,
                         a.AccessToPersonalDataPermissionIndicator,
                         a.AccessToGenderAndAgeDataPermissionIndicator,
                         a.WritePermissionIndicator,
                         a.DeletePermissionIndicator;

                -- Tested by organization for any field test
                INSERT INTO @FilteredResults
                SELECT MAX(m.idfVectorSurveillanceSession),
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbMaterial m
                    INNER JOIN dbo.tlbVectorSurveillanceSession vss
                        ON vss.idfVectorSurveillanceSession = m.idfVectorSurveillanceSession
                           AND vss.intRowStatus = 0
                    INNER JOIN dbo.tlbPensideTest p
                        ON p.idfMaterial = m.idfMaterial
                           AND p.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537019
                WHERE m.intRowStatus = 0
                      AND p.idfTestedByOffice = @UserOrganizationID
                GROUP BY m.idfVectorSurveillanceSession,
                         a.ReadPermissionIndicator,
                         a.AccessToPersonalDataPermissionIndicator,
                         a.AccessToGenderAndAgeDataPermissionIndicator,
                         a.WritePermissionIndicator,
                         a.DeletePermissionIndicator;
            END;

            --
            -- Sent to organizations for any sample transfers
            --
            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
            WHERE AccessRuleID = 10537021;

            IF @RuleActiveStatus = 0
            BEGIN
                INSERT INTO @FilteredResults
                SELECT MAX(vss.idfVectorSurveillanceSession),
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbVectorSurveillanceSession vss
                    INNER JOIN dbo.tlbMaterial m
                        ON vss.idfVectorSurveillanceSession = m.idfVectorSurveillanceSession
                           AND m.intRowStatus = 0
                    INNER JOIN dbo.tlbTransferOutMaterial toutm
                        ON m.idfMaterial = toutm.idfMaterial
                           AND toutm.intRowStatus = 0
                    INNER JOIN dbo.tlbTransferOUT tout
                        ON toutm.idfTransferOut = tout.idfTransferOut
                           AND tout.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537021
                WHERE vss.intRowStatus = 0
                      AND tout.idfSendToOffice = @UserOrganizationID
                GROUP BY vss.idfVectorSurveillanceSession,
                         a.ReadPermissionIndicator,
                         a.AccessToPersonalDataPermissionIndicator,
                         a.AccessToGenderAndAgeDataPermissionIndicator,
                         a.WritePermissionIndicator,
                         a.DeletePermissionIndicator;
            END;

            --
            -- Session data shall be available to all sites of the same administrative level.
            --
            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
            WHERE AccessRuleID = 10537018;

            IF @RuleActiveStatus = 0
            BEGIN
                SELECT @AdministrativeLevelTypeID = AdministrativeLevelTypeID
                FROM @DefaultAccessRules
                WHERE AccessRuleID = 10537018;

                SELECT @OrganizationAdministrativeLevelNode
                    = g.node.GetAncestor(g.node.GetLevel() - @AdministrativeLevelTypeID)
                FROM dbo.tlbOffice o
                    INNER JOIN dbo.tlbGeoLocationShared l
                        ON l.idfGeoLocationShared = o.idfLocation
                    INNER JOIN dbo.gisLocation g
                        ON g.idfsLocation = l.idfsLocation
                WHERE o.idfOffice = @UserOrganizationID
                      AND g.node.GetLevel() >= @AdministrativeLevelTypeID;

                -- Administrative level specified in the rule of the site where the session was created.
                INSERT INTO @FilteredResults
                SELECT vss.idfVectorSurveillanceSession,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbVectorSurveillanceSession vss
                    INNER JOIN dbo.tstSite s
                        ON vss.idfsSite = s.idfsSite
                    INNER JOIN dbo.tlbOffice o
                        ON o.idfOffice = s.idfOffice
                    INNER JOIN dbo.tlbGeoLocationShared l
                        ON l.idfGeoLocationShared = o.idfLocation
                    INNER JOIN dbo.gisLocation g
                        ON g.idfsLocation = l.idfsLocation
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537018
                WHERE vss.intRowStatus = 0
                      AND g.node.IsDescendantOf(@OrganizationAdministrativeLevelNode) = 1;

                -- Administrative level specified in the rule of the session location, if completed
                INSERT INTO @FilteredResults
                SELECT vss.idfVectorSurveillanceSession,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbVectorSurveillanceSession vss
                    INNER JOIN dbo.tlbGeoLocation l
                        ON l.idfGeoLocation = vss.idfLocation
                    INNER JOIN dbo.gisLocation g
                        ON g.idfsLocation = l.idfsLocation
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537018
                WHERE vss.intRowStatus = 0
                      AND g.node.IsDescendantOf(@OrganizationAdministrativeLevelNode) = 1;

                -- Administrative level specified in the rule of any vector location, if completed.
                INSERT INTO @FilteredResults
                SELECT vss.idfVectorSurveillanceSession,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbVectorSurveillanceSession vss
                    INNER JOIN dbo.tlbVector v
                        ON v.idfVectorSurveillanceSession = vss.idfVectorSurveillanceSession
                           AND v.intRowStatus = 0
                    INNER JOIN dbo.tlbGeoLocation l
                        ON l.idfGeoLocation = v.idfLocation
                    INNER JOIN dbo.gisLocation g
                        ON g.idfsLocation = l.idfsLocation
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537018
                WHERE vss.intRowStatus = 0
                      AND g.node.IsDescendantOf(@OrganizationAdministrativeLevelNode) = 1;

                -- Administration level specified in the rule of the location of any session summary record, if completed.
                INSERT INTO @FilteredResults
                SELECT vss.idfVectorSurveillanceSession,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbVectorSurveillanceSession vss
                    INNER JOIN dbo.tlbVectorSurveillanceSessionSummary vsss
                        ON vsss.idfVectorSurveillanceSession = vss.idfVectorSurveillanceSession
                           AND vsss.intRowStatus = 0
                    INNER JOIN dbo.tlbGeoLocation AS l
                        ON l.idfGeoLocation = vsss.idfGeoLocation
                    INNER JOIN dbo.gisLocation AS g
                        ON g.idfsLocation = l.idfsLocation
                    INNER JOIN @DefaultAccessRules AS a
                        ON a.AccessRuleID = 10537018
                WHERE vss.intRowStatus = 0
                      AND g.node.IsDescendantOf(@OrganizationAdministrativeLevelNode) = 1;
            END;

            -- =======================================================================================
            -- CONFIGURABLE FILTRATION RULES
            -- 
            -- Apply configurable filtration rules for use case SAUC34. Some of these rules may 
            -- overlap the non-configurable rules.
            -- =======================================================================================
            --
            -- Apply at the user's site group level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT vss.idfVectorSurveillanceSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbVectorSurveillanceSession vss
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = vss.idfsSite
                INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                    ON userSiteGroup.idfsSite = @UserSiteID
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE vss.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT vss.idfVectorSurveillanceSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbVectorSurveillanceSession vss
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = vss.idfsSite
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE vss.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's employee group level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT vss.idfVectorSurveillanceSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbVectorSurveillanceSession vss
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = vss.idfsSite
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE vss.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's ID level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT vss.idfVectorSurveillanceSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbVectorSurveillanceSession vss
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = vss.idfsSite
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE vss.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site group level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT vss.idfVectorSurveillanceSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbVectorSurveillanceSession vss
                INNER JOIN dbo.tflSiteToSiteGroup sgs
                    ON sgs.idfsSite = @UserSiteID
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE vss.intRowStatus = 0
                  AND sgs.idfsSite = vss.idfsSite;

            -- 
            -- Apply at the user's site level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT vss.idfVectorSurveillanceSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbVectorSurveillanceSession vss
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE vss.intRowStatus = 0
                  AND a.GrantingActorSiteID = vss.idfsSite;

            -- 
            -- Apply at the user's employee group level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT vss.idfVectorSurveillanceSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbVectorSurveillanceSession vss
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE vss.intRowStatus = 0
                  AND a.GrantingActorSiteID = vss.idfsSite;

            -- 
            -- Apply at the user's ID level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT vss.idfVectorSurveillanceSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbVectorSurveillanceSession vss
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE vss.intRowStatus = 0
                  AND a.GrantingActorSiteID = vss.idfsSite;

            -- Copy filtered results to results and use search criteria
            INSERT INTO @Results
            SELECT ID,
                   ReadPermissionIndicator,
                   AccessToPersonalDataPermissionIndicator,
                   AccessToGenderAndAgeDataPermissionIndicator,
                   WritePermissionIndicator,
                   DeletePermissionIndicator
            FROM @FilteredResults
                INNER JOIN dbo.tlbVectorSurveillanceSession vss
                    ON vss.idfVectorSurveillanceSession = ID
                LEFT JOIN tlbGeoLocation gl
                    ON gl.idfGeoLocation = vss.idfLocation
                       AND gl.intRowStatus = 0
                LEFT JOIN dbo.gisLocation g
                    ON g.idfsLocation = gl.idfsLocation
                CROSS APPLY
            (
                SELECT dbo.FN_VCTS_VSSESSION_VECTORTYPEIDS_GET(vss.idfVectorSurveillanceSession) vectorTypeIds
            ) vectorTypeIds
                LEFT JOIN dbo.tlbVector v
                    ON v.idfVectorSurveillanceSession = vss.idfVectorSurveillanceSession
                       AND v.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000141) vectorSubType
                    ON vectorSubType.idfsReference = v.idfsVectorSubType
                CROSS APPLY
            (
                SELECT dbo.FN_VCTS_VSSESSION_DIAGNOSESIDS_GET(vss.idfVectorSurveillanceSession, @LanguageID) diseaseIDs
            ) diseaseIDs
            WHERE (
                      vss.idfsVectorSurveillanceStatus = @StatusTypeID
                      OR @StatusTypeID IS NULL
                  )
                  AND (
                          CHARINDEX(@VectorTypeID, vectorTypeIds) > 0
                          OR @VectorTypeID IS NULL
                      )
                  AND (
                          vectorSubType.idfsReference = @SpeciesTypeID
                          OR @SpeciesTypeID IS NULL
                      )
                  AND (
                          g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                          OR @AdministrativeLevelID IS NULL
                      )
                  AND (
                          vss.idfOUtBreak = @OutbreakKey
                          OR @OutbreakKey IS NULL
                      )
                  AND (
                          (
                              (
                                  CAST(vss.datStartDate AS DATE) >= @StartDateFrom
                                  AND @StartDateTo IS NULL
                              )
                              OR (
                                     CAST(vss.datStartDate AS DATE) <= @StartDateTo
                                     AND @StartDateFrom IS NULL
                                 )
                              OR (CAST(vss.datStartDate AS DATE)
                  BETWEEN @StartDateFrom AND @StartDateTo
                                 )
                          )
                          OR (
                                 @StartDateFrom IS NULL
                                 AND @StartDateTo IS NULL
                             )
                      )
                  AND (
                          (
                              (
                                  CAST(vss.datCloseDate AS DATE) >= @EndDateFrom
                                  AND @EndDateTo IS NULL
                              )
                              OR (
                                     CAST(vss.datCloseDate AS DATE) <= @EndDateTo
                                     AND @EndDateFrom IS NULL
                                 )
                              OR (CAST(vss.datCloseDate AS DATE)
                  BETWEEN @EndDateFrom AND @EndDateTo
                                 )
                          )
                          OR (
                                 @EndDateFrom IS NULL
                                 AND @EndDateTo IS NULL
                             )
                      )
                  AND (
                          vss.strSessionID LIKE '%' + TRIM(@SessionID) + '%'
                          OR @SessionID IS NULL
                      )
                  AND (
                          vss.strFieldSessionID LIKE '%' + TRIM(@FieldSessionID) + '%'
                          OR @FieldSessionID IS NULL
                      )
                  AND (
                          CHARINDEX(CAST(@DiseaseID AS NVARCHAR(2000)), diseaseIDs) > 0
                          OR @DiseaseID IS NULL
                      )
            GROUP BY ID,
                     ReadPermissionIndicator,
                     AccessToPersonalDataPermissionIndicator,
                     AccessToGenderAndAgeDataPermissionIndicator,
                     WritePermissionIndicator,
                     DeletePermissionIndicator;
        END;

        -- =======================================================================================
        -- DISEASE FILTRATION RULES
        --
        -- Apply disease filtration rules from use case SAUC62.
        -- =======================================================================================
        -- 
        -- Apply level 0 disease filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE ID IN (
                        SELECT vss.idfVectorSurveillanceSession
                        FROM dbo.tlbVectorSurveillanceSession vss
                            INNER JOIN dbo.tlbVectorSurveillanceSessionSummary vsss
                                ON vsss.idfVectorSurveillanceSession = vss.idfVectorSurveillanceSession
                                   AND vsss.intRowStatus = 0
                            INNER JOIN dbo.tlbVectorSurveillanceSessionSummaryDiagnosis vssd
                                ON vsss.idfsVSSessionSummary = vssd.idfsVSSessionSummary
                                   AND vssd.intRowStatus = 0
                            INNER JOIN dbo.tstObjectAccess oa
                                ON oa.idfsObjectID = vssd.idfsDiagnosis
                                   AND oa.intRowStatus = 0
                        WHERE vss.intRowStatus = 0
                              AND oa.intPermission = 1 -- Deny permission
                              AND oa.idfsObjectType = 10060001 -- Disease
                              AND oa.idfActor = -506 -- Default role
                    );

        --
        -- Apply level 1 disease filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        INSERT INTO @Results
        SELECT vss.idfVectorSurveillanceSession,
               1,
               1,
               1,
               1,
               1
        FROM dbo.tlbVectorSurveillanceSession vss
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.tlbVectorSurveillanceSessionSummary vsss
                ON vsss.idfVectorSurveillanceSession = vss.idfVectorSurveillanceSession
                   AND vsss.intRowStatus = 0
            INNER JOIN dbo.tlbVectorSurveillanceSessionSummaryDiagnosis vssd
                ON vsss.idfsVSSessionSummary = vssd.idfsVSSessionSummary
                   AND vssd.intRowStatus = 0
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = vssd.idfsDiagnosis
                   AND oa.intRowStatus = 0
        WHERE oa.intPermission = 2 -- Allow permission
              AND oa.idfsObjectType = 10060001 -- Disease
              AND vss.intRowStatus = 0
              AND oa.idfActor = egm.idfEmployeeGroup;

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbVectorSurveillanceSession vss
                ON vss.idfVectorSurveillanceSession = ID
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.tlbVectorSurveillanceSessionSummary vsss
                ON vsss.idfVectorSurveillanceSession = vss.idfVectorSurveillanceSession
                   AND vsss.intRowStatus = 0
            INNER JOIN dbo.tlbVectorSurveillanceSessionSummaryDiagnosis vssd
                ON vsss.idfsVSSessionSummary = vssd.idfsVSSessionSummary
                   AND vssd.intRowStatus = 0
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = vssd.idfsDiagnosis
                   AND oa.intRowStatus = 0
        WHERE oa.intPermission = 1 -- Deny permission
              AND oa.idfsObjectType = 10060001 -- Disease
              AND oa.idfActor = egm.idfEmployeeGroup;

        --
        -- Apply level 2 disease filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        INSERT INTO @Results
        SELECT vss.idfVectorSurveillanceSession,
               1,
               1,
               1,
               1,
               1
        FROM dbo.tlbVectorSurveillanceSession vss
            INNER JOIN dbo.tlbVectorSurveillanceSessionSummary vsss
                ON vsss.idfVectorSurveillanceSession = vss.idfVectorSurveillanceSession
                   AND vsss.intRowStatus = 0
            INNER JOIN dbo.tlbVectorSurveillanceSessionSummaryDiagnosis vssd
                ON vsss.idfsVSSessionSummary = vssd.idfsVSSessionSummary
                   AND vssd.intRowStatus = 0
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = vssd.idfsDiagnosis
                   AND oa.intRowStatus = 0
        WHERE oa.intPermission = 2 -- Allow permission
              AND oa.idfsObjectType = 10060001 -- Disease
              AND vss.intRowStatus = 0
              AND oa.idfActor = @UserEmployeeID;

        DELETE FROM @Results
        WHERE ID IN (
                        SELECT vss.idfVectorSurveillanceSession
                        FROM dbo.tlbVectorSurveillanceSession vss
                            INNER JOIN dbo.tlbVectorSurveillanceSessionSummary vsss
                                ON vsss.idfVectorSurveillanceSession = vss.idfVectorSurveillanceSession
                                   AND vsss.intRowStatus = 0
                            INNER JOIN dbo.tlbVectorSurveillanceSessionSummaryDiagnosis vssd
                                ON vsss.idfsVSSessionSummary = vssd.idfsVSSessionSummary
                                   AND vssd.intRowStatus = 0
                            INNER JOIN dbo.tstObjectAccess oa
                                ON oa.idfsObjectID = vssd.idfsDiagnosis
                                   AND oa.intRowStatus = 0
                        WHERE vss.intRowStatus = 0
                              AND oa.intPermission = 1 -- Deny permission
                              AND oa.idfsObjectType = 10060001 -- Disease
                              AND oa.idfActor = @UserEmployeeID
                    );

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT vss.idfVectorSurveillanceSession
            FROM dbo.tlbVectorSurveillanceSession vss
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = vss.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE vss.intRowStatus = 0
                  AND oa.idfsObjectOperation = 10059003 -- Read permission
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        INSERT INTO @Results
        SELECT vss.idfVectorSurveillanceSession,
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = vss.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = vss.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = vss.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = vss.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = vss.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbVectorSurveillanceSession vss
        WHERE vss.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserGroupSitePermissions WHERE SiteID = vss.idfsSite
        );

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbVectorSurveillanceSession vss
                ON vss.idfVectorSurveillanceSession = ID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = vss.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003; -- Read permission

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        INSERT INTO @Results
        SELECT vss.idfVectorSurveillanceSession,
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = vss.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = vss.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = vss.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = vss.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = vss.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbVectorSurveillanceSession vss
        WHERE vss.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserSitePermissions WHERE SiteID = vss.idfsSite
        );

        DELETE FROM @Results
        WHERE ID IN (
                        SELECT vss.idfVectorSurveillanceSession
                        FROM dbo.tlbVectorSurveillanceSession vss
                            INNER JOIN @UserSitePermissions usp
                                ON usp.SiteID = vss.idfsSite
                        WHERE usp.Permission = 4 -- Deny permission
                              AND usp.PermissionTypeID = 10059003 -- Read permission
                    );

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        INSERT INTO @FinalResults
        SELECT ID,
               MAX(res.ReadPermissionIndicator),
               MAX(res.AccessToPersonalDataPermissionIndicator),
               MAX(res.AccessToGenderAndAgeDataPermissionIndicator),
               MAX(res.WritePermissionIndicator),
               MAX(res.DeletePermissionIndicator)
        FROM @Results res
            INNER JOIN dbo.tlbVectorSurveillanceSession vss
                ON vss.idfVectorSurveillanceSession = res.ID
            INNER JOIN dbo.tlbVectorSurveillanceSessionSummary vsss
                ON vsss.idfVectorSurveillanceSession = vss.idfVectorSurveillanceSession
                   AND vsss.intRowStatus = 0
            INNER JOIN dbo.tlbVectorSurveillanceSessionSummaryDiagnosis vssd
                ON vsss.idfsVSSessionSummary = vssd.idfsVSSessionSummary
                   AND vssd.intRowStatus = 0
            LEFT JOIN tlbGeoLocation gl
                ON gl.idfGeoLocation = vss.idfLocation
            LEFT JOIN dbo.gisLocation g
                ON g.idfsLocation = gl.idfsLocation
            CROSS APPLY
        (
            SELECT dbo.FN_VCTS_VSSESSION_VECTORTYPEIDS_GET(vss.idfVectorSurveillanceSession) vectorTypeIDs
        ) vectorTypeIDs
            LEFT JOIN dbo.tlbVector v
                ON v.idfVectorSurveillanceSession = vss.idfVectorSurveillanceSession
                   AND v.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000141) vectorSubType
                ON vectorSubType.idfsReference = v.idfsVectorSubType
            CROSS APPLY
        (
            SELECT dbo.FN_VCTS_VSSESSION_DIAGNOSESIDS_GET(vss.idfVectorSurveillanceSession, @LanguageID) diseaseIDs
        ) diseaseIDs
        WHERE res.ReadPermissionIndicator IN ( 1, 3, 5 )
              AND (
                      vss.idfsVectorSurveillanceStatus = @StatusTypeID
                      OR @StatusTypeID IS NULL
                  )
              AND (
                      CHARINDEX(@VectorTypeID, vectorTypeIDs) > 0
                      OR @VectorTypeID IS NULL
                  )
              AND (
                      vectorSubType.idfsReference = @SpeciesTypeID
                      OR @SpeciesTypeID IS NULL
                  )
              AND (
                      g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                      OR @AdministrativeLevelID IS NULL
                  )
              AND (
                      vss.idfOUtBreak = @OutbreakKey
                      OR @OutbreakKey IS NULL
                  )
              AND (
                      (
                          (
                              CAST(vss.datStartDate AS DATE) >= @StartDateFrom
                              AND @StartDateTo IS NULL
                          )
                          OR (
                                 CAST(vss.datStartDate AS DATE) <= @StartDateTo
                                 AND @StartDateFrom IS NULL
                             )
                          OR (CAST(vss.datStartDate AS DATE)
              BETWEEN @StartDateFrom AND @StartDateTo
                             )
                      )
                      OR (
                             @StartDateFrom IS NULL
                             AND @StartDateTo IS NULL
                         )
                  )
              AND (
                      (
                          (
                              CAST(vss.datCloseDate AS DATE) >= @EndDateFrom
                              AND @EndDateTo IS NULL
                          )
                          OR (
                                 CAST(vss.datCloseDate AS DATE) <= @EndDateTo
                                 AND @EndDateFrom IS NULL
                             )
                          OR (CAST(vss.datCloseDate AS DATE)
              BETWEEN @EndDateFrom AND @EndDateTo
                             )
                      )
                      OR (
                             @EndDateFrom IS NULL
                             AND @EndDateTo IS NULL
                         )
                  )
              AND (
                      vss.strSessionID LIKE '%' + TRIM(@SessionID) + '%'
                      OR @SessionID IS NULL
                  )
              AND (
                      vss.strFieldSessionID LIKE '%' + TRIM(@FieldSessionID) + '%'
                      OR @FieldSessionID IS NULL
                  )
              AND (
                      CHARINDEX(CAST(@DiseaseID AS NVARCHAR(2000)), diseaseIDs) > 0
                      OR @DiseaseID IS NULL
                  )
        GROUP BY ID;

        WITH paging
        AS (SELECT ROW_NUMBER() OVER (ORDER BY CASE
                                                   WHEN @SortColumn = 'SessionID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       vss.strSessionID
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'SessionID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       vss.strSessionID
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'SessionStatusTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       sessionStatusType.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'SessionStatusTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       sessionStatusType.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'StartDate'
                                                        AND @SortOrder = 'ASC' THEN
                                                       vss.datStartDate
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'StartDate'
                                                        AND @SortOrder = 'DESC' THEN
                                                       vss.datStartDate
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'CloseDate'
                                                        AND @SortOrder = 'ASC' THEN
                                                       vss.datCloseDate
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'CloseDate'
                                                        AND @SortOrder = 'DESC' THEN
                                                       vss.datCloseDate
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel1Name'
                                                        AND @SortOrder = 'ASC' THEN
                                                       lh.AdminLevel2Name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel1Name'
                                                        AND @SortOrder = 'DESC' THEN
                                                       lh.AdminLevel2Name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel2Name'
                                                        AND @SortOrder = 'ASC' THEN
                                                       lh.AdminLevel3Name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel2Name'
                                                        AND @SortOrder = 'DESC' THEN
                                                       lh.AdminLevel3Name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'VectorType'
                                                        AND @SortOrder = 'ASC' THEN
                                                       vectorTypes.vectorTypes
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'VectorType'
                                                        AND @SortOrder = 'DESC' THEN
                                                       vectorTypes.vectorTypes
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'Disease'
                                                        AND @SortOrder = 'ASC' THEN
                                                       diseases.diseases
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'Disease'
                                                        AND @SortOrder = 'DESC' THEN
                                                       diseases.diseases
                                               END DESC
                                     ) AS ROWNUM,
                   idfVectorSurveillanceSession AS SessionKey,
                   strSessionID AS SessionID,
                   vss.strFieldSessionID AS FieldSessionID,
                   vss.idfOUtBreak AS OutbreakKey,
                   o.strOutbreakID AS OutbreakID,
                   o.datStartDate AS OutbreakStartDate,
                   vectorTypeIDs.vectorTypeIDs AS VectorTypeIDs,
                   vectorTypes.vectorTypes AS Vectors,
                   diseaseIDs.diseaseIDs AS DiseaseIDs,
                   diseases.diseases AS Diseases,
                   statusType.name AS StatusTypeName,
                   lh.AdminLevel2Name AS AdministrativeLevel1Name,
                   lh.AdminLevel3Name AS AdministrativeLevel2Name,
                   lh.AdminLevel4Name AS SettlementName,
                   gl.dblLatitude AS Latitude,
                   gl.dblLongitude AS Longitude,
                   vss.datStartDate AS StartDate,
                   vss.datCloseDate AS CloseDate,
                   vss.idfsSite AS SiteID,
                   CASE
                       WHEN res.ReadPermissionIndicator = 5 THEN
                           CONVERT(BIT, 1)
                       WHEN res.ReadPermissionIndicator = 4 THEN
                           CONVERT(BIT, 0)
                       WHEN res.ReadPermissionIndicator = 3 THEN
                           CONVERT(BIT, 1)
                       WHEN res.ReadPermissionIndicator = 2 THEN
                           CONVERT(BIT, 0)
                       ELSE
                           CONVERT(BIT, res.ReadPermissionIndicator)
                   END AS ReadPermissionindicator,
                   CASE
                       WHEN res.AccessToPersonalDataPermissionIndicator = 5 THEN
                           CONVERT(BIT, 1)
                       WHEN res.AccessToPersonalDataPermissionIndicator = 4 THEN
                           CONVERT(BIT, 0)
                       WHEN res.AccessToPersonalDataPermissionIndicator = 3 THEN
                           CONVERT(BIT, 1)
                       WHEN res.AccessToPersonalDataPermissionIndicator = 2 THEN
                           CONVERT(BIT, 0)
                       ELSE
                           CONVERT(BIT, res.AccessToPersonalDataPermissionIndicator)
                   END AS AccessToPersonalDataPermissionIndicator,
                   CASE
                       WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 5 THEN
                           CONVERT(BIT, 1)
                       WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 4 THEN
                           CONVERT(BIT, 0)
                       WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 3 THEN
                           CONVERT(BIT, 1)
                       WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 2 THEN
                           CONVERT(BIT, 0)
                       ELSE
                           CONVERT(BIT, res.AccessToGenderAndAgeDataPermissionIndicator)
                   END AS AccessToGenderAndAgeDataPermissionIndicator,
                   CASE
                       WHEN res.WritePermissionIndicator = 5 THEN
                           CONVERT(BIT, 1)
                       WHEN res.WritePermissionIndicator = 4 THEN
                           CONVERT(BIT, 0)
                       WHEN res.WritePermissionIndicator = 3 THEN
                           CONVERT(BIT, 1)
                       WHEN res.WritePermissionIndicator = 2 THEN
                           CONVERT(BIT, 0)
                       ELSE
                           CONVERT(BIT, res.WritePermissionIndicator)
                   END AS WritePermissionIndicator,
                   CASE
                       WHEN res.DeletePermissionIndicator = 5 THEN
                           CONVERT(BIT, 1)
                       WHEN res.DeletePermissionIndicator = 4 THEN
                           CONVERT(BIT, 0)
                       WHEN res.DeletePermissionIndicator = 3 THEN
                           CONVERT(BIT, 1)
                       WHEN res.DeletePermissionIndicator = 2 THEN
                           CONVERT(BIT, 0)
                       ELSE
                           CONVERT(BIT, res.DeletePermissionIndicator)
                   END AS DeletePermissionIndicator,
                   COUNT(*) OVER () AS RecordCount,
                   (
                       SELECT COUNT(*)
                       FROM dbo.tlbVectorSurveillanceSession
                       WHERE intRowStatus = 0
                   ) AS TotalCount
            FROM @FinalResults res
                INNER JOIN dbo.tlbVectorSurveillanceSession vss
                    ON vss.idfVectorSurveillanceSession = res.ID
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000133) sessionStatusType
                    ON sessionStatusType.idfsReference = vss.idfsVectorSurveillanceStatus
                LEFT JOIN dbo.tlbGeoLocation gl
                    ON gl.idfGeoLocation = vss.idfLocation
                INNER JOIN dbo.gisLocation g
                    ON g.idfsLocation = gl.idfsLocation
                INNER JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                    ON lh.idfsLocation = g.idfsLocation
                CROSS APPLY
            (
                SELECT dbo.FN_VCTS_VSSESSION_DIAGNOSESNAMES_GET(vss.idfVectorSurveillanceSession, @LanguageID) diseases
            ) diseases
                CROSS APPLY
            (
                SELECT dbo.FN_VCTS_VSSESSION_VECTORTYPENAMES_GET(vss.idfVectorSurveillanceSession, @LanguageID) vectorTypes
            ) vectorTypes
                CROSS APPLY
            (
                SELECT dbo.FN_VCTS_VSSESSION_DIAGNOSESIDS_GET(vss.idfVectorSurveillanceSession, @LanguageID) diseaseIDs
            ) diseaseIDs
                CROSS APPLY
            (
                SELECT dbo.FN_VCTS_VSSESSION_VECTORTYPEIDS_GET(vss.idfVectorSurveillanceSession) vectorTypeIDs
            ) vectorTypeIDs
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000133) statusType
                    ON statusType.idfsReference = vss.idfsVectorSurveillanceStatus
                LEFT JOIN dbo.tlbOutbreak o
                    ON o.idfOutbreak = vss.idfOutbreak
                       AND o.intRowStatus = 0
           )
        SELECT SessionKey,
               SessionID,
               FieldSessionID,
               OutbreakKey,
               OutbreakID,
               OutbreakStartDate,
               VectorTypeIDs,
               Vectors,
               DiseaseIDs,
               Diseases,
               StatusTypeName,
               AdministrativeLevel1Name,
               AdministrativeLevel2Name,
               SettlementName,
               Latitude,
               Longitude,
               StartDate,
               CloseDate,
               SiteID,
               ReadPermissionIndicator,
               AccessToPersonalDataPermissionIndicator,
               AccessToGenderAndAgeDataPermissionIndicator,
               WritePermissionIndicator,
               DeletePermissionIndicator,
               RecordCount,
               TotalCount,
               CurrentPage = @PageNumber,
               TotalPages = (RecordCount / @PageSize) + IIF(RecordCount % @PageSize > 0, 1, 0)
        FROM paging
        WHERE RowNum > @firstRec
              AND RowNum < @lastRec
        ORDER BY CASE
                     WHEN @SortColumn = 'SessionID'
                          AND @SortOrder = 'ASC' THEN
                         SessionID
                 END ASC,
                 CASE
                     WHEN @SortColumn = 'SessionID'
                          AND @SortOrder = 'DESC' THEN
                         SessionID
                 END DESC,
                 CASE
                     WHEN @SortColumn = 'SessionStatusTypeName'
                          AND @SortOrder = 'ASC' THEN
                         StatusTypeName
                 END ASC,
                 CASE
                     WHEN @SortColumn = 'SessionStatusTypeName'
                          AND @SortOrder = 'DESC' THEN
                         StatusTypeName
                 END DESC,
                 CASE
                     WHEN @SortColumn = 'StartDate'
                          AND @SortOrder = 'ASC' THEN
                         StartDate
                 END ASC,
                 CASE
                     WHEN @SortColumn = 'StartDate'
                          AND @SortOrder = 'DESC' THEN
                         StartDate
                 END DESC,
                 CASE
                     WHEN @SortColumn = 'CloseDate'
                          AND @SortOrder = 'ASC' THEN
                         CloseDate
                 END ASC,
                 CASE
                     WHEN @SortColumn = 'CloseDate'
                          AND @SortOrder = 'DESC' THEN
                         CloseDate
                 END DESC,
                 CASE
                     WHEN @SortColumn = 'AdministrativeLevel1Name'
                          AND @SortOrder = 'ASC' THEN
                         AdministrativeLevel2Name
                 END ASC,
                 CASE
                     WHEN @SortColumn = 'AdministrativeLevel1Name'
                          AND @SortOrder = 'DESC' THEN
                         AdministrativeLevel2Name
                 END DESC,
                 CASE
                     WHEN @SortColumn = 'AdministrativeLevel2Name'
                          AND @SortOrder = 'ASC' THEN
                         SettlementName
                 END ASC,
                 CASE
                     WHEN @SortColumn = 'AdministrativeLevel2Name'
                          AND @SortOrder = 'DESC' THEN
                         SettlementName
                 END DESC,
                 CASE
                     WHEN @SortColumn = 'VectorType'
                          AND @SortOrder = 'ASC' THEN
                         Vectors
                 END ASC,
                 CASE
                     WHEN @SortColumn = 'VectorType'
                          AND @SortOrder = 'DESC' THEN
                         Vectors
                 END DESC,
                 CASE
                     WHEN @SortColumn = 'Disease'
                          AND @SortOrder = 'ASC' THEN
                         Diseases
                 END ASC,
                 CASE
                     WHEN @SortColumn = 'Disease'
                          AND @SortOrder = 'DESC' THEN
                         Diseases
                 END DESC;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_VET_DISEASE_REPORT_GETList]...';


GO
-- ================================================================================================
-- Name: USP_VET_DISEASE_REPORT_GETList
--
-- Description:	Get disease list for the farm edit/enter and other use cases.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     03/25/2018 Initial release.
-- Stephen Long     11/09/2018 Added FarmOwnerID and FarmOwnerName for lab use case 10.
-- Stephen Long     11/25/2018 Updated for the new API.
-- Stephen Long     12/31/2018 Added pagination logic.
-- Stephen Long     04/24/2019 Added advanced search parameters to sync up with use case VUC10.
-- Stephen Long     04/29/2019 Added related to veterinary disease report fields for use case VUC11 
--                             and VUC12.
-- Stephen Long     06/14/2019 Adjusted date from's and to's to be cast as just dates with no time.
-- Stephen Long     06/22/2019 Fix to the farm address logic (building, apartment, house IIF's 
--                             to case statements).
-- Stephen Long     06/25/2019 Add group by for joins with multiple records (such as samples).
-- Stephen Long     07/20/2019 Changed farm inventory counts to ISNULL.
-- Stephen Long     09/03/2019 Add active status check on species list.
-- Ann Xiong		12/05/2019 Added EIDSSPersonID to select list and replaced "ON 
--                             caseType.idfsReference = vc.idfsCaseReportType" with 
--                             "caseType.idfsReference = vc.idfsCaseType".
-- Ann Xiong		12/10/2019 Added a parameter @PersonID NVARCHAR(200) = NULL.
-- Ann Xiong		12/19/2019 Added EIDSSFarmID to select list
-- Stephen Long     01/22/2020 Added site list parameter for site filtration.
-- Stephen Long     01/28/2020 Added non-configurable filtration rules, and legacy report ID.
-- Stephen Long     02/03/2020 Added dbo prefix and changed non-configurable filtration comments.
-- Stephen Long     02/16/2020 Removed group by and pagination applied on final query.
-- Stephen Long     02/26/2020 Added data entry site ID parameter and where clause.
-- Stephen Long     03/04/2020 Corrected where clause on total count for null species type.
-- Stephen Long     03/17/2020 Corrected farm owner ID to use idfHuman instead of idfHumanActual.
-- Stephen Long     03/25/2020 Added if/else for first-level and second-level site types to bypass 
--                             non-configurable rules.
-- Stephen Long     05/18/2020 Added disease filtration rules from use case SAUC62.
-- Stephen Long     06/18/2020 Added where criteria to the query when no site filtration is 
--                             required.
-- Stephen Long     07/07/2020 Added trim to the EIDSS identifier like criteria.
-- Stephen Long     07/08/2020 Replaced common table experssion; was not working well with POCO.
-- Stephen Long     09/24/2020 Update address fields returned (settlement, rayon and region only).
-- Stephen Long     11/18/2020 Added site ID to the query.
-- Stephen Long     11/23/2020 Added configurable site filtration rules.
-- Stephen Long     11/25/2020 Modified for new permission fields on the AccessRule table.
-- Stephen Long     11/28/2020 Add index to table variable primary key.
-- Stephen Long     12/02/2020 Remove primary key from table variable IDs.
-- Stephen Long     12/13/2020 Added apply configurable filtration indicator parameter.
-- Stephen Long     12/23/2020 Added EIDSS session ID parameter and where clause criteria.
-- Stephen Long     12/24/2020 Modified join on disease filtration default role rule.
-- Stephen Long     12/29/2020 Changed function call on reference data for inactive records.
-- Stephen Long     01/04/2021 Added option recompile due to number of optional parameters for 
--                             better execution plan.
-- Stephen Long     01/05/2021 Removed species list sub-query due to performance.  New stored 
--                             procedure added to get species list when user expands disease 
--                             report row in search.
-- Stephen Long     01/06/2021 Added string aggregate function on species list and parameter to 
--                             include.
-- Stephen Long     01/25/2021 Added order by parameter to handle when a user selected a specific 
--                             column to sort by.
-- Stephen Long     01/27/2021 Fix for order by; alias will not work on order by with case.
-- Stephen Long     04/02/2021 Added updated pagination and location hierarchy.
-- Stephen Long     01/11/2022 Added farm owner (idfHuman) ID to the query and updated location 
--                             hierarchy.
-- Mike Kornegay	01/26/2022 Changed RecordCount to TotalRowCount to match BaseModel.
-- Stephen Long     03/29/2022 Added disease ID to the model for laboratory module, and corrected 
--                             site filtration.
-- Ann Xiong		04/25/2022 Added f.idfFarm to select list for Veterinary Disease Report 
--                             Deduplication.
-- Stephen Long     05/10/2022 Added report category type ID to the query.
-- Stephen Long     06/03/2022 Updated to point default access rules to base reference.
-- Mike Kornegay	08/28/2022 Changed FarmAddress to FarmLocation and added FarmLocation.
-- Mike Kornegay    08/31/2022 Corrected sort by adding order by to final query.
-- Stephen Long     09/22/2022 Add check for "0" page size.  If "0", then set to 1.
-- Doug Albanese    01/11/2023 Modifying so that the same SP can bring back Ou
-- Stephen Long     01/13/2023 Updated for site filtration queries.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_VET_DISEASE_REPORT_GETList]
	@LanguageID NVARCHAR(50)
	,@ReportKey BIGINT = NULL
	,@ReportID NVARCHAR(200) = NULL
	,@LegacyReportID NVARCHAR(200) = NULL
	,@SessionKey BIGINT = NULL
	,@FarmMasterID BIGINT = NULL
	,@DiseaseID BIGINT = NULL
	,@ReportStatusTypeID BIGINT = NULL
	,@AdministrativeLevelID BIGINT = NULL
	,@DateEnteredFrom DATE = NULL
	,@DateEnteredTo DATE = NULL
	,@ClassificationTypeID BIGINT = NULL
	,@PersonID NVARCHAR(200) = NULL
	,@ReportTypeID BIGINT = NULL
	,@SpeciesTypeID BIGINT = NULL
	,@OutbreakCasesIndicator BIT = 0
	,@DiagnosisDateFrom DATE = NULL
	,@DiagnosisDateTo DATE = NULL
	,@InvestigationDateFrom DATE = NULL
	,@InvestigationDateTo DATE = NULL
	,@LocalOrFieldSampleID NVARCHAR(200) = NULL
	,@TotalAnimalQuantityFrom INT = NULL
	,@TotalAnimalQuantityTo INT = NULL
	,@SessionID NVARCHAR(200) = NULL
	,@DataEntrySiteID BIGINT = NULL
	,@UserSiteID BIGINT
	,@UserOrganizationID BIGINT
	,@UserEmployeeID BIGINT
	,@ApplySiteFiltrationIndicator BIT = 0
	,@IncludeSpeciesListIndicator BIT = 0
	,@SortColumn NVARCHAR(30) = 'ReportID'
	,@SortOrder NVARCHAR(4) = 'DESC'
	,@PageNumber INT = 1
	,@PageSize INT = 10
	,@OutbreakCaseReportOnly INT = 0
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @firstRec INT;
    DECLARE @lastRec INT;

    SET @firstRec = (@PageNumber - 1) * @PageSize;
    SET @lastRec = (@PageNumber * @PageSize + 1);

	DECLARE @AdministrativeLevelNode AS HIERARCHYID;
    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL, INDEX IDX_ID (ID
                                                             ));
    DECLARE @FinalResults TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );

	BEGIN TRY
	        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

	    IF @PageSize = 0
        BEGIN
            SET @PageSize = 1;
        END

		IF @AdministrativeLevelID IS NOT NULL
		BEGIN
			SELECT @AdministrativeLevelNode = node
			FROM dbo.gisLocation
			WHERE idfsLocation = @AdministrativeLevelID;
		END;

        -- ========================================================================================
        -- NO CONFIGURABLE FILTRATION RULES APPLIED
        --
        -- For first and second level sites, do not apply any site filtration rules.
        -- ========================================================================================
		IF @ApplySiteFiltrationIndicator = 0
		BEGIN
			INSERT INTO @Results
			SELECT v.idfVetCase
				,1
				,1
				,1
				,1
				,1
			FROM dbo.tlbVetCase v
			INNER JOIN dbo.tlbFarm f ON f.idfFarm = v.idfFarm
			LEFT JOIN dbo.tlbHuman h ON h.idfHuman = f.idfHuman
			LEFT JOIN dbo.HumanActualAddlInfo haai ON haai.HumanActualAddlInfoUID = h.idfHumanActual
			LEFT JOIN dbo.tlbGeoLocation gl ON gl.idfGeoLocation = f.idfFarmAddress
			LEFT JOIN dbo.gisLocation g ON g.idfsLocation = gl.idfsLocation
			LEFT JOIN dbo.tlbMaterial m ON m.idfVetCase = v.idfVetCase
			LEFT JOIN dbo.tlbMonitoringSession ms ON ms.idfMonitoringSession = v.idfParentMonitoringSession
			WHERE v.intRowStatus = 0
				AND (
					f.idfFarmActual = @FarmMasterID
					OR @FarmMasterID IS NULL
					)
				AND (
					v.idfVetCase = @ReportKey
					OR @ReportKey IS NULL
					)
				AND (
					v.idfParentMonitoringSession = @SessionKey
					OR @SessionKey IS NULL
					)
				AND (
					g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
					OR @AdministrativeLevelID IS NULL
					)
				AND (
					v.idfsFinalDiagnosis = @DiseaseID
					OR @DiseaseID IS NULL
					)
				AND (
					v.idfsCaseClassification = @ClassificationTypeID
					OR @ClassificationTypeID IS NULL
					)
				AND (
					v.idfsCaseProgressStatus = @ReportStatusTypeID
					OR @ReportStatusTypeID IS NULL
					)
				AND (
					(
						CAST(v.datEnteredDate AS DATE) BETWEEN @DateEnteredFrom
							AND @DateEnteredTo
						)
					OR (
						@DateEnteredFrom IS NULL
						OR @DateEnteredTo IS NULL
						)
					)
				AND (
					v.idfsCaseReportType = @ReportTypeID
					OR @ReportTypeID IS NULL
					)
				AND (
					v.idfsCaseType = @SpeciesTypeID
					OR @SpeciesTypeID IS NULL
					)
				AND (
					(
						CAST(v.datFinalDiagnosisDate AS DATE) BETWEEN @DiagnosisDateFrom
							AND @DiagnosisDateTo
						)
					OR (
						@DiagnosisDateFrom IS NULL
						OR @DiagnosisDateTo IS NULL
						)
					)
				AND (
					(
						CAST(v.datInvestigationDate AS DATE) BETWEEN @InvestigationDateFrom
							AND @InvestigationDateTo
						)
					OR (
						@InvestigationDateFrom IS NULL
						OR @InvestigationDateTo IS NULL
						)
					)
				AND (
					(
						(
							f.intAvianTotalAnimalQty BETWEEN @TotalAnimalQuantityFrom
								AND @TotalAnimalQuantityTo
							)
						OR (
							f.intLivestockTotalAnimalQty BETWEEN @TotalAnimalQuantityFrom
								AND @TotalAnimalQuantityTo
							)
						)
					OR (
						@TotalAnimalQuantityFrom IS NULL
						OR @TotalAnimalQuantityTo IS NULL
						)
					)
				AND (
					(
						v.idfOutbreak IS NULL
						AND @OutbreakCasesIndicator = 0
						)
					OR (
						v.idfOutbreak IS NOT NULL
						AND @OutbreakCasesIndicator = 1
						)
					OR (@OutbreakCasesIndicator IS NULL)
					)
				AND (
					v.idfsSite = @DataEntrySiteID
					OR @DataEntrySiteID IS NULL
					)
				AND (
					v.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
					OR @ReportID IS NULL
					)
				AND (
					v.LegacyCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
					OR @LegacyReportID IS NULL
					)
				AND (
					haai.EIDSSPersonID LIKE '%' + TRIM(@PersonID) + '%'
					OR @PersonID IS NULL
					)
				AND (
					m.strFieldBarcode LIKE '%' + TRIM(@LocalOrFieldSampleID) + '%'
					OR @LocalOrFieldSampleID IS NULL
					)
				AND (
					ms.strMonitoringSessionID LIKE '%' + TRIM(@SessionID) + '%'
					OR @SessionID IS NULL
					)
			GROUP BY v.idfVetCase;
		END
		ELSE
		BEGIN
		INSERT INTO @Results
			SELECT v.idfVetCase
				,1
				,1
				,1
				,1
				,1
			FROM dbo.tlbVetCase v
			INNER JOIN dbo.tlbFarm f ON f.idfFarm = v.idfFarm
			LEFT JOIN dbo.tlbHuman h ON h.idfHuman = f.idfHuman
			LEFT JOIN dbo.HumanActualAddlInfo haai ON haai.HumanActualAddlInfoUID = h.idfHumanActual
			LEFT JOIN dbo.tlbGeoLocation gl ON gl.idfGeoLocation = f.idfFarmAddress
			LEFT JOIN dbo.gisLocation g ON g.idfsLocation = gl.idfsLocation
			LEFT JOIN dbo.tlbMaterial m ON m.idfVetCase = v.idfVetCase
			LEFT JOIN dbo.tlbMonitoringSession ms ON ms.idfMonitoringSession = v.idfParentMonitoringSession
			WHERE v.intRowStatus = 0
				AND v.idfsSite = @UserSiteID 
				AND (
					f.idfFarmActual = @FarmMasterID
					OR @FarmMasterID IS NULL
					)
				AND (
					v.idfVetCase = @ReportKey
					OR @ReportKey IS NULL
					)
				AND (
					v.idfParentMonitoringSession = @SessionKey
					OR @SessionKey IS NULL
					)
				AND (
					g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
					OR @AdministrativeLevelID IS NULL
					)
				AND (
					v.idfsFinalDiagnosis = @DiseaseID
					OR @DiseaseID IS NULL
					)
				AND (
					v.idfsCaseClassification = @ClassificationTypeID
					OR @ClassificationTypeID IS NULL
					)
				AND (
					v.idfsCaseProgressStatus = @ReportStatusTypeID
					OR @ReportStatusTypeID IS NULL
					)
				AND (
					(
						CAST(v.datEnteredDate AS DATE) BETWEEN @DateEnteredFrom
							AND @DateEnteredTo
						)
					OR (
						@DateEnteredFrom IS NULL
						OR @DateEnteredTo IS NULL
						)
					)
				AND (
					v.idfsCaseReportType = @ReportTypeID
					OR @ReportTypeID IS NULL
					)
				AND (
					v.idfsCaseType = @SpeciesTypeID
					OR @SpeciesTypeID IS NULL
					)
				AND (
					(
						CAST(v.datFinalDiagnosisDate AS DATE) BETWEEN @DiagnosisDateFrom
							AND @DiagnosisDateTo
						)
					OR (
						@DiagnosisDateFrom IS NULL
						OR @DiagnosisDateTo IS NULL
						)
					)
				AND (
					(
						CAST(v.datInvestigationDate AS DATE) BETWEEN @InvestigationDateFrom
							AND @InvestigationDateTo
						)
					OR (
						@InvestigationDateFrom IS NULL
						OR @InvestigationDateTo IS NULL
						)
					)
				AND (
					(
						(
							f.intAvianTotalAnimalQty BETWEEN @TotalAnimalQuantityFrom
								AND @TotalAnimalQuantityTo
							)
						OR (
							f.intLivestockTotalAnimalQty BETWEEN @TotalAnimalQuantityFrom
								AND @TotalAnimalQuantityTo
							)
						)
					OR (
						@TotalAnimalQuantityFrom IS NULL
						OR @TotalAnimalQuantityTo IS NULL
						)
					)
				AND (
					(
						v.idfOutbreak IS NULL
						AND @OutbreakCasesIndicator = 0
						)
					OR (
						v.idfOutbreak IS NOT NULL
						AND @OutbreakCasesIndicator = 1
						)
					OR (@OutbreakCasesIndicator IS NULL)
					)
				AND (
					v.idfsSite = @DataEntrySiteID
					OR @DataEntrySiteID IS NULL
					)
				AND (
					v.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
					OR @ReportID IS NULL
					)
				AND (
					v.LegacyCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
					OR @LegacyReportID IS NULL
					)
				AND (
					haai.EIDSSPersonID LIKE '%' + TRIM(@PersonID) + '%'
					OR @PersonID IS NULL
					)
				AND (
					m.strFieldBarcode LIKE '%' + TRIM(@LocalOrFieldSampleID) + '%'
					OR @LocalOrFieldSampleID IS NULL
					)
				AND (
					ms.strMonitoringSessionID LIKE '%' + TRIM(@SessionID) + '%'
					OR @SessionID IS NULL
					)
			GROUP BY v.idfVetCase;

			DECLARE @FilteredResults TABLE (
				ID BIGINT NOT NULL
				,ReadPermissionIndicator INT NOT NULL
				,AccessToPersonalDataPermissionIndicator INT NOT NULL
				,AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL
				,WritePermissionIndicator INT NOT NULL
				,DeletePermissionIndicator INT NOT NULL
				,INDEX IDX_ID(ID)
				);

            -- =======================================================================================
            -- DEFAULT CONFIGURABLE FILTRATION RULES
            --
            -- Apply active default filtration rules for third level sites.
            -- =======================================================================================
			DECLARE @RuleActiveStatus INT = 0;
			DECLARE @AdministrativeLevelTypeID INT;
			DECLARE @OrganizationAdministrativeLevelNode HIERARCHYID;
			DECLARE @DefaultAccessRules TABLE (
				AccessRuleID BIGINT NOT NULL,
				ActiveIndicator INT NOT NULL
				,ReadPermissionIndicator INT NOT NULL
				,AccessToPersonalDataPermissionIndicator INT NOT NULL
				,AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL
				,WritePermissionIndicator INT NOT NULL
				,DeletePermissionIndicator INT NOT NULL
				,AdministrativeLevelTypeID INT NULL
				);

			INSERT INTO @DefaultAccessRules
			SELECT AccessRuleID
			    ,a.intRowStatus
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
				,a.AdministrativeLevelTypeID
			FROM dbo.AccessRule a
			WHERE DefaultRuleIndicator = 1;

			--
			-- Report data shall be available to all sites of the same administrative level 
			-- specified in the rule.
			--
            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
			WHERE AccessRuleID = 10537009;

			IF @RuleActiveStatus = 0
			BEGIN
				SELECT @AdministrativeLevelTypeID = AdministrativeLevelTypeID
				FROM @DefaultAccessRules
				WHERE AccessRuleID = 10537009;

				SELECT @OrganizationAdministrativeLevelNode = g.node.GetAncestor(g.node.GetLevel() - @AdministrativeLevelTypeID)
				FROM dbo.tlbOffice o
				INNER JOIN dbo.tlbGeoLocationShared l ON l.idfGeoLocationShared = o.idfLocation
				INNER JOIN dbo.gisLocation g ON g.idfsLocation = l.idfsLocation
				WHERE o.idfOffice = @UserOrganizationID
					AND g.node.GetLevel() >= @AdministrativeLevelTypeID;

				-- Administrative level specified in the rule of the site where the report was created.
				INSERT INTO @FilteredResults
				SELECT v.idfVetCase
					,a.ReadPermissionIndicator
					,a.AccessToPersonalDataPermissionIndicator
					,a.AccessToGenderAndAgeDataPermissionIndicator
					,a.WritePermissionIndicator
					,a.DeletePermissionIndicator
				FROM dbo.tlbVetCase v
				INNER JOIN dbo.tstSite s ON v.idfsSite = s.idfsSite
				INNER JOIN dbo.tlbOffice o ON o.idfOffice = s.idfOffice
				INNER JOIN dbo.tlbGeoLocationShared l ON l.idfGeoLocationShared = o.idfLocation
				INNER JOIN dbo.gisLocation g ON g.idfsLocation = l.idfsLocation
				INNER JOIN @DefaultAccessRules a ON a.AccessRuleID = 10537009
				WHERE v.intRowStatus = 0
					AND (
						v.idfsCaseType = @SpeciesTypeID
						OR @SpeciesTypeID IS NULL
						)
					AND (
						(
							CAST(v.datEnteredDate AS DATE) BETWEEN @DateEnteredFrom
								AND @DateEnteredTo
							)
						OR (
							@DateEnteredFrom IS NULL
							OR @DateEnteredTo IS NULL
							)
						)
					AND g.node.IsDescendantOf(@OrganizationAdministrativeLevelNode) = 1;

				-- Administrative level specified in the rule of the farm address.
				INSERT INTO @FilteredResults
				SELECT v.idfVetCase
					,a.ReadPermissionIndicator
					,a.AccessToPersonalDataPermissionIndicator
					,a.AccessToGenderAndAgeDataPermissionIndicator
					,a.WritePermissionIndicator
					,a.DeletePermissionIndicator
				FROM dbo.tlbVetCase v
				INNER JOIN dbo.tlbFarm f ON f.idfFarm = v.idfFarm
				INNER JOIN dbo.tlbGeoLocation l ON l.idfGeoLocation = f.idfFarmAddress
				INNER JOIN dbo.gisLocation g ON g.idfsLocation = l.idfsLocation
				INNER JOIN @DefaultAccessRules a ON a.AccessRuleID = 10537009
				WHERE v.intRowStatus = 0
					AND (
						v.idfsCaseType = @SpeciesTypeID
						OR @SpeciesTypeID IS NULL
						)
					AND (
						(
							CAST(v.datEnteredDate AS DATE) BETWEEN @DateEnteredFrom
								AND @DateEnteredTo
							)
						OR (
							@DateEnteredFrom IS NULL
							OR @DateEnteredTo IS NULL
							)
						)
					AND g.node.IsDescendantOf(@OrganizationAdministrativeLevelNode) = 1;
			END;

			--
			-- Report data shall be available to all sites' organizations connected to the particular report.
			--
            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
			WHERE AccessRuleID = 10537010;

			IF @RuleActiveStatus = 0
			BEGIN
				-- Investigated and reported by organizations
				INSERT INTO @FilteredResults
				SELECT v.idfVetCase
					,a.ReadPermissionIndicator
					,a.AccessToPersonalDataPermissionIndicator
					,a.AccessToGenderAndAgeDataPermissionIndicator
					,a.WritePermissionIndicator
					,a.DeletePermissionIndicator
				FROM dbo.tlbVetCase v
				INNER JOIN @DefaultAccessRules a ON a.AccessRuleID = 10537010
				WHERE (v.intRowStatus = 0)
					AND (
						v.idfInvestigatedByOffice = @UserOrganizationID
						OR v.idfReportedByOffice = @UserOrganizationID
						);

				-- Sample collected by and sent to organizations
				INSERT INTO @FilteredResults
				SELECT MAX(m.idfVetCase)
					,a.ReadPermissionIndicator
					,a.AccessToPersonalDataPermissionIndicator
					,a.AccessToGenderAndAgeDataPermissionIndicator
					,a.WritePermissionIndicator
					,a.DeletePermissionIndicator
				FROM dbo.tlbMaterial m
				INNER JOIN dbo.tlbVetCase v ON v.idfVetCase = m.idfVetCase
					AND v.intRowStatus = 0
				INNER JOIN @DefaultAccessRules a ON a.AccessRuleID = 10537010
				WHERE m.intRowStatus = 0
					AND (
						m.idfFieldCollectedByOffice = @UserOrganizationID
						OR m.idfSendToOffice = @UserOrganizationID
						)
				GROUP BY m.idfVetCase
					,a.ReadPermissionIndicator
					,a.AccessToPersonalDataPermissionIndicator
					,a.AccessToGenderAndAgeDataPermissionIndicator
					,a.WritePermissionIndicator
					,a.DeletePermissionIndicator;

				-- Sample transferred to organizations
				INSERT INTO @FilteredResults
				SELECT MAX(m.idfVetCase)
					,a.ReadPermissionIndicator
					,a.AccessToPersonalDataPermissionIndicator
					,a.AccessToGenderAndAgeDataPermissionIndicator
					,a.WritePermissionIndicator
					,a.DeletePermissionIndicator
				FROM dbo.tlbMaterial m
				INNER JOIN dbo.tlbVetCase v ON v.idfVetCase = m.idfVetCase
					AND v.intRowStatus = 0
				INNER JOIN dbo.tlbTransferOutMaterial tom ON m.idfMaterial = tom.idfMaterial
					AND tom.intRowStatus = 0
				INNER JOIN dbo.tlbTransferOUT t ON tom.idfTransferOut = t.idfTransferOut
					AND t.intRowStatus = 0
				INNER JOIN @DefaultAccessRules a ON a.AccessRuleID = 10537010
				WHERE m.intRowStatus = 0
					AND t.idfSendToOffice = @UserOrganizationID
				GROUP BY m.idfVetCase
					,a.ReadPermissionIndicator
					,a.AccessToPersonalDataPermissionIndicator
					,a.AccessToGenderAndAgeDataPermissionIndicator
					,a.WritePermissionIndicator
					,a.DeletePermissionIndicator;
			END;

			--
			-- Report data shall be available to the sites with the connected outbreak, if the report 
			-- is the primary report/session for an outbreak.
			--
            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
			WHERE AccessRuleID = 10537011;

			IF @RuleActiveStatus = 0
			BEGIN
				INSERT INTO @FilteredResults
				SELECT v.idfVetCase
					,a.ReadPermissionIndicator
					,a.AccessToPersonalDataPermissionIndicator
					,a.AccessToGenderAndAgeDataPermissionIndicator
					,a.WritePermissionIndicator
					,a.DeletePermissionIndicator
				FROM dbo.tlbVetCase v
				INNER JOIN dbo.tlbOutbreak o ON v.idfVetCase = o.idfPrimaryCaseOrSession
					AND o.intRowStatus = 0
				INNER JOIN @DefaultAccessRules a ON a.AccessRuleID = 10537011
				WHERE v.intRowStatus = 0
					AND o.idfsSite = @UserSiteID
			END;

            -- =======================================================================================
            -- CONFIGURABLE FILTRATION RULES
            -- 
            -- Apply configurable filtration rules for use case SAUC34. Some of these rules may 
            -- overlap the default rules.
            -- =======================================================================================
			--
			-- Apply at the user's site group level, granted by a site group.
			--
			INSERT INTO @FilteredResults
			SELECT v.idfVetCase
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbVetCase v
			INNER JOIN dbo.tflSiteToSiteGroup grantingSGS ON grantingSGS.idfsSite = v.idfsSite
			INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup ON userSiteGroup.idfsSite = @UserSiteID
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE v.intRowStatus = 0
				AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

			--
			-- Apply at the user's site level, granted by a site group.
			--
			INSERT INTO @FilteredResults
			SELECT v.idfVetCase
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbVetCase v
			INNER JOIN dbo.tflSiteToSiteGroup grantingSGS ON grantingSGS.idfsSite = v.idfsSite
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorSiteID = @UserSiteID
				AND ara.ActorEmployeeGroupID IS NULL
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE v.intRowStatus = 0
				AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

			-- 
			-- Apply at the user's employee group level, granted by a site group.
			--
			INSERT INTO @FilteredResults
			SELECT v.idfVetCase
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbVetCase v
			INNER JOIN dbo.tflSiteToSiteGroup grantingSGS ON grantingSGS.idfsSite = v.idfsSite
			INNER JOIN dbo.tlbEmployeeGroupMember egm ON egm.idfEmployee = @UserEmployeeID
				AND egm.intRowStatus = 0
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE v.intRowStatus = 0
				AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

			-- 
			-- Apply at the user's ID level, granted by a site group.
			--
			INSERT INTO @FilteredResults
			SELECT v.idfVetCase
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbVetCase v
			INNER JOIN dbo.tflSiteToSiteGroup grantingSGS ON grantingSGS.idfsSite = v.idfsSite
			INNER JOIN dbo.tstUserTable u ON u.idfPerson = @UserEmployeeID
				AND u.intRowStatus = 0
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorUserID = u.idfUserID
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE v.intRowStatus = 0
				AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

			--
			-- Apply at the user's site group level, granted by a site.
			--
			INSERT INTO @FilteredResults
			SELECT v.idfVetCase
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbVetCase v
			INNER JOIN dbo.tflSiteToSiteGroup sgs ON sgs.idfsSite = @UserSiteID
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorSiteGroupID = sgs.idfSiteGroup
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE v.intRowStatus = 0
				AND sgs.idfsSite = v.idfsSite;

			-- 
			-- Apply at the user's site level, granted by a site.
			--
			INSERT INTO @FilteredResults
			SELECT v.idfVetCase
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbVetCase v
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorSiteID = @UserSiteID
				AND ara.ActorEmployeeGroupID IS NULL
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE v.intRowStatus = 0
				AND a.GrantingActorSiteID = v.idfsSite;

			-- 
			-- Apply at the user's employee group level, granted by a site.
			--
			INSERT INTO @FilteredResults
			SELECT v.idfVetCase
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbVetCase v
			INNER JOIN dbo.tlbEmployeeGroupMember egm ON egm.idfEmployee = @UserEmployeeID
				AND egm.intRowStatus = 0
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE v.intRowStatus = 0
				AND a.GrantingActorSiteID = v.idfsSite;

			-- 
			-- Apply at the user's ID level, granted by a site.
			--
			INSERT INTO @FilteredResults
			SELECT v.idfVetCase
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbVetCase v
			INNER JOIN dbo.tstUserTable u ON u.idfPerson = @UserEmployeeID
				AND u.intRowStatus = 0
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorUserID = u.idfUserID
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE v.intRowStatus = 0
				AND a.GrantingActorSiteID = v.idfsSite;

			-- Copy filtered results to results and use search criteria
			INSERT INTO @Results
			SELECT ID
				,ReadPermissionIndicator
				,AccessToPersonalDataPermissionIndicator
				,AccessToGenderAndAgeDataPermissionIndicator
				,WritePermissionIndicator
				,DeletePermissionIndicator
			FROM @FilteredResults
			INNER JOIN dbo.tlbVetCase v ON v.idfVetCase = ID
			INNER JOIN dbo.tlbFarm f ON f.idfFarm = v.idfFarm
			LEFT JOIN dbo.tlbHuman h ON h.idfHuman = f.idfHuman
			LEFT JOIN dbo.HumanActualAddlInfo haai ON haai.HumanActualAddlInfoUID = h.idfHumanActual
			LEFT JOIN dbo.tlbGeoLocation gl ON gl.idfGeoLocation = f.idfFarmAddress
			LEFT JOIN dbo.gisLocation g ON g.idfsLocation = gl.idfsLocation
			LEFT JOIN dbo.tlbMaterial m ON m.idfVetCase = v.idfVetCase
			LEFT JOIN dbo.tlbMonitoringSession ms ON ms.idfMonitoringSession = v.idfParentMonitoringSession
			WHERE v.intRowStatus = 0
				AND (
					f.idfFarmActual = @FarmMasterID
					OR @FarmMasterID IS NULL
					)
				AND (
					v.idfVetCase = @ReportKey
					OR @ReportKey IS NULL
					)
				AND (
					v.idfParentMonitoringSession = @SessionKey
					OR @SessionKey IS NULL
					)
				AND (
					g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
					OR @AdministrativeLevelID IS NULL
					)
				AND (
					v.idfsFinalDiagnosis = @DiseaseID
					OR @DiseaseID IS NULL
					)
				AND (
					v.idfsCaseClassification = @ClassificationTypeID
					OR @ClassificationTypeID IS NULL
					)
				AND (
					v.idfsCaseProgressStatus = @ReportStatusTypeID
					OR @ReportStatusTypeID IS NULL
					)
				AND (
					(
						CAST(v.datEnteredDate AS DATE) BETWEEN @DateEnteredFrom
							AND @DateEnteredTo
						)
					OR (
						@DateEnteredFrom IS NULL
						OR @DateEnteredTo IS NULL
						)
					)
				AND (
					v.idfsCaseReportType = @ReportTypeID
					OR @ReportTypeID IS NULL
					)
				AND (
					v.idfsCaseType = @SpeciesTypeID
					OR @SpeciesTypeID IS NULL
					)
				AND (
					(
						CAST(v.datFinalDiagnosisDate AS DATE) BETWEEN @DiagnosisDateFrom
							AND @DiagnosisDateTo
						)
					OR (
						@DiagnosisDateFrom IS NULL
						OR @DiagnosisDateTo IS NULL
						)
					)
				AND (
					(
						CAST(v.datInvestigationDate AS DATE) BETWEEN @InvestigationDateFrom
							AND @InvestigationDateTo
						)
					OR (
						@InvestigationDateFrom IS NULL
						OR @InvestigationDateTo IS NULL
						)
					)
				AND (
					(
						(
							f.intAvianTotalAnimalQty BETWEEN @TotalAnimalQuantityFrom
								AND @TotalAnimalQuantityTo
							)
						OR (
							f.intLivestockTotalAnimalQty BETWEEN @TotalAnimalQuantityFrom
								AND @TotalAnimalQuantityTo
							)
						)
					OR (
						@TotalAnimalQuantityFrom IS NULL
						OR @TotalAnimalQuantityTo IS NULL
						)
					)
				AND (
					(
						v.idfOutbreak IS NULL
						AND @OutbreakCasesIndicator = 0
						)
					OR (
						v.idfOutbreak IS NOT NULL
						AND @OutbreakCasesIndicator = 1
						)
					OR (@OutbreakCasesIndicator IS NULL)
					)
				AND (
					v.idfsSite = @DataEntrySiteID
					OR @DataEntrySiteID IS NULL
					)
				AND (
					v.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
					OR @ReportID IS NULL
					)
				AND (
					v.LegacyCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
					OR @LegacyReportID IS NULL
					)
				AND (
					haai.EIDSSPersonID LIKE '%' + TRIM(@PersonID) + '%'
					OR @PersonID IS NULL
					)
				AND (
					m.strFieldBarcode LIKE '%' + TRIM(@LocalOrFieldSampleID) + '%'
					OR @LocalOrFieldSampleID IS NULL
					)
				AND (
					ms.strMonitoringSessionID LIKE '%' + TRIM(@SessionID) + '%'
					OR @SessionID IS NULL
					)
			GROUP BY ID
				,ReadPermissionIndicator
				,AccessToPersonalDataPermissionIndicator
				,AccessToGenderAndAgeDataPermissionIndicator
				,WritePermissionIndicator
				,DeletePermissionIndicator;
		END;

		-- =======================================================================================
		-- DISEASE FILTRATION RULES
		--
		-- Apply disease filtration rules from use case SAUC62.
		-- =======================================================================================
		-- 
		-- Apply level 0 disease filtration rules for the employee default user group - Denies ONLY
		-- as all records have been pulled above with or without site filtration rules applied.
		--
		DELETE
		FROM @Results
		WHERE ID IN (
				SELECT v.idfVetCase
				FROM dbo.tlbVetCase v
				INNER JOIN dbo.tstObjectAccess oa ON oa.idfsObjectID = v.idfsFinalDiagnosis
					AND oa.intRowStatus = 0
				WHERE oa.intPermission = 1
					AND oa.idfActor = - 506 -- Default role
				);

		--
		-- Apply level 1 disease filtration rules for an employee's associated user group(s).  
		-- Allows and denies will supersede level 0.
		--
		INSERT INTO @Results
		SELECT v.idfVetCase
			,1
			,1
			,1
			,1
			,1
		FROM dbo.tlbVetCase v
		INNER JOIN dbo.tstObjectAccess oa ON oa.idfsObjectID = v.idfsFinalDiagnosis
			AND oa.intRowStatus = 0
		INNER JOIN dbo.tlbEmployeeGroupMember egm ON egm.idfEmployee = @UserEmployeeID
			AND egm.intRowStatus = 0
		INNER JOIN dbo.tlbFarm f ON f.idfFarm = v.idfFarm
		LEFT JOIN dbo.tlbHuman h ON h.idfHuman = f.idfHuman
		LEFT JOIN dbo.HumanActualAddlInfo haai ON haai.HumanActualAddlInfoUID = h.idfHumanActual
		LEFT JOIN dbo.tlbGeoLocation gl ON gl.idfGeoLocation = f.idfFarmAddress
		LEFT JOIN dbo.gisLocation g ON g.idfsLocation = gl.idfsLocation
		LEFT JOIN dbo.tlbMaterial m ON m.idfVetCase = v.idfVetCase
			AND m.intRowStatus = 0
		LEFT JOIN dbo.tlbMonitoringSession ms ON ms.idfMonitoringSession = v.idfParentMonitoringSession
			AND ms.intRowStatus = 0
		WHERE oa.intPermission = 2 -- Allow permission
			AND v.intRowStatus = 0
			AND oa.idfActor = egm.idfEmployeeGroup
			AND (
				f.idfFarmActual = @FarmMasterID
				OR @FarmMasterID IS NULL
				)
			AND (
				v.idfVetCase = @ReportKey
				OR @ReportKey IS NULL
				)
			AND (
				v.idfParentMonitoringSession = @SessionKey
				OR @SessionKey IS NULL
				)
			AND (
				g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
				OR @AdministrativeLevelID IS NULL
				)
			AND (
				v.idfsFinalDiagnosis = @DiseaseID
				OR @DiseaseID IS NULL
				)
			AND (
				v.idfsCaseClassification = @ClassificationTypeID
				OR @ClassificationTypeID IS NULL
				)
			AND (
				v.idfsCaseProgressStatus = @ReportStatusTypeID
				OR @ReportStatusTypeID IS NULL
				)
			AND (
				(
					CAST(v.datEnteredDate AS DATE) BETWEEN @DateEnteredFrom
						AND @DateEnteredTo
					)
				OR (
					@DateEnteredFrom IS NULL
					OR @DateEnteredTo IS NULL
					)
				)
			AND (
				v.idfsCaseReportType = @ReportTypeID
				OR @ReportTypeID IS NULL
				)
			AND (
				v.idfsCaseType = @SpeciesTypeID
				OR @SpeciesTypeID IS NULL
				)
			AND (
				(
					CAST(v.datFinalDiagnosisDate AS DATE) BETWEEN @DiagnosisDateFrom
						AND @DiagnosisDateTo
					)
				OR (
					@DiagnosisDateFrom IS NULL
					OR @DiagnosisDateTo IS NULL
					)
				)
			AND (
				(
					CAST(v.datInvestigationDate AS DATE) BETWEEN @InvestigationDateFrom
						AND @InvestigationDateTo
					)
				OR (
					@InvestigationDateFrom IS NULL
					OR @InvestigationDateTo IS NULL
					)
				)
			AND (
				(
					(
						f.intAvianTotalAnimalQty BETWEEN @TotalAnimalQuantityFrom
							AND @TotalAnimalQuantityTo
						)
					OR (
						f.intLivestockTotalAnimalQty BETWEEN @TotalAnimalQuantityFrom
							AND @TotalAnimalQuantityTo
						)
					)
				OR (
					@TotalAnimalQuantityFrom IS NULL
					OR @TotalAnimalQuantityTo IS NULL
					)
				)
			AND (
				(
					v.idfOutbreak IS NULL
					AND @OutbreakCasesIndicator = 0
					)
				OR (
					v.idfOutbreak IS NOT NULL
					AND @OutbreakCasesIndicator = 1
					)
				OR (@OutbreakCasesIndicator IS NULL)
				)
			AND (
				v.idfsSite = @DataEntrySiteID
				OR @DataEntrySiteID IS NULL
				)
			AND (
				v.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
				OR @ReportID IS NULL
				)
			AND (
				v.LegacyCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
				OR @LegacyReportID IS NULL
				)
			AND (
				haai.EIDSSPersonID LIKE '%' + TRIM(@PersonID) + '%'
				OR @PersonID IS NULL
				)
			AND (
				m.strFieldBarcode LIKE '%' + TRIM(@LocalOrFieldSampleID) + '%'
				OR @LocalOrFieldSampleID IS NULL
				)
			AND (
				ms.strMonitoringSessionID LIKE '%' + TRIM(@SessionID) + '%'
				OR @SessionID IS NULL
				)
		GROUP BY v.idfVetCase;

		DELETE res
		FROM @Results res
		INNER JOIN dbo.tlbVetCase v ON v.idfVetCase = res.ID
		INNER JOIN dbo.tlbEmployeeGroupMember egm ON egm.idfEmployee = @UserEmployeeID
			AND egm.intRowStatus = 0
		INNER JOIN dbo.tstObjectAccess oa ON oa.idfsObjectID = v.idfsFinalDiagnosis
			AND oa.intRowStatus = 0
		WHERE oa.intPermission = 1
			AND oa.idfsObjectType = 10060001 -- Disease
			AND oa.idfActor = egm.idfEmployeeGroup;

		--
		-- Apply level 2 disease filtration rules for the employee's identity.  Allows and denies 
		-- will supersede level 1.
		--
		INSERT INTO @Results
		SELECT v.idfVetCase
			,1
			,1
			,1
			,1
			,1
		FROM dbo.tlbVetCase v
		INNER JOIN dbo.tstObjectAccess oa ON oa.idfsObjectID = v.idfsFinalDiagnosis
			AND oa.intRowStatus = 0
		INNER JOIN dbo.tlbFarm f ON f.idfFarm = v.idfFarm
		LEFT JOIN dbo.tlbHuman h ON h.idfHuman = f.idfHuman
		LEFT JOIN dbo.HumanActualAddlInfo haai ON haai.HumanActualAddlInfoUID = h.idfHumanActual
		LEFT JOIN dbo.tlbGeoLocation gl ON gl.idfGeoLocation = f.idfFarmAddress
		LEFT JOIN dbo.gisLocation g ON g.idfsLocation = gl.idfsLocation
		LEFT JOIN dbo.tlbMaterial m ON m.idfVetCase = v.idfVetCase
			AND m.intRowStatus = 0
		LEFT JOIN dbo.tlbMonitoringSession ms ON ms.idfMonitoringSession = v.idfParentMonitoringSession
			AND ms.intRowStatus = 0
		WHERE oa.intPermission = 2 -- Allow permission
			AND v.intRowStatus = 0
			AND oa.idfsObjectType = 10060001 -- Disease
			AND oa.idfActor = @UserEmployeeID
			AND (
				f.idfFarmActual = @FarmMasterID
				OR @FarmMasterID IS NULL
				)
			AND (
				v.idfVetCase = @ReportKey
				OR @ReportKey IS NULL
				)
			AND (
				v.idfParentMonitoringSession = @SessionKey
				OR @SessionKey IS NULL
				)
			AND (
				g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
				OR @AdministrativeLevelID IS NULL
				)
			AND (
				v.idfsFinalDiagnosis = @DiseaseID
				OR @DiseaseID IS NULL
				)
			AND (
				v.idfsCaseClassification = @ClassificationTypeID
				OR @ClassificationTypeID IS NULL
				)
			AND (
				v.idfsCaseProgressStatus = @ReportStatusTypeID
				OR @ReportStatusTypeID IS NULL
				)
			AND (
				(
					CAST(v.datEnteredDate AS DATE) BETWEEN @DateEnteredFrom
						AND @DateEnteredTo
					)
				OR (
					@DateEnteredFrom IS NULL
					OR @DateEnteredTo IS NULL
					)
				)
			AND (
				v.idfsCaseReportType = @ReportTypeID
				OR @ReportTypeID IS NULL
				)
			AND (
				v.idfsCaseType = @SpeciesTypeID
				OR @SpeciesTypeID IS NULL
				)
			AND (
				(
					CAST(v.datFinalDiagnosisDate AS DATE) BETWEEN @DiagnosisDateFrom
						AND @DiagnosisDateTo
					)
				OR (
					@DiagnosisDateFrom IS NULL
					OR @DiagnosisDateTo IS NULL
					)
				)
			AND (
				(
					CAST(v.datInvestigationDate AS DATE) BETWEEN @InvestigationDateFrom
						AND @InvestigationDateTo
					)
				OR (
					@InvestigationDateFrom IS NULL
					OR @InvestigationDateTo IS NULL
					)
				)
			AND (
				(
					(
						f.intAvianTotalAnimalQty BETWEEN @TotalAnimalQuantityFrom
							AND @TotalAnimalQuantityTo
						)
					OR (
						f.intLivestockTotalAnimalQty BETWEEN @TotalAnimalQuantityFrom
							AND @TotalAnimalQuantityTo
						)
					)
				OR (
					@TotalAnimalQuantityFrom IS NULL
					OR @TotalAnimalQuantityTo IS NULL
					)
				)
			AND (
				(
					v.idfOutbreak IS NULL
					AND @OutbreakCasesIndicator = 0
					)
				OR (
					v.idfOutbreak IS NOT NULL
					AND @OutbreakCasesIndicator = 1
					)
				OR (@OutbreakCasesIndicator IS NULL)
				)
			AND (
				v.idfsSite = @DataEntrySiteID
				OR @DataEntrySiteID IS NULL
				)
			AND (
				v.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
				OR @ReportID IS NULL
				)
			AND (
				v.LegacyCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
				OR @LegacyReportID IS NULL
				)
			AND (
				haai.EIDSSPersonID LIKE '%' + TRIM(@PersonID) + '%'
				OR @PersonID IS NULL
				)
			AND (
				m.strFieldBarcode LIKE '%' + TRIM(@LocalOrFieldSampleID) + '%'
				OR @LocalOrFieldSampleID IS NULL
				)
			AND (
				ms.strMonitoringSessionID LIKE '%' + TRIM(@SessionID) + '%'
				OR @SessionID IS NULL
				)
		GROUP BY v.idfVetCase;

		DELETE
		FROM @Results
		WHERE ID IN (
				SELECT v.idfVetCase
				FROM dbo.tlbVetCase v
				INNER JOIN dbo.tstObjectAccess oa ON oa.idfsObjectID = v.idfsFinalDiagnosis
					AND oa.intRowStatus = 0
				WHERE oa.intPermission = 1 -- Deny permission
					AND oa.idfsObjectType = 10060001 -- Disease
					AND oa.idfActor = @UserEmployeeID
				);

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT vc.idfVetCase
            FROM dbo.tlbVetCase vc
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = vc.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE vc.intRowStatus = 0
                  AND oa.idfsObjectOperation = 10059003 -- Read permission
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        INSERT INTO @Results
        SELECT vc.idfVetCase,
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = vc.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = vc.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = vc.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = vc.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = vc.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbVetCase vc
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = vc.idfsSite
                   AND oa.intRowStatus = 0
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE vc.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserGroupSitePermissions WHERE SiteID = vc.idfsSite
        );

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbVetCase vc
                ON vc.idfVetCase = res.ID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = vc.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003; -- Read permission

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        INSERT INTO @Results
        SELECT vc.idfVetCase,
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = vc.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = vc.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = vc.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = vc.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = vc.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbVetCase vc
        WHERE vc.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserSitePermissions WHERE SiteID = vc.idfsSite
        );

        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT vc.idfVetCase
            FROM dbo.tlbVetCase vc
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = vc.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

		-- ========================================================================================
		-- FINAL QUERY, PAGINATION AND COUNTS
		-- ========================================================================================
		INSERT INTO @FinalResults
        SELECT ID,
               MAX(res.ReadPermissionIndicator),
               MAX(res.AccessToPersonalDataPermissionIndicator),
               MAX(res.AccessToGenderAndAgeDataPermissionIndicator),
               MAX(res.WritePermissionIndicator),
               MAX(res.DeletePermissionIndicator)
        FROM @Results res
		    INNER JOIN dbo.tlbVetCase v 
			    ON v.idfVetCase = res.ID 
				INNER JOIN dbo.tlbFarm f ON f.idfFarm = v.idfFarm
		LEFT JOIN dbo.tlbHuman h ON h.idfHuman = f.idfHuman
		LEFT JOIN dbo.HumanActualAddlInfo haai ON haai.HumanActualAddlInfoUID = h.idfHumanActual
		LEFT JOIN dbo.tlbGeoLocation gl ON gl.idfGeoLocation = f.idfFarmAddress
		LEFT JOIN dbo.gisLocation g ON g.idfsLocation = gl.idfsLocation
		LEFT JOIN dbo.tlbMaterial m ON m.idfVetCase = v.idfVetCase
			AND m.intRowStatus = 0
		LEFT JOIN dbo.tlbMonitoringSession ms ON ms.idfMonitoringSession = v.idfParentMonitoringSession
			AND ms.intRowStatus = 0
        WHERE res.ReadPermissionIndicator IN ( 1, 3, 5 )
					AND (
				f.idfFarmActual = @FarmMasterID
				OR @FarmMasterID IS NULL
				)
			AND (
				v.idfVetCase = @ReportKey
				OR @ReportKey IS NULL
				)
			AND (
				v.idfParentMonitoringSession = @SessionKey
				OR @SessionKey IS NULL
				)
			AND (
				g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
				OR @AdministrativeLevelID IS NULL
				)
			AND (
				v.idfsFinalDiagnosis = @DiseaseID
				OR @DiseaseID IS NULL
				)
			AND (
				v.idfsCaseClassification = @ClassificationTypeID
				OR @ClassificationTypeID IS NULL
				)
			AND (
				v.idfsCaseProgressStatus = @ReportStatusTypeID
				OR @ReportStatusTypeID IS NULL
				)
			AND (
				(
					CAST(v.datEnteredDate AS DATE) BETWEEN @DateEnteredFrom
						AND @DateEnteredTo
					)
				OR (
					@DateEnteredFrom IS NULL
					OR @DateEnteredTo IS NULL
					)
				)
			AND (
				v.idfsCaseReportType = @ReportTypeID
				OR @ReportTypeID IS NULL
				)
			AND (
				v.idfsCaseType = @SpeciesTypeID
				OR @SpeciesTypeID IS NULL
				)
			AND (
				(
					CAST(v.datFinalDiagnosisDate AS DATE) BETWEEN @DiagnosisDateFrom
						AND @DiagnosisDateTo
					)
				OR (
					@DiagnosisDateFrom IS NULL
					OR @DiagnosisDateTo IS NULL
					)
				)
			AND (
				(
					CAST(v.datInvestigationDate AS DATE) BETWEEN @InvestigationDateFrom
						AND @InvestigationDateTo
					)
				OR (
					@InvestigationDateFrom IS NULL
					OR @InvestigationDateTo IS NULL
					)
				)
			AND (
				(
					(
						f.intAvianTotalAnimalQty BETWEEN @TotalAnimalQuantityFrom
							AND @TotalAnimalQuantityTo
						)
					OR (
						f.intLivestockTotalAnimalQty BETWEEN @TotalAnimalQuantityFrom
							AND @TotalAnimalQuantityTo
						)
					)
				OR (
					@TotalAnimalQuantityFrom IS NULL
					OR @TotalAnimalQuantityTo IS NULL
					)
				)
			AND (
				(
					v.idfOutbreak IS NULL
					AND @OutbreakCasesIndicator = 0
					)
				OR (
					v.idfOutbreak IS NOT NULL
					AND @OutbreakCasesIndicator = 1
					)
				OR (@OutbreakCasesIndicator IS NULL)
				)
			AND (
				v.idfsSite = @DataEntrySiteID
				OR @DataEntrySiteID IS NULL
				)
			AND (
				v.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
				OR @ReportID IS NULL
				)
			AND (
				v.LegacyCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
				OR @LegacyReportID IS NULL
				)
			AND (
				haai.EIDSSPersonID LIKE '%' + TRIM(@PersonID) + '%'
				OR @PersonID IS NULL
				)
			AND (
				m.strFieldBarcode LIKE '%' + TRIM(@LocalOrFieldSampleID) + '%'
				OR @LocalOrFieldSampleID IS NULL
				)
			AND (
				ms.strMonitoringSessionID LIKE '%' + TRIM(@SessionID) + '%'
				OR @SessionID IS NULL
				)
        GROUP BY ID;

		WITH paging
		AS (SELECT 
				ID,
				c = COUNT(*) OVER()
			FROM @FinalResults res
			INNER JOIN dbo.tlbVetCase v ON v.idfVetCase = res.ID
			INNER JOIN dbo.tlbFarm f ON f.idfFarm = v.idfFarm
			LEFT JOIN dbo.tlbGeoLocation gl ON gl.idfGeoLocation = f.idfFarmAddress
			LEFT JOIN dbo.gisLocation g ON g.idfsLocation = gl.idfsLocation
			LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh ON lh.idfsLocation = g.idfsLocation
			LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000019) disease ON disease.idfsReference = v.idfsFinalDiagnosis
			LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000011) caseClassification ON caseClassification.idfsReference = v.idfsCaseClassification
			LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000111) reportStatus ON reportStatus.idfsReference = v.idfsCaseProgressStatus
			LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000144) reportType ON reportType.idfsReference = v.idfsCaseReportType
			ORDER BY 
				CASE WHEN @SortColumn = 'ReportID' AND @SortOrder = 'ASC' THEN v.strCaseID END ASC,
				CASE WHEN @SortColumn = 'ReportID' AND @SortOrder = 'DESC' THEN v.strCaseID END DESC,
				CASE WHEN @SortColumn = 'EnteredDate' AND @SortOrder = 'ASC' THEN v.datEnteredDate END ASC,
				CASE WHEN @SortColumn = 'EnteredDate' AND @SortOrder = 'DESC' THEN v.datEnteredDate END DESC,
				CASE WHEN @SortColumn = 'DiseaseName' AND @SortOrder = 'ASC' THEN disease.name END ASC,
				CASE WHEN @SortColumn = 'DiseaseName' AND @SortOrder = 'DESC' THEN disease.name END DESC,
				CASE WHEN @SortColumn = 'FarmName' AND @SortOrder = 'ASC' THEN f.strNationalName END ASC,
				CASE WHEN @SortColumn = 'FarmName' AND @SortOrder = 'DESC' THEN f.strNationalName END DESC,
				CASE WHEN @SortColumn = 'FarmAddress' AND @SortOrder = 'ASC' THEN (lh.AdminLevel1Name + ', ' + lh.AdminLevel2Name) END ASC,
				CASE WHEN @SortColumn = 'FarmAddress' AND @SortOrder = 'DESC' THEN (lh.AdminLevel1Name + ', ' + lh.AdminLevel2Name) END DESC,
				CASE WHEN @SortColumn = 'ClassificationTypeName' AND @SortOrder = 'ASC' THEN caseClassification.name END ASC,
				CASE WHEN @SortColumn = 'ClassificationTypeName' AND @SortOrder = 'DESC' THEN caseClassification.name END DESC,
				CASE WHEN @SortColumn = 'ReportStatusTypeName' AND @SortOrder = 'ASC' THEN reportStatus.name END ASC,
				CASE WHEN @SortColumn = 'ReportStatusTypeName' AND @SortOrder = 'DESC' THEN reportStatus.name END DESC,
				CASE WHEN @SortColumn = 'ReportTypeName' AND @SortOrder = 'ASC' THEN reportType.name END ASC,
				CASE WHEN @SortColumn = 'ReportTypeName' AND @SortOrder = 'DESC' THEN reportType.name END DESC
				OFFSET @PageSize * (@PageNumber - 1) ROWS FETCH NEXT @PageSize ROWS ONLY)
		SELECT res.ID AS ReportKey,
			CASE @OutbreakCaseReportOnly
			   WHEN 0 THEN v.strCaseID 
			   WHEN 1 THEN ocr.strOutbreakCaseID
			END AS ReportID
			,v.idfOutbreak AS OutbreakKey
			,o.strOutbreakID AS OutbreakID
			,v.idfsCaseType AS ReportCategoryTypeID
			,reportStatus.name AS ReportStatusTypeName
			,reportType.name AS ReportTypeName
			,caseType.name AS SpeciesTypeName
			,caseClassification.name AS ClassificationTypeName
			,v.datReportDate AS ReportDate
			,v.datInvestigationDate AS InvestigationDate
			,v.idfsFinalDiagnosis AS DiseaseID 
			,finalDiagnosis.name AS DiseaseName
			,v.datFinalDiagnosisDate AS FinalDiagnosisDate
			,ISNULL(personInvestigatedBy.strFamilyName, N'') + ISNULL(', ' + personInvestigatedBy.strFirstName, '') + ISNULL(' ' + personInvestigatedBy.strSecondName, '') AS InvestigatedByPersonName
			,ISNULL(personReportedBy.strFamilyName, N'') + ISNULL(', ' + personReportedBy.strFirstName, '') + ISNULL(' ' + personReportedBy.strSecondName, '') AS ReportedByPersonName
			,(
				CASE 
					WHEN v.idfsCaseType = 10012003
						THEN ISNULL(f.intLivestockSickAnimalQty, '0')
					ELSE ISNULL(f.intAvianSickAnimalQty, '0')
					END
				) AS TotalSickAnimalQuantity
			,(
				CASE 
					WHEN v.idfsCaseType = 10012003
						THEN ISNULL(f.intLivestockTotalAnimalQty, '0')
					ELSE ISNULL(f.intAvianTotalAnimalQty, '0')
					END
				) AS TotalAnimalQuantity
			,(
				CASE 
					WHEN v.idfsCaseType = 10012003
						THEN ISNULL(f.intLivestockDeadAnimalQty, '0')
					ELSE ISNULL(f.intAvianDeadAnimalQty, '0')
					END
				) AS TotalDeadAnimalQuantity
			,(
				CASE 
					WHEN @IncludeSpeciesListIndicator = 1
						THEN (
								SELECT STRING_AGG(speciesType.name, ', ') WITHIN
								GROUP (
										ORDER BY speciesType.name
										) AS Result
								FROM dbo.tlbSpecies s
								INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000086) speciesType ON speciesType.idfsReference = s.idfsSpeciesType
								INNER JOIN dbo.tlbHerd h ON h.idfHerd = s.idfHerd
									AND h.intRowStatus = 0
									AND h.idfFarm = v.idfFarm
								WHERE s.intRowStatus = 0
								)
					ELSE ''
					END
				) AS SpeciesList
			,f.strFarmCode AS FarmID
			,f.idfFarmActual AS FarmMasterKey
			,f.strNationalName AS FarmName
			,f.idfHuman AS FarmOwnerKey
			,haai.EIDSSPersonID AS FarmOwnerID
			,ISNULL(h.strLastName, N'') + ISNULL(', ' + h.strFirstName, '') + ISNULL(' ' + h.strSecondName, '') AS FarmOwnerName
			,(lh.AdminLevel1Name + ', ' + lh.AdminLevel2Name) AS FarmLocation
			,dbo.FN_GBL_CreateAddressString	(ISNULL(lh.AdminLevel4Name, N''), ISNULL(lh.AdminLevel3Name, N''), ISNULL(lh.AdminLevel2Name, N''), '', '', '', '', '', '', '',0,'') AS FarmAddress
			,v.datEnteredDate AS EnteredDate
			,ISNULL(personEnteredBy.strFamilyName, N'') + ISNULL(', ' + personEnteredBy.strFirstName, '') + ISNULL(' ' + personEnteredBy.strSecondName, '') AS EnteredByPersonName
			,v.idfsSite AS SiteKey
			,f.idfFarm,
               CASE
                   WHEN ReadPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN ReadPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN ReadPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN ReadPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, ReadPermissionIndicator)
               END AS ReadPermissionindicator,
               CASE
                   WHEN AccessToPersonalDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN AccessToPersonalDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN AccessToPersonalDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN AccessToPersonalDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, AccessToPersonalDataPermissionIndicator)
               END AS AccessToPersonalDataPermissionIndicator,
               CASE
                   WHEN AccessToGenderAndAgeDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN AccessToGenderAndAgeDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN AccessToGenderAndAgeDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN AccessToGenderAndAgeDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, AccessToGenderAndAgeDataPermissionIndicator)
               END AS AccessToGenderAndAgeDataPermissionIndicator,
               CASE
                   WHEN WritePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN WritePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN WritePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN WritePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, WritePermissionIndicator)
               END AS WritePermissionIndicator,
               CASE
                   WHEN DeletePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN DeletePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN DeletePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN DeletePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, DeletePermissionIndicator)
               END AS DeletePermissionIndicator
			,c AS TotalRowCount
			,(
				SELECT COUNT(*)
				FROM dbo.tlbVetCase v
				INNER JOIN dbo.tlbFarm f ON f.idfFarm = v.idfFarm
					AND f.intRowStatus = 0
				WHERE v.intRowStatus = 0
					AND (
						(v.idfsCaseType = @SpeciesTypeID)
						OR @SpeciesTypeID IS NULL
						)
				) AS TotalCount
			,TotalPages = (c / @PageSize) + IIF(c % @PageSize > 0, 1, 0)
			,CurrentPage = @PageNumber
		FROM paging 
			INNER JOIN @FinalResults res ON res.ID = paging.ID
			INNER JOIN dbo.tlbVetCase v ON v.idfVetCase = res.ID
			INNER JOIN dbo.tlbFarm f ON f.idfFarm = v.idfFarm
			LEFT JOIN dbo.tlbHuman h ON h.idfHuman = f.idfHuman
			LEFT JOIN dbo.HumanActualAddlInfo haai ON haai.HumanActualAddlInfoUID = h.idfHumanActual
			LEFT JOIN dbo.tlbPerson personInvestigatedBy ON personInvestigatedBy.idfPerson = v.idfPersonInvestigatedBy
			LEFT JOIN dbo.tlbPerson personEnteredBy ON personEnteredBy.idfPerson = v.idfPersonEnteredBy
			LEFT JOIN dbo.tlbPerson personReportedBy ON personReportedBy.idfPerson = v.idfPersonReportedBy
			LEFT JOIN dbo.tlbGeoLocation gl ON gl.idfGeoLocation = f.idfFarmAddress
			LEFT JOIN dbo.gisLocation g ON g.idfsLocation = gl.idfsLocation
			LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh ON lh.idfsLocation = g.idfsLocation
			LEFT JOIN dbo.tlbOutbreak o ON o.idfOutbreak = v.idfOutbreak
				AND o.intRowStatus = 0
			LEFT JOIN dbo.OutbreakCaseReport ocr ON ocr.idfOutbreak = v.idfOutbreak 
			   AND ocr.idfVetCase IS NOT NULL 	
			LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000019) finalDiagnosis ON finalDiagnosis.idfsReference = v.idfsFinalDiagnosis
			LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000011) caseClassification ON caseClassification.idfsReference = v.idfsCaseClassification
			LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000111) reportStatus ON reportStatus.idfsReference = v.idfsCaseProgressStatus
			LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000144) reportType ON reportType.idfsReference = v.idfsCaseReportType
			LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000012) caseType ON caseType.idfsReference = v.idfsCaseType
		 WHERE 
			(v.strCaseID IS NOT NULL AND @OutbreakCaseReportOnly = 0) OR
			(ocr.strOutbreakCaseID IS NOT NULL AND @OutbreakCaseReportOnly = 1)
		ORDER BY 
			CASE WHEN @SortColumn = 'ReportID' AND @SortOrder = 'ASC' THEN v.strCaseID END ASC,
			CASE WHEN @SortColumn = 'ReportID' AND @SortOrder = 'DESC' THEN v.strCaseID END DESC,
			CASE WHEN @SortColumn = 'EnteredDate' AND @SortOrder = 'ASC' THEN v.datEnteredDate END ASC,
			CASE WHEN @SortColumn = 'EnteredDate' AND @SortOrder = 'DESC' THEN v.datEnteredDate END DESC,
			CASE WHEN @SortColumn = 'DiseaseName' AND @SortOrder = 'ASC' THEN finalDiagnosis.name END ASC,
			CASE WHEN @SortColumn = 'DiseaseName' AND @SortOrder = 'DESC' THEN finalDiagnosis.name END DESC,
			CASE WHEN @SortColumn = 'FarmName' AND @SortOrder = 'ASC' THEN f.strNationalName END ASC,
			CASE WHEN @SortColumn = 'FarmName' AND @SortOrder = 'DESC' THEN f.strNationalName END DESC,
			CASE WHEN @SortColumn = 'FarmAddress' AND @SortOrder = 'ASC' THEN (lh.AdminLevel1Name + ', ' + lh.AdminLevel2Name) END ASC,
			CASE WHEN @SortColumn = 'FarmAddress' AND @SortOrder = 'DESC' THEN (lh.AdminLevel1Name + ', ' + lh.AdminLevel2Name) END DESC,
			CASE WHEN @SortColumn = 'ClassificationTypeName' AND @SortOrder = 'ASC' THEN caseClassification.name END ASC,
			CASE WHEN @SortColumn = 'ClassificationTypeName' AND @SortOrder = 'DESC' THEN caseClassification.name END DESC,
			CASE WHEN @SortColumn = 'ReportStatusTypeName' AND @SortOrder = 'ASC' THEN reportStatus.name END ASC,
			CASE WHEN @SortColumn = 'ReportStatusTypeName' AND @SortOrder = 'DESC' THEN reportStatus.name END DESC,
			CASE WHEN @SortColumn = 'ReportTypeName' AND @SortOrder = 'ASC' THEN reportType.name END ASC,
			CASE WHEN @SortColumn = 'ReportTypeName' AND @SortOrder = 'DESC' THEN reportType.name END DESC;
	END TRY

	BEGIN CATCH
		THROW;
	END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USSP_ADMIN_EVENT_SET]...';


GO
-- ================================================================================================
-- Name: USSP_ADMIN_EVENT_SET
--
-- Description:	Inserts or updates the event table for SAUC55 and SAUC56.
-- 
-- Field Notes:
--
-- Object - ID of record such as human disease report
-- LoginSite - ID of organization login site where initial event that raise notification was 
-- created.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     11/18/2022 Initial release with data audit logic for SAUC30 and 31.
-- Stephen Long     12/01/2022 Added EIDSS object ID; smart key that represents the parent object.
-- Stephen Long     01/16/2023 Changed site ID where criteria from the user table to the employee 
--                             table as user table's site ID was no longer getting updated.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USSP_ADMIN_EVENT_SET]
(
    @EventId BIGINT,
    @EventTypeId BIGINT,
    @UserId BIGINT,
    @ObjectId BIGINT = NULL,
    @DiseaseId BIGINT = NULL,
    @SiteId BIGINT = NULL,
    @InformationString NVARCHAR(MAX) = NULL,
    @LoginSiteId BIGINT = NULL,
    @LocationId BIGINT = NULL,
    @AuditUserName NVARCHAR(200), 
    @DataAuditEventID BIGINT = NULL, 
    @EIDSSObjectID NVARCHAR(200) = NULL 
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        DECLARE @ReturnCode INT = 0,
                @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
                @NeighboringSiteId BIGINT = NULL,
                @EventUserId BIGINT = NULL,
                @EventSiteId BIGINT = NULL, 
                @AuditUserID BIGINT = NULL,
                @AuditSiteID BIGINT = NULL,
                @ObjectTableID BIGINT = 76040000000; -- tstEvent
        DECLARE @EventUsers TABLE
        (
            UserId BIGINT NOT NULL,
            SiteId BIGINT NOT NULL
        );
        DECLARE @NeighboringSites TABLE
        (
            AccessRuleId BIGINT,
            SiteId BIGINT
        );
        DECLARE @SiteAccessRuleGrantee TABLE (AccessRuleId BIGINT);

        SET @AuditUserName = ISNULL(@AuditUserName, '');

        -- Data Audit
        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = userInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo;

        -- Get all users of the target site that have subscribed to the notification type.
        INSERT INTO @EventUsers
        SELECT u.idfUserID,
               e.idfsSite
        FROM dbo.tstUserTable u
            INNER JOIN dbo.EventSubscription es
                ON es.idfUserID = u.idfUserID
                   AND es.EventNameID = @EventTypeId
            INNER JOIN dbo.tlbEmployee e 
                ON e.idfEmployee = u.idfPerson
        WHERE e.idfsSite = @LoginSiteId
              AND u.intRowStatus = 0
              AND es.ReceiveAlertFlag = 1;

        -- Get all users of the target site's neighboring sites based on filtration rules.
        -- Logged in user site ID is a grantor, then get list of grantee sites.
        INSERT INTO @NeighboringSites
        SELECT ar.AccessRuleID,
               ara.ActorSiteID
        FROM dbo.AccessRule ar
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.AccessRuleID = ar.AccessRuleID
                   AND ara.intRowStatus = 0
        WHERE ar.intRowStatus = 0
              AND ar.BorderingAreaRuleIndicator = 1
              AND ar.GrantingActorSiteID = @LoginSiteId
              AND ara.ActorSiteID IS NOT NULL
              AND ara.ActorSiteID <> @LoginSiteId
        GROUP BY ara.ActorSiteID,
                 ar.AccessRuleID;

        -- Logged in user site ID access rules as a grantee.
        INSERT INTO @SiteAccessRuleGrantee
        SELECT ara.AccessRuleID
        FROM dbo.AccessRuleActor ara
            INNER JOIN dbo.AccessRule ar
                ON ar.AccessRuleID = ara.AccessRuleID
                   AND ar.intRowStatus = 0
        WHERE ara.ActorSiteID = @LoginSiteId
              AND ara.intRowStatus = 0
              AND ar.BorderingAreaRuleIndicator = 1;

        -- Select all grantee sites that the site is also a grantee of.
        INSERT INTO @NeighboringSites
        SELECT sg.AccessRuleID,
               ara.ActorSiteID
        FROM @SiteAccessRuleGrantee sg
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.AccessRuleID = sg.AccessRuleID
                   AND ara.intRowStatus = 0
        WHERE ara.ActorSiteID <> @LoginSiteId
              AND ara.ActorSiteID IS NOT NULL
        GROUP BY ara.ActorSiteID,
                 sg.AccessRuleID;

        WHILE EXISTS (SELECT * FROM @NeighboringSites)
        BEGIN
            SELECT TOP 1
                @NeighboringSiteId = SiteId
            FROM @NeighboringSites;

            -- Get all users of the neighboring site.
            INSERT INTO @EventUsers
            SELECT u.idfUserID,
                   e.idfsSite
            FROM dbo.tstUserTable u
                INNER JOIN dbo.EventSubscription es
                   ON es.idfUserID = u.idfUserID
                      AND es.EventNameID = @EventTypeId
                INNER JOIN dbo.tlbEmployee e 
                   ON e.idfEmployee = u.idfPerson
            WHERE e.idfsSite = @NeighboringSiteId
                  AND u.intRowStatus = 0
                  AND es.ReceiveAlertFlag = 1;

            DELETE FROM @NeighboringSites
            WHERE SiteID = @NeighboringSiteId;
        END

        WHILE EXISTS (SELECT * FROM @EventUsers)
        BEGIN
            SELECT TOP 1
                @EventUserId = UserId,
                @EventSiteId = SiteId
            FROM @EventUsers;

            EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tstEvent', @EventId OUTPUT;

            -- Change to the third party site alert/event type id.
            IF @EventSiteId <> @SiteId
            BEGIN
                SET @EventTypeId = CASE WHEN @EventTypeId = 10025503 THEN
                    10025504
                WHEN @EventTypeId = 10025501 THEN
                    10025502
                WHEN @EventTypeId = 10025505 THEN
                    10025506
                WHEN @EventTypeId = 10025507 THEN
                    10025508
                WHEN @EventTypeId = 10025509 THEN
                    10025512
                WHEN @EventTypeId = 10025510 THEN
                    10025511
                WHEN @EventTypeId = 10025037 THEN
                    10025038
                WHEN @EventTypeId = 10025041 THEN
                    10025042
                WHEN @EventTypeId = 10025043 THEN
                    10025044
                WHEN @EventTypeId = 10025045 THEN
                    10025046
                WHEN @EventTypeId = 10025047 THEN
                    10025048
                WHEN @EventTypeId = 10025077 THEN
                    10025078
                WHEN @EventTypeId = 10025079 THEN
                    10025080
                WHEN @EventTypeId = 10025081 THEN
                    10025082
                WHEN @EventTypeId = 10025099 THEN
                    10025100
                WHEN @EventTypeId = 10025097 THEN
                    10025098
                WHEN @EventTypeId = 10025129 THEN
                    10025130
                WHEN @EventTypeId = 10025101 THEN
                    10025102
                WHEN @EventTypeId = 10025103 THEN
                    10025104
                WHEN @EventTypeId = 10025105 THEN
                    10025106
                WHEN @EventTypeId = 10025107 THEN
                    10025108
                WHEN @EventTypeId = 10025085 THEN
                    10025086
                WHEN @EventTypeId = 10025087 THEN
                    10025088
                WHEN @EventTypeId = 10025089 THEN
                    10025090
                WHEN @EventTypeId = 10025091 THEN
                    10025092
                WHEN @EventTypeId = 10025093 THEN
                    10025094
                WHEN @EventTypeId = 10025095 THEN
                    10025096
                WHEN @EventTypeId = 10025067 THEN
                    10025068
                WHEN @EventTypeId = 10025071 THEN
                    10025072
                WHEN @EventTypeId = 10025073 THEN
                    10025074
                WHEN @EventTypeId = 10025075 THEN
                    10025076
                WHEN @EventTypeId = 10025513 THEN
                    10025514
                WHEN @EventTypeId = 10025517 THEN
                    10025518
                WHEN @EventTypeId = 10025519 THEN
                    10025520
                WHEN @EventTypeId = 10025525 THEN
                    10025526
                WHEN @EventTypeId = 10025049 THEN
                    10025050
                WHEN @EventTypeId = 10025051 THEN
                    10025052
                WHEN @EventTypeId = 10025053 THEN
                    10025054
                WHEN @EventTypeId = 10025055 THEN
                    10025056
                WHEN @EventTypeId = 10025057 THEN
                    10025058
                WHEN @EventTypeId = 10025059 THEN
                    10025060
                WHEN @EventTypeId = 10025061 THEN
                    10025062
                WHEN @EventTypeId = 10025065 THEN
                    10025066
                WHEN @EventTypeId = 10025069 THEN
                    10025070
                WHEN @EventTypeId = 10025527 THEN
                    10025528
                WHEN @EventTypeId = 10025529 THEN
                    10025530
                WHEN @EventTypeId = 10025537 THEN
                    10025538
                WHEN @EventTypeId = 10025539 THEN
                    10025540
                WHEN @EventTypeId = 10025563 THEN
                    10025564
                ELSE
                    @EventTypeId
                END
            END

            INSERT INTO dbo.tstEvent
            (
                idfEventID,
                idfsEventTypeID,
                idfObjectID,
                strInformationString,
                --strNote, 
                datEventDatatime,
                idfUserID,
                intProcessed,
                idfsSite,
                idfsDiagnosis,
                idfsLoginSite,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateDTM,
                AuditCreateUser,
                idfsLocation
            )
            VALUES
            (@EventId,
             @EventTypeId,
             @ObjectId,
             @InformationString,
             --@Note, 
             GETDATE(),
             @EventUserId,
             0  ,
             @EventSiteId,
             @DiseaseId,
             @LoginSiteId,
             10519001,
             '[{"idfEventID":' + CAST(@EventId AS NVARCHAR(300)) + '}]',
             GETDATE(),
             @AuditUserName,
             @LocationId
            );

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailCreate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser, 
                strObject
            )
            VALUES
            (@DataAuditEventID,
             @ObjectTableID,
             @EventId,
             10519001,
             '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
             + CAST(@ObjectTableID AS NVARCHAR(300)) + '}]',
             @AuditUserName, 
             @EIDSSObjectID
            );
            -- End data audit

            DELETE FROM @EventUsers
            WHERE UserId = @EventUserId
                  AND SiteId = @EventSiteId;
        END;
    END TRY
    BEGIN CATCH
        SET @ReturnCode = ERROR_NUMBER();
        SET @ReturnMessage = ERROR_MESSAGE();

        THROW;
    END CATCH;

    SELECT @ReturnCode ReturnCode,
           @ReturnMessage ReturnMessage;
END;
GO
PRINT N'Altering Procedure [Report].[USP_REP_HUM_MonthlyMorbidityMortality]...';


GO

-- This stored proc is to be used for the report:
--
--	Human Monthly Morbidity and Mortality
--
--  Mark Wilson updated for EIDSS7 standards
--  Srini Goli: renamed to maintain similarity object names.
--  Mark Wilson updated to sort diseases by intOrder 21July2020
--  Mark Wilson updated to update counts for labtested 12Jan2023

/*
--Example of a call of procedure:
EXEC report.USP_REP_HUM_MonthlyMorbidityMortality @LangID=N'en-US', @Year=2021,@Month=5,@IsDeceased=NULL --Morbidity
EXEC report.USP_REP_HUM_MonthlyMorbidityMortality @LangID=N'en', @Year=2017,@Month=2,@IsDeceased=1 --Mortality

*/

ALTER PROCEDURE [Report].[USP_REP_HUM_MonthlyMorbidityMortality]
(
	@LangID AS NVARCHAR(50), 
	@Year AS INT, 
	@Month AS INT = NULL,
	@IsDeceased	AS BIT = NULL,
	@UseArchiveData	AS BIT = 0 --if User selected Use Archive Data then 1
)
AS	

	DECLARE @FinalState AS BIGINT
	IF (@IsDeceased = 1) SET @FinalState = 10035001 /*fstDeceased*/

	DECLARE @StartDate AS DATETIME
	DECLARE @EndDate AS DATETIME

	IF @Month IS NULL
	BEGIN
		SET @StartDate = CAST(CAST(@Year AS VARCHAR(4)) + '0101' AS DATETIME)
		SET @EndDate = DATEADD(ms, -2, DATEADD(YEAR, 1, @StartDate))
	END
	ELSE
	BEGIN
		SET @StartDate = DATEADD(MONTH, @Month-1 , CAST(CAST(@Year AS VARCHAR(4)) + '0101' AS DATETIME))
		SET @EndDate = DATEADD(ms, -2, DATEADD(MONTH, 1, @StartDate))
	END

	SELECT		
		tDiagnosisList.idfsDiagnosis AS DiagnosisID,
		tDiagnosisList.strIDC10	 AS ICD10,
		tDiagnosisList.strDiseaseName AS Disease,
		Age0_1.intCount AS Age_1,
		Age1_4.intCount AS Age1_4,
		Age5_14.intCount AS Age5_14,
		Age15_19.intCount AS Age15_19,
		Age20_29.intCount AS Age20_29,
		Age30_54.intCount AS Age30_54,
		Age55_.intCount AS Age55_,
		fnTotal.intCount AS TotalCases,
		--tLabConfirmed.intCount AS TotalLabTested,
		tLabTested.intCount AS TotalLabTested,
		tTotalConfirmed.intCount AS TotalConfirmed
			
	FROM 
	(
		SELECT	
			tDiagnosis.idfsDiagnosis,
			tDiagnosis.strIDC10,
			rfDiagnosis.name AS strDiseaseName,
			rfDiagnosis.intOrder
			
		FROM dbo.trtDiagnosis AS tDiagnosis
		INNER JOIN report.FN_GBL_ReferenceRepair_GET(@LangID, 19000019/*'rftDiagnosis' */) AS rfDiagnosis ON rfDiagnosis.idfsReference = tDiagnosis.idfsDiagnosis
				   AND rfDiagnosis.intHACode & 2 > 0 AND idfsUsingType = 10020001 /*Human */
	) AS tDiagnosisList
	-- Get age statistics
	LEFT JOIN report.FN_REP_HumanCaseForAge_Get(@StartDate,@EndDate,0,1,@FinalState) AS Age0_1 ON tDiagnosisList.idfsDiagnosis = Age0_1.idfsDiagnosis
	LEFT JOIN report.FN_REP_HumanCaseForAge_Get(@StartDate,@EndDate,1,4,@FinalState) AS Age1_4 ON tDiagnosisList.idfsDiagnosis = Age1_4.idfsDiagnosis
	LEFT JOIN report.FN_REP_HumanCaseForAge_Get(@StartDate,@EndDate,5,14,@FinalState) AS Age5_14 ON tDiagnosisList.idfsDiagnosis = Age5_14.idfsDiagnosis
	LEFT JOIN report.FN_REP_HumanCaseForAge_Get(@StartDate,@EndDate,15,19,@FinalState)	AS Age15_19 ON tDiagnosisList.idfsDiagnosis = Age15_19.idfsDiagnosis
	LEFT JOIN report.FN_REP_HumanCaseForAge_Get(@StartDate,@EndDate,20,29,@FinalState)	AS Age20_29 ON tDiagnosisList.idfsDiagnosis = Age20_29.idfsDiagnosis
	LEFT JOIN report.FN_REP_HumanCaseForAge_Get(@StartDate,@EndDate,30,54,@FinalState)	AS Age30_54 ON tDiagnosisList.idfsDiagnosis = Age30_54.idfsDiagnosis
	LEFT JOIN report.FN_REP_HumanCaseForAge_Get(@StartDate,@EndDate,55,2147483647,@FinalState)	AS Age55_ ON tDiagnosisList.idfsDiagnosis = Age55_.idfsDiagnosis	
	LEFT JOIN report.FN_REP_HumanCaseForAge_Get(@StartDate,@EndDate,0,0,@FinalState) AS fnTotal ON tDiagnosisList.idfsDiagnosis = fnTotal.idfsDiagnosis	
	LEFT JOIN (			
				SELECT		
					tHumanCase.idfsFinalDiagnosis AS idfsDiagnosis,
					COUNT(tHumanCase.idfHumanCase) AS intCount
				FROM dbo.tlbHumanCase AS tHumanCase
				 INNER JOIN dbo.tlbHuman h LEFT OUTER JOIN dbo.tlbGeoLocation gl ON h.idfCurrentResidenceAddress = gl.idfGeoLocation AND gl.intRowStatus = 0 ON tHumanCase.idfHuman = h.idfHuman AND h.intRowStatus = 0 -- Added by MCW
				 LEFT JOIN dbo.tlbGeoLocation cgl ON tHumanCase.idfPointGeoLocation = cgl.idfGeoLocation AND cgl.intRowStatus = 0 -- added by MCW to ensure non-foreign address
				-- MCW changed to BETWEEN instead of >= and <
				WHERE COALESCE(tHumanCase.datTentativeDiagnosisDate, tHumanCase.datNotificationDate, tHumanCase.datEnteredDate) BETWEEN @StartDate AND @EndDate
				AND tHumanCase.intRowStatus = 0
				AND ISNULL(tHumanCase.idfsFinalCaseStatus, tHumanCase.idfsInitialCaseStatus) = 350000000 /* Confirmed*/
				AND (@FinalState IS NULL OR tHumanCase.idfsFinalState = @FinalState)	
				AND (ISNULL(cgl.idfsGeoLocationType, -1) <> 10036001 --Foreign Address
		                  OR cgl.idfsCountry IS NULL OR cgl.idfsCountry = 780000000)
				 AND (@IsDeceased IS NULL OR @IsDeceased = 0 OR
						(	
							@IsDeceased = 1 AND
							
							(	tHumanCase.idfsFinalState = 10035001 
								OR	(	
										tHumanCase.idfsOutcome = 10770000000 /*Died*/ * @IsDeceased
									)
							)
						)
					)
				GROUP BY tHumanCase.idfsFinalDiagnosis
			  ) AS tTotalConfirmed ON tDiagnosisList.idfsDiagnosis = tTotalConfirmed.idfsDiagnosis	
	--LEFT JOIN (			
	--			SELECT
	--				COALESCE(tHumanCase.idfsFinalDiagnosis, tHumanCase.idfsTentativeDiagnosis) AS idfsDiagnosis,
	--				COUNT(tHumanCase.idfHumanCase) AS intCount
	--			FROM dbo.tlbHumanCase AS tHumanCase
	--			WHERE COALESCE(tHumanCase.datTentativeDiagnosisDate, tHumanCase.datNotificationDate, tHumanCase.datEnteredDate) BETWEEN @StartDate AND @EndDate
	--			AND tHumanCase.intRowStatus = 0
	--			AND tHumanCase.blnLabDiagBasis = 1
	--			AND (@FinalState IS NULL OR tHumanCase.idfsFinalState = @FinalState)
	--			GROUP BY COALESCE(tHumanCase.idfsFinalDiagnosis, tHumanCase.idfsTentativeDiagnosis)
	--		  ) AS tLabConfirmed ON tDiagnosisList.idfsDiagnosis = tLabConfirmed.idfsDiagnosis				
	 LEFT JOIN	(SELECT	
					COALESCE(tHumanCase.idfsFinalDiagnosis, tHumanCase.idfsTentativeDiagnosis) AS idfsDiagnosis,
					COUNT(tHumanCase.idfHumanCase)	AS intCount
				 FROM dbo.tlbHumanCase AS tHumanCase
				 INNER JOIN tlbHuman h LEFT OUTER JOIN tlbGeoLocation gl ON h.idfCurrentResidenceAddress = gl.idfGeoLocation AND gl.intRowStatus = 0 ON tHumanCase.idfHuman = h.idfHuman AND h.intRowStatus = 0 -- Added by MCW
				 LEFT JOIN dbo.tlbGeoLocation cgl ON tHumanCase.idfPointGeoLocation = cgl.idfGeoLocation AND cgl.intRowStatus = 0 -- added by MCW to ensure non-foreign address
				
				 WHERE (DATEPART(MONTH,COALESCE(ISNULL(tHumanCase.datOnsetDate,tHumanCase.datFinalDiagnosisDate), 
                              ISNULL(tHumanCase.datFinalDiagnosisDate,tHumanCase.datTentativeDiagnosisDate),
                              ISNULL(tHumanCase.datTentativeDiagnosisDate,tHumanCase.datNotificationDate),
                              ISNULL(tHumanCase.datNotificationDate, tHumanCase.datEnteredDate))) = @Month OR @Month IS NULL)
				 AND DATEPART(YEAR, COALESCE(ISNULL(tHumanCase.datOnsetDate,tHumanCase.datFinalDiagnosisDate), 
                              ISNULL(tHumanCase.datFinalDiagnosisDate,tHumanCase.datTentativeDiagnosisDate),
                              ISNULL(tHumanCase.datTentativeDiagnosisDate,tHumanCase.datNotificationDate),
                              ISNULL(tHumanCase.datNotificationDate, tHumanCase.datEnteredDate))) = @Year
				 AND tHumanCase.intRowStatus = 0
				 AND ( ISNULL(cgl.idfsGeoLocationType, -1) <> 10036001 --Foreign Address
		              OR cgl.idfsCountry IS NULL OR cgl.idfsCountry = 780000000
		             )
				 AND tHumanCase.idfsYNTestsConducted = 10100001 -- Added by MCW to check that tests were conducted.
				 AND (@IsDeceased IS NULL OR @IsDeceased = 0 OR
						(	--TODO: comment if necessary - start
							@IsDeceased = 1 AND
							--TODO: comment if necessary - end
							(	tHumanCase.idfsFinalState = 10035001 /*Dead*/ --TODO: uncomment if necessary--* @IsDeceased + 10035002 /*Alive*/ * (1 - @IsDeceased)
								OR	(	-- TODO: uncomment if not necessary - start
										--(	tHumanCase.idfsFinalState is null 
										--	or tHumanCase.idfsFinalState <> 10035001 /*Dead*/ --TODO: uncomment if necessary--* @IsDeceased + 10035002 /*Alive*/ * (1 - @IsDeceased)
										--)
										-- and 
										-- TODO: uncomment if not necessary - end
										tHumanCase.idfsOutcome = 10770000000 /*Died*/ * @IsDeceased--TODO: uncomment if necessary-- + 10760000000 /*Recovered*/ * (1 - @IsDeceased)
									)
							)
						)
					)
				 AND COALESCE(tHumanCase.idfsFinalCaseStatus, tHumanCase.idfsInitialCaseStatus, 370000000) IN
					(	  350000000 /*Confirmed*/
						, 360000000 /*Probable*/
						, 380000000 /*Suspect*/
					)
				 GROUP BY COALESCE(tHumanCase.idfsFinalDiagnosis, tHumanCase.idfsTentativeDiagnosis)
				) AS tLabTested ON tDiagnosisList.idfsDiagnosis = tLabTested.idfsDiagnosis				
	  			
	 ORDER BY tDiagnosisList.strDiseaseName
	
	OPTION (RECOMPILE)
GO
PRINT N'Creating Procedure [dbo].[USP_VET_CASE_GETList]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- ================================================================================================
-- Name: USP_VET_DISEASE_REPORT_GETList
--
-- Description:	Get disease list for the farm edit/enter and other use cases.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     03/25/2018 Initial release.
-- Stephen Long     11/09/2018 Added FarmOwnerID and FarmOwnerName for lab use case 10.
-- Stephen Long     11/25/2018 Updated for the new API.
-- Stephen Long     12/31/2018 Added pagination logic.
-- Stephen Long     04/24/2019 Added advanced search parameters to sync up with use case VUC10.
-- Stephen Long     04/29/2019 Added related to veterinary disease report fields for use case VUC11 
--                             and VUC12.
-- Stephen Long     06/14/2019 Adjusted date from's and to's to be cast as just dates with no time.
-- Stephen Long     06/22/2019 Fix to the farm address logic (building, apartment, house IIF's 
--                             to case statements).
-- Stephen Long     06/25/2019 Add group by for joins with multiple records (such as samples).
-- Stephen Long     07/20/2019 Changed farm inventory counts to ISNULL.
-- Stephen Long     09/03/2019 Add active status check on species list.
-- Ann Xiong		12/05/2019 Added EIDSSPersonID to select list and replaced "ON 
--                             caseType.idfsReference = vc.idfsCaseReportType" with 
--                             "caseType.idfsReference = vc.idfsCaseType".
-- Ann Xiong		12/10/2019 Added a parameter @PersonID NVARCHAR(200) = NULL.
-- Ann Xiong		12/19/2019 Added EIDSSFarmID to select list
-- Stephen Long     01/22/2020 Added site list parameter for site filtration.
-- Stephen Long     01/28/2020 Added non-configurable filtration rules, and legacy report ID.
-- Stephen Long     02/03/2020 Added dbo prefix and changed non-configurable filtration comments.
-- Stephen Long     02/16/2020 Removed group by and pagination applied on final query.
-- Stephen Long     02/26/2020 Added data entry site ID parameter and where clause.
-- Stephen Long     03/04/2020 Corrected where clause on total count for null species type.
-- Stephen Long     03/17/2020 Corrected farm owner ID to use idfHuman instead of idfHumanActual.
-- Stephen Long     03/25/2020 Added if/else for first-level and second-level site types to bypass 
--                             non-configurable rules.
-- Stephen Long     05/18/2020 Added disease filtration rules from use case SAUC62.
-- Stephen Long     06/18/2020 Added where criteria to the query when no site filtration is 
--                             required.
-- Stephen Long     07/07/2020 Added trim to the EIDSS identifier like criteria.
-- Stephen Long     07/08/2020 Replaced common table experssion; was not working well with POCO.
-- Stephen Long     09/24/2020 Update address fields returned (settlement, rayon and region only).
-- Stephen Long     11/18/2020 Added site ID to the query.
-- Stephen Long     11/23/2020 Added configurable site filtration rules.
-- Stephen Long     11/25/2020 Modified for new permission fields on the AccessRule table.
-- Stephen Long     11/28/2020 Add index to table variable primary key.
-- Stephen Long     12/02/2020 Remove primary key from table variable IDs.
-- Stephen Long     12/13/2020 Added apply configurable filtration indicator parameter.
-- Stephen Long     12/23/2020 Added EIDSS session ID parameter and where clause criteria.
-- Stephen Long     12/24/2020 Modified join on disease filtration default role rule.
-- Stephen Long     12/29/2020 Changed function call on reference data for inactive records.
-- Stephen Long     01/04/2021 Added option recompile due to number of optional parameters for 
--                             better execution plan.
-- Stephen Long     01/05/2021 Removed species list sub-query due to performance.  New stored 
--                             procedure added to get species list when user expands disease 
--                             report row in search.
-- Stephen Long     01/06/2021 Added string aggregate function on species list and parameter to 
--                             include.
-- Stephen Long     01/25/2021 Added order by parameter to handle when a user selected a specific 
--                             column to sort by.
-- Stephen Long     01/27/2021 Fix for order by; alias will not work on order by with case.
-- Stephen Long     04/02/2021 Added updated pagination and location hierarchy.
-- Stephen Long     01/11/2022 Added farm owner (idfHuman) ID to the query and updated location 
--                             hierarchy.
-- Mike Kornegay	01/26/2022 Changed RecordCount to TotalRowCount to match BaseModel.
-- Stephen Long     03/29/2022 Added disease ID to the model for laboratory module, and corrected 
--                             site filtration.
-- Ann Xiong		04/25/2022 Added f.idfFarm to select list for Veterinary Disease Report 
--                             Deduplication.
-- Stephen Long     05/10/2022 Added report category type ID to the query.
-- Stephen Long     06/03/2022 Updated to point default access rules to base reference.
-- Mike Kornegay	08/28/2022 Changed FarmAddress to FarmLocation and added FarmLocation.
-- Mike Kornegay    08/31/2022 Corrected sort by adding order by to final query.
-- Stephen Long     09/22/2022 Add check for "0" page size.  If "0", then set to 1.
-- Doug Albanese	01/10/2023 Added field from OutbreakCaseReport strOutbreakCaseID to show correct ID in Farm listing for Cases.
-- 
-- ================================================================================================
CREATE PROCEDURE [dbo].[USP_VET_CASE_GETList] (
	@LanguageID NVARCHAR(50)
	,@ReportKey BIGINT = NULL
	,@ReportID NVARCHAR(200) = NULL
	,@LegacyReportID NVARCHAR(200) = NULL
	,@SessionKey BIGINT = NULL
	,@FarmMasterID BIGINT = NULL
	,@DiseaseID BIGINT = NULL
	,@ReportStatusTypeID BIGINT = NULL
	,@AdministrativeLevelID BIGINT = NULL
	,@DateEnteredFrom DATE = NULL
	,@DateEnteredTo DATE = NULL
	,@ClassificationTypeID BIGINT = NULL
	,@PersonID NVARCHAR(200) = NULL
	,@ReportTypeID BIGINT = NULL
	,@SpeciesTypeID BIGINT = NULL
	,@OutbreakCasesIndicator BIT = 0
	,@DiagnosisDateFrom DATE = NULL
	,@DiagnosisDateTo DATE = NULL
	,@InvestigationDateFrom DATE = NULL
	,@InvestigationDateTo DATE = NULL
	,@LocalOrFieldSampleID NVARCHAR(200) = NULL
	,@TotalAnimalQuantityFrom INT = NULL
	,@TotalAnimalQuantityTo INT = NULL
	,@SessionID NVARCHAR(200) = NULL
	,@DataEntrySiteID BIGINT = NULL
	,@UserSiteID BIGINT
	,@UserOrganizationID BIGINT
	,@UserEmployeeID BIGINT
	,@ApplySiteFiltrationIndicator BIT = 0
	,@IncludeSpeciesListIndicator BIT = 0
	,@SortColumn NVARCHAR(30) = 'ReportID'
	,@SortOrder NVARCHAR(4) = 'DESC'
	,@PageNumber INT = 1
	,@PageSize INT = 10
	)
AS
BEGIN
	SET NOCOUNT ON;

	     
	DECLARE @firstRec INT;
    DECLARE @lastRec INT;

    SET @firstRec = (@PageNumber - 1) * @PageSize;
    SET @lastRec = (@PageNumber * @PageSize + 1);

	DECLARE @AdministrativeLevelNode AS HIERARCHYID;
	DECLARE @Results TABLE (
		ID BIGINT NOT NULL
		,ReadPermissionIndicator BIT NOT NULL
		,AccessToPersonalDataPermissionIndicator BIT NOT NULL
		,AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL
		,WritePermissionIndicator BIT NOT NULL
		,DeletePermissionIndicator BIT NOT NULL
		,INDEX IDX_ID(ID)
		);

	BEGIN TRY
	    IF @PageSize = 0
        BEGIN
            SET @PageSize = 1;
        END

		IF @AdministrativeLevelID IS NOT NULL
		BEGIN
			SELECT @AdministrativeLevelNode = node
			FROM dbo.gisLocation
			WHERE idfsLocation = @AdministrativeLevelID;
		END;

		-- ========================================================================================
		-- NO SITE FILTRATION RULES APPLIED
		--
		-- For first and second level sites, do not apply any site filtration rules.
		-- ========================================================================================
		IF @ApplySiteFiltrationIndicator = 0
		BEGIN
			INSERT INTO @Results
			SELECT v.idfVetCase
				,1
				,1
				,1
				,1
				,1
			FROM dbo.tlbVetCase v
			INNER JOIN dbo.tlbFarm f ON f.idfFarm = v.idfFarm
			LEFT JOIN dbo.tlbHuman h ON h.idfHuman = f.idfHuman
			LEFT JOIN dbo.HumanActualAddlInfo haai ON haai.HumanActualAddlInfoUID = h.idfHumanActual
			LEFT JOIN dbo.tlbGeoLocation gl ON gl.idfGeoLocation = f.idfFarmAddress
			LEFT JOIN dbo.gisLocation g ON g.idfsLocation = gl.idfsLocation
			LEFT JOIN dbo.tlbMaterial m ON m.idfVetCase = v.idfVetCase
			LEFT JOIN dbo.tlbMonitoringSession ms ON ms.idfMonitoringSession = v.idfParentMonitoringSession
			WHERE v.intRowStatus = 0
				AND (
					f.idfFarmActual = @FarmMasterID
					OR @FarmMasterID IS NULL
					)
				AND (
					v.idfVetCase = @ReportKey
					OR @ReportKey IS NULL
					)
				AND (
					v.idfParentMonitoringSession = @SessionKey
					OR @SessionKey IS NULL
					)
				AND (
					g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
					OR @AdministrativeLevelID IS NULL
					)
				AND (
					v.idfsFinalDiagnosis = @DiseaseID
					OR @DiseaseID IS NULL
					)
				AND (
					v.idfsCaseClassification = @ClassificationTypeID
					OR @ClassificationTypeID IS NULL
					)
				AND (
					v.idfsCaseProgressStatus = @ReportStatusTypeID
					OR @ReportStatusTypeID IS NULL
					)
				AND (
					(
						CAST(v.datEnteredDate AS DATE) BETWEEN @DateEnteredFrom
							AND @DateEnteredTo
						)
					OR (
						@DateEnteredFrom IS NULL
						OR @DateEnteredTo IS NULL
						)
					)
				AND (
					v.idfsCaseReportType = @ReportTypeID
					OR @ReportTypeID IS NULL
					)
				AND (
					v.idfsCaseType = @SpeciesTypeID
					OR @SpeciesTypeID IS NULL
					)
				AND (
					(
						CAST(v.datFinalDiagnosisDate AS DATE) BETWEEN @DiagnosisDateFrom
							AND @DiagnosisDateTo
						)
					OR (
						@DiagnosisDateFrom IS NULL
						OR @DiagnosisDateTo IS NULL
						)
					)
				AND (
					(
						CAST(v.datInvestigationDate AS DATE) BETWEEN @InvestigationDateFrom
							AND @InvestigationDateTo
						)
					OR (
						@InvestigationDateFrom IS NULL
						OR @InvestigationDateTo IS NULL
						)
					)
				AND (
					(
						(
							f.intAvianTotalAnimalQty BETWEEN @TotalAnimalQuantityFrom
								AND @TotalAnimalQuantityTo
							)
						OR (
							f.intLivestockTotalAnimalQty BETWEEN @TotalAnimalQuantityFrom
								AND @TotalAnimalQuantityTo
							)
						)
					OR (
						@TotalAnimalQuantityFrom IS NULL
						OR @TotalAnimalQuantityTo IS NULL
						)
					)
				AND (
					(
						v.idfOutbreak IS NULL
						AND @OutbreakCasesIndicator = 0
						)
					OR (
						v.idfOutbreak IS NOT NULL
						AND @OutbreakCasesIndicator = 1
						)
					OR (@OutbreakCasesIndicator IS NULL)
					)
				AND (
					v.idfsSite = @DataEntrySiteID
					OR @DataEntrySiteID IS NULL
					)
				AND (
					v.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
					OR @ReportID IS NULL
					)
				AND (
					v.LegacyCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
					OR @LegacyReportID IS NULL
					)
				AND (
					haai.EIDSSPersonID LIKE '%' + TRIM(@PersonID) + '%'
					OR @PersonID IS NULL
					)
				AND (
					m.strFieldBarcode LIKE '%' + TRIM(@LocalOrFieldSampleID) + '%'
					OR @LocalOrFieldSampleID IS NULL
					)
				AND (
					ms.strMonitoringSessionID LIKE '%' + TRIM(@SessionID) + '%'
					OR @SessionID IS NULL
					)
			GROUP BY v.idfVetCase;
		END
		ELSE
		BEGIN
		INSERT INTO @Results
			SELECT v.idfVetCase
				,1
				,1
				,1
				,1
				,1
			FROM dbo.tlbVetCase v
			INNER JOIN dbo.tlbFarm f ON f.idfFarm = v.idfFarm
			LEFT JOIN dbo.tlbHuman h ON h.idfHuman = f.idfHuman
			LEFT JOIN dbo.HumanActualAddlInfo haai ON haai.HumanActualAddlInfoUID = h.idfHumanActual
			LEFT JOIN dbo.tlbGeoLocation gl ON gl.idfGeoLocation = f.idfFarmAddress
			LEFT JOIN dbo.gisLocation g ON g.idfsLocation = gl.idfsLocation
			LEFT JOIN dbo.tlbMaterial m ON m.idfVetCase = v.idfVetCase
			LEFT JOIN dbo.tlbMonitoringSession ms ON ms.idfMonitoringSession = v.idfParentMonitoringSession
			WHERE v.intRowStatus = 0
				AND v.idfsSite = @UserSiteID 
				AND (
					f.idfFarmActual = @FarmMasterID
					OR @FarmMasterID IS NULL
					)
				AND (
					v.idfVetCase = @ReportKey
					OR @ReportKey IS NULL
					)
				AND (
					v.idfParentMonitoringSession = @SessionKey
					OR @SessionKey IS NULL
					)
				AND (
					g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
					OR @AdministrativeLevelID IS NULL
					)
				AND (
					v.idfsFinalDiagnosis = @DiseaseID
					OR @DiseaseID IS NULL
					)
				AND (
					v.idfsCaseClassification = @ClassificationTypeID
					OR @ClassificationTypeID IS NULL
					)
				AND (
					v.idfsCaseProgressStatus = @ReportStatusTypeID
					OR @ReportStatusTypeID IS NULL
					)
				AND (
					(
						CAST(v.datEnteredDate AS DATE) BETWEEN @DateEnteredFrom
							AND @DateEnteredTo
						)
					OR (
						@DateEnteredFrom IS NULL
						OR @DateEnteredTo IS NULL
						)
					)
				AND (
					v.idfsCaseReportType = @ReportTypeID
					OR @ReportTypeID IS NULL
					)
				AND (
					v.idfsCaseType = @SpeciesTypeID
					OR @SpeciesTypeID IS NULL
					)
				AND (
					(
						CAST(v.datFinalDiagnosisDate AS DATE) BETWEEN @DiagnosisDateFrom
							AND @DiagnosisDateTo
						)
					OR (
						@DiagnosisDateFrom IS NULL
						OR @DiagnosisDateTo IS NULL
						)
					)
				AND (
					(
						CAST(v.datInvestigationDate AS DATE) BETWEEN @InvestigationDateFrom
							AND @InvestigationDateTo
						)
					OR (
						@InvestigationDateFrom IS NULL
						OR @InvestigationDateTo IS NULL
						)
					)
				AND (
					(
						(
							f.intAvianTotalAnimalQty BETWEEN @TotalAnimalQuantityFrom
								AND @TotalAnimalQuantityTo
							)
						OR (
							f.intLivestockTotalAnimalQty BETWEEN @TotalAnimalQuantityFrom
								AND @TotalAnimalQuantityTo
							)
						)
					OR (
						@TotalAnimalQuantityFrom IS NULL
						OR @TotalAnimalQuantityTo IS NULL
						)
					)
				AND (
					(
						v.idfOutbreak IS NULL
						AND @OutbreakCasesIndicator = 0
						)
					OR (
						v.idfOutbreak IS NOT NULL
						AND @OutbreakCasesIndicator = 1
						)
					OR (@OutbreakCasesIndicator IS NULL)
					)
				AND (
					v.idfsSite = @DataEntrySiteID
					OR @DataEntrySiteID IS NULL
					)
				AND (
					v.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
					OR @ReportID IS NULL
					)
				AND (
					v.LegacyCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
					OR @LegacyReportID IS NULL
					)
				AND (
					haai.EIDSSPersonID LIKE '%' + TRIM(@PersonID) + '%'
					OR @PersonID IS NULL
					)
				AND (
					m.strFieldBarcode LIKE '%' + TRIM(@LocalOrFieldSampleID) + '%'
					OR @LocalOrFieldSampleID IS NULL
					)
				AND (
					ms.strMonitoringSessionID LIKE '%' + TRIM(@SessionID) + '%'
					OR @SessionID IS NULL
					)
			GROUP BY v.idfVetCase;

			DECLARE @FilteredResults TABLE (
				ID BIGINT NOT NULL
				,ReadPermissionIndicator BIT NOT NULL
				,AccessToPersonalDataPermissionIndicator BIT NOT NULL
				,AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL
				,WritePermissionIndicator BIT NOT NULL
				,DeletePermissionIndicator BIT NOT NULL
				,INDEX IDX_ID(ID)
				);
			DECLARE @FinalResults TABLE
			(
				ID BIGINT NOT NULL,
		        ReadPermissionIndicator BIT NOT NULL,
				AccessToPersonalDataPermissionIndicator BIT NOT NULL,
				AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
				WritePermissionIndicator BIT NOT NULL,
				DeletePermissionIndicator BIT NOT NULL
			);

			-- =======================================================================================
			-- DEFAULT SITE FILTRATION RULES
			--
			-- Apply active default site filtration rules for third level sites.
			-- =======================================================================================
			DECLARE @RuleActiveStatus INT = 0;
			DECLARE @AdministrativeLevelTypeID INT;
			DECLARE @OrganizationAdministrativeLevelNode HIERARCHYID;
			DECLARE @DefaultAccessRules AS TABLE (
				AccessRuleID BIGINT NOT NULL,
				ActiveIndicator INT NOT NULL
				,ReadPermissionIndicator BIT NOT NULL
				,AccessToPersonalDataPermissionIndicator BIT NOT NULL
				,AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL
				,WritePermissionIndicator BIT NOT NULL
				,DeletePermissionIndicator BIT NOT NULL
				,AdministrativeLevelTypeID INT NULL
				);

			INSERT INTO @DefaultAccessRules
			SELECT AccessRuleID
			    ,a.intRowStatus
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
				,a.AdministrativeLevelTypeID
			FROM dbo.AccessRule a
			WHERE DefaultRuleIndicator = 1;

			--
			-- Report data shall be available to all sites of the same administrative level 
			-- specified in the rule.
			--
            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
			WHERE AccessRuleID = 10537009;

			IF @RuleActiveStatus = 0
			BEGIN
				SELECT @AdministrativeLevelTypeID = AdministrativeLevelTypeID
				FROM @DefaultAccessRules
				WHERE AccessRuleID = 10537009;

				SELECT @OrganizationAdministrativeLevelNode = g.node.GetAncestor(g.node.GetLevel() - @AdministrativeLevelTypeID)
				FROM dbo.tlbOffice o
				INNER JOIN dbo.tlbGeoLocationShared l ON l.idfGeoLocationShared = o.idfLocation
				INNER JOIN dbo.gisLocation g ON g.idfsLocation = l.idfsLocation
				WHERE o.idfOffice = @UserOrganizationID
					AND g.node.GetLevel() >= @AdministrativeLevelTypeID;

				-- Administrative level specified in the rule of the site where the report was created.
				INSERT INTO @FilteredResults
				SELECT v.idfVetCase
					,a.ReadPermissionIndicator
					,a.AccessToPersonalDataPermissionIndicator
					,a.AccessToGenderAndAgeDataPermissionIndicator
					,a.WritePermissionIndicator
					,a.DeletePermissionIndicator
				FROM dbo.tlbVetCase v
				INNER JOIN dbo.tstSite s ON v.idfsSite = s.idfsSite
				INNER JOIN dbo.tlbOffice o ON o.idfOffice = s.idfOffice
				INNER JOIN dbo.tlbGeoLocationShared l ON l.idfGeoLocationShared = o.idfLocation
				INNER JOIN dbo.gisLocation g ON g.idfsLocation = l.idfsLocation
				INNER JOIN @DefaultAccessRules a ON a.AccessRuleID = 10537009
				WHERE v.intRowStatus = 0
					AND (
						v.idfsCaseType = @SpeciesTypeID
						OR @SpeciesTypeID IS NULL
						)
					AND (
						(
							CAST(v.datEnteredDate AS DATE) BETWEEN @DateEnteredFrom
								AND @DateEnteredTo
							)
						OR (
							@DateEnteredFrom IS NULL
							OR @DateEnteredTo IS NULL
							)
						)
					AND g.node.IsDescendantOf(@OrganizationAdministrativeLevelNode) = 1;

				-- Administrative level specified in the rule of the farm address.
				INSERT INTO @FilteredResults
				SELECT v.idfVetCase
					,a.ReadPermissionIndicator
					,a.AccessToPersonalDataPermissionIndicator
					,a.AccessToGenderAndAgeDataPermissionIndicator
					,a.WritePermissionIndicator
					,a.DeletePermissionIndicator
				FROM dbo.tlbVetCase v
				INNER JOIN dbo.tlbFarm f ON f.idfFarm = v.idfFarm
				INNER JOIN dbo.tlbGeoLocation l ON l.idfGeoLocation = f.idfFarmAddress
				INNER JOIN dbo.gisLocation g ON g.idfsLocation = l.idfsLocation
				INNER JOIN @DefaultAccessRules a ON a.AccessRuleID = 10537009
				WHERE v.intRowStatus = 0
					AND (
						v.idfsCaseType = @SpeciesTypeID
						OR @SpeciesTypeID IS NULL
						)
					AND (
						(
							CAST(v.datEnteredDate AS DATE) BETWEEN @DateEnteredFrom
								AND @DateEnteredTo
							)
						OR (
							@DateEnteredFrom IS NULL
							OR @DateEnteredTo IS NULL
							)
						)
					AND g.node.IsDescendantOf(@OrganizationAdministrativeLevelNode) = 1;
			END;

			--
			-- Report data shall be available to all sites' organizations connected to the particular report.
			--
            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
			WHERE AccessRuleID = 10537010;

			IF @RuleActiveStatus = 0
			BEGIN
				-- Investigated and reported by organizations
				INSERT INTO @FilteredResults
				SELECT v.idfVetCase
					,a.ReadPermissionIndicator
					,a.AccessToPersonalDataPermissionIndicator
					,a.AccessToGenderAndAgeDataPermissionIndicator
					,a.WritePermissionIndicator
					,a.DeletePermissionIndicator
				FROM dbo.tlbVetCase v
				INNER JOIN @DefaultAccessRules a ON a.AccessRuleID = 10537010
				WHERE (v.intRowStatus = 0)
					AND (
						v.idfInvestigatedByOffice = @UserOrganizationID
						OR v.idfReportedByOffice = @UserOrganizationID
						);

				-- Sample collected by and sent to organizations
				INSERT INTO @FilteredResults
				SELECT MAX(m.idfVetCase)
					,a.ReadPermissionIndicator
					,a.AccessToPersonalDataPermissionIndicator
					,a.AccessToGenderAndAgeDataPermissionIndicator
					,a.WritePermissionIndicator
					,a.DeletePermissionIndicator
				FROM dbo.tlbMaterial m
				INNER JOIN dbo.tlbVetCase v ON v.idfVetCase = m.idfVetCase
					AND v.intRowStatus = 0
				INNER JOIN @DefaultAccessRules a ON a.AccessRuleID = 10537010
				WHERE m.intRowStatus = 0
					AND (
						m.idfFieldCollectedByOffice = @UserOrganizationID
						OR m.idfSendToOffice = @UserOrganizationID
						)
				GROUP BY m.idfVetCase
					,a.ReadPermissionIndicator
					,a.AccessToPersonalDataPermissionIndicator
					,a.AccessToGenderAndAgeDataPermissionIndicator
					,a.WritePermissionIndicator
					,a.DeletePermissionIndicator;

				-- Sample transferred to organizations
				INSERT INTO @FilteredResults
				SELECT MAX(m.idfVetCase)
					,a.ReadPermissionIndicator
					,a.AccessToPersonalDataPermissionIndicator
					,a.AccessToGenderAndAgeDataPermissionIndicator
					,a.WritePermissionIndicator
					,a.DeletePermissionIndicator
				FROM dbo.tlbMaterial m
				INNER JOIN dbo.tlbVetCase v ON v.idfVetCase = m.idfVetCase
					AND v.intRowStatus = 0
				INNER JOIN dbo.tlbTransferOutMaterial tom ON m.idfMaterial = tom.idfMaterial
					AND tom.intRowStatus = 0
				INNER JOIN dbo.tlbTransferOUT t ON tom.idfTransferOut = t.idfTransferOut
					AND t.intRowStatus = 0
				INNER JOIN @DefaultAccessRules a ON a.AccessRuleID = 10537010
				WHERE m.intRowStatus = 0
					AND t.idfSendToOffice = @UserOrganizationID
				GROUP BY m.idfVetCase
					,a.ReadPermissionIndicator
					,a.AccessToPersonalDataPermissionIndicator
					,a.AccessToGenderAndAgeDataPermissionIndicator
					,a.WritePermissionIndicator
					,a.DeletePermissionIndicator;
			END;

			--
			-- Report data shall be available to the sites with the connected outbreak, if the report 
			-- is the primary report/session for an outbreak.
			--
            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
			WHERE AccessRuleID = 10537011;

			IF @RuleActiveStatus = 0
			BEGIN
				INSERT INTO @FilteredResults
				SELECT v.idfVetCase
					,a.ReadPermissionIndicator
					,a.AccessToPersonalDataPermissionIndicator
					,a.AccessToGenderAndAgeDataPermissionIndicator
					,a.WritePermissionIndicator
					,a.DeletePermissionIndicator
				FROM dbo.tlbVetCase v
				INNER JOIN dbo.tlbOutbreak o ON v.idfVetCase = o.idfPrimaryCaseOrSession
					AND o.intRowStatus = 0
				INNER JOIN @DefaultAccessRules a ON a.AccessRuleID = 10537011
				WHERE v.intRowStatus = 0
					AND o.idfsSite = @UserSiteID
			END;

			-- =======================================================================================
			-- CONFIGURABLE SITE FILTRATION RULES
			-- 
			-- Apply configurable site filtration rules for use case SAUC34. Some of these rules may 
			-- overlap the default rules.
			-- =======================================================================================
			--
			-- Apply at the user's site group level, granted by a site group.
			--
			INSERT INTO @FilteredResults
			SELECT v.idfVetCase
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbVetCase v
			INNER JOIN dbo.tflSiteToSiteGroup grantingSGS ON grantingSGS.idfsSite = v.idfsSite
			INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup ON userSiteGroup.idfsSite = @UserSiteID
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE v.intRowStatus = 0
				AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

			--
			-- Apply at the user's site level, granted by a site group.
			--
			INSERT INTO @FilteredResults
			SELECT v.idfVetCase
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbVetCase v
			INNER JOIN dbo.tflSiteToSiteGroup grantingSGS ON grantingSGS.idfsSite = v.idfsSite
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorSiteID = @UserSiteID
				AND ara.ActorEmployeeGroupID IS NULL
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE v.intRowStatus = 0
				AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

			-- 
			-- Apply at the user's employee group level, granted by a site group.
			--
			INSERT INTO @FilteredResults
			SELECT v.idfVetCase
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbVetCase v
			INNER JOIN dbo.tflSiteToSiteGroup grantingSGS ON grantingSGS.idfsSite = v.idfsSite
			INNER JOIN dbo.tlbEmployeeGroupMember egm ON egm.idfEmployee = @UserEmployeeID
				AND egm.intRowStatus = 0
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE v.intRowStatus = 0
				AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

			-- 
			-- Apply at the user's ID level, granted by a site group.
			--
			INSERT INTO @FilteredResults
			SELECT v.idfVetCase
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbVetCase v
			INNER JOIN dbo.tflSiteToSiteGroup grantingSGS ON grantingSGS.idfsSite = v.idfsSite
			INNER JOIN dbo.tstUserTable u ON u.idfPerson = @UserEmployeeID
				AND u.intRowStatus = 0
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorUserID = u.idfUserID
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE v.intRowStatus = 0
				AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

			--
			-- Apply at the user's site group level, granted by a site.
			--
			INSERT INTO @FilteredResults
			SELECT v.idfVetCase
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbVetCase v
			INNER JOIN dbo.tflSiteToSiteGroup sgs ON sgs.idfsSite = @UserSiteID
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorSiteGroupID = sgs.idfSiteGroup
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE v.intRowStatus = 0
				AND sgs.idfsSite = v.idfsSite;

			-- 
			-- Apply at the user's site level, granted by a site.
			--
			INSERT INTO @FilteredResults
			SELECT v.idfVetCase
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbVetCase v
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorSiteID = @UserSiteID
				AND ara.ActorEmployeeGroupID IS NULL
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE v.intRowStatus = 0
				AND a.GrantingActorSiteID = v.idfsSite;

			-- 
			-- Apply at the user's employee group level, granted by a site.
			--
			INSERT INTO @FilteredResults
			SELECT v.idfVetCase
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbVetCase v
			INNER JOIN dbo.tlbEmployeeGroupMember egm ON egm.idfEmployee = @UserEmployeeID
				AND egm.intRowStatus = 0
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE v.intRowStatus = 0
				AND a.GrantingActorSiteID = v.idfsSite;

			-- 
			-- Apply at the user's ID level, granted by a site.
			--
			INSERT INTO @FilteredResults
			SELECT v.idfVetCase
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbVetCase v
			INNER JOIN dbo.tstUserTable u ON u.idfPerson = @UserEmployeeID
				AND u.intRowStatus = 0
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorUserID = u.idfUserID
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE v.intRowStatus = 0
				AND a.GrantingActorSiteID = v.idfsSite;

			-- Copy filtered results to results and use search criteria
			INSERT INTO @Results
			SELECT ID
				,ReadPermissionIndicator
				,AccessToPersonalDataPermissionIndicator
				,AccessToGenderAndAgeDataPermissionIndicator
				,WritePermissionIndicator
				,DeletePermissionIndicator
			FROM @FilteredResults
			INNER JOIN dbo.tlbVetCase v ON v.idfVetCase = ID
			INNER JOIN dbo.tlbFarm f ON f.idfFarm = v.idfFarm
			LEFT JOIN dbo.tlbHuman h ON h.idfHuman = f.idfHuman
			LEFT JOIN dbo.HumanActualAddlInfo haai ON haai.HumanActualAddlInfoUID = h.idfHumanActual
			LEFT JOIN dbo.tlbGeoLocation gl ON gl.idfGeoLocation = f.idfFarmAddress
			LEFT JOIN dbo.gisLocation g ON g.idfsLocation = gl.idfsLocation
			LEFT JOIN dbo.tlbMaterial m ON m.idfVetCase = v.idfVetCase
			LEFT JOIN dbo.tlbMonitoringSession ms ON ms.idfMonitoringSession = v.idfParentMonitoringSession
			WHERE v.intRowStatus = 0
				AND (
					f.idfFarmActual = @FarmMasterID
					OR @FarmMasterID IS NULL
					)
				AND (
					v.idfVetCase = @ReportKey
					OR @ReportKey IS NULL
					)
				AND (
					v.idfParentMonitoringSession = @SessionKey
					OR @SessionKey IS NULL
					)
				AND (
					g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
					OR @AdministrativeLevelID IS NULL
					)
				AND (
					v.idfsFinalDiagnosis = @DiseaseID
					OR @DiseaseID IS NULL
					)
				AND (
					v.idfsCaseClassification = @ClassificationTypeID
					OR @ClassificationTypeID IS NULL
					)
				AND (
					v.idfsCaseProgressStatus = @ReportStatusTypeID
					OR @ReportStatusTypeID IS NULL
					)
				AND (
					(
						CAST(v.datEnteredDate AS DATE) BETWEEN @DateEnteredFrom
							AND @DateEnteredTo
						)
					OR (
						@DateEnteredFrom IS NULL
						OR @DateEnteredTo IS NULL
						)
					)
				AND (
					v.idfsCaseReportType = @ReportTypeID
					OR @ReportTypeID IS NULL
					)
				AND (
					v.idfsCaseType = @SpeciesTypeID
					OR @SpeciesTypeID IS NULL
					)
				AND (
					(
						CAST(v.datFinalDiagnosisDate AS DATE) BETWEEN @DiagnosisDateFrom
							AND @DiagnosisDateTo
						)
					OR (
						@DiagnosisDateFrom IS NULL
						OR @DiagnosisDateTo IS NULL
						)
					)
				AND (
					(
						CAST(v.datInvestigationDate AS DATE) BETWEEN @InvestigationDateFrom
							AND @InvestigationDateTo
						)
					OR (
						@InvestigationDateFrom IS NULL
						OR @InvestigationDateTo IS NULL
						)
					)
				AND (
					(
						(
							f.intAvianTotalAnimalQty BETWEEN @TotalAnimalQuantityFrom
								AND @TotalAnimalQuantityTo
							)
						OR (
							f.intLivestockTotalAnimalQty BETWEEN @TotalAnimalQuantityFrom
								AND @TotalAnimalQuantityTo
							)
						)
					OR (
						@TotalAnimalQuantityFrom IS NULL
						OR @TotalAnimalQuantityTo IS NULL
						)
					)
				AND (
					(
						v.idfOutbreak IS NULL
						AND @OutbreakCasesIndicator = 0
						)
					OR (
						v.idfOutbreak IS NOT NULL
						AND @OutbreakCasesIndicator = 1
						)
					OR (@OutbreakCasesIndicator IS NULL)
					)
				AND (
					v.idfsSite = @DataEntrySiteID
					OR @DataEntrySiteID IS NULL
					)
				AND (
					v.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
					OR @ReportID IS NULL
					)
				AND (
					v.LegacyCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
					OR @LegacyReportID IS NULL
					)
				AND (
					haai.EIDSSPersonID LIKE '%' + TRIM(@PersonID) + '%'
					OR @PersonID IS NULL
					)
				AND (
					m.strFieldBarcode LIKE '%' + TRIM(@LocalOrFieldSampleID) + '%'
					OR @LocalOrFieldSampleID IS NULL
					)
				AND (
					ms.strMonitoringSessionID LIKE '%' + TRIM(@SessionID) + '%'
					OR @SessionID IS NULL
					)
			GROUP BY ID
				,ReadPermissionIndicator
				,AccessToPersonalDataPermissionIndicator
				,AccessToGenderAndAgeDataPermissionIndicator
				,WritePermissionIndicator
				,DeletePermissionIndicator;
		END;

		-- =======================================================================================
		-- DISEASE FILTRATION RULES
		--
		-- Apply disease filtration rules from use case SAUC62.
		-- =======================================================================================
		-- 
		-- Apply level 0 disease filtration rules for the employee default user group - Denies ONLY
		-- as all records have been pulled above with or without site filtration rules applied.
		--
		DELETE
		FROM @Results
		WHERE ID IN (
				SELECT v.idfVetCase
				FROM dbo.tlbVetCase v
				INNER JOIN dbo.tstObjectAccess AS oa ON oa.idfsObjectID = v.idfsFinalDiagnosis
					AND oa.intRowStatus = 0
				WHERE oa.intPermission = 1
					AND oa.idfActor = - 506 -- Default role
				);

		--
		-- Apply level 1 disease filtration rules for an employee's associated user group(s).  
		-- Allows and denies will supersede level 0.
		--
		INSERT INTO @Results
		SELECT v.idfVetCase
			,1
			,1
			,1
			,1
			,1
		FROM dbo.tlbVetCase v
		INNER JOIN dbo.tstObjectAccess oa ON oa.idfsObjectID = v.idfsFinalDiagnosis
			AND oa.intRowStatus = 0
		INNER JOIN dbo.tlbEmployeeGroupMember egm ON egm.idfEmployee = @UserEmployeeID
			AND egm.intRowStatus = 0
		INNER JOIN dbo.tlbFarm f ON f.idfFarm = v.idfFarm
		LEFT JOIN dbo.tlbHuman h ON h.idfHuman = f.idfHuman
		LEFT JOIN dbo.HumanActualAddlInfo haai ON haai.HumanActualAddlInfoUID = h.idfHumanActual
		LEFT JOIN dbo.tlbGeoLocation gl ON gl.idfGeoLocation = f.idfFarmAddress
		LEFT JOIN dbo.gisLocation g ON g.idfsLocation = gl.idfsLocation
		LEFT JOIN dbo.tlbMaterial m ON m.idfVetCase = v.idfVetCase
			AND m.intRowStatus = 0
		LEFT JOIN dbo.tlbMonitoringSession ms ON ms.idfMonitoringSession = v.idfParentMonitoringSession
			AND ms.intRowStatus = 0
		WHERE oa.intPermission = 2 -- Allow permission
			AND v.intRowStatus = 0
			AND oa.idfActor = egm.idfEmployeeGroup
			AND (
				f.idfFarmActual = @FarmMasterID
				OR @FarmMasterID IS NULL
				)
			AND (
				v.idfVetCase = @ReportKey
				OR @ReportKey IS NULL
				)
			AND (
				v.idfParentMonitoringSession = @SessionKey
				OR @SessionKey IS NULL
				)
			AND (
				g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
				OR @AdministrativeLevelID IS NULL
				)
			AND (
				v.idfsFinalDiagnosis = @DiseaseID
				OR @DiseaseID IS NULL
				)
			AND (
				v.idfsCaseClassification = @ClassificationTypeID
				OR @ClassificationTypeID IS NULL
				)
			AND (
				v.idfsCaseProgressStatus = @ReportStatusTypeID
				OR @ReportStatusTypeID IS NULL
				)
			AND (
				(
					CAST(v.datEnteredDate AS DATE) BETWEEN @DateEnteredFrom
						AND @DateEnteredTo
					)
				OR (
					@DateEnteredFrom IS NULL
					OR @DateEnteredTo IS NULL
					)
				)
			AND (
				v.idfsCaseReportType = @ReportTypeID
				OR @ReportTypeID IS NULL
				)
			AND (
				v.idfsCaseType = @SpeciesTypeID
				OR @SpeciesTypeID IS NULL
				)
			AND (
				(
					CAST(v.datFinalDiagnosisDate AS DATE) BETWEEN @DiagnosisDateFrom
						AND @DiagnosisDateTo
					)
				OR (
					@DiagnosisDateFrom IS NULL
					OR @DiagnosisDateTo IS NULL
					)
				)
			AND (
				(
					CAST(v.datInvestigationDate AS DATE) BETWEEN @InvestigationDateFrom
						AND @InvestigationDateTo
					)
				OR (
					@InvestigationDateFrom IS NULL
					OR @InvestigationDateTo IS NULL
					)
				)
			AND (
				(
					(
						f.intAvianTotalAnimalQty BETWEEN @TotalAnimalQuantityFrom
							AND @TotalAnimalQuantityTo
						)
					OR (
						f.intLivestockTotalAnimalQty BETWEEN @TotalAnimalQuantityFrom
							AND @TotalAnimalQuantityTo
						)
					)
				OR (
					@TotalAnimalQuantityFrom IS NULL
					OR @TotalAnimalQuantityTo IS NULL
					)
				)
			AND (
				(
					v.idfOutbreak IS NULL
					AND @OutbreakCasesIndicator = 0
					)
				OR (
					v.idfOutbreak IS NOT NULL
					AND @OutbreakCasesIndicator = 1
					)
				OR (@OutbreakCasesIndicator IS NULL)
				)
			AND (
				v.idfsSite = @DataEntrySiteID
				OR @DataEntrySiteID IS NULL
				)
			AND (
				v.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
				OR @ReportID IS NULL
				)
			AND (
				v.LegacyCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
				OR @LegacyReportID IS NULL
				)
			AND (
				haai.EIDSSPersonID LIKE '%' + TRIM(@PersonID) + '%'
				OR @PersonID IS NULL
				)
			AND (
				m.strFieldBarcode LIKE '%' + TRIM(@LocalOrFieldSampleID) + '%'
				OR @LocalOrFieldSampleID IS NULL
				)
			AND (
				ms.strMonitoringSessionID LIKE '%' + TRIM(@SessionID) + '%'
				OR @SessionID IS NULL
				)
		GROUP BY v.idfVetCase;

		DELETE res
		FROM @Results res
		INNER JOIN dbo.tlbVetCase AS v ON v.idfVetCase = res.ID
		INNER JOIN dbo.tlbEmployeeGroupMember AS egm ON egm.idfEmployee = @UserEmployeeID
			AND egm.intRowStatus = 0
		INNER JOIN dbo.tstObjectAccess AS oa ON oa.idfsObjectID = v.idfsFinalDiagnosis
			AND oa.intRowStatus = 0
		WHERE oa.intPermission = 1
			AND oa.idfsObjectType = 10060001 -- Disease
			AND oa.idfActor = egm.idfEmployeeGroup;

		--
		-- Apply level 2 disease filtration rules for the employee's identity.  Allows and denies 
		-- will supersede level 1.
		--
		INSERT INTO @Results
		SELECT v.idfVetCase
			,1
			,1
			,1
			,1
			,1
		FROM dbo.tlbVetCase v
		INNER JOIN dbo.tstObjectAccess oa ON oa.idfsObjectID = v.idfsFinalDiagnosis
			AND oa.intRowStatus = 0
		INNER JOIN dbo.tlbFarm f ON f.idfFarm = v.idfFarm
		LEFT JOIN dbo.tlbHuman h ON h.idfHuman = f.idfHuman
		LEFT JOIN dbo.HumanActualAddlInfo haai ON haai.HumanActualAddlInfoUID = h.idfHumanActual
		LEFT JOIN dbo.tlbGeoLocation gl ON gl.idfGeoLocation = f.idfFarmAddress
		LEFT JOIN dbo.gisLocation g ON g.idfsLocation = gl.idfsLocation
		LEFT JOIN dbo.tlbMaterial m ON m.idfVetCase = v.idfVetCase
			AND m.intRowStatus = 0
		LEFT JOIN dbo.tlbMonitoringSession ms ON ms.idfMonitoringSession = v.idfParentMonitoringSession
			AND ms.intRowStatus = 0
		WHERE oa.intPermission = 2 -- Allow permission
			AND v.intRowStatus = 0
			AND oa.idfsObjectType = 10060001 -- Disease
			AND oa.idfActor = @UserEmployeeID
			AND (
				f.idfFarmActual = @FarmMasterID
				OR @FarmMasterID IS NULL
				)
			AND (
				v.idfVetCase = @ReportKey
				OR @ReportKey IS NULL
				)
			AND (
				v.idfParentMonitoringSession = @SessionKey
				OR @SessionKey IS NULL
				)
			AND (
				g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
				OR @AdministrativeLevelID IS NULL
				)
			AND (
				v.idfsFinalDiagnosis = @DiseaseID
				OR @DiseaseID IS NULL
				)
			AND (
				v.idfsCaseClassification = @ClassificationTypeID
				OR @ClassificationTypeID IS NULL
				)
			AND (
				v.idfsCaseProgressStatus = @ReportStatusTypeID
				OR @ReportStatusTypeID IS NULL
				)
			AND (
				(
					CAST(v.datEnteredDate AS DATE) BETWEEN @DateEnteredFrom
						AND @DateEnteredTo
					)
				OR (
					@DateEnteredFrom IS NULL
					OR @DateEnteredTo IS NULL
					)
				)
			AND (
				v.idfsCaseReportType = @ReportTypeID
				OR @ReportTypeID IS NULL
				)
			AND (
				v.idfsCaseType = @SpeciesTypeID
				OR @SpeciesTypeID IS NULL
				)
			AND (
				(
					CAST(v.datFinalDiagnosisDate AS DATE) BETWEEN @DiagnosisDateFrom
						AND @DiagnosisDateTo
					)
				OR (
					@DiagnosisDateFrom IS NULL
					OR @DiagnosisDateTo IS NULL
					)
				)
			AND (
				(
					CAST(v.datInvestigationDate AS DATE) BETWEEN @InvestigationDateFrom
						AND @InvestigationDateTo
					)
				OR (
					@InvestigationDateFrom IS NULL
					OR @InvestigationDateTo IS NULL
					)
				)
			AND (
				(
					(
						f.intAvianTotalAnimalQty BETWEEN @TotalAnimalQuantityFrom
							AND @TotalAnimalQuantityTo
						)
					OR (
						f.intLivestockTotalAnimalQty BETWEEN @TotalAnimalQuantityFrom
							AND @TotalAnimalQuantityTo
						)
					)
				OR (
					@TotalAnimalQuantityFrom IS NULL
					OR @TotalAnimalQuantityTo IS NULL
					)
				)
			AND (
				(
					v.idfOutbreak IS NULL
					AND @OutbreakCasesIndicator = 0
					)
				OR (
					v.idfOutbreak IS NOT NULL
					AND @OutbreakCasesIndicator = 1
					)
				OR (@OutbreakCasesIndicator IS NULL)
				)
			AND (
				v.idfsSite = @DataEntrySiteID
				OR @DataEntrySiteID IS NULL
				)
			AND (
				v.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
				OR @ReportID IS NULL
				)
			AND (
				v.LegacyCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
				OR @LegacyReportID IS NULL
				)
			AND (
				haai.EIDSSPersonID LIKE '%' + TRIM(@PersonID) + '%'
				OR @PersonID IS NULL
				)
			AND (
				m.strFieldBarcode LIKE '%' + TRIM(@LocalOrFieldSampleID) + '%'
				OR @LocalOrFieldSampleID IS NULL
				)
			AND (
				ms.strMonitoringSessionID LIKE '%' + TRIM(@SessionID) + '%'
				OR @SessionID IS NULL
				)
		GROUP BY v.idfVetCase;

		DELETE
		FROM @Results
		WHERE ID IN (
				SELECT v.idfVetCase
				FROM dbo.tlbVetCase v
				INNER JOIN dbo.tstObjectAccess oa ON oa.idfsObjectID = v.idfsFinalDiagnosis
					AND oa.intRowStatus = 0
				WHERE oa.intPermission = 1 -- Deny permission
					AND oa.idfsObjectType = 10060001 -- Disease
					AND oa.idfActor = @UserEmployeeID
				);

		-- ========================================================================================
		-- FINAL QUERY, PAGINATION AND COUNTS
		-- ========================================================================================
		INSERT INTO @FinalResults
        SELECT ID,
               ReadPermissionIndicator,
               AccessToPersonalDataPermissionIndicator,
               AccessToGenderAndAgeDataPermissionIndicator,
               WritePermissionIndicator,
               DeletePermissionIndicator
        FROM @Results res
        WHERE res.ReadPermissionIndicator = 1
        GROUP BY ID,
               ReadPermissionIndicator,
               AccessToPersonalDataPermissionIndicator,
               AccessToGenderAndAgeDataPermissionIndicator,
               WritePermissionIndicator,
               DeletePermissionIndicator;

		WITH paging
		AS (SELECT 
				ID,
				c = COUNT(*) OVER()
			FROM @FinalResults res
			INNER JOIN dbo.tlbVetCase v ON v.idfVetCase = res.ID
			INNER JOIN dbo.tlbFarm f ON f.idfFarm = v.idfFarm
			LEFT JOIN dbo.tlbGeoLocation gl ON gl.idfGeoLocation = f.idfFarmAddress
			LEFT JOIN dbo.gisLocation g ON g.idfsLocation = gl.idfsLocation
			LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh ON lh.idfsLocation = g.idfsLocation
			LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000019) disease ON disease.idfsReference = v.idfsFinalDiagnosis
			LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000011) caseClassification ON caseClassification.idfsReference = v.idfsCaseClassification
			LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000111) reportStatus ON reportStatus.idfsReference = v.idfsCaseProgressStatus
			LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000144) reportType ON reportType.idfsReference = v.idfsCaseReportType
			ORDER BY 
				CASE WHEN @SortColumn = 'ReportID' AND @SortOrder = 'ASC' THEN v.strCaseID END ASC,
				CASE WHEN @SortColumn = 'ReportID' AND @SortOrder = 'DESC' THEN v.strCaseID END DESC,
				CASE WHEN @SortColumn = 'EnteredDate' AND @SortOrder = 'ASC' THEN v.datEnteredDate END ASC,
				CASE WHEN @SortColumn = 'EnteredDate' AND @SortOrder = 'DESC' THEN v.datEnteredDate END DESC,
				CASE WHEN @SortColumn = 'DiseaseName' AND @SortOrder = 'ASC' THEN disease.name END ASC,
				CASE WHEN @SortColumn = 'DiseaseName' AND @SortOrder = 'DESC' THEN disease.name END DESC,
				CASE WHEN @SortColumn = 'FarmName' AND @SortOrder = 'ASC' THEN f.strNationalName END ASC,
				CASE WHEN @SortColumn = 'FarmName' AND @SortOrder = 'DESC' THEN f.strNationalName END DESC,
				CASE WHEN @SortColumn = 'FarmAddress' AND @SortOrder = 'ASC' THEN (lh.AdminLevel1Name + ', ' + lh.AdminLevel2Name) END ASC,
				CASE WHEN @SortColumn = 'FarmAddress' AND @SortOrder = 'DESC' THEN (lh.AdminLevel1Name + ', ' + lh.AdminLevel2Name) END DESC,
				CASE WHEN @SortColumn = 'ClassificationTypeName' AND @SortOrder = 'ASC' THEN caseClassification.name END ASC,
				CASE WHEN @SortColumn = 'ClassificationTypeName' AND @SortOrder = 'DESC' THEN caseClassification.name END DESC,
				CASE WHEN @SortColumn = 'ReportStatusTypeName' AND @SortOrder = 'ASC' THEN reportStatus.name END ASC,
				CASE WHEN @SortColumn = 'ReportStatusTypeName' AND @SortOrder = 'DESC' THEN reportStatus.name END DESC,
				CASE WHEN @SortColumn = 'ReportTypeName' AND @SortOrder = 'ASC' THEN reportType.name END ASC,
				CASE WHEN @SortColumn = 'ReportTypeName' AND @SortOrder = 'DESC' THEN reportType.name END DESC
				OFFSET @PageSize * (@PageNumber - 1) ROWS FETCH NEXT @PageSize ROWS ONLY)
		SELECT res.ID AS ReportKey
			,v.idfOutbreak AS OutbreakKey
			,o.strOutbreakID AS OutbreakID
			,ocr.strOutbreakCaseID AS OutbreakCaseID
			,v.idfsCaseType AS ReportCategoryTypeID
			,reportStatus.name AS ReportStatusTypeName
			,reportType.name AS ReportTypeName
			,caseType.name AS SpeciesTypeName
			,caseClassification.name AS ClassificationTypeName
			,v.datReportDate AS ReportDate
			,v.datInvestigationDate AS InvestigationDate
			,v.idfsFinalDiagnosis AS DiseaseID 
			,finalDiagnosis.name AS DiseaseName
			,v.datFinalDiagnosisDate AS FinalDiagnosisDate
			,ISNULL(personInvestigatedBy.strFamilyName, N'') + ISNULL(', ' + personInvestigatedBy.strFirstName, '') + ISNULL(' ' + personInvestigatedBy.strSecondName, '') AS InvestigatedByPersonName
			,ISNULL(personReportedBy.strFamilyName, N'') + ISNULL(', ' + personReportedBy.strFirstName, '') + ISNULL(' ' + personReportedBy.strSecondName, '') AS ReportedByPersonName
			,(
				CASE 
					WHEN v.idfsCaseType = 10012003
						THEN ISNULL(f.intLivestockSickAnimalQty, '0')
					ELSE ISNULL(f.intAvianSickAnimalQty, '0')
					END
				) AS TotalSickAnimalQuantity
			,(
				CASE 
					WHEN v.idfsCaseType = 10012003
						THEN ISNULL(f.intLivestockTotalAnimalQty, '0')
					ELSE ISNULL(f.intAvianTotalAnimalQty, '0')
					END
				) AS TotalAnimalQuantity
			,(
				CASE 
					WHEN v.idfsCaseType = 10012003
						THEN ISNULL(f.intLivestockDeadAnimalQty, '0')
					ELSE ISNULL(f.intAvianDeadAnimalQty, '0')
					END
				) AS TotalDeadAnimalQuantity
			,(
				CASE 
					WHEN @IncludeSpeciesListIndicator = 1
						THEN (
								SELECT STRING_AGG(speciesType.name, ', ') WITHIN
								GROUP (
										ORDER BY speciesType.name
										) AS Result
								FROM dbo.tlbSpecies s
								INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000086) AS speciesType ON speciesType.idfsReference = s.idfsSpeciesType
								INNER JOIN dbo.tlbHerd AS h ON h.idfHerd = s.idfHerd
									AND h.intRowStatus = 0
									AND h.idfFarm = v.idfFarm
								WHERE s.intRowStatus = 0
								)
					ELSE ''
					END
				) AS SpeciesList
			,f.strFarmCode AS FarmID
			,f.idfFarmActual AS FarmMasterKey
			,f.strNationalName AS FarmName
			,f.idfHuman AS FarmOwnerKey
			,haai.EIDSSPersonID AS FarmOwnerID
			,ISNULL(h.strLastName, N'') + ISNULL(', ' + h.strFirstName, '') + ISNULL(' ' + h.strSecondName, '') AS FarmOwnerName
			,(lh.AdminLevel1Name + ', ' + lh.AdminLevel2Name) AS FarmLocation
			,dbo.FN_GBL_CreateAddressString	(ISNULL(lh.AdminLevel4Name, N''), ISNULL(lh.AdminLevel3Name, N''), ISNULL(lh.AdminLevel2Name, N''), '', '', '', '', '', '', '',0,'') AS FarmAddress
			,v.datEnteredDate AS EnteredDate
			,ISNULL(personEnteredBy.strFamilyName, N'') + ISNULL(', ' + personEnteredBy.strFirstName, '') + ISNULL(' ' + personEnteredBy.strSecondName, '') AS EnteredByPersonName
			,v.idfsSite AS SiteKey
			,f.idfFarm
			,res.ReadPermissionIndicator
			,res.AccessToPersonalDataPermissionIndicator
			,res.AccessToGenderAndAgeDataPermissionIndicator
			,res.WritePermissionIndicator
			,res.DeletePermissionIndicator
			,c AS TotalRowCount
			,(
				SELECT COUNT(*)
				FROM dbo.tlbVetCase v
				INNER JOIN dbo.tlbFarm f ON f.idfFarm = v.idfFarm
					AND f.intRowStatus = 0
				WHERE v.intRowStatus = 0
					AND (
						(v.idfsCaseType = @SpeciesTypeID)
						OR @SpeciesTypeID IS NULL
						)
				) AS TotalCount
			,TotalPages = (c / @PageSize) + IIF(c % @PageSize > 0, 1, 0)
			,CurrentPage = @PageNumber
		FROM paging 
			INNER JOIN @FinalResults res ON res.ID = paging.ID
			INNER JOIN dbo.tlbVetCase v ON v.idfVetCase = res.ID
			INNER JOIN dbo.tlbFarm f ON f.idfFarm = v.idfFarm
			LEFT JOIN dbo.tlbHuman h ON h.idfHuman = f.idfHuman
			LEFT JOIN dbo.HumanActualAddlInfo haai ON haai.HumanActualAddlInfoUID = h.idfHumanActual
			LEFT JOIN dbo.tlbPerson personInvestigatedBy ON personInvestigatedBy.idfPerson = v.idfPersonInvestigatedBy
			LEFT JOIN dbo.tlbPerson personEnteredBy ON personEnteredBy.idfPerson = v.idfPersonEnteredBy
			LEFT JOIN dbo.tlbPerson personReportedBy ON personReportedBy.idfPerson = v.idfPersonReportedBy
			LEFT JOIN dbo.tlbGeoLocation gl ON gl.idfGeoLocation = f.idfFarmAddress
			LEFT JOIN dbo.gisLocation g ON g.idfsLocation = gl.idfsLocation
			LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh ON lh.idfsLocation = g.idfsLocation
			LEFT JOIN dbo.tlbOutbreak o ON o.idfOutbreak = v.idfOutbreak
				AND o.intRowStatus = 0
			INNER JOIN dbo.OutbreakCaseReport ocr ON ocr.idfOutbreak = v.idfOutbreak AND ocr.idfVetCase IS NOT NULL
			LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000019) finalDiagnosis ON finalDiagnosis.idfsReference = v.idfsFinalDiagnosis
			LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000011) caseClassification ON caseClassification.idfsReference = v.idfsCaseClassification
			LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000111) reportStatus ON reportStatus.idfsReference = v.idfsCaseProgressStatus
			LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000144) reportType ON reportType.idfsReference = v.idfsCaseReportType
			LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000012) caseType ON caseType.idfsReference = v.idfsCaseType
		ORDER BY 
			CASE WHEN @SortColumn = 'ReportID' AND @SortOrder = 'ASC' THEN v.strCaseID END ASC,
			CASE WHEN @SortColumn = 'ReportID' AND @SortOrder = 'DESC' THEN v.strCaseID END DESC,
			CASE WHEN @SortColumn = 'EnteredDate' AND @SortOrder = 'ASC' THEN v.datEnteredDate END ASC,
			CASE WHEN @SortColumn = 'EnteredDate' AND @SortOrder = 'DESC' THEN v.datEnteredDate END DESC,
			CASE WHEN @SortColumn = 'DiseaseName' AND @SortOrder = 'ASC' THEN finalDiagnosis.name END ASC,
			CASE WHEN @SortColumn = 'DiseaseName' AND @SortOrder = 'DESC' THEN finalDiagnosis.name END DESC,
			CASE WHEN @SortColumn = 'FarmName' AND @SortOrder = 'ASC' THEN f.strNationalName END ASC,
			CASE WHEN @SortColumn = 'FarmName' AND @SortOrder = 'DESC' THEN f.strNationalName END DESC,
			CASE WHEN @SortColumn = 'FarmAddress' AND @SortOrder = 'ASC' THEN (lh.AdminLevel1Name + ', ' + lh.AdminLevel2Name) END ASC,
			CASE WHEN @SortColumn = 'FarmAddress' AND @SortOrder = 'DESC' THEN (lh.AdminLevel1Name + ', ' + lh.AdminLevel2Name) END DESC,
			CASE WHEN @SortColumn = 'ClassificationTypeName' AND @SortOrder = 'ASC' THEN caseClassification.name END ASC,
			CASE WHEN @SortColumn = 'ClassificationTypeName' AND @SortOrder = 'DESC' THEN caseClassification.name END DESC,
			CASE WHEN @SortColumn = 'ReportStatusTypeName' AND @SortOrder = 'ASC' THEN reportStatus.name END ASC,
			CASE WHEN @SortColumn = 'ReportStatusTypeName' AND @SortOrder = 'DESC' THEN reportStatus.name END DESC,
			CASE WHEN @SortColumn = 'ReportTypeName' AND @SortOrder = 'ASC' THEN reportType.name END ASC,
			CASE WHEN @SortColumn = 'ReportTypeName' AND @SortOrder = 'DESC' THEN reportType.name END DESC;
			
	END TRY

	BEGIN CATCH
		THROW;
	END CATCH;
END;
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering Procedure [dbo].[USP_VAS_MONITORING_SESSION_SET]...';


GO
-- ================================================================================================
-- Name: USP_VAS_MONITORING_SESSION_SET
--
-- Description:	Inserts or updates veterinary surveillance session for the veterinary active surveillance 
-- session use cases.
--                      
-- Revision History:
-- Name					Date       Change Detail
-- ---------------		---------- -------------------------------------------------------------------
-- Mike Kornegay		02/02/2022 Initial release. (Copied from USP_VET_DISEASE_REPORT_SET).
-- Mike Kornegay		02/14/2022 Correct problem with saving actions - retrieve monitoring session id first.
-- Mike Kornegay		02/15/2022 Removed @SpeciesTypeID because this was the same as @ReportTypeID
-- Mike Kornegay		02/16/2022 Added back the animals temp to add or update animals 
--							  before samples are written.
-- Mike Kornegay		02/26/2022 Fixed FlockOrHerd section not passing the FarmID.
-- Mike Kornegay		03/08/2022 Removed MonitoringSessionID from samples - should come from new or update key
--							  and added @LocationID
-- Mike Kornegay		03/11/2022 Refactored Aggregate Info sections.
-- Mike Kornegay		03/18/2022 Corrected parameters for USSP_VCT_MONITORING_SESSION_SUMMARY_SET.
-- Mike Kornegay		03/19/2022 Corrected issue with farm copy for aggregate farms and saving of aggregate diseases.
-- Mike Kornegay		03/21/2022 Corrected defect in reading aggregate summary temp table.
-- Mani Govindarajan	05/26/2022 Disassociate MonitoringSession with Farm in tlbFarm Table  search for comment -- disassociate farm with session
-- Mike Kornegay		06/02/2022 Add notifications save routine.
-- Mike Kornegay		06/13/2022 Changed references for @ReportTypeID to point to the new SessionCategoryID fields.
-- Stephen Long         07/06/2022 Updates for site alerts to call new stored procedure.
-- Mike Kornegay		07/08/2022 Correct logic for removing aggregate farms from monitoring session.
-- Mike Kornegay		08/18/2022 Added logic for storing multiple diseases per sample.
-- Mike Kornegay        08/19/2022 Correct error on SampleToDisease temp table.
-- Mike Kornegay		09/05/2022 Fixed error where MonitoringSessionToDiagnosisID was not set correctly.
-- Mike Kornegay		09/30/2022 Add saving of idfsMonitoringSessionSpeciesType and correct farm save for new type.
-- Mike Kornegay		10/07/2022 Defect #5140 - EIDSSLocalOrFieldSampleID not generating correctly.
-- Mike Kornegay		11/01/2022 Correct iteration on EIDSSLocalOrFieldSampleID.
-- Leo Tracchia			12/07/2022 added logic for data auditing 
-- Leo Tracchia			12/15/2022 added additional audit logic for new parameters in GBL procs
-- Mike Kornegay		12/20/2022 corrected parameter list for USSP_GBL_TESTS_SET.
-- Stephen Long         01/16/2023 Fix for data audit on the event set.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_VAS_MONITORING_SESSION_SET]
(
    @MonitoringSessionID BIGINT = NULL,
    @SessionID NVARCHAR(200) = NULL,
    @SessionStartDate DATETIME = NULL,
    @SessionEndDate DATETIME = NULL,
    @SessionStatusTypeID BIGINT = NULL,
    @SessionCategoryID BIGINT = NULL,
    @SiteID BIGINT = NULL,
    @LegacySessionID NVARCHAR(200) = NULL,
    @CountryID BIGINT = NULL,
    @RegionID BIGINT = NULL,
    @RayonID BIGINT = NULL,
    @SettlementID BIGINT = NULL,
    @CampaignKey BIGINT = NULL,
    @CampaignID NVARCHAR(200) = NULL,
    @DateEntered DATETIME = NULL,
    @EnteredByPersonID BIGINT = NULL,
    @RowStatus INT,
    @ReportTypeID BIGINT = NULL,
    @AuditUserName NVARCHAR(200),
    @FlocksOrHerds NVARCHAR(MAX) = NULL,
    @DiseaseSpeciesSamples NVARCHAR(MAX) = NULL,
    @Species NVARCHAR(MAX) = NULL,
    @Animals NVARCHAR(MAX) = NULL,
    @Farms NVARCHAR(MAX) = NULL,
    @Samples NVARCHAR(MAX) = NULL,
	@SamplesToDiseases NVARCHAR(MAX) = NULL,
    @LaboratoryTests NVARCHAR(MAX) = NULL,
    @LaboratoryTestInterpretations NVARCHAR(MAX) = NULL,
    @Actions NVARCHAR(MAX) = NULL,
    @AggregateSummaryInfo NVARCHAR(MAX) = NULL,
    @AggregateSummaryDiseases NVARCHAR(MAX) = NULL,
    @FarmsAggregate NVARCHAR(MAX) = NULL,
    @FlocksOrHerdsAggregate NVARCHAR(MAX) = NULL,
    @SpeciesAggregate NVARCHAR(MAX) = NULL,
    @DiseaseReports NVARCHAR(MAX) = NULL,
    @Events NVARCHAR(MAX) = NULL,
    @UserID BIGINT,
    @LocationID BIGINT = NULL,
	@LinkLocalOrFieldSampleIDToReportID BIT = 0
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        DECLARE @ReturnCode INT = 0;
        DECLARE @ReturnMessage NVARCHAR(MAX) = N'SUCCESS';
        DECLARE @SuppressSelect TABLE
        (
            ReturnCode INT,
            ReturnMessage NVARCHAR(MAX)
        );
        DECLARE @RowAction INT = NULL,
                @RowID BIGINT,
				@ChildRowID BIGINT,
				@Iteration INT = 0,
                @NewFarmOwnerID BIGINT = NULL,
                @FarmID BIGINT = NULL,
                @FarmMasterID BIGINT = NULL,
                @FarmOwnerID BIGINT = NULL,
                @Latitude FLOAT = NULL,
                @Longitude FLOAT = NULL,
                @FlockOrHerdID BIGINT = NULL,
                @FlockOrHerdMasterID BIGINT = NULL,
                @EIDSSFlockOrHerdID NVARCHAR(200) = NULL,
                @SickAnimalQuantity INT = NULL,
                @TotalAnimalQuantity INT = NULL,
                @DeadAnimalQuantity INT = NULL,
                @Comments NVARCHAR(2000) = NULL,
                @SpeciesID BIGINT = NULL,
                @SpeciesMasterID BIGINT = NULL,
                @InternalSpeciesTypeID BIGINT = NULL,
                @StartOfSignsDate DATETIME = NULL,
                @AverageAge NVARCHAR(200) = NULL,
                @ObservationID BIGINT = NULL,
                @AnimalID BIGINT = NULL,
                @SexTypeID BIGINT = NULL,
                @DiseaseID BIGINT = NULL,
                @ConditionTypeID BIGINT = NULL,
                @AgeTypeID BIGINT = NULL,
                @EIDSSAnimalID NVARCHAR(200) = NULL,
                @AnimalName NVARCHAR(200) = NULL,
                @Color NVARCHAR(200) = NULL,
                @AnimalDescription NVARCHAR(200) = NULL,
                @ClinicalSignsIndicator BIGINT = NULL,
                @VaccinationID BIGINT,
                @VaccinationTypeID BIGINT = NULL,
                @RouteTypeID BIGINT = NULL,
                @VaccinationDate DATETIME = NULL,
                @Manufacturer NVARCHAR(200) = NULL,
                @LotNumber NVARCHAR(200) = NULL,
                @NumberVaccinated INT = NULL,
                @SampleID BIGINT,
                @SampleTypeID BIGINT = NULL,
                @RootSampleID BIGINT = NULL,
                @ParentSampleID BIGINT = NULL,
                @CollectedByPersonID BIGINT = NULL,
                @CollectedByOrganizationID BIGINT = NULL,
                @CollectionDate DATETIME = NULL,
                @SentDate DATETIME = NULL,
                @EIDSSLocalOrFieldSampleID NVARCHAR(200) = NULL,
                @SampleStatusTypeID BIGINT = NULL,
                @SpeciesTypeID BIGINT = NULL,
                @EIDSSLaboratorySampleID NVARCHAR(200) = NULL,
                @SentToOrganizationID BIGINT = NULL,
                @ReadOnlyIndicator BIT = NULL,
                @CurrentSiteID BIGINT = NULL,
                @BirdStatusTypeID BIGINT = NULL,
                @PensideTestID BIGINT = NULL,
                @PensideTestResultTypeID BIGINT = NULL,
                @PensideTestNameTypeID BIGINT = NULL,
                @TestedByPersonID BIGINT = NULL,
                @TestedByOrganizationID BIGINT = NULL,
                @TestDate DATETIME = NULL,
                @PensideTestCategoryTypeID BIGINT = NULL,
                @TestID BIGINT = NULL,
                @TestNameTypeID BIGINT = NULL,
                @TestCategoryTypeID BIGINT = NULL,
                @TestResultTypeID BIGINT = NULL,
                @TestStatusTypeID BIGINT,
                @BatchTestID BIGINT = NULL,
                @StartedDate DATETIME = NULL,
                @ResultDate DATETIME = NULL,
                @ResultEnteredByOrganizationID BIGINT = NULL,
                @ResultEnteredByPersonID BIGINT = NULL,
                @ValidatedByOrganizationID BIGINT = NULL,
                @ValidatedByPersonID BIGINT = NULL,
                @NonLaboratoryTestIndicator BIT,
                @ExternalTestIndicator BIT = NULL,
                @PerformedByOrganizationID BIGINT = NULL,
                @ReceivedDate DATETIME = NULL,
                @ContactPersonName NVARCHAR(200) = NULL,
                @TestMonitoringSesssionID BIGINT = NULL,
                @TestInterpretationID BIGINT,
                @InterpretedStatusTypeID BIGINT = NULL,
                @InterpretedByOrganizationID BIGINT = NULL,
                @InterpretedByPersonID BIGINT = NULL,
                @TestingInterpretations BIGINT,
                @ValidatedStatusIndicator BIT = NULL,
                @ReportSessionCreatedIndicator BIT = NULL,
                @ValidatedComment NVARCHAR(200) = NULL,
                @InterpretedComment NVARCHAR(200) = NULL,
                @ValidatedDate DATETIME = NULL,
                @InterpretedDate DATETIME = NULL,
                @CaseLogID BIGINT,
                @LogStatusTypeID BIGINT = NULL,
                @LoggedByPersonID BIGINT = NULL,
                @LogDate DATETIME = NULL,
                @ActionRequired NVARCHAR(200) = NULL,
                @VeterinaryDiseaseReportRelationshipID BIGINT = NULL,
                @RelatedToSpeciesID BIGINT = NULL,
                @RelatedToAnimalID BIGINT = NULL,
                @RelatedToObservationID BIGINT = NULL,
                @FormTemplateID BIGINT,
                @ObservationSiteID BIGINT,
                @ActivityID BIGINT = NULL,
                @ActivityIDNew BIGINT = NULL,
                @ParameterID BIGINT = NULL,
                @ParameterValue SQL_VARIANT = NULL,
                @ParameterRowID BIGINT = NULL,
                @EventId BIGINT,
                @EventTypeId BIGINT = NULL,
                @EventSiteId BIGINT = NULL,
                @EventObjectId BIGINT = NULL,
                @EventUserId BIGINT = NULL,
                @EventDiseaseId BIGINT = NULL,
                @EventLocationId BIGINT = NULL,
                @EventInformationString NVARCHAR(MAX) = NULL,
                @EventLoginSiteId BIGINT = NULL,
                @MonitoringSessionActionID BIGINT = NULL,
                @MonitoringSessionActionStatusTypeID BIGINT = NULL,
                @MonitoringSessionActionTypeID BIGINT = NULL,
                @MonitoringSessionToDiagnosis BIGINT = NULL,
                @MonitoringSessionSummaryID BIGINT = NULL,
				@MonitoringSessionToMaterialID BIGINT = NULL,
                @ActionDate DATETIME = NULL,
                @SampledAnimalsQuantity INT = NULL,
                @SamplesQuantity INT = NULL,
                @PositiveAnimalsQuantity INT = NULL,
                @Order INT = NULL;


        DECLARE @DiseaseSpeciesSampleTemp TABLE
        (
            MonitoringSessionToDiagnosisID BIGINT NOT NULL,
            DiseaseID BIGINT NOT NULL,
            [Order] INT NOT NULL,
            SpeciesTypeID BIGINT NULL,
            SampleTypeID BIGINT NULL,
            RowStatus INT NULL,
            RowAction INT NULL
        );
        DECLARE @FarmsTemp TABLE
        (
            FarmMasterID BIGINT NOT NULL,
            FarmID BIGINT NULL,
            TotalAnimalQuantity INT NULL,
            Latitude FLOAT NULL,
            Longitude FLOAT NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @FlocksOrHerdsTemp TABLE
        (
            FlockOrHerdID BIGINT NOT NULL,
            FarmID BIGINT NULL,
            FarmMasterID BIGINT NULL,
            FlockOrHerdMasterID BIGINT NULL,
            EIDSSFlockOrHerdID NVARCHAR(200) NULL,
            SickAnimalQuantity INT NULL,
            TotalAnimalQuantity INT NULL,
            DeadAnimalQuantity INT NULL,
            RowStatus INT NULL,
            RowAction INT NULL
        );
        DECLARE @SpeciesTemp TABLE
        (
            SpeciesID BIGINT NOT NULL,
            SpeciesMasterID BIGINT NULL,
            FlockOrHerdID BIGINT NOT NULL,
            SpeciesTypeID BIGINT NOT NULL,
            SickAnimalQuantity INT NULL,
            TotalAnimalQuantity INT NULL,
            DeadAnimalQuantity INT NULL,
            StartOfSignsDate DATETIME NULL,
            AverageAge NVARCHAR(200) NULL,
            ObservationID BIGINT NULL,
            Comments NVARCHAR(2000) NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL,
            RelatedToSpeciesID BIGINT NULL,
            RelatedToObservationID BIGINT NULL
        );
        DECLARE @AnimalsTemp TABLE
        (
            AnimalID BIGINT NOT NULL,
            SexTypeID BIGINT NULL,
            ConditionTypeID BIGINT NULL,
            AgeTypeID BIGINT NULL,
            SpeciesID BIGINT NULL,
            ObservationID BIGINT NULL,
            EIDSSAnimalID NVARCHAR(200) NULL,
            AnimalName NVARCHAR(200) NULL,
            Color NVARCHAR(200) NULL,
            AnimalDescription NVARCHAR(200) NULL,
            ClinicalSignsIndicator BIGINT NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL,
            RelatedToAnimalID BIGINT NULL,
            RelatedToObservationID BIGINT NULL
        );
        DECLARE @SamplesTemp TABLE
        (
            SampleID BIGINT NOT NULL,
            SampleTypeID BIGINT NULL,
            RootSampleID BIGINT NULL,
            ParentSampleID BIGINT NULL,
            SpeciesID BIGINT NULL,
            AnimalID BIGINT NULL,
            MonitoringSessionID BIGINT NULL,
            SampleStatusTypeID BIGINT NULL,
            CollectionDate DATETIME NULL,
            CollectedByOrganizationID BIGINT NULL,
            CollectedByPersonID BIGINT NULL,
            SentDate DATETIME NULL,
            SentToOrganizationID BIGINT NULL,
            EIDSSLocalOrFieldSampleID NVARCHAR(200) NULL,
            Comments NVARCHAR(200) NULL,
            SiteID BIGINT NOT NULL,
            CurrentSiteID BIGINT NULL,
            EnteredDate DATETIME NULL,
            DiseaseID BIGINT NULL,
            BirdStatusTypeID BIGINT NULL,
            ReadOnlyIndicator BIT NULL,
            FarmID BIGINT NULL,
            FarmMasterID BIGINT NULL,
            FarmOwnerID BIGINT NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
		DECLARE @SamplesToDiseasesTemp TABLE
        (
            MonitoringSessionToMaterialID BIGINT NOT NULL,
            MonitoringSessionID BIGINT NOT NULL,
			SampleID BIGINT NOT NULL,
			SampleTypeID BIGINT NULL,
            DiseaseID BIGINT NOT NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @LaboratoryTestsTemp TABLE
        (
            TestID BIGINT NOT NULL,
            TestNameTypeID BIGINT NULL,
            TestCategoryTypeID BIGINT NULL,
            TestResultTypeID BIGINT NULL,
            TestStatusTypeID BIGINT NOT NULL,
            DiseaseID BIGINT NOT NULL,
            SampleID BIGINT NULL,
            BatchTestID BIGINT NULL,
            ObservationID BIGINT NULL,
            TestNumber INT NULL,
            Comments NVARCHAR NULL,
            StartedDate DATETIME NULL,
            ResultDate DATETIME NULL,
            TestedByOrganizationID BIGINT NULL,
            TestedByPersonID BIGINT NULL,
            ResultEnteredByOrganizationID BIGINT NULL,
            ResultEnteredByPersonID BIGINT NULL,
            ValidatedByOrganizationID BIGINT NULL,
            ValidatedByPersonID BIGINT NULL,
            ReadOnlyIndicator BIT NOT NULL,
            NonLaboratoryTestIndicator BIT NOT NULL,
            ExternalTestIndicator BIT NULL,
            PerformedByOrganizationID BIGINT NULL,
            ReceivedDate DATETIME NULL,
            ContactPersonName NVARCHAR(200) NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @LaboratoryTestInterpretationsTemp TABLE
        (
            TestInterpretationID BIGINT NOT NULL,
            DiseaseID BIGINT NULL,
            InterpretedStatusTypeID BIGINT NULL,
            ValidatedByOrganizationID BIGINT NULL,
            ValidatedByPersonID BIGINT NULL,
            InterpretedByOrganizationID BIGINT NULL,
            InterpretedByPersonID BIGINT NULL,
            TestID BIGINT NOT NULL,
            ValidatedStatusIndicator BIT NULL,
            ReportSessionCreatedIndicator BIT NULL,
            ValidatedComment NVARCHAR(200) NULL,
            InterpretedComment NVARCHAR(200) NULL,
            ValidatedDate DATETIME NULL,
            InterpretedDate DATETIME NULL,
            ReadOnlyIndicator BIT NOT NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @ActionsTemp TABLE
        (
            MonitoringSessionActionID BIGINT NOT NULL,
            MonitoringSessionActionStatusTypeID BIGINT NULL,
            MonitoringSessionActionTypeID BIGINT NULL,
            EnteredByPersonID BIGINT NULL,
            ActionDate DATETIME NULL,
            Comments NVARCHAR(1000) NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @AggregateSummaryInfoTemp TABLE
        (
            MonitoringSessionSummaryID BIGINT NOT NULL,
            FarmID BIGINT NULL,
            FarmMasterID BIGINT NULL,
            SpeciesID BIGINT NULL,
            AnimalSexID BIGINT NULL,
            SampleAnimalsQty INT NULL,
            SamplesQty INT NULL,
            CollectionDate DATETIME NULL,
            CollectedByPersonID BIGINT NULL,
            PositiveAnimalsQty INT NULL,
            DiseaseID BIGINT NULL,
            SampleTypeID BIGINT NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @AggregateSummaryDiseasesTemp TABLE
        (
            MonitoringSessionSummaryID BIGINT NULL,
            DiseaseID BIGINT NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @FarmsAggregateTemp TABLE
        (
            FarmMasterID BIGINT NOT NULL,
            FarmID BIGINT NULL,
            TotalAnimalQuantity INT NULL,
            Latitude FLOAT NULL,
            Longitude FLOAT NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @FlocksOrHerdsAggregateTemp TABLE
        (
            FlockOrHerdID BIGINT NOT NULL,
            FarmID BIGINT NULL,
            FarmMasterID BIGINT NULL,
            FlockOrHerdMasterID BIGINT NULL,
            EIDSSFlockOrHerdID NVARCHAR(200) NULL,
            SickAnimalQuantity INT NULL,
            TotalAnimalQuantity INT NULL,
            DeadAnimalQuantity INT NULL,
            RowStatus INT NULL,
            RowAction INT NULL
        );
        DECLARE @SpeciesAggregateTemp TABLE
        (
            SpeciesID BIGINT NOT NULL,
            SpeciesMasterID BIGINT NULL,
            FlockOrHerdID BIGINT NOT NULL,
            SpeciesTypeID BIGINT NOT NULL,
            SickAnimalQuantity INT NULL,
            TotalAnimalQuantity INT NULL,
            DeadAnimalQuantity INT NULL,
            StartOfSignsDate DATETIME NULL,
            AverageAge NVARCHAR(200) NULL,
            ObservationID BIGINT NULL,
            Comments NVARCHAR(2000) NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL,
            RelatedToSpeciesID BIGINT NULL,
            RelatedToObservationID BIGINT NULL
        );
        DECLARE @EventsTemp TABLE
        (
            EventId BIGINT NOT NULL,
            EventTypeId BIGINT NULL,
            UserId BIGINT NULL,
            SiteId BIGINT NULL,
            LoginSiteId BIGINT NULL,
            ObjectId BIGINT NULL,
            DiseaseId BIGINT NULL,
            LocationId BIGINT NULL,
            InformationString NVARCHAR(MAX) NULL
        );

        BEGIN TRANSACTION;

        INSERT INTO @DiseaseSpeciesSampleTemp
        SELECT *
        FROM
            OPENJSON(@DiseaseSpeciesSamples)
            WITH
            (
                MonitoringSessionToDiagnosisID BIGINT,
                DiseaseID BIGINT,
                [Order] INT,
                SpeciesTypeID BIGINT,
                SampleTypeID BIGINT,
                RowStatus INT,
                RowAction INT
            );
        INSERT INTO @FarmsTemp
        SELECT *
        FROM
            OPENJSON(@Farms)
            WITH
            (
                FarmMasterID BIGINT,
                FarmID BIGINT,
                TotalAnimalQuantity INT,
                Latitude FLOAT,
                Longitude FLOAT,
                RowStatus INT,
                RowAction INT
            );
        INSERT INTO @FlocksOrHerdsTemp
        SELECT *
        FROM
            OPENJSON(@FlocksOrHerds)
            WITH
            (
                FlockOrHerdID BIGINT,
                FarmID BIGINT,
                FarmMasterID BIGINT,
                FlockOrHerdMasterID BIGINT,
                EIDSSFlockOrHerdID NVARCHAR(200),
                SickAnimalQuantity INT,
                TotalAnimalQuantity INT,
                DeadAnimalQuantity INT,
                RowStatus INT,
                RowAction INT
            );
        INSERT INTO @SpeciesTemp
        SELECT *
        FROM
            OPENJSON(@Species)
            WITH
            (
                SpeciesID BIGINT,
                SpeciesMasterID BIGINT,
                FlockOrHerdID BIGINT,
                SpeciesTypeID BIGINT,
                SickAnimalQuantity INT,
                TotalAnimalQuantity INT,
                DeadAnimalQuantity INT,
                StartOfSignsDate DATETIME,
                AverageAge NVARCHAR(200),
                ObservationID BIGINT,
                Comments NVARCHAR(2000),
                RowStatus INT,
                RowAction INT,
                RelatedToSpeciesID BIGINT,
                RelatedToObservationID BIGINT
            );
        INSERT INTO @AnimalsTemp
        SELECT *
        FROM
            OPENJSON(@Animals)
            WITH
            (
                AnimalID BIGINT,
                SexTypeID BIGINT,
                ConditionTypeID BIGINT,
                AgeTypeID BIGINT,
                SpeciesID BIGINT,
                ObservationID BIGINT,
                EIDSSAnimalID NVARCHAR(200),
                AnimalName NVARCHAR(200),
                Color NVARCHAR(200),
                AnimalDescription NVARCHAR(200),
                ClinicalSignsIndicator BIGINT,
                RowStatus INT,
                RowAction INT,
                RelatedToAnimalID BIGINT,
                RelatedToObservationID BIGINT
            );
        INSERT INTO @SamplesTemp
        SELECT *
        FROM
            OPENJSON(@Samples)
            WITH
            (
                SampleID BIGINT,
                SampleTypeID BIGINT,
                RootSampleID BIGINT,
                ParentSampleID BIGINT,
                SpeciesID BIGINT,
                AnimalID BIGINT,
                MonitoringSessionID BIGINT,
                SampleStatusTypeID BIGINT,
                CollectionDate DATETIME2,
                CollectedByOrganizationID BIGINT,
                CollectedByPersonID BIGINT,
                SentDate DATETIME2,
                SentToOrganizationID BIGINT,
                EIDSSLocalOrFieldSampleID NVARCHAR(200),
                Comments NVARCHAR(200),
                SiteID BIGINT,
                CurrentSiteID BIGINT,
                EnteredDate DATETIME2,
                DiseaseID BIGINT,
                BirdStatusTypeID BIGINT,
                ReadOnlyIndicator BIT,
                FarmID BIGINT,
                FarmMasterID BIGINT,
                FarmOwnerID BIGINT,
                RowStatus INT,
                RowAction INT
            );

		SET @Iteration = (SELECT COUNT(*) FROM dbo.tlbMaterial WHERE idfMonitoringSession = @MonitoringSessionID);

		INSERT INTO @SamplesToDiseasesTemp
		SELECT *
		FROM
			OPENJSON(@SamplesToDiseases)
			WITH
			(
				MonitoringSessionToMaterialID BIGINT,
				MonitoringSessionID BIGINT,
				SampleID BIGINT,
				SampleTypeID BIGINT,
				DiseaseID BIGINT,
				RowStatus INT,
				RowAction INT
			);
        INSERT INTO @LaboratoryTestsTemp
        SELECT *
        FROM
            OPENJSON(@LaboratoryTests)
            WITH
            (
                TestID BIGINT,
                TestNameTypeID BIGINT,
                TestCategoryTypeID BIGINT,
                TestResultTypeID BIGINT,
                TestStatusTypeID BIGINT,
                DiseaseID BIGINT,
                SampleID BIGINT,
                BatchTestID BIGINT,
                ObservationID BIGINT,
                TestNumber INT,
                Comments NVARCHAR(500),
                StartedDate DATETIME2,
                ResultDate DATETIME2,
                TestedByOrganizationID BIGINT,
                TestedByPersonID BIGINT,
                ResultEnteredByOrganizationID BIGINT,
                ResultEnteredByPersonID BIGINT,
                ValidatedByOrganizationID BIGINT,
                ValidatedByPersonID BIGINT,
                ReadOnlyIndicator BIT,
                NonLaboratoryTestIndicator BIT,
                ExternalTestIndicator BIT,
                PerformedByOrganizationID BIGINT,
                ReceivedDate DATETIME2,
                ContactPersonName NVARCHAR(200),
                RowStatus INT,
                RowAction INT
            );
        INSERT INTO @LaboratoryTestInterpretationsTemp
        SELECT *
        FROM
            OPENJSON(@LaboratoryTestInterpretations)
            WITH
            (
                TestInterpretationID BIGINT,
                DiseaseID BIGINT,
                InterpretedStatusTypeID BIGINT,
                ValidatedByOrganizationID BIGINT,
                ValidatedByPersonID BIGINT,
                InterpretedByOrganizationID BIGINT,
                InterpretedByPersonID BIGINT,
                TestID BIGINT,
                ValidatedStatusIndicator BIT,
                ReportSessionCreatedIndicator BIT,
                ValidatedComment NVARCHAR(200),
                InterpretedComment NVARCHAR(200),
                ValidatedDate DATETIME2,
                InterpretedDate DATETIME2,
                ReadOnlyIndicator BIT,
                RowStatus INT,
                RowAction INT
            );
        INSERT INTO @ActionsTemp
        SELECT *
        FROM
            OPENJSON(@Actions)
            WITH
            (
                MonitoringSessionActionID BIGINT,
                MonitoringSessionActionStatusTypeID BIGINT,
                MonitoringSessionActionTypeID BIGINT,
                EnteredByPersonID BIGINT,
                ActionDate DATETIME,
                Comments NVARCHAR(1000),
                RowStatus INT,
                RowAction INT
            );
        INSERT INTO @AggregateSummaryInfoTemp
        SELECT *
        FROM
            OPENJSON(@AggregateSummaryInfo)
            WITH
            (
                MonitoringSessionSummaryID BIGINT,
                FarmID BIGINT,
                FarmMasterID BIGINT,
                SpeciesID BIGINT,
                AnimalSexID BIGINT,
                SampleAnimalsQty INT,
                SamplesQty INT,
                CollectionDate DATETIME,
                CollectedByPersonID BIGINT,
                PositiveAnimalsQty INT,
                DiseaseID BIGINT,
                SampleTypeID BIGINT,
                RowStatus INT,
                RowAction INT
            );
        INSERT INTO @AggregateSummaryDiseasesTemp
        SELECT *
        FROM
            OPENJSON(@AggregateSummaryDiseases)
            WITH
            (
                MonitoringSessionSummaryID BIGINT,
                DiseaseID BIGINT,
                RowStatus INT,
                RowAction INT
            );
        INSERT INTO @FarmsAggregateTemp
        SELECT *
        FROM
            OPENJSON(@FarmsAggregate)
            WITH
            (
                FarmMasterID BIGINT,
                FarmID BIGINT,
                TotalAnimalQuantity INT,
                Latitude FLOAT,
                Longitude FLOAT,
                RowStatus INT,
                RowAction INT
            );
        INSERT INTO @FlocksOrHerdsAggregateTemp
        SELECT *
        FROM
            OPENJSON(@FlocksOrHerdsAggregate)
            WITH
            (
                FlockOrHerdID BIGINT,
                FarmID BIGINT,
                FarmMasterID BIGINT,
                FlockOrHerdMasterID BIGINT,
                EIDSSFlockOrHerdID NVARCHAR(200),
                SickAnimalQuantity INT,
                TotalAnimalQuantity INT,
                DeadAnimalQuantity INT,
                RowStatus INT,
                RowAction INT
            );
        INSERT INTO @SpeciesAggregateTemp
        SELECT *
        FROM
            OPENJSON(@SpeciesAggregate)
            WITH
            (
                SpeciesID BIGINT,
                SpeciesMasterID BIGINT,
                FlockOrHerdID BIGINT,
                SpeciesTypeID BIGINT,
                SickAnimalQuantity INT,
                TotalAnimalQuantity INT,
                DeadAnimalQuantity INT,
                StartOfSignsDate DATETIME,
                AverageAge NVARCHAR(200),
                ObservationID BIGINT,
                Comments NVARCHAR(2000),
                RowStatus INT,
                RowAction INT,
                RelatedToSpeciesID BIGINT,
                RelatedToObservationID BIGINT
            );

        INSERT INTO @EventsTemp
        SELECT *
        FROM
            OPENJSON(@Events)
            WITH
            (
                EventId BIGINT,
                EventTypeId BIGINT,
                UserId BIGINT,
                SiteId BIGINT,
                LoginSiteId BIGINT,
                ObjectId BIGINT,
                DiseaseId BIGINT,
                LocationId BIGINT,
                InformationString NVARCHAR(MAX)
            );

		--Data Audit--

		DECLARE @idfUserId BIGINT = NULL;
		DECLARE @idfSiteId BIGINT = NULL;
		DECLARE @idfsDataAuditEventType bigint = NULL;
		DECLARE @idfsObjectType bigint = 10017062; --select * from trtBaseReference where strDefault = 'Veterinary Active Surveillance Session'
		DECLARE @idfObject bigint = @MonitoringSessionID;
		DECLARE @idfObjectTable_tlbMonitoringSession bigint = 707040000000;	--select * from tauTable where strName = 'tlbMonitoringSession'	 
		DECLARE @idfDataAuditEvent bigint = NULL;		

		DECLARE @tlbMonitoringSession_BeforeEdit TABLE
		(
			idfMonitoringSession bigint,
			idfsMonitoringSessionStatus bigint,
            idfsCountry bigint,
            idfsRegion bigint,
            idfsRayon bigint,
            idfsSettlement bigint,
            idfPersonEnteredBy bigint,
            idfCampaign bigint,
            idfsSite bigint,
            datEnteredDate datetime,
            strMonitoringSessionID nvarchar(50),
            intRowStatus int,
            datStartDate datetime,
            datEndDate datetime,
            SessionCategoryID bigint,
            LegacySessionID varchar(50),            
            idfsLocation bigint,
			idfsMonitoringSessionSpeciesType bigint
		)		

		DECLARE @tlbMonitoringSession_AfterEdit TABLE
		(
			idfMonitoringSession bigint,
			idfsMonitoringSessionStatus bigint,
            idfsCountry bigint,
            idfsRegion bigint,
            idfsRayon bigint,
            idfsSettlement bigint,
            idfPersonEnteredBy bigint,
            idfCampaign bigint,
            idfsSite bigint,
            datEnteredDate datetime,
            strMonitoringSessionID nvarchar(50),
            intRowStatus int,
            datStartDate datetime,
            datEndDate datetime,
            SessionCategoryID bigint,
            LegacySessionID varchar(50),            
            idfsLocation bigint,
			idfsMonitoringSessionSpeciesType bigint
		)		
		
		-- Get and Set UserId and SiteId
		SELECT @idfUserId = userInfo.UserId, @idfSiteId = UserInfo.SiteId FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo

		--Data Audit--

        IF NOT EXISTS
        (
            SELECT *
            FROM dbo.tlbMonitoringSession
            WHERE idfMonitoringSession = @MonitoringSessionID
                  AND intRowStatus = 0
        )
        BEGIN

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tlbMonitoringSession',
                                              @MonitoringSessionID OUTPUT;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_GBL_NextNumber_GET 'Vet Active Surveillance Session',
                                               @SessionID OUTPUT,                                               
											   NULL;
			--Data Audit--	

				-- tauDataAuditEvent Event Type - Create 
				set @idfsDataAuditEventType = 10016001;
			
				-- insert record into tauDataAuditEvent - 
				INSERT INTO @SuppressSelect
				EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType, @idfsObjectType, @MonitoringSessionID, @idfObjectTable_tlbMonitoringSession, @idfDataAuditEvent OUTPUT

			--Data Audit--

            INSERT INTO dbo.tlbMonitoringSession
            (
                [idfMonitoringSession],
                [idfsMonitoringSessionStatus],
                [idfsCountry],
                [idfsRegion],
                [idfsRayon],
                [idfsSettlement],
                [idfPersonEnteredBy],
                [idfCampaign],
                [idfsSite],
                [datEnteredDate],
                [strMonitoringSessionID],
                [intRowStatus],
                [datStartDate],
                [datEndDate],
                [SessionCategoryID],
                [LegacySessionID],
                [AuditCreateUser],
                [SourceSystemNameID],
                [SourceSystemKeyValue],
                [idfsLocation],
				[idfsMonitoringSessionSpeciesType]
            )
            VALUES
				(@MonitoringSessionID,
				 @SessionStatusTypeID,
				 @CountryID,
				 @RegionID,
				 @RayonID,
				 @SettlementID,
				 @EnteredByPersonID,
				 @CampaignKey,
				 @SiteID,
				 @DateEntered,
				 @SessionID,
				 0  ,
				 @SessionStartDate,
				 @SessionEndDate,
				 @SessionCategoryID,
				 @LegacySessionID,
				 @AuditUserName,
				 10519001,
				 '[{"idfMonitoringSessionID":' + CAST(@MonitoringSessionID AS NVARCHAR(300)) + '}]',
				 @LocationID,
				 @ReportTypeID
            );

			--Data Audit--							

				INSERT INTO tauDataAuditDetailCreate(idfDataAuditEvent, idfObjectTable, idfObject)
				VALUES (@idfDataAuditEvent, @idfObjectTable_tlbMonitoringSession, @MonitoringSessionID)
			
			--Data Audit--

            UPDATE @EventsTemp
            SET ObjectId = @MonitoringSessionID
            WHERE ObjectId = 0;

        END
        ELSE
        BEGIN

			--DataAudit-- 
				
				--  tauDataAuditEvent  Event Type - Edit 
				set @idfsDataAuditEventType = 10016003;
			
				-- insert record into tauDataAuditEvent - 
				INSERT INTO @SuppressSelect
				EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType, @idfsObjectType, @idfObject, @idfObjectTable_tlbMonitoringSession, @idfDataAuditEvent OUTPUT

			--DataAudit-- 

			INSERT INTO @tlbMonitoringSession_BeforeEdit (
				idfMonitoringSession,
				idfsMonitoringSessionStatus,
				idfsCountry,
				idfsRegion,
				idfsRayon,
				idfsSettlement,
				idfPersonEnteredBy,
				idfCampaign,
				idfsSite,
				datEnteredDate,
				strMonitoringSessionID,
				intRowStatus,
				datStartDate,
				datEndDate,
				SessionCategoryID,
				LegacySessionID,
				idfsLocation,
				idfsMonitoringSessionSpeciesType)
			SELECT 
				idfMonitoringSession,
				idfsMonitoringSessionStatus,
				idfsCountry,
				idfsRegion,
				idfsRayon,
				idfsSettlement,
				idfPersonEnteredBy,
				idfCampaign,
				idfsSite,
				datEnteredDate,
				strMonitoringSessionID,
				intRowStatus,
				datStartDate,
				datEndDate,
				SessionCategoryID,
				LegacySessionID,
				idfsLocation,
				idfsMonitoringSessionSpeciesType
				FROM [tlbMonitoringSession] WHERE idfMonitoringSession = @MonitoringSessionID;

            UPDATE [dbo].[tlbMonitoringSession]
            SET [idfsMonitoringSessionStatus] = @SessionStatusTypeID,
                [idfsCountry] = @CountryID,
                [idfsRegion] = @RegionID,
                [idfsRayon] = @RayonID,
                [idfsSettlement] = @SettlementID,
                [idfPersonEnteredBy] = @EnteredByPersonID,
                [idfCampaign] = @CampaignKey,
                [idfsSite] = @SiteID,
                [datEnteredDate] = @DateEntered,
                [strMonitoringSessionID] = @SessionID,
                [intRowStatus] = 0,
                [datStartDate] = @SessionStartDate,
                [datEndDate] = @SessionEndDate,
                [SessionCategoryID] = @SessionCategoryID,
                [LegacySessionID] = @LegacySessionID,
                [AuditUpdateUser] = @AuditUserName,
                [idfsLocation] = @LocationID,
				[idfsMonitoringSessionSpeciesType] = @ReportTypeID
            WHERE idfMonitoringSession = @MonitoringSessionID

			INSERT INTO @tlbMonitoringSession_AfterEdit (
				idfMonitoringSession,
				idfsMonitoringSessionStatus,
				idfsCountry,
				idfsRegion,
				idfsRayon,
				idfsSettlement,
				idfPersonEnteredBy,
				idfCampaign,
				idfsSite,
				datEnteredDate,
				strMonitoringSessionID,
				intRowStatus,
				datStartDate,
				datEndDate,
				SessionCategoryID,
				LegacySessionID,
				idfsLocation,
				idfsMonitoringSessionSpeciesType)
			SELECT 
				idfMonitoringSession,
				idfsMonitoringSessionStatus,
				idfsCountry,
				idfsRegion,
				idfsRayon,
				idfsSettlement,
				idfPersonEnteredBy,
				idfCampaign,
				idfsSite,
				datEnteredDate,
				strMonitoringSessionID,
				intRowStatus,
				datStartDate,
				datEndDate,
				SessionCategoryID,
				LegacySessionID,
				idfsLocation,
				idfsMonitoringSessionSpeciesType
				FROM [tlbMonitoringSession] WHERE idfMonitoringSession = @MonitoringSessionID;

			--idfsMonitoringSessionStatus
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_tlbMonitoringSession, 
				707060000000,
				a.idfMonitoringSession,
				null,
				a.idfsMonitoringSessionStatus,
				b.idfsMonitoringSessionStatus 
			from @tlbMonitoringSession_BeforeEdit a  inner join @tlbMonitoringSession_AfterEdit b on a.idfMonitoringSession = b.idfMonitoringSession
			where (a.idfsMonitoringSessionStatus <> b.idfsMonitoringSessionStatus) 
				or(a.idfsMonitoringSessionStatus is not null and b.idfsMonitoringSessionStatus is null)
				or(a.idfsMonitoringSessionStatus is null and b.idfsMonitoringSessionStatus is not null)

			--idfsCountry
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_tlbMonitoringSession, 
				707070000000,
				a.idfMonitoringSession,
				null,
				a.idfsCountry,
				b.idfsCountry 
			from @tlbMonitoringSession_BeforeEdit a  inner join @tlbMonitoringSession_AfterEdit b on a.idfMonitoringSession = b.idfMonitoringSession
			where (a.idfsCountry <> b.idfsCountry) 
				or(a.idfsCountry is not null and b.idfsCountry is null)
				or(a.idfsCountry is null and b.idfsCountry is not null)

			--idfsRegion
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_tlbMonitoringSession, 
				707080000000,
				a.idfMonitoringSession,
				null,
				a.idfsRegion,
				b.idfsRegion 
			from @tlbMonitoringSession_BeforeEdit a  inner join @tlbMonitoringSession_AfterEdit b on a.idfMonitoringSession = b.idfMonitoringSession
			where (a.idfsRegion <> b.idfsRegion) 
				or(a.idfsRegion is not null and b.idfsRegion is null)
				or(a.idfsRegion is null and b.idfsRegion is not null)

			--idfsRayon
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_tlbMonitoringSession, 
				707090000000,
				a.idfMonitoringSession,
				null,
				a.idfsRayon,
				b.idfsRayon 
			from @tlbMonitoringSession_BeforeEdit a  inner join @tlbMonitoringSession_AfterEdit b on a.idfMonitoringSession = b.idfMonitoringSession
			where (a.idfsRayon <> b.idfsRayon) 
				or(a.idfsRayon is not null and b.idfsRayon is null)
				or(a.idfsRayon is null and b.idfsRayon is not null)

			--idfsSettlement
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_tlbMonitoringSession, 
				707100000000,
				a.idfMonitoringSession,
				null,
				a.idfsSettlement,
				b.idfsSettlement 
			from @tlbMonitoringSession_BeforeEdit a  inner join @tlbMonitoringSession_AfterEdit b on a.idfMonitoringSession = b.idfMonitoringSession
			where (a.idfsSettlement <> b.idfsSettlement) 
				or(a.idfsSettlement is not null and b.idfsSettlement is null)
				or(a.idfsSettlement is null and b.idfsSettlement is not null)

			--idfPersonEnteredBy
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_tlbMonitoringSession, 
				707110000000,
				a.idfMonitoringSession,
				null,
				a.idfPersonEnteredBy,
				b.idfPersonEnteredBy 
			from @tlbMonitoringSession_BeforeEdit a  inner join @tlbMonitoringSession_AfterEdit b on a.idfMonitoringSession = b.idfMonitoringSession
			where (a.idfPersonEnteredBy <> b.idfPersonEnteredBy) 
				or(a.idfPersonEnteredBy is not null and b.idfPersonEnteredBy is null)
				or(a.idfPersonEnteredBy is null and b.idfPersonEnteredBy is not null)

			--idfCampaign
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_tlbMonitoringSession, 
				707120000000,
				a.idfMonitoringSession,
				null,
				a.idfCampaign,
				b.idfCampaign 
			from @tlbMonitoringSession_BeforeEdit a  inner join @tlbMonitoringSession_AfterEdit b on a.idfMonitoringSession = b.idfMonitoringSession
			where (a.idfCampaign <> b.idfCampaign) 
				or(a.idfCampaign is not null and b.idfCampaign is null)
				or(a.idfCampaign is null and b.idfCampaign is not null)

			--datEnteredDate
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_tlbMonitoringSession, 
				707130000000,
				a.idfMonitoringSession,
				null,
				a.datEnteredDate,
				b.datEnteredDate 
			from @tlbMonitoringSession_BeforeEdit a  inner join @tlbMonitoringSession_AfterEdit b on a.idfMonitoringSession = b.idfMonitoringSession
			where (a.datEnteredDate <> b.datEnteredDate) 
				or(a.datEnteredDate is not null and b.datEnteredDate is null)
				or(a.datEnteredDate is null and b.datEnteredDate is not null)

			--strMonitoringSessionID
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_tlbMonitoringSession, 
				707140000000,
				a.idfMonitoringSession,
				null,
				a.strMonitoringSessionID,
				b.strMonitoringSessionID 
			from @tlbMonitoringSession_BeforeEdit a  inner join @tlbMonitoringSession_AfterEdit b on a.idfMonitoringSession = b.idfMonitoringSession
			where (a.strMonitoringSessionID <> b.strMonitoringSessionID) 
				or(a.strMonitoringSessionID is not null and b.strMonitoringSessionID is null)
				or(a.strMonitoringSessionID is null and b.strMonitoringSessionID is not null)

			--datStartDate
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_tlbMonitoringSession, 
				4578670000000,
				a.idfMonitoringSession,
				null,
				a.datStartDate,
				b.datStartDate 
			from @tlbMonitoringSession_BeforeEdit a  inner join @tlbMonitoringSession_AfterEdit b on a.idfMonitoringSession = b.idfMonitoringSession
			where (a.datStartDate <> b.datStartDate) 
				or(a.datStartDate is not null and b.datStartDate is null)
				or(a.datStartDate is null and b.datStartDate is not null)

			--datEndDate
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_tlbMonitoringSession, 
				4578680000000,
				a.idfMonitoringSession,
				null,
				a.datEndDate,
				b.datEndDate 
			from @tlbMonitoringSession_BeforeEdit a  inner join @tlbMonitoringSession_AfterEdit b on a.idfMonitoringSession = b.idfMonitoringSession
			where (a.datEndDate <> b.datEndDate) 
				or(a.datEndDate is not null and b.datEndDate is null)
				or(a.datEndDate is null and b.datEndDate is not null)

        END;

        WHILE EXISTS (SELECT * FROM @DiseaseSpeciesSampleTemp)
        BEGIN
            SELECT TOP 1
                @RowID = MonitoringSessionToDiagnosisID,
				@MonitoringSessionToDiagnosis = MonitoringSessionToDiagnosisID,
                @DiseaseID = DiseaseID,
                @SpeciesTypeID = SpeciesTypeID,
                @SampleTypeID = SampleTypeID,
                @Order = [Order],
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @DiseaseSpeciesSampleTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VAS_MONITORING_SESSION_TO_DIAGNOSIS_SPECIES_SAMPLE_SET @MonitoringSessionToDiagnosis OUTPUT,
																					@idfDataAuditEvent,
                                                                                    @MonitoringSessionID,
                                                                                    @DiseaseID,
                                                                                    @SpeciesTypeID,
                                                                                    @SampleTypeID,
                                                                                    @Order,
                                                                                    @RowStatus,
                                                                                    @RowAction,
                                                                                    @AuditUserName;

            DELETE FROM @DiseaseSpeciesSampleTemp
            WHERE MonitoringSessionToDiagnosisID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @FarmsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = FarmMasterID,
                @FarmMasterID = FarmMasterID,
                @FarmID = FarmID,
                @TotalAnimalQuantity = TotalAnimalQuantity,
                @Latitude = Latitude,
                @Longitude = Longitude,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @FarmsTemp;



            IF @ReportTypeID = 129909620007069 --Avian
            BEGIN
                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_VET_FARM_COPY @AuditUserName,
                                               @RowID,
                                               @TotalAnimalQuantity,
                                               NULL,
                                               NULL,
                                               NULL,
                                               NULL,
                                               NULL,
                                               @Latitude,
                                               @Longitude,
                                               @MonitoringSessionID,
                                               NULL,
                                               @FarmOwnerID,
                                               @FarmID OUTPUT,
                                               @NewFarmOwnerID OUTPUT;

                IF @NewFarmOwnerID IS NOT NULL
                BEGIN
                    SET @FarmOwnerID = @NewFarmOwnerID;
                END;

                UPDATE @FlocksOrHerdsTemp
                SET FarmID = @FarmID
                WHERE FarmMasterID = @RowID;

                UPDATE @SamplesTemp
                SET FarmID = @FarmID
                WHERE FarmMasterID = @RowID;

            END
            ELSE --Livestock
            BEGIN
                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_VET_FARM_COPY @AuditUserName,
                                               @RowID,
                                               NULL,
                                               NULL,
                                               NULL,
                                               @TotalAnimalQuantity,
                                               NULL,
                                               NULL,
                                               @Latitude,
                                               @Longitude,
                                               @MonitoringSessionID,
                                               NULL,
                                               @FarmOwnerID,
                                               @FarmID OUTPUT,
                                               @NewFarmOwnerID OUTPUT;

                IF @NewFarmOwnerID IS NOT NULL
                BEGIN
                    SET @FarmOwnerID = @NewFarmOwnerID;
                END;

                UPDATE @FlocksOrHerdsTemp
                SET FarmID = @FarmID
                WHERE FarmMasterID = @RowID;

                UPDATE @SamplesTemp
                SET FarmID = @FarmID
                WHERE FarmMasterID = @RowID;
            END

            -- disassociate farm with session 
            if ((@MonitoringSessionID IS NOT NULL) AND (@RowStatus = 1))
            BEGIN
                UPDATE dbo.tlbFarm
                set idfMonitoringSession = null
                where idfFarm = @FarmID
                      and idfMonitoringSession = @MonitoringSessionID;
            END;


            DELETE FROM @FarmsTemp
            WHERE FarmMasterID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @FlocksOrHerdsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = FlockOrHerdID,
                @FlockOrHerdID = FlockOrHerdID,
                @FarmID = FarmID,
                @FarmMasterID = FarmMasterID,
                @FlockOrHerdMasterID = FlockOrHerdMasterID,
                @EIDSSFlockOrHerdID = EIDSSFlockOrHerdID,
                @SickAnimalQuantity = SickAnimalQuantity,
                @TotalAnimalQuantity = TotalAnimalQuantity,
                @DeadAnimalQuantity = DeadAnimalQuantity,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @FlocksOrHerdsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VET_HERD_SET @AuditUserName,
										  @idfDataAuditEvent,
                                          @FlockOrHerdID OUTPUT,
                                          @FlockOrHerdMasterID,
                                          @FarmID,
                                          @EIDSSFlockOrHerdID,
                                          @SickAnimalQuantity,
                                          @TotalAnimalQuantity,
                                          @DeadAnimalQuantity,
                                          NULL,
                                          @RowStatus,
                                          @RowAction;

            UPDATE @SpeciesTemp
            SET FlockOrHerdID = @FlockOrHerdID
            WHERE FlockOrHerdID = @RowID;

            DELETE FROM @FlocksOrHerdsTemp
            WHERE FLockOrHerdID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @SpeciesTemp)
        BEGIN
            SELECT TOP 1
                @RowID = SpeciesID,
                @SpeciesID = SpeciesID,
                @SpeciesMasterID = SpeciesMasterID,
                @SpeciesTypeID = SpeciesTypeID,
                @FlockOrHerdID = FlockOrHerdID,
                @StartOfSignsDate = StartOfSignsDate,
                @AverageAge = AverageAge,
                @SickAnimalQuantity = SickAnimalQuantity,
                @TotalAnimalQuantity = TotalAnimalQuantity,
                @DeadAnimalQuantity = DeadAnimalQuantity,
                @Comments = Comments,
                @ObservationID = ObservationID,
                @RowStatus = RowStatus,
                @RowAction = RowAction,
                @RelatedToSpeciesID = RelatedToSpeciesID,
                @RelatedToObservationID = RelatedToObservationID
            FROM @SpeciesTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VET_SPECIES_SET @AuditUserName,
											 @idfDataAuditEvent,
                                             @SpeciesID OUTPUT,
                                             @SpeciesMasterID,
                                             @SpeciesTypeID,
                                             @FlockOrHerdID,
                                             @ObservationID,
                                             @StartOfSignsDate,
                                             @AverageAge,
                                             @SickAnimalQuantity,
                                             @TotalAnimalQuantity,
                                             @DeadAnimalQuantity,
                                             @Comments,
                                             @RowStatus,
                                             @RowAction;

            UPDATE @AnimalsTemp
            SET SpeciesID = @SpeciesID
            WHERE SpeciesID = @RowID;

            UPDATE @SamplesTemp
            SET SpeciesID = @SpeciesID
            WHERE SpeciesID = @RowID;

            DELETE FROM @SpeciesTemp
            WHERE SpeciesID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @AnimalsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = AnimalID,
                @AnimalID = AnimalID,
                @SexTypeID = SexTypeID,
                @ConditionTypeID = ConditionTypeID,
                @AgeTypeID = AgeTypeID,
                @SpeciesID = SpeciesID,
                @ObservationID = ObservationID,
                @AnimalDescription = AnimalDescription,
                @EIDSSAnimalID = EIDSSAnimalID,
                @AnimalName = AnimalName,
                @Color = Color,
                @ClinicalSignsIndicator = ClinicalSignsIndicator,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @AnimalsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VET_ANIMAL_SET @AuditUserName,
											@idfDataAuditEvent,
                                            @AnimalID OUTPUT,
                                            @SexTypeID,
                                            @ConditionTypeID,
                                            @AgeTypeID,
                                            @SpeciesID,
                                            @ObservationID,
                                            @AnimalDescription,
                                            @EIDSSAnimalID,
                                            @AnimalName,
                                            @Color,
                                            @ClinicalSignsIndicator,
                                            @RowStatus,
                                            @RowAction;

            UPDATE @SamplesTemp
            SET AnimalID = @AnimalID
            WHERE AnimalID = @RowID;

            DELETE FROM @AnimalsTemp
            WHERE AnimalID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @SamplesTemp)
        BEGIN
            SELECT TOP 1
                @RowID = SampleID,
                @SampleID = SampleID,
                @SampleTypeID = SampleTypeID,
                @RootSampleID = RootSampleID,
                @ParentSampleID = ParentSampleID,
                @SpeciesID = SpeciesID,
                @AnimalID = AnimalID,
                @CollectedByPersonID = CollectedByPersonID,
                @CollectedByOrganizationID = CollectedByOrganizationID,
                @CollectionDate = CollectionDate,
                @SentDate = SentDate,
                @EIDSSLocalOrFieldSampleID = EIDSSLocalOrFieldSampleID,
                @SampleStatusTypeID = SampleStatusTypeID,
                @FarmID = FarmID,
                @FarmMasterID = FarmMasterID,
                @DiseaseID = DiseaseID,
                @DateEntered = EnteredDate,
                @Comments = Comments,
                @SiteID = SiteID,
                @CurrentSiteID = CurrentSiteID,
                @RowStatus = RowStatus,
                @SentToOrganizationID = SentToOrganizationID,
                @BirdStatusTypeID = BirdStatusTypeID,
                @ReadOnlyIndicator = ReadOnlyIndicator,
                @RowAction = RowAction
            FROM @SamplesTemp;

			--Format the EIDSSLocalOrFieldSampleID according to system preferences.
			IF (
				@EIDSSLocalOrFieldSampleID IS NULL
				OR @EIDSSLocalOrFieldSampleID = ''
               )
               AND @LinkLocalOrFieldSampleIDToReportID = 1
            BEGIN
                SET @Iteration = @Iteration + 1;
                IF @Iteration < 10
                BEGIN
                    SET @EIDSSLocalOrFieldSampleID = @SessionID + '-0' + CONVERT(NVARCHAR(4), @Iteration);
                END
                ELSE
                BEGIN
                    SET @EIDSSLocalOrFieldSampleID = @SessionID + '-' + CONVERT(NVARCHAR(4), @Iteration);
                END;
            END;

			INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_GBL_SAMPLES_SET @AuditUserName,
											@idfDataAuditEvent,
											@MonitoringSessionID,
                                            @SampleID OUTPUT,
                                            @SampleTypeID,
                                            @RootSampleID,
                                            @ParentSampleID,
                                            @FarmOwnerID,
                                            @SpeciesID,
                                            @AnimalID,
                                            NULL,
                                            @MonitoringSessionID,
                                            NULL,
                                            NULL,
                                            NULL,
                                            @CollectionDate,
                                            @CollectedByPersonID,
                                            @CollectedByOrganizationID,
                                            @SentDate,
                                            @SentToOrganizationID,
                                            @EIDSSLocalOrFieldSampleID,
                                            @SiteID,
                                            @DateEntered,
                                            @ReadOnlyIndicator,
                                            @SampleStatusTypeID,
                                            @Comments,
                                            @CurrentSiteID,
                                            @DiseaseID,
                                            @BirdStatusTypeID,
                                            @RowStatus,
                                            @RowAction;
		       	   		 
            UPDATE @LaboratoryTestsTemp
            SET SampleID = @SampleID
            WHERE SampleID = @RowID;

			UPDATE @SamplesToDiseasesTemp
            SET SampleID = @SampleID
            WHERE SampleID = @RowID;

            DELETE FROM @SamplesTemp
            WHERE SampleID = @RowID;
        END;

		WHILE EXISTS (SELECT * FROM @SamplesToDiseasesTemp)
		BEGIN
			SELECT TOP 1
				@RowID = MonitoringSessionToMaterialID,
				@MonitoringSessionToMaterialID = MonitoringSessionToMaterialID,
				@MonitoringSessionID = @MonitoringSessionID,
				@SampleID = SampleID,
				@SampleTypeID = SampleTypeID,
				@DiseaseID = DiseaseID,
				@RowAction = RowAction,
				@RowStatus = RowStatus
			FROM @SamplesToDiseasesTemp;

			--insert or update the diseases for this sample
			INSERT INTO @SuppressSelect
			EXECUTE dbo.USSP_VAS_SAMPLE_TO_DISEASE_SET
										@AuditUserName,
										@idfDataAuditEvent,
                                        @MonitoringSessionToMaterialID,
										@MonitoringSessionID,
										@SampleID,
										@DiseaseID,
                                        @SampleTypeID,
                                        @RowStatus,
                                        @RowAction;

			DELETE FROM @SamplesToDiseasesTemp
			WHERE MonitoringSessionToMaterialID = @RowID;
		END;

        WHILE EXISTS (SELECT * FROM @LaboratoryTestsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = TestID,
                @TestID = TestID,
                @TestNameTypeID = TestNameTypeID,
                @TestCategoryTypeID = TestCategoryTypeID,
                @TestResultTypeID = TestResultTypeID,
                @TestStatusTypeID = TestStatusTypeID,
                @DiseaseID = DiseaseID,
                @SampleID = SampleID,
                @Comments = Comments,
                @RowStatus = RowStatus,
                @StartedDate = StartedDate,
                @ResultDate = ResultDate,
                @TestedByOrganizationID = TestedByOrganizationID,
                @TestedByPersonID = TestedByPersonID,
                @ResultEnteredByOrganizationID = ResultEnteredByOrganizationID,
                @ResultEnteredByPersonID = ResultEnteredByPersonID,
                @ValidatedByOrganizationID = ValidatedByOrganizationID,
                @ValidatedByPersonID = ValidatedByPersonID,
                @ReadOnlyIndicator = ReadOnlyIndicator,
                @NonLaboratoryTestIndicator = NonLaboratoryTestIndicator,
                @ExternalTestIndicator = ExternalTestIndicator,
                @PerformedByOrganizationID = PerformedByOrganizationID,
                @ReceivedDate = ReceivedDate,
                @ContactPersonName = ContactPersonName,
                @RowAction = RowAction
            FROM @LaboratoryTestsTemp;

            --If record is being soft-deleted, then check if the test record was originally created 
            --in the laboaratory module.  If it was, then disassociate the test record from the 
            --veterinary surveillance session, so that the test record remains in the laboratory module 
            --for further action.
            IF @RowStatus = 1
               AND @NonLaboratoryTestIndicator = 0
            BEGIN
                SET @RowStatus = 0;
                SET @TestMonitoringSesssionID = NULL;
            END
            ELSE
            BEGIN
                SET @TestMonitoringSesssionID = @MonitoringSessionID;
            END;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_GBL_TESTS_SET 
                                          @TestID OUTPUT,
                                          @TestNameTypeID,
                                          @TestCategoryTypeID,
                                          @TestResultTypeID,
                                          @TestStatusTypeID,
                                          @DiseaseID,
                                          @SampleID,
                                          NULL,
                                          NULL,
                                          NULL,
                                          @Comments,
                                          @RowStatus,
                                          @StartedDate,
                                          @ResultDate,
                                          @TestedByOrganizationID,
                                          @TestedByPersonID,
                                          @ResultEnteredByOrganizationID,
                                          @ResultEnteredByPersonID,
                                          @ValidatedByOrganizationID,
                                          @ValidatedByPersonID,
                                          @ReadOnlyIndicator,
                                          @NonLaboratoryTestIndicator,
                                          @ExternalTestIndicator,
                                          @PerformedByOrganizationID,
                                          @ReceivedDate,
                                          @ContactPersonName,
                                          @MonitoringSessionID,
                                          NULL,
                                          NULL,
                                          NULL,
                                          @AuditUserName,
										  @idfDataAuditEvent,
										  @MonitoringSessionID,
                                          @RowAction;

            UPDATE @LaboratoryTestInterpretationsTemp
            SET TestID = @TestID
            WHERE TestID = @RowID;

            DELETE FROM @LaboratoryTestsTemp
            WHERE TestID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @LaboratoryTestInterpretationsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = TestInterpretationID,
                @TestInterpretationID = TestInterpretationID,
                @DiseaseID = DiseaseID,
                @InterpretedStatusTypeID = InterpretedStatusTypeID,
                @ValidatedByOrganizationID = ValidatedByOrganizationID,
                @ValidatedByPersonID = ValidatedByPersonID,
                @InterpretedByOrganizationID = InterpretedByOrganizationID,
                @InterpretedByPersonID = InterpretedByPersonID,
                @TestID = TestID,
                @ValidatedStatusIndicator = ValidatedStatusIndicator,
                @ReportSessionCreatedIndicator = ReportSessionCreatedIndicator,
                @ValidatedComment = ValidatedComment,
                @InterpretedComment = InterpretedComment,
                @ValidatedDate = ValidatedDate,
                @InterpretedDate = InterpretedDate,
                @RowStatus = RowStatus,
                @ReadOnlyIndicator = ReadOnlyIndicator,
                @RowAction = RowAction
            FROM @LaboratoryTestInterpretationsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_GBL_TEST_INTERPRETATIONS_SET @AuditUserName,
														 @idfDataAuditEvent,
														 @MonitoringSessionID,
                                                         @TestInterpretationID OUTPUT,
                                                         @DiseaseID,
                                                         @InterpretedStatusTypeID,
                                                         @ValidatedByOrganizationID,
                                                         @ValidatedByPersonID,
                                                         @InterpretedByOrganizationID,
                                                         @InterpretedByPersonID,
                                                         @TestID,
                                                         @ValidatedStatusIndicator,
                                                         @ReportSessionCreatedIndicator,
                                                         @ValidatedComment,
                                                         @InterpretedComment,
                                                         @ValidatedDate,
                                                         @InterpretedDate,
                                                         @RowStatus,
                                                         @ReadOnlyIndicator,
                                                         @RowAction;

            DELETE FROM @LaboratoryTestInterpretationsTemp
            WHERE TestInterpretationID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @ActionsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = MonitoringSessionActionID,
                @MonitoringSessionActionTypeID = MonitoringSessionActionTypeID,
                @MonitoringSessionActionStatusTypeID = MonitoringSessionActionStatusTypeID,
                @EnteredByPersonID = EnteredByPersonID,
                @ActionDate = ActionDate,
                @Comments = Comments,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @ActionsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VAS_MONITORING_SESSION_ACTION_SET @MonitoringSessionActionID,
															   @idfDataAuditEvent,
                                                               @MonitoringSessionID,
                                                               @EnteredByPersonID,
                                                               @MonitoringSessionActionTypeID,
                                                               @MonitoringSessionActionStatusTypeID,
                                                               @ActionDate,
                                                               @Comments,
                                                               @RowStatus,
                                                               @RowAction,
                                                               @AuditUserName;

            DELETE FROM @ActionsTemp
            WHERE MonitoringSessionActionID = @RowID;
        END;

        /* Aggregate Information Section */

        WHILE EXISTS (SELECT * FROM @FarmsAggregateTemp)
        BEGIN
            SELECT TOP 1
                @RowID = FarmMasterID,
                @FarmMasterID = FarmMasterID,
                @FarmID = FarmID,
                @TotalAnimalQuantity = TotalAnimalQuantity,
                @Latitude = Latitude,
                @Longitude = Longitude,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @FarmsAggregateTemp;

            IF @ReportTypeID = 129909620007069 --Avian
            BEGIN
                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_VET_FARM_COPY @AuditUserName,
                                               @RowID,
                                               @TotalAnimalQuantity,
                                               NULL,
                                               NULL,
                                               NULL,
                                               NULL,
                                               NULL,
                                               @Latitude,
                                               @Longitude,
                                               NULL,
                                               NULL,
                                               @FarmOwnerID,
                                               @FarmID OUTPUT,
                                               @NewFarmOwnerID OUTPUT;

                IF @NewFarmOwnerID IS NOT NULL
                BEGIN
                    SET @FarmOwnerID = @NewFarmOwnerID;
                END;

            END
            ELSE --Livestock
            BEGIN
                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_VET_FARM_COPY @AuditUserName,
                                               @RowID,
                                               NULL,
                                               NULL,
                                               NULL,
                                               @TotalAnimalQuantity,
                                               NULL,
                                               NULL,
                                               @Latitude,
                                               @Longitude,
                                               NULL,
                                               NULL,
                                               @FarmOwnerID,
                                               @FarmID OUTPUT,
                                               @NewFarmOwnerID OUTPUT;

                IF @NewFarmOwnerID IS NOT NULL
                BEGIN
                    SET @FarmOwnerID = @NewFarmOwnerID;
                END;

            END

            UPDATE @FlocksOrHerdsAggregateTemp
            SET FarmID = @FarmID
            WHERE FarmMasterID = @RowID;

            UPDATE @AggregateSummaryInfoTemp
            SET FarmID = @FarmID
            WHERE FarmMasterID = @RowID;

			/*farm is being removed from aggregate monitoring session*/
			IF ((@MonitoringSessionID IS NOT NULL) AND (@RowStatus = 1))
			BEGIN
				UPDATE dbo.tlbFarm 
				SET  idfMonitoringSession = null
					,intRowStatus = @RowStatus
				WHERE idfFarm = @FarmID;
			END;

            DELETE FROM @FarmsAggregateTemp
            WHERE FarmMasterID = @RowID;

        END;

        WHILE EXISTS (SELECT * FROM @FlocksOrHerdsAggregateTemp)
        BEGIN
            SELECT TOP 1
                @RowID = FlockOrHerdID,
                @FlockOrHerdID = FlockOrHerdID,
                @FarmID = FarmID,
                @FarmMasterID = FarmMasterID,
                @FlockOrHerdMasterID = FlockOrHerdMasterID,
                @EIDSSFlockOrHerdID = EIDSSFlockOrHerdID,
                @SickAnimalQuantity = SickAnimalQuantity,
                @TotalAnimalQuantity = TotalAnimalQuantity,
                @DeadAnimalQuantity = DeadAnimalQuantity,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @FlocksOrHerdsAggregateTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VET_HERD_SET @AuditUserName,
										  @idfDataAuditEvent,
                                          @FlockOrHerdID OUTPUT,
                                          @FlockOrHerdMasterID,
                                          @FarmID,
                                          @EIDSSFlockOrHerdID,
                                          @SickAnimalQuantity,
                                          @TotalAnimalQuantity,
                                          @DeadAnimalQuantity,
                                          NULL,
                                          @RowStatus,
                                          @RowAction;

            UPDATE @SpeciesAggregateTemp
            SET FlockOrHerdID = @FlockOrHerdID
            WHERE FlockOrHerdID = @RowID;

            DELETE FROM @FlocksOrHerdsAggregateTemp
            WHERE FLockOrHerdID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @SpeciesAggregateTemp)
        BEGIN
            SELECT TOP 1
                @RowID = SpeciesID,
                @SpeciesID = SpeciesID,
                @SpeciesMasterID = SpeciesMasterID,
                @SpeciesTypeID = SpeciesTypeID,
                @FlockOrHerdID = FlockOrHerdID,
                @StartOfSignsDate = StartOfSignsDate,
                @AverageAge = AverageAge,
                @SickAnimalQuantity = SickAnimalQuantity,
                @TotalAnimalQuantity = TotalAnimalQuantity,
                @DeadAnimalQuantity = DeadAnimalQuantity,
                @Comments = Comments,
                @ObservationID = ObservationID,
                @RowStatus = RowStatus,
                @RowAction = RowAction,
                @RelatedToSpeciesID = RelatedToSpeciesID,
                @RelatedToObservationID = RelatedToObservationID
            FROM @SpeciesAggregateTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VET_SPECIES_SET @AuditUserName,
											 @idfDataAuditEvent,
                                             @SpeciesID OUTPUT,
                                             @SpeciesMasterID,
                                             @SpeciesTypeID,
                                             @FlockOrHerdID,
                                             @ObservationID,
                                             @StartOfSignsDate,
                                             @AverageAge,
                                             @SickAnimalQuantity,
                                             @TotalAnimalQuantity,
                                             @DeadAnimalQuantity,
                                             @Comments,
                                             @RowStatus,
                                             @RowAction;

            UPDATE @AggregateSummaryInfoTemp
            SET SpeciesID = @SpeciesID
            WHERE SpeciesID = @RowID;

            DELETE FROM @SpeciesAggregateTemp
            WHERE SpeciesID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @AggregateSummaryInfoTemp)
        BEGIN
            SELECT TOP 1
                @RowID = MonitoringSessionSummaryID,
                @MonitoringSessionSummaryID = MonitoringSessionSummaryID,
                @SpeciesID = SpeciesID,
                @SampledAnimalsQuantity = SampleAnimalsQty,
                @SamplesQuantity = SamplesQty,
                @CollectionDate = CollectionDate,
                @CollectedByPersonID = CollectedByPersonID,
                @PositiveAnimalsQuantity = PositiveAnimalsQty,
                @SexTypeID = AnimalSexID,
                @FarmID = FarmID,
                @FarmMasterID = FarmMasterID,
                @DiseaseID = DiseaseID,
                @SampleTypeID = SampleTypeID,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @AggregateSummaryInfoTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VCT_MONITORING_SESSION_SUMMARY_SET @MonitoringSessionSummaryID OUTPUT,
																@idfDataAuditEvent,
                                                                @MonitoringSessionID,
                                                                @FarmID,
                                                                @SpeciesID,
                                                                @SexTypeID,
                                                                @SampledAnimalsQuantity,
                                                                @SamplesQuantity,
                                                                @CollectionDate,
                                                                @PositiveAnimalsQuantity,
                                                                @RowStatus,
                                                                @DiseaseID,
                                                                @SampleTypeID,
                                                                @RowAction,
                                                                @AuditUserName;

            UPDATE @AggregateSummaryDiseasesTemp
            SET MonitoringSessionSummaryID = @MonitoringSessionSummaryID
            WHERE MonitoringSessionSummaryID = @RowID

            DELETE FROM @AggregateSummaryInfoTemp
            WHERE MonitoringSessionSummaryID = @RowID;

            PRINT @RowID
        END;

        WHILE EXISTS (SELECT * FROM @AggregateSummaryDiseasesTemp)
        BEGIN
            SELECT TOP 1
                @RowID = MonitoringSessionSummaryID,
                @MonitoringSessionSummaryID = MonitoringSessionSummaryID,
                @DiseaseID = DiseaseID,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @AggregateSummaryDiseasesTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VCT_MONITORING_SESSION_SUMMARY_DIAGNOSIS_SET @MonitoringSessionSummaryID,
																		  @idfDataAuditEvent,
                                                                          @RowStatus,
                                                                          @DiseaseID,
                                                                          @RowAction,
                                                                          @AuditUserName;


            DELETE FROM @AggregateSummaryDiseasesTemp
            WHERE @MonitoringSessionSummaryID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @EventsTemp)
        BEGIN
            SELECT TOP 1
                @EventId = EventId,
                @EventTypeId = EventTypeId,
                @EventUserId = UserId,
                @EventObjectId = ObjectId,
                @EventSiteId = SiteId,
                @EventDiseaseId = DiseaseId,
                @EventLocationId = LocationId,
                @EventInformationString = InformationString,
                @EventLoginSiteId = LoginSiteId
            FROM @EventsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_ADMIN_EVENT_SET @EventId,
                                             @EventTypeId,
                                             @EventUserId,
                                             @EventObjectId,
                                             @EventDiseaseId,
                                             @EventSiteId,
                                             @EventInformationString,
                                             @EventLoginSiteId,
                                             @EventLocationId,
                                             @AuditUserName, 
                                             @idfDataAuditEvent,
                                             @SessionID;

            DELETE FROM @EventsTemp
            WHERE EventId = @EventId;
        END;

        IF @@TRANCOUNT > 0
            COMMIT TRANSACTION;

        SELECT @ReturnCode ReturnCode,
               @ReturnMessage ReturnMessage,
               @MonitoringSessionID SessionKey,
               @SessionID SessionID;
    END TRY
    BEGIN CATCH
        IF @@Trancount > 0
            ROLLBACK TRANSACTION;

        THROW;
    END CATCH
END
GO
PRINT N'Refreshing Procedure [dbo].[USP_HUM_HUMAN_DISEASE_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_HUM_HUMAN_DISEASE_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ILI_Aggregate_Set]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ILI_Aggregate_Set]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_VET_DISEASE_REPORT_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_VET_DISEASE_REPORT_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_DEDUPLICATION_VET_DISEASE_Report_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_DEDUPLICATION_VET_DISEASE_Report_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USSP_OMM_CONVERT_CONTACT_Set]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USSP_OMM_CONVERT_CONTACT_Set]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_OMM_Contact_Set]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_OMM_Contact_Set]';


GO
PRINT N'Update complete.';


GO
