/*
Deployment script for EIDSS7_GG

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO

USE [$(DatabaseName)];


GO

PRINT N'Altering Procedure [dbo].[USP_OMM_Case_GetDetail]...';


GO
-- ================================================================================================
-- Name: USP_OMM_Case_GetDetail
--
-- Description: Gets details of an outbreak case summary.
--          
-- Author: Doug Albanese
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Doug Albanese	05/29/2010 Changes for OMUC07 (Vet Disease details)
-- Doug Albanese	07/01/2019 Changes for aligning the Human Disease Report for retreival
-- Stephen Long     04/25/2022 Cleaned up formatting and removed human disease report specific.
-- Stephen Long     06/23/2022 Added farm name to the query.
-- Doug Albanese	07/25/2022	 Changes 10012002 to 10012004. 10012002 wasn't a value that existed in the Base Reference for Avian.
--	Doug Albanese	07/26/2022	Add field CaseQuestionnaireTemplateId, to correctly identify a form that has been answered
-- Doug Albanese	 10/25/2022	 Refactored to provide the correct observation ID for Case Questionnaire.
-- Sample code
/*

EXEC dbo.USP_OMM_Case_GetDetail
	@LanguageID = 'en-US',
	@OutbreakCaseReportUID = 12

*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_OMM_Case_GetDetail]
(
    @LanguageID NVARCHAR(50),
    @OutbreakCaseReportUID BIGINT = -1
)
AS
BEGIN
    BEGIN TRY
        SELECT ocr.OutBreakCaseReportUID AS CaseId,
               ocr.idfOutbreak AS OutbreakId,
               osp.OutbreakSpeciesTypeID AS CaseTypeId, 
               ocr.strOutbreakCaseID AS EIDSSCaseId,
               CAST(ocr.IsPrimaryCaseFlag AS BIT) AS PrimaryCaseIndicator,
               ocr.OutbreakCaseClassificationID AS ClassificationTypeId,
               ocr.OutbreakCaseStatusID AS StatusTypeId,
               ocr.idfHumanCase AS HumanDiseaseReportId,
               ocr.idfVetCase AS VeterinaryDiseaseReportId,
               CASE
                   WHEN f.strNationalName IS NULL THEN
                       f.strInternationalName
                   WHEN f.strNationalName = '' THEN
                       f.strInternationalName
                   ELSE
                       f.strNationalName
               END AS FarmName,
               ocr.OutbreakCaseObservationID AS CaseQuestionnaireObservationId,
               null AS CaseQuestionnaireObservationFormTypeId,
               ocr.CaseEPIObservationID,
               null AS CaseEPIObservationFormTypeId,
               ocr.AuditCreateDTM AS DateEntered,
               ocr.AuditUpdateDTM AS DateLastUpdated,
			   osp.CaseQuestionaireTemplateID AS CaseQuestionnaireTemplateId
        FROM dbo.OutbreakCaseReport ocr
            LEFT OUTER JOIN dbo.OutbreakSpeciesParameter osp
                ON osp.idfOutbreak = ocr.idfOutbreak
                   AND osp.intRowStatus = 0
            LEFT JOIN dbo.tlbVetCase vc 
                ON vc.idfVetCase = ocr.idfVetCase 
            LEFT JOIN dbo.tlbFarm f
                ON f.idfFarm = vc.idfFarm
        WHERE ocr.OutBreakCaseReportUID = @OutbreakCaseReportUID 
              AND (ocr.idfVetCase IS NOT NULL
                  AND (
                          vc.idfsCaseType = 10012004
                          AND osp.OutbreakSpeciesTypeID = 10514002
                      )
                  OR (
                         vc.idfsCaseType = 10012003
                         AND osp.OutbreakSpeciesTypeID = 10514003
                     ) OR ocr.idfVetCase IS NULL);
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_OMM_Case_GetList]...';


GO

-- ================================================================================================
-- Name: USP_OMM_Case_GetList
--
-- Description: Gets a list of outbreak cases.
--          
-- Author: Doug Albanese
-- Revision History:
-- Name            Date       Change Detail
-- --------------- ---------- --------------------------------------------------------------------
-- Doug Albanese   05/20/2019 Added capabilities for Vet Disease retrieval
-- Doug Albanese   01/11/2021 Changed the output for the Date Entered so that it can be converted, 
--                            when switching languages.
-- Doug Albanese   01/22/2021 Changed the OutbreakSpeciesParameter table to be joined via a LEFT 
--                            OUTER JOIN
-- Doug Albanese   02/09/2021 Correction to fix migrated data between eidss6.1 content and missing 
--                            EIDSS 7 data.
-- Doug Albanese   09/29/2021 Refactored to work with the MVC gridview taghelper
-- Doug Albanese   09/30/2021 Clean up of unecessary content that was confusing EF
-- Stephen Long    04/23/2022 Cleaned up formatting and changed over to location hierarchy.
-- Stephen Long    05/12/2022 Added distinct to remove duplicates on human and vet case.
-- Stephen Long    06/05/2022 Temporary hard-code for human outbreak type to handle convert contact
--                            to case, so application will navigate to correct case details view.
-- Doug Albanese   06/15/2022 I forgot to add a comment here, from about a week ago for the removal 
--                            for SpeciesTypeName...which was causing duplicate rows to show up in 
--                            the case listing.
-- Stephen Long    06/20/2022 Added human and veterinary disease report identifiers.
-- Stephen Long    07/23/2022 Added search term check on human and vet checks; otherwise lab module
--                            returns nothing, and disease ID and patient/farm owner name.
-- Doug Albanese   07/25/2022 Changes 10012002 to 10012004. 10012002 wasn't a value that existed 
--                            in the Base Reference for Avian.
-- Stephen Long    07/28/2022 Fix on veterinary case get where criteria; was puilling back records 
--                            for outbreak sessions that did not have any cases.
-- Doug Albanese  09/08/2022  Correction for Vet Case Listings
-- Stephen Long    10/25/2022 Fix to remove duplicate cases.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_OMM_Case_GetList]
(
    @LanguageID NVARCHAR(50),
    @OutbreakID BIGINT = NULL,
    @SearchTerm NVARCHAR(100) = NULL,
    @HumanMasterID BIGINT = NULL,
    @FarmMasterID BIGINT = NULL,
    @TodaysFollowUpsIndicator BIT = NULL,
    @Page INT = 1,
    @PageSize INT = 10,
    @SortColumn NVARCHAR(30) = 'EIDSSCaseID',
    @SortOrder NVARCHAR(4) = 'DESC'
)
AS
BEGIN
    DECLARE @FirstRec INT = (@Page - 1) * @Pagesize,
            @LastRec INT = (@Page * @PageSize + 1);

    BEGIN TRY
        DECLARE @InitialResults TABLE
        (
            OutbreakID BIGINT NOT NULL,
            EIDSSOutbreakID NVARCHAR(200) NOT NULL,
            CaseID BIGINT NOT NULL,
            EIDSSCaseID NVARCHAR(200) NOT NULL,
            HumanDiseaseReportID BIGINT NULL,
            VeterinaryDiseaseReportID BIGINT NULL,
            DiseaseID BIGINT NULL, 
            DiseaseName NVARCHAR(200) NULL,
            PatientOrFarmOwnerName NVARCHAR(MAX) NULL, 
            SpeciesTypeName NVARCHAR(200) NULL,
            CaseTypeName NVARCHAR(200) NOT NULL,
            StatusTypeName NVARCHAR(200) NULL,
            ClassificationTypeName NVARCHAR(200) NULL,
            CaseLocation NVARCHAR(200) NULL,
            DateEntered DATETIME NOT NULL,
            DateOfSymptomOnset DATETIME NULL,
            InvestigationDate DATETIME NULL,
            ReportedByPersonName NVARCHAR(200) NULL,
            InvestigatedByPersonName NVARCHAR(200) NULL,
            TotalSickAnimalQuantity INT NULL,
            TotalDeadAnimalQuantity INT NULL,
            PrimaryCaseIndicator INT NOT NULL,
            MonitoringDuration INT NULL,
            MonitoringFrequency INT NULL,
			OutbreakTypeID BIGINT NULL
        );

        DECLARE @FinalResults TABLE
        (
            OutbreakID BIGINT NOT NULL,
            EIDSSOutbreakID NVARCHAR(200) NOT NULL,
            CaseID BIGINT NOT NULL,
            EIDSSCaseID NVARCHAR(200) NOT NULL,
            HumanDiseaseReportID BIGINT NULL,
            VeterinaryDiseaseReportID BIGINT NULL,
            DiseaseID BIGINT NULL, 
            DiseaseName NVARCHAR(200) NULL,
            PatientOrFarmOwnerName NVARCHAR(MAX) NULL, 
            SpeciesTypeName NVARCHAR(200) NULL,
            CaseTypeName NVARCHAR(200) NOT NULL,
            StatusTypeName NVARCHAR(200) NULL,
            ClassificationTypeName NVARCHAR(200) NULL,
            CaseLocation NVARCHAR(200) NULL,
            DateEntered DATETIME NOT NULL,
            DateOfSymptomOnset DATETIME NULL,
            InvestigationDate DATETIME NULL,
            ReportedByPersonName NVARCHAR(200) NULL,
            InvestigatedByPersonName NVARCHAR(200) NULL,
            TotalSickAnimalQuantity INT NULL,
            TotalDeadAnimalQuantity INT NULL,
            PrimaryCaseIndicator INT NOT NULL,
            MonitoringDuration INT NULL,
            MonitoringFrequency INT NULL,
			OutbreakTypeID BIGINT NULL
        );

        IF (@OutbreakID IS NOT NULL OR @HumanMasterID IS NOT NULL OR @SearchTerm IS NOT NULL)
        BEGIN
            INSERT INTO @InitialResults
            SELECT DISTINCT
                ocr.idfOutbreak,
                o.strOutbreakID,
                ocr.OutBreakCaseReportUID,
                ocr.strOutbreakCaseID,
                ocr.idfHumanCase,
                NULL,
                disease.idfsReference, 
                disease.name,
                ISNULL(h.strLastName, N'') + ISNULL(', ' + h.strFirstName, '') + ISNULL(' ' + h.strSecondName, ''),
                outbreakSpeciesGroupType.name,
                caseType.name,
                statusType.name,
                classificationType.name,
                lh.AdminLevel2Name + ', ' + lh.AdminLevel1Name,
                hc.datEnteredDate,
                hc.datOnSetDate,
                hc.datInvestigationStartDate,
                NULL,
                NULL,
                NULL,
                NULL,
                COALESCE(IsPrimaryCaseFlag,0),
                osp.CaseMonitoringDuration,
                osp.CaseMonitoringFrequency,
				10513001 -- TODO - Handle convert to case for outbreak types of veterinary or zoonotic?
            FROM dbo.OutbreakCaseReport ocr
                INNER JOIN dbo.tlbOutbreak o
                    ON o.idfOutbreak = ocr.idfOutbreak
                INNER JOIN dbo.tlbHumanCase hc
                    ON hc.idfHumanCase = ocr.idfHumanCase
                LEFT JOIN dbo.tlbHuman h
                    ON h.idfHuman = hc.idfHuman
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000019) disease
                    ON disease.idfsReference = hc.idfsFinalDiagnosis
                LEFT OUTER JOIN dbo.OutbreakSpeciesParameter osp
                    ON osp.idfOutbreak = ocr.idfOutbreak
                       AND osp.intRowStatus = 0
                LEFT JOIN dbo.tlbGeoLocation gl
                    ON gl.idfGeoLocation = h.idfCurrentResidenceAddress
                       AND gl.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                    ON lh.idfsLocation = gl.idfsLocation
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000011) classificationType
                    ON classificationType.idfsReference = ocr.OutbreakCaseClassificationID
                LEFT JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000520) statusType
                    ON statusType.idfsReference = ocr.OutbreakCaseStatusID
                LEFT JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000513) caseType
                    ON caseType.idfsReference = 10513001 -- TODO - Handle convert to case for outbreak types of veterinary or zoonotic?
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000514) outbreakSpeciesGroupType
                    ON outbreakSpeciesGroupType.idfsReference = osp.OutbreakSpeciesTypeID
            WHERE ocr.idfHumanCase IS NOT NULL
   			      AND osp.OutbreakSpeciesTypeID IN (10514001)
                  AND ocr.intRowStatus = 0
                  AND (
                          ocr.idfOutbreak = @OutbreakID
                          OR @OutbreakID IS NULL
                      )
                  AND (
                          h.idfHumanActual = @HumanMasterID
                          OR @HumanMasterID IS NULL
                      );

			
        END

        IF (@OutbreakID IS NOT NULL OR @FarmMasterID IS NOT NULL OR @SearchTerm IS NOT NULL)
        BEGIN
            INSERT INTO @InitialResults
            SELECT DISTINCT ocr.idfOutbreak,
                   o.strOutbreakID,
                   ocr.OutBreakCaseReportUID,
                   ocr.strOutbreakCaseID,
                   NULL,
                   ocr.idfVetCase,
                   disease.idfsReference, 
                   disease.name,
                   ISNULL(h.strLastName, N'') + ISNULL(', ' + h.strFirstName, '') + ISNULL(' ' + h.strSecondName, ''),
                   --outbreakSpeciesGroupType.name,
				  osp.OutbreakSpeciesTypeID as name,
                   caseType.name,
                   statusType.name,
                   classificationType.name,
                   lh.AdminLevel2Name + ', ' + lh.AdminLevel1Name,
                   vc.datEnteredDate,
                   vc.datReportDate,
                   vc.datInvestigationDate,
                   ISNULL(personReportedBy.strFamilyName, N'') + ISNULL(', ' + personReportedBy.strFirstName, '')
                   + ISNULL(' ' + personReportedBy.strSecondName, ''),
                   ISNULL(personInvestigatedBy.strFamilyName, N'')
                   + ISNULL(', ' + personInvestigatedBy.strFirstName, '')
                   + ISNULL(' ' + personInvestigatedBy.strSecondName, ''),
                   (CASE
                        WHEN vc.idfsCaseType = 10012003 THEN
                            ISNULL(f.intLivestockSickAnimalQty, '0')
                        ELSE
                            ISNULL(f.intAvianSickAnimalQty, '0')
                    END
                   ),
                   (CASE
                        WHEN vc.idfsCaseType = 10012003 THEN
                            ISNULL(f.intLivestockDeadAnimalQty, '0')
                        ELSE
                            ISNULL(f.intAvianDeadAnimalQty, '0')
                    END
                   ),
                   IsPrimaryCaseFlag,
                   osp.CaseMonitoringDuration,
                   osp.CaseMonitoringFrequency,
				   caseType.idfsReference
            FROM dbo.OutbreakCaseReport ocr
                INNER JOIN dbo.tlbOutbreak o
                    ON o.idfOutbreak = ocr.idfOutbreak
                INNER JOIN dbo.tlbVetCase vc
                    ON vc.idfVetCase = ocr.idfVetCase
                LEFT JOIN dbo.tlbFarm f
                    ON f.idfFarm = vc.idfFarm
                LEFT JOIN dbo.tlbHuman h ON h.idfHuman = f.idfHuman
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000019) disease
                    ON disease.idfsReference = vc.idfsFinalDiagnosis
                LEFT JOIN dbo.tlbGeoLocation gl
                    ON gl.idfGeoLocation = f.idfFarmAddress
                       AND gl.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                    ON lh.idfsLocation = gl.idfsLocation
                LEFT OUTER JOIN dbo.OutbreakSpeciesParameter osp
                    ON osp.idfOutbreak = ocr.idfOutbreak
                       AND osp.intRowStatus = 0
                LEFT JOIN dbo.tlbPerson personInvestigatedBy
                    ON personInvestigatedBy.idfPerson = vc.idfPersonInvestigatedBy
                LEFT JOIN dbo.tlbPerson personReportedBy
                    ON personReportedBy.idfPerson = vc.idfPersonReportedBy
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000011) classificationType
                    ON classificationType.idfsReference = ocr.OutbreakCaseClassificationID
                LEFT JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000520) statusType
                    ON statusType.idfsReference = ocr.OutbreakCaseStatusID
                LEFT JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000513) caseType
                    ON caseType.idfsReference = 10513002
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000514) outbreakSpeciesGroupType
                    ON outbreakSpeciesGroupType.idfsReference = osp.OutbreakSpeciesTypeID
            WHERE ocr.idfVetCase IS NOT NULL
                  AND ((
                          vc.idfsCaseType = 10012004
                          AND osp.OutbreakSpeciesTypeID = 10514002
                      )
                  OR (
                         vc.idfsCaseType = 10012003
                         AND osp.OutbreakSpeciesTypeID = 10514003
                     ))
                  AND ocr.intRowStatus = 0
                  AND (
                      ocr.idfOutbreak = @OutbreakID
                      OR @OutbreakID IS NULL
                  )
                  AND (
                      f.idfFarmActual = @FarmMasterID
                      OR @FarmMasterID IS NULL
                  );
        END

        IF @TodaysFollowUpsIndicator = 1
        BEGIN
            DELETE FROM @InitialResults
            WHERE CaseID NOT IN (
                                    SELECT CaseID
                                    FROM @InitialResults
                                    WHERE DateEntered > DATEADD(DAY, -MonitoringDuration, GETDATE())
                                          AND DATEDIFF(DAY, DateEntered, GETDATE()) % MonitoringFrequency = 0
                                );
        END

        IF @SearchTerm IS NULL
        BEGIN
            INSERT INTO @FinalResults
            SELECT OutbreakID,
                   EIDSSOutbreakID,
                   CaseID,
                   EIDSSCaseID,
                   HumanDiseaseReportID,
                   VeterinaryDiseaseReportID,
                   DiseaseID,
                   DiseaseName,
                   PatientOrFarmOwnerName, 
                   SpeciesTypeName,
                   CaseTypeName,
                   StatusTypeName,
                   ClassificationTypeName,
                   CaseLocation,
                   DateEntered,
                   DateOfSymptomOnset,
                   InvestigationDate,
                   ReportedByPersonName,
                   InvestigatedByPersonName,
                   TotalSickAnimalQuantity,
                   TotalDeadAnimalQuantity,
                   PrimaryCaseIndicator,
                   MonitoringDuration,
                   MonitoringFrequency,
				   OutbreakTypeID
            FROM @InitialResults;
        END
        ELSE
        BEGIN
            INSERT INTO @FinalResults
            SELECT DISTINCT
                OutbreakID,
                EIDSSOutbreakID,
                CaseID,
                EIDSSCaseID,
                HumanDiseaseReportID,
                VeterinaryDiseaseReportID,
                DiseaseID,
                DiseaseName,
                PatientOrFarmOwnerName,
                SpeciesTypeName,
                CaseTypeName,
                StatusTypeName,
                ClassificationTypeName,
                CaseLocation,
                DateEntered,
                DateOfSymptomOnset,
                InvestigationDate,
                ReportedByPersonName,
                InvestigatedByPersonName,
                TotalSickAnimalQuantity,
                TotalDeadAnimalQuantity,
                PrimaryCaseIndicator,
                MonitoringDuration,
                MonitoringFrequency,
				OutbreakTypeID
            FROM @InitialResults
            WHERE EIDSSOutbreakID LIKE '%' + @SearchTerm + '%'
                  OR EIDSSCaseID LIKE '%' + @SearchTerm + '%'
                  OR HumanDiseaseReportID LIKE '%' + @SearchTerm + '%'
                  OR VeterinaryDiseaseReportID LIKE '%' + @SearchTerm + '%'
                  OR CaseTypeName LIKE '%' + @SearchTerm + '%'
                  OR StatusTypeName LIKE '%' + @SearchTerm + '%'
                  OR DateOfSymptomOnset LIKE '%' + @SearchTerm + '%'
                  OR ClassificationTypeName LIKE '%' + @SearchTerm + '%'
                  OR CaseLocation LIKE '%' + @SearchTerm + '%'
                  OR DateEntered LIKE '%' + @SearchTerm + '%'
        END;

        WITH CTEResults
        AS (SELECT ROW_NUMBER() OVER (ORDER BY CASE
                                                   WHEN @SortColumn = 'EIDSSOutbreakID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       EIDSSOutbreakID
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSOutbreakID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       EIDSSOutbreakID
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSCaseID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       EIDSSCaseID
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSCaseID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       EIDSSCaseID
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'CaseTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       CaseTypeName
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'CaseTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       CaseTypeName
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'StatusTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       StatusTypeName
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'StatusTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       StatusTypeName
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'DiseaseName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       DiseaseName
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'DiseaseName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       DiseaseName
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'SpeciesTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       SpeciesTypeName
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'SpeciesTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       SpeciesTypeName
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'DateOfSymptomOnset'
                                                        AND @SortOrder = 'ASC' THEN
                                                       DateOfSymptomOnset
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'DateOfSymptomOnset'
                                                        AND @SortOrder = 'DESC' THEN
                                                       DateOfSymptomOnset
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'InvestigationDate'
                                                        AND @SortOrder = 'ASC' THEN
                                                       InvestigationDate
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'InvestigationDate'
                                                        AND @SortOrder = 'DESC' THEN
                                                       InvestigationDate
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'ClassificationTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       ClassificationTypeName
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'ClassificationTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       ClassificationTypeName
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'CaseLocation'
                                                        AND @SortOrder = 'ASC' THEN
                                                       CaseLocation
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'CaseLocation'
                                                        AND @SortOrder = 'DESC' THEN
                                                       CaseLocation
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'DateEntered'
                                                        AND @SortOrder = 'ASC' THEN
                                                       DateEntered
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'DateEntered'
                                                        AND @SortOrder = 'DESC' THEN
                                                       DateEntered
                                               END DESC
                                     ) AS ROWNUM,
                   COUNT(*) OVER () AS [RowCount],
                   EIDSSOutbreakID,
                   CaseID,
                   EIDSSCaseID,
                   HumanDiseaseReportID, 
                   VeterinaryDiseaseReportID, 
                   DiseaseID,
                   DiseaseName,
                   PatientOrFarmOwnerName,
                   SpeciesTypeName,
                   CaseTypeName,
                   StatusTypeName,
                   ClassificationTypeName,
                   CaseLocation,
                   DateEntered,
                   DateOfSymptomOnset,
                   InvestigationDate,
                   ReportedByPersonName,
                   InvestigatedByPersonName,
                   TotalSickAnimalQuantity,
                   TotalDeadAnimalQuantity,
                   PrimaryCaseIndicator,
                   MonitoringDuration,
                   MonitoringFrequency,
				   OutbreakTypeID
            FROM @FinalResults
           )
        SELECT DISTINCT EIDSSOutbreakID,
               CaseID,
               EIDSSCaseID,
               HumanDiseaseReportID, 
               VeterinaryDiseaseReportID, 
               DiseaseID,
               DiseaseName,
               PatientOrFarmOwnerName,
               --SpeciesTypeName,
               CaseTypeName,
               StatusTypeName,
               ClassificationTypeName,
               CaseLocation,
               DateEntered,
               DateOfSymptomOnset,
               InvestigationDate,
               ReportedByPersonName,
               InvestigatedByPersonName,
               TotalSickAnimalQuantity,
               TotalDeadAnimalQuantity,
               PrimaryCaseIndicator,
               MonitoringDuration,
               MonitoringFrequency,
			   OutbreakTypeID,
               [RowCount],
               (
                   SELECT COUNT(*) FROM dbo.OutbreakCaseReport WHERE intRowStatus = 0
               ) AS TotalRowCount,
               CurrentPage = @Page,
               TotalPages = ([RowCount] / @PageSize) + IIF([RowCount] % @PageSize > 0, 1, 0)
        FROM CTEResults
        WHERE RowNum > @FirstRec
              AND RowNum < @LastRec;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_OMM_Case_Set]...';


GO
-- ================================================================================================
-- Name: [USP_OMM_Case_Set]
-- Description: Insert/Update for Outbreak Case
--          
-- Author: Doug Albanese
-- Revision History
--	Name			Date		Change Detail
--  Doug Albanese	5/21/2020	Moved the Case Monitoring SP call to this SP from USP_OMM_HUMAN_DISEASE_SET
--	Doug Albanese	10/12/2020	Corrected Audit information
--	Doug Albanese	10/01/2021	Cleaned up and prepped for EF
--	Doug Albanese	04/19/2022	Refactored to use location hierarchy
--	Doug Albanese	04/21/2022	Formatted and some refactoring
--	Doug Albanese	04/27/2022	Refactored paramters to eliminate unused 
--	Doug Albanese	04/28/2022	Further Clean up to align with json array detection
--	Doug Albanese	04/30/2022	Added idfHumanCase to contacts USSP
--	Doug Albanese	05/02/2022	Refactored Antimicrobial
--	Doug Albanese	05/06/2022	Corrected "Start Date of Investigation"...wrong parameter used previously
--	Doug Albanese	05/06/2022	Corrected Street/Postalcode data types
--  Stephen Long    05/21/2022  Fix to idfsSite on call to USP_ADMIN_FF_COPY_OBSERVATION.
--                              Added begin transaction and commit transaction.
--	Doug Albanese	05/23/2022	Supression on USSP_OMM_CONTACT_SET was nested too deep. Using Functional Call only to get around
--	Doug Albanese	06/01/2022	Removal of transaction block to allow nested calls to function properly.
--	Doug Albanese	07/01/2022	Changes to fix the Copy process of an observation and flex form template for use within an outbreak case
-- Stephen Long     07/18/2022  Added site alert logic.
-- Doug Albanese  09/22/2022  Removed supression on USP_ADMIN_FF_Copy_Observation
-- Doug Albanese  10/19/2022  Corrected the "@StartDateofInvestigation" to have the right parameter passed.
-- Doug Albanese  10/25/2022  Put the Case Questionnnaire in the right location on the Outbreak Case Report side.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_OMM_Case_Set]
(
    @LangID NVARCHAR(50),
    @intRowStatus INT = 0,
    @User NVARCHAR(100) = NULL,

    --Outbreak Case Details
    @OutbreakCaseReportUID BIGINT = -1,
    @idfOutbreak BIGINT = NULL,
    @idfHumanCase BIGINT = -1,
    @idfVetCase BIGINT = NULL,
    @OutbreakCaseObservationID BIGINT = NULL,

    --Human Disease related items for creation
    @idfHumanActual BIGINT = -1,
    @idfsDiagnosisOrDiagnosisGroup BIGINT = -1,

    --Notification
    @datNotificationDate DATETIME = NULL,
    @idfSentByOffice BIGINT = NULL,
    @idfSentByPerson BIGINT = NULL,
    @idfReceivedByOffice BIGINT = NULL,
    @idfReceivedByPerson BIGINT = NULL,

    --Case Location
    @CaseGeoLocationID BIGINT = NULL,
    @CaseidfsLocation BIGINT = NULL,
    @CasestrStreetName NVARCHAR(200) = NULL,
    @CasestrApartment NVARCHAR(200) = NULL,
    @CasestrBuilding NVARCHAR(200) = NULL,
    @CasestrHouse NVARCHAR(200) = NULL,
    @CaseidfsPostalCode NVARCHAR(200) = NULL,
    @CasestrLatitude FLOAT = NULL,
    @CasestrLongitude FLOAT = NULL,
    @CasestrElevation FLOAT = NULL,

    --Clinical Information
    @CaseStatusID BIGINT = NULL,
    @datOnSetDate DATETIME = NULL,
    @datFinalDiagnosisDate DATETIME = NULL,
    @idfHospital BIGINT = NULL,
    @datHospitalizationDate DATETIME = NULL,
    @datDischargeDate DATETIME = NULL,
    @Antimicrobials NVARCHAR(MAX) = NULL,
    @vaccinations NVARCHAR(MAX) = NULL,
    @strClinicalNotes NVARCHAR(500) = NULL,
    @idfsYNHospitalization BIGINT = NULL,
    @idfsYNAntimicrobialTherapy BIGINT = NULL,
    @idfsYNSpecIFicVaccinationAdministered BIGINT = NULL,
    @StartDateofInvestigation DATETIME = NULL,
    @idfCSObservation BIGINT = NULL,

    --Outbreak Investigation
    @OutbreakCaseClassificationID BIGINT = NULL,
    @idfInvestigatedByOffice BIGINT = NULL,
    @idfInvestigatedByPerson BIGINT = NULL,
    @datInvestigationStartDate DATETIME = NULL,
    @IsPrimaryCaseFlag NVARCHAR(1) = NULL,
    @strNote NVARCHAR(500) = NULL,
    @idfEpiObservation BIGINT = NULL,

    --Case Monitoring
    @CaseMonitorings NVARCHAR(MAX) = NULL,

    --Contacts
    @CaseContacts NVARCHAR(MAX) = NULL,

    --Samples
    @idfsYNSpecimenCollected BIGINT = NULL,
    @CaseSamples NVARCHAR(MAX) = NULL,

    --Tests
    @idfsYNTestsConducted BIGINT = NULL,
    @CaseTests NVARCHAR(MAX) = NULL,
    @Events NVARCHAR(MAX) = NULL
)
AS
BEGIN
    DECLARE @returnCode INT = 0
    DECLARE @returnMsg NVARCHAR(MAX) = 'SUCCESS'
    DECLARE @SiteID BIGINT = (
                                 SELECT idfsSite FROM dbo.tlbOutbreak WHERE idfOutbreak = @idfOutbreak
                             )
    DECLARE @outbreakLocation BIGINT = NULL
    DECLARE @strHospitalizationPlace NVARCHAR(200)
    DECLARE @idfHuman BIGINT = NULL
    DECLARE @strHumanCaseId NVARCHAR(200)
    DECLARE @idfsFinalState BIGINT = NULL

    DECLARE @idfContactCasePerson BIGINT
    DECLARE @ContactRelationshipTypeID BIGINT
    DECLARE @DateOfLastContact DATETIME
    DECLARE @datDateOfLastContact DATETIME2
    DECLARE @PlaceOfLastContact NVARCHAR(200)
    DECLARE @ContactStatusID BIGINT
    DECLARE @DateOfLastContact2 VARCHAR(10)
    DECLARE @idfsPersonContactType BIGINT
    DECLARE @idfContactedCasePerson BIGINT
    DECLARE @SQL VARCHAR(MAX)
    DECLARE @RowID BIGINT = NULL
    DECLARE @OutbreakCaseContactUID BIGINT = NULL
    DECLARE @ContactComments NVARCHAR(200) = NULL
    DECLARE @ContactTypeID BIGINT = NULL

    DECLARE @PrepCollections INT = 0
    DECLARE @ExecuteHumanSP INT = 0
    DECLARE @CreateOutbreakCase INT = 0
    DECLARE @ExecuteVetSP INT = 0
    DECLARE @HumanSamplesTemp NVARCHAR(MAX) = NULL
    DECLARE @HumanContactsTemp NVARCHAR(MAX) = NULL

    DECLARE @idfsFormTemplate BIGINT
    DECLARE @idfsFormTemplateNew BIGINT

    DECLARE @strCaseID NVARCHAR(50) = NULL
    DECLARE @idfObservation BIGINT = NULL

    DECLARE @EventId BIGINT,
            @EventTypeId BIGINT = NULL,
            @EventSiteId BIGINT = NULL,
            @EventObjectId BIGINT = NULL,
            @EventUserId BIGINT = NULL,
            @EventDiseaseId BIGINT = NULL,
            @EventLocationId BIGINT = NULL,
            @EventInformationString NVARCHAR(MAX) = NULL,
            @EventLoginSiteId BIGINT = NULL;

    DECLARE @EventsTemp TABLE
    (
        EventId BIGINT NOT NULL,
        EventTypeId BIGINT NULL,
        UserId BIGINT NULL,
        SiteId BIGINT NULL,
        LoginSiteId BIGINT NULL,
        ObjectId BIGINT NULL,
        DiseaseId BIGINT NULL,
        LocationId BIGINT NULL,
        InformationString NVARCHAR(MAX) NULL
    );

    SET NOCOUNT ON

    BEGIN TRY
        --BEGIN TRANSACTION;

        if (@idfCSObservation = 0)
            SET @idfCSObservation = NULL

        --Because of the JSON Table data being passed, the value of NULL is converted to a string. In these cases, they must be set to a True NULL
        IF (@Antimicrobials = 'NULL' OR @Antimicrobials = '[]')
            SET @Antimicrobials = NULL
        IF (@vaccinations = 'NULL' OR @vaccinations = '[]')
            SET @vaccinations = NULL
        IF (@CaseMonitorings = 'NULL' OR @CaseMonitorings = '[]')
            SET @CaseMonitorings = NULL
        IF (@CaseContacts = 'NULL' OR @CaseContacts = '[]')
            SET @CaseContacts = NULL
        IF (@CaseSamples = 'NULL' OR @CaseSamples = '[]')
            SET @CaseSamples = NULL
        IF (@CaseTests = 'NULL' OR @CaseTests = '[]')
            SET @CaseTests = NULL

        --Table calls for NCHAR, but we are going to need an integer to convert into boolean
        IF (@IsPrimaryCaseFlag = 't')
        BEGIN
            SET @IsPrimaryCaseFlag = 1
        END
        ELSE
        BEGIN
            SET @IsPrimaryCaseFlag = 0
        END

        Declare @SupressSelect table
        (
            retrunCode int,
            returnMsg varchar(200)
        )

        INSERT INTO @EventsTemp
        SELECT *
        FROM
            OPENJSON(@Events)
            WITH
            (
                EventId BIGINT,
                EventTypeId BIGINT,
                UserId BIGINT,
                SiteId BIGINT,
                LoginSiteId BIGINT,
                ObjectId BIGINT,
                DiseaseId BIGINT,
                LocationId BIGINT,
                InformationString NVARCHAR(MAX)
            );

        --This condition was added later, after I found out that I created a bad architecture
        IF @idfVetCase IS NOT NULL
        BEGIN
            SET @ExecuteVetSP = 1

            IF EXISTS
            (
                SELECT OutBreakCaseReportUID
                FROM dbo.OutbreakCaseReport
                WHERE OutBreakCaseReportUID = @OutBreakCaseReportUID
            )
            BEGIN
                --Case is already created
                --This can only be an update of information across the outbreak and human case elements.
                UPDATE dbo.OutbreakCaseReport
                SET idfOutbreak = @idfOutbreak,
                    OutbreakCaseObservationID = @OutbreakCaseObservationID,
                    OutbreakCaseStatusID = @CaseStatusID,
                    OutbreakCaseClassificationID = @OutbreakCaseClassificationID,
                    IsPrimaryCaseFlag = @IsPrimaryCaseFlag,
                    intRowStatus = @intRowStatus,
                    AuditUpdateUser = @User,
                    AuditUpdateDTM = GETDATE()
                WHERE OutBreakCaseReportUID = @OutBreakCaseReportUID

            END
            ELSE
            BEGIN
                --At this point, the outbreak case doesn't exist.
                --This means, it could be an import or a creation from the outbreak side.
                --regardless of this situation, we need to get an idea for the Outbreak case being created.
                INSERT INTO @SupressSelect
                EXEC dbo.USP_GBL_NEXTKEYID_GET 'OutbreakCaseReport',
                                               @OutBreakCaseReportUID OUTPUT;

                DECLARE @strOutbreakCaseID NVARCHAR(200)

                --If a human case id was passed, we are performing an import
                IF @idfVetCase IS NOT NULL
                   AND @idfVetCase <> -1
                BEGIN
                    --To keep duplicate imports from occuring, check to make sure a record doesn't already exist within the case listing of the outbreak session
                    IF NOT EXISTS
                    (
                        SELECT OutBreakCaseReportUID
                        FROM dbo.OutbreakCaseReport
                        WHERE idfOutbreak = @idfOutbreak
                              AND idfVetCase = @idfVetCase
                              AND intRowStatus = 0
                    )
                    BEGIN
                        INSERT INTO @SupressSelect
                        EXEC dbo.USP_GBL_NextNumber_GET 'Vet Outbreak Case',
                                                        @strOutbreakCaseID OUTPUT,
                                                        NULL;

                        INSERT INTO dbo.OutbreakCaseReport
                        (
                            OutbreakCaseReportUID,
                            idfOutbreak,
                            strOutbreakCaseID,
                            --idfHumanCase,
                            idfVetCase,
                            OutbreakCaseObservationId,
                            OutbreakCaseStatusId,
                            OutbreakCaseClassificationID,
                            isPrimaryCaseFlag,
                            introwStatus,
                            AuditCreateUser,
                            AuditCreateDTM,
                            AuditUpdateUser,
                            AuditUpdateDTM
                        )
                        VALUES
                        (   @OutBreakCaseReportUID,
                            @idfOutbreak,
                            @strOutbreakCaseID,
                            --NULL,
                            @idfVetCase,
                            @idfEpiObservation,
                            @CaseStatusID,
                            @OutbreakCaseClassificationID,
                            @IsPrimaryCaseFlag,
                            0,
                            @User,
                            GETDATE(),
                            NULL,
                            NULL
                        )
                    END
                    --Tie the outbreak case and the human case together, using the outbreak session id (idfOutbreak)
                    --This will complete the import process, as all information pertain to the case will now be
                    --joined in a "getdetails", when retrieved on the outbreak side.
                    UPDATE dbo.tlbVetCase
                    SET idfOutbreak = @idfOutbreak
                    WHERE idfVetCase = @idfVetCase

                    SELECT @idfObservation = idfObservation
                    FROM dbo.tlbVetCase
                    WHERE idfVetCase = @idfVetCase

                    --INSERT INTO @SupressSelect
                    EXEC dbo.USP_ADMIN_FF_Copy_Observation @idfObservation = @idfObservation,
                                                           @User = @User,
                                                           @idfsSite = @SiteID
                    UPDATE dbo.OutbreakCaseReport
                    SET OutbreakCaseObservationID = @idfObservation
                    WHERE OutBreakCaseReportUID = @OutBreakCaseReportUID
                END
            END
        END
        ELSE
        BEGIN
            IF EXISTS
            (
                SELECT OutBreakCaseReportUID
                FROM dbo.OutbreakCaseReport
                WHERE OutBreakCaseReportUID = @OutBreakCaseReportUID
            )
            BEGIN
                --Case is already created
                --This can only be an update of information across the outbreak and human case elements.
                UPDATE dbo.OutbreakCaseReport
                SET idfOutbreak = @idfOutbreak,
                    OutbreakCaseObservationID = @OutbreakCaseObservationID,
                    OutbreakCaseStatusID = @CaseStatusID,
                    OutbreakCaseClassificationID = @OutbreakCaseClassificationID,
                    IsPrimaryCaseFlag = @IsPrimaryCaseFlag,
                    intRowStatus = @intRowStatus,
                    AuditUpdateUser = @User,
                    AuditUpdateDTM = GETDATE()
                WHERE OutBreakCaseReportUID = @OutBreakCaseReportUID

                SET @PrepCollections = 1
                SET @ExecuteHumanSP = 1
            END
            ELSE
            BEGIN
                --At this point, the outbreak case doesn't exist.
                --This means, it could be an import or a creation from the outbreak side.

                --regardless of this situation, we need to get an id for the Outbreak case being created.
                INSERT INTO @SupressSelect
                EXEC dbo.USP_GBL_NEXTKEYID_GET 'OutbreakCaseReport',
                                               @OutBreakCaseReportUID OUTPUT;

                --If a human case id was passed, we are performing an import
                IF @idfHumanCase IS NOT NULL
                   AND @idfHumanCase <> -1
                BEGIN
                    --To keep duplicate imports from occuring, check to make sure a record doesn't already exist within the case listing of the outbreak session
                    IF NOT EXISTS
                    (
                        SELECT OutBreakCaseReportUID
                        FROM OutbreakCaseReport
                        WHERE idfOutbreak = @idfOutbreak
                              AND idfHumanCase = @idfHumanCase
                              AND intRowStatus = 0
                    )
                    BEGIN
                        --It doesn't exist, so we need to create a case "smart id", on the outbreak side, for the item being imported.
                        INSERT INTO @SupressSelect
                        EXEC dbo.USP_GBL_NextNumber_GET 'Human Outbreak Case',
                                                        @strOutbreakCaseID OUTPUT,
                                                        NULL;

                        --Generate a shell record in the case table to denote the item from the human case being imported
                        --Below is the minimal amount of fields needed to create the case. All other information will be entered
                        --during the editing phase
                        INSERT INTO dbo.OutbreakCaseReport
                        (
                            OutBreakCaseReportUID,
                            idfOutbreak,
                            strOutbreakCaseID,
                            idfHumanCase,
                            intRowStatus,
                            AuditCreateUser,
                            AuditCreateDTM,
                            AuditUpdateUser,
                            AuditUpdateDTM
                        )
                        VALUES
                        (@OutBreakCaseReportUID,
                         @idfOutbreak,
                         @strOutbreakCaseID,
                         @idfHumanCase,
                         0  ,
                         @User,
                         GETDATE(),
                         NULL,
                         NULL
                        )

                        /*Temp solution??? To tie in datFinalDiagnosisDate with datTentativeDiagnosisDate*/
                        UPDATE dbo.tlbHumanCase
                        SET datFinalDiagnosisDate = datTentativeDiagnosisDate,
                            AuditUpdateUser = @User
                        WHERE idfHumanCase = @idfHumanCase
                              AND datFinalDiagnosisDate IS NULL

                        UPDATE dbo.tlbHumanCase
                        SET idfOutbreak = @idfOutbreak,
                            AuditUpdateUser = @User
                        WHERE idfHumanCase = @idfHumanCase

                        SELECT @idfEPIObservation = idfEPIObservation,
                               @idfCSObservation = idfCSObservation
                        FROM dbo.tlbHumanCase
                        WHERE idfHumanCase = @idfHumanCase

                        IF COALESCE(@idfEpiObservation, 0) > 0
                        BEGIN
                            SELECT @idfsFormTemplate = idfsFormTemplate
                            FROM tlbObservation
                            WHERE idfObservation = @idfEPIObservation

                            EXEC dbo.USP_ADMIN_FF_Copy_Observation @idfObservation = @idfEPIObservation OUTPUT,
                                                                   @User = @User,
                                                                   @idfsSite = @SiteID

                            EXEC USP_OMM_FF_Copy_Template @LangId = @LangId,
                                                          @idfsFormTemplate = @idfsFormTemplate,
                                                          @User = @User,
                                                          @idfsSite = @SiteID,
                                                          @idfsNewFormType = 10034501

                            SELECT @idfsFormTemplateNew = idfsFormTemplate
                            FROM ffFormTemplate
                            WHERE AuditCreateUser = @User
                                  AND idfsFormType = 10034501
                                  AND idfsFormTemplate = @idfsFormTemplate

                            UPDATE tlbObservation
                            SET idfsFormTemplate = @idfsFormTemplateNew
                            WHERE idfObservation = @idfObservation
                                  AND idfsFormTemplate = @idfsFormTemplate
                        END

                        IF COALESCE(@idfCSObservation, 0) > 0
                        BEGIN
                            INSERT INTO @SupressSelect
                            EXEC dbo.USP_ADMIN_FF_Copy_Observation @idfObservation = @idfCSObservation,
                                                                   @User = @User,
                                                                   @idfsSite = @SiteID

                            UPDATE dbo.OutbreakCaseReport
                            SET OutbreakCaseObservationID = @idfCSObservation,
                                AuditUpdateUser = @User
                            WHERE OutBreakCaseReportUID = @OutBreakCaseReportUID
                        END
                    END
                END
                ELSE
                BEGIN
                    --At this point, the data being passed is only pertaining to the manual creation of
                    --a Human Case from the outbreak side.
                    SET @CreateOutbreakCase = 1
                    SET @PrepCollections = 1
                    SET @ExecuteHumanSP = 1

                END
            END
        END

		
        IF @ExecuteHumanSP = 1
        BEGIN
            INSERT INTO @SupressSelect
            EXEC dbo.USP_OMM_HUMAN_DISEASE_SET @idfHumanCase OUTPUT,
                                               @strHumanCaseId = @strHumanCaseId,
                                               @OutbreakCaseReportUID = @OutbreakCaseReportUID,
                                               @idfHumanActual = @idfHumanActual,
                                               @idfsFinalDiagnosis = @idfsDiagnosisOrDiagnosisGroup,
                                               @datDateOfDiagnosis = @datFinalDiagnosisDate,
                                               @datNotificationDate = @datNotificationDate,
                                               @idfsFinalState = @idfsFinalState,
                                               @idfSentByOffice = @idfSentByOffice,
                                               @idfSentByPerson = @idfSentByPerson,
                                               @idfReceivedByOffice = @idfReceivedByOffice,
                                               @idfReceivedByPerson = @idfReceivedByPerson,
                                               @idfHospital = @idfHospital,
                                               @datOnSetDate = @datOnSetDate,
                                               @idfsYNHospitalization = @idfsYNHospitalization,
                                               @datHospitalizationDate = @datHospitalizationDate,
                                               @datDischargeDate = @datDischargeDate,
                                               @strHospitalName = @strHospitalizationPlace,
                                               @idfsYNAntimicrobialTherapy = @idfsYNAntimicrobialTherapy,
                                               @strClinicalNotes = @strClinicalNotes,
                                               @strNote = @strNote,
                                               @idfsYNSpecIFicVaccinationAdministered = @idfsYNSpecIFicVaccinationAdministered,
                                               @idfInvestigatedByOffice = @idfInvestigatedByOffice,
                                               @idfInvestigatedByPerson = @idfInvestigatedByPerson,
                                               @StartDateofInvestigation = @StartDateofInvestigation,
                                               @idfOutbreak = @idfOutbreak,
                                               @CaseGeoLocationID = @CaseGeoLocationID,
                                               @CaseidfsLocation = @CaseidfsLocation,
                                               @CasestrStreetName = @CasestrStreetName,
                                               @CasestrApartment = @CasestrApartment,
                                               @CasestrBuilding = @CasestrBuilding,
                                               @CasestrHouse = @CasestrHouse,
                                               @CaseidfsPostalCode = @CaseidfsPostalCode,
                                               @CasestrLatitude = @CasestrLatitude,
                                               @CasestrLongitude = @CasestrLongitude,
                                               @CasestrElevation = @CasestrElevation,
                                               @SamplesParameters = @CaseSamples,
                                               @idfsYNSpecimenCollected = @idfsYNSpecimenCollected,
                                               @idfsYNTestsConducted = @idfsYNTestsConducted,
                                               @TestsParameters = @CaseTests,
                                               @AntiviralTherapiesParameters = @Antimicrobials,
                                               @VaccinationsParameters = @vaccinations,
                                               @CaseMonitoringsParameters = @CaseMonitorings,
                                               @User = @User,
                                               @idfEpiObservation = @idfEpiObservation,
                                               @idfCSObservation = @idfCSObservation

            INSERT INTO @SupressSelect
            EXEC dbo.USSP_OMM_CASE_MONITORING_SET @CaseMonitorings = @CaseMonitorings,
                                                  @HumanDiseaseReportID = @idfHumanCase,
                                                  @User = @User

            --Update the tblHumanCase with the Outbreak Id related by the import process.
            UPDATE tlbHumanCase
            SET idfOutbreak = @idfOutbreak,
                AuditUpdateUser = @User
            WHERE idfHumanCase = @idfHumanCase
        END

        IF @CreateOutbreakCase = 1
        BEGIN
            --Create the outbreak case, with full information
            INSERT INTO @SupressSelect
            EXEC dbo.USP_GBL_NextNumber_GET 'Human Outbreak Case',
                                            @strOutbreakCaseID OUTPUT,
                                            NULL;

            INSERT INTO dbo.OutbreakCaseReport
            (
                OutBreakCaseReportUID,
                idfOutbreak,
                strOutbreakCaseID,
                idfHumanCase,
                idfVetCase,
                OutbreakCaseStatusID,
                OutbreakCaseClassificationID,
                IsPrimaryCaseFlag,
                intRowStatus,
                AuditCreateUser,
                AuditCreateDTM,
                AuditUpdateUser,
                AuditUpdateDTM
            )
            VALUES
            (@OutBreakCaseReportUID,
             @idfOutbreak,
             @strOutbreakCaseID,
             @idfHumanCase,
             @idfVetCase,
             @CaseStatusID,
             @OutbreakCaseClassificationID,
             @IsPrimaryCaseFlag,
             COALESCE(@intRowStatus, 0),
             @User,
             GETDATE(),
             NULL,
             NULL
            )
        END

        --Add/Update any contacts
        IF @CaseContacts IS NOT NULL
        BEGIN
            --INSERT INTO @SupressSelect
            EXEC dbo.USSP_OMM_CONTACT_SET @idfHumanCase,
                                          @CaseContacts,
                                          @User = @User,
                                          @OutbreakCaseReportUID = @OutbreakCaseReportUID,
                                          @FunctionCall = 1;
        END

        WHILE EXISTS (SELECT * FROM @EventsTemp)
        BEGIN
            SELECT TOP 1
                @EventId = EventId,
                @EventTypeId = EventTypeId,
                @EventUserId = UserId,
                @EventObjectId = ObjectId,
                @EventSiteId = SiteId,
                @EventDiseaseId = DiseaseId,
                @EventLocationId = LocationId,
                @EventInformationString = InformationString,
                @EventLoginSiteId = LoginSiteId
            FROM @EventsTemp;

            INSERT INTO @SupressSelect
            EXECUTE dbo.USP_ADMIN_EVENT_SET @EventId,
                                            @EventTypeId,
                                            @EventUserId,
                                            @EventObjectId,
                                            @EventDiseaseId,
                                            @EventSiteId,
                                            @EventInformationString,
                                            @EventLoginSiteId,
                                            @EventLocationId,
                                            @User;

            DELETE FROM @EventsTemp
            WHERE EventId = @EventId;
        END;

        SELECT @returnCode AS ReturnCode,
               @returnMsg AS ReturnMessage,
               @strOutbreakCaseID AS strOutbreakCaseId,
               @OutbreakCaseReportUID AS OutbreakCaseReportUID;
    END TRY
    BEGIN CATCH

        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_OMM_Contact_GetList]...';


GO
-- ================================================================================================
-- Name: USP_OMM_Contact_GetList
--
-- Description: Gets a list of contacts for a given outbreak case.
--          
-- Author: Doug Albanese
-- Revision History:
--	Name				Date		Change Detail
--	---------------	----------	--------------------------------------------------------------------
--	Doug Albanese	02/20/2019	Added Procedure to obtain list of contacts for given case
--	Doug Albanese	06/08/2020	Added phone number to the data return
--	Stephen Long	04/08/2022	Added new pagination and sorting parameters and logic.
--	Stephen Long	04/29/2022	Updated parameter names and corrected contact relationship type join.
--	Stephen Long	05/01/2022	Added age and citizenship type name fields and join.
--	Stephen Long	05/03/2022	Added additional rules for removing when today's followups is 
--								checked.
--	Doug Albanese	08/15/2022	Changed ContactStatusTypeID to ContactStatusID, and ContactStatusTypeName to ContactStatusName
-- Stephen Long     10/25/2022  Added additional criteria for outbreak species type eliminate 
--                              duplicates on outbreak sessions with multiple species checked.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_OMM_Contact_GetList]
(
    @LanguageID NVARCHAR(50),
    @PageNumber INT = 1,
    @PageSize INT = 10,
    @SortColumn NVARCHAR(30) = 'ContactName',
    @SortOrder NVARCHAR(4) = 'ASC',
    @CaseID BIGINT = NULL,
    @OutbreakID BIGINT = NULL,
    @SearchTerm NVARCHAR(100) = NULL,
    @TodaysFollowUpsIndicator BIT = NULL
)
AS
BEGIN
    DECLARE @ReturnCode INT = 0;
    DECLARE @ReturnMessage NVARCHAR(MAX) = 'SUCCESS';
    DECLARE @FirstRec INT = (@PageNumber - 1) * @PageSize,
            @LastRec INT = (@PageNumber * @PageSize + 1),
            @TotalRowCount INT;

    DECLARE @Contacts AS TABLE
    (
        TotalRowCount BIGINT NULL,
        CaseContactID BIGINT NULL,
        CaseID BIGINT NULL, 
        OutbreakTypeID BIGINT, 
        DiseaseID BIGINT, 
        ContactedHumanCasePersonID BIGINT NULL,
        PersonalIDTypeID BIGINT NULL, 
        PersonalID NVARCHAR(200) NULL, 
        FirstName NVARCHAR(200) NULL, 
        SecondName NVARCHAR(200) NULL, 
        LastName NVARCHAR(200) NULL, 
        ContactName NVARCHAR(200) NULL,
        DateOfBirth DATETIME NULL, 
        Age INT NULL, 
        GenderTypeID BIGINT NULL, 
        GenderTypeName NVARCHAR(200) NULL,
        CitizenshipTypeID BIGINT NULL, 
        CitizenshipTypeName NVARCHAR(200) NULL, 
        AddressID BIGINT NULL, 
        LocationID BIGINT NULL, 
        AdministrativeLevel0ID BIGINT NULL, 
        AdministrativeLevel1ID BIGINT NULL, 
        AdministrativeLevel2ID BIGINT NULL, 
        SettlementTypeID BIGINT NULL, 
        SettlementID BIGINT NULL, 
        Apartment NVARCHAR(200) NULL, 
        Building NVARCHAR(200) NULL, 
        House NVARCHAR(200) NULL, 
        StreetID BIGINT NULL, 
        Street NVARCHAR(200) NULL,
        PostalCodeID BIGINT NULL, 
        PostalCode NVARCHAR(200) NULL,
        ForeignAddressString NVARCHAR(200) NULL, 
        DateOfLastContact DATETIME NULL,
        PlaceOfLastContact NVARCHAR(200) NULL,
        Comment NVARCHAR(500) NULL,
        ContactTypeID BIGINT NULL,
        ContactTypeName NVARCHAR(200) NULL,
        ContactStatusID BIGINT NULL,
        ContactStatusName NVARCHAR(200) NULL,
        ContactRelationshipTypeID BIGINT NULL,
        ContactRelationshipTypeName NVARCHAR(200) NULL,
        CurrentLocation NVARCHAR(200) NULL,
        ContactTracingObservationID BIGINT NULL,
        ContactTracingDuration INT NULL,
        ContactTracingFrequency INT NULL,
        VeterinaryDiseaseReportTypeID BIGINT NULL, 
        EIDSSPersonID NVARCHAR(50),
        HumanID BIGINT NULL, 
        HumanMasterID BIGINT,
        ContactPhoneTypeID BIGINT NULL, 
        ContactPhoneCountryCode INT NULL, 
        ContactPhone NVARCHAR(50) NULL
    );

    DECLARE @OutbreakCaseReportUIDs AS TABLE (OutbreakCaseReportUID BIGINT);

    IF COALESCE(@OutbreakID, 0) > 0
    BEGIN
        INSERT INTO @OutbreakCaseReportUIDs
        SELECT OutbreakCaseReportUID
        FROM dbo.OutbreakCaseReport
        WHERE idfOutbreak = @OutbreakId;
    END

    IF COALESCE(@CaseID, 0) > 0
    BEGIN
        INSERT INTO @OutbreakCaseReportUIDs
        SELECT @CaseID;
    END

    IF @TodaysFollowUpsIndicator = 1 
    BEGIN
        SET @SortColumn = 'DateOfLastContact';
        SET @SortOrder = 'ASC';
    END

    BEGIN TRY
        IF COALESCE(@SearchTerm, '') = ''
        BEGIN
            --Get the count of records for pagination
            SELECT @TotalRowCount = COUNT(DISTINCT OutbreakCaseContactUID)
            FROM dbo.OutbreakCaseContact occ
                INNER JOIN @OutbreakCaseReportUIDs ocr
                    ON ocr.OutbreakCaseReportUID = occ.OutBreakCaseReportUID
            WHERE occ.intRowStatus = 0;

            INSERT INTO @Contacts
            (
                TotalRowCount,
                CaseContactID,
                CaseID,
                OutbreakTypeID, 
                DiseaseID, 
                ContactedHumanCasePersonID,
                PersonalIDTypeID,
                PersonalID, 
                FirstName, 
                SecondName, 
                LastName, 
                ContactName,
                DateOfBirth, 
                Age, 
                GenderTypeID,
                GenderTypeName,
                CitizenshipTypeID,
                CitizenshipTypeName, 
                AddressID, 
                LocationID, 
                AdministrativeLevel0ID, 
                AdministrativeLevel1ID, 
                AdministrativeLevel2ID,
                SettlementTypeID, 
                SettlementID, 
                Apartment, 
                Building, 
                House, 
                StreetID, 
                Street, 
                PostalCodeID, 
                PostalCode,
                ForeignAddressString, 
                DateOfLastContact,
                PlaceOfLastContact,
                Comment,
                ContactTypeID,
                ContactTypeName,
                ContactStatusID,
                ContactStatusName,
                ContactRelationshipTypeID,
                ContactRelationshipTypeName,
                CurrentLocation,
                ContactTracingObservationID, 
                ContactTracingDuration,
                ContactTracingFrequency,
                VeterinaryDiseaseReportTypeID, 
                EIDSSPersonID,
                HumanID, 
                HumanMasterID,
                ContactPhoneTypeID, 
                ContactPhoneCountryCode,
                ContactPhone
            )
            SELECT 
                @TotalRowCount,
                occ.OutbreakCaseContactUID,
                occ.OutBreakCaseReportUID,
                o.OutbreakTypeID, 
                o.idfsDiagnosisOrDiagnosisGroup, 
                occ.ContactedHumanCasePersonID,
                h.idfsPersonIDType, 
                h.strPersonID, 
                h.strFirstName, 
                h.strSecondName, 
                h.strLastName, 
                h.strLastName + ', ' + h.strFirstName,
                h.datDateofBirth,
                haai.ReportedAge,
                h.idfsHumanGender,
                gender.name,
                h.idfsNationality,
                citizenshipType.name, 
                h.idfCurrentResidenceAddress, 
                geo.idfsLocation, 
                lh.AdminLevel1ID, 
                lh.AdminLevel2ID, 
                lh.AdminLevel3ID, 
                settlement.idfsType, 
                settlement.idfsLocation,
                geo.strApartment, 
                geo.strBuilding, 
                geo.strHouse, 
                st.idfStreet, 
                geo.strStreetName, 
                pc.idfPostalCode,
                geo.strPostCode, 
                geo.strForeignAddress, 
                occ.DateOfLastContact,
                occ.PlaceOfLastContact,
                occ.CommentText,
                occ.ContactTypeID,
                contactType.name,
                occ.ContactStatusID,
                contactStatusType.name,
                occ.ContactRelationshipTypeID,
                contactRelationshipType.name,
                lh.AdminLevel2Name + ' ' + lh.AdminLevel3Name,
                occ.ContactTracingObservationID, 
                osp.ContactTracingDuration,
                osp.ContactTracingFrequency,
                vc.idfsCaseType,
                haai.EIDSSPersonID,
                h.idfHuman, 
                h.idfHumanActual,
                haai.ContactPhoneNbrTypeID, 
                haai.ContactPhoneCountryCode, 
                haai.ContactPhoneNbr
            FROM dbo.OutbreakCaseContact occ
                LEFT JOIN dbo.OutbreakCaseReport ocr
                    ON ocr.OutBreakCaseReportUID = occ.OutBreakCaseReportUID
                INNER JOIN dbo.tlbOutbreak o 
                    ON o.idfOutbreak = ocr.idfOutbreak
                LEFT JOIN dbo.tlbVetCase vc 
                    ON vc.idfVetCase = ocr.idfVetCase
                LEFT JOIN dbo.OutbreakSpeciesParameter osp
                    ON osp.idfOutbreak = ocr.idfOutbreak 
                LEFT JOIN dbo.tlbHuman h
                    ON h.idfHuman = occ.idfHuman
                LEFT JOIN dbo.HumanActualAddlInfo haai
                    ON haai.HumanActualAddlInfoUID = h.idfHumanActual
                LEFT JOIN dbo.FN_GBL_Reference_GetList(@LanguageID, 19000043) gender
                    ON gender.idfsReference = h.idfsHumanGender
                LEFT JOIN dbo.FN_GBL_Reference_GetList(@LanguageID, 19000054) citizenshipType
                    ON citizenshipType.idfsReference = h.idfsNationality
                LEFT JOIN dbo.tlbGeoLocation geo
                    ON h.idfCurrentResidenceAddress = geo.idfGeoLocation
                LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                    ON lh.idfsLocation = geo.idfsLocation
                LEFT JOIN dbo.gisLocation settlement
                    ON settlement.idfsLocation = geo.idfsLocation AND settlement.idfsType IS NOT NULL
                LEFT JOIN dbo.tlbStreet st
                    ON st.strStreetName = geo.strStreetName
                LEFT JOIN dbo.tlbPostalCode pc
                    ON pc.strPostCode = geo.strPostCode
                LEFT JOIN dbo.FN_GBL_Reference_GetList(@LanguageID, 19000516) contactType
                    ON contactType.idfsReference = occ.ContactTypeID
                LEFT JOIN dbo.FN_GBL_Reference_GetList(@LanguageID, 19000517) contactStatusType
                    ON contactStatusType.idfsReference = occ.ContactStatusID
                LEFT JOIN dbo.FN_GBL_Reference_GetList(@LanguageID, 19000014) contactRelationshipType
                    ON contactRelationshipType.idfsReference = occ.ContactRelationshipTypeID
                INNER JOIN @OutbreakCaseReportUIDs ocru
                    ON ocru.OutbreakCaseReportUID = occ.OutBreakCaseReportUID
            WHERE occ.intRowStatus = 0
            AND ((ocr.idfVetCase IS NOT NULL AND (
                          vc.idfsCaseType = 10012004
                          AND osp.OutbreakSpeciesTypeID = 10514002
                      )
                  OR (
                         vc.idfsCaseType = 10012003
                         AND osp.OutbreakSpeciesTypeID = 10514003
                     ))
                  OR osp.OutbreakSpeciesTypeID = 10514001 AND ocr.idfHumanCase IS NOT NULL
                     );
        END
        ELSE
        BEGIN
            SELECT @TotalRowCount = COUNT(DISTINCT OutbreakCaseContactUID)
            FROM dbo.OutbreakCaseContact occ
                LEFT JOIN dbo.OutbreakCaseReport ocr
                    ON ocr.OutBreakCaseReportUID = occ.OutBreakCaseReportUID
                LEFT JOIN dbo.OutbreakSpeciesParameter osp
                    ON osp.idfOutbreak = ocr.idfOutbreak
                LEFT JOIN dbo.tlbVetCase vc 
                    ON vc.idfVetCase = ocr.idfVetCase
                LEFT JOIN dbo.tlbHuman h
                    ON h.idfHuman = occ.idfHuman
                LEFT JOIN dbo.FN_GBL_Reference_GetList(@LanguageID, 19000043) gender
                    ON gender.idfsReference = h.idfsHumanGender
                LEFT JOIN dbo.FN_GBL_Reference_GetList(@LanguageID, 19000054) citizenshipType
                    ON citizenshipType.idfsReference = h.idfsNationality
                LEFT JOIN dbo.tlbGeoLocation geo
                    ON h.idfCurrentResidenceAddress = geo.idfGeoLocation
                LEFT JOIN FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                    ON lh.idfsLocation = geo.idfsLocation
                LEFT JOIN dbo.FN_GBL_Reference_GetList(@LanguageID, 19000517) contactStatusType
                    ON contactStatusType.idfsReference = occ.ContactStatusID
                INNER JOIN @OutbreakCaseReportUIDs ocru
                    ON ocru.OutbreakCaseReportUID = occ.OutBreakCaseReportUID
            WHERE occ.intRowStatus = 0
                        AND ((ocr.idfVetCase IS NOT NULL AND (
                          vc.idfsCaseType = 10012004
                          AND osp.OutbreakSpeciesTypeID = 10514002
                      )
                  OR (
                         vc.idfsCaseType = 10012003
                         AND osp.OutbreakSpeciesTypeID = 10514003
                     ))
                  OR osp.OutbreakSpeciesTypeID = 10514001 AND ocr.idfHumanCase IS NOT NULL
                     )
                  AND (
                          occ.OutbreakCaseContactUID LIKE '%' + @SearchTerm + '%'
                          OR occ.ContactedHumanCasePersonID LIKE '%' + @SearchTerm + '%'
                          OR h.strLastName LIKE '%' + @SearchTerm + '%'
                          OR h.strFirstName LIKE '%' + @SearchTerm + '%'
                          OR occ.DateOfLastContact LIKE '%' + @SearchTerm + '%'
                          OR contactStatusType.name LIKE '%' + @SearchTerm + '%'
                          OR lh.AdminLevel2Name LIKE '%' + @SearchTerm + '%'
                          OR lh.AdminLevel3Name LIKE '%' + @SearchTerm + '%'
                          OR lh.AdminLevel4Name LIKE '%' + @SearchTerm + '%'
                          OR lh.AdminLevel5Name LIKE '%' + @SearchTerm + '%'
                          OR lh.AdminLevel6Name LIKE '%' + @SearchTerm + '%'
                          OR lh.AdminLevel7Name LIKE '%' + @SearchTerm + '%'
                          OR gender.name LIKE '%' + @SearchTerm + '%'
                      );

            INSERT INTO @Contacts
            (
                TotalRowCount,
                CaseContactID,
                CaseID,
                OutbreakTypeID, 
                DiseaseID, 
                ContactedHumanCasePersonID,
                PersonalIDTypeID, 
                PersonalID, 
                FirstName, 
                SecondName, 
                LastName, 
                ContactName,
                DateOfBirth, 
                Age, 
                GenderTypeID,
                GenderTypeName,
                CitizenshipTypeID,
                CitizenshipTypeName, 
                AddressID, 
                LocationID, 
                AdministrativeLevel0ID, 
                AdministrativeLevel1ID, 
                AdministrativeLevel2ID, 
                SettlementTypeID, 
                SettlementID, 
                Apartment, 
                Building, 
                House, 
                StreetID, 
                Street, 
                PostalCodeID, 
                PostalCode,
                ForeignAddressString, 
                DateOfLastContact,
                PlaceOfLastContact,
                Comment,
                ContactTypeID,
                ContactTypeName,
                ContactStatusID,
                ContactStatusName,
                ContactRelationshipTypeID,
                ContactRelationshipTypeName,
                CurrentLocation,
                ContactTracingObservationID, 
                ContactTracingDuration,
                ContactTracingFrequency,
                VeterinaryDiseaseReportTypeID, 
                EIDSSPersonID,
                HumanID, 
                HumanMasterID,
                ContactPhoneTypeID, 
                ContactPhoneCountryCode,
                ContactPhone
            )
            SELECT DISTINCT
                @TotalRowCount,
                occ.OutbreakCaseContactUID,
                occ.OutBreakCaseReportUID,
                o.OutbreakTypeID, 
                o.idfsDiagnosisOrDiagnosisGroup, 
                occ.ContactedHumanCasePersonID,
                h.idfsPersonIDType, 
                h.strPersonID, 
                h.strFirstName, 
                h.strSecondName, 
                h.strLastName, 
                h.strLastName + ', ' + h.strFirstName,
                h.datDateofBirth,
                haai.ReportedAge, 
                h.idfsHumanGender,
                gender.name,
                h.idfsNationality,
                citizenshipType.name,
                h.idfCurrentResidenceAddress, 
                geo.idfsLocation, 
                lh.AdminLevel1ID, 
                lh.AdminLevel2ID, 
                lh.AdminLevel3ID, 
                settlement.idfsType, 
                settlement.idfsLocation,
                geo.strApartment, 
                geo.strBuilding, 
                geo.strHouse, 
                st.idfStreet, 
                geo.strStreetName, 
                pc.idfPostalCode, 
                geo.strPostCode, 
                geo.strForeignAddress, 
                occ.DateOfLastContact,
                occ.PlaceOfLastContact,
                occ.CommentText,
                occ.ContactTypeID,
                contactType.name,
                occ.ContactStatusID,
                contactStatusType.name,
                occ.ContactRelationshipTypeID,
                contactRelationshipType.name,
                lh.AdminLevel2Name + ' ' + lh.AdminLevel3Name,
                occ.ContactTracingObservationID, 
                osp.ContactTracingDuration,
                osp.ContactTracingFrequency,
                vc.idfsCaseType,
                haai.EIDSSPersonID,
                h.idfHuman, 
                h.idfHumanActual,
                haai.ContactPhoneNbrTypeID, 
                haai.ContactPhoneCountryCode, 
                haai.ContactPhoneNbr
            FROM dbo.OutbreakCaseContact occ
                LEFT JOIN dbo.OutbreakCaseReport ocr
                    ON ocr.OutBreakCaseReportUID = occ.OutBreakCaseReportUID
                LEFT JOIN dbo.tlbVetCase vc 
                    ON vc.idfVetCase = ocr.idfVetCase
                INNER JOIN dbo.tlbOutbreak o 
                    ON o.idfOutbreak = ocr.idfOutbreak
                LEFT JOIN dbo.OutbreakSpeciesParameter osp
                    ON osp.idfOutbreak = ocr.idfOutbreak
                LEFT JOIN dbo.tlbHuman h
                    ON h.idfHuman = occ.idfHuman
                LEFT JOIN dbo.HumanActualAddlInfo haai
                    ON haai.HumanActualAddlInfoUID = h.idfHumanActual
                LEFT JOIN dbo.FN_GBL_Reference_GetList(@LanguageID, 19000043) gender
                    ON gender.idfsReference = h.idfsHumanGender
                LEFT JOIN dbo.FN_GBL_Reference_GetList(@LanguageID, 19000054) citizenshipType
                    ON citizenshipType.idfsReference = h.idfsNationality
                LEFT JOIN dbo.tlbGeoLocation geo
                    ON h.idfCurrentResidenceAddress = geo.idfGeoLocation
                LEFT JOIN FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                    ON lh.idfsLocation = geo.idfsLocation
                LEFT JOIN dbo.gisLocation settlement
                    ON settlement.idfsLocation = geo.idfsLocation AND settlement.idfsType IS NOT NULL
                LEFT JOIN dbo.tlbStreet st
                    ON st.strStreetName = geo.strStreetName
                LEFT JOIN dbo.tlbPostalCode pc
                    ON pc.strPostCode = geo.strPostCode
                LEFT JOIN dbo.FN_GBL_Reference_GetList(@LanguageID, 19000516) contactType
                    ON contactType.idfsReference = occ.ContactTypeID
                LEFT JOIN dbo.FN_GBL_Reference_GetList(@LanguageID, 19000517) contactStatusType
                    ON contactStatusType.idfsReference = occ.ContactStatusID
                LEFT JOIN dbo.FN_GBL_Reference_GetList(@LanguageID, 19000014) contactRelationshipType
                    ON contactRelationshipType.idfsReference = occ.ContactRelationshipTypeID
                INNER JOIN @OutbreakCaseReportUIDs ocru
                    ON ocru.OutbreakCaseReportUID = occ.OutBreakCaseReportUID
            WHERE occ.intRowStatus = 0
                        AND ((ocr.idfVetCase IS NOT NULL AND (
                          vc.idfsCaseType = 10012004
                          AND osp.OutbreakSpeciesTypeID = 10514002
                      )
                  OR (
                         vc.idfsCaseType = 10012003
                         AND osp.OutbreakSpeciesTypeID = 10514003
                     ))
                  OR osp.OutbreakSpeciesTypeID = 10514001 AND ocr.idfHumanCase IS NOT NULL
                     )
                  AND (
                          occ.OutbreakCaseContactUID LIKE '%' + @SearchTerm + '%'
                          OR occ.ContactedHumanCasePersonID LIKE '%' + @SearchTerm + '%'
                          OR h.strLastName LIKE '%' + @SearchTerm + '%'
                          OR h.strFirstName LIKE '%' + @SearchTerm + '%'
                          OR gender.name LIKE '%' + @SearchTerm + '%'
                          OR occ.DateOfLastContact LIKE '%' + @SearchTerm + '%'
                          OR contactStatusType.name LIKE '%' + @SearchTerm + '%'
                          OR lh.AdminLevel2Name LIKE '%' + @SearchTerm + '%'
                          OR lh.AdminLevel3Name LIKE '%' + @SearchTerm + '%'
                          OR lh.AdminLevel4Name LIKE '%' + @SearchTerm + '%'
                          OR lh.AdminLevel5Name LIKE '%' + @SearchTerm + '%'
                          OR lh.AdminLevel6Name LIKE '%' + @SearchTerm + '%'
                          OR lh.AdminLevel7Name LIKE '%' + @SearchTerm + '%'
                      );
        END

        IF @TodaysFollowUpsIndicator = 1
        BEGIN
            DELETE FROM @Contacts
            WHERE ContactTracingFrequency IS NULL
                  OR ContactTracingDuration IS NULL
                  OR ContactStatusID IN (10517002, 10517003, 10517004, 10517005);

            DELETE FROM @Contacts
            WHERE CaseContactID NOT IN (
                                                    SELECT CaseContactID
                                                    FROM @Contacts
                                                    WHERE (
                                                              DateOfLastContact > DATEADD(
                                                                                             DAY,
                                                                                             -ContactTracingDuration,
                                                                                             GETDATE()
                                                                                         )
                                                              AND DATEDIFF(DAY, DateOfLastContact, GETDATE())
                                                                  % ContactTracingFrequency = 0
                                                          )
                                                          OR ContactTracingFrequency IS NULL
                                                );
        END

        SELECT CaseContactID,
            CaseID, 
            OutbreakTypeID, 
            DiseaseID, 
            ContactedHumanCasePersonID,
            PersonalIDTypeID, 
            PersonalID, 
            FirstName, 
            SecondName, 
            LastName, 
            ContactName,
            DateOfBirth, 
            Age, 
            GenderTypeID,
            GenderTypeName,
            CitizenshipTypeID,
            CitizenshipTypeName, 
            AddressID, 
            LocationID, 
            AdministrativeLevel0ID, 
            AdministrativeLevel1ID, 
            AdministrativeLevel2ID,
            SettlementTypeID, 
            SettlementID, 
            Apartment, 
            Building, 
            House, 
            StreetID, 
            Street, 
            PostalCodeID, 
            PostalCode,
            ForeignAddressString, 
            DateOfLastContact,
            PlaceOfLastContact,
            Comment,
            ContactTypeID,
            ContactTypeName,
            ContactStatusID,
            ContactStatusName,
            ContactRelationshipTypeID,
            ContactRelationshipTypeName,
            CurrentLocation,
            ContactTracingObservationID, 
            ContactTracingDuration,
            ContactTracingFrequency,
            VeterinaryDiseaseReportTypeID, 
            EIDSSPersonID,
            HumanID, 
            HumanMasterID,
            ContactPhoneTypeID, 
            ContactPhoneCountryCode,
            ContactPhone,
            RowAction,
            [RowCount],
            TotalRowCount,
            CurrentPage,
            TotalPages
        FROM
        (
            SELECT ROW_NUMBER() OVER (ORDER BY CASE
                                                   WHEN @SortColumn = 'ContactTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       ContactTypeName
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'ContactTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       ContactTypeName
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'ContactName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       ContactName
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'ContactName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       ContactName
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'ContactRelationTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       ContactRelationshipTypeName
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'ContactRelationTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       ContactRelationshipTypeName
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'DateOfLastContact'
                                                        AND @SortOrder = 'ASC' THEN
                                                       DateOfLastContact
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'DateOfLastContact'
                                                        AND @SortOrder = 'DESC' THEN
                                                       DateOfLastContact
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'PlaceOfLastContact'
                                                        AND @SortOrder = 'ASC' THEN
                                                       PlaceOfLastContact
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'PlaceOfLastContact'
                                                        AND @SortOrder = 'DESC' THEN
                                                       PlaceOfLastContact
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'CurrentLocation'
                                                        AND @SortOrder = 'ASC' THEN
                                                       CurrentLocation
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'CurrentLocation'
                                                        AND @SortOrder = 'DESC' THEN
                                                       CurrentLocation
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'Gender'
                                                        AND @SortOrder = 'ASC' THEN
                                                       GenderTypeName
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'Gender'
                                                        AND @SortOrder = 'DESC' THEN
                                                       GenderTypeName
                                               END DESC
                                     ) AS RowNum,
                   CaseContactID,
                   CaseID, 
                   OutbreakTypeID, 
                   DiseaseID, 
                   ContactedHumanCasePersonId,
                   PersonalIDTypeID, 
                   PersonalID, 
                   FirstName, 
                   SecondName, 
                   LastName, 
                   ContactName,
                   DateOfBirth, 
                   Age, 
                   GenderTypeID, 
                   GenderTypeName,
                   CitizenshipTypeID, 
                   CitizenshipTypeName, 
                   AddressID, 
                   LocationID, 
                   AdministrativeLevel0ID, 
                   AdministrativeLevel1ID, 
                   AdministrativeLevel2ID,
                   SettlementTypeID, 
                   SettlementID, 
                   Apartment, 
                   Building, 
                   House,
                   StreetID, 
                   Street, 
                   PostalCodeID, 
                   PostalCode, 
                   ForeignAddressString, 
                   DateOfLastContact,
                   PlaceOfLastContact,
                   Comment,
                   ContactTypeID,
                   ContactTypeName,
                   ContactStatusID,
                   ContactStatusName,
                   ContactRelationshipTypeID,
                   ContactRelationshipTypeName,
                   CurrentLocation,
                   ContactTracingObservationID, 
                   ContactTracingDuration,
                   ContactTracingFrequency,
                   VeterinaryDiseaseReportTypeID, 
                   EIDSSPersonID,
                   HumanID, 
                   HumanMasterID,
                   ContactPhoneTypeID, 
                   ContactPhoneCountryCode, 
                   ContactPhone,
                   0 AS RowAction,
                   COUNT(*) OVER () AS [RowCount],
                   @TotalRowCount AS TotalRowCount,
                   CurrentPage = @PageNumber,
                   TotalPages = (@TotalRowCount / @PageSize) + IIF(COUNT(*) % @PageSize > 0, 1, 0)
            FROM @Contacts
            GROUP BY CaseContactID,
                   CaseID,
                   OutbreakTypeID, 
                   DiseaseID, 
                   ContactedHumanCasePersonID,
                   PersonalIDTypeID, 
                   PersonalID, 
                   FirstName, 
                   SecondName, 
                   LastName, 
                   ContactName,
                   DateOfBirth, 
                   Age, 
                   GenderTypeID, 
                   GenderTypeName,
                   CitizenshipTypeID, 
                   CitizenshipTypeName, 
                   AddressID, 
                   LocationID, 
                   AdministrativeLevel0ID, 
                   AdministrativeLevel1ID, 
                   AdministrativeLevel2ID,
                   SettlementTypeID, 
                   SettlementID, 
                   Apartment, 
                   Building, 
                   House, 
                   StreetID, 
                   Street, 
                   PostalCodeID, 
                   PostalCode, 
                   ForeignAddressString, 
                   DateOfLastContact,
                   PlaceOfLastContact,
                   Comment,
                   ContactTypeID,
                   ContactTypeName,
                   ContactStatusID,
                   ContactStatusName,
                   ContactRelationshipTypeID,
                   ContactRelationshipTypeName,
                   CurrentLocation,
                   ContactTracingObservationID, 
                   ContactTracingDuration,
                   ContactTracingFrequency,
                   VeterinaryDiseaseReportTypeID, 
                   EIDSSPersonID,
                   HumanID, 
                   HumanMasterID,
                   ContactPhoneTypeID, 
                   ContactPhoneCountryCode, 
                   ContactPhone
        ) AS x
        WHERE RowNum > @FirstRec
              AND RowNum < @LastRec
        ORDER BY RowNum;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT = 1
            ROLLBACK;
        throw;
    END CATCH;

END;
GO
PRINT N'Altering Procedure [dbo].[USP_OMM_HUMAN_Case_GetDetail]...';


GO
--*************************************************************
-- Name: [USP_OMM_Case_GetDetail]
-- Description: Insert/Update for Campaign Monitoring Session
--
-- Author: Doug Albanese
-- Revision History
--	Name			Date		Change Detail
--	Doug Albanese	05/02/2022	New SP to separate request from common case details of USP_OMM_Case_GetDetail
--	Doug Albanese	05/03/2022	Added disease id
--	Doug Albanese	05/04/2022	Adding "Text" version for Offices and Persons, for Select2 popuation
--	Doug Albanese	05/04/2022	Changed over to Location Hierarchy
--	Doug Albanese	05/04/2022	idfHumanCase added for reference within the shared HDR View Component
--	Doug Albanese	05/05/2022	Added Text for Select2 objects in Outbreak Investigation (Organization/Person)
--	Doug Albanese	05/05/2022	Added Text for Outbreak Case Classification
--	Doug Albanese	05/05/2022	Corrected some Flex Form observations, and cleaned up output fields
--	Doug Albanese	05/06/2022	Added location information for Editing purposes
--	Doug Albanese	05/09/2022	Added OutbreakTypeId for Flex Form identification
-- Doug Albanese	 10/25/2022	 Swapped tlbHumanCase.idfEpiObservation with OutbreakCaseReport.OutbreakCaseObservationID
--*************************************************************
ALTER PROCEDURE [dbo].[USP_OMM_HUMAN_Case_GetDetail]
(
	@LangID NVARCHAR(50),
	@OutbreakCaseReportUID BIGINT = -1
)
AS
	BEGIN DECLARE @returnCode INT = 0;
		DECLARE @returnMsg NVARCHAR(MAX) = 'SUCCESS'; BEGIN TRY
		DECLARE @Antimicrobials NVARCHAR(MAX)
		DECLARE @Vaccinations NVARCHAR(MAX)
		DECLARE @Contacts NVARCHAR(MAX)
		DECLARE @Samples NVARCHAR(MAX)
		DECLARE @Tests NVARCHAR(MAX)
		DECLARE @CaseMonitorings NVARCHAR(MAX) DECLARE @idfHumanCase BIGINT 

		SELECT
			@idfHumanCase = idfHumanCase
		FROM
			OutbreakCaseReport
		WHERE
			OutbreakCaseReportUID = @OutbreakCaseReportUID --Obtain listing of Vaccinations for Json object

		SET @Antimicrobials = (
		SELECT
			idfAntimicrobialTherapy,
			datFirstAdministeredDate AS FirstAdministeredDate,
			strAntimicrobialTherapyName AS AntimicrobialName,
			strDosage AS AntimicrobialDose
		FROM
			tlbAntimicrobialTherapy
		WHERE
			intRowStatus = 0 AND
			idfHumanCase = @idfHumanCase
		FOR JSON PATH) 
		
		--Obtain listing of Vaccinations for Json object
		SET @Vaccinations =
		(
			SELECT
			HumanDiseaseReportVaccinationUID,
			VaccinationName,
			VaccinationDate
			FROM
			HumanDiseaseReportVaccination
			WHERE
			intRowStatus = 0 AND
			idfHumanCase = @idfHumanCase
		FOR JSON PATH) 
		
		--Obtain listing of Contacts for Json object
		SET @Contacts =
		(
			SELECT
			CCP.idfContactedCasePerson, --tlbContactedCasePerson Identity
			OCC.OutbreakCaseContactUID, --OutbreakCaseContact Identity
			OCC.OutBreakCaseReportUID, --(OutbreakCaseReport Identity) OutBreakCaseReport: OutBreakCaseReportUID
			H.strFirstName + ' ' + H.strLastName AS ContactName, --tlbContactedCasePerson
			OCC.ContactTypeID, --"Contact Type" OutbreakCaseContact: ContactTypeID
			CT.Name As ContactType, --"Contact Type" Text only for display
			OCC.ContactRelationshipTypeID, --"Relation" OutbreakCaseContact: ContactRelationshipTypeID
			CCP.idfsPersonContactType, --"Relation" tlbContactedCasePerson: idfsPersonContactType
			Relation.Name AS Relation, --"Relation" Text only for display
			OCC.DateOfLastContact AS datDateOfLastContact, --"Date of Last Contact" OutbreakCaseContact: DateOfLastContact
			OCC.PlaceOfLastContact AS strPlaceInfo, --"Place of Last Contact" tlbContactedCasePerson: strPlaceInfo
			OCC.ContactStatusID, --"Contact Status" OutbreakCaseContact: ContactStatusID
			CS.name AS ContactStatus, --"Contact Status" Text only for display
			OCC.CommentText AS strComments, --"Comments" tlbContactedCasePerson: strComments
			H.idfHumanActual, --(Human Actual Identity) tlbHumanActual: idfHumanActual
			OCC.ContactTracingObservationId AS idfObservation, --Flex Form Observation Id
			ft.idfsFormType
		FROM
			OutbreakCaseContact OCC
			LEFT JOIN tlbHuman H
			ON H.idfHuman = OCC.idfHuman
			LEFT JOIN tlbContactedCasePerson CCP
			ON CCP.idfContactedCasePerson = OCC.ContactedHumanCasePersonID
			LEFT JOIN dbo.FN_GBL_Reference_GETList(@langId, 19000014) Relation
			ON Relation.idfsReference = OCC.ContactRelationshipTypeID
			LEFT JOIN dbo.FN_GBL_Reference_GETList(@langId, 19000517) CS
			ON CS.idfsReference = OCC.ContactStatusID
			LEFT JOIN dbo.FN_GBL_Reference_GETList(@langId, 19000516) CT
			ON CT.idfsReference = OCC.ContactTypeID
			LEFT JOIN tlbObservation o
			ON o.idfObservation = occ.ContactTracingObservationID
			LEFT JOIN ffFormTemplate ft
			ON ft.idfsFormTemplate = o.idfsFormTemplate
			WHERE
			OutBreakCaseReportUID = @OutbreakCaseReportUID AND
			OCC.intRowStatus = 0
		FOR JSON PATH) 
		
		--Obtain listing of Samples for Json Object
		SET @Samples =(
			SELECT
			m.idfMaterial,
			m.idfsSampleType,
			R.Name AS SampleType,
			m.strFieldBarcode,
			m.datFieldCollectionDate,
			Coalesce(m.idfFieldCollectedByOffice, -1) AS idfFieldCollectedByOffice,
			CO.name As CollectedByOffice,
			--Coalesce(m.idfFieldCollectedByPerson,-1) AS idfFieldCollectedByPerson,
			m.idfFieldCollectedByPerson,
			Coalesce(prb.strFirstName + ' ' + prb.strFamilyName, '') As CollectedByPerson,
			Coalesce(m.idfSendToOffice, -1) AS idfSendToOffice,
			SO.name As SentToOffice,
			Coalesce(m.strNote, '') AS strNote,
			m.datFieldSentDate 
			FROM OutbreakCaseReport ocr
			LEFT JOIN tlbHumanCase hc
			ON hc.idfHumanCase = ocr.idfHumanCase
			LEFT JOIN tlbMaterial m
			ON m.idfHumanCase = hc.idfHumanCase
			LEFT JOIN tlbOffice rbo
			ON rbo.idfOffice = m.idfFieldCollectedByOffice
			LEFT JOIN tlbOffice rbo2
			ON rbo2.idfOffice = m.idfSendToOffice
			LEFT JOIN tlbPerson prb
			ON prb.idfPerson = m.idfFieldCollectedByPerson
			LEFT JOIN dbo.FN_GBL_Reference_GETList(@LangID, 19000046) CO
			ON CO.idfsReference = rbo.idfsOfficeName
			LEFT JOIN dbo.FN_GBL_Reference_GETList(@LangID, 19000046) SO
			ON SO.idfsReference = rbo2.idfsOfficeName
			LEFT JOIN dbo.FN_GBL_Reference_GETList(@LangID, 19000087) R
			ON R.idfsReference = m.idfsSampleType
			WHERE
			ocr.OutBreakCaseReportUID = @OutbreakCaseReportUID AND
			m.intRowStatus = 0
		FOR JSON PATH) 
		
		SET @Tests =(SELECT
			t.idfTesting,
			m.idfMaterial,
			m.idfsSampleType,
			m.strFieldBarcode,
			m.strBarcode,
			t.idfsTestName,
			t.idfsTestResult,
			t.idfsTestStatus,
			t.datConcludedDate,
			t.idfsTestCategory,
			tv.idfsInterpretedStatus,
			tv.strInterpretedComment,
			tv.datInterpretationDate,
			tv.idfInterpretedByPerson,
			case tv.blnValidateStatus when 1 then 1 else 0 end as blnValidateStatus,
			tv.strValidateComment,
			tv.datValidationDate,
			tv.idfValidatedByPerson,
			ST.name AS SampleType,
			TN.name AS TestName,
			TR.name AS TestResult,
			TS.name AS TestStatus,
			TC.name AS TestCategory,
			ITS.name AS InterpretedStatus,
			Coalesce(ibp.strFirstName + ' ' + ibp.strFamilyName, '') As InterpretedByPerson,
			Coalesce(vbp.strFirstName + ' ' + vbp.strFamilyName, '') As ValidatedByPerson
		FROM
			OutbreakCaseReport OCR
			LEFT JOIN tlbHumanCase hc
			ON hc.idfHumanCase = ocr.idfHumanCase
			LEFT JOIN tlbMaterial m
			ON m.idfHumanCase = hc.idfHumanCase
			LEFT JOIN tlbTesting t
			ON t.idfMaterial = m.idfMaterial
			LEFT JOIN tlbTestValidation tv
			ON tv.idfTesting = t.idfTesting
			LEFT JOIN dbo.FN_GBL_Reference_GETList(@LangID, 19000087) ST
			ON ST.idfsReference = m.idfsSampleType
			LEFT JOIN dbo.FN_GBL_Reference_GETList(@LangID, 19000097) TN
			ON TN.idfsReference = t.idfsTestName
			LEFT JOIN dbo.FN_GBL_Reference_GETList(@LangID, 19000096) TR
			ON TR.idfsReference = t.idfsTestResult
			LEFT JOIN dbo.FN_GBL_Reference_GETList(@LangID, 19000001) TS
			ON TS.idfsReference = t.idfsTestStatus
			LEFT JOIN dbo.FN_GBL_Reference_GETList(@LangID, 19000095) TC
			ON TC.idfsReference = t.idfsTestCategory
			LEFT JOIN dbo.FN_GBL_Reference_GETList(@LangID, 19000106) ITS
			ON ITS.idfsReference = tv.idfsInterpretedStatus
			LEFT JOIN tlbPerson ibp
			ON ibp.idfPerson = tv.idfInterpretedByPerson
			LEFT JOIN tlbPerson vbp
			ON vbp.idfPerson = tv.idfValidatedByPerson WHERE
			OCR.OutBreakCaseReportUID = @OutBreakCaseReportUID AND
			t.intRowStatus = 0
		FOR JSON PATH) 
		
		SET @CaseMonitorings =
		(SELECT
			ocm.idfOutbreakCaseMonitoring,
			ocm.idfObservation,
			ocm.datMonitoringdate,
			ocm.idfInvestigatedByOffice,
			fcboName.name AS InvestigatedByOffice,
			ocm.idfInvestigatedByPerson,
			CONCAT(P.strFirstName, ' ', P.strFamilyName) AS InvestigatedByPerson,
			ocm.strAdditionalComments,
			ocm.intRowStatus,
			ft.idfsFormType
		FROM
			tlbOutbreakCaseMonitoring ocm
			LEFT JOIN tlbOffice o
			ON o.idfOffice = ocm.idfInvestigatedByOffice
			LEFT JOIN dbo.FN_GBL_Reference_GETList(@LangID, 19000045) fcboName
			ON fcboName.idfsReference = o.idfsOfficeName
			LEFT JOIN tlbPerson P
			ON P.idfPerson = ocm.idfInvestigatedByPerson
			LEFT JOIN tlbObservation OB
			ON OB.idfObservation = ocm.idfObservation
			LEFT JOIN ffFormTemplate ft
			ON ft.idfsFormTemplate = OB.idfsFormTemplate
		WHERE
			idfHumanCase = @idfHumanCase AND
			ocm.intRowStatus = 0
		FOR JSON PATH) 
		
		SELECT
			DISTINCT
			--General
			ocr.idfOutbreak,
			h.idfHumanActual,
			--Notification
			hc.datNotificationDate,
			hc.idfSentByOffice,
			SentByOffice.name AS SentByOffice,
			hc.idfSentByPerson,
			SentByPerson.strFirstName + ' ' + SentByPerson.strFamilyName AS SentByPerson,
			hc.idfReceivedByOffice,
			ReceivedByOffice.name AS ReceivedByOffice,
			hc.idfReceivedByPerson,
			ReceivedByPerson.strFirstName + ' ' + ReceivedByPerson.strFamilyName AS ReceivedByPerson,
			--Case Locatiton
			geo.idfGeoLocation,
			geo.idfsLocation,
			lh.AdminLevel1ID AS AdminLevel0Value,
			lh.AdminLevel2ID AS AdminLevel1Value,
			lh.AdminLevel2Name AS AdminLevel1Text,
			lh.AdminLevel3ID AS AdminLevel2Value,
			lh.AdminLevel3Name AS AdminLevel2Text,
			lh.AdminLevel4ID AS AdminLevel3Value,
			lh.AdminLevel4Name AS AdminLevel3Text,
			geo.strStreetName,
			geo.strPostCode,
			geo.strBuilding,
			geo.strHouse,
			geo.strApartment,
			geo.dblLatitude,
			geo.dblLongitude,
			--Clinical Information
			ocr.OutbreakCaseStatusID,
			OutbreakCaseStatus.Name AS OutbreakCaseStatusName,
			hc.datOnSetDate,
			hc.datFinalDiagnosisDate,
			hc.idfHospital,
			hc.datHospitalizationDate,
			hc.datDischargeDate,
			hc.strClinicalNotes,
			hc.strNote,
			@Antimicrobials AS Antimicrobials,
			@Vaccinations AS Vaccinations,
			--Outbreak Investigation
			hc.idfInvestigatedByOffice,
			InvestigatedByOffice.name AS InvestigatedByOffice,
			hc.idfInvestigatedByPerson,
			InvestigatedByPerson.strFirstName + ' ' + InvestigatedByPerson.strFamilyName AS InvestigatedByPerson,
			hc.datInvestigationStartDate,
			OCR.OutbreakCaseClassificationID,
			OutbreakClassification.name AS OutbreakCaseClassificationName,
			OCR.IsPrimaryCaseFlag,
			--Case Monitoring
			@CaseMonitorings AS CaseMonitorings,
			--Contacts
			@Contacts AS Contacts,
			--Samples
			hc.idfsYNSpecimenCollected,
			@Samples AS Samples,
			--Tests
			hc.idfsYNTestsConducted,
			@Tests AS Tests,
			hc.idfsYNAntimicrobialTherapy,
			hc.idfsYNHospitalization,
			hc.idfsYNSpecificVaccinationAdministered,
			--Outbreak Flex Forms
			OCR.OutbreakCaseObservationID,
			OCOFT.idfsFormType AS OutbreakCaseObservationFormType,
			OCR.CaseEPIObservationID,
			OCMFT.idfsFormType AS CaseEPIObservationFormType,
			ocr.OutbreakCaseObservationID AS idfEpiObservation,
			hc.idfCSObservation,
			o.idfsDiagnosisOrDiagnosisGroup,
			ocr.idfHumanCase,
			o.OutbreakTypeID
		FROM
			OutbreakCaseReport ocr
		LEFT JOIN tlbHumanCase hc
		ON hc.idfHumanCase = ocr.idfHumanCase
		LEFT JOIN tlbHuman h
		ON h.idfHuman = hc.idfHuman
		LEFT JOIN tlbHumanActual ha
		ON ha.idfHumanActual = h.idfHumanActual
		LEFT JOIN HumanActualAddlInfo haai
		ON haai.HumanActualAddlInfoUID = ha.idfHumanActual
		LEFT JOIN tlbOutbreak o
		ON o.idfOutbreak = OCR.idfOutbreak
		LEFT JOIN dbo.tlbGeoLocation geo
        ON h.idfCurrentResidenceAddress = geo.idfGeoLocation
        LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LangID) lh
        ON lh.idfsLocation = geo.idfsLocation
		LEFT JOIN tlbAntimicrobialTherapy amt
		ON amt.idfHumanCase = ocr.idfHumanCase
		LEFT JOIN HumanDiseaseReportVaccination hdrv
		ON hdrv.idfHumanCase = ocr.idfHumanCase
		LEFT JOIN tlbObservation OCO
		ON OCO.idfObservation = OCR.OutbreakCaseObservationID
		LEFT JOIN tlbObservation CMO
		ON CMO.idfObservation = OCR.CaseEPIObservationID
		LEFT JOIN ffFormTemplate OCOFT
		ON OCOFT.idfsFormTemplate = OCO.idfsFormTemplate
		LEFT JOIN ffFormTemplate OCMFT
		ON OCMFT.idfsFormTemplate = CMO.idfsFormTemplate
		LEFT JOIN tlbOffice SBO
		ON SBO.idfOffice = hc.idfSentByOffice
		LEFT JOIN dbo.FN_GBL_Reference_GETList(@LangID, 19000046) SentByOffice
		ON SentByOffice.idfsReference = SBO.idfsOfficeName
		LEFT JOIN tlbOffice RBO
		ON RBO.idfOffice = hc.idfReceivedByOffice
		LEFT JOIN dbo.FN_GBL_Reference_GETList(@LangID, 19000046) ReceivedByOffice
		ON ReceivedByOffice.idfsReference = RBO.idfsOfficeName
		LEFT JOIN tlbPerson SentByPerson
		ON SentByPerson.idfPerson = hc.idfSentByPerson
		LEFT JOIN tlbPerson ReceivedByPerson
		ON ReceivedByPerson.idfPerson = hc.idfReceivedByPerson
		LEFT JOIN tlbOffice IBO
		ON IBO.idfOffice = hc.idfInvestigatedByOffice
		LEFT JOIN dbo.FN_GBL_Reference_GETList(@LangID, 19000046) InvestigatedByOffice
		ON InvestigatedByOffice.idfsReference = IBO.idfsOfficeName
		LEFT JOIN tlbPerson InvestigatedByPerson
		ON InvestigatedByPerson.idfPerson = hc.idfInvestigatedByPerson
		LEFT JOIN FN_GBL_Reference_GETList(@langId,19000011) OutbreakClassification
		ON OutbreakClassification.idfsReference = ocr.OutbreakCaseClassificationID
		LEFT JOIN FN_GBL_Reference_GETList(@langId,19000520) OutbreakCaseStatus
		ON OutbreakCaseStatus.idfsReference = ocr.OutbreakCaseStatusID
		WHERE
			OCR.OutBreakCaseReportUID = @OutbreakCaseReportUID
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT = 1
		ROLLBACK;
		THROW;
		END CATCH
	END
GO
PRINT N'Update complete.';


GO
