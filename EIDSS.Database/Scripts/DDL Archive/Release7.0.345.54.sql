/*
Deployment script for EIDSS7_GG

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO

PRINT N'Altering Procedure [dbo].[USP_ADMIN_EMPLOYEEGROUP_SYSTEMFUNCTION_SET]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_EMPLOYEEGROUP_SYSTEMFUNCTION_SET
--
-- Description:	Creates and/or removes at relationship between a role, system function, and 
-- operation.
--                      
-- Author: Ricky Moss
--
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Ricky Moss		12/12/2019 Initial release.
-- Ricky Moss		03/25/2020 Passes in all roles, system functions, and operations at once
-- Ricky Moss		03/26/2020 Add intRowStatus to Merge Query
-- Stephen Long     05/28/2020 Changed 0 for intRowStatus on insert to use intRowStatus supplied 
--                             in the JSON.  A permission may be inserted as denied, so in this 
--                             case an intRowStatus of 1 would be used.
-- Ann Xiong		04/13/2023 Implemented Data Audit
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_EMPLOYEEGROUP_SYSTEMFUNCTION_SET] (
	@rolesandfunctions NVARCHAR(MAX),
	@user NVARCHAR(50)
	)
AS
DECLARE @tempRSFA TABLE (
	RoleID BIGINT,
	SystemFunctionID BIGINT,
	SystemFunctionOperationID BIGINT,
	intRowStatus INT,
	intRowStatusForSystemFunction INT
	)
DECLARE @returnCode INT = 0
DECLARE @returnMsg NVARCHAR(MAX) = 'SUCCESS'
DECLARE @modifiedJSON NVARCHAR(MAX)

		--Data Audit--
		declare @idfUserId BIGINT = NULL;
		declare @idfSiteId BIGINT = NULL;
		declare @idfsDataAuditEventType bigint = NULL;
		declare @idfsObjectType bigint = 10017052;                         -- System Function
		declare @idfObject bigint = NULL;
		declare @idfObjectTable_LkupRoleSystemFunctionAccess bigint = 53577790000006;
		declare @idfDataAuditEvent bigint= NULL;

		CREATE TABLE #Output  
 		(
			DidfEmployee BIGINT,
			DSystemFunctionID BIGINT,
			DSystemFunctionOperationID BIGINT,
			DAccessPermissionID BIGINT,
			DintRowStatus INT,
     		DAuditCreateUser nvarchar(100),  
     		DAuditCreateDTM datetime,  
     		DAuditUpdateUser nvarchar(100),  
     		DAuditUpdateDTM datetime,  
     		Drowguid uniqueidentifier,  
     		DSourceSystemNameID BIGINT,  
     		DSourceSystemKeyValue nvarchar(max),  
			DintRowStatusForSystemFunction INT,
     		ActionTaken nvarchar(10),  
			IidfEmployee BIGINT,
			ISystemFunctionID BIGINT,
			ISystemFunctionOperationID BIGINT,
			IAccessPermissionID BIGINT,
			IintRowStatus INT,
     		IAuditCreateUser nvarchar(100),  
     		IAuditCreateDTM datetime,  
     		IAuditUpdateUser nvarchar(100),  
     		IAuditUpdateDTM datetime,  
     		Irowguid uniqueidentifier,  
     		ISourceSystemNameID BIGINT,  
     		ISourceSystemKeyValue nvarchar(max),  
			IintRowStatusForSystemFunction INT     
		); 

		CREATE TABLE #Output2  
 		(
			DidfEmployee BIGINT,
			DSystemFunctionID BIGINT,
			DSystemFunctionOperationID BIGINT,
			DAccessPermissionID BIGINT,
			DintRowStatus INT,
     		DAuditCreateUser nvarchar(100),  
     		DAuditCreateDTM datetime,  
     		DAuditUpdateUser nvarchar(100),  
     		DAuditUpdateDTM datetime,  
     		Drowguid uniqueidentifier,  
     		DSourceSystemNameID BIGINT,  
     		DSourceSystemKeyValue nvarchar(max),  
			DintRowStatusForSystemFunction INT,
     		ActionTaken nvarchar(10),  
			IidfEmployee BIGINT,
			ISystemFunctionID BIGINT,
			ISystemFunctionOperationID BIGINT,
			IAccessPermissionID BIGINT,
			IintRowStatus INT,
     		IAuditCreateUser nvarchar(100),  
     		IAuditCreateDTM datetime,  
     		IAuditUpdateUser nvarchar(100),  
     		IAuditUpdateDTM datetime,  
     		Irowguid uniqueidentifier,  
     		ISourceSystemNameID BIGINT,  
     		ISourceSystemKeyValue nvarchar(max),  
			IintRowStatusForSystemFunction INT     
		) 

		CREATE TABLE #OutputI  
 		(
			DidfEmployee BIGINT,
			DSystemFunctionID BIGINT,
			DSystemFunctionOperationID BIGINT,
			DAccessPermissionID BIGINT,
			DintRowStatus INT,
     		DAuditCreateUser nvarchar(100),  
     		DAuditCreateDTM datetime,  
     		DAuditUpdateUser nvarchar(100),  
     		DAuditUpdateDTM datetime,  
     		Drowguid uniqueidentifier,  
     		DSourceSystemNameID BIGINT,  
     		DSourceSystemKeyValue nvarchar(max),  
			DintRowStatusForSystemFunction INT,
     		ActionTaken nvarchar(10),  
			IidfEmployee BIGINT,
			ISystemFunctionID BIGINT,
			ISystemFunctionOperationID BIGINT,
			IAccessPermissionID BIGINT,
			IintRowStatus INT,
     		IAuditCreateUser nvarchar(100),  
     		IAuditCreateDTM datetime,  
     		IAuditUpdateUser nvarchar(100),  
     		IAuditUpdateDTM datetime,  
     		Irowguid uniqueidentifier,  
     		ISourceSystemNameID BIGINT,  
     		ISourceSystemKeyValue nvarchar(max),  
			IintRowStatusForSystemFunction INT     
		) 

		-- Get and Set UserId and SiteId
		select @idfUserId =userInfo.UserId, @idfSiteId=UserInfo.SiteId from dbo.FN_UserSiteInformation(@user) userInfo

		--Data Audit--

BEGIN
	BEGIN TRY
		BEGIN TRANSACTION

		INSERT INTO @tempRSFA
		SELECT *
		FROM OPENJSON(@rolesandfunctions) WITH (
				RoleID BIGINT '$.RoleId',
				SystemFunctionID BIGINT '$.SystemFunction',
				SystemFunctionOperationID BIGINT '$.Operation',
				intRowStatus BIGINT,
				intRowStatusForSystemFunction BIGINT
				)
		
		MERGE dbo.LkupRoleSystemFunctionAccess rsfa
		USING @tempRSFA t
			ON (
					t.RoleID = rsfa.idfEmployee
					AND t.SystemFunctionID = rsfa.SystemFunctionID
					AND t.SystemFunctionOperationID = rsfa.SystemFunctionOperationID
					--AND (t.intRowStatusForSystemFunction = rsfa.intRowStatusForSystemFunction OR rsfa.intRowStatusForSystemFunction is NULL)
					)
		WHEN MATCHED
			THEN
				UPDATE
				SET rsfa.intRowStatus = t.IntRowStatus, rsfa.intRowStatusForSystemFunction= t.intRowStatusForSystemFunction
		WHEN NOT MATCHED BY TARGET
			THEN
				INSERT (
					idfEmployee,
					SystemFunctionID,
					SystemFunctionOperationID,
					intRowStatus,
					intRowStatusForSystemFunction,
					SourceSystemNameID,
					SourceSystemKeyValue,
					AuditCreateUser
					)
				VALUES (
					t.RoleID,
					t.SystemFunctionID,
					t.SystemFunctionOperationID,
					t.intRowStatus,
					t.intRowStatusForSystemFunction,
					10519001,
					'[{"idfEmployee":' + CAST(t.RoleID AS NVARCHAR(100)) + '"SystemFunctionID":' + CAST(t.SystemFunctionID AS NVARCHAR(100)) + '"SystemFunctionOperationID":' + CAST(t.SystemFunctionOperationID AS NVARCHAR(100)) + '}]',
					@user
					)

		OUTPUT DELETED.*, $action AS [Action], INSERTED.* INTO #Output;

		--Data Audit--
		DECLARE @RoleID BIGINT 
		SELECT TOP 1 @RoleID =  RoleID From @tempRSFA;

		--  tauDataAuditEvent  Event Type- Edit 
		set @idfsDataAuditEventType =10016003;
		-- insert record into tauDataAuditEvent - 
		EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType,@idfsObjectType,@RoleID, @idfObjectTable_LkupRoleSystemFunctionAccess, @idfDataAuditEvent OUTPUT

		INSERT INTO #Output2
		SELECT *
		FROM #Output
		Where ActionTaken = 'UPDATE'

		DECLARE @DidfEmployee BIGINT,
			@DSystemFunctionID BIGINT,
			@DSystemFunctionOperationID BIGINT,
			@DintRowStatus INT,
			@DintRowStatusForSystemFunction INT,
			@IidfEmployee BIGINT,
			@ISystemFunctionID BIGINT,
			@ISystemFunctionOperationID BIGINT,
			@IintRowStatus INT,
			@IintRowStatusForSystemFunction INT  

        WHILE EXISTS (SELECT * FROM #Output2)
        BEGIN

            SELECT TOP 1 
                @DidfEmployee = DidfEmployee,
                @DSystemFunctionID = DSystemFunctionID,
                @DSystemFunctionOperationID = DSystemFunctionOperationID,
                @DintRowStatus = DintRowStatus,
                @DintRowStatusForSystemFunction = DintRowStatusForSystemFunction,
                @IidfEmployee = IidfEmployee,
                @ISystemFunctionID = ISystemFunctionID,
                @ISystemFunctionOperationID = ISystemFunctionOperationID,
                @IintRowStatus = IintRowStatus,
                @IintRowStatusForSystemFunction = IintRowStatusForSystemFunction
            FROM #Output2;
            BEGIN
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, idfObjectTable, idfColumn, 
					idfObject, idfObjectDetail, 
					strOldValue, strNewValue)
				select @idfDataAuditEvent,@idfObjectTable_LkupRoleSystemFunctionAccess, 51586990000070,
					@DSystemFunctionID,@DSystemFunctionOperationID,
					@DintRowStatus,@IintRowStatus
				--from #Output2
				where (@DintRowStatus <> @IintRowStatus) 
					or(@DintRowStatus is not null and @IintRowStatus is null)
					or(@DintRowStatus is null and @IintRowStatus is not null)

				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, idfObjectTable, idfColumn, 
					idfObject, idfObjectDetail, 
					strOldValue, strNewValue)
				select @idfDataAuditEvent,@idfObjectTable_LkupRoleSystemFunctionAccess, 51586990000071,
					@DSystemFunctionID,@DSystemFunctionOperationID,
					@DintRowStatusForSystemFunction,@IintRowStatusForSystemFunction
				--from #Output2
				where (@DintRowStatusForSystemFunction <> @IintRowStatusForSystemFunction) 
					or(@DintRowStatusForSystemFunction is not null and @IintRowStatusForSystemFunction is null)
					or(@DintRowStatusForSystemFunction is null and @IintRowStatusForSystemFunction is not null)

            END

            DELETE FROM #Output2
            WHERE	DidfEmployee = @DidfEmployee AND
					DSystemFunctionID = @DSystemFunctionID AND
					DSystemFunctionOperationID = @DSystemFunctionOperationID;
        END

		INSERT INTO #OutputI
		SELECT *
		FROM #Output
		Where ActionTaken = 'INSERT'

        WHILE EXISTS (SELECT * FROM #OutputI)
        BEGIN

            SELECT TOP 1 
                @DidfEmployee = DidfEmployee,
                @DSystemFunctionID = DSystemFunctionID,
                @DSystemFunctionOperationID = DSystemFunctionOperationID,
                @DintRowStatus = DintRowStatus,
                @DintRowStatusForSystemFunction = DintRowStatusForSystemFunction,
                @IidfEmployee = IidfEmployee,
                @ISystemFunctionID = ISystemFunctionID,
                @ISystemFunctionOperationID = ISystemFunctionOperationID,
                @IintRowStatus = IintRowStatus,
                @IintRowStatusForSystemFunction = IintRowStatusForSystemFunction
            FROM #OutputI;
            BEGIN

				INSERT INTO tauDataAuditDetailCreate(idfDataAuditEvent, idfObjectTable, idfObject, idfObjectDetail)
						values ( @idfDataAuditEvent, @idfObjectTable_LkupRoleSystemFunctionAccess, @ISystemFunctionID, @ISystemFunctionOperationID)
            END

            DELETE FROM #OutputI
            WHERE	IidfEmployee = @IidfEmployee AND
					ISystemFunctionID = @ISystemFunctionID AND
					ISystemFunctionOperationID = @ISystemFunctionOperationID;
        END
		--Data Audit--

		IF @@TRANCOUNT > 0
			COMMIT

		SELECT @returnCode 'ReturnCode',@returnMsg 'ReturnMessage'
	END TRY

	BEGIN CATCH
		IF @@TRANCOUNT > 0
			BEGIN
				ROLLBACK
			END

		SET @returnMsg = 'ErrorNumber: ' + CONVERT(VARCHAR, ERROR_NUMBER()) + ' ErrorSeverity: ' + CONVERT(VARCHAR, ERROR_SEVERITY()) + ' ErrorState: ' + CONVERT(VARCHAR, ERROR_STATE()) + ' ErrorProcedure: ' + ISNULL(ERROR_PROCEDURE(), '') + ' ErrorLine: ' + CONVERT(VARCHAR, ISNULL(ERROR_LINE(), '')) + ' ErrorMessage: ' + ERROR_MESSAGE();
		SET @returnCode = ERROR_NUMBER();

		SELECT @returnCode AS ReturnCode, @returnMsg AS ReturnMessage;
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_FF_Copy_Template]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_FF_Copy_Template
-- Description: Copies the base structure of a template and its components to prevent historical damage.
--          
-- Revision History:
-- Name				Date		Change
-- ---------------	----------	--------------------------------------------------------------------
-- Doug Albanese	01/12/2021	Initial release for use by other SPs.
-- Doug Albanese	01/19/2021	Fixed the return to provide the new Form Template id
-- Doug Albanese	01/21/2021	Change of business rule to allow older templates to still be modified.
-- Doug Albanese	01/21/2021	Disabled UNI for the old template being copied.
-- Doug Albanese	07/02/2021	Altered the procedure to ignore blank idfsSections
-- Doug Albanese	07/06/2021	Refactored for use with a user initiated copy.
-- Doug Albanese	07/09/2021	Added language parameter
-- Doug Albanese	07/09/2021	Removed supression
-- Doug Albanese	07/12/2021	Corrected return aliases
-- Doug Albanese	07/12/2021	Corrections to remove copying of Sections and Parameters, and replace with association to the new template
-- Doug Albanese	07/14/2021	Turning off content to make this process a successor procedure only
-- Doug Albanese	07/14/2021	Created translation for SP generated "Copy"
-- Doug Albanese	07/14/2021	Added ordering from original template
-- Doug Albanese	07/14/2021	Added Edit Mode for Mandatory/Ordinary settings
--	Doug Albanese	05/12/2022	Adjusting for copying to another formtype
--	Doug Albanese	06/02/2022	Changed the functioncall parameter for USP_ADMIN_FF_ParameterTemplate_SET, to work with USP_ADMIN_FF_ParameterDesignOptions_SET
--	Doug Albanese	06/07/2022	Changed USP_ADMIN_FF_ParameterTemplate_SET, to call as a function
--	Doug Albanese	06/08/2022	Corrected the Determinants value copy. Was in the wrong place
--	Doug Albanese	06/10/2022	Making use of USP_ADMIN_FF_ParameterTemplateForCopy_SET, instead of USP_ADMIN_FF_ParameterTemplate_SET for EF Generation purposes
--								Realigned call to USP_Admin_FF_Rule_GetDetails for new changes
--	Doug Albanese	06/30/2022	Correcting the process of copying Determinants
--	Doug Albanese	07/01/2022	Removed rollback
--	Doug Albanese	07/21/2022	Re-aligned to work with changes made on USP_ADMIN_FF_Template_SET
--	Doug Albanese	08/04/2022	Added a secondary "intRowStatus"
--	Doug Albanese	08/04/2022	Corrected a call to USP_ADMIN_FF_Determinant_SET, because it was remotely set for Event logging.
--	Doug Albanese	08/04/2022	Corrected "Template Details" to coalesce the blnUNI value, when it was null
--  Doug Albanese	01/26/2023	Correction to allow Copying of templates to create Outbreak assigned flex forms.
-- Doug Albanese	03/22/2023	Changed SP to make use of UserId, instead of User...so that event logging will not break.
-- Doug Albanese	04/14/2023	Changed size of "Name" fields from 200 to 2000
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_FF_Copy_Template] (
	@LangId									NVARCHAR(50),
	@idfsFormTemplate						BIGINT,
	@User									NVARCHAR(50),
	@idfsSite								BIGINT = NULL,
	@idfsNewFormType						BIGINT = NULL
)
AS
BEGIN
	DECLARE @returnCode						INT = 0;
	DECLARE @returnMsg						NVARCHAR(MAX) = 'SUCCESS';
	
	Declare @SupressSelect TABLE
	(	
		retrunCode							INT,
		returnMessage						VARCHAR(200)
	) 

	DECLARE @Supress_USP_ADMIN_FF_Parameters_SET TABLE (
		ReturnCode							INT,
		ReturnMessage						VARCHAR(200),
		idfsParameter						BIGINT,
		idfsParameterCaption				BIGINT
	)
	
	DECLARE @Supress_USP_ADMIN_FF_ParameterTemplate_SET TABLE(
		ReturnData							VARCHAR(200)
	)

	DECLARE @iObservations					INT = 0


	BEGIN TRY
		
		--Changes that have the potential to trigger copying of a template
		--Template details
		--Parameter addition, moving, or deleting from a template
		--Section addition, moving, or deleting from a template
		--Parameter Editor changes
		--Section Editor Changes
		--Updating "Mandatory" status
		--Adding, Editing, or Removing a Rule

		DECLARE @FormTemplate				NVARCHAR(2000)
		DECLARE @NationalName				NVARCHAR(2000)
		DECLARE @NationalLongName			NVARCHAR(2000)
		DECLARE @idfsFormType				BIGINT
		DECLARE @strNote					NVARCHAR(MAX)
		DECLARE @blnUNI						BIT

		DECLARE @idfsSection				BIGINT
		DECLARE @idfsParameter				BIGINT
		DECLARE @idfsParentSection			BIGINT 
		DECLARE @DefaultName				NVARCHAR(2000)
		DECLARE @DefaultLongName			NVARCHAR(2000)
		DECLARE @intOrder					INT
		DECLARE @blnGrid					BIT
		DECLARE @blnFixedRowset				BIT
		DECLARE @idfsMatrixType				BIGINT
		DECLARE @intRowStatus				INT
		DECLARE @idfsSectionNew				BIGINT
		DECLARE @idfsFormTemplateNew		BIGINT

		DECLARE @idfsParameterNew			BIGINT
		DECLARE	@idfsParameterCaption		BIGINT
		DECLARE @idfsParameterType			BIGINT
		DECLARE @idfsEditor					BIGINT
		DECLARE @intHACode					INT
		DECLARE @langid_int					BIGINT
		DECLARE @idfsRule					BIGINT
		DECLARE @idfsEditMode				BIGINT

		DECLARE @idfsRuleMessage			BIGINT
		DECLARE @idfsRuleFunction			BIGINT
		DECLARE @idfsRuleAction				BIGINT
		DECLARE	@idfsFunctionParameter		BIGINT
		DECLARE @idfsActionParameter		BIGINT
		DECLARE	@idfsFunctionParameterNew	BIGINT
		DECLARE @idfsActionParameterNew		BIGINT
		DECLARE @intNumberOfParameters		INT
		DECLARE @idfsCheckPoint				BIGINT
		DECLARE @MessageText				NVARCHAR(MAX)
		DECLARE @MessageNationalText		NVARCHAR(MAX)
		DECLARE @blnNot						BIT
		DECLARE	@idfsRuleNew				BIGINT
		DECLARE	@strFillValue				NVARCHAR(MAX)
		DECLARE	@strCompareValue			NVARCHAR(MAX)

		DECLARE @DefaultRuleName			NVARCHAR(MAX)
		DECLARE @NationalRuleName			NVARCHAR(MAX)
		DECLARE @DefaultRuleMessage			NVARCHAR(MAX)
		DECLARE @NationalRuleMessage		NVARCHAR(MAX)
		DECLARE @strActionParameters		NVARCHAR(MAX)

		DECLARE @idfRuleConstant			BIGINT
		DECLARE @idfRuleConstantNew			BIGINT
		DECLARE @varConstant				SQL_VARIANT

		DECLARE @idfDeterminantValue		BIGINT
		DECLARE @idfsBaseReference			BIGINT
		DECLARE @idfsGISBaseReference		BIGINT

		DECLARE @strResourceString			NVARCHAR(200) = 'Copy'
		DECLARE @UserId						 BIGINT

		SET NOCOUNT ON

		SET @langid_int = dbo.FN_GBL_LanguageCode_GET(@LangID);

		SELECT @UserId = userInfo.UserId,
		  @idfsSite = userInfo.SiteId
		   FROM dbo.FN_UserSiteInformation(@User) userInfo;

		
		--Are any observations made for the given active (intRowStatus = 0) template?
		--SELECT
		--	@iObservations = COUNT(idfObservation)
		--FROM
		--	tlbObservation O
		--INNER JOIN ffFormTemplate FT
		--	ON FT.idfsFormTemplate = O.idfsFormTemplate
		--	AND FT.intRowStatus = 0
		--WHERE
		--	O.idfsFormTemplate = @idfsFormTemplate

		--IF @iObservations > 0
		--	BEGIN
				----------------------------------------------------------------------------------------
				--Create table structures for collecting up items to enumerate and tag,				  --
				--and capture EXEC results                                                            --
				----------------------------------------------------------------------------------------
				DECLARE @Sections TABLE (
					idfsSection			BIGINT NULL,
					idfsSectionNew		BIGINT NULL
				)

				DECLARE @Parameters TABLE (
					idfsParameter		BIGINT,
					idfsParameterNew	BIGINT,
					idfsSection			BIGINT,
					idfsSectionNew		BIGINT
				)

				DECLARE @ActionParameters TABLE (
					idfsParameter		BIGINT
				)

				DECLARE @FunctionParameters TABLE (
					idfsParameter		BIGINT
				)

				DECLARE @TemplateDetails TABLE (
					idfsFormTemplate	BIGINT,
					FormTemplate		NVARCHAR(2000),
					DefaultName			NVARCHAR(2000),
					NationalName		NVARCHAR(2000),
					idfsFormType		BIGINT,
					strNote				NVARCHAR(MAX),
					blnUNI				BIT
				)

				DECLARE @SectionSetResults TABLE (
					returnCode			BIGINT,
					returnMsg			NVARCHAR(MAX),
					idfsSection			BIGINT
				)

				DECLARE @SectionDetailResults TABLE (
					idfsParentSection	BIGINT,
					idfsFormType		BIGINT,
					intOrder			INT,
					blnGrid				BIT,
					blnFixedRowset		BIT,
					idfsMatrixType		BIGINT,
					strDefault			NVARCHAR(MAX),
					NationalName		NVARCHAR(MAX)
				)

				DECLARE @TemplateDetailsResults TABLE (
					returnCode			BIGINT,
					returnMsg			NVARCHAR(MAX),
					idfsFormTemplate	BIGINT
				)

				DECLARE	@Rules	TABLE (
					idfsRule			BIGINT,
					idfsRuleNew			BIGINT
				)

				DECLARE @RuleDetailResults TABLE (
					idfsRule				BIGINT,
					defaultRuleName			NVARCHAR(MAX),
					RuleName				NVARCHAR(MAX),
					idfsRuleMessage			BIGINT,
					defaultRuleMessage		NVARCHAR(MAX),
					RuleMessage				NVARCHAR(MAX),
					idfsCheckPoint			BIGINT,
					idfsRuleFunction		BIGINT,
					blnNot					BIT,
					idfsRuleAction			BIGINT,
					strActionParameters		NVARCHAR(MAX),
					idfsFunctionParameter	BIGINT,
					FillValue				NVARCHAR(MAX)
				)

				DECLARE @RuleConstants TABLE (
					idfRuleConstant		BIGINT,
					idfsRule			BIGINT,
					varConstant			SQL_VARIANT
				)

				DECLARE @Functions TABLE (
					idfParameterForFunction	BIGINT,
					idfsParameter			BIGINT,
					idfsFormTemplate		BIGINT,
					idfsRule				BIGINT,
					intOrder				INT,
					strCompareValue			NVARCHAR(MAX)
				)

				DECLARE @Actions TABLE (
					idfParameterForAction	BIGINT,
					idfsParameter			BIGINT,
					idfsFormTemplate		BIGINT,
					idfsRuleAction			BIGINT,
					idfsRule				BIGINT,
					strFillValue			NVARCHAR(MAX)
				)

				DECLARE @GlobalReference TABLE (
					idfs					BIGINT,
					idfsNew					BIGINT
				)

				DECLARE @Determinants TABLE (
					idfDeterminantValue		BIGINT,
					idfsBaseReference		BIGINT
				)

				----------------------------------------------------------------------------------------

				----------------------------------------------------------------------------------------
				--Make a copy of the base Template													  --
				----------------------------------------------------------------------------------------
				INSERT INTO @TemplateDetails
				EXEC USP_ADMIN_FF_Template_GetDetail @LangID = @LangId, @idfsFormTemplate = @idfsFormTemplate

				SELECT
					@idfsFormTemplate = idfsFormTemplate,
					@FormTemplate = FormTemplate,
					@DefaultName = DefaultName,
					@NationalName = NationalName,
					@idfsFormType = idfsFormType,
					@strNote = strNote,
					@blnUNI = COALESCE(blnUNI,0)
				FROM
					@TemplateDetails

				if @idfsNewFormType IS NOT NULL
					BEGIN
						--if NOT EXISTS(SELECT TOP 1 idfsFormTemplate FROM ffFormTemplate WHERE idfsFormType = @idfsNewFormType AND intRowStatus = 0)
						--	BEGIN
								SET @idfsFormType = @idfsNewFormType
								SET @blnUNI = 1
							--END
					END
				--Collect remaining details that are not supplied by the existing SP
				--SELECT
				--	@DefaultName = strDefault
				--FROM
				--	trtBaseReference 
				--WHERE
				--	idfsBaseReference = @idfsFormTemplate
				
				--Generate new idfsFormTemplate with existing names, having "Copy" appended to it
				SELECT
					@strResourceString = strResourceString
				FROM
					trtResourceTranslation
				WHERE 
					idfsResource = 744 and 
					idfsLanguage = @langid_int

				SET @DefaultName = CONCAT(@DefaultName,' (', @strResourceString , ')')
				SET @NationalName = CONCAT(@NationalName,' (', @strResourceString , ')')

				INSERT INTO @SupressSelect
				EXEC dbo.USSP_GBL_BaseReference_SET @idfsFormTemplateNew OUTPUT, 19000033/*'rftParameter'*/,@LangID, @DefaultName, @NationalName, 0

				--Create Global Reference for use by subsequential steps
				INSERT INTO @GlobalReference (idfs, idfsNew) VALUES (@idfsFormTemplate, @idfsFormTemplateNew)

				--Create the new Template
				INSERT INTO @SupressSelect
				EXEC USP_ADMIN_FF_Template_SET 
					@idfsFormType = @idfsFormType, 
					@DefaultName = @DefaultName,
					@NationalName = @NationalName, 
					@strNote = @strNote, 
					@LangId = @LangID, 
					@blnUNI = @blnUNI,
					@idfsFormTemplate = @idfsFormTemplateNew,
					@User = @User,
					@FunctionCall = 1,
					@CopyOnly = 1,
					@EventTypeId =10025120,
					@SiteId = @idfsSite,
					@UserId = @UserId,
					@LocationId = -1
					

				--Turn off UNI on old Template, since the newer on is the primary one now
				UPDATE
					ffFormTemplate
				SET
					blnUNI = 0
				WHERE
					idfsFormTemplate = @idfsFormTemplate

				--Disable existing Template
				--UPDATE
				--	ffFormTemplate
				--SET
				--	intRowStatus = 1
				--WHERE
				--	idfsFormTemplate = @idfsFormTemplate
				----------------------------------------------------------------------------------------

				----------------------------------------------------------------------------------------
				--Obtain a collection of Sections													  --
				----------------------------------------------------------------------------------------
				INSERT INTO @Sections (idfsSection)
				SELECT
					SFT.idfsSection
				FROM
					ffSectionForTemplate SFT
				INNER JOIN ffSection S
					ON S.idfsSection = SFT.idfsSection AND
						SFT.intRowStatus = 0
				WHERE
					SFT.idfsFormTemplate = @idfsFormTemplate AND
					S.intRowStatus = 0

				----------------------------------------------------------------------------------------

				----------------------------------------------------------------------------------------
				--Obtain a collection of Parameters and their associated Sections					  --
				----------------------------------------------------------------------------------------
				INSERT INTO @Parameters (idfsParameter, idfsSection)
				SELECT
					PFT.idfsParameter,
					P.idfsSection
				FROM
					ffParameterForTemplate PFT
				INNER JOIN ffParameter P
					ON P.idfsParameter = PFT.idfsParameter AND
						PFT.intRowStatus = 0
				WHERE
					PFT.idfsFormTemplate = @idfsFormTemplate AND
					P.intRowStatus = 0
				----------------------------------------------------------------------------------------

				----------------------------------------------------------------------------------------
				--Obtain a collection of Rules														  --
				----------------------------------------------------------------------------------------
				INSERT INTO @Rules (idfsRule)
				SELECT
					idfsRule
				FROM
					ffRule
				WHERE
					idfsFormTemplate = @idfsFormTemplate AND
					intRowStatus = 0
				----------------------------------------------------------------------------------------

				----------------------------------------------------------------------------------------
				--Obtain a collection of Rules														  --
				----------------------------------------------------------------------------------------
				--INSERT INTO @Rules (idfsRule)
				--SELECT
				--	idfsRule
				--FROM
				--	ffRule
				--WHERE
				--	idfsFormTemplate = @idfsFormTemplate
				----------------------------------------------------------------------------------------

				----------------------------------------------------------------------------------------
				--Obtain a collection of Rule Constants												  --
				----------------------------------------------------------------------------------------
				INSERT INTO @RuleConstants (idfRuleConstant, idfsRule, varConstant)
				SELECT
					RC.idfRuleConstant,
					RC.idfsRule,
					RC.varConstant
				FROM
					ffRuleConstant RC
				INNER JOIN ffRule R
					ON R.idfsRule = RC.idfsRule
				WHERE
					R.idfsFormTemplate = @idfsFormTemplate AND
					R.intRowStatus = 0
				----------------------------------------------------------------------------------------

				----------------------------------------------------------------------------------------
				--Obtain a collection of Template Determinants										  --
				--------------------------------------------------------------------------------------
				INSERT INTO @Determinants (idfDeterminantValue, idfsBaseReference)
				SELECT
					idfDeterminantValue,
					idfsBaseReference
				FROM
					ffDeterminantValue
				WHERE
					idfsFormTemplate = @idfsFormTemplate
				----------------------------------------------------------------------------------------

				----------------------------------------------------------------------------------------
				--Make a copy of each Section and its Template association							  --
				----------------------------------------------------------------------------------------
				WHILE EXISTS(SELECT TOP 1 idfsSection FROM @Sections WHERE idfsSectionNew IS NULL)
					BEGIN
						--Get another recored that hasn't been converted yet
						SELECT TOP 1 @idfsSection = idfsSection FROM @Sections WHERE idfsSectionNew IS NULL
						SELECT @intOrder = intOrder FROM ffSectionDesignOption WHERE idfsFormTemplate = @idfsFormTemplate AND idfsSection = @idfsSection
						
						--SELECT
						--	@idfsParentSection	= idfsParentSection,
						--	@idfsFormType		= idfsFormType,
						--	@intOrder			= S.intOrder,
						--	@blnGrid			= blnGrid,
						--	@blnFixedRowset		= blnFixedRowset,
						--	@idfsMatrixType		= idfsMatrixType,
						--	@DefaultName		= B.strDefault,
						--	@NationalName		= ISNULL(SNT.[strTextString], B.[strDefault]) 
						--FROM
						--	ffSection S
						--INNER JOIN dbo.trtBaseReference B
						--ON B.[idfsBaseReference] = S.[idfsSection]
						--   AND B.[intRowStatus] = 0  
						--LEFT JOIN dbo.trtStringNameTranslation SNT
						--ON SNT.[idfsBaseReference] = S.[idfsSection]
						--   AND SNT.idfsLanguage = @langid_int
						--   AND SNT.[intRowStatus] = 0
						--WHERE
						--	idfsSection = @idfsSection
							
						--Reset to grab a new id each iteration
						--SET @idfsSectionNew = NULL

						--Create another Section, based off of the details obtained from the previous step
						--INSERT INTO @SupressSelect
						--EXEC dbo.USSP_GBL_BaseReference_SET @idfsSectionNew OUTPUT,19000101,@LangID,@DefaultName,@NationalName,0

						--IF @idfsSectionNew IS NOT NULL 
						--	BEGIN
								--Create Global Reference for use by subsequential steps
								--INSERT INTO @GlobalReference (idfs, idfsNew) VALUES (@idfsSection, @idfsSectionNew)
								----INSERT INTO @SectionSetResults
								--INSERT INTO @SupressSelect
								--EXEC USP_ADMIN_FF_Sections_SET 
								--	@idfsSection		= @idfsSectionNew, 
								--	@idfsParentSection	= @idfsParentSection, 
								--	@idfsFormType		= @idfsFormType,
								--	@intOrder			= @intOrder,
								--	@blnGrid			= @blnGrid,
								--	@blnFixedRowset		= @blnFixedRowset,
								--	@idfsMatrixType		= @idfsMatrixType,
								--	@intRowStatus		= @intRowStatus,
								--	@User				= @User,
								--	@CopyOnly			= 1

								--Create entry for the association of this new Section against the new Template
								INSERT INTO @SupressSelect
								EXEC USP_ADMIN_FF_SectionTemplate_SET 
									@LangId = @LangID, 
									@idfsSection = @idfsSection, 
									@idfsFormTemplate = @idfsFormTemplateNew,
									@User = @User

								UPDATE
									ffSectionDesignOption
								SET
									intOrder = @intOrder
								WHERE
									idfsFormTemplate = @idfsFormTemplate AND
									idfsSection = @idfsSection

								--Update the temporary table, to mark it as converted
								UPDATE
									@Sections
								SET
									idfsSectionNew = @idfsSection
								WHERE
									idfsSection = @idfsSection

								UPDATE
									@Parameters
								SET
									idfsSectionNew = @idfsSection
								WHERE
									idfsSection = @idfsSection
									
								--Soft delete the old section, from the ffSection table
								--UPDATE 
								--	ffSection
								--SET
								--	intRowStatus = 1
								--WHERE
								--	idfsSection = @idfsSection
							--END
					END
				----------------------------------------------------------------------------------------

				----------------------------------------------------------------------------------------
				--Make a copy of each Parameter and its Template association						  --
				----------------------------------------------------------------------------------------
				WHILE EXISTS(SELECT TOP 1 idfsParameter FROM @Parameters WHERE idfsParameterNew IS NULL)
					BEGIN
						--Get another record that hasn't been converted yet
						SELECT TOP 1 @idfsParameter = idfsParameter FROM @Parameters WHERE idfsParameterNew IS NULL
						SELECT @intOrder = intOrder FROM ffParameterDesignOption WHERE idfsFormTemplate = @idfsFormTemplate AND idfsParameter = @idfsParameter
						SELECT @idfsEditMode = idfsEditMode FROM ffParameterForTemplate WHERE idfsFormTemplate = @idfsFormTemplate AND idfsParameter = @idfsParameter

						--Grab the details for the current parameter
						--SELECT
						--	@idfsSection			= P.idfsSection,
						--	@idfsParameterCaption	= P.idfsParameterCaption,
						--	@idfsParameterType		= P.idfsParameterType,
						--	@idfsFormType			= P.idfsFormType,
						--	@idfsEditor				= P.idfsEditor,
						--	@strNote				= P.strNote,
						--	@intOrder				= P.intOrder,
						--	@intHACode				= P.intHACode,
						--	@DefaultName			= ISNULL(B2.[strDefault], ''),
						--	@DefaultLongName		= ISNULL(B1.[strDefault], ''),
						--	@NationalName			= ISNULL(SNT2.[strTextString], B2.[strDefault]),
						--	@NationalLongName		= ISNULL(SNT1.[strTextString], B1.[strDefault])
						--FROM
						--	ffParameter P
						--INNER JOIN dbo.trtBaseReference B1
						--ON B1.[idfsBaseReference] = P.[idfsParameter]
						--	AND B1.[intRowStatus] = 0
						--LEFT JOIN dbo.trtBaseReference B2
						--ON B2.[idfsBaseReference] = P.[idfsParameterCaption]
						--	AND B2.[intRowStatus] = 0
						--LEFT JOIN dbo.trtStringNameTranslation SNT1
						--ON (SNT1.[idfsBaseReference] = P.[idfsParameter]
						--	AND SNT1.[idfsLanguage] = @langid_int)
						--	AND SNT1.[intRowStatus] = 0
						--LEFT JOIN dbo.trtStringNameTranslation SNT2
						--ON (SNT2.[idfsBaseReference] = P.[idfsParameterCaption]
						--	AND SNT2.[idfsLanguage] = @langid_int)
						--	AND SNT2.[intRowStatus] = 0
						--WHERE
						--	P.idfsParameter = @idfsParameter
							
						--Reset to grab a new id each iteration
						--SET @idfsParameterNew = NULL

						----Create another parameter, based off of the details obtained from the previous step
						--INSERT INTO @SupressSelect
						--EXEC dbo.USSP_GBL_BaseReference_SET @idfsParameterNew OUTPUT, 19000066/*'rftParameter'*/,@LangID, @DefaultLongName, @NationalLongName, 0

						--INSERT INTO @SupressSelect
						--EXEC dbo.USSP_GBL_BaseReference_SET @idfsParameterCaption OUTPUT, 19000070 /*'rftParameterToolTip'*/,@LangID, @DefaultName, @NationalName, 0

						----Create Global Reference for use by subsequential steps
						--INSERT INTO @GlobalReference (idfs, idfsNew) VALUES (@idfsParameter, @idfsParameterNew)

						--Obtain the id for the newly copied section
						--SELECT
						--	@idfsSectionNew = idfsSectionNew
						--FROM
						--	@Parameters
						--WHERE
						--	idfsParameter = @idfsParameter

						--Create the copy of the existing Parameter
						--INSERT INTO @Supress_USP_ADMIN_FF_Parameters_SET
						--EXEC USP_ADMIN_FF_Parameters_SET 
						--	@LangID					= @LangID,
						--	@idfsSection			= @idfsSectionNew, 
						--	@idfsFormType			= @idfsFormType,
						--	@idfsParameterType		= @idfsParameterType,
						--	@idfsEditor				= @idfsEditor,
						--	@intHACode				= @intHACode,
						--	@intOrder				= @intOrder,
						--	@strNote				= @strNote,
						--	@DefaultName			= @DefaultName,
						--	@NationalName			= @NationalName,
						--	@DefaultLongName		= @DefaultLongName,
						--	@NationalLongName		= @NationalLongName,
						--	@idfsParameter			= @idfsParameterNew,
						--	@idfsParameterCaption	= @idfsParameterCaption,
						--	@User					= @User,
						--	@intRowStatus			= 0,
						--	@CopyOnly				= 1

						--Create entry for the association of this new Section against the new Template
						--INSERT INTO @Supress_USP_ADMIN_FF_ParameterTemplate_SET
						EXEC USP_ADMIN_FF_ParameterTemplateForCopy_SET
							@LangID= @LangID,
							@idfsParameter = @idfsParameter, 
							@idfsFormTemplate = @idfsFormTemplateNew,
							@User = @User,
							@CopyOnly = 1,
							@FunctionCall = 1

						--Apply ordering settings
						UPDATE
							ffParameterDesignOption
						SET
							intOrder = @intOrder
						WHERE
							idfsFormTemplate = @idfsFormTemplateNew AND
							idfsParameter = @idfsParameter

						--Apply Edit Mode (Mandatory or Ordinary)
						UPDATE
							ffParameterForTemplate
						SET
							idfsEditMode = @idfsEditMode
						WHERE
							idfsFormTemplate = @idfsFormTemplateNew AND
							idfsParameter = @idfsParameter

						--Update the temporary table, to mark it as converted
						UPDATE
							@Parameters
						SET
							idfsParameterNew = @idfsParameter
						WHERE
							idfsParameter = @idfsParameter


						--Soft delete the old section, from the ffSection table
						--UPDATE 
						--	ffParameter
						--SET
						--	intRowStatus = 1
						--WHERE
						--	idfsParameter = @idfsParameter

					END
				----------------------------------------------------------------------------------------

				--Enumerate through all determinants that are related to the Template
				WHILE EXISTS (SELECT idfDeterminantValue FROM @Determinants)
					BEGIN
						--Grab the first items in the list
						SELECT
							TOP 1
							@idfDeterminantValue = idfDeterminantValue,
							@idfsBaseReference = idfsBaseReference
						FROM
							@Determinants

						--Create the copy of the existing entry
						INSERT INTO @SupressSelect
						EXEC USP_ADMIN_FF_Determinant_SET @idfsDiagnosisGroup = @idfsBaseReference, 
														@idfsFormTemplate = @idfsFormTemplateNew, 
														@User = @User, 
														@intRowStatus = 0, 
														@FunctionCall = 1,
														@EventTypeId =10025120,
														@SiteId = @idfsSite,
														@UserId = @UserId,
														@LocationId = NULL

						--Disable
						UPDATE
							ffDeterminantValue
						SET
							intRowStatus = 1
						WHERE
							idfDeterminantValue = @idfDeterminantValue

						DELETE
						FROM
							@Determinants
						WHERE
							idfDeterminantValue = @idfDeterminantValue
					END

				----------------------------------------------------------------------------------------
				--Make a copy of each Rule															  --
				----------------------------------------------------------------------------------------
				WHILE EXISTS(SELECT TOP 1 idfsRule FROM @Rules WHERE idfsRuleNew IS NULL)
					BEGIN
						--Get another record that hasn't been converted yet
						SELECT
							TOP 1 @idfsRule = idfsRule
						FROM
							@Rules
						WHERE
							idfsRuleNew IS NULL

						--Reset @RuleDetailResults, so that it will only have one row at a time in it
						DELETE FROM @RuleDetailResults

						--Grab the details for the current Rule
						INSERT INTO @RuleDetailResults
						EXEC USP_ADMIN_FF_Rule_GetDetails @langid=@LangId, @idfsRule = @idfsRule

						SELECT
							@idfsRule = idfsRule,
							@DefaultRuleName = defaultRuleName,
							@NationalRuleName = RuleName,
							@DefaultRuleMessage = defaultRuleMessage,
							@NationalRuleMessage = RuleMessage,
							@idfsRuleMessage = idfsRuleMessage,
							@idfsCheckPoint = idfsCheckPoint,
							@idfsRuleFunction = idfsRuleFunction,
							@blnNot = blnNot,
							@idfsRuleAction = idfsRuleAction,
							@strActionParameters = strActionParameters,
							@idfsFunctionParameter = idfsFunctionParameter,
							@strFillValue = FillValue
						FROM
							@RuleDetailResults
						
						--Reset to grab a new id each iteration
						--SET @idfsRuleNew = -1

						--Create another Rule, based off of the details obtained from the previous step
						--INSERT INTO @SupressSelect
						EXEC dbo.USSP_GBL_BaseReference_SET @ReferenceID = @idfsRuleNew OUTPUT, @ReferenceType = 19000029, @LangId = @LangID, @DefaultName = @DefaultName, @NationalName = @NationalName, @System = 0

						INSERT INTO @SupressSelect
						EXEC dbo.USSP_GBL_BaseReference_SET @idfsRuleMessage OUTPUT, 19000032, @LangID, @MessageText, @MessageNationalText, 0
						
						--Create Global Reference for use by subsequential steps
						INSERT INTO @GlobalReference (idfs, idfsNew) VALUES (@idfsRule, @idfsRuleNew)

						--Reset the Action Parameters Table
						DELETE FROM @ActionParameters
						
						--Create table from string "Parameters" of the current rule details
						INSERT INTO @ActionParameters (idfsParameter)
						SELECT
							CAST(L.value AS BIGINT) AS idfsParameter
						FROM
							[dbo].[FN_GBL_SYS_SplitList](@strActionParameters, 0, ',') L

						--Get the conversion of the idfsParameter from its old value for the Function that the parameter is using.
						SELECT
							@idfsFunctionParameterNew = idfsNew
						FROM
							@GlobalReference
						WHERE
							idfs = @idfsFunctionParameter

						
						--Enumerate through all Action Parameters, that are associated with the rule
						WHILE EXISTS(SELECT idfsParameter FROM @ActionParameters)
							BEGIN
								SELECT 
									TOP 1 @idfsActionParameter = idfsParameter
								FROM
									@ActionParameters
									
								--Get the conversion of the idfsParameter from its old value for the Action that the parameter is using.
								SELECT
									@idfsActionParameterNew = idfsNew
								FROM
									@GlobalReference
								WHERE
									idfs = @idfsActionParameter

								--Create the copy of the existing Parameter
								--INSERT INTO @SupressSelect
								EXEC USP_ADMIN_FF_Rules_SET
									@idfsRule = @idfsRuleNew,
									@idfsFormTemplate = @idfsFormTemplateNew,
									@idfsCheckPoint = @idfsCheckPoint,
									@idfsRuleFunction = @idfsRuleFunction,
									@idfsRuleAction = @idfsRuleAction,
									@DefaultName = @DefaultName,
									@NationalName = @NationalName,
									@MessageText = @MessageText,
									@MessageNationalText = @MessageNationalText,
									@blnNot = @blnNot,
									@LangID = @LangID,
									@idfsRuleMessage = @idfsRuleMessage,
									@idfsFunctionParameter = @idfsFunctionParameterNew,
									@idfsActionParameter = @idfsActionParameterNew,
									@User = @User,
									@strFillValue = @strFillValue,
									@strCompareValue = @strCompareValue,
									@intRowStatus = 0,
									@FunctionCall = 1,
									@CopyOnly = 1

								DELETE FROM @ActionParameters WHERE idfsParameter = @idfsActionParameter
							END

						--Enumerate through all Constants, that are related to the Rule
						WHILE EXISTS(SELECT idfRuleConstant FROM @RuleConstants)
							BEGIN
								SELECT
									TOP 1
									@idfRuleConstant = idfRuleConstant,
									@idfsRule = idfsRule,
									@varConstant = varConstant
								FROM
									@RuleConstants

								--Get a new row id
								INSERT INTO @SupressSelect
								EXEC dbo.USP_GBL_NEXTKEYID_GET 'ffRuleConstant', @idfRuleConstantNew OUTPUT;

								--Get the newly created id for the old entry.
								SELECT
									@idfRuleConstantNew = idfsNew
								FROM
									@GlobalReference
								WHERE
									idfs = @idfRuleConstant

								--Get the newly created id for the old entry.
								SELECT
									@idfsRuleNew = idfsNew
								FROM
									@GlobalReference
								WHERE
									idfs = @idfsRuleNew

								--Create the new Record
								INSERT INTO ffRuleConstant (
									idfRuleConstant, 
									idfsRule, 
									varConstant, 
									intRowStatus,
									AuditCreateDTM,
									AuditCreateUser
								)
								VALUES (
									@idfRuleConstantNew,
									@idfsRuleNew,
									@varConstant,
									0,
									GETDATE(),
									@User
								)
								
								--Delete the top record so that continous looping doesn't occur to produce records over and over
								DELETE 
								FROM 
									@RuleConstants
								WHERE
									idfRuleConstant = @idfRuleConstant
							END
						
						--Update the temporary table, to mark it as converted
						UPDATE
							@Rules
						SET
							idfsRuleNew = @idfsRuleNew
						WHERE
							idfsRule = @idfsRule
						
						--Soft delete the old section, from the ffSection table
						UPDATE 
							ffRule
						SET
							intRowStatus = 1
						WHERE
							idfsRule= @idfsRule

					END
				----------------------------------------------------------------------------------------

				--USP_ADMIN_FF_Parameter_Copy
				--USP_ADMIN_FF_Section_Copy
				--SELECT * FROM @SectionsParameters
				--USP_ADMIN_FF_TemplateSectionOrder_Set
				--USP_ADMIN_FF_RequiredParameter_SET
				--USP_ADMIN_FF_ParameterDesignOptions_SET
				--USP_ADMIN_FF_Parameters_SET
				--USP_ADMIN_FF_ParameterFixedPresetValue_SET
				--USP_ADMIN_FF_ParameterTypes_SET
				--USP_ADMIN_FF_ParameterTemplate_SET
				--USP_ADMIN_FF_RuleConstant_SET
				--USP_ADMIN_FF_RuleParameterForAction_SET
				--USP_ADMIN_FF_RuleParameterForFunction_SET
				--USP_ADMIN_FF_Rules_SET
				--USP_ADMIN_FF_SectionDesignOptions_SET
				--USP_ADMIN_FF_Sections_SET
				--USP_ADMIN_FF_SectionTemplate_SET
				--USP_ADMIN_FF_SectionTemplateRecursive_SET ????????????????
				--USP_ADMIN_FF_Template_SET
				--USP_ADMIN_FF_TemplateDeterminantValues_SET
				--USP_ADMIN_FF_TemplateParameterOrder_Set
				--USP_ADMIN_FF_Determinant_SET

			--END
		
		--If any observations are made, then the following must be copied
		--select * from ffDeterminantValue where idfsFormTemplate = 9871670000000 

		IF @idfsFormTemplateNew IS NULL
			BEGIN
				SET @idfsFormTemplateNew = @idfsFormTemplate
			END

		SELECT	@returnCode as ReturnCode, @returnMsg as ReturnMessage, @idfsFormTemplateNew As idfsFormTemplate
	END TRY

	BEGIN CATCH

		SET @returnCode = ERROR_NUMBER();
		SET @returnMsg = 'ErrorNumber: ' + CONVERT(VARCHAR, ERROR_NUMBER()) + ' ErrorSeverity: ' + CONVERT(VARCHAR, ERROR_SEVERITY()) + ' ErrorState: ' + CONVERT(VARCHAR, ERROR_STATE()) + ' ErrorProcedure: ' + ISNULL(ERROR_PROCEDURE(), '') + ' ErrorLine: ' + CONVERT(VARCHAR, ISNULL(ERROR_LINE(), '')) + ' ErrorMessage: ' + ERROR_MESSAGE();;

		throw;
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_FF_FlexForm_Get]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_FF_FlexForm_Get
-- Description: Gets list of the Parameters.
--          
-- Revision History:
-- Name				Date			Change
-- ---------------	----------	--------------------------------------------------------------------
-- Doug Albabese	01/06/2020	Initial release for new API.
-- Doug Albanese	07/02/2020	Added field blnGrid to denote the displaying of data in a table format
-- Doug Albanese	09/30/2020	Added filtering for language on the Design Option Tables
-- Doug Albanese	01/06/2021	Added idfsEditMode to clarify if the parameter is required or not.
-- Doug Albanese	02/02/2021	Found a static value for English in this procedure.
-- Doug Albanese	08/01/2021	Added idfsFormTemplate for ease of access
-- Mark Wilson		09/29/2021	Updated to remove E7 FN_FF_DesignLanguageForParameter_GET, 
--								removed unused parameters
-- Doug Albanese	03/17/2022	Added a "commented out" section to replace, when development is not happening during core hours
--	Doug Albanese	08/02/2022	Fix for IGAT #400. Extra parameters showing up that didn't belong to questionnnaire on matrix.
-- Doug Albanese	 01/0/2023	 Changed up a join to see if the displayed labeling will work better for the customer.
-- Doug Albanese	 02/06/2023	 Changed how Parameters, whith no sections, or ordered.
-- Doug Albanese	 02/28/2023	 Update for adding the Parent Section name
-- Doug Albanese	 03/01/2023	 Added the "Decore Element Text"
-- Doug Albnaese	04/13/2023	Added a "Coalesce" to make use of default data from the english side, when none exist for the selected language.
/*
DECLARE    @return_value int

 

EXEC    @return_value = [dbo].[USP_ADMIN_FF_FlexForm_Get]
        @LangID = N'en-US',
        @idfsDiagnosis = 7719020000000,
        @idfsFormType = 10034010,
        @idfsFormTemplate = NULL

*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_FF_FlexForm_Get] (
	@LangID						NVARCHAR(50) = NULL
	,@idfsDiagnosis				BIGINT = NULL
	,@idfsFormType				BIGINT = NULL
	,@idfsFormTemplate			BIGINT = NULL
	)
AS
BEGIN
	DECLARE @idfsCountry AS BIGINT,
			@idfsLanguage BIGINT = dbo.FN_GBL_LanguageCode_GET(@LangID)
	DECLARE @tmpTemplate AS TABLE (
		idfsFormTemplate BIGINT
		,IsUNITemplate BIT
		)
	DECLARE @returnCode INT = 0;
	DECLARE @returnMsg NVARCHAR(MAX) = 'SUCCESS';

	BEGIN TRY
		IF @idfsFormTemplate IS NULL
			BEGIN
				--Obtain idfsFormTemplate, via given parameters of idfsDiagnosis and idfsFormType
				---------------------------------------------------------------------------------
				SET @idfsCountry = dbo.FN_GBL_CurrentCountry_GET()

				INSERT INTO @tmpTemplate
				EXECUTE dbo.USP_ADMIN_FF_ActualTemplate_GET 
					@idfsCountry,
					@idfsDiagnosis,
					@idfsFormType

				SELECT TOP 1 @idfsFormTemplate = idfsFormTemplate
				FROM @tmpTemplate

				IF @idfsFormTemplate = - 1
					SET @idfsFormTemplate = NULL

				---------------------------------------------------------------------------------
			END

		SELECT 
			s.idfsParentSection
			,COALESCE(p.idfsSection,0) AS idfsSection
			,p.idfsParameter
			,PS.name AS ParentSectionName
			,RF.Name AS SectionName
			,PN.Name AS ParameterName
			,PTR.Name AS parameterType
			,p.idfsParameterType
			,pt.idfsReferenceType
			,p.idfsEditor
			,COALESCE(sdo.intOrder,2147483646) AS SectionOrder
			,COALESCE(PDO.intOrder, PDO_C.intOrder) AS ParameterOrder
			,s.blnGrid
			,s.blnFixedRowSet
			,PFT.idfsEditMode
			,pft.idfsFormTemplate
			,DT.name AS DecoreElementText
		FROM dbo.ffParameter p
		LEFT JOIN dbo.ffParameterForTemplate PFT ON PFT.idfsParameter = p.idfsParameter AND PFT.intRowStatus = 0
		LEFT JOIN dbo.ffSection s ON s.idfsSection = p.idfsSection
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000101) PS ON S.idfsParentSection = PS.idfsReference
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000101) RF ON S.idfsSection = RF.idfsReference
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000071) PTR ON PTR.idfsReference = P.idfsParameterType
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000070) PN ON PN.idfsReference = P.idfsParameterCaption
		LEFT JOIN dbo.ffParameterDesignOption PDO ON PFT.idfsParameter = PDO.idfsParameter
			AND PDO.idfsFormTemplate = PFT.idfsFormTemplate
			AND PDO.idfsLanguage = @idfsLanguage
			AND PDO.intRowStatus = 0
		LEFT JOIN dbo.ffSectionDesignOption sdo ON sdo.idfsSection = s.idfsSection 
			AND sdo.idfsFormTemplate = @idfsFormTemplate 
			AND sdo.idfsLanguage = @idfsLanguage
			AND sdo.intRowStatus = 0
		LEFT JOIN dbo.ffParameterType PT
			ON pt.idfsParameterType = p.idfsParameterType
		LEFT JOIN ffDecorElement DE
			ON DE.idfsFormTemplate = @idfsFormTemplate AND DE.idfsSection = s.idfsParentSection AND DE.intRowStatus = 0
	    LEFT JOIN ffDecorElementText DET
			ON DET.idfDecorElement = DE.idfDecorElement
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000131) DT ON DT.idfsReference = DET.idfsBaseReference
		--------------------------------------------------------------------------------------------------------------------
		--Special join for coalescing design options that may not exist                                                   --
		--------------------------------------------------------------------------------------------------------------------
		LEFT JOIN dbo.ffParameterDesignOption PDO_C ON PFT.idfsParameter = PDO_C.idfsParameter
			AND PDO_C.idfsFormTemplate = PFT.idfsFormTemplate
			AND PDO_C.idfsLanguage = dbo.FN_GBL_LanguageCode_GET('en-us') --Default language, DO NOT REMOVE
			AND PDO_C.intRowStatus = 0
		--------------------------------------------------------------------------------------------------------------------

		WHERE PFT.idfsFormTemplate = @idfsFormTemplate
		ORDER BY  SectionOrder
			,ParameterOrder

	END TRY

	BEGIN CATCH
		IF @@TRANCOUNT = 1
			ROLLBACK;

		SET @returnCode = ERROR_NUMBER();
		SET @returnMsg = 'ErrorNumber: ' + CONVERT(VARCHAR, ERROR_NUMBER()) + ' ErrorSeverity: ' + CONVERT(VARCHAR, ERROR_SEVERITY()) + ' ErrorState: ' + CONVERT(VARCHAR, ERROR_STATE()) + ' ErrorProcedure: ' + ISNULL(ERROR_PROCEDURE(), '') + ' ErrorLine: ' + CONVERT(VARCHAR, ISNULL(ERROR_LINE(), '')) + ' ErrorMessage: ' + ERROR_MESSAGE();;

		THROW;
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_SITE_DEL]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_SITE_DEL
--
-- Description:	Sets a site record to "inactive".
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     11/12/2019 Initial release.
-- Mark Wilson      02/07/2023 Removed checks for child objects per conversation with Anatoliy.
--                             Also, added code to deactivate users and roles associated with the site.
-- Stephen Long     04/19/2023 Removed language ID parameter.

/*

EXEC dbo.USP_ADMIN_SITE_DEL 
	@LanguageID = 'en-US',
	@SiteID = 3614,
	@UserName = 'Mark'

*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_SITE_DEL]
(
    @SiteID BIGINT,
    @AuditUserName NVARCHAR(200)
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        DECLARE @ReturnCode INT = 0,
                @ReturnMessage NVARCHAR(MAX) = 'SUCCESS'

        -- table to hold list of Employees to delete
        DECLARE @tlbEmployee TABLE (idfEmployee BIGINT);
        --------------------------------------------------------------------------------------------------------------------
        --- Disable all users and roles associated with this site before the site is de-activated
        --------------------------------------------------------------------------------------------------------------------
        INSERT INTO @tlbEmployee
        SELECT idfEmployee
        FROM dbo.tlbEmployee
        WHERE idfsSite = @SiteID;

        UPDATE dbo.tlbEmployeeGroup
        SET intRowStatus = 1,
            AuditUpdateDTM = GETDATE(),
            AuditUpdateUser = @AuditUserName
        WHERE idfsSite = @SiteID;

        UPDATE dbo.tlbEmployee
        SET intRowStatus = 1,
            AuditUpdateDTM = GETDATE(),
            AuditUpdateUser = @AuditUserName
        WHERE idfsSite = @SiteID;

        UPDATE dbo.LkupRoleSystemFunctionAccess
        SET intRowStatus = 1,
            AuditUpdateDTM = GETDATE(),
            AuditUpdateUser = @AuditUserName
        WHERE idfEmployee IN (
                                 SELECT idfEmployee FROM @tlbEmployee
                             );

        --------------------------------------------------------------------------------------------------------------------
        --- preceding lines were added to disable users and roles associated with the deleted sites
        --------------------------------------------------------------------------------------------------------------------		

        UPDATE dbo.tstSite
        SET intRowStatus = 1,
            AuditUpdateDTM = GETDATE(),
            AuditUpdateUser = @AuditUserName
        WHERE idfsSite = @SiteID;


        IF @@TRANCOUNT > 0
           AND @returnCode = 0
            COMMIT TRANSACTION;

        SELECT @ReturnCode ReturnCode,
               @ReturnMessage ReturnMessage;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK TRANSACTION;

        SET @ReturnCode = ERROR_NUMBER();
        SET @ReturnMessage = ERROR_MESSAGE();

        SELECT @ReturnCode ReturnCode,
               @ReturnMessage ReturnMessage;

        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_CONF_AGEGROUPSTATISTICALAGEGROUPMATRIX_DEL]...';


GO
-- ================================================================================================
-- Name: USP_CONF_AGEGROUPSTATISTICALAGEGROUPMATRIX_DEL
--
-- Description:	Deletes an age group to statistical age group matrix
--
-- Author: Ricky Moss
-- Revision History:
-- Name                          Date       Change Detail
-- ----------------------------- ---------- ------------------------------------------------------
-- Ricky Moss                    04/03/2019 Initial Release
-- Stephen Long                  04/13/2023 Added site alert logic.
--
-- EXEC USP_CONF_AGEGROUPSTATISTICALAGEGROUPMATRIX_DEL 51528390000001, 1
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_CONF_AGEGROUPSTATISTICALAGEGROUPMATRIX_DEL]
(
    @idfDiagnosisAgeGroupToStatisticalAgeGroup BIGINT,
    @deleteAnyway BIT = 0,
    @EventTypeId BIGINT,
    @SiteId BIGINT,
    @UserId BIGINT,
    @LocationId BIGINT,
    @AuditUserName NVARCHAR(200)
)
AS
DECLARE @ReturnCode INT = 0,
        @ReturnMessage NVARCHAR(MAX) = 'SUCCESS';
DECLARE @SuppressSelect TABLE
(
    ReturnCode INT,
    ReturnMessage NVARCHAR(MAX)
);
BEGIN
    BEGIN TRY
        UPDATE dbo.trtDiagnosisAgeGroupToStatisticalAgeGroup
        SET intRowStatus = 1,
            AuditUpdateDTM = GETDATE(),
            AuditUpdateUser = @AuditUserName
        WHERE idfDiagnosisAgeGroupToStatisticalAgeGroup = @idfDiagnosisAgeGroupToStatisticalAgeGroup;

        INSERT INTO @SuppressSelect
        EXECUTE dbo.USP_ADMIN_EVENT_SET-1,
                                       @EventTypeId,
                                       @UserId,
                                       @idfDiagnosisAgeGroupToStatisticalAgeGroup,
                                       NULL,
                                       @SiteId,
                                       NULL,
                                       @SiteId,
                                       @LocationId,
                                       @AuditUserName;

        SELECT @ReturnCode AS ReturnCode,
               @ReturnMessage AS ReturnMessage;
    END TRY
    BEGIN CATCH
        THROW
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_CONF_CUSTOMREPORT_DEL]...';


GO
-- ================================================================================================
-- NAME: USP_CONF_CUSTOMREPORT_DEL
--
-- DESCRIPTION: Removes a custom report item

-- AUTHOR: Ricky Moss

-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Ricky Moss		03/21/2019 Initial Release
-- Ann Xiong		05/14/2021 Changed SELECT @returnCode 'returnCode', @returnMsg 'returnMsg' to 
--                             SELECT @returnCode as ReturnCode, @returnMsg as ReturnMessage, 
--                             @idfReportRows as idfReportRows
-- Stephen Long     04/13/2023 Added site alert logic.
--
-- exec USP_CONF_CUSTOMREPORT_DEL 55540680000323, 0
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_CONF_CUSTOMREPORT_DEL]
(
    @idfReportRows BIGINT,
    @deleteAnyway BIT,
    @EventTypeId BIGINT,
    @SiteId BIGINT,
    @UserId BIGINT,
    @LocationId BIGINT,
    @AuditUserName NVARCHAR(200)
)
AS
DECLARE @ReturnCode INT = 0,
        @ReturnMessage NVARCHAR(MAX) = 'SUCCESS';
DECLARE @SuppressSelect TABLE
(
    ReturnCode INT,
    ReturnMessage NVARCHAR(MAX)
);
BEGIN
    BEGIN TRY
        UPDATE dbo.trtReportRows
        SET intRowStatus = 1,
            AuditUpdateDTM = GETDATE(),
            AuditUpdateUser = @AuditUserName
        WHERE idfReportRows = @idfReportRows;

        INSERT INTO @SuppressSelect
        EXECUTE dbo.USP_ADMIN_EVENT_SET-1,
                                       @EventTypeId,
                                       @UserId,
                                       @idfReportRows,
                                       NULL,
                                       @SiteId,
                                       NULL,
                                       @SiteId,
                                       @LocationId,
                                       @AuditUserName;

        SELECT @ReturnCode AS ReturnCode,
               @ReturnMessage AS ReturnMessage;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_CONF_CUSTOMREPORT_GETLIST]...';


GO
--=====================================================================================================
-- Name: USP_CONF_CUSTOMREPORT_GETLIST
-- Description:	Returns list of custom disease reports
--							
-- Author:		Ricky Moss
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -----------------------------------------------
-- Ricky Moss		03/21/2018 Initial Release
-- Ann Xiong        04/26/2021 Added paging and idfsUsingType to the return list
-- Mandar Kulkarni  08/02/2021 Fixed the issue of Custom Report Row sorting records by "Name" is not 
--                             working
-- Mike Kornegay	08/17/2021 Added intRowOrder to stored proc to implement sort by specific order
-- Stephen Long     04/13/2023 Added dbo prefix.
--
-- Test Code:
-- exec USP_CONF_CUSTOMREPORT_GETLIST 'en', 55540680000323 
-- exec USP_CONF_CUSTOMREPORT_GETLIST 'en', 55540680000324
--=====================================================================================================
ALTER PROCEDURE [dbo].[USP_CONF_CUSTOMREPORT_GETLIST]
(
    @langId NVARCHAR(10),
    @idfsCustomReportType BIGINT,
    @pageNo INT = 1,
    @pageSize INT = 10,
    @sortColumn NVARCHAR(50) = 'intRowOrder',
    @sortOrder NVARCHAR(4) = 'asc'
)
AS
BEGIN
    BEGIN TRY
        DECLARE @firstRec INT = (@pageNo - 1) * @pagesize,
                @lastRec INT = (@pageNo * @pageSize + 1);
        DECLARE @t TABLE
        (
            idfReportRows BIGINT,
            idfsCustomReportType BIGINT,
            strCustomReportType NVARCHAR(2000),
            idfsDiagnosisOrDiagnosisGroup BIGINT,
            strDiagnosisOrDiagnosisGroupName NVARCHAR(2000),
            strDiseaseOrReportDiseaseGroup NVARCHAR(2000),
            idfsUsingType BIGINT,
            strUsingType NVARCHAR(2000),
            idfsReportAdditionalText BIGINT,
            strAdditionalReportText NVARCHAR(2000),
            idfsICDReportAdditionalText BIGINT,
            strICDReportAdditionalText NVARCHAR(2000),
            intRowOrder INT
        );

        INSERT INTO @T
        SELECT rr.idfReportRows,
               rr.idfsCustomReportType,
               crtbr.name as strCustomReportType,
               d.idfsDiagnosisOrDiagnosisGroup,
               d.strDiagnosisOrDiagnosisGroupName AS strDiagnosisOrDiagnosisGroupName,
               d.strDiseaseOrReportDiseaseGroup AS strDiseaseOrReportDiseaseGroup,
               d.idfsUsingType,
               d.strUsingType,
               rr.idfsReportAdditionalText,
               artbr.name AS strAdditionalReportText,
               rr.idfsICDReportAdditionalText,
               icdbr.name as strICDReportAdditionalText,
               rr.intRowOrder
        FROM dbo.trtReportRows rr
            INNER JOIN dbo.FN_GBL_Reference_GETList(@langId, 19000129) crtbr
                ON rr.idfsCustomReportType = crtbr.idfsReference
            INNER JOIN
            (
                SELECT dbr.idfsReference AS idfsDiagnosisOrDiagnosisGroup,
                       dbr.name AS strDiagnosisOrDiagnosisGroupName,
                       rtbr.name AS strDiseaseOrReportDiseaseGroup,
                       d.idfsUsingType,
                       utbr.name AS strUsingType
                FROM dbo.trtDiagnosis d
                    JOIN dbo.FN_GBL_Reference_GETList(@langId, 19000019) dbr
                        ON d.idfsDiagnosis = dbr.idfsReference
                    JOIN dbo.FN_GBL_Reference_GETList(@langId, 19000076) rtbr
                        ON dbr.idfsReferenceType = rtbr.idfsReference
                    JOIN dbo.FN_GBL_Reference_GETList(@langId, 19000020) utbr
                        ON d.idfsUsingType = utbr.idfsReference
                UNION
                SELECT rdgbr.idfsReference AS idfsDiagnosisOrDiagnosisGroup,
                       rdgbr.name AS strDiagnosisOrDiagnosisGroupName,
                       rtbr.name AS strDiseaseOrReportDiseaseGroup,
                       null AS idfsUsingType,
                       null AS strUsingType
                FROM dbo.FN_GBL_Reference_GETList(@langId, 19000130) rdgbr
                    JOIN dbo.FN_GBL_Reference_GETList(@langId, 19000076) rtbr
                        ON rdgbr.idfsReferenceType = rtbr.idfsReference
            ) d
                ON d.idfsDiagnosisOrDiagnosisGroup = rr.idfsDiagnosisOrReportDiagnosisGroup
            LEFT JOIN dbo.FN_GBL_Reference_GETList(@langId, 19000132) artbr
                ON rr.idfsReportAdditionalText = artbr.idfsReference
            LEFT JOIN dbo.FN_GBL_Reference_GETList(@langId, 19000132) icdbr
                ON rr.idfsICDReportAdditionalText = icdbr.idfsReference
        WHERE rr.intRowStatus = 0
              AND rr.idfsCustomReportType = @idfsCustomReportType;
        WITH CTEResults
        AS (SELECT ROW_NUMBER() OVER (ORDER BY CASE
                                                   WHEN @sortColumn = 'idfReportRows'
                                                        AND @SortOrder = 'asc' THEN
                                                       idfReportRows
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'idfReportRows'
                                                        AND @SortOrder = 'desc' THEN
                                                       idfsCustomReportType
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'idfsCustomReportType'
                                                        AND @SortOrder = 'asc' THEN
                                                       idfsCustomReportType
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'idfsCustomReportType'
                                                        AND @SortOrder = 'desc' THEN
                                                       idfsCustomReportType
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'strCustomReportType'
                                                        AND @SortOrder = 'asc' THEN
                                                       strCustomReportType
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'strCustomReportType'
                                                        AND @SortOrder = 'desc' THEN
                                                       strCustomReportType
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'idfsDiagnosisOrDiagnosisGroup'
                                                        AND @SortOrder = 'asc' THEN
                                                       idfsDiagnosisOrDiagnosisGroup
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'idfsDiagnosisOrDiagnosisGroup'
                                                        AND @SortOrder = 'desc' THEN
                                                       idfsDiagnosisOrDiagnosisGroup
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'strDiagnosisOrDiagnosisGroupName'
                                                        AND @SortOrder = 'asc' THEN
                                                       strDiagnosisOrDiagnosisGroupName
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'strDiagnosisOrDiagnosisGroupName'
                                                        AND @SortOrder = 'desc' THEN
                                                       strDiagnosisOrDiagnosisGroupName
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'strDiseaseOrReportDiseaseGroup'
                                                        AND @SortOrder = 'asc' THEN
                                                       strDiseaseOrReportDiseaseGroup
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'strDiseaseOrReportDiseaseGroup'
                                                        AND @SortOrder = 'desc' THEN
                                                       strDiseaseOrReportDiseaseGroup
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'idfsUsingType'
                                                        AND @SortOrder = 'asc' THEN
                                                       idfsUsingType
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'idfsUsingType'
                                                        AND @SortOrder = 'desc' THEN
                                                       idfsUsingType
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'strUsingType'
                                                        AND @SortOrder = 'asc' THEN
                                                       strUsingType
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'strUsingType'
                                                        AND @SortOrder = 'desc' THEN
                                                       strUsingType
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'idfsReportAdditionalText'
                                                        AND @SortOrder = 'asc' THEN
                                                       idfsReportAdditionalText
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'idfsReportAdditionalText'
                                                        AND @SortOrder = 'desc' THEN
                                                       idfsReportAdditionalText
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'strAdditionalReportText'
                                                        AND @SortOrder = 'asc' THEN
                                                       strAdditionalReportText
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'strAdditionalReportText'
                                                        AND @SortOrder = 'desc' THEN
                                                       strAdditionalReportText
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'idfsICDReportAdditionalText'
                                                        AND @SortOrder = 'asc' THEN
                                                       idfsICDReportAdditionalText
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'idfsICDReportAdditionalText'
                                                        AND @SortOrder = 'desc' THEN
                                                       idfsICDReportAdditionalText
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'strICDReportAdditionalText'
                                                        AND @SortOrder = 'asc' THEN
                                                       strICDReportAdditionalText
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'strICDReportAdditionalText'
                                                        AND @SortOrder = 'desc' THEN
                                                       strICDReportAdditionalText
                                               END DESC,
                                               intRowOrder ASC
                                     ) AS ROWNUM,
                   COUNT(*) OVER () AS TotalRowCount,
                   idfReportRows,
                   idfsCustomReportType,
                   strCustomReportType,
                   idfsDiagnosisOrDiagnosisGroup,
                   strDiagnosisOrDiagnosisGroupName,
                   strDiseaseOrReportDiseaseGroup,
                   idfsUsingType,
                   strUsingType,
                   idfsReportAdditionalText,
                   strAdditionalReportText,
                   idfsICDReportAdditionalText,
                   strICDReportAdditionalText,
                   intRowOrder
            FROM @T
           )
        SELECT TotalRowCount,
               idfReportRows,
               idfsCustomReportType,
               strCustomReportType,
               idfsDiagnosisOrDiagnosisGroup,
               strDiagnosisOrDiagnosisGroupName,
               strDiseaseOrReportDiseaseGroup,
               idfsUsingType,
               strUsingType,
               idfsReportAdditionalText,
               strAdditionalReportText,
               idfsICDReportAdditionalText,
               strICDReportAdditionalText,
               intRowOrder,
               TotalPages = (TotalRowCount / @pageSize) + IIF(TotalRowCount % @pageSize > 0, 1, 0),
               CurrentPage = @pageNo
        FROM CTEResults
        WHERE RowNum > @firstRec
              AND RowNum < @lastRec;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_CONF_DISEASEAGEGROUPMATRIX_DEL]...';


GO
-- ================================================================================================
-- NAME: USP_CONF_DISEASEAGEGROUPMATRIX_DEL
--
-- DESCRIPTION: Deactivates a vector type to collection type relationships

-- AUTHOR: Ricky Moss

-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Ricky Moss		03/06/2019 Initial Release
-- Stephen Long     04/13/2023 Added site alert logic.
--
-- exec USP_CONF_DISEASEAGEGROUPMATRIX_DEL 51526220000000
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_CONF_DISEASEAGEGROUPMATRIX_DEL]
(
	@idfDiagnosisAgeGroupToDiagnosis BIGINT,
	@EventTypeId BIGINT,
    @SiteId BIGINT,
    @UserId BIGINT,
    @LocationId BIGINT,
    @AuditUserName NVARCHAR(200)
)
AS
BEGIN
        DECLARE @ReturnCode INT = 0,
                @ReturnMessage NVARCHAR(MAX) = 'SUCCESS';
        DECLARE @SuppressSelect TABLE
        (
            ReturnCode INT,
            ReturnMessage NVARCHAR(MAX)
        );
	BEGIN TRY
		UPDATE dbo.trtDiagnosisAgeGroupToDiagnosis 
        SET intRowStatus = 1,
            AuditUpdateDTM = GETDATE(),
            AuditUpdateUser = @AuditUserName
        WHERE idfDiagnosisAgeGroupToDiagnosis= @idfDiagnosisAgeGroupToDiagnosis;
        
        INSERT INTO @SuppressSelect
        EXECUTE dbo.USP_ADMIN_EVENT_SET-1,
                                       @EventTypeId,
                                       @UserId,
                                       @idfDiagnosisAgeGroupToDiagnosis,
                                       NULL,
                                       @SiteId,
                                       NULL,
                                       @SiteId,
                                       @LocationId,
                                       @AuditUserName;

        SELECT @ReturnCode AS ReturnCode,
               @ReturnMessage AS ReturnMessage;
	END TRY
	BEGIN CATCH
		THROW;
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_CONF_DISEASEGROUPDISEASEMATRIX_DEL]...';


GO
-- ================================================================================================
-- Name: USP_CONF_DISEASEGROUPDISEASEMATRIX_DEL
--
-- Description: Deactivates a disease group to disease relationships
--
-- Author: Ricky Moss
--
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Ricky Moss		03/04/2019 Initial Release
-- Stephen Long     04/13/2023 Added site alert logic.
--
-- exec USP_CONF_DISEASEGROUPDISEASEMATRIX_DEL 6704450000000
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_CONF_DISEASEGROUPDISEASEMATRIX_DEL]
(
    @idfDiagnosisToDiagnosisGroup BIGINT,
    @deleteAnyway bit = 0,
    @EventTypeId BIGINT,
    @SiteId BIGINT,
    @UserId BIGINT,
    @LocationId BIGINT,
    @AuditUserName NVARCHAR(200)
)
AS
BEGIN
    DECLARE @ReturnCode INT = 0,
            @ReturnMessage NVARCHAR(MAX) = 'SUCCESS';
    DECLARE @SuppressSelect TABLE
    (
        ReturnCode INT,
        ReturnMessage NVARCHAR(MAX)
    );
    BEGIN TRY
        UPDATE dbo.trtDiagnosisToDiagnosisGroup
        SET intRowStatus = 1,
            AuditUpdateDTM = GETDATE(),
            AuditUpdateUser = @AuditUserName
        WHERE idfDiagnosisToDiagnosisGroup = @idfDiagnosisToDiagnosisGroup;

        INSERT INTO @SuppressSelect
        EXECUTE dbo.USP_ADMIN_EVENT_SET-1,
                                       @EventTypeId,
                                       @UserId,
                                       @idfDiagnosisToDiagnosisGroup,
                                       NULL,
                                       @SiteId,
                                       NULL,
                                       @SiteId,
                                       @LocationId,
                                       @AuditUserName;

        SELECT @ReturnCode AS ReturnCode,
               @ReturnMessage AS ReturnMessage;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_CONF_DISEASEHUMANGENDERMATRIX_DEL]...';


GO
-- ================================================================================================
-- Name: USP_CONF_DISEASEHUMANGENDERMATRIX_DEL
--
-- Description: Deactivates an active disease to human gender matrix
--
-- Author: Ricky Moss
--
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Ricky Moss		06/24/2019 Initial Release
-- Stephen Long     04/13/2023 Added site alert logic.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_CONF_DISEASEHUMANGENDERMATRIX_DEL]
(
    @DiagnosisGroupToGenderUID BIGINT,
    @deleteAnyway BIT,
    @EventTypeId BIGINT,
    @SiteId BIGINT,
    @UserId BIGINT,
    @LocationId BIGINT,
    @AuditUserName NVARCHAR(200)
)
AS
DECLARE @ReturnCode INT = 0,
        @ReturnMessage NVARCHAR(MAX) = 'SUCCESS';
DECLARE @SuppressSelect TABLE
(
    ReturnCode INT,
    ReturnMessage NVARCHAR(MAX)
);
BEGIN
    BEGIN TRY
        UPDATE dbo.DiagnosisGroupToGender
        SET intRowStatus = 1,
            AuditUpdateDTM = GETDATE(),
            AuditUpdateUser = @AuditUserName
        WHERE DisgnosisGroupToGenderUID = @DiagnosisGroupToGenderUID;

        UPDATE dbo.trtBaseReference
        SET intRowStatus = 1,
            AuditUpdateDTM = GETDATE(),
            AuditUpdateUser = @AuditUserName
        WHERE idfsBaseReference = @DiagnosisGroupToGenderUID;

        UPDATE dbo.trtStringNameTranslation
        SET intRowStatus = 1,
            AuditUpdateDTM = GETDATE(),
            AuditUpdateUser = @AuditUserName
        WHERE idfsBaseReference = @DiagnosisGroupToGenderUID;

        INSERT INTO @SuppressSelect
        EXECUTE dbo.USP_ADMIN_EVENT_SET-1,
                                       @EventTypeId,
                                       @UserId,
                                       @DiagnosisGroupToGenderUID,
                                       NULL,
                                       @SiteId,
                                       NULL,
                                       @SiteId,
                                       @LocationId,
                                       @AuditUserName;

        SELECT @ReturnCode AS ReturnCode,
               @ReturnMessage AS ReturnMessage;
    END TRY
    BEGIN CATCH
        THROW
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_CONF_DISEASELABTESTMATRIX_DEL]...';


GO
-- ================================================================================================
-- Name: USP_CONF_DISEASELABTESTMATRIX_DEL
--
-- Description: Removes a disease to lab test matrix given an ID and whether or not to delete 
-- regardless of reference.
--
-- Author: Ricky Moss
-- 
-- Revision History:
-- Name:				Date       Change
-- -------------------- ---------- ---------------------------------------------------------------
-- Ricky Moss           04/08/2019 Initial Release
-- Stephen Long         04/14/2023 Added site alert logic.
--
-- EXEC USP_CONF_DISEASELABTESTMATRIX_DEL 6707170000001, 0
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_CONF_DISEASELABTESTMATRIX_DEL]
(
    @idfTestforDisease BIGINT,
    @deleteAnyway BIT,
    @EventTypeId BIGINT,
    @SiteId BIGINT,
    @UserId BIGINT,
    @LocationId BIGINT,
    @AuditUserName NVARCHAR(200)
)
AS
DECLARE @ReturnCode INT = 0,
        @ReturnMessage NVARCHAR(MAX) = 'SUCCESS';
DECLARE @SuppressSelect TABLE
(
    ReturnCode INT,
    ReturnMessage NVARCHAR(MAX)
);
BEGIN
    BEGIN TRY
        UPDATE dbo.trtTestForDisease
        SET intRowStatus = 1,
            AuditUpdateDTM = GETDATE(),
            AuditUpdateUser = @AuditUserName
        WHERE idfTestForDisease = @idfTestforDisease;

        INSERT INTO @SuppressSelect
        EXECUTE dbo.USP_ADMIN_EVENT_SET-1,
                                       @EventTypeId,
                                       @UserId,
                                       @idfTestforDisease,
                                       NULL,
                                       @SiteId,
                                       NULL,
                                       @SiteId,
                                       @LocationId,
                                       @AuditUserName;

        SELECT @ReturnCode AS ReturnCode,
               @ReturnMessage AS ReturnMessage;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_CONF_DISEASEPENSIDETESTMATRIX_DEL]...';


GO
-- ================================================================================================
-- Name: USP_CONF_DISEASEPENSIDETESTMATRIX_DEL
--
-- Description: Deactivates a disease to penside test relationships
--
-- Author: Ricky Moss
--
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Ricky Moss		02/26/2019 Initial Release
-- Stephen Long     04/14/2023 Added site alert logic.
--
-- exec USP_CONF_DISEASEPENSIDETESTMATRIX_DEL 6706310000045
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_CONF_DISEASEPENSIDETESTMATRIX_DEL]
(
	@idfPensideTestforDisease BIGINT,
	@EventTypeId BIGINT,
    @SiteId BIGINT,
    @UserId BIGINT,
    @LocationId BIGINT,
    @AuditUserName NVARCHAR(200)
)
AS
BEGIN
        DECLARE @ReturnCode INT = 0,
                @ReturnMessage NVARCHAR(MAX) = 'SUCCESS';
        DECLARE @SuppressSelect TABLE
        (
            ReturnCode INT,
            ReturnMessage NVARCHAR(MAX)
        );
	BEGIN TRY
		UPDATE dbo.trtPensideTestForDisease 
        SET intRowStatus = 1,
            AuditUpdateDTM = GETDATE(),
            AuditUpdateUser = @AuditUserName
        WHERE idfPensideTestForDisease = @idfPensideTestforDisease;

        INSERT INTO @SuppressSelect
        EXECUTE dbo.USP_ADMIN_EVENT_SET-1,
                                       @EventTypeId,
                                       @UserId,
                                       @idfPensideTestforDisease,
                                       NULL,
                                       @SiteId,
                                       NULL,
                                       @SiteId,
                                       @LocationId,
                                       @AuditUserName;

        SELECT @ReturnCode AS ReturnCode,
               @ReturnMessage AS ReturnMessage;
	END TRY
	BEGIN CATCH
		THROW;
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_CONF_DISEASESAMPLETYPEMATRIX_DEL]...';


GO
-- ================================================================================================
-- Name: USP_CONF_DISEASESAMPLETYPEMATRIX_DEL
--
-- Description: Removes a Disease to sample type matrix given an id and whether or not to delete 
-- regardless of reference
--
-- Author: Ricky Moss
-- 
-- Revision History:
-- Name:				Date       Change Detail
-- -------------------- ---------- ---------------------------------------------------------------
-- Ricky Moss           04/08/2019 Initial Release
-- Stephen Long         04/14/2023 Added site alert logic.
--
-- EXEC USP_CONF_DISEASESAMPLETYPEMATRIX_DEL 800110000007, 0
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_CONF_DISEASESAMPLETYPEMATRIX_DEL]
(
	@idfMaterialForDisease BIGINT,
	@deleteAnyway BIT,
	@EventTypeId BIGINT,
    @SiteId BIGINT,
    @UserId BIGINT,
    @LocationId BIGINT,
    @AuditUserName NVARCHAR(200)
)
AS
        DECLARE @ReturnCode INT = 0,
                @ReturnMessage NVARCHAR(MAX) = 'SUCCESS';
        DECLARE @SuppressSelect TABLE
        (
            ReturnCode INT,
            ReturnMessage NVARCHAR(MAX)
        );
BEGIN
	BEGIN TRY
		UPDATE dbo.trtMaterialForDisease 
        SET intRowStatus = 1,
            AuditUpdateDTM = GETDATE(),
            AuditUpdateUser = @AuditUserName
        WHERE idfMaterialForDisease = @idfMaterialForDisease;

        INSERT INTO @SuppressSelect
        EXECUTE dbo.USP_ADMIN_EVENT_SET-1,
                                       @EventTypeId,
                                       @UserId,
                                       @idfMaterialForDisease,
                                       NULL,
                                       @SiteId,
                                       NULL,
                                       @SiteId,
                                       @LocationId,
                                       @AuditUserName;

        SELECT @ReturnCode AS ReturnCode,
               @ReturnMessage AS ReturnMessage;
	END TRY
	BEGIN CATCH
		THROW;
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_CONF_HumanAggregateCaseMatrixReport_DELETE]...';


GO
-- ================================================================================================
-- Name: USP_CONF_HumanAggregateCaseMatrixReport_DELETE
--
-- Description: Deletes Entries For Human Aggregate Case Matrix Report and Version
--
-- Author: Lamont Mitchell
--
-- Revision History:
-- Name                        Date       Change Detail
-- --------------------------- ---------- --------------------------------------------------------
-- Lamont Mitchell             01/24/2019 Initial Created
-- Ann Xiong                   02/21/2023 Implemented Data Audit
-- Stephen Long                04/14/2023 Added site alert logic.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_CONF_HumanAggregateCaseMatrixReport_DELETE]
    @idfAggrHumanCaseMTX BIGINT NULL,
    @idfVersion BIGINT NULL,
    @idfsDiagnosis BIGINT NULL,
    @intNumRow INT,
    @EventTypeId BIGINT,
    @SiteId BIGINT,
    @UserId BIGINT,
    @LocationId BIGINT,
    @AuditUserName NVARCHAR(200)
AS
BEGIN
    DECLARE @ReturnCode INT = 0,
            @ReturnMessage NVARCHAR(MAX) = 'SUCCESS';
    DECLARE @SuppressSelect TABLE
    (
        ReturnCode INT,
        ReturnMessage NVARCHAR(MAX)
    );

    -- Data audit
    DECLARE @idfUserId BIGINT = NULL,
            @idfSiteId BIGINT = NULL,
            @idfsDataAuditEventType BIGINT = 10016002,
            @idfsObjectType BIGINT = 10017003, -- Matrix for Aggregate Reports
            @idfObject BIGINT = @idfVersion,
            @idfObjectTable_tlbAggrHumanCaseMTX BIGINT = 12666620000000,
            @idfDataAuditEvent BIGINT = NULL,
            @idfObjectTable_tlbAggrMatrixVersionHeader BIGINT = 707330000000;

    -- Get and Set UserId and SiteId
    SELECT @idfUserId = userInfo.UserId,
           @idfSiteId = userInfo.SiteId
    FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo;
    -- End data audit

    BEGIN TRY
        SET NOCOUNT ON;

        -- Data audit
        -- insert record into tauDataAuditEvent
        EXEC dbo.USSP_GBL_DataAuditEvent_GET @idfUserID,
                                             @idfSiteId,
                                             @idfsDataAuditEventType,
                                             @idfsObjectType,
                                             @idfObject,
                                             @idfObjectTable_tlbAggrHumanCaseMTX,
                                             @idfDataAuditEvent OUTPUT;
        -- End data audit

        DELETE FROM dbo.tlbAggrHumanCaseMTX
        WHERE idfAggrHumanCaseMTX = @idfAggrHumanCaseMTX;

        -- Data audit
        INSERT INTO dbo.tauDataAuditDetailDelete
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfObject
        )
        SELECT @idfDataAuditEvent,
               @idfObjectTable_tlbAggrHumanCaseMTX,
               @idfObject;
        -- End data audit

        DELETE FROM dbo.tlbAggrMatrixVersionHeader
        WHERE idfVersion = @idfVersion;

        -- Data audit
        INSERT INTO dbo.tauDataAuditDetailDelete
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfObject
        )
        SELECT @idfDataAuditEvent,
               @idfObjectTable_tlbAggrMatrixVersionHeader,
               @idfObject;
        -- End data audit

        INSERT INTO @SuppressSelect
        EXECUTE dbo.USSP_ADMIN_EVENT_SET-1,
                                        @EventTypeId,
                                        @UserId,
                                        @idfAggrHumanCaseMTX,
                                        NULL,
                                        @SiteId,
                                        NULL,
                                        @SiteId,
                                        @LocationId,
                                        @AuditUserName, 
                                        NULL, 
                                        NULL;

        SELECT @ReturnCode AS ReturnCode,
               @ReturnMessage AS ReturnMessage;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_CONF_HumanAggregateCaseMatrixReport_SET]...';


GO
-- ================================================================================================
-- Name: USP_CONF_HumanAggregateCaseMatrixReport_SET
--
-- Description: Saves Entries For Human Aggregate Case Matrix Report FROM A JSON STRING
-- 
-- Author: Lamont Mitchell
--
-- Revision History:
-- Name                         Date       Change Detail
-- ---------------------------- ---------- -------------------------------------------------------
-- Lamont Mitchell              03/04/2019 Initial Created
-- Stephen Long                 07/15/2022 Added site alert and renamed sproc to standard SET.
-- Leo Tracchia					10/24/2022 Removed select from @Disease for IdfVersion, replaced with @idfVersion
-- Ann Xiong					02/21/2023 Implemented Data Audit
-- Ann Xiong					03/08/2023 Added check for @idfDataAuditEvent IS NULL to only create @idfDataAuditEvent once
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_CONF_HumanAggregateCaseMatrixReport_SET]
    @idfAggrHumanCaseMTX BIGINT NULL,
    @idfVersion BIGINT NULL,
    @inJsonString VARCHAR(MAX) NULL,
    @EventTypeId BIGINT,
    @SiteId BIGINT,
    @UserId BIGINT,
    @LocationId BIGINT,
    @AuditUserName NVARCHAR(200)
AS
BEGIN
    DECLARE @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
            @ReturnCode BIGINT = 0,
            @idfsReferenceType BIGINT,
            @JsonString VARCHAR(MAX),
            @EventId BIGINT = -1,
            @EventSiteId BIGINT = @SiteId,
            @EventUserId BIGINT = @UserId,
            @EventDiseaseId BIGINT = NULL,
            @EventLocationId BIGINT = @LocationId,
            @EventInformationString NVARCHAR(MAX) = NULL,
            @EventLoginSiteId BIGINT = @SiteId;
    DECLARE @SuppressSelect TABLE
    (
        ReturnCode INT,
        ReturnMessage NVARCHAR(MAX)
    );
    DECLARE @Disease TABLE
    (
        IntNumRow INT,
        --IdfVersion BIGINT,
        IdfsDiagnosis BIGINT
    );

	--Data Audit--
	declare @idfUserId BIGINT = @UserId;
	declare @idfSiteId BIGINT = @SiteId;
	declare @idfsDataAuditEventType bigint = NULL;
	declare @idfsObjectType bigint = 10017003;                         -- Matrix for Aggregate Reports
	declare @idfObject bigint = @idfAggrHumanCaseMTX;
	declare @idfObjectTable_tlbAggrHumanCaseMTX bigint = 12666620000000;
	declare @idfDataAuditEvent bigint= NULL;

	DECLARE @tlbAggrHumanCaseMTX_BeforeEdit TABLE
	(
        		AggrHumanCaseMTXID BIGINT,
        		IntNumRow INT
	);
	DECLARE @tlbAggrHumanCaseMTX_AfterEdit TABLE
	(
        		AggrHumanCaseMTXID BIGINT,
        		IntNumRow INT
	);
	--Data Audit--

    SET NOCOUNT ON;

    BEGIN TRY
        SET @JsonString = @inJsonString;
        IF EXISTS
        (
            SELECT *
            FROM dbo.tlbAggrHumanCaseMTX
            WHERE idfVersion = @idfVersion
        )
        BEGIN
            UPDATE dbo.tlbAggrHumanCaseMTX
            SET intRowStatus = 1,
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUserName
            WHERE idfVersion = @idfVersion;
        END

        INSERT INTO @Disease
        SELECT *
        FROM
            OPENJSON(@inJsonString)
            WITH
            (
                IntNumRow INT,
                --IdfVersion BIGINT,
                IdfsDiagnosis BIGINT
            );

        DECLARE @rowCount INT = 0;
        SET @rowCount =
        (
            SELECT MAX(IntNumRow) FROM @Disease
        );
        DECLARE @_int INT = 1;
        WHILE @_int <= @rowCount
        BEGIN
            IF EXISTS
            (
                SELECT *
                FROM dbo.tlbAggrHumanCaseMTX
                WHERE idfVersion = @idfVersion
                      AND idfsDiagnosis =
                      (
                          SELECT IdfsDiagnosis FROM @Disease WHERE IntNumRow = @_int
                      )
            )
            BEGIN
                DECLARE @aggHumanCaseMtxId BIGINT;
                SET @aggHumanCaseMtxId =
                (
                    SELECT idfAggrHumanCaseMTX
                    FROM dbo.tlbAggrHumanCaseMTX
                    WHERE idfVersion = @idfVersion
                          AND idfsDiagnosis =
                          (
                              SELECT IdfsDiagnosis FROM @Disease WHERE IntNumRow = @_int
                          )
                );

                -- Data audit
                INSERT INTO @tlbAggrHumanCaseMTX_BeforeEdit
                (
                        AggrHumanCaseMTXID,
                        intNumRow
                 )
                 SELECT 	idfAggrHumanCaseMTX,
                    		intNumRow
                 FROM		dbo.tlbAggrHumanCaseMTX
                 WHERE		idfVersion = @idfVersion
                          AND idfsDiagnosis =
                          (
                              SELECT IdfsDiagnosis FROM @Disease WHERE IntNumRow = @_int
                          )

                -- End data audit

                UPDATE dbo.tlbAggrHumanCaseMTX
                SET intRowStatus = 0,
                    intNumRow = @_int,
                    AuditUpdateDTM = GETDATE(),
                    AuditUpdateUser = @AuditUserName
                WHERE idfsDiagnosis =
                (
                    SELECT IdfsDiagnosis FROM @Disease WHERE IntNumRow = @_int
                )
                      AND idfVersion = @IdfVersion
                      --(
                      --    SELECT IdfVersion FROM @Disease WHERE IntNumRow = @_int
                      --)
                      AND idfAggrHumanCaseMTX = @aggHumanCaseMtxId;

                -- Data audit
                INSERT INTO @tlbAggrHumanCaseMTX_AfterEdit
                (
                        AggrHumanCaseMTXID,
                        IntNumRow
                 )
                 SELECT 	idfAggrHumanCaseMTX,
                    		intNumRow
                 FROM		dbo.tlbAggrHumanCaseMTX
                 WHERE		idfVersion = @idfVersion
                          AND idfsDiagnosis =
                          (
                              SELECT IdfsDiagnosis FROM @Disease WHERE IntNumRow = @_int
                          )

        	    IF @idfDataAuditEvent IS NULL
        	    BEGIN 
					--  tauDataAuditEvent  Event Type- Edit 
					set @idfsDataAuditEventType =10016003;
					-- insert record into tauDataAuditEvent - 
					EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType,@idfsObjectType,@aggHumanCaseMtxId, @idfObjectTable_tlbAggrHumanCaseMTX, @idfDataAuditEvent OUTPUT
				END

                INSERT INTO dbo.tauDataAuditDetailUpdate
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfColumn,
                        idfObject,
                        idfObjectDetail,
                        strOldValue,
                        strNewValue
                    )
                    SELECT @idfDataAuditEvent,
                           @idfObjectTable_tlbAggrHumanCaseMTX,
                           12666660000000,
                           a.AggrHumanCaseMTXID,
                           NULL,
                           b.IntNumRow,
                           a.IntNumRow
                    FROM @tlbAggrHumanCaseMTX_AfterEdit AS a
                        FULL JOIN @tlbAggrHumanCaseMTX_BeforeEdit AS b
                            ON a.AggrHumanCaseMTXID = b.AggrHumanCaseMTXID
                    WHERE (a.IntNumRow <> b.IntNumRow)
                          OR (
                                 a.IntNumRow IS NOT NULL
                                 AND b.IntNumRow IS NULL
                             )
                          OR (
                                 a.IntNumRow IS NULL
                                 AND b.IntNumRow IS NOT NULL
                             );
                -- End data audit
            END
            ELSE
            BEGIN
                IF EXISTS (SELECT * FROM @Disease WHERE IntNumRow = @_int)
                BEGIN
                    INSERT INTO @SuppressSelect
                    EXEC dbo.USP_GBL_NEXTKEYID_GET 'tlbAggrHumanCaseMTX',
                                                   @idfAggrHumanCaseMTX OUTPUT;

                    INSERT INTO dbo.tlbAggrHumanCaseMTX
                    (
                        idfAggrHumanCaseMTX,
                        idfVersion,
                        idfsDiagnosis,
                        intNumRow,
                        intRowStatus,
                        AuditCreateDTM,
                        AuditCreateUser
                    )
                    SELECT @idfAggrHumanCaseMTX,
                           @IdfVersion,
                           IdfsDiagnosis,
                           IntNumRow,
                           0,
                           GETDATE(),
                           @AuditUserName
                    FROM @Disease
                    WHERE IntNumRow = @_int;

					--Data Audit--

        	        IF @idfDataAuditEvent IS NULL
        	        BEGIN 
						-- tauDataAuditEvent Event Type - Create 
						set @idfsDataAuditEventType =10016001;
						-- insert record into tauDataAuditEvent - 
					EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType,@idfsObjectType,@idfAggrHumanCaseMTX, @idfObjectTable_tlbAggrHumanCaseMTX, @idfDataAuditEvent OUTPUT
					END

					INSERT INTO tauDataAuditDetailCreate(idfDataAuditEvent, idfObjectTable, idfObject )
						values ( @idfDataAuditEvent, @idfObjectTable_tlbAggrHumanCaseMTX, @idfAggrHumanCaseMTX)
					--Data Audit--
                END
            END

            SET @_int = @_int + 1;
        END

        INSERT INTO @SuppressSelect
        EXECUTE dbo.USSP_ADMIN_EVENT_SET-1,
                                        @EventTypeId,
                                        @EventUserId,
                                        @idfAggrHumanCaseMTX,
                                        NULL,
                                        @EventSiteId,
                                        NULL,
                                        @EventLoginSiteId,
                                        @EventLocationId,
                                        @AuditUserName;

        SELECT @ReturnCode AS 'ReturnCode',
               @ReturnMessage AS 'ReturnMessage',
               @idfAggrHumanCaseMTX AS 'idfAggrHumanCaseMTX';
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_CONF_HumanAggregateCaseMatrixReportRecord_DELETE]...';


GO
-- ================================================================================================
-- Name: USP_CONF_HumanAggregateCaseMatrixReportRecord_DELETE
--
-- Description: Deletes Entries For Human Aggregate Disease Report Matrix Records
--
-- Author: Lamont Mitchell
--
-- Revision History:
-- Name                        Date       Change Detail
-- --------------------------- ---------- --------------------------------------------------------
-- Lamont Mitchell             01/24/2019 Initial Created
-- Ann Xiong                   02/22/2023 Implemented Data Audit
-- Stephen Long                04/14/2023 Added site alert logic.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_CONF_HumanAggregateCaseMatrixReportRecord_DELETE]
    @idfAggrHumanCaseMTX BIGINT,
    @EventTypeId BIGINT,
    @SiteId BIGINT,
    @UserId BIGINT,
    @LocationId BIGINT,
    @AuditUserName NVARCHAR(200)
AS
BEGIN
    DECLARE @ReturnCode INT = 0,
            @ReturnMessage NVARCHAR(MAX) = 'SUCCESS';
    DECLARE @SuppressSelect TABLE
    (
        ReturnCode INT,
        ReturnMessage NVARCHAR(MAX)
    );
    -- Data audit
    DECLARE @idfUserId BIGINT = NULL,
            @idfSiteId BIGINT = NULL,
            @idfsDataAuditEventType BIGINT = 10016002,
            @idfsObjectType BIGINT = 10017003, -- Matrix for Aggregate Reports
            @idfObject BIGINT = @idfAggrHumanCaseMTX,
            @idfObjectTable_tlbAggrHumanCaseMTX BIGINT = 12666620000000,
            @idfDataAuditEvent BIGINT = NULL,
            @idfObjectTable_tlbAggrMatrixVersionHeader BIGINT = 707330000000;

    -- Get and Set UserId and SiteId
    SELECT @idfUserId = userInfo.UserId,
           @idfSiteId = userInfo.SiteId
    FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo;
    -- End data audit

    BEGIN TRY
        SET NOCOUNT ON;
        IF EXISTS
        (
            SELECT *
            FROM dbo.tlbAggrHumanCaseMTX
            WHERE idfAggrHumanCaseMTX = @idfAggrHumanCaseMTX
        )
        BEGIN
            DELETE FROM dbo.tlbAggrHumanCaseMTX
            WHERE idfAggrHumanCaseMTX = @idfAggrHumanCaseMTX;

            -- Data audit
            -- insert record into tauDataAuditEvent
            EXEC dbo.USSP_GBL_DataAuditEvent_GET @idfUserID,
                                                 @idfSiteId,
                                                 @idfsDataAuditEventType,
                                                 @idfsObjectType,
                                                 @idfObject,
                                                 @idfObjectTable_tlbAggrHumanCaseMTX,
                                                 @idfDataAuditEvent OUTPUT;

            INSERT INTO tauDataAuditDetailDelete
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject
            )
            SELECT @idfDataAuditEvent,
                   @idfObjectTable_tlbAggrHumanCaseMTX,
                   @idfObject
        -- End data audit
        END

        INSERT INTO @SuppressSelect
        EXECUTE dbo.USSP_ADMIN_EVENT_SET-1,
                                        @EventTypeId,
                                        @UserId,
                                        @idfAggrHumanCaseMTX,
                                        NULL,
                                        @SiteId,
                                        NULL,
                                        @SiteId,
                                        @LocationId,
                                        @AuditUserName,
                                        NULL,
                                        NULL;

        SELECT @ReturnCode AS ReturnCode,
               @ReturnMessage AS ReturnMessage;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_CONF_HumanAggregateCaseMatrixVersion_SET]...';


GO
-- ================================================================================================
-- Name: USP_CONF_HumanAggregateCaseMatrixVersion_SET
--
-- Description: Saves Entries For Human Aggregate Case Matrix Version
--
-- Author: Lamont Mitchell
-- 
-- Revision History:
-- Name                    Date       Change Detail
-- ----------------------- ---------- ------------------------------------------------------------
-- Lamont Mitchell         01/24/2019 Initial Created
-- Stephen Long            08/17/2022 Renamed to meet standard, and added site alert logic.
-- Ann Xiong			   02/21/2023 Implemented Data Audit
-- Stephen Long            04/17/2023 Fix to not add a site alert when event type ID is null.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_CONF_HumanAggregateCaseMatrixVersion_SET]
    @idfVersion BIGINT = NULL,
    @idfsMatrixType BIGINT,
    @datStartDate DATETIME,
    @MatrixName NVARCHAR(200),
    @blnIsActive BIT = 0,
    @blnIsDefault BIT = 0,
    @EventTypeId BIGINT,
    @SiteId BIGINT,
    @UserId BIGINT,
    @LocationId BIGINT,
    @AuditUserName NVARCHAR(200)
AS
BEGIN
    DECLARE @ReturnMessage VARCHAR(MAX) = 'SUCCESS',
            @ReturnCode BIGINT = 0,
            @idfsReferenceType BIGINT,
            @EventId BIGINT = -1,
            @EventSiteId BIGINT = @SiteId,
            @EventUserId BIGINT = @UserId,
            @EventDiseaseId BIGINT = NULL,
            @EventLocationId BIGINT = @LocationId,
            @EventInformationString NVARCHAR(MAX) = NULL,
            @EventLoginSiteId BIGINT = @SiteId;
    DECLARE @SuppressSelect TABLE
    (
        ReturnCode INT,
        ReturnMessage VARCHAR(200)
    );

    -- Data audit
    DECLARE @idfUserId BIGINT = NULL,
            @idfSiteId BIGINT = NULL,
            @idfsDataAuditEventType bigint = NULL,
            @idfsObjectType bigint = 10017003, -- Matrix for Aggregate Reports
            @idfObject bigint = @idfVersion,
            @idfDataAuditEvent bigint = NULL,
            @idfObjectTable_tlbAggrMatrixVersionHeader bigint = 707330000000;
    DECLARE @tlbAggrMatrixVersionHeader_BeforeEdit TABLE
    (
        VersionID BIGINT,
        MatrixName VARCHAR(200),
        StartDate DATETIME,
        IsActive BIT,
        IsDefault BIT
    );
    DECLARE @tlbAggrMatrixVersionHeader_AfterEdit TABLE
    (
        VersionID BIGINT,
        MatrixName VARCHAR(200),
        StartDate DATETIME,
        IsActive BIT,
        IsDefault BIT
    );

    -- Get and Set UserId and SiteId
    SELECT @idfUserId = userInfo.UserId,
           @idfSiteId = userInfo.SiteId
    FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo;
    -- End data audit

    SET NOCOUNT ON;
    BEGIN TRY
        IF EXISTS
        (
            SELECT *
            FROM dbo.tlbAggrMatrixVersionHeader
            WHERE idfVersion = @idfVersion
        )
        BEGIN
            IF @blnIsActive = 1
            BEGIN
                UPDATE dbo.tlbAggrMatrixVersionHeader
                SET blnIsActive = 0,
                    blnIsDefault = 0,
                    AuditUpdateDTM = GETDATE(),
                    AuditUpdateUser = @AuditUserName
                WHERE idfsMatrixType = @idfsMatrixType;
            END

            -- Data audit
            INSERT INTO @tlbAggrMatrixVersionHeader_BeforeEdit
            (
                VersionID,
                MatrixName,
                StartDate,
                IsActive,
                IsDefault
            )
            SELECT idfVersion,
                   MatrixName,
                   datStartDate,
                   blnIsActive,
                   blnIsDefault
            FROM dbo.tlbAggrMatrixVersionHeader
            WHERE idfVersion = @idfVersion
            -- End data audit

            UPDATE dbo.tlbAggrMatrixVersionHeader
            SET MatrixName = @MatrixName,
                datStartDate = @datStartDate,
                blnIsActive = @blnIsActive,
                intRowStatus = 0,
                blnIsDefault = @blnIsDefault,
                strMaintenanceFlag = NULL,
                strReservedAttribute = NULL,
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUserName
            WHERE idfVersion = @idfVersion;

            -- Data audit
            INSERT INTO @tlbAggrMatrixVersionHeader_AfterEdit
            (
                VersionID,
                MatrixName,
                StartDate,
                IsActive,
                IsDefault
            )
            SELECT idfVersion,
                   MatrixName,
                   datStartDate,
                   blnIsActive,
                   blnIsDefault
            FROM dbo.tlbAggrMatrixVersionHeader
            WHERE idfVersion = @idfVersion;

            --  tauDataAuditEvent  Event Type- Edit 
            SET @idfsDataAuditEventType = 10016003;
            -- insert record into tauDataAuditEvent - 
            EXEC dbo.USSP_GBL_DataAuditEvent_GET @idfUserId,
                                                 @idfSiteId,
                                                 @idfsDataAuditEventType,
                                                 @idfsObjectType,
                                                 @idfVersion,
                                                 @idfObjectTable_tlbAggrMatrixVersionHeader,
                                                 @idfDataAuditEvent OUTPUT;

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue
            )
            SELECT @idfDataAuditEvent,
                   @idfObjectTable_tlbAggrMatrixVersionHeader,
                   707360000000,
                   a.VersionID,
                   NULL,
                   a.MatrixName,
                   b.MatrixName
            FROM @tlbAggrMatrixVersionHeader_BeforeEdit a
                INNER JOIN @tlbAggrMatrixVersionHeader_AfterEdit b
                    ON a.VersionID = b.VersionID
            WHERE (a.MatrixName <> b.MatrixName)
                  OR (
                         a.MatrixName IS NOT NULL
                         AND b.MatrixName IS NULL
                     )
                  OR (
                         a.MatrixName IS NULL
                         AND b.MatrixName IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue
            )
            SELECT @idfDataAuditEvent,
                   @idfObjectTable_tlbAggrMatrixVersionHeader,
                   707370000000,
                   a.VersionID,
                   NULL,
                   a.StartDate,
                   b.StartDate
            FROM @tlbAggrMatrixVersionHeader_BeforeEdit a
                INNER JOIN @tlbAggrMatrixVersionHeader_AfterEdit b
                    ON a.VersionID = b.VersionID
            WHERE (a.StartDate <> b.StartDate)
                  OR (
                         a.StartDate IS NOT NULL
                         AND b.StartDate IS NULL
                     )
                  OR (
                         a.StartDate IS NULL
                         AND b.StartDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue
            )
            SELECT @idfDataAuditEvent,
                   @idfObjectTable_tlbAggrMatrixVersionHeader,
                   707380000000,
                   a.VersionID,
                   NULL,
                   a.IsActive,
                   b.IsActive
            FROM @tlbAggrMatrixVersionHeader_BeforeEdit a
                INNER JOIN @tlbAggrMatrixVersionHeader_AfterEdit b
                    ON a.VersionID = b.VersionID
            WHERE (a.IsActive <> b.IsActive)
                  OR (
                         a.IsActive IS NOT NULL
                         AND b.IsActive IS NULL
                     )
                  OR (
                         a.IsActive IS NULL
                         AND b.IsActive IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue
            )
            SELECT @idfDataAuditEvent,
                   @idfObjectTable_tlbAggrMatrixVersionHeader,
                   840870000000,
                   a.VersionID,
                   NULL,
                   a.IsDefault,
                   b.IsDefault
            FROM @tlbAggrMatrixVersionHeader_BeforeEdit a
                INNER JOIN @tlbAggrMatrixVersionHeader_AfterEdit b
                    ON a.VersionID = b.VersionID
            WHERE (a.IsDefault <> b.IsDefault)
                  OR (
                         a.IsDefault IS NOT NULL
                         AND b.IsDefault IS NULL
                     )
                  OR (
                         a.IsDefault IS NULL
                         AND b.IsDefault IS NOT NULL
                     );
        -- End data audit
        END
        ELSE
        BEGIN
            INSERT INTO @SuppressSelect
            EXEC dbo.USP_GBL_NEXTKEYID_GET 'tlbAggrMatrixVersionHeader',
                                           @idfVersion OUTPUT;
            INSERT INTO dbo.tlbAggrMatrixVersionHeader
            (
                idfVersion,
                idfsMatrixType,
                MatrixName,
                datStartDate,
                blnIsActive,
                blnIsDefault,
                AuditCreateDTM
            )
            VALUES
            (@idfVersion, @idfsMatrixType, @MatrixName, @datStartDate, @blnIsActive, @blnIsDefault, GETDATE());

            -- Data audit
            -- tauDataAuditEvent Event Type - Create 
            SET @idfsDataAuditEventType = 10016001;
            -- insert record into tauDataAuditEvent - 
            EXEC dbo.USSP_GBL_DataAuditEvent_GET @idfUserId,
                                                 @idfSiteId,
                                                 @idfsDataAuditEventType,
                                                 @idfsObjectType,
                                                 @idfVersion,
                                                 @idfObjectTable_tlbAggrMatrixVersionHeader,
                                                 @idfDataAuditEvent OUTPUT;

            INSERT INTO dbo.tauDataAuditDetailCreate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject
            )
            VALUES
            (@idfDataAuditEvent, @idfObjectTable_tlbAggrMatrixVersionHeader, @idfVersion);
        -- End data audit
        END

        IF @EventTypeId IS NOT NULL
        BEGIN
            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_ADMIN_EVENT_SET @EventId,
                                            @EventTypeId,
                                            @EventUserId,
                                            @idfVersion,
                                            @EventDiseaseId,
                                            @EventSiteId,
                                            @EventInformationString,
                                            @EventLoginSiteId,
                                            @EventLocationId,
                                            @AuditUserName;
        END

        SELECT idfVersion,
               idfsMatrixType,
               MatrixName,
               datStartDate,
               blnIsActive,
               blnIsDefault,
               @ReturnCode 'ReturnCode',
               @ReturnMessage 'ReturnMessage'
        FROM dbo.tlbAggrMatrixVersionHeader
        WHERE idfVersion = @idfVersion;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_CONF_PERSONALIDTYPEMATRIX_DEL]...';


GO
-- ================================================================================================
-- Name: USP_CONF_PERSONALIDTYPEMATRIX_DEL
--
-- Description: Removes a personal id type matrix
--
-- Author: Ricky Moss
--
-- Revision History:
-- Name						Date       Change Detail
-- ------------------------ ---------- -----------------------------------------------------------
-- Ricky Moss				07/10/2019	Initial Release
-- Stephen Long             04/14/2023 Added site alert logic.
--
-- EXEC USP_CONF_PERSONALIDTYPEMATRIX_DEL 52433900000002
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_CONF_PERSONALIDTYPEMATRIX_DEL]
(
    @idfBaseReferenceAttribute BIGINT,
    @EventTypeId BIGINT,
    @SiteId BIGINT,
    @UserId BIGINT,
    @LocationId BIGINT,
    @AuditUserName NVARCHAR(200)
)
AS
DECLARE @ReturnCode INT = 0,
        @ReturnMessage NVARCHAR(MAX) = 'SUCCESS';
DECLARE @SuppressSelect TABLE
(
    ReturnCode INT,
    ReturnMessage NVARCHAR(MAX)
);
BEGIN
    BEGIN TRY
        DELETE FROM dbo.trtBaseReferenceAttribute
        WHERE idfsBaseReference = @idfBaseReferenceAttribute;

        INSERT INTO @SuppressSelect
        EXECUTE dbo.USP_ADMIN_EVENT_SET-1,
                                       @EventTypeId,
                                       @UserId,
                                       @idfBaseReferenceAttribute,
                                       NULL,
                                       @SiteId,
                                       NULL,
                                       @SiteId,
                                       @LocationId,
                                       @AuditUserName;

        SELECT @ReturnCode AS ReturnCode,
               @ReturnMessage AS ReturnMessage;
    END TRY
    BEGIN CATCH
        THROW
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_CONF_ProphylacticMatrixReportRecord_DELETE]...';


GO
-- ================================================================================================
-- Name: USP_CONF_ProphylacticMatrixReportRecord_DELETE
--
-- Description: Deletes Entries For Vet Diagnosis Matrix Report Record
--
-- Author: Lamont Mitchell
--
-- Revision History:
-- Name                   Date       Change Detail
-- ---------------------- ---------- -------------------------------------------------------------
-- Lamont Mitchell        03/12/2019 Initial Created
-- Ann Xiong              02/24/2023 Implemented Data Audit
-- Stephen Long           04/17/2023 Added site alert logic.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_CONF_ProphylacticMatrixReportRecord_DELETE]
    @idfAggrProphylacticActionMTX BIGINT,
    @EventTypeId BIGINT,
    @SiteId BIGINT,
    @UserId BIGINT,
    @LocationId BIGINT,
    @AuditUserName NVARCHAR(200)
AS
BEGIN
    DECLARE @ReturnCode INT = 0,
            @ReturnMessage NVARCHAR(MAX) = 'SUCCESS';
    DECLARE @SuppressSelect TABLE
    (
        ReturnCode INT,
        ReturnMessage NVARCHAR(MAX)
    );

    -- Data audit
    DECLARE @idfUserId BIGINT = NULL,
            @idfSiteId BIGINT = NULL,
            @idfsDataAuditEventType BIGINT = 10016002,
            @idfsObjectType BIGINT = 10017003, -- Matrix for Aggregate Reports
            @idfObject BIGINT = @idfAggrProphylacticActionMTX,
            @idfObjectTable_tlbAggrProphylacticActionMTX BIGINT = 75440000000,
            @idfDataAuditEvent BIGINT = NULL;

    -- Get and Set UserId and SiteId
    SELECT @idfUserId = userInfo.UserId,
           @idfSiteId = userInfo.SiteId
    FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo;
    -- End data audit

    SET NOCOUNT ON;

    BEGIN TRY
        IF EXISTS
        (
            SELECT *
            FROM dbo.tlbAggrProphylacticActionMTX
            WHERE idfAggrProphylacticActionMTX = @idfAggrProphylacticActionMTX
        )
        BEGIN

            DELETE FROM dbo.tlbAggrProphylacticActionMTX
            WHERE idfAggrProphylacticActionMTX = @idfAggrProphylacticActionMTX;

            --Data Audit
            -- insert record into tauDataAuditEvent
            EXEC dbo.USSP_GBL_DataAuditEvent_GET @idfUserID,
                                                 @idfSiteId,
                                                 @idfsDataAuditEventType,
                                                 @idfsObjectType,
                                                 @idfObject,
                                                 @idfObjectTable_tlbAggrProphylacticActionMTX,
                                                 @idfDataAuditEvent OUTPUT;

            INSERT INTO dbo.tauDataAuditDetailDelete
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject
            )
            SELECT @idfDataAuditEvent,
                   @idfObjectTable_tlbAggrProphylacticActionMTX,
                   @idfObject
            -- End data audit

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_ADMIN_EVENT_SET-1,
                                            @EventTypeId,
                                            @UserId,
                                            @idfAggrProphylacticActionMTX,
                                            NULL,
                                            @SiteId,
                                            NULL,
                                            @SiteId,
                                            @LocationId,
                                            @AuditUserName,
                                            NULL,
                                            NULL;
        END

        SELECT @ReturnCode AS ReturnCode,
               @ReturnMessage AS ReturnMessage;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_CONF_REPORTDISEASEGROUPDISEASEMATRIX_DEL]...';


GO
-- ================================================================================================
-- Name: USP_CONF_REPORTDISEASEGROUPDISEASEMATRIX_DEL
--
-- Description: Deactivates a disease group to disease relationships
--
-- Author: Ricky Moss
--
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Ricky Moss		03/04/2019 Initial Release
-- Stephen Long     04/13/2023 Added site alert logic and comment box.
--
-- exec USP_CONF_DISEASEGROUPDISEASEMATRIX_DEL 6704450000000
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_CONF_REPORTDISEASEGROUPDISEASEMATRIX_DEL]
(
    @idfDiagnosisToGroupForReportType BIGINT,
    @deleteAnyway BIT = 0,
    @EventTypeId BIGINT,
    @SiteId BIGINT,
    @UserId BIGINT,
    @LocationId BIGINT,
    @AuditUserName NVARCHAR(200)
)
AS
DECLARE @ReturnCode INT = 0,
        @ReturnMessage NVARCHAR(MAX) = 'SUCCESS';
DECLARE @SuppressSelect TABLE
(
    ReturnCode INT,
    ReturnMessage NVARCHAR(MAX)
);
BEGIN
    BEGIN TRY
        UPDATE dbo.trtDiagnosisToGroupForReportType
        SET intRowStatus = 1,
            AuditUpdateDTM = GETDATE(),
            AuditUpdateUser = @AuditUserName
        WHERE idfDiagnosisToGroupForReportType = @idfDiagnosisToGroupForReportType;

        INSERT INTO @SuppressSelect
        EXECUTE dbo.USP_ADMIN_EVENT_SET-1,
                                       @EventTypeId,
                                       @UserId,
                                       @idfDiagnosisToGroupForReportType,
                                       NULL,
                                       @SiteId,
                                       NULL,
                                       @SiteId,
                                       @LocationId,
                                       @AuditUserName;

        SELECT @ReturnCode AS ReturnCode,
               @ReturnMessage AS ReturnMessage;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_CONF_SAMPLETYPEDERIVATIVEMATRIX_DEL]...';


GO
-- ================================================================================================
-- Name: USP_CONF_SAMPLETYPEDERIVATIVEMATRIX_DEL
--
-- Description: Removes sample type derivative matrix record
--							
-- Author:		unknown
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Leo Tracchia		02/22/2023 Added data audit logic for deletes
-- Stephen Long     03/13/2023 Fix for object type ID for data audit and added audit user name.
-- Stephen Long     04/17/2023 Added site alert logic.
--
-- Test Code:
-- exec USP_CONF_SAMPLETYPEDERIVATIVEMATRIX_DEL 6618200000000, 0
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_CONF_SAMPLETYPEDERIVATIVEMATRIX_DEL]
(
    @idfDerivativeForSampleType BIGINT,
    @deleteAnyway BIT = 0,
    @EventTypeId BIGINT,
    @SiteId BIGINT,
    @UserId BIGINT,
    @LocationId BIGINT,
    @AuditUserName NVARCHAR(200)
)
AS
DECLARE @ReturnCode INT = 0,
        @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
        @idfUserId BIGINT = @UserId,
        @idfSiteId BIGINT = @SiteId,
        @idfsDataAuditEventType BIGINT = 10016002, -- Delete event type
        @idfsObjectType BIGINT = 10017068,
        @idfObject BIGINT = @idfDerivativeForSampleType,
        @idfObjectTable_trtDerivativeForSampleType BIGINT = 740850000000,
        @idfDataAuditEvent BIGINT = NULL;
DECLARE @SuppressSelect TABLE
(
    ReturnCode INT,
    ReturnMessage NVARCHAR(MAX)
);
BEGIN
    BEGIN TRY
        UPDATE dbo.trtDerivativeForSampleType
        SET intRowStatus = 1,
            AuditUpdateDTM = GETDATE(),
            AuditUpdateUser = @AuditUserName
        WHERE idfDerivativeForSampleType = @idfDerivativeForSampleType;

        -- Data audit
        INSERT INTO @SuppressSelect
        EXECUTE dbo.USSP_GBL_DATA_AUDIT_EVENT_SET @idfUserId,
                                                  @idfSiteId,
                                                  @idfsDataAuditEventType,
                                                  @idfsObjectType,
                                                  @idfObject,
                                                  @idfObjectTable_trtDerivativeForSampleType,
                                                  NULL,
                                                  @idfDataAuditEvent OUTPUT;

        INSERT INTO dbo.tauDataAuditDetailDelete
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfObject
        )
        VALUES
        (@idfDataAuditEvent, @idfObjectTable_trtDerivativeForSampleType, @idfObject);
        -- End data audit

        INSERT INTO @SuppressSelect
        EXECUTE dbo.USSP_ADMIN_EVENT_SET-1,
                                        @EventTypeId,
                                        @UserId,
                                        @idfDerivativeForSampleType,
                                        NULL,
                                        @SiteId,
                                        NULL,
                                        @SiteId,
                                        @LocationId,
                                        @AuditUserName,
                                        NULL,
                                        NULL;

        SELECT @ReturnCode AS ReturnCode,
               @ReturnMessage AS ReturnMessage;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_CONF_SanitaryMatrixReportRecord_DELETE]...';


GO
-- ================================================================================================
-- Name: USP_CONF_SanitaryMatrixReportRecord_DELETE
--
-- Description: Deletes Entries For Vet Sanitary Action Matrix Report Record
--
-- Author: Lamont Mitchell
--
-- Revision History:
-- Name                   Date       Change Detail
-- ---------------------- ---------- -------------------------------------------------------------
-- Lamont Mitchell        03/12/2019 Initial Created
-- Ann Xiong              02/24/2023 Implemented Data Audit
-- Stephen Long           04/17/2023 Added site alert logic.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_CONF_SanitaryMatrixReportRecord_DELETE]
    @idfAggrSanitaryActionMTX BIGINT,
    @EventTypeId BIGINT,
    @SiteId BIGINT,
    @UserId BIGINT,
    @LocationId BIGINT,
    @AuditUserName NVARCHAR(200)
AS
BEGIN
    DECLARE @ReturnCode INT = 0,
            @ReturnMessage NVARCHAR(MAX) = 'SUCCESS';
    DECLARE @SuppressSelect TABLE
    (
        ReturnCode INT,
        ReturnMessage NVARCHAR(MAX)
    );

    -- Data audit
    DECLARE @idfUserId BIGINT = NULL,
            @idfSiteId BIGINT = NULL,
            @idfsDataAuditEventType BIGINT = 10016002,
            @idfsObjectType BIGINT = 10017003, -- Matrix for Aggregate Reports
            @idfObject BIGINT = @idfAggrSanitaryActionMTX,
            @idfObjectTable_tlbAggrSanitaryActionMTX BIGINT = 12666690000000,
            @idfDataAuditEvent BIGINT = NULL;

    -- Get and Set UserId and SiteId
    SELECT @idfUserId = userInfo.UserId,
           @idfSiteId = userInfo.SiteId
    FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo;
    -- End data audit

    SET NOCOUNT ON;

    BEGIN TRY
        IF EXISTS
        (
            SELECT *
            FROM dbo.tlbAggrSanitaryActionMTX
            WHERE idfAggrSanitaryActionMTX = @idfAggrSanitaryActionMTX
        )
        BEGIN

            DELETE FROM dbo.tlbAggrSanitaryActionMTX
            WHERE idfAggrSanitaryActionMTX = @idfAggrSanitaryActionMTX;

            -- Data audit
            -- insert record into tauDataAuditEvent
            EXEC dbo.USSP_GBL_DataAuditEvent_GET @idfUserID,
                                                 @idfSiteId,
                                                 @idfsDataAuditEventType,
                                                 @idfsObjectType,
                                                 @idfObject,
                                                 @idfObjectTable_tlbAggrSanitaryActionMTX,
                                                 @idfDataAuditEvent OUTPUT;

            INSERT INTO dbo.tauDataAuditDetailDelete
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject
            )
            SELECT @idfDataAuditEvent,
                   @idfObjectTable_tlbAggrSanitaryActionMTX,
                   @idfObject
            -- End data audit

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_ADMIN_EVENT_SET-1,
                                            @EventTypeId,
                                            @UserId,
                                            @idfAggrSanitaryActionMTX,
                                            NULL,
                                            @SiteId,
                                            NULL,
                                            @SiteId,
                                            @LocationId,
                                            @AuditUserName,
                                            NULL,
                                            NULL;
        END

        SELECT @ReturnCode AS ReturnCode,
               @ReturnMessage AS ReturnMessage;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_CONF_SPECIESTYPEANIMALAGEMATRIX_DEL]...';


GO
-- ================================================================================================
-- Name: USP_CONF_SPECIESTYPEANIMALAGEMATRIX_DEL
--
-- Description: Removes an active species types to animal age matrix given an id and the ability to 
-- delete regardless of being referenced. 
--
-- Author: Ricky Moss
-- 
-- Revision History:
-- Name				Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Ricky Moss		04/16/2019 Initial Release
-- Stephen Long     04/14/2023 Added site alert logic.
--
-- USP_CONF_SPECIESTYPEANIMALAGEMATRIX_DEL 838610000000, 0
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_CONF_SPECIESTYPEANIMALAGEMATRIX_DEL]
(
    @idfSpeciesTypeToAnimalAge BIGINT,
    @deleteAnyway BIT,
    @EventTypeId BIGINT,
    @SiteId BIGINT,
    @UserId BIGINT,
    @LocationId BIGINT,
    @AuditUserName NVARCHAR(200)
)
AS
DECLARE @ReturnCode INT = 0,
        @ReturnMessage NVARCHAR(MAX) = 'SUCCESS';
DECLARE @SuppressSelect TABLE
(
    ReturnCode INT,
    ReturnMessage NVARCHAR(MAX)
);
BEGIN
    BEGIN TRY
        UPDATE dbo.trtSpeciesTypeToAnimalAge
        SET intRowStatus = 1,
            AuditUpdateDTM = GETDATE(),
            AuditUpdateUser = @AuditUserName
        WHERE idfSpeciesTypeToAnimalAge = @idfSpeciesTypeToAnimalAge;

        INSERT INTO @SuppressSelect
        EXECUTE dbo.USP_ADMIN_EVENT_SET-1,
                                       @EventTypeId,
                                       @UserId,
                                       @idfSpeciesTypeToAnimalAge,
                                       NULL,
                                       @SiteId,
                                       NULL,
                                       @SiteId,
                                       @LocationId,
                                       @AuditUserName;

        SELECT @ReturnCode AS ReturnCode,
               @ReturnMessage AS ReturnMessage;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_CONF_TESTTOTESTRESULTMATRIX_DEL]...';


GO
-- =========================================================================================
-- NAME: USP_CONF_TESTTOTESTRESULTMATRIX_DEL
-- DESCRIPTION: Deactivates a test to test result relationship

-- AUTHOR: Ricky Moss

-- Revision History:
-- Name             Date        Change Detail
-- ---------------- ---------- -----------------------------------------------
-- Ricky Moss		03/08/2019	Initial Release
-- Ricky Moss		03/27/2019	Added delete anyway field
-- Stephen Long     04/17/2023 Added site alert logic.
--
-- exec USP_CONF_TESTTOTESTRESULTMATRIX_DEL 19000097, 803960000000, 807830000000, 0
-- exec USP_CONF_TESTTOTESTRESULTMATRIX_DEL 19000104, 6618660000000, 808040000000, 0
-- ========================================================================================
ALTER PROCEDURE [dbo].[USP_CONF_TESTTOTESTRESULTMATRIX_DEL]
(
    @idfsTestResultRelation BIGINT,
    @idfsTestName BIGINT,
    @idfsTestResult BIGINT,
    @deleteAnyway BIT,
    @EventTypeId BIGINT,
    @SiteId BIGINT,
    @UserId BIGINT,
    @LocationId BIGINT,
    @AuditUserName NVARCHAR(200)
)
AS
DECLARE @ReturnCode INT = 0,
        @ReturnMessage NVARCHAR(MAX) = 'SUCCESS';
DECLARE @SuppressSelect TABLE
(
    ReturnCode INT,
    ReturnMessage NVARCHAR(MAX)
);
declare @idfUserId BIGINT = NULL;
declare @idfSiteId BIGINT = NULL;
declare @idfsDataAuditEventType bigint = 10016002;
declare @idfsObjectType bigint = 10017055;
declare @idfObject bigint = @idfsTestName;
declare @idfObjectTable_tlbTestMatrix bigint = 76020000000;
declare @idfDataAuditEvent bigint = NULL;
-- Get and Set UserId and SiteId
select @idfUserId = userInfo.UserId,
       @idfSiteId = UserInfo.SiteId
from dbo.FN_UserSiteInformation(@AuditUserName) userInfo;

BEGIN
    BEGIN TRY
        IF @idfsTestResultRelation = 19000097
        BEGIN
            UPDATE dbo.trtTestTypeToTestResult
            SET intRowStatus = 1
            WHERE idfsTestName = @idfsTestName
                  AND idfsTestResult = @idfsTestResult
                  AND intRowStatus = 0;

            EXEC dbo.USSP_GBL_DataAuditEvent_GET @idfUserId,
                                                 @idfSiteId,
                                                 @idfsDataAuditEventType,
                                                 @idfsObjectType,
                                                 @idfObject,
                                                 @idfObjectTable_tlbTestMatrix,
                                                 @idfDataAuditEvent OUTPUT;
            insert into dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue
            )
            values
            (@idfDataAuditEvent, @idfObjectTable_tlbTestMatrix, 4578170000000, @idfObject, null, 0, 1);
        END
        ELSE
        BEGIN
            UPDATE dbo.trtPensideTestTypeToTestResult
            SET intRowStatus = 1
            WHERE idfsPensideTestName = @idfsTestName
                  AND idfsPensideTestResult = @idfsTestResult
                  AND intRowStatus = 0

            set @idfObjectTable_tlbTestMatrix = 75910000000;
            EXEC dbo.USSP_GBL_DataAuditEvent_GET @idfUserId,
                                                 @idfSiteId,
                                                 @idfsDataAuditEventType,
                                                 @idfsObjectType,
                                                 @idfObject,
                                                 @idfObjectTable_tlbTestMatrix,
                                                 @idfDataAuditEvent OUTPUT;
            insert into dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue
            )
            values
            (@idfDataAuditEvent, @idfObjectTable_tlbTestMatrix, 4578170000000, @idfObject, null, 0, 1);
        END

        INSERT INTO @SuppressSelect
        EXECUTE dbo.USP_ADMIN_EVENT_SET-1,
                                       @EventTypeId,
                                       @UserId,
                                       @idfsTestName,
                                       NULL,
                                       @SiteId,
                                       NULL,
                                       @SiteId,
                                       @LocationId,
                                       @AuditUserName;

        SELECT @ReturnCode AS ReturnCode,
               @ReturnMessage AS ReturnMessage;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_CONF_VECTORTYPECOLLECTIONMETHODMATRIX_DEL]...';


GO
-- ================================================================================================
-- Name: USP_CONF_VECTORTYPECOLLECTIONMETHODMATRIX_DEL
--
-- Description: Deactivates a vector type to collection type relationships
--
-- Author: Ricky Moss
--
-- Revision History:
-- Name             Date        Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Ricky Moss		03/04/2019	Initial Release
-- Stephen Long     04/14/2023 Added site alert logic.
--
-- exec USP_CONF_VECTORTYPECOLLECTIONMETHODMATRIX_DEL 6704450000000
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_CONF_VECTORTYPECOLLECTIONMETHODMATRIX_DEL]
(
    @idfCollectionMethodForVectorType BIGINT,
    @EventTypeId BIGINT,
    @SiteId BIGINT,
    @UserId BIGINT,
    @LocationId BIGINT,
    @AuditUserName NVARCHAR(200)
)
AS
BEGIN
    DECLARE @ReturnCode INT = 0,
            @ReturnMessage NVARCHAR(MAX) = 'SUCCESS';
    DECLARE @SuppressSelect TABLE
    (
        ReturnCode INT,
        ReturnMessage NVARCHAR(MAX)
    );
    BEGIN TRY
        UPDATE dbo.trtCollectionMethodForVectorType
        SET intRowStatus = 1,
            AuditUpdateDTM = GETDATE(),
            AuditUpdateUser = @AuditUserName
        WHERE idfCollectionMethodForVectorType = @idfCollectionMethodForVectorType;

        INSERT INTO @SuppressSelect
        EXECUTE dbo.USP_ADMIN_EVENT_SET-1,
                                       @EventTypeId,
                                       @UserId,
                                       @idfCollectionMethodForVectorType,
                                       NULL,
                                       @SiteId,
                                       NULL,
                                       @SiteId,
                                       @LocationId,
                                       @AuditUserName;

        SELECT @ReturnCode AS ReturnCode,
               @ReturnMessage AS ReturnMessage;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_CONF_VECTORTYPEFIELDTESTMATRIX_DEL]...';


GO
-- ================================================================================================
-- Name:		USP_CONF_VECTORTYPEFIELDTESTMATRIX_DEL
--
-- Description:	Removes vector type to field test matrix
--
-- Author:		Ricky Moss
--
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Ricky Moss		04/02/2019 Initial Release
-- Stephen Long     04/14/2023 Added site alert logic.
--
-- EXEC USP_CONF_VECTORTYPEFIELDTESTMATRIX_DEL 6706660000000, 1
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_CONF_VECTORTYPEFIELDTESTMATRIX_DEL]
(
    @idfPensideTestTypeForVectorType BIGINT,
    @deleteAnyway BIT,
    @EventTypeId BIGINT,
    @SiteId BIGINT,
    @UserId BIGINT,
    @LocationId BIGINT,
    @AuditUserName NVARCHAR(200)
)
AS
DECLARE @ReturnCode INT = 0,
        @ReturnMessage NVARCHAR(MAX) = 'SUCCESS';
DECLARE @SuppressSelect TABLE
(
    ReturnCode INT,
    ReturnMessage NVARCHAR(MAX)
);
BEGIN
    BEGIN TRY
        UPDATE dbo.trtPensideTestTypeForVectorType
        SET intRowStatus = 1,
            AuditUpdateDTM = GETDATE(),
            AuditUpdateUser = @AuditUserName
        WHERE idfPensideTestTypeForVectorType = @idfPensideTestTypeForVectorType;

        INSERT INTO @SuppressSelect
        EXECUTE dbo.USP_ADMIN_EVENT_SET-1,
                                       @EventTypeId,
                                       @UserId,
                                       @idfPensideTestTypeForVectorType,
                                       NULL,
                                       @SiteId,
                                       NULL,
                                       @SiteId,
                                       @LocationId,
                                       @AuditUserName;

        SELECT @ReturnCode AS ReturnCode,
               @ReturnMessage AS ReturnMessage;
    END TRY
    BEGIN CATCH
        THROW
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_CONF_VECTORTYPESAMPLETYPEMATRIX_DEL]...';


GO
-- ==========================================================================================
-- Name:		EXEC USP_CONF_VECTORTYPESAMPLETYPEMATRIX_DEL
-- Description:	Removes vector type to sample type matrix a vector type sample type id
-- Author:		Ricky Moss
-- Revision History:
-- Name             Date        Change Detail
-- ---------------- ---------- -----------------------------------------------
-- Ricky Moss		04/01/2019	Initial Release
-- Stephen Long     04/14/2023 Added site alert logic.
--
-- EXEC USP_CONF_VECTORTYPESAMPLETYPEMATRIX_DEL 6706830000003, 1
-- ==========================================================================================
ALTER PROCEDURE [dbo].[USP_CONF_VECTORTYPESAMPLETYPEMATRIX_DEL]
(
	@idfSampleTypeForVectorType BIGINT,
	@deleteAnyway BIT,
	@EventTypeId BIGINT,
    @SiteId BIGINT,
    @UserId BIGINT,
    @LocationId BIGINT,
    @AuditUserName NVARCHAR(200)
)
AS
        DECLARE @ReturnCode INT = 0,
                @ReturnMessage NVARCHAR(MAX) = 'SUCCESS';
        DECLARE @SuppressSelect TABLE
        (
            ReturnCode INT,
            ReturnMessage NVARCHAR(MAX)
        );
BEGIN
	BEGIN TRY
		UPDATE dbo.trtSampleTypeForVectorType 
        SET intRowStatus = 1,
            AuditUpdateDTM = GETDATE(),
            AuditUpdateUser = @AuditUserName
        WHERE idfSampleTypeForVectorType = @idfSampleTypeForVectorType;

        INSERT INTO @SuppressSelect
        EXECUTE dbo.USP_ADMIN_EVENT_SET-1,
                                       @EventTypeId,
                                       @UserId,
                                       @idfSampleTypeForVectorType,
                                       NULL,
                                       @SiteId,
                                       NULL,
                                       @SiteId,
                                       @LocationId,
                                       @AuditUserName;

        SELECT @ReturnCode AS ReturnCode,
               @ReturnMessage AS ReturnMessage;
	END TRY
	BEGIN CATCH
		THROW
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_CONF_VETAggregateCaseMatrixReportRecord_DELETE]...';


GO
-- ================================================================================================
-- Name: USP_CONF_VETAggregateCaseMatrixReportRecord_DELETE
--
-- Description: Deletes Entries For Vet Aggregate Disease Matrix Report Record
--
-- Author: Lamont Mitchell
--
-- Revision History:
-- Name                   Date       Change Detail
-- ---------------------- ---------- -------------------------------------------------------------
-- Lamont Mitchell        03/12/2019 Initial Created
-- Ann Xiong              02/23/2023 Implemented Data Audit
-- Stephen Long           04/17/2023 Added site alert logic.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_CONF_VETAggregateCaseMatrixReportRecord_DELETE]
    @idfAggrVetCaseMTX BIGINT,
    @EventTypeId BIGINT,
    @SiteId BIGINT,
    @UserId BIGINT,
    @LocationId BIGINT,
    @AuditUserName NVARCHAR(200)
AS
BEGIN
    DECLARE @ReturnCode INT = 0,
            @ReturnMessage NVARCHAR(MAX) = 'SUCCESS';
    DECLARE @SuppressSelect TABLE
    (
        ReturnCode INT,
        ReturnMessage NVARCHAR(MAX)
    );

    -- Data audit
    DECLARE @idfUserId BIGINT = NULL,
            @idfSiteId BIGINT = NULL,
            @idfsDataAuditEventType BIGINT = 10016002,
            @idfsObjectType BIGINT = 10017003, -- Matrix for Aggregate Reports
            @idfObject BIGINT = @idfAggrVetCaseMTX,
            @idfObjectTable_tlbAggrVetCaseMTX BIGINT = 75450000000,
            @idfDataAuditEvent BIGINT = NULL;

    -- Get and Set UserId and SiteId
    SELECT @idfUserId = userInfo.UserId,
           @idfSiteId = userInfo.SiteId
    FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo;
    -- End data audit

    SET NOCOUNT ON;

    BEGIN TRY
        IF EXISTS
        (
            SELECT *
            FROM dbo.tlbAggrVetCaseMTX
            WHERE idfAggrVetCaseMTX = @idfAggrVetCaseMTX
        )
        BEGIN
            DELETE FROM dbo.tlbAggrVetCaseMTX
            WHERE idfAggrVetCaseMTX = @idfAggrVetCaseMTX;

            -- Data audit
            -- insert record into tauDataAuditEvent
            EXEC dbo.USSP_GBL_DataAuditEvent_GET @idfUserID,
                                                 @idfSiteId,
                                                 @idfsDataAuditEventType,
                                                 @idfsObjectType,
                                                 @idfObject,
                                                 @idfObjectTable_tlbAggrVetCaseMTX,
                                                 @idfDataAuditEvent OUTPUT;

            INSERT INTO tauDataAuditDetailDelete
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject
            )
            SELECT @idfDataAuditEvent,
                   @idfObjectTable_tlbAggrVetCaseMTX,
                   @idfObject
            -- End data audit

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_ADMIN_EVENT_SET-1,
                                            @EventTypeId,
                                            @UserId,
                                            @idfAggrVetCaseMTX,
                                            NULL,
                                            @SiteId,
                                            NULL,
                                            @SiteId,
                                            @LocationId,
                                            @AuditUserName,
                                            NULL,
                                            NULL;
        END

        SELECT @ReturnCode AS ReturnCode,
               @ReturnMessage AS ReturnMessage;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_CONF_VetDiagnosisMatrixReportRecord_DELETE]...';


GO
-- ================================================================================================
-- Name: USP_CONF_VetDiagnosisMatrixReportRecord_DELETE
--
-- Description: Deletes Entries For Vet Diagnosis Matrix Report Record
--
-- Author: Lamont Mitchell
--
-- Revision History:
-- Name                   Date       Change Detail
-- ---------------------- ---------- -------------------------------------------------------------
-- Lamont Mitchell        03/12/2019 Initial Created
-- Ann Xiong              02/23/2023 Implemented Data Audit
-- Stephen Long           04/17/2023 Added site alert logic.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_CONF_VetDiagnosisMatrixReportRecord_DELETE]
    @idfAggrDiagnosticActionMTX BIGINT,
    @EventTypeId BIGINT,
    @SiteId BIGINT,
    @UserId BIGINT,
    @LocationId BIGINT,
    @AuditUserName NVARCHAR(200)
AS
BEGIN
    DECLARE @ReturnCode INT = 0,
            @ReturnMessage NVARCHAR(MAX) = 'SUCCESS';
    DECLARE @SuppressSelect TABLE
    (
        ReturnCode INT,
        ReturnMessage NVARCHAR(MAX)
    );

    -- Data audit
    DECLARE @idfUserId BIGINT = NULL,
            @idfSiteId BIGINT = NULL,
            @idfsDataAuditEventType BIGINT = NULL,
            @idfsObjectType BIGINT = 10017003, -- Matrix for Aggregate Reports
            @idfObject BIGINT = @idfAggrDiagnosticActionMTX,
            @idfObjectTable_tlbAggrDiagnosticActionMTX BIGINT = 75430000000,
            @idfDataAuditEvent BIGINT = NULL;

    -- Get and Set UserId and SiteId
    SELECT @idfUserId = userInfo.UserId,
           @idfSiteId = userInfo.SiteId
    FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo;
    -- End data audit

    SET NOCOUNT ON;

    BEGIN TRY
        IF EXISTS
        (
            SELECT *
            FROM dbo.tlbAggrDiagnosticActionMTX
            WHERE idfAggrDiagnosticActionMTX = @idfAggrDiagnosticActionMTX
        )
        BEGIN
            DELETE FROM dbo.tlbAggrDiagnosticActionMTX
            WHERE idfAggrDiagnosticActionMTX = @idfAggrDiagnosticActionMTX;

            -- Data audit
            -- tauDataAuditEvent Event Type - Delete
            SET @idfsDataAuditEventType = 10016002;

            -- insert record into tauDataAuditEvent
            EXEC dbo.USSP_GBL_DataAuditEvent_GET @idfUserID,
                                                 @idfSiteId,
                                                 @idfsDataAuditEventType,
                                                 @idfsObjectType,
                                                 @idfObject,
                                                 @idfObjectTable_tlbAggrDiagnosticActionMTX,
                                                 @idfDataAuditEvent OUTPUT;

            INSERT INTO dbo.tauDataAuditDetailDelete
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject
            )
            SELECT @idfDataAuditEvent,
                   @idfObjectTable_tlbAggrDiagnosticActionMTX,
                   @idfObject;
            -- End data audit

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_ADMIN_EVENT_SET-1,
                                            @EventTypeId,
                                            @UserId,
                                            @idfAggrDiagnosticActionMTX,
                                            NULL,
                                            @SiteId,
                                            NULL,
                                            @SiteId,
                                            @LocationId,
                                            @AuditUserName,
                                            NULL,
                                            NULL;
        END

        SELECT @ReturnCode AS ReturnCode,
               @ReturnMessage AS ReturnMessage;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_HUM_HUMAN_MASTER_SET]...';


GO
-- ================================================================================================
-- Name: USP_HUM_HUMAN_MASTER_SET
--
-- Description: Insert or update a human master (actual) record.
--          
-- Revision History:
-- Name            Date       Change
-- --------------- ---------- --------------------------------------------------------------------
-- Stephen Long    11/28/2018 Initial release for new API.
-- Stephen Long    01/18/2019 Added entered date as a part of the insert human actual statement; 
--                            sets it to the system current date/time.  Syncs up with use case 
--                            HUC02.  Also added copy to human indicator for requirements in 
--                            laboratory module, use case 10.
-- Mark Wilson     09/23/2021 updated for consistency and for updates to locations.
-- Mark Wilson     10/04/2021 updated blnGeoLocationShared to correct addressing issues.
-- Mark Wilson     10/06/2021 minor cleanup.
-- Mark Wilson     10/07/2021 added Permanent location params and sets, added Elevation.
-- Mark Wilson     10/19/2021 Updated to call USSP_GBL_ADDRESS_SET.
-- Mark Wilson     10/25/2021 Updated  EXEC USSP_GBL_ADDRESS_SET to remove @LanguageID
-- Steven Verner   02/13/2022 Suppressed the return of sub calls to global address set SP to keep from interfering with POCO generation.
-- Leo Tracchia	   11/21/2022 Added statements for Audit logging 
-- Leo Tracchia	   11/21/2022 Added fix for auditing and changed to call USSP_GBL_ADDRESS_SET_WITH_AUDITING
-- Leo Tracchia	   11/29/2022 Added additional statement for Audit logging specifically for location data
-- Ann Xiong	   03/15/2023 Added @idfDataAuditEvent parameter
-- Ann Xiong	   04/12/2023 Updated datModificationDate when update tlbHumanActual
-- Testing Code
/*

EXEC	@return_value = [dbo].[USP_HUM_HUMAN_MASTER_SET]
		@HumanMasterID = NULL,
		@FirstName = N'Mark',
		@SecondName = N'C.',
		@LastName = N'Wilson',
		@DateOfBirth = N'04/18/1962',
		@DateOfDeath = N'04/18/2062',
		@ReportedAge = 59,
		@ReportAgeUOMID = 10042003,
		@HumanGenderTypeID = 10043002,
		@OccupationTypeID = 6920000004,
		@PassportNumber = N'2224446661212',
		@EmployerName = N'Georgia Tech',
		@EmployedDateLastPresent = N'2021-10-04 14:55:23.090',
		@EmployeridfsLocation = 1345350000000,
		@EmployerstrStreetName = N'Baker Street',
		@EmployerstrBuilding = N'221B',
		@EmployeridfsPostalCode = N'33300',
		@EmployerPhone = N'011222333444',
		@HumanidfsLocation = 1345350000000,
		@HumanstrStreetName = N'Elm Street',
		@HumanstrBuilding = N'1224',
		@HumanidfsPostalCode = N'33300',
		@HomePhone = N'011222333444'

*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_HUM_HUMAN_MASTER_SET] (
	@HumanMasterID BIGINT = NULL,
	@CopyToHumanIndicator BIT = 0, 
	@PersonalIDType BIGINT = NULL,
	@EIDSSPersonID NVARCHAR(200) = NULL,
	@PersonalID NVARCHAR(100) = NULL,
	@FirstName NVARCHAR(200) = NULL,
	@SecondName NVARCHAR(200) = NULL,
	@LastName NVARCHAR(200),
	@DateOfBirth DATETIME = NULL,
	@DateOfDeath DATETIME = NULL,
	@ReportedAge INT = NULL,
	@ReportAgeUOMID BIGINT = NULL,
	@HumanGenderTypeID BIGINT = NULL,
	@OccupationTypeID BIGINT = NULL,
	@CitizenshipTypeID BIGINT = NULL,
	@PassportNumber NVARCHAR(20) = NULL,
	@IsEmployedTypeID BIGINT = NULL,
---------------------------------------------------------------
	@EmployerName NVARCHAR(200) = NULL,
	@EmployedDateLastPresent DATETIME = NULL,
	@EmployerForeignAddressIndicator BIT = 0,
	@EmployerForeignAddressString NVARCHAR(200) = NULL,
	@EmployerGeoLocationID BIGINT = NULL,
	@EmployeridfsLocation BIGINT = NULL,
	@EmployerstrStreetName NVARCHAR(200) = NULL,
	@EmployerstrApartment NVARCHAR(200) = NULL,
	@EmployerstrBuilding NVARCHAR(200) = NULL,
	@EmployerstrHouse NVARCHAR(200) = NULL,
	@EmployeridfsPostalCode NVARCHAR(200) = NULL,
	@EmployerPhone NVARCHAR(100) = NULL,
---------------------------------------------------------------
	@IsStudentTypeID BIGINT = NULL,
	@SchoolName NVARCHAR(200) = NULL,
	@SchoolDateLastAttended DATETIME = NULL,
	@SchoolForeignAddressIndicator BIT = 0,
	@SchoolForeignAddressString NVARCHAR(200) = NULL,
	@SchoolGeoLocationID BIGINT = NULL,
	@SchoolidfsLocation BIGINT = NULL,
	@SchoolstrStreetName NVARCHAR(200) = NULL,
	@SchoolstrApartment NVARCHAR(200) = NULL,
	@SchoolstrBuilding NVARCHAR(200) = NULL,
	@SchoolstrHouse NVARCHAR(200) = NULL,
	@SchoolidfsPostalCode NVARCHAR(200) = NULL,
	@SchoolPhone NVARCHAR(100) = NULL,
---------------------------------------------------------------
	@HumanGeoLocationID BIGINT = NULL,
	@HumanidfsLocation BIGINT = NULL,
	@HumanstrStreetName NVARCHAR(200) = NULL,
	@HumanstrApartment NVARCHAR(200) = NULL,
	@HumanstrBuilding NVARCHAR(200) = NULL,
	@HumanstrHouse NVARCHAR(200) = NULL,
	@HumanidfsPostalCode NVARCHAR(200) = NULL,
	@HumanstrLatitude FLOAT = NULL,
	@HumanstrLongitude FLOAT = NULL,
	@HumanstrElevation FLOAT = NULL,
---------------------------------------------------------------
	@HumanPermGeoLocationID BIGINT = NULL,
	@HumanPermidfsLocation BIGINT = NULL,
	@HumanPermstrStreetName NVARCHAR(200) = NULL,
	@HumanPermstrApartment NVARCHAR(200) = NULL,
	@HumanPermstrBuilding NVARCHAR(200) = NULL,
	@HumanPermstrHouse NVARCHAR(200) = NULL,
	@HumanPermidfsPostalCode NVARCHAR(200) = NULL,
---------------------------------------------------------------
	@HumanAltGeoLocationID BIGINT = NULL,
	@HumanAltForeignAddressIndicator BIT = 0,
	@HumanAltForeignAddressString NVARCHAR(200) = NULL,
	@HumanAltidfsLocation BIGINT = NULL,
	@HumanAltstrStreetName NVARCHAR(200) = NULL,
	@HumanAltstrApartment NVARCHAR(200) = NULL,
	@HumanAltstrBuilding NVARCHAR(200) = NULL,
	@HumanAltstrHouse NVARCHAR(200) = NULL,
	@HumanAltidfsPostalCode NVARCHAR(200) = NULL,
---------------------------------------------------------------
	@RegistrationPhone NVARCHAR(200) = NULL,
	@HomePhone NVARCHAR(200) = NULL,
	@WorkPhone NVARCHAR(200) = NULL,
	@ContactPhoneCountryCode INT = NULL,
	@ContactPhone NVARCHAR(200) = NULL,
	@ContactPhoneTypeID BIGINT = NULL,
	@ContactPhone2CountryCode INT = NULL,
	@ContactPhone2 NVARCHAR(200) = NULL,
	@ContactPhone2TypeID BIGINT = NULL,
    @idfDataAuditEvent BIGINT = NULL,
	@AuditUser NVARCHAR(100) = ''
	)
AS
BEGIN
	SET NOCOUNT ON;

	IF (@AuditUser = '' OR @AuditUser IS NULL)
		SET @AuditUser = SUSER_NAME()

	DECLARE @ReturnCode INT = 0,
		@ReturnMessage NVARCHAR(MAX) = 'SUCCESS', 
		@HumanID BIGINT = NULL;

	DECLARE @SupressSelect TABLE (
		ReturnCode INT,
		ReturnMessage NVARCHAR(MAX)
		);

	DECLARE @idfsLocation BIGINT
	DECLARE @AdminLevel INT

	--Data Audit--

		DECLARE @idfUserId BIGINT = NULL;
		DECLARE @idfSiteId BIGINT = NULL;
		DECLARE @idfsDataAuditEventType bigint = NULL;
		DECLARE @idfsObjectType bigint = 10017036; -- Need to review the value --
		DECLARE @idfObject bigint = @HumanMasterID;
		DECLARE @idfObjectTable_tlbHumanActual bigint = 4573200000000;
		DECLARE @idfObjectTable_HumanActualAddlInfo bigint = 52577590000000;
		--DECLARE @idfDataAuditEvent bigint = NULL;		

		DECLARE @tlbHumanActual_BeforeEdit TABLE
		(
			idfHumanActual bigint,
			idfsOccupationType bigint,
			idfsNationality bigint,
			idfsHumanGender bigint,
			idfCurrentResidenceAddress bigint,
			idfEmployerAddress bigint,
			idfRegistrationAddress bigint,
			datDateofBirth datetime,
			datDateOfDeath datetime,
			strLastName nvarchar(200),
			strSecondName nvarchar(200),
			strFirstName nvarchar(200),
			strRegistrationPhone nvarchar(200),
			strEmployerName nvarchar(200),
			strHomePhone nvarchar(200),
			strWorkPhone nvarchar(200),
			idfsPersonIDType bigint,
			strPersonID nvarchar(100),
			datEnteredDate datetime,
			datModificationDate datetime			
		)

		DECLARE @tlbHumanActual_AfterEdit TABLE
		(
			idfHumanActual bigint,
			idfsOccupationType bigint,
			idfsNationality bigint,
			idfsHumanGender bigint,
			idfCurrentResidenceAddress bigint,
			idfEmployerAddress bigint,
			idfRegistrationAddress bigint,
			datDateofBirth datetime,
			datDateOfDeath datetime,
			strLastName nvarchar(200),
			strSecondName nvarchar(200),
			strFirstName nvarchar(200),
			strRegistrationPhone nvarchar(200),
			strEmployerName nvarchar(200),
			strHomePhone nvarchar(200),
			strWorkPhone nvarchar(200),
			idfsPersonIDType bigint,
			strPersonID nvarchar(100),
			datEnteredDate datetime,
			datModificationDate datetime			
		)

		DECLARE @HumanActualAddlInfo_BeforeEdit TABLE
		(
			HumanActualAddlInfoUID bigint,
			ReportedAge int,
			ReportedAgeUOMID bigint,
			PassportNbr varchar(20),
			IsEmployedID bigint,
			EmployerPhoneNbr varchar(200),
			EmployedDTM datetime,
			IsStudentID bigint,
			SchoolName varchar(200),
			SchoolPhoneNbr varchar(200),
			SchoolAddressID bigint,
			SchoolLastAttendDTM datetime,
			ContactPhoneCountryCode int,
			ContactPhoneNbr varchar(200),
			ContactPhoneNbrTypeID bigint,
			ContactPhone2CountryCode int,
			ContactPhone2Nbr varchar(200),
			ContactPhone2NbrTypeID bigint,
			AltAddressID bigint			
		)

		DECLARE @HumanActualAddlInfo_AfterEdit TABLE
		(
			HumanActualAddlInfoUID bigint,
			ReportedAge int,
			ReportedAgeUOMID bigint,
			PassportNbr varchar(20),
			IsEmployedID bigint,
			EmployerPhoneNbr varchar(200),
			EmployedDTM datetime,
			IsStudentID bigint,
			SchoolName varchar(200),
			SchoolPhoneNbr varchar(200),
			SchoolAddressID bigint,
			SchoolLastAttendDTM datetime,
			ContactPhoneCountryCode int,
			ContactPhoneNbr varchar(200),
			ContactPhoneNbrTypeID bigint,
			ContactPhone2CountryCode int,
			ContactPhone2Nbr varchar(200),
			ContactPhone2NbrTypeID bigint,
			AltAddressID bigint			
		)

	--Data Audit--

	--Data Audit--
		-- Get and Set UserId and SiteId
		SELECT @idfUserId = userInfo.UserId, @idfSiteId = UserInfo.SiteId FROM dbo.FN_UserSiteInformation(@AuditUser) userInfo
	--Data Audit--

	BEGIN TRY

		BEGIN TRANSACTION;		
	
		IF NOT EXISTS (
				SELECT *
				FROM dbo.tlbHumanActual
				WHERE idfHumanActual = @HumanMasterID
					AND intRowStatus = 0
				)
		BEGIN

			INSERT INTO @SupressSelect
			EXECUTE dbo.USP_GBL_NEXTKEYID_GET 
				@tableName = N'tlbHumanActual',
				@idfsKey = @HumanMasterID OUTPUT;

			--Data Audit--
        	IF  @idfDataAuditEvent IS NULL
        	BEGIN 
				-- tauDataAuditEvent Event Type - Create 
				set @idfsDataAuditEventType = 10016001;
			
				-- insert record into tauDataAuditEvent - 
				INSERT INTO @SupressSelect
				EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType, @idfsObjectType, @HumanMasterID, @idfObjectTable_tlbHumanActual, @idfDataAuditEvent OUTPUT
            END
			--Data Audit--

			-- Set Employer Address 
			SET @AdminLevel = 0
			SELECT @AdminLevel = node.GetLevel() FROM dbo.gisLocation WHERE idfsLocation = @EmployeridfsLocation
			
			IF (@AdminLevel > 2)
				OR @EmployerForeignAddressIndicator = 1

				INSERT INTO @SupressSelect
				EXECUTE dbo.USSP_GBL_ADDRESS_SET_WITH_AUDITING 
					@GeolocationID = @EmployerGeoLocationID OUTPUT,
					@DataAuditEventID = @idfDataAuditEvent,
					@ResidentTypeID = NULL,
					@GroundTypeID = NULL,
					@GeolocationTypeID = NULL,
					@LocationID = @EmployeridfsLocation,
					@Apartment = @EmployerstrApartment,
					@Building = @EmployerstrBuilding,
					@StreetName = @EmployerstrStreetName,
					@House = @EmployerstrHouse,
					@PostalCodeString = @EmployeridfsPostalCode,
					@DescriptionString = NULL,
					@Distance = NULL,
					@Latitude = NULL,
					@Longitude = NULL,
					@Elevation = NULL,
					@Accuracy = NULL,
					@Alignment = NULL,
					@ForeignAddressIndicator = @EmployerForeignAddressIndicator,
					@ForeignAddressString = @EmployerForeignAddressString,
					@GeolocationSharedIndicator = 1,
					@AuditUserName = @AuditUser,
					@ReturnCode = @ReturnCode OUTPUT,
					@ReturnMessage = @ReturnMessage OUTPUT;

			-- Set School Address 
			SET @AdminLevel = 0
			SELECT @AdminLevel = node.GetLevel() FROM dbo.gisLocation WHERE idfsLocation = @SchoolidfsLocation
		
			IF (@AdminLevel > 2)
				OR @SchoolForeignAddressIndicator = 1

				INSERT INTO @SupressSelect
				EXECUTE dbo.USSP_GBL_ADDRESS_SET_WITH_AUDITING 
					@GeolocationID = @SchoolGeoLocationID OUTPUT,
					@DataAuditEventID = @idfDataAuditEvent,
					@ResidentTypeID = NULL,
					@GroundTypeID = NULL,
					@GeolocationTypeID = NULL,
					@LocationID = @SchoolidfsLocation,
					@Apartment = @SchoolstrApartment,
					@Building = @SchoolstrBuilding,
					@StreetName = @SchoolstrStreetName,
					@House = @SchoolstrHouse,
					@PostalCodeString = @SchoolidfsPostalCode,
					@DescriptionString = NULL,
					@Distance = NULL,
					@Latitude = NULL,
					@Longitude = NULL,
					@Elevation = NULL,
					@Accuracy = NULL,
					@Alignment = NULL,
					@ForeignAddressIndicator = @SchoolForeignAddressIndicator,
					@ForeignAddressString = @SchoolForeignAddressString,
					@GeolocationSharedIndicator = 1,
					@AuditUserName = @AuditUser,
					@ReturnCode = @ReturnCode OUTPUT,
					@ReturnMessage = @ReturnMessage OUTPUT;

			-- Set Current Address 
			SET @AdminLevel = 0
			SELECT @AdminLevel = node.GetLevel() FROM dbo.gisLocation WHERE idfsLocation = @HumanidfsLocation
		
			IF (@AdminLevel > 2)
				INSERT INTO @SupressSelect
				EXECUTE dbo.USSP_GBL_ADDRESS_SET_WITH_AUDITING 
					@GeolocationID = @HumanGeoLocationID OUTPUT,
					@DataAuditEventID = @idfDataAuditEvent,
					@ResidentTypeID = NULL,
					@GroundTypeID = NULL,
					@GeolocationTypeID = NULL,
					@LocationID = @HumanidfsLocation,
					@Apartment = @HumanstrApartment,
					@Building = @HumanstrBuilding,
					@StreetName = @HumanstrStreetName,
					@House = @HumanstrHouse,
					@PostalCodeString = @HumanidfsPostalCode,
					@DescriptionString = NULL,
					@Distance = NULL,
					@Latitude = @HumanstrLatitude,
					@Longitude = @HumanstrLongitude,
					@Elevation = @HumanstrElevation,
					@Accuracy = NULL,
					@Alignment = NULL,
					@ForeignAddressIndicator = 0,
					@ForeignAddressString = NULL,
					@GeolocationSharedIndicator = 1, 
					@AuditUserName = @AuditUser,
					@ReturnCode = @ReturnCode OUTPUT,
					@ReturnMessage = @ReturnMessage OUTPUT;

			-- Set Permanent Address 
			SET @AdminLevel = 0
			SELECT @AdminLevel = node.GetLevel() FROM dbo.gisLocation WHERE idfsLocation = @HumanPermidfsLocation
		
			IF (@AdminLevel > 2)
				INSERT INTO @SupressSelect
				EXECUTE dbo.USSP_GBL_ADDRESS_SET_WITH_AUDITING 
					@GeolocationID = @HumanPermGeoLocationID OUTPUT,
					@DataAuditEventID = @idfDataAuditEvent,
					@ResidentTypeID = NULL,
					@GroundTypeID = NULL,
					@GeolocationTypeID = NULL,
					@LocationID = @HumanPermidfsLocation,
					@Apartment =@HumanPermstrApartment,
					@Building =@HumanPermstrBuilding,
					@StreetName =@HumanPermstrStreetName,
					@House =@HumanPermstrHouse,
					@PostalCodeString =@HumanPermidfsPostalCode,
					@DescriptionString = NULL,
					@Distance = NULL,
					@Latitude = NULL,
					@Longitude = NULL,
					@Elevation = NULL,
					@Accuracy = NULL,
					@Alignment = NULL,
					@ForeignAddressIndicator = 0,
					@ForeignAddressString = NULL,
					@GeolocationSharedIndicator = 1, 
					@AuditUserName = @AuditUser,
					@ReturnCode = @ReturnCode OUTPUT,
					@ReturnMessage = @ReturnMessage OUTPUT;

			-- Set Alternate Address
			SET @AdminLevel = 0
			SELECT @AdminLevel = node.GetLevel() FROM dbo.gisLocation WHERE idfsLocation = @HumanAltidfsLocation
		
			IF (@AdminLevel > 2) OR @HumanAltForeignAddressIndicator = 1
				INSERT INTO @SupressSelect
				EXECUTE dbo.USSP_GBL_ADDRESS_SET_WITH_AUDITING
					@GeolocationID = @HumanAltGeoLocationID OUTPUT,
					@DataAuditEventID = @idfDataAuditEvent,
					@ResidentTypeID = NULL,
					@GroundTypeID = NULL,
					@GeolocationTypeID = NULL,
					@LocationID = @HumanAltidfsLocation,
					@Apartment = @HumanAltstrApartment,
					@Building = @HumanAltstrBuilding,
					@StreetName = @HumanAltstrStreetName,
					@House = @HumanAltstrHouse,
					@PostalCodeString = @HumanAltidfsPostalCode,
					@DescriptionString = NULL,
					@Distance = NULL,
					@Latitude = NULL,
					@Longitude = NULL,
					@Elevation = NULL,
					@Accuracy = NULL,
					@Alignment = NULL,
					@ForeignAddressIndicator = @HumanAltForeignAddressIndicator,
					@ForeignAddressString = @HumanAltForeignAddressString,
					@GeolocationSharedIndicator = 1, 
					@AuditUserName = @AuditUser,
					@ReturnCode = @ReturnCode OUTPUT,
					@ReturnMessage = @ReturnMessage OUTPUT;

				INSERT INTO dbo.tlbHumanActual (
					idfHumanActual,
					idfsNationality,
					idfsHumanGender,
					idfCurrentResidenceAddress,
					idfsOccupationType,
					idfEmployerAddress,
					idfRegistrationAddress,
					datDateofBirth,
					datDateOfDeath,
					strFirstName,
					strSecondName,
					strLastName,
					strRegistrationPhone,
					strEmployerName,
					strHomePhone,
					strWorkPhone,
					idfsPersonIDType,
					strPersonID,
					intRowStatus,
					SourceSystemNameID,
					SourceSystemKeyValue,
					AuditCreateUser,
					AuditCreateDTM,
					AuditUpdateUser,
					AuditUpdateDTM
					)
				VALUES (
					@HumanMasterID,
					@CitizenshipTypeID,
					@HumanGenderTypeID,
					@HumanGeoLocationID,
					@OccupationTypeID,
					@EmployerGeoLocationID,
					@HumanPermGeoLocationID,
					@DateOfBirth,
					@DateOfDeath,
					@FirstName,
					@SecondName,
					@LastName,
					@RegistrationPhone,
					@EmployerName,
					@HomePhone,
					@WorkPhone,
					@PersonalIDType,
					@PersonalID,
					0,
					10519001,
					'[{"idfHumanActual":' + CAST(@HumanMasterID AS NVARCHAR(300)) + '}]',
					@AuditUser,
					GETDATE(),
					@AuditUser,
					GETDATE()
					);

			--Data Audit--							

				INSERT INTO tauDataAuditDetailCreate(idfDataAuditEvent, idfObjectTable, idfObject)
				VALUES (@idfDataAuditEvent, @idfObjectTable_tlbHumanActual, @HumanMasterID)
			
			--Data Audit--

			INSERT INTO @SupressSelect
			EXECUTE dbo.USP_GBL_NextNumber_GET @ObjectName = N'EIDSS Person',
				@NextNumberValue = @EIDSSPersonID OUTPUT,
				@InstallationSite = NULL;

			INSERT INTO dbo.HumanActualAddlInfo (
				HumanActualAddlInfoUID,
				EIDSSPersonID,
				ReportedAge,
				ReportedAgeUOMID,
				PassportNbr,
				IsEmployedID,
				EmployerPhoneNbr,
				EmployedDTM,
				IsStudentID,
				SchoolName,
				SchoolPhoneNbr,
				SchoolAddressID,
				SchoolLastAttendDTM,
				ContactPhoneCountryCode,
				ContactPhoneNbr,
				ContactPhoneNbrTypeID,
				ContactPhone2CountryCode,
				ContactPhone2Nbr,
				ContactPhone2NbrTypeID,
				AltAddressID,
				intRowStatus,
				SourceSystemNameID,
				SourceSystemKeyValue,
				AuditCreateUser,
				AuditCreateDTM,
				AuditUpdateUser,
				AuditUpdateDTM
				)
			VALUES (
				@HumanMasterID,
				@EIDSSPersonID,
				@ReportedAge,
				@ReportAgeUOMID,
				@PassportNumber,
				@IsEmployedTypeID,
				@EmployerPhone,
				@EmployedDateLastPresent,
				@IsStudentTypeID,
				@SchoolName,
				@SchoolPhone,
				@SchoolGeoLocationID,
				@SchoolDateLastAttended,
				@ContactPhoneCountryCode,
				@ContactPhone,
				@ContactPhoneTypeID,
				@ContactPhone2CountryCode,
				@ContactPhone2,
				@ContactPhone2TypeID,
				@HumanAltGeoLocationID,
				0,
				10519001,
				'[{"HumanActualAddlInfoUID":' + CAST(@HumanMasterID AS NVARCHAR(300)) + '}]',
				@AuditUser,
				GETDATE(),
				@AuditUser,
				GETDATE()
				);

			--Data Audit--			
				-- tauDataAuditEvent Event Type - Create 									
				INSERT INTO tauDataAuditDetailCreate(idfDataAuditEvent, idfObjectTable, idfObject)
				VALUES (@idfDataAuditEvent, @idfObjectTable_HumanActualAddlInfo, @HumanMasterID)			
			--Data Audit--

			-- Create a human record from human actual for the laboratory module; register new sample.
			IF @CopyToHumanIndicator = 1
				BEGIN
					INSERT INTO @SupressSelect
					EXECUTE dbo.USP_HUM_COPYHUMANACTUALTOHUMAN @HumanMasterID, @HumanID OUTPUT, @ReturnCode OUTPUT, @ReturnMessage OUTPUT;
					IF @ReturnCode <> 0 
						BEGIN
							RETURN;
						END;
				END;
		END;
		ELSE
		BEGIN

			--DataAudit-- 
        	IF  @idfDataAuditEvent IS NULL
        	BEGIN 				
				--  tauDataAuditEvent  Event Type - Edit 
				set @idfsDataAuditEventType = 10016003;
			
				-- insert record into tauDataAuditEvent - 
				INSERT INTO @SupressSelect
				EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType, @idfsObjectType, @idfObject, @idfObjectTable_tlbHumanActual, @idfDataAuditEvent OUTPUT
            END
			--DataAudit-- 

			-- Set Employer Address 
			SET @AdminLevel = 0
			SELECT @AdminLevel = node.GetLevel() FROM dbo.gisLocation WHERE idfsLocation = @EmployeridfsLocation
			
			IF (@AdminLevel > 2)
				OR @EmployerForeignAddressIndicator = 1

				INSERT INTO @SupressSelect
				EXECUTE dbo.USSP_GBL_ADDRESS_SET_WITH_AUDITING 
					@GeolocationID = @EmployerGeoLocationID OUTPUT,
					@DataAuditEventID = @idfDataAuditEvent,
					@ResidentTypeID = NULL,
					@GroundTypeID = NULL,
					@GeolocationTypeID = NULL,
					@LocationID = @EmployeridfsLocation,
					@Apartment = @EmployerstrApartment,
					@Building = @EmployerstrBuilding,
					@StreetName = @EmployerstrStreetName,
					@House = @EmployerstrHouse,
					@PostalCodeString = @EmployeridfsPostalCode,
					@DescriptionString = NULL,
					@Distance = NULL,
					@Latitude = NULL,
					@Longitude = NULL,
					@Elevation = NULL,
					@Accuracy = NULL,
					@Alignment = NULL,
					@ForeignAddressIndicator = @EmployerForeignAddressIndicator,
					@ForeignAddressString = @EmployerForeignAddressString,
					@GeolocationSharedIndicator = 1,
					@AuditUserName = @AuditUser,
					@ReturnCode = @ReturnCode OUTPUT,
					@ReturnMessage = @ReturnMessage OUTPUT;

			-- Set School Address 
			SET @AdminLevel = 0
			SELECT @AdminLevel = node.GetLevel() FROM dbo.gisLocation WHERE idfsLocation = @SchoolidfsLocation
		
			IF (@AdminLevel > 2)
				OR @SchoolForeignAddressIndicator = 1

				INSERT INTO @SupressSelect
				EXECUTE dbo.USSP_GBL_ADDRESS_SET_WITH_AUDITING 
					@GeolocationID = @SchoolGeoLocationID OUTPUT,
					@DataAuditEventID = @idfDataAuditEvent,
					@ResidentTypeID = NULL,
					@GroundTypeID = NULL,
					@GeolocationTypeID = NULL,
					@LocationID = @SchoolidfsLocation,
					@Apartment = @SchoolstrApartment,
					@Building = @SchoolstrBuilding,
					@StreetName = @SchoolstrStreetName,
					@House = @SchoolstrHouse,
					@PostalCodeString = @SchoolidfsPostalCode,
					@DescriptionString = NULL,
					@Distance = NULL,
					@Latitude = NULL,
					@Longitude = NULL,
					@Elevation = NULL,
					@Accuracy = NULL,
					@Alignment = NULL,
					@ForeignAddressIndicator = @SchoolForeignAddressIndicator,
					@ForeignAddressString = @SchoolForeignAddressString,
					@GeolocationSharedIndicator = 1,
					@AuditUserName = @AuditUser,
					@ReturnCode = @ReturnCode OUTPUT,
					@ReturnMessage = @ReturnMessage OUTPUT;

			-- Set Current Address 
			SET @AdminLevel = 0
			SELECT @AdminLevel = node.GetLevel() FROM dbo.gisLocation WHERE idfsLocation = @HumanidfsLocation
		
			IF (@AdminLevel > 2)
				INSERT INTO @SupressSelect
				EXECUTE dbo.USSP_GBL_ADDRESS_SET_WITH_AUDITING 
					@GeolocationID = @HumanGeoLocationID OUTPUT,
					@DataAuditEventID = @idfDataAuditEvent,
					@ResidentTypeID = NULL,
					@GroundTypeID = NULL,
					@GeolocationTypeID = NULL,
					@LocationID = @HumanidfsLocation,
					@Apartment = @HumanstrApartment,
					@Building = @HumanstrBuilding,
					@StreetName = @HumanstrStreetName,
					@House = @HumanstrHouse,
					@PostalCodeString = @HumanidfsPostalCode,
					@DescriptionString = NULL,
					@Distance = NULL,
					@Latitude = @HumanstrLatitude,
					@Longitude = @HumanstrLongitude,
					@Elevation = @HumanstrElevation,
					@Accuracy = NULL,
					@Alignment = NULL,
					@ForeignAddressIndicator = 0,
					@ForeignAddressString = NULL,
					@GeolocationSharedIndicator = 1, 
					@AuditUserName = @AuditUser,
					@ReturnCode = @ReturnCode OUTPUT,
					@ReturnMessage = @ReturnMessage OUTPUT;

			-- Set Permanent Address 
			SET @AdminLevel = 0
			SELECT @AdminLevel = node.GetLevel() FROM dbo.gisLocation WHERE idfsLocation = @HumanPermidfsLocation
		
			IF (@AdminLevel > 2)
				INSERT INTO @SupressSelect
				EXECUTE dbo.USSP_GBL_ADDRESS_SET_WITH_AUDITING 
					@GeolocationID = @HumanPermGeoLocationID OUTPUT,
					@DataAuditEventID = @idfDataAuditEvent,
					@ResidentTypeID = NULL,
					@GroundTypeID = NULL,
					@GeolocationTypeID = NULL,
					@LocationID = @HumanPermidfsLocation,
					@Apartment =@HumanPermstrApartment,
					@Building =@HumanPermstrBuilding,
					@StreetName =@HumanPermstrStreetName,
					@House =@HumanPermstrHouse,
					@PostalCodeString =@HumanPermidfsPostalCode,
					@DescriptionString = NULL,
					@Distance = NULL,
					@Latitude = NULL,
					@Longitude = NULL,
					@Elevation = NULL,
					@Accuracy = NULL,
					@Alignment = NULL,
					@ForeignAddressIndicator = 0,
					@ForeignAddressString = NULL,
					@GeolocationSharedIndicator = 1, 
					@AuditUserName = @AuditUser,
					@ReturnCode = @ReturnCode OUTPUT,
					@ReturnMessage = @ReturnMessage OUTPUT;

			-- Set Alternate Address
			SET @AdminLevel = 0
			SELECT @AdminLevel = node.GetLevel() FROM dbo.gisLocation WHERE idfsLocation = @HumanAltidfsLocation
		
			IF (@AdminLevel > 2) OR @HumanAltForeignAddressIndicator = 1
				INSERT INTO @SupressSelect
				EXECUTE dbo.USSP_GBL_ADDRESS_SET_WITH_AUDITING
					@GeolocationID = @HumanAltGeoLocationID OUTPUT,
					@DataAuditEventID = @idfDataAuditEvent,
					@ResidentTypeID = NULL,
					@GroundTypeID = NULL,
					@GeolocationTypeID = NULL,
					@LocationID = @HumanAltidfsLocation,
					@Apartment = @HumanAltstrApartment,
					@Building = @HumanAltstrBuilding,
					@StreetName = @HumanAltstrStreetName,
					@House = @HumanAltstrHouse,
					@PostalCodeString = @HumanAltidfsPostalCode,
					@DescriptionString = NULL,
					@Distance = NULL,
					@Latitude = NULL,
					@Longitude = NULL,
					@Elevation = NULL,
					@Accuracy = NULL,
					@Alignment = NULL,
					@ForeignAddressIndicator = @HumanAltForeignAddressIndicator,
					@ForeignAddressString = @HumanAltForeignAddressString,
					@GeolocationSharedIndicator = 1, 
					@AuditUserName = @AuditUser,
					@ReturnCode = @ReturnCode OUTPUT,
					@ReturnMessage = @ReturnMessage OUTPUT;

			INSERT INTO @tlbHumanActual_BeforeEdit (
				idfHumanActual, 
				idfsOccupationType, 
				idfsNationality, 
				idfsHumanGender, 
				idfCurrentResidenceAddress, 
				idfEmployerAddress, 
				idfRegistrationAddress, 
				datDateofBirth, 
				datDateOfDeath, 
				strLastName, 
				strSecondName, 
				strFirstName,
				strRegistrationPhone,
				strEmployerName,
				strHomePhone,
				strWorkPhone,
				idfsPersonIDType,
				strPersonID,
				datEnteredDate,
				datModificationDate)
			SELECT 
				idfHumanActual, 
				idfsOccupationType, 
				idfsNationality, 
				idfsHumanGender, 
				idfCurrentResidenceAddress, 
				idfEmployerAddress, 
				idfRegistrationAddress, 
				datDateofBirth, 
				datDateOfDeath, 
				strLastName, 
				strSecondName, 
				strFirstName,
				strRegistrationPhone,
				strEmployerName,
				strHomePhone,
				strWorkPhone,
				idfsPersonIDType,
				strPersonID,
				datEnteredDate,
				datModificationDate
				FROM tlbHumanActual WHERE idfHumanActual = @HumanMasterID;

			UPDATE dbo.tlbHumanActual
			SET idfsNationality = @CitizenshipTypeID,
				idfsHumanGender = @HumanGenderTypeID,
				idfCurrentResidenceAddress = @HumanGeoLocationID,
				idfsOccupationType = @OccupationTypeID,
				idfEmployerAddress = @EmployerGeoLocationID,
				idfRegistrationAddress = @HumanPermGeoLocationID,
				datDateofBirth = @DateOfBirth,
				datDateOfDeath = @DateOfDeath,
				strFirstName = @FirstName,
				strSecondName = @SecondName,
				strLastName = @LastName,
				strRegistrationPhone = @RegistrationPhone,
				strEmployerName = @EmployerName,
				strHomePhone = @HomePhone,
				strWorkPhone = @WorkPhone,
				idfsPersonIDType = @PersonalIDType,
				strPersonID = @PersonalID,
				datModificationDate = GETDATE(),
				SourceSystemNameID = ISNULL(SourceSystemNameID, 10519001),
				SourceSystemKeyValue = ISNULL(SourceSystemKeyValue, '[{"idfHumanActual":' + CAST(@HumanMasterID AS NVARCHAR(300)) + '}]'),
				AuditCreateUser = @AuditUser,
				AuditCreateDTM = GETDATE(),
				AuditUpdateUser = @AuditUser,
				AuditUpdateDTM = GETDATE()
			WHERE idfHumanActual = @HumanMasterID;

			INSERT INTO @tlbHumanActual_AfterEdit (
				idfHumanActual, 
				idfsOccupationType, 
				idfsNationality, 
				idfsHumanGender, 
				idfCurrentResidenceAddress, 
				idfEmployerAddress, 
				idfRegistrationAddress, 
				datDateofBirth, 
				datDateOfDeath, 
				strLastName, 
				strSecondName, 
				strFirstName,
				strRegistrationPhone,
				strEmployerName,
				strHomePhone,
				strWorkPhone,
				idfsPersonIDType,
				strPersonID,
				datEnteredDate,
				datModificationDate)
			SELECT 
				idfHumanActual, 
				idfsOccupationType, 
				idfsNationality, 
				idfsHumanGender, 
				idfCurrentResidenceAddress, 
				idfEmployerAddress, 
				idfRegistrationAddress, 
				datDateofBirth, 
				datDateOfDeath, 
				strLastName, 
				strSecondName, 
				strFirstName,
				strRegistrationPhone,
				strEmployerName,
				strHomePhone,
				strWorkPhone,
				idfsPersonIDType,
				strPersonID,
				datEnteredDate,
				datModificationDate
				FROM tlbHumanActual WHERE idfHumanActual = @HumanMasterID;
						
				--idfsOccupationType
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_tlbHumanActual, 
					4573220000000,
					a.idfHumanActual,
					null,
					a.idfsOccupationType,
					b.idfsOccupationType 
				from @tlbHumanActual_BeforeEdit a  inner join @tlbHumanActual_AfterEdit b on a.idfHumanActual = b.idfHumanActual
				where (a.idfsOccupationType <> b.idfsOccupationType) 
					or(a.idfsOccupationType is not null and b.idfsOccupationType is null)
					or(a.idfsOccupationType is null and b.idfsOccupationType is not null)

				--idfsNationality
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_tlbHumanActual, 
					4573230000000,
					a.idfHumanActual,
					null,
					a.idfsNationality,
					b.idfsNationality 
				from @tlbHumanActual_BeforeEdit a  inner join @tlbHumanActual_AfterEdit b on a.idfHumanActual = b.idfHumanActual
				where (a.idfsNationality <> b.idfsNationality) 
					or(a.idfsNationality is not null and b.idfsNationality is null)
					or(a.idfsNationality is null and b.idfsNationality is not null)

				--idfsHumanGender
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_tlbHumanActual, 
					4573240000000,
					a.idfHumanActual,
					null,
					a.idfsHumanGender,
					b.idfsHumanGender 
				from @tlbHumanActual_BeforeEdit a  inner join @tlbHumanActual_AfterEdit b on a.idfHumanActual = b.idfHumanActual
				where (a.idfsHumanGender <> b.idfsHumanGender) 
					or(a.idfsHumanGender is not null and b.idfsHumanGender is null)
					or(a.idfsHumanGender is null and b.idfsHumanGender is not null)

				--idfCurrentResidenceAddress
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_tlbHumanActual, 
					4573250000000,
					a.idfHumanActual,
					null,
					a.idfCurrentResidenceAddress,
					b.idfCurrentResidenceAddress 
				from @tlbHumanActual_BeforeEdit a  inner join @tlbHumanActual_AfterEdit b on a.idfHumanActual = b.idfHumanActual
				where (a.idfCurrentResidenceAddress <> b.idfCurrentResidenceAddress) 
					or(a.idfCurrentResidenceAddress is not null and b.idfCurrentResidenceAddress is null)
					or(a.idfCurrentResidenceAddress is null and b.idfCurrentResidenceAddress is not null)

				--idfEmployerAddress
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_tlbHumanActual, 
					4573260000000,
					a.idfHumanActual,
					null,
					a.idfEmployerAddress,
					b.idfEmployerAddress 
				from @tlbHumanActual_BeforeEdit a  inner join @tlbHumanActual_AfterEdit b on a.idfHumanActual = b.idfHumanActual
				where (a.idfEmployerAddress <> b.idfEmployerAddress) 
					or(a.idfEmployerAddress is not null and b.idfEmployerAddress is null)
					or(a.idfEmployerAddress is null and b.idfEmployerAddress is not null)

				--idfRegistrationAddress
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_tlbHumanActual, 
					4573270000000,
					a.idfHumanActual,
					null,
					a.idfRegistrationAddress,
					b.idfRegistrationAddress 
				from @tlbHumanActual_BeforeEdit a  inner join @tlbHumanActual_AfterEdit b on a.idfHumanActual = b.idfHumanActual
				where (a.idfRegistrationAddress <> b.idfRegistrationAddress) 
					or(a.idfRegistrationAddress is not null and b.idfRegistrationAddress is null)
					or(a.idfRegistrationAddress is null and b.idfRegistrationAddress is not null)

				--datDateofBirth
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_tlbHumanActual, 
					4573280000000,
					a.idfHumanActual,
					null,
					a.datDateofBirth,
					b.datDateofBirth 
				from @tlbHumanActual_BeforeEdit a  inner join @tlbHumanActual_AfterEdit b on a.idfHumanActual = b.idfHumanActual
				where (a.datDateofBirth <> b.datDateofBirth) 
					or(a.datDateofBirth is not null and b.datDateofBirth is null)
					or(a.datDateofBirth is null and b.datDateofBirth is not null)

				--datDateOfDeath
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_tlbHumanActual, 
					4573290000000,
					a.idfHumanActual,
					null,
					a.datDateOfDeath,
					b.datDateOfDeath 
				from @tlbHumanActual_BeforeEdit a  inner join @tlbHumanActual_AfterEdit b on a.idfHumanActual = b.idfHumanActual
				where (a.datDateOfDeath <> b.datDateOfDeath) 
					or(a.datDateOfDeath is not null and b.datDateOfDeath is null)
					or(a.datDateOfDeath is null and b.datDateOfDeath is not null)

				--strLastName
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_tlbHumanActual, 
					4573300000000,
					a.idfHumanActual,
					null,
					a.strLastName,
					b.strLastName 
				from @tlbHumanActual_BeforeEdit a  inner join @tlbHumanActual_AfterEdit b on a.idfHumanActual = b.idfHumanActual
				where (a.strLastName <> b.strLastName) 
					or(a.strLastName is not null and b.strLastName is null)
					or(a.strLastName is null and b.strLastName is not null)

				--strSecondName
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_tlbHumanActual, 
					4573310000000,
					a.idfHumanActual,
					null,
					a.strSecondName,
					b.strSecondName 
				from @tlbHumanActual_BeforeEdit a  inner join @tlbHumanActual_AfterEdit b on a.idfHumanActual = b.idfHumanActual
				where (a.strSecondName <> b.strSecondName) 
					or(a.strSecondName is not null and b.strSecondName is null)
					or(a.strSecondName is null and b.strSecondName is not null)

				--strFirstName
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_tlbHumanActual, 
					4573320000000,
					a.idfHumanActual,
					null,
					a.strFirstName,
					b.strFirstName 
				from @tlbHumanActual_BeforeEdit a  inner join @tlbHumanActual_AfterEdit b on a.idfHumanActual = b.idfHumanActual
				where (a.strFirstName <> b.strFirstName) 
					or(a.strFirstName is not null and b.strFirstName is null)
					or(a.strFirstName is null and b.strFirstName is not null)

				--strRegistrationPhone
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_tlbHumanActual, 
					4573330000000,
					a.idfHumanActual,
					null,
					a.strRegistrationPhone,
					b.strRegistrationPhone 
				from @tlbHumanActual_BeforeEdit a  inner join @tlbHumanActual_AfterEdit b on a.idfHumanActual = b.idfHumanActual
				where (a.strRegistrationPhone <> b.strRegistrationPhone) 
					or(a.strRegistrationPhone is not null and b.strRegistrationPhone is null)
					or(a.strRegistrationPhone is null and b.strRegistrationPhone is not null)

				--strEmployerName
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_tlbHumanActual, 
					4573340000000,
					a.idfHumanActual,
					null,
					a.strEmployerName,
					b.strEmployerName 
				from @tlbHumanActual_BeforeEdit a  inner join @tlbHumanActual_AfterEdit b on a.idfHumanActual = b.idfHumanActual
				where (a.strEmployerName <> b.strEmployerName) 
					or(a.strEmployerName is not null and b.strEmployerName is null)
					or(a.strEmployerName is null and b.strEmployerName is not null)

				--strHomePhone
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_tlbHumanActual, 
					4573350000000,
					a.idfHumanActual,
					null,
					a.strHomePhone,
					b.strHomePhone 
				from @tlbHumanActual_BeforeEdit a  inner join @tlbHumanActual_AfterEdit b on a.idfHumanActual = b.idfHumanActual
				where (a.strHomePhone <> b.strHomePhone) 
					or(a.strHomePhone is not null and b.strHomePhone is null)
					or(a.strHomePhone is null and b.strHomePhone is not null)

				--strWorkPhone
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_tlbHumanActual, 
					4573360000000,
					a.idfHumanActual,
					null,
					a.strWorkPhone,
					b.strWorkPhone 
				from @tlbHumanActual_BeforeEdit a  inner join @tlbHumanActual_AfterEdit b on a.idfHumanActual = b.idfHumanActual
				where (a.strWorkPhone <> b.strWorkPhone) 
					or(a.strWorkPhone is not null and b.strWorkPhone is null)
					or(a.strWorkPhone is null and b.strWorkPhone is not null)

				--idfsPersonIDType
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_tlbHumanActual, 
					12527780000000,
					a.idfHumanActual,
					null,
					a.idfsPersonIDType,
					b.idfsPersonIDType 
				from @tlbHumanActual_BeforeEdit a  inner join @tlbHumanActual_AfterEdit b on a.idfHumanActual = b.idfHumanActual
				where (a.idfsPersonIDType <> b.idfsPersonIDType) 
					or(a.idfsPersonIDType is not null and b.idfsPersonIDType is null)
					or(a.idfsPersonIDType is null and b.idfsPersonIDType is not null)

				--strPersonID
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_tlbHumanActual, 
					12527790000000,
					a.idfHumanActual,
					null,
					a.strPersonID,
					b.strPersonID 
				from @tlbHumanActual_BeforeEdit a  inner join @tlbHumanActual_AfterEdit b on a.idfHumanActual = b.idfHumanActual
				where (a.strPersonID <> b.strPersonID) 
					or(a.strPersonID is not null and b.strPersonID is null)
					or(a.strPersonID is null and b.strPersonID is not null)

				--datEnteredDate
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_tlbHumanActual, 
					51389550000000,
					a.idfHumanActual,
					null,
					a.datEnteredDate,
					b.datEnteredDate 
				from @tlbHumanActual_BeforeEdit a  inner join @tlbHumanActual_AfterEdit b on a.idfHumanActual = b.idfHumanActual
				where (a.datEnteredDate <> b.datEnteredDate) 
					or(a.datEnteredDate is not null and b.datEnteredDate is null)
					or(a.datEnteredDate is null and b.datEnteredDate is not null)

				--datModificationDate
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_tlbHumanActual, 
					51389560000000,
					a.idfHumanActual,
					null,
					a.datModificationDate,
					b.datModificationDate 
				from @tlbHumanActual_BeforeEdit a  inner join @tlbHumanActual_AfterEdit b on a.idfHumanActual = b.idfHumanActual
				where (a.datModificationDate <> b.datModificationDate) 
					or(a.datModificationDate is not null and b.datModificationDate is null)
					or(a.datModificationDate is null and b.datModificationDate is not null)

			--DataAudit-- 

			INSERT INTO @HumanActualAddlInfo_BeforeEdit (
				HumanActualAddlInfoUID,
				ReportedAge, 
				ReportedAgeUOMID,
				PassportNbr,
				IsEmployedID,
				EmployerPhoneNbr,
				EmployedDTM,
				IsStudentID,
				SchoolName,
				SchoolPhoneNbr,
				SchoolAddressID,
				SchoolLastAttendDTM,
				ContactPhoneCountryCode,
				ContactPhoneNbr,
				ContactPhoneNbrTypeID,
				ContactPhone2CountryCode,
				ContactPhone2Nbr,
				ContactPhone2NbrTypeID,
				AltAddressID)			
			SELECT 
				HumanActualAddlInfoUID,
				ReportedAge, 
				ReportedAgeUOMID,
				PassportNbr,
				IsEmployedID,
				EmployerPhoneNbr,
				EmployedDTM,
				IsStudentID,
				SchoolName,
				SchoolPhoneNbr,
				SchoolAddressID,
				SchoolLastAttendDTM,
				ContactPhoneCountryCode,
				ContactPhoneNbr,
				ContactPhoneNbrTypeID,
				ContactPhone2CountryCode,
				ContactPhone2Nbr,
				ContactPhone2NbrTypeID,
				AltAddressID
				FROM HumanActualAddlInfo WHERE HumanActualAddlInfoUID = @HumanMasterID;

			UPDATE dbo.HumanActualAddlInfo
			SET ReportedAge = @ReportedAge,
				ReportedAgeUOMID = @ReportAgeUOMID,
				PassportNbr = @PassportNumber,
				IsEmployedID = @IsEmployedTypeID,
				EmployerPhoneNbr = @EmployerPhone,
				EmployedDTM = @EmployedDateLastPresent,
				IsStudentID = @IsStudentTypeID,
				SchoolName = @SchoolName,
				SchoolPhoneNbr = @SchoolPhone,
				SchoolAddressID = @SchoolGeoLocationID,
				SchoolLastAttendDTM = @SchoolDateLastAttended,
				ContactPhoneCountryCode = @ContactPhoneCountryCode,
				ContactPhoneNbr = @ContactPhone,
				ContactPhoneNbrTypeID = @ContactPhoneTypeID,
				ContactPhone2CountryCode = @ContactPhone2CountryCode,
				ContactPhone2Nbr = @ContactPhone2,
				ContactPhone2NbrTypeID = @ContactPhone2TypeID,
				AltAddressID = @HumanAltGeoLocationID,
				SourceSystemNameID = ISNULL(SourceSystemNameID, 10519001),
				SourceSystemKeyValue = ISNULL(SourceSystemKeyValue, '[{"HumanActualAddlInfoUID":' + CAST(@HumanMasterID AS NVARCHAR(300)) + '}]'),
				AuditCreateUser = @AuditUser,
				AuditCreateDTM = GETDATE(),
				AuditUpdateUser = @AuditUser,
				AuditUpdateDTM = GETDATE()
			WHERE HumanActualAddlInfoUID = @HumanMasterID;

			INSERT INTO @HumanActualAddlInfo_AfterEdit (
				HumanActualAddlInfoUID,
				ReportedAge, 
				ReportedAgeUOMID,
				PassportNbr,
				IsEmployedID,
				EmployerPhoneNbr,
				EmployedDTM,
				IsStudentID,
				SchoolName,
				SchoolPhoneNbr,
				SchoolAddressID,
				SchoolLastAttendDTM,
				ContactPhoneCountryCode,
				ContactPhoneNbr,
				ContactPhoneNbrTypeID,
				ContactPhone2CountryCode,
				ContactPhone2Nbr,
				ContactPhone2NbrTypeID,
				AltAddressID)
			SELECT 
				HumanActualAddlInfoUID,
				ReportedAge, 
				ReportedAgeUOMID,
				PassportNbr,
				IsEmployedID,
				EmployerPhoneNbr,
				EmployedDTM,
				IsStudentID,
				SchoolName,
				SchoolPhoneNbr,
				SchoolAddressID,
				SchoolLastAttendDTM,
				ContactPhoneCountryCode,
				ContactPhoneNbr,
				ContactPhoneNbrTypeID,
				ContactPhone2CountryCode,
				ContactPhone2Nbr,
				ContactPhone2NbrTypeID,
				AltAddressID			
				FROM HumanActualAddlInfo WHERE HumanActualAddlInfoUID = @HumanMasterID;

			--DataAudit-- 
			--  tauDataAuditEvent  Event Type- Edit 
			--set @idfsDataAuditEventType = 10016003;
			
			-- insert record into tauDataAuditEvent - 
			--INSERT INTO @SupressSelect
			--EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType, @idfsObjectType, @idfObject, @idfObjectTable_HumanActualAddlInfo, @idfDataAuditEvent OUTPUT

			--ReportedAge
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_HumanActualAddlInfo, 
				51586590000001,
				a.HumanActualAddlInfoUID,
				null,
				a.ReportedAge,
				b.ReportedAge 
			from @HumanActualAddlInfo_BeforeEdit a inner join @HumanActualAddlInfo_AfterEdit b on a.HumanActualAddlInfoUID = b.HumanActualAddlInfoUID
			where (a.ReportedAge <> b.ReportedAge) 
				or(a.ReportedAge is not null and b.ReportedAge is null)
				or(a.ReportedAge is null and b.ReportedAge is not null)

			--ReportedAgeUOMID
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_HumanActualAddlInfo, 
				51586590000002,
				a.HumanActualAddlInfoUID,
				null,
				a.ReportedAgeUOMID,
				b.ReportedAgeUOMID 
			from @HumanActualAddlInfo_BeforeEdit a inner join @HumanActualAddlInfo_AfterEdit b on a.HumanActualAddlInfoUID = b.HumanActualAddlInfoUID
			where (a.ReportedAgeUOMID <> b.ReportedAgeUOMID) 
				or(a.ReportedAgeUOMID is not null and b.ReportedAgeUOMID is null)
				or(a.ReportedAgeUOMID is null and b.ReportedAgeUOMID is not null)

			--PassportNbr
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_HumanActualAddlInfo, 
				51586590000003,
				a.HumanActualAddlInfoUID,
				null,
				a.PassportNbr,
				b.PassportNbr 
			from @HumanActualAddlInfo_BeforeEdit a inner join @HumanActualAddlInfo_AfterEdit b on a.HumanActualAddlInfoUID = b.HumanActualAddlInfoUID
			where (a.PassportNbr <> b.PassportNbr) 
				or(a.PassportNbr is not null and b.PassportNbr is null)
				or(a.PassportNbr is null and b.PassportNbr is not null)

			--IsEmployedID
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_HumanActualAddlInfo, 
				51586590000004,
				a.HumanActualAddlInfoUID,
				null,
				a.IsEmployedID,
				b.IsEmployedID 
			from @HumanActualAddlInfo_BeforeEdit a inner join @HumanActualAddlInfo_AfterEdit b on a.HumanActualAddlInfoUID = b.HumanActualAddlInfoUID
			where (a.IsEmployedID <> b.IsEmployedID) 
				or(a.IsEmployedID is not null and b.IsEmployedID is null)
				or(a.IsEmployedID is null and b.IsEmployedID is not null)

			--EmployerPhoneNbr
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_HumanActualAddlInfo, 
				51586590000005,
				a.HumanActualAddlInfoUID,
				null,
				a.EmployerPhoneNbr,
				b.EmployerPhoneNbr 
			from @HumanActualAddlInfo_BeforeEdit a inner join @HumanActualAddlInfo_AfterEdit b on a.HumanActualAddlInfoUID = b.HumanActualAddlInfoUID
			where (a.EmployerPhoneNbr <> b.EmployerPhoneNbr) 
				or(a.EmployerPhoneNbr is not null and b.EmployerPhoneNbr is null)
				or(a.EmployerPhoneNbr is null and b.EmployerPhoneNbr is not null)

			--EmployedDTM
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_HumanActualAddlInfo, 
				51586590000006,
				a.HumanActualAddlInfoUID,
				null,
				a.EmployedDTM,
				b.EmployedDTM 
			from @HumanActualAddlInfo_BeforeEdit a inner join @HumanActualAddlInfo_AfterEdit b on a.HumanActualAddlInfoUID = b.HumanActualAddlInfoUID
			where (a.EmployedDTM <> b.EmployedDTM) 
				or(a.EmployedDTM is not null and b.EmployedDTM is null)
				or(a.EmployedDTM is null and b.EmployedDTM is not null)

			--IsStudentID
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_HumanActualAddlInfo, 
				51586590000007,
				a.HumanActualAddlInfoUID,
				null,
				a.IsStudentID,
				b.IsStudentID 
			from @HumanActualAddlInfo_BeforeEdit a inner join @HumanActualAddlInfo_AfterEdit b on a.HumanActualAddlInfoUID = b.HumanActualAddlInfoUID
			where (a.IsStudentID <> b.IsStudentID) 
				or(a.IsStudentID is not null and b.IsStudentID is null)
				or(a.IsStudentID is null and b.IsStudentID is not null)

			--SchoolName
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_HumanActualAddlInfo, 
				51586590000008,
				a.HumanActualAddlInfoUID,
				null,
				a.SchoolName,
				b.SchoolName 
			from @HumanActualAddlInfo_BeforeEdit a inner join @HumanActualAddlInfo_AfterEdit b on a.HumanActualAddlInfoUID = b.HumanActualAddlInfoUID
			where (a.SchoolName <> b.SchoolName) 
				or(a.SchoolName is not null and b.SchoolName is null)
				or(a.SchoolName is null and b.SchoolName is not null)
				
			--SchoolPhoneNbr
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_HumanActualAddlInfo, 
				51586590000009,
				a.HumanActualAddlInfoUID,
				null,
				a.SchoolPhoneNbr,
				b.SchoolPhoneNbr 
			from @HumanActualAddlInfo_BeforeEdit a inner join @HumanActualAddlInfo_AfterEdit b on a.HumanActualAddlInfoUID = b.HumanActualAddlInfoUID
			where (a.SchoolPhoneNbr <> b.SchoolPhoneNbr) 
				or(a.SchoolPhoneNbr is not null and b.SchoolPhoneNbr is null)
				or(a.SchoolPhoneNbr is null and b.SchoolPhoneNbr is not null)
								
			--SchoolAddressID
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_HumanActualAddlInfo, 
				51586590000010,
				a.HumanActualAddlInfoUID,
				null,
				a.SchoolAddressID,
				b.SchoolAddressID 
			from @HumanActualAddlInfo_BeforeEdit a inner join @HumanActualAddlInfo_AfterEdit b on a.HumanActualAddlInfoUID = b.HumanActualAddlInfoUID
			where (a.SchoolAddressID <> b.SchoolAddressID) 
				or(a.SchoolAddressID is not null and b.SchoolAddressID is null)
				or(a.SchoolAddressID is null and b.SchoolAddressID is not null)
												
			--SchoolLastAttendDTM
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_HumanActualAddlInfo, 
				51586590000011,
				a.HumanActualAddlInfoUID,
				null,
				a.SchoolLastAttendDTM,
				b.SchoolLastAttendDTM 
			from @HumanActualAddlInfo_BeforeEdit a inner join @HumanActualAddlInfo_AfterEdit b on a.HumanActualAddlInfoUID = b.HumanActualAddlInfoUID
			where (a.SchoolLastAttendDTM <> b.SchoolLastAttendDTM) 
				or(a.SchoolLastAttendDTM is not null and b.SchoolLastAttendDTM is null)
				or(a.SchoolLastAttendDTM is null and b.SchoolLastAttendDTM is not null)
																
			--ContactPhoneCountryCode
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_HumanActualAddlInfo, 
				51586590000012,
				a.HumanActualAddlInfoUID,
				null,
				a.ContactPhoneCountryCode,
				b.ContactPhoneCountryCode 
			from @HumanActualAddlInfo_BeforeEdit a inner join @HumanActualAddlInfo_AfterEdit b on a.HumanActualAddlInfoUID = b.HumanActualAddlInfoUID
			where (a.ContactPhoneCountryCode <> b.ContactPhoneCountryCode) 
				or(a.ContactPhoneCountryCode is not null and b.ContactPhoneCountryCode is null)
				or(a.ContactPhoneCountryCode is null and b.ContactPhoneCountryCode is not null)

			--ContactPhoneNbr
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_HumanActualAddlInfo, 
				51586590000013,
				a.HumanActualAddlInfoUID,
				null,
				a.ContactPhoneNbr,
				b.ContactPhoneNbr 
			from @HumanActualAddlInfo_BeforeEdit a inner join @HumanActualAddlInfo_AfterEdit b on a.HumanActualAddlInfoUID = b.HumanActualAddlInfoUID
			where (a.ContactPhoneNbr <> b.ContactPhoneNbr) 
				or(a.ContactPhoneNbr is not null and b.ContactPhoneNbr is null)
				or(a.ContactPhoneNbr is null and b.ContactPhoneNbr is not null)

			--ContactPhoneNbrTypeID
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_HumanActualAddlInfo, 
				51586590000014,
				a.HumanActualAddlInfoUID,
				null,
				a.ContactPhoneNbrTypeID,
				b.ContactPhoneNbrTypeID 
			from @HumanActualAddlInfo_BeforeEdit a inner join @HumanActualAddlInfo_AfterEdit b on a.HumanActualAddlInfoUID = b.HumanActualAddlInfoUID
			where (a.ContactPhoneNbrTypeID <> b.ContactPhoneNbrTypeID) 
				or(a.ContactPhoneNbrTypeID is not null and b.ContactPhoneNbrTypeID is null)
				or(a.ContactPhoneNbrTypeID is null and b.ContactPhoneNbrTypeID is not null)

			--ContactPhone2CountryCode
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_HumanActualAddlInfo, 
				51586590000015,
				a.HumanActualAddlInfoUID,
				null,
				a.ContactPhone2CountryCode,
				b.ContactPhone2CountryCode 
			from @HumanActualAddlInfo_BeforeEdit a inner join @HumanActualAddlInfo_AfterEdit b on a.HumanActualAddlInfoUID = b.HumanActualAddlInfoUID
			where (a.ContactPhone2CountryCode <> b.ContactPhone2CountryCode) 
				or(a.ContactPhone2CountryCode is not null and b.ContactPhone2CountryCode is null)
				or(a.ContactPhone2CountryCode is null and b.ContactPhone2CountryCode is not null)
				
			--ContactPhone2Nbr
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_HumanActualAddlInfo, 
				51586590000016,
				a.HumanActualAddlInfoUID,
				null,
				a.ContactPhone2Nbr,
				b.ContactPhone2Nbr 
			from @HumanActualAddlInfo_BeforeEdit a inner join @HumanActualAddlInfo_AfterEdit b on a.HumanActualAddlInfoUID = b.HumanActualAddlInfoUID
			where (a.ContactPhone2Nbr <> b.ContactPhone2Nbr) 
				or(a.ContactPhone2Nbr is not null and b.ContactPhone2Nbr is null)
				or(a.ContactPhone2Nbr is null and b.ContactPhone2Nbr is not null)

			--ContactPhone2NbrTypeID
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_HumanActualAddlInfo, 
				51586590000017,
				a.HumanActualAddlInfoUID,
				null,
				a.ContactPhone2NbrTypeID,
				b.ContactPhone2NbrTypeID 
			from @HumanActualAddlInfo_BeforeEdit a inner join @HumanActualAddlInfo_AfterEdit b on a.HumanActualAddlInfoUID = b.HumanActualAddlInfoUID
			where (a.ContactPhone2NbrTypeID <> b.ContactPhone2NbrTypeID) 
				or(a.ContactPhone2NbrTypeID is not null and b.ContactPhone2NbrTypeID is null)
				or(a.ContactPhone2NbrTypeID is null and b.ContactPhone2NbrTypeID is not null)

			--AltAddressID
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_HumanActualAddlInfo, 
				51586590000018,
				a.HumanActualAddlInfoUID,
				null,
				a.AltAddressID,
				b.AltAddressID 
			from @HumanActualAddlInfo_BeforeEdit a inner join @HumanActualAddlInfo_AfterEdit b on a.HumanActualAddlInfoUID = b.HumanActualAddlInfoUID
			where (a.AltAddressID <> b.AltAddressID) 
				or(a.AltAddressID is not null and b.AltAddressID is null)
				or(a.AltAddressID is null and b.AltAddressID is not null)

		END;		

		IF @@TRANCOUNT > 0
			COMMIT TRANSACTION;

		SELECT @ReturnCode ReturnCode,
			@ReturnMessage ReturnMessage,
			@HumanMasterID HumanMasterID,
			@EIDSSPersonID EIDSSPersonID, 
			@HumanID HumanID;
	END TRY

	BEGIN CATCH
		IF @@TRANCOUNT > 0
			ROLLBACK TRANSACTION;

		SET @ReturnCode = ERROR_NUMBER();
		SET @ReturnMessage = ERROR_MESSAGE();
		SELECT @ReturnCode ReturnCode,
			@ReturnMessage ReturnMessage,
			@HumanMasterID HumanMasterID,
			@EIDSSPersonID EIDSSPersonID, 
			@HumanID HumanID;

		THROW;
	END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_REF_DIAGNOSISREFERENCE_DEL]...';


GO
--=================================================================================================
-- Name: USP_REF_DIAGNOSISREFERENCE_DEL
--
-- Description: Removes disease reference from active list of diseases
--							
-- Author:		Ricky Moss
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Ricky Moss		09/26/2018 Initial Release
-- Ricky Moss		12/12/2018 Removed return codes
-- Ricky Moss		02/09/2019 Added removal of tests, sample type and penside tests from disease
-- Ricky Moss		03/31/2019 Remove delete Anyway parameter
-- Leo Tracchia		11/25/2020 Added @forceDelete parameter as optional
-- Doug Albanese	08/03/2021 Added the deletion routine to deactivate the record tied to the 
--                             base reference
-- Stephen Long     10/31/2022 Added site alert logic.
-- Leo Tracchia		02/20/2023 Added data audit logic for deletes
--
-- Test Code:
-- exec USP_REF_DIAGNOSISREFERENCE_DEL 6618200000000, 0
--=================================================================================================
ALTER PROCEDURE [dbo].[USP_REF_DIAGNOSISREFERENCE_DEL]
(
     @IdfsDiagnosis BIGINT,
    @ForceDelete bit = 0,
    @EventTypeId BIGINT,
    @SiteId BIGINT,
    @UserId BIGINT,
    @LocationId BIGINT,
    @AuditUserName NVARCHAR(200)
)
AS
BEGIN
    BEGIN TRY
        DECLARE @ReturnCode INT = 0,
                @ReturnMessage NVARCHAR(MAX) = 'SUCCESS';
        DECLARE @SuppressSelect TABLE
        (
            ReturnCode INT,
            ReturnMessage NVARCHAR(MAX)
        );

        IF (
               (
                   NOT EXISTS
        (
            SELECT idfAggrDiagnosticActionMTX
            FROM dbo.tlbAggrDiagnosticActionMTX
            WHERE idfsDiagnosis = @IdfsDiagnosis
                  AND intRowStatus = 0
        )
                   AND NOT EXISTS
        (
            SELECT idfAggrHumanCaseMTX
            FROM dbo.tlbAggrHumanCaseMTX
            WHERE idfsDiagnosis = @IdfsDiagnosis
                  AND intRowStatus = 0
        )
                   AND NOT EXISTS
        (
            SELECT idfAggrDiagnosticActionMTX
            FROM dbo.tlbAggrDiagnosticActionMTX
            WHERE idfsDiagnosis = @IdfsDiagnosis
                  AND intRowStatus = 0
        )
                   AND NOT EXISTS
        (
            SELECT idfAggrProphylacticActionMTX
            FROM dbo.tlbAggrProphylacticActionMTX
            WHERE idfsDiagnosis = @IdfsDiagnosis
                  AND intRowStatus = 0
        )
                   AND NOT EXISTS
        (
            SELECT idfAggrVetCaseMTX
            FROM dbo.tlbAggrVetCaseMTX
            WHERE idfsSpeciesType = @IdfsDiagnosis
                  AND intRowStatus = 0
        )
                   AND NOT EXISTS
        (
            SELECT idfCampaign
            FROM dbo.tlbCampaignToDiagnosis
            WHERE idfsDiagnosis = @IdfsDiagnosis
                  AND intRowStatus = 0
        )
                   AND NOT EXISTS
        (
            SELECT idfCampaignToDiagnosis
            FROM dbo.tlbCampaignToDiagnosis
            WHERE idfsSpeciesType = @IdfsDiagnosis
                  AND intRowStatus = 0
        )
                   AND NOT EXISTS
        (
            SELECT idfMonitoringSession
            FROM dbo.tlbMonitoringSessionToDiagnosis
            WHERE idfsDiagnosis = @IdfsDiagnosis
                  AND intRowStatus = 0
        )
                   AND NOT EXISTS
        (
            SELECT idfMonitoringSessionToDiagnosis
            FROM dbo.tlbMonitoringSessionToDiagnosis
            WHERE idfsSpeciesType = @IdfsDiagnosis
                  AND intRowStatus = 0
        )
                   AND NOT EXISTS
        (
            SELECT idfMonitoringSessionSummary
            FROM dbo.tlbMonitoringSessionSummaryDiagnosis
            WHERE idfsDiagnosis = @IdfsDiagnosis
                  AND intRowStatus = 0
        )
                   AND NOT EXISTS
        (
            SELECT idfPensideTest
            FROM dbo.tlbPensideTest
            WHERE idfsDiagnosis = @IdfsDiagnosis
                  AND intRowStatus = 0
        )
                   AND NOT EXISTS
        (
            SELECT idfTesting
            FROM dbo.tlbTesting
            WHERE idfsDiagnosis = @IdfsDiagnosis
                  AND intRowStatus = 0
        )
                   AND NOT EXISTS
        (
            SELECT idfTestValidation
            FROM dbo.tlbTestValidation
            WHERE idfsDiagnosis = @IdfsDiagnosis
                  AND intRowStatus = 0
        )
                   AND NOT EXISTS
        (
            SELECT idfVaccination
            FROM dbo.tlbVaccination
            WHERE idfsDiagnosis = @IdfsDiagnosis
                  AND intRowStatus = 0
        )
                   AND NOT EXISTS
        (
            SELECT idfsVSSessionSummaryDiagnosis
            FROM dbo.tlbVectorSurveillanceSessionSummaryDiagnosis
            WHERE idfsDiagnosis = @IdfsDiagnosis
                  AND intRowStatus = 0
        )
                   AND NOT EXISTS
        (
            SELECT idfDiagnosisAgeGroupToDiagnosis
            FROM dbo.trtDiagnosisAgeGroupToDiagnosis
            WHERE idfsDiagnosis = @IdfsDiagnosis
                  AND intRowStatus = 0
        )
                   AND NOT EXISTS
        (
            SELECT idfDiagnosisToGroupForReportType
            FROM dbo.trtDiagnosisToGroupForReportType
            WHERE idfsDiagnosis = @IdfsDiagnosis
        )
                   AND NOT EXISTS
        (
            SELECT idfFFObjectToDiagnosisForCustomReport
            FROM dbo.trtFFObjectToDiagnosisForCustomReport
            WHERE idfsDiagnosis = @IdfsDiagnosis
                  AND intRowStatus = 0
        )
               )
               or @ForceDelete = 1
           )
        BEGIN
			
			--Begin: Data Audit--	

				DECLARE @idfUserId BIGINT = @UserId;
				DECLARE @idfSiteId BIGINT = @SiteId;
				DECLARE @idfsDataAuditEventType bigint = NULL;
				DECLARE @idfsObjectType bigint = 10017018; 
				DECLARE @idfObject bigint = @IdfsDiagnosis;
				DECLARE @idfObjectTable_trtDiagnosis bigint = 75840000000;		
				DECLARE @idfObjectTable_trtBaseReference bigint = 75820000000;
				DECLARE @idfObjectTable_trtStringNameTranslation bigint = 75990000000;
				DECLARE @idfDataAuditEvent bigint = NULL;	

				-- tauDataAuditEvent Event Type - Delete 
				set @idfsDataAuditEventType = 10016002;
			
			--End: Data Audit--	

            UPDATE dbo.trtDiagnosis
            SET intRowStatus = 1
            WHERE idfsDiagnosis = @IdfsDiagnosis
                  AND intRowStatus = 0

			--Begin: Data Audit, trtDiagnosis--				

				-- insert record into tauDataAuditEvent - 
				INSERT INTO @SuppressSelect
				EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType, @idfsObjectType, @idfObject, @idfObjectTable_trtDiagnosis, @idfDataAuditEvent OUTPUT

				INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject)
				VALUES (@idfDataAuditEvent, @idfObjectTable_trtDiagnosis, @idfObject)

			--End: Data Audit, trtDiagnosis--
				  
            UPDATE dbo.trtBaseReference
            SET intRowStatus = 1,
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUserName
            WHERE idfsBaseReference = @IdfsDiagnosis
                  AND intRowStatus = 0

			--Begin: Data Audit, trtBaseReference--				

				-- insert record into tauDataAuditEvent - 
				INSERT INTO @SuppressSelect
				EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType, @idfsObjectType, @idfObject, @idfObjectTable_trtBaseReference, @idfDataAuditEvent OUTPUT

				INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject)
				VALUES (@idfDataAuditEvent, @idfObjectTable_trtBaseReference, @idfObject)

			--End: Data Audit, trtBaseReference--

            UPDATE dbo.trtStringNameTranslation
            SET intRowStatus = 1,
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUserName
            WHERE idfsBaseReference = @IdfsDiagnosis

			--Begin: Data Audit, trtStringNameTranslation--				

				-- insert record into tauDataAuditEvent - 
				INSERT INTO @SuppressSelect
				EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType, @idfsObjectType, @idfObject, @idfObjectTable_trtStringNameTranslation, @idfDataAuditEvent OUTPUT

				INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject)
				VALUES (@idfDataAuditEvent, @idfObjectTable_trtStringNameTranslation, @idfObject)

			--End: Data Audit, trtStringNameTranslation--

   --         UPDATE dbo.trtBaseReference
   --         SET intRowStatus = 1,
   --             AuditUpdateDTM = GETDATE(),
   --             AuditUpdateUser = @AuditUserName
   --         WHERE idfsBaseReference = @IdfsDiagnosis		

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_ADMIN_EVENT_SET-1,
                                           @EventTypeId,
                                           @UserId,
                                           @IdfsDiagnosis,
                                           NULL,
                                           @SiteId,
                                           NULL,
                                           @SiteId,
                                           @LocationId,
                                           @AuditUserName;
        END
        ELSE
        BEGIN
            SELECT @ReturnCode = -1;
            SELECT @ReturnMessage = 'IN USE';
        END

        SELECT @ReturnCode AS ReturnCode,
               @ReturnMessage AS ReturnMessage;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_VET_FARM_MASTER_GETDetail]...';


GO
-- ================================================================================================
-- Name: USP_VET_FARM_MASTER_GETDetail
--
-- Description:	Get farm details for a specific farm master or farm record.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     04/06/2019 Initial release.
-- Stephen Long     04/29/2019 Added audit create date as entered date.
-- Stephen Long     06/22/2019 Fix to the farm address logic (building, apartment, house IIF's 
--                             to case statements).
-- Stephen Long     08/19/2019 Change farm owner name/ID to use personal ID instead of the EIDSS 
--                             person ID.
-- Ann Xiong        09/26/2019 Change FarmOwnerID to return ha.strPersonID instead of 
--                             fa.idfHumanActual, 
--                             add script to return CountryName.
-- Ann Xiong        10/07/2019 Added script to select CountryName, SettlementTypeName, and 
--                             idfsSettlementType.
-- Stephen Long     10/11/2019 Added EIDSSFarmOwnerID for the personal ID, and farm owner ID as the 
--                             human actual ID as the farm add/update user control relies on this 
--                             value.
-- Stephen Long     11/21/2019 Added source system name ID to the model.
-- Stephen Long     06/24/2020 Since the data for farm category in 6.1 is not populated, added code 
--                             to determine farm type based on accessory code.
-- Stephen Long     01/23/2022 Updated for location hierarchy.
-- Mike Kornegay	02/20/2022 Added number of buildings, birds per building, and avian farm type.
-- Mike Kornegay	02/21/2022 Added LocationID.
-- Mike Kornegay	03/10/2022 Added subquery to get the FarmId from tlbFarm if it exists.
-- Stephen Long     05/10/2022 Added additional check for farm type ID.
-- Ann Xiong        02/28/2023 Set migrated record's EnteredDate blank since no equivalent field in v 6.1 Farm record. 
-- Mike Kornegay	04/06/2023 Modify farm owner to trim spaces and return nulls if names are blank.
-- Mike Kornegay	04/13/2023 Correct farm owner field.
--
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_VET_FARM_MASTER_GETDetail]
(
    @LanguageID NVARCHAR(50),
    @FarmMasterID BIGINT
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        DECLARE @AccessoryCode INT = NULL,
                @FarmTypeID BIGINT = NULL,
                @LanguageCode BIGINT = dbo.FN_GBL_LanguageCode_Get(@LanguageID)

        SELECT fa.idfFarmActual AS FarmMasterID,
               (CASE
                    WHEN fa.idfsFarmCategory = 10040007
                         OR (fa.intHACode = 32 AND fa.idfsFarmCategory IS NULL) THEN
                        10040007
                    WHEN fa.idfsFarmCategory = 10040003
                         OR (fa.intHACode = 64 AND fa.idfsFarmCategory IS NULL) THEN
                        10040003
                    ELSE
                        10040001
                END
               ) AS FarmTypeID,
               (CASE
                    WHEN idfsFarmCategory = 10040007
                         OR (fa.intHACode = 32 AND fa.idfsFarmCategory IS NULL) THEN
                        dbo.FN_GBL_ReferenceValue_GET(@LanguageCode, 10040007)
                    WHEN idfsFarmCategory = 10040003
                         OR (fa.intHACode = 64 AND fa.idfsFarmCategory IS NULL) THEN
                        dbo.FN_GBL_ReferenceValue_GET(@LanguageCode, 10040003)
                    ELSE
                        dbo.FN_GBL_ReferenceValue_GET(@LanguageCode, 10040001)
                END
               ) AS FarmTypeName,
			   (SELECT TOP 1 idfFarm FROM tlbFarm WHERE idfFarmActual = fa.idfFarmActual) AS FarmID,
               fa.idfsOwnershipStructure AS OwnershipStructureTypeID,
               ha.strPersonID AS EIDSSFarmOwnerID,
               fa.idfHumanActual AS FarmOwnerID,
               haai.EIDSSPersonID,
			    (
					COALESCE(ha.strLastName, '') +
					(CASE ha.strFirstName WHEN null THEN '' WHEN '' THEN '' ELSE ', ' END) +
					COALESCE(ha.strFirstName, '') + 
					COALESCE(ha.strSecondName, '') +
					(CASE ha.strPersonID WHEN null THEN '' WHEN '' THEN '' ELSE ' ' + CHAR(150) + ' ' END) +
					COALESCE(ha.strPersonID, '')
				) AS FarmOwner,
               ha.strLastName AS FarmOwnerLastName,
               ha.strFirstName AS FarmOwnerFirstName,
               ha.strSecondName AS FarmOwnerSecondName,
               (CASE
                    WHEN fa.strNationalName IS NULL THEN
                        fa.strInternationalName
                    WHEN fa.strNationalName = '' THEN
                        fa.strInternationalName
                    ELSE
                        fa.strNationalName
                END
               ) AS FarmName,
               fa.strFarmCode AS EIDSSFarmID,
               fa.strFax AS Fax,
               fa.strEmail AS Email,
               fa.strContactPhone AS Phone,
               fa.intLivestockTotalAnimalQty AS TotalLivestockAnimalQuantity,
               fa.intAvianTotalAnimalQty AS TotalAvianAnimalQuantity,
               fa.intLivestockSickAnimalQty AS SickLivestockAnimalQuantity,
               fa.intAvianSickAnimalQty AS SickAvianAnimalQuantity,
               fa.intLivestockDeadAnimalQty AS DeadLivestockAnimalQuantity,
               fa.intAvianDeadAnimalQty AS DeadAvianAnimalQuantity,
               fa.strNote AS Note,
               fa.intRowStatus AS RowStatus,
               fa.datModificationDate AS ModifiedDate,
               (CASE
                    WHEN fa.SourceSystemNameID = 10519002 THEN
                        NULL
                    ELSE
                        fa.AuditCreateDTM
                END
               ) AS EnteredDate,
               fa.idfFarmAddress AS FarmAddressID,
               fa.SourceSystemNameID,
               lh.idfsLocation AS FarmAddressLocationID,
			   lh.AdminLevel1ID AS FarmAddressAdministrativeLevel0ID,
               lh.AdminLevel1Name AS FarmAddressAdministrativeLevel0Name,
               lh.AdminLevel2ID AS FarmAddressAdministrativeLevel1ID,
               lh.AdminLevel2Name AS FarmAddressAdministrativeLevel1Name,
               lh.AdminLevel3ID AS FarmAddressAdministrativeLevel2ID,
               lh.AdminLevel3Name AS FarmAddressAdministrativeLevel2Name,
               lh.AdminLevel4ID AS FarmAddressAdministrativeLevel3ID,
               lh.AdminLevel4Name AS FarmAddressAdministrativeLevel3Name,
               settlement.idfsReference AS FarmAddressSettlementID,
               settlement.name AS FarmAddressSettlementName,
               settlementType.idfsReference AS FarmAddressSettlementTypeID,
               settlementType.name AS FarmAddressSettlementTypeName,
               pc.idfPostalCode AS FarmAddressPostalCodeID, 
               gls.strPostCode AS FarmAddressPostalCode,
               st.idfStreet AS FarmAddressStreetID, 
               gls.strStreetName AS FarmAddressStreetName,
               gls.strBuilding AS FarmAddressBuilding,
               gls.strApartment AS FarmAddressApartment,
               gls.strHouse AS FarmAddressHouse,
               gls.dblLatitude AS FarmAddressLatitude,
               gls.dblLongitude AS FarmAddressLongitude,
               (CONVERT(NVARCHAR(100), gls.dblLatitude) + ', ' + CONVERT(NVARCHAR(100), gls.dblLongitude)) AS Coordinates,
               dbo.FN_GBL_CreateAddressString(
                                                 ISNULL(lh.AdminLevel1Name, ''),
                                                 ISNULL(lh.AdminLevel2Name, ''),
                                                 ISNULL(lh.AdminLevel3Name, ''),
                                                 ISNULL(gls.strPostCode, ''),
                                                 '',
                                                 '',
                                                 ISNULL(gls.strStreetName, ''),
                                                 ISNULL(gls.strHouse, ''),
                                                 ISNULL(gls.strBuilding, ''),
                                                 ISNULL(gls.strApartment, ''),
                                                 gls.blnForeignAddress,
                                                 ISNULL(gls.strForeignAddress, '')
                                             ) AS AddressString,
			   fa.intBirdsPerBuilding as NumberOfBirdsPerBuilding,
			   fa.intBuidings as NumberOfBuildings,
			   fa.idfsAvianFarmType as AvianFarmTypeID,
			   fa.idfsAvianProductionType as AvianProductionTypeID
        FROM dbo.tlbFarmActual fa
            LEFT JOIN dbo.tlbHumanActual AS ha
                ON ha.idfHumanActual = fa.idfHumanActual
                   AND ha.intRowStatus = 0
            LEFT JOIN dbo.HumanActualAddlInfo AS haai
                ON haai.HumanActualAddlInfoUID = ha.idfHumanActual
                   AND haai.intRowStatus = 0
            LEFT OUTER JOIN dbo.tlbGeoLocationShared gls
                ON fa.idfFarmAddress = gls.idfGeoLocationShared
            LEFT JOIN dbo.gisLocation g
                ON g.idfsLocation = gls.idfsLocation
            LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                ON lh.idfsLocation = g.idfsLocation
            LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LanguageID, 19000004) settlement
                ON g.node.IsDescendantOf(settlement.node) = 1
            LEFT JOIN dbo.FN_GBL_GIS_Reference(@LanguageID, 19000005) settlementType
                ON settlementType.idfsReference = settlement.idfsType
            LEFT JOIN dbo.tlbStreet st
                ON st.strStreetName = gls.strStreetName
            LEFT JOIN dbo.tlbPostalCode pc
                ON pc.strPostCode = gls.strPostCode
        WHERE fa.idfFarmActual = @FarmMasterID;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USSP_ADMIN_FF_DesignOptionsRefresh_SET]...';


GO
-- ================================================================================================
--	Name: USSP_ADMIN_FF_ParameterOrder_SET
--
--	Description:	Re-Orders the "intOrder" field to ensure that any data, that lacks order information, will have numbers to work with
--	This is very evident with migrated data, where "0's" show up for intOrder and prevents the application from changing parameter placements.
--
--	Revision History:
--	Name             Date       Change Detail
--	---------------- ---------- -------------------------------------------------------------------
--	Doug Albanese	03/15/2022	Initial release.
--	Doug Albanese	03/16/2022	Renamed to have "SET"
--  Doug Albanese   04/18/2023	Swapped out fnGetLanguageCode for dbo.FN_GBL_LanguageCode_GET(@LangID);	
--
--	Example
--	EXEC USSP_ADMIN_FF_DesignOptionsRefresh @LangID = 'en-us', @idfsFormTemplate = 9872520000000, @User = 'Doug'
-- ================================================================================================
ALTER PROCEDURE [dbo].[USSP_ADMIN_FF_DesignOptionsRefresh_SET]
(
	@LangID								VARCHAR(50),
    @idfsFormTemplate					BIGINT,
	@User								NVARCHAR(50)
)
AS
BEGIN
    SET NOCOUNT ON;

	DECLARE @IncrementSize				INT = 100
	DECLARE @langid_int					BIGINT
	DECLARE @idfsParameter				BIGINT
	DECLARE @idfsSection				BIGINT
	DECLARE	@idfParameterDesignOption	BIGINT
	DECLARE	@idfSectionDesignOption		BIGINT

	DECLARE @MissingDesignParameters TABLE (
		idfsParameter	BIGINT
	)

	DECLARE @MissingDesignSections TABLE (
		idfsSection		BIGINT
	)

	DECLARE @Parameters TABLE (
		NewOrderID		INT,
		idfsParameter	BIGINT
	)

	DECLARE @Sections TABLE (
		NewOrderID		INT,
		idfsSection		BIGINT
	)

	SET @langid_int = dbo.FN_GBL_LanguageCode_GET(@LangID);	

    BEGIN TRY

		--Discover any missing Design Options for parameters associated with the given template
		INSERT INTO @MissingDesignParameters (idfsParameter)
		SELECT
			PFT.idfsParameter
		FROM
			ffParameterForTemplate PFT
		WHERE
			PFT.idfsFormTemplate = @idfsFormTemplate
			AND idfsParameter NOT IN (SELECT idfsParameter FROM ffParameterDesignOption WHERE idfsFormTemplate = @idfsFormTemplate AND idfsLanguage = @langid_int AND intRowStatus = 0)

		--Enumerate through these parameters and add them to the design options table.
		WHILE EXISTS (SELECT * FROM @MissingDesignParameters)
			BEGIN
				SELECT
					TOP 1 @idfsParameter = idfsParameter
				FROM
					@MissingDesignParameters

				EXECUTE dbo.USP_GBL_NEXTKEYID_GET @tableNAme = 'ffParameterDesignOption', @idfsKey = @idfParameterDesignOption OUTPUT;

				INSERT INTO ffParameterDesignOption (
					idfParameterDesignOption,
					idfsParameter, 
					idfsLanguage, 
					idfsFormTemplate, 
					intLeft, 
					intTop, 
					intWidth, 
					intHeight, 
					intScheme, 
					intLabelSize, 
					intOrder, 
					intRowStatus, 
					rowguid, 
					AuditCreateuser, 
					AuditCreateDTM
				)
				VALUES (
					@idfParameterDesignOption,
					@idfsParameter,
					@langid_int,
					@idfsFormTemplate,
					0, 
					0, 
					0, 
					0, 
					0, 
					0, 
					0, 
					0, 
					NEWID(), 
					@User, 
					GETDATE()
				)

				DELETE FROM @MissingDesignParameters
				WHERE idfsParameter = @idfsParameter
			END

		
		--Discover any missing Design Options for sections associated with the given template
		INSERT INTO @MissingDesignSections (idfsSection)
		SELECT
			SFT.idfsSection
		FROM
			ffSectionForTemplate SFT
		WHERE
			SFT.idfsFormTemplate = @idfsFormTemplate
			AND idfsSection NOT IN (SELECT idfsSection FROM ffSectionDesignOption WHERE idfsFormTemplate = @idfsFormTemplate AND idfsLanguage = @langid_int AND intRowStatus = 0)
			
		--Enumerate through these sections and add them to the design options table.
		WHILE EXISTS (SELECT * FROM @MissingDesignSections)
			BEGIN
				SELECT
					TOP 1 @idfsSection = idfsSection
				FROM
					@MissingDesignSections

				EXECUTE dbo.USP_GBL_NEXTKEYID_GET @tableNAme = 'ffSectionDesignOption', @idfsKey = @idfSectionDesignOption OUTPUT;

				INSERT INTO ffSectionDesignOption (
					idfSectionDesignOption,
					idfsSection, 
					idfsLanguage, 
					idfsFormTemplate, 
					intLeft, 
					intTop, 
					intWidth, 
					intHeight, 
					intOrder, 
					intRowStatus, 
					rowguid, 
					AuditCreateuser, 
					AuditCreateDTM
				)
				VALUES (
					@idfSectionDesignOption,
					@idfsSection,
					@langid_int,
					@idfsFormTemplate,
					0, 
					0, 
					0, 
					0, 
					0, 
					0, 
					NEWID(), 
					@User, 
					GETDATE()
				)

				DELETE FROM @MissingDesignSections
				WHERE idfsSection = @idfsSection
			END

		--Now that all design options exist, we can refresh the ordering to have numbers that will always work with the FFD

		--Collect Parameter ordering information
		INSERT INTO @Parameters
        SELECT 
			@IncrementSize * ROW_NUMBER() OVER(Order By intOrder ASC) AS NewOrderID,
			idfsParameter
		FROM
			ffParameterDesignOption
		WHERE
			idfsFormTemplate = @idfsFormTemplate
		ORDER BY
			intOrder

		--Collect Section ordering information
		INSERT INTO @Sections
        SELECT 
			@IncrementSize * ROW_NUMBER() OVER(Order By intOrder ASC) AS NewOrderID,
			idfsSection
		FROM
			ffSectionDesignOption
		WHERE
			idfsFormTemplate = @idfsFormTemplate
		ORDER BY
			intOrder

		--Refresh Parameters with new updated ordering information
		UPDATE Parameter
		SET
			Parameter.intOrder = [@Parameters].NewOrderID
		FROM 
			ffParameterDesignOption Parameter
		INNER JOIN @Parameters ON Parameter.idfsParameter = [@Parameters].idfsParameter
		WHERE
			Parameter.idfsFormTemplate = @idfsFormTemplate

		--Refresh Sections with new updated ordering information
		UPDATE Section
		SET
			Section.intOrder = [@Sections].NewOrderID
		FROM 
			ffSectionDesignOption Section
		INNER JOIN @Sections ON Section.idfsSection = [@Sections].idfsSection
		WHERE
			Section.idfsFormTemplate = @idfsFormTemplate
			
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USSP_DISEASETOLABTEST_SET]...';


GO
-- ==========================================================================================================================
-- Name: USSP_DISEASETOLABTEST_SET
-- Description:	Create a relationship between a disease and lab tests
--                      
-- Author: Ricky Moss
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- ----------------------------------------------------------------------------------------------
-- Ricky Moss		03/20/2020 Initial release.
-- Doug Albanese	04/14/2021	Refactored to keep tests from not going into a soft delete status.
-- Leo Tracchia		04/12/2023	Added data audit logic
-- Leo Tracchia		04/13/2023	modified to correctly audit changes to tests associated with diseases
-- ==========================================================================================================================
ALTER PROCEDURE [dbo].[USSP_DISEASETOLABTEST_SET]
(
	@idfsDiagnosis BIGINT,
	@strLabTest NVARCHAR(MAX),
	@SiteId BIGINT = null,
    @UserId BIGINT = null,
	@idfDataAuditEvent BIGINT = NULL
)

AS

BEGIN
		
	DECLARE @idfsTestName BIGINT
	DECLARE @idfTestForDisease BIGINT

	--Data Audit			
	DECLARE @idfsObjectType bigint = 10017018; 
	DECLARE @idfObject bigint = @idfsDiagnosis;
	DECLARE @idfObjectTable_trtTestForDisease bigint = 76010000000;		

	--Temp Tables
	DECLARE @SupressSelect TABLE 
	(
		retrunCode INT, 
		returnMessage VARCHAR(200)
	)

	DECLARE @InputTests TABLE 
	(
		idfsTestName bigint
	) 

	DECLARE @CurrentActiveTests TABLE
	(
		idfsTestName bigint		
	);

	DECLARE @TestsToRemove TABLE
	(
		idfsTestName bigint		
	);

	BEGIN TRY

		--active tests
		insert into @CurrentActiveTests select idfsTestName from trtTestForDisease where idfsDiagnosis = @idfsDiagnosis and intRowStatus = 0		

		--input parameter tests 
		INSERT INTO @InputTests SELECT VALUE AS idfsTestName FROM STRING_SPLIT(@strLabTest,',');
		
		--tests to remove
		insert into @TestsToRemove select idfsTestName from @CurrentActiveTests cat where (not exists(select idfsTestName from @InputTests it where (it.idfsTestName = cat.idfsTestName)))

		--if there are tests being passed in
		IF (select count(idfsTestName) from @InputTests) > 0

			begin
				
				--deactivate the ones to be removed (if any)
				WHILE(SELECT COUNT(idfsTestName) FROM @TestsToRemove) > 0

					BEGIN

						SELECT @idfsTestName = (SELECT TOP 1 (idfsTestName) FROM @TestsToRemove)

						UPDATE 
							trtTestForDisease 
						SET	
							intRowStatus = 1 
						WHERE 
							idfsDiagnosis = @idfsDiagnosis AND 
							idfsTestName = @idfsTestName AND
							intRowStatus = 0

						-- Get the number of affected rows
						DECLARE @RowsDeleted1 INT; 
						SET @RowsDeleted1 = @@ROWCOUNT; 

						IF @RowsDeleted1 > 0

							begin						

								--audit for "delete"
								insert into dbo.tauDataAuditDetailDelete(
									idfDataAuditEvent, 
									idfObjectTable, 							 
									idfObject, 
									idfObjectDetail, 
									idfDataAuditDetailDelete)				
								select 
									@idfDataAuditEvent,
									@idfObjectTable_trtTestForDisease, 
									@idfsDiagnosis,
									@idfsTestName,
									newid()									

							end

						SET @RowsDeleted1 = 0;
						DELETE FROM @TestsToRemove WHERE idfsTestName = @idfsTestName

					END

				--activate the ones to be added (if any)
				WHILE(SELECT COUNT(idfsTestName) FROM @InputTests) > 0

					BEGIN

						SELECT @idfsTestName = (SELECT TOP 1 (idfsTestName) FROM @InputTests)
						
						IF EXISTS(SELECT idfTestForDisease FROM trtTestForDisease WHERE idfsDiagnosis = @idfsDiagnosis AND idfsTestName = @idfsTestName AND intRowStatus = 1) 

							BEGIN								

								UPDATE 
									trtTestForDisease 
								SET	
									intRowStatus = 0 
								WHERE 
									idfsDiagnosis = @idfsDiagnosis AND 
									idfsTestName = @idfsTestName AND
									intRowStatus = 1
								
								INSERT INTO tauDataAuditDetailCreate(idfDataAuditEvent, idfObjectTable, idfObject, idfObjectDetail)
								VALUES (@idfDataAuditEvent, @idfObjectTable_trtTestForDisease, @idfsDiagnosis, @idfsTestName)	

							END

						ELSE IF (NOT EXISTS(SELECT idfTestForDisease FROM trtTestForDisease WHERE idfsDiagnosis = @idfsDiagnosis AND idfsTestName = @idfsTestName)) 

							begin

								INSERT INTO @SupressSelect
								EXEC dbo.USP_GBL_NEXTKEYID_GET 'trtTestForDisease', @idfTestForDisease OUTPUT;								
								
								INSERT INTO trtTestForDisease (idfTestForDisease, idfsTestName, idfsDiagnosis, intRowStatus) 
								VALUES(@idfTestForDisease, @idfsTestName, @idfsDiagnosis, 0)

								--Data Audit
								INSERT INTO tauDataAuditDetailCreate(idfDataAuditEvent, idfObjectTable, idfObject, idfObjectDetail)
								VALUES (@idfDataAuditEvent, @idfObjectTable_trtTestForDisease, @idfsDiagnosis, @idfsTestName)
											
							end

						DELETE FROM @InputTests WHERE idfsTestName = @idfsTestName

					END							

			END	

		ELSE --if no tests are passed in, then they could have been all potentially removed from UI, therefore check if there are any active tests and deactivate them all

			BEGIN
				
				WHILE(SELECT COUNT(idfsTestName) FROM @CurrentActiveTests) > 0

					begin

						SELECT @idfsTestName = (SELECT TOP 1 (idfsTestName) FROM @CurrentActiveTests)

						UPDATE 
							trtTestForDisease 
						SET	
							intRowStatus = 1 
						WHERE 
							idfsDiagnosis = @idfsDiagnosis AND
							idfsTestName = @idfsTestName AND
							intRowStatus = 0

						-- Get the number of affected rows
						DECLARE @RowsDeleted2 INT; 
						SET @RowsDeleted2 = @@ROWCOUNT; 

						IF @RowsDeleted2 > 0

							begin

								insert into dbo.tauDataAuditDetailDelete(
									idfDataAuditEvent, 
									idfObjectTable, 							 
									idfObject, 
									idfObjectDetail, 
									idfDataAuditDetailDelete)				
								select 
									@idfDataAuditEvent,
									@idfObjectTable_trtTestForDisease, 
									@idfsDiagnosis,
									@idfsTestName,
									newid()											

							end
						
						SET @RowsDeleted2 = 0;

						DELETE FROM @CurrentActiveTests WHERE idfsTestName = @idfsTestName

					end

			end

	END TRY

	BEGIN CATCH
		THROW
	END CATCH

END
GO
PRINT N'Altering Procedure [dbo].[USSP_DISEASETOPENSIDETEST_SET]...';


GO
-- ==========================================================================================================================
-- Name: USSP_DISEASETOPENSIDETEST_SET
-- Description:	Create a relationship between a disease and penside tests
--                      
-- Author: Ricky Moss
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- ----------------------------------------------------------------------------------------------
-- Ricky Moss		03/20/2020 Initial release.
-- Doug Albanese	04/14/2021	Refactored to keep tests from not going into a soft delete status.
-- Leo Tracchia		04/17/2023	modified to correctly audit changes to penside tests associated with diseases
-- ==========================================================================================================================
ALTER PROCEDURE [dbo].[USSP_DISEASETOPENSIDETEST_SET]
(		
	@idfsDiagnosis BIGINT,
	@strPensideTest NVARCHAR(MAX),
	@SiteId BIGINT = null,
    @UserId BIGINT = null,
	@idfDataAuditEvent BIGINT = NULL
)

AS

BEGIN

	DECLARE @idfsPensideTestName BIGINT
	DECLARE @idfPensideTestForDisease BIGINT	

	--Data Audit			
	DECLARE @idfsObjectType bigint = 10017018; 
	DECLARE @idfObject bigint = @idfsDiagnosis;
	DECLARE @idfObjectTable_trtPensideTestForDisease bigint = 6617430000000;		

	--Temp Tables
	DECLARE @SupressSelect TABLE 
	(
		retrunCode INT, 
		returnMessage VARCHAR(200)
	)

	DECLARE @InputTests TABLE 
	(
		idfsTestName bigint
	) 

	DECLARE @CurrentActiveTests TABLE
	(
		idfsTestName bigint		
	);

	DECLARE @TestsToRemove TABLE
	(
		idfsTestName bigint		
	);

	BEGIN TRY

		--active tests
		insert into @CurrentActiveTests select idfsPensideTestName from trtPensideTestForDisease where idfsDiagnosis = @idfsDiagnosis and intRowStatus = 0		

		--input parameter tests 
		INSERT INTO @InputTests SELECT VALUE AS idfsTestName FROM STRING_SPLIT(@strPensideTest,',');

		--tests to remove
		insert into @TestsToRemove select idfsTestName from @CurrentActiveTests cat where (not exists(select idfsTestName from @InputTests it where (it.idfsTestName = cat.idfsTestName)))

		--if there are tests being passed in
		IF (select count(idfsTestName) from @InputTests) > 0

			begin
				
				--deactivate the ones to be removed (if any)
				WHILE(SELECT COUNT(idfsTestName) FROM @TestsToRemove) > 0

					BEGIN

						SELECT @idfsPensideTestName = (SELECT TOP 1 (idfsTestName) FROM @TestsToRemove)

						UPDATE 
							trtPensideTestForDisease 
						SET	
							intRowStatus = 1 
						WHERE 
							idfsDiagnosis = @idfsDiagnosis AND 
							idfsPensideTestName = @idfsPensideTestName AND
							intRowStatus = 0;

						-- Get the number of affected rows
						DECLARE @RowsDeleted1 INT; 
						SET @RowsDeleted1 = @@ROWCOUNT; 

						IF @RowsDeleted1 > 0

							begin												

								--audit for "delete"
								insert into dbo.tauDataAuditDetailDelete(
									idfDataAuditEvent, 
									idfObjectTable, 							 
									idfObject, 
									idfObjectDetail, 
									idfDataAuditDetailDelete)				
								select 
									@idfDataAuditEvent,
									@idfObjectTable_trtPensideTestForDisease, 
									@idfsDiagnosis,
									@idfsPensideTestName,
									newid()									

							end

						SET @RowsDeleted1 = 0;
						DELETE FROM @TestsToRemove WHERE idfsTestName = @idfsPensideTestName
					
					END
				
				--activate the ones to be added (if any)
				WHILE(SELECT COUNT(idfsTestName) FROM @InputTests) > 0

					BEGIN

						SELECT @idfsPensideTestName = (SELECT TOP 1 (idfsTestName) FROM @InputTests)

						IF EXISTS(SELECT idfPensideTestForDisease FROM trtPensideTestForDisease WHERE idfsDiagnosis = @idfsDiagnosis AND idfsPensideTestName = @idfsPensideTestName AND intRowStatus = 1) 

							BEGIN
								
								UPDATE 
									trtPensideTestForDisease 
								SET	
									intRowStatus = 0 
								WHERE 
									idfsDiagnosis = @idfsDiagnosis AND 
									idfsPensideTestName = @idfsPensideTestName AND
									intRowStatus = 1
								
								INSERT INTO tauDataAuditDetailCreate(idfDataAuditEvent, idfObjectTable, idfObject, idfObjectDetail)
								VALUES (@idfDataAuditEvent, @idfObjectTable_trtPensideTestForDisease, @idfsDiagnosis, @idfsPensideTestName)	

							END

						ELSE IF (NOT EXISTS(SELECT idfPensideTestForDisease FROM trtPensideTestForDisease WHERE idfsDiagnosis = @idfsDiagnosis AND idfsPensideTestName = @idfsPensideTestName)) 

							BEGIN

								INSERT INTO @SupressSelect
								EXEC dbo.USP_GBL_NEXTKEYID_GET 'trtPensideTestForDisease', @idfPensideTestForDisease OUTPUT;								

								INSERT INTO trtPensideTestForDisease (idfPensideTestForDisease, idfsPensideTestName, idfsDiagnosis, intRowStatus) 
								VALUES(@idfPensideTestForDisease, @idfsPensideTestName, @idfsDiagnosis, 0)

								--Data Audit
								INSERT INTO tauDataAuditDetailCreate(idfDataAuditEvent, idfObjectTable, idfObject, idfObjectDetail)
								VALUES (@idfDataAuditEvent, @idfObjectTable_trtPensideTestForDisease, @idfsDiagnosis, @idfsPensideTestName)
											
							END

						DELETE FROM @InputTests WHERE idfsTestName = @idfsPensideTestName;

					END							

			END	
		
		ELSE --if no tests are passed in, then they could have been all potentially removed from UI, therefore check if there are any active tests and deactivate them all

			BEGIN
				
				WHILE(SELECT COUNT(idfsTestName) FROM @CurrentActiveTests) > 0

					BEGIN

						SELECT @idfsPensideTestName = (SELECT TOP 1 (idfsTestName) FROM @CurrentActiveTests)

						UPDATE 
							trtPensideTestForDisease 
						SET	
							intRowStatus = 1 
						WHERE 
							idfsDiagnosis = @idfsDiagnosis AND
							idfsPensideTestName = @idfsPensideTestName AND
							intRowStatus = 0

						-- Get the number of affected rows
						DECLARE @RowsDeleted2 INT; 
						SET @RowsDeleted2 = @@ROWCOUNT; 

						IF @RowsDeleted2 > 0

							BEGIN

								INSERT INTO dbo.tauDataAuditDetailDelete(
									idfDataAuditEvent, 
									idfObjectTable, 							 
									idfObject, 
									idfObjectDetail, 
									idfDataAuditDetailDelete)				
								SELECT 
									@idfDataAuditEvent,
									@idfObjectTable_trtPensideTestForDisease, 
									@idfsDiagnosis,
									@idfsPensideTestName,
									newid()											

							END
						
						SET @RowsDeleted2 = 0;

						DELETE FROM @CurrentActiveTests WHERE idfsTestName = @idfsPensideTestName

					END

			END

	END TRY

	BEGIN CATCH
		THROW
	END CATCH

END
GO
PRINT N'Altering Procedure [dbo].[USSP_DISEASETOSAMPLETYPE_SET]...';


GO
-- ==========================================================================================================================
-- Name: USSP_DISEASETOSAMPLETYPE_SET
-- Description:	Create a relationship between a disease and sample types
--                      
-- Author: Ricky Moss
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- ----------------------------------------------------------------------------------------------
-- Ricky Moss		03/20/2020 Initial release.
-- Doug Albanese	04/14/2021	Refactored to keep tests from not going into a soft delete status.
-- Leo Tracchia		04/17/2023	modified to correctly audit changes to sample types associated with diseases
-- ==========================================================================================================================
ALTER PROCEDURE [dbo].[USSP_DISEASETOSAMPLETYPE_SET]
(
	@idfsDiagnosis BIGINT,
	@strSampleType NVARCHAR(MAX),
	@SiteId BIGINT = null,
    @UserId BIGINT = null,
	@idfDataAuditEvent BIGINT = NULL
)

AS

BEGIN

	DECLARE @idfsSampleType BIGINT
	DECLARE @idfMaterialForDisease BIGINT

	--Data Audit			
	DECLARE @idfsObjectType bigint = 10017018; 
	DECLARE @idfObject bigint = @idfsDiagnosis;
	DECLARE @idfObjectTable_trtMaterialForDisease bigint = 75880000000;

	--Temp Tables
	DECLARE @SupressSelect TABLE 
	(	
		retrunCode INT, 
		returnMessage VARCHAR(200)
	)	

	DECLARE @InputSamples TABLE 
	(
		idfsSampleType bigint
	) 

	DECLARE @CurrentActiveSamples TABLE
	(
		idfsSampleType bigint		
	);

	DECLARE @SamplesToRemove TABLE
	(
		idfsSampleType bigint		
	);

	BEGIN TRY

		--active samples
		insert into @CurrentActiveSamples select idfsSampleType from trtMaterialForDisease where idfsDiagnosis = @idfsDiagnosis and intRowStatus = 0		

		--input parameter samples 
		INSERT INTO @InputSamples SELECT VALUE AS idfsSampleType FROM STRING_SPLIT(@strSampleType,',');

		--samples to remove
		insert into @SamplesToRemove select idfsSampleType from @CurrentActiveSamples cas where (not exists(select idfsSampleType from @InputSamples it where (it.idfsSampleType = cas.idfsSampleType)))

		--if there are samples being passed in
		IF (select count(idfsSampleType) from @InputSamples) > 0

			begin
				
				--deactivate the ones to be removed (if any)
				WHILE(SELECT COUNT(idfsSampleType) FROM @SamplesToRemove) > 0

					BEGIN

						SELECT @idfsSampleType = (SELECT TOP 1 (idfsSampleType) FROM @SamplesToRemove)

						UPDATE 
							trtMaterialForDisease 
						SET	
							intRowStatus = 1 
						WHERE 
							idfsDiagnosis = @idfsDiagnosis AND 
							idfsSampleType = @idfsSampleType AND
							intRowStatus = 0;

						-- Get the number of affected rows
						DECLARE @RowsDeleted1 INT; 
						SET @RowsDeleted1 = @@ROWCOUNT; 

						IF @RowsDeleted1 > 0

							begin												

								--audit for "delete"
								insert into dbo.tauDataAuditDetailDelete(
									idfDataAuditEvent, 
									idfObjectTable, 							 
									idfObject, 
									idfObjectDetail, 
									idfDataAuditDetailDelete)				
								select 
									@idfDataAuditEvent,
									@idfObjectTable_trtMaterialForDisease, 
									@idfsDiagnosis,
									@idfsSampleType,
									newid()									

							end

						SET @RowsDeleted1 = 0;
						DELETE FROM @SamplesToRemove WHERE idfsSampleType = @idfsSampleType
					
					END					
				
				--activate the ones to be added (if any)
				WHILE(SELECT COUNT(idfsSampleType) FROM @InputSamples) > 0

					BEGIN

						SELECT @idfsSampleType = (SELECT TOP 1 (idfsSampleType) FROM @InputSamples)

						IF EXISTS(SELECT idfMaterialForDisease FROM trtMaterialForDisease WHERE idfsDiagnosis = @idfsDiagnosis AND idfsSampleType = @idfsSampleType AND intRowStatus = 1) 

							BEGIN
								
								UPDATE 
									trtMaterialForDisease 
								SET	
									intRowStatus = 0 
								WHERE 
									idfsDiagnosis = @idfsDiagnosis AND 
									idfsSampleType = @idfsSampleType AND
									intRowStatus = 1
								
								INSERT INTO tauDataAuditDetailCreate(idfDataAuditEvent, idfObjectTable, idfObject, idfObjectDetail)
								VALUES (@idfDataAuditEvent, @idfObjectTable_trtMaterialForDisease, @idfsDiagnosis, @idfsSampleType)	

							END

						ELSE IF (NOT EXISTS(SELECT idfMaterialForDisease FROM trtMaterialForDisease WHERE idfsDiagnosis = @idfsDiagnosis AND idfsSampleType = @idfsSampleType)) 

							BEGIN

								INSERT INTO @SupressSelect
								EXEC dbo.USP_GBL_NEXTKEYID_GET 'trtMaterialForDisease', @idfMaterialForDisease OUTPUT;								

								INSERT INTO trtMaterialForDisease (idfMaterialForDisease, idfsSampleType, idfsDiagnosis, intRowStatus) 
								VALUES(@idfMaterialForDisease, @idfsSampleType, @idfsDiagnosis, 0)

								--Data Audit
								INSERT INTO tauDataAuditDetailCreate(idfDataAuditEvent, idfObjectTable, idfObject, idfObjectDetail)
								VALUES (@idfDataAuditEvent, @idfObjectTable_trtMaterialForDisease, @idfsDiagnosis, @idfsSampleType)
											
							END

						DELETE FROM @InputSamples WHERE idfsSampleType = @idfsSampleType;

					END							

				END	
		
		ELSE --if no samples are passed in, then they could have been all potentially removed from UI, therefore check if there are any active samples and deactivate them all

			BEGIN
				
				WHILE(SELECT COUNT(idfsSampleType) FROM @CurrentActiveSamples) > 0

					BEGIN

						SELECT @idfsSampleType = (SELECT TOP 1 (idfsSampleType) FROM @CurrentActiveSamples)

						UPDATE 
							trtMaterialForDisease 
						SET	
							intRowStatus = 1 
						WHERE 
							idfsDiagnosis = @idfsDiagnosis AND
							idfsSampleType = @idfsSampleType AND
							intRowStatus = 0;

						-- Get the number of affected rows
						DECLARE @RowsDeleted2 INT; 
						SET @RowsDeleted2 = @@ROWCOUNT; 

						IF @RowsDeleted2 > 0

							BEGIN

								INSERT INTO dbo.tauDataAuditDetailDelete(
									idfDataAuditEvent, 
									idfObjectTable, 							 
									idfObject, 
									idfObjectDetail, 
									idfDataAuditDetailDelete)				
								SELECT 
									@idfDataAuditEvent,
									@idfObjectTable_trtMaterialForDisease, 
									@idfsDiagnosis,
									@idfsSampleType,
									newid()											

							END
						
						SET @RowsDeleted2 = 0;

						DELETE FROM @CurrentActiveSamples WHERE idfsSampleType = @idfsSampleType;

					END

			END

	END TRY

	BEGIN CATCH
		THROW
	END CATCH

END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_FF_TemplateDesign_GET]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_FF_TemplateDesign_GET
-- Description: Returns list of Sections/Parameters
--          
--	Revision History:
--	Name            Date		Change
--	--------------- ----------	--------------------------------------------------------------------
--	Doug Albanese	02/26/2020	Initial release for new API.
--	Doug Albanese	04/06/2020	Addition of automatic intOrder assignment for NULL or zero values
--	Doug Albanese	04/07/2020	return column name change to seperate section from parameters for intOrder
--	Doug Albanese	04/27/2020	Clean up for new templates created where nulls are only the response
--	Doug Albanese	05/11/2020	Correct for duplicate rows being returned
--	Doug Albanese	10/28/2020	Corrected the result to handle missing section data.
--	Doug Albanese	01/06/2021	Added idfsEditMode to handle the status of a parameter's required validation
--	Doug Albanese	01/21/2021	Correction to force the ordering of sections and parameters for a flex form, plus used the new translation function
--	Doug Albanese	01/22/2021	Design Option join didn't include the base reference language id.
--	Doug Albanese	05/21/2021	Refactored to produce "Sectionless" parameters
--	Doug Albanese	05/25/2021	Corrected an intRowStatus problem for parameters getting picked up, when they were deleted.
--	Doug Albanese	07/04/2021  Correction to force template design to come through for the Flex Form Designer
--	Doug Albanese	07/06/2021	Added Observations to the output to determine if a template is locked for specific funtionality
--	Doug Albanese	07/08/2021	Removed idfsSection and idfsParameter from ordering
--	Doug Albanese	10/28/2021	Removed the old concept of reordering parameters/sections, when they have 0 for intOrder
--	Doug Albanese	03/15/2022	Added a USSP to resolve any design option problems. Also added auditing information for the user requesting this call
--	Doug Albanese	03/16/2022	Changed out USSP_ADMIN_FF_DesignOptionsRefresh with USSP_ADMIN_FF_DesignOptionsRefresh_SET
--	Doug Albanese	05/09/2022	Cleaning up duplicates
--	Doug Albanese	05/23/2022	Missing Section Options requires a LEFT JOIN to continue without error
--	Doug Albanese	06/07/2022	Filtered output to only display items that have parameters. Nulls were showing up previously
--  Doug Albanese	03/03/2023	Added Editor Type to the return
--  Doug Albanese	04/04/2023	Refactored to correctly pick up objects pertaining to a specific template.
--  Doug Albanese	04/10/2023	Section data doesn't always exists, so a LEFT Join used on section related tables.
--	Doug Albanese	04/14/2023	Changed size of "Name" fields from 200 to 2000
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_FF_TemplateDesign_GET] (
	@langid				NVARCHAR(50),
	@idfsFormTemplate	BIGINT = NULL,
	@User				NVARCHAR(50)
)
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE		@langid_int				BIGINT
				,@returnCode			BIGINT
				,@returnMsg				NVARCHAR(MAX)

	BEGIN TRY
		BEGIN TRANSACTION

		SET @langid_int = dbo.FN_GBL_LanguageCode_GET(@LangID);

		--On occasion, Parameters and Sections do not have any Design Options associated with them. The following SP will create them so that ordering information will be available.
		--If ordering information is all null, or zeros...then they will be reassigned new numbers, and kept in the same order as they were before.
		EXEC USSP_ADMIN_FF_DesignOptionsRefresh_SET @LangId= @langid, @idfsFormTemplate = @idfsFormTemplate, @User = ''

		DECLARE @TemplateDesign TABLE (
			idfsSection					BIGINT,
			idfsParentSection			BIGINT,
			idfsParameter				BIGINT,
			idfsEditor					BIGINT,
			idfsParameterType			BIGINT,
			idfsParameterCaption		BIGINT,
			intSectionOrder				INT,
			intParameterOrder			INT,
			ParameterName				NVARCHAR(2000),
			SectionName					NVARCHAR(2000),
			idfsEditMode				BIGINT,
			Observations				INT
		)
		
		DECLARE @iObservations		INT

		SELECT
			@iObservations = COUNT(idfObservation)
		FROM
			tlbObservation O
		INNER JOIN ffFormTemplate FT
			ON FT.idfsFormTemplate = O.idfsFormTemplate
			AND FT.intRowStatus = 0
		WHERE
			O.idfsFormTemplate = @idfsFormTemplate

		INSERT INTO @TemplateDesign (idfsSection,idfsParentSection,idfsParameter,idfsEditor,idfsParameterType,idfsParameterCaption,intSectionOrder,intParameterOrder,ParameterName,SectionName,idfsEditMode,Observations)
		 SELECT 
			   COALESCE(s.idfsSection, -1) AS idfsSection
			   ,s.idfsParentSection
			   ,p.idfsParameter
			   ,p.idfsEditor
			   ,p.idfsParameterType
			   ,p.idfsParameterCaption
			   ,sdo.intOrder AS intSectionOrder
			   ,pdo.intOrder AS intParameterOrder
			   ,pn.name AS ParameterName
			   ,sn.name AS SectionName
			   ,pft.idfsEditMode
			   ,@iObservations AS Observations
		 FROM
			   ffFormTemplate ft
		 INNER JOIN ffParameterForTemplate pft ON pft.idfsFormTemplate = ft.idfsFormTemplate and pft.intRowStatus = 0
		 INNER JOIN ffParameter p ON p.idfsParameter = pft.idfsParameter and p.intRowStatus = 0
		 INNER JOIN ffSection s ON s.idfsSection = p.idfsSection and s.intRowStatus = 0
		 LEFT JOIN ffSectionForTemplate sft ON sft.idfsSection = s.idfsSection and sft.idfsFormTemplate = @idfsFormTemplate and sft.intRowStatus = 0
		 INNER JOIN ffParameterDesignOption pdo ON pdo.idfsParameter = p.idfsParameter and pdo.idfsFormTemplate = @idfsFormTemplate and pdo.idfsLanguage = @langid_int and pdo.intRowStatus = 0
		 LEFT JOIN ffSectionDesignOption sdo ON sdo.idfsSection = s.idfsSection and sdo.idfsFormTemplate = @idfsFormTemplate and sdo.idfsLanguage = @langid_int and sdo.intRowStatus = 0
		 INNER JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000066) pn
						   ON pn.idfsReference = p.idfsParameter
		 INNER JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000101) sn
						   ON sn.idfsReference = s.idfsSection
		 WHERE 
			   ft.idfsFormTemplate = @idfsFormTemplate 

		 INSERT INTO @TemplateDesign (idfsSection,idfsParentSection,idfsParameter,idfsEditor,idfsParameterType,idfsParameterCaption,intSectionOrder,intParameterOrder,ParameterName,SectionName,idfsEditMode, Observations)
		 SELECT 
			   -1 AS idfsSection --????
			   ,NULL As idfsParentSection
			   ,p.idfsParameter
			   ,p.idfsEditor
			   ,p.idfsParameterType
			   ,p.idfsParameterCaption
			   ,0 AS intSectionOrder
			   ,pdo.intOrder AS intParameterOrder
			   ,pn.name AS ParameterName
			   ,'' AS SectionName
			   ,pft.idfsEditMode
			   ,@iObservations
		 FROM
			   ffFormTemplate ft
		 INNER JOIN ffParameterForTemplate pft 
			   ON pft.idfsFormTemplate = ft.idfsFormTemplate and pft.intRowStatus = 0
		 INNER JOIN ffParameter p ON p.idfsParameter = pft.idfsParameter and p.intRowStatus = 0
		 INNER JOIN ffParameterDesignOption pdo ON pdo.idfsParameter = p.idfsParameter and pdo.idfsFormTemplate = @idfsFormTemplate and pdo.idfsLanguage = @langid_int and pdo.intRowStatus = 0
		 INNER JOIN dbo.FN_GBL_ReferenceRepair(@langid, 19000066) pn
						   ON pn.idfsReference = p.idfsParameter
		 WHERE 
			   ft.idfsFormTemplate = @idfsFormTemplate and 
			   p.idfsSection IS NULL
		
		SELECT
			idfsParentSection,
			idfsSection,
			SectionName,
			intSectionOrder,
			idfsParameter,
			ParameterName,
			intParameterOrder,
			idfsEditor,
			idfsParameterType,
			idfsParameterCaption,
			idfsEditMode,
			Observations
		FROM
			@TemplateDesign
		WHERE
			idfsParameter IS NOT NULL
		ORDER BY
			intSectionOrder,
			intParameterOrder

		COMMIT TRANSACTION;
	END TRY

	BEGIN CATCH
		IF @@TRANCOUNT > 0
			ROLLBACK TRANSACTION;

		THROW;
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_REF_DIAGNOSISREFERENCE_SET]...';


GO
-- ================================================================================================
-- Name: USP_REF_DIAGNOSISREFERENCE_SET_MCW
--
-- Description:	Check to see if a diagnosis currently exists by name
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Ricky Moss		10/28/2018 Initial release.
-- Ricky Moss		02/10/2019 Checks to see when updating a case classification that the name 
--							   does not exists in another reference and updates English value
-- Ricky Moss		03/13/2020 Refactor to check duplicates and resolution for Bug 6254
-- Ricky Moss		03/17/2020 Refactor to check duplicates and resolution for Bug 6254
-- Ricky Moss		03/19/2020 Resolved does and resolution for Bug 6254
-- Ricky Moss		03/20/2020 Refactored stored procedure to make no changes if disease currently 
--							   exists
-- Ricky Moss		06/05/2020 Reactivation of inactive record if a disease is being created with 
--							   an existing name
-- Ricky Moss		06/11/2020 Added Using Types to check for duplicates
-- Doug Albanese	04/12/2021 Refactored to use two branches and incorporate 
--							   USSP_GBL_Basereference_Set
-- Doug Albanese	04/14/2021 Corrected a Begin/Commit Transaction block problem.
-- Doug Albanese	04/14/2021 Added Penside Tests, Lab Tests, and Sample Type save routines
-- Stephen Long     05/30/2021 Added default permissions for new disease; business rule described 
--							   in use case SAUC62.
-- Doug Albanese	08/02/2021 Added duplication detection
-- Doug Albanese	08/03/2021 Modified duplication detection to handle the existence of 
--                             previously deleted items
-- Mark Wilson		08/03/2021 Modified to call USP_GBL_BaseReference_SET and to include Using 
--                             Type in duplicate checks
-- Doug Albanese	10/25/2021 Changes discussed with Mark Wilson to eliminate a duplication issue 
--                             found on a join
-- Stephen Long     07/18/2022 Added site alert logic.
-- Leo Tracchia		02/20/2023 Added data audit logic for inserts and updates	
-- Leo Tracchia		03/14/2023 Added additional logic for data audit on strDefault, strName, intHACode, and blnSyndrome
-- Leo Tracchia		04/12/2023 Added additional parameters for data audit on the call to [USSP_DISEASETOLABTEST_SET] 
--
-- exec USP_REF_DIAGNOSISREFERENCE_SET null, 'Blackerleg', 'Darkbrownleg', null, null, 2, 10020002, null, null, null, 0, 0, 'en-US', 0
-- exec USP_REF_DIAGNOSISREFERENCE_SET 58218970000129, 'Canine Distemper 4', 'Canine Distemper 4', 'CD09.5', null, 32, 10020002, null, '58218970000050', '9844470000000,9844480000000,9844490000000,58218970000051', 0, 0, 'en-US', 0
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_REF_DIAGNOSISREFERENCE_SET]
(
    @idfsDiagnosis BIGINT = NULL,
    @strDefault VARCHAR(200),
    @strName NVARCHAR(200),
    @strOIECode NVARCHAR(200),
    @strIDC10 NVARCHAR(200),
    @intHACode INT,
    @idfsUsingType BIGINT,
    @strPensideTest NVARCHAR(MAX),
    @strLabTest NVARCHAR(MAX),
    @strSampleType NVARCHAR(MAX),
    @blnZoonotic BIT = 0,
    @blnSyndrome BIT = 0,
    @LangId NVARCHAR(50),
    @intOrder INT,
    @EventTypeId BIGINT,
    @SiteId BIGINT,
    @UserId BIGINT,
    @LocationId BIGINT,
    @AuditUserName NVARCHAR(200)
)
AS
BEGIN
    DECLARE @ReturnCode INT
        = 0,
            @ReturnMessage NVARCHAR(max) = 'SUCCESS',
            @existingDefault BIGINT,
            @existingName BIGINT,
            @idfTestForDisease BIGINT,
            @idfsTestName BIGINT,
            @idfPensideTestForDisease BIGINT,
            @idfsPensideTestName BIGINT,
            @idfMaterialForDisease BIGINT,
            @idfsSampleType BIGINT,
            @DuplicateDefault INT = 0, -- updated to capture 0 or 1. 1 indicates a duplicate and will not execute the set.
            @bNewRecord BIT = 0;
    DECLARE @tempPensideTestToDisease TABLE (idfsPensideTestName BIGINT);
    DECLARE @tempTestToDisease TABLE (idfsTestName BIGINT);
    DECLARE @tempSampleTypeToDisease TABLE (idfsSampleType BIGINT);

    DECLARE @SuppressSelect TABLE
    (
        ReturnCode INT,
        ReturnMessage NVARCHAR(MAX)
    );

	--Data Audit--

		--DECLARE @idfUserId BIGINT = NULL;
		--DECLARE @idfSiteId BIGINT = NULL;
		DECLARE @idfsDataAuditEventType bigint = NULL;
		DECLARE @idfsObjectType bigint = 10017018; 
		DECLARE @idfObject bigint = @idfsDiagnosis;
		DECLARE @idfObjectTable_trtDiagnosis bigint = 75840000000;		
		DECLARE @idfDataAuditEvent bigint = NULL;		

		DECLARE @trtDiagnosis_BeforeEdit TABLE
		(
			strDefault nvarchar(2000),
			strName nvarchar(2000),
			intHACode int,
			idfsDiagnosis bigint,
			idfsUsingType bigint,
            strIDC10 nvarchar(200),
            strOIECode nvarchar(200),
            blnZoonotic bit,
            blnSyndrome bit,
            AuditUpdateDTM datetime,
            AuditUpdateUser nvarchar(200)            
		)

		DECLARE @trtDiagnosis_AfterEdit TABLE
		(
			strDefault nvarchar(2000),
			strName nvarchar(2000),
			intHACode int,
			idfsDiagnosis bigint,
			idfsUsingType bigint,
            strIDC10 nvarchar(200),
            strOIECode nvarchar(200),
            blnZoonotic bit,
            blnSyndrome bit,
            AuditUpdateDTM datetime,
            AuditUpdateUser nvarchar(200)            
		)

		-- Get and Set UserId and SiteId
		--SELECT @idfUserId = userInfo.UserId, @idfSiteId = UserInfo.SiteId FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo

	--Data Audit--

    BEGIN TRY
        BEGIN TRANSACTION;

        IF @idfsDiagnosis IS NULL
			BEGIN -- this is an insert.  check if the strDefault is a duplicate -- MCW added check for Using type
				IF EXISTS
				(
					SELECT R.*
					FROM dbo.trtBaseReference R
						INNER JOIN dbo.trtDiagnosis D
							ON D.idfsDiagnosis = R.idfsBaseReference
							   AND D.idfsUsingType = @idfsUsingType
					WHERE R.strDefault = @strDefault
						  AND R.idfsReferenceType = 19000019
						  AND R.intRowStatus = 0
				)
				BEGIN
					SET @DuplicateDefault = 1;
				END
			END
        ELSE
			BEGIN -- this is an update.  check if the strDefault is a duplicate
				IF EXISTS
				(
					SELECT R.idfsBaseReference,
						   D.idfsUsingType
					FROM dbo.trtBaseReference R
						INNER JOIN dbo.trtDiagnosis D
							ON D.idfsDiagnosis = R.idfsBaseReference
							   AND D.intRowStatus = 0
							   AND D.idfsUsingType = @idfsUsingType
					WHERE R.strDefault = @strDefault
						  AND R.idfsReferenceType = 19000019
						  AND R.intRowStatus = 0
						  AND R.idfsBaseReference <> @idfsDiagnosis
				)
				BEGIN
					SET @DuplicateDefault = 1;
				END
			END

        IF @DuplicateDefault = 1 -- No need to go any further, as the strDefault is a duplicate
			BEGIN
				SET @ReturnMessage = 'DOES EXIST';
				SET @idfsDiagnosis = NULL;
			END
        ELSE -- there is no duplicate, so continue
        BEGIN            

            IF EXISTS
            (
                SELECT *
                FROM dbo.trtDiagnosis
                WHERE idfsDiagnosis = @idfsDiagnosis
            )
            BEGIN
				--DataAudit-- 
				
					--  tauDataAuditEvent  Event Type - Edit 
					set @idfsDataAuditEventType = 10016003;
			
					-- insert record into tauDataAuditEvent - 
					INSERT INTO @SuppressSelect
					EXEC USSP_GBL_DataAuditEvent_GET @UserId, @SiteId, @idfsDataAuditEventType, @idfsObjectType, @idfObject, @idfObjectTable_trtDiagnosis, @idfDataAuditEvent OUTPUT

				--DataAudit-- 

				INSERT INTO @trtDiagnosis_BeforeEdit (
					strDefault,
					strName,
					intHACode,
					idfsDiagnosis,
					idfsUsingType, 
					strIDC10, 
					strOIECode, 
					blnZoonotic, 
					blnSyndrome)
				SELECT 
					bf.strDefault,
					nt.strTextString,
					bf.intHACode,
					d.idfsDiagnosis,
					d.idfsUsingType, 
					d.strIDC10, 
					d.strOIECode, 
					d.blnZoonotic, 
					d.blnSyndrome									
					FROM trtDiagnosis d
					LEFT JOIN trtBaseReference bf on d.idfsDiagnosis = bf.idfsBaseReference
					LEFT JOIN trtStringNameTranslation nt on d.idfsDiagnosis = nt.idfsBaseReference
					WHERE idfsDiagnosis = @idfsDiagnosis;

				EXEC dbo.USP_GBL_BaseReference_SET @ReferenceID = @idfsDiagnosis OUTPUT,
					@ReferenceType = 19000019,
					@LangID = @LangID,
					@DefaultName = @strDefault,
					@NationalName = @strName,
					@HACode = @intHACode,
					@Order = @intOrder,
					@System = 0,
					@User = @AuditUserName;

                UPDATE dbo.trtDiagnosis
                SET idfsUsingType = @idfsUsingType,
                    strIDC10 = @strIDC10,
                    strOIECode = @strOIECode,
                    blnZoonotic = ISNULL(@blnZoonotic, 0),
                    blnSyndrome = ISNULL(@blnSyndrome, 0),
                    AuditUpdateDTM = GETDATE(),
                    AuditUpdateUser = @AuditUserName
                WHERE idfsDiagnosis = @idfsDiagnosis;

				INSERT INTO @trtDiagnosis_AfterEdit (
					strDefault,
					strName,
					intHACode,
					idfsDiagnosis,
					idfsUsingType, 
					strIDC10, 
					strOIECode, 
					blnZoonotic, 
					blnSyndrome)
				SELECT 
					bf.strDefault,
					nt.strTextString,
					bf.intHACode,
					d.idfsDiagnosis,
					d.idfsUsingType, 
					d.strIDC10, 
					d.strOIECode, 
					d.blnZoonotic, 
					d.blnSyndrome									
					FROM trtDiagnosis d
					LEFT JOIN trtBaseReference bf on d.idfsDiagnosis = bf.idfsBaseReference
					LEFT JOIN trtStringNameTranslation nt on d.idfsDiagnosis = nt.idfsBaseReference
					WHERE idfsDiagnosis = @idfsDiagnosis;

				--strDefault
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_trtDiagnosis, 
					81120000000,
					a.idfsDiagnosis,
					null,
					a.strDefault,
					b.strDefault 
				from @trtDiagnosis_BeforeEdit a  inner join @trtDiagnosis_AfterEdit b on a.idfsDiagnosis = b.idfsDiagnosis
				where (a.strDefault <> b.strDefault) 
					or(a.strDefault is not null and b.strDefault is null)
					or(a.strDefault is null and b.strDefault is not null)
				
				--strName (strTextString, aka "National Value" aka "Translated Value")
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_trtDiagnosis, 
					81390000000,
					a.idfsDiagnosis,
					null,
					a.strName,
					b.strName 
				from @trtDiagnosis_BeforeEdit a  inner join @trtDiagnosis_AfterEdit b on a.idfsDiagnosis = b.idfsDiagnosis
				where (a.strName <> b.strName) 
					or(a.strName is not null and b.strName is null)
					or(a.strName is null and b.strName is not null)

				--intHACode "Accessory Code"
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_trtDiagnosis, 
					81090000000,
					a.idfsDiagnosis,
					null,
					a.intHACode,
					b.intHACode 
				from @trtDiagnosis_BeforeEdit a  inner join @trtDiagnosis_AfterEdit b on a.idfsDiagnosis = b.idfsDiagnosis
				where (a.intHACode <> b.intHACode) 
					or(a.intHACode is not null and b.intHACode is null)
					or(a.intHACode is null and b.intHACode is not null)

				--idfsUsingType
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_trtDiagnosis, 
					4578050000000,
					a.idfsDiagnosis,
					null,
					a.idfsUsingType,
					b.idfsUsingType 
				from @trtDiagnosis_BeforeEdit a  inner join @trtDiagnosis_AfterEdit b on a.idfsDiagnosis = b.idfsDiagnosis
				where (a.idfsUsingType <> b.idfsUsingType) 
					or(a.idfsUsingType is not null and b.idfsUsingType is null)
					or(a.idfsUsingType is null and b.idfsUsingType is not null)

				--strIDC10
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_trtDiagnosis, 
					81160000000,
					a.idfsDiagnosis,
					null,
					a.strIDC10,
					b.strIDC10 
				from @trtDiagnosis_BeforeEdit a  inner join @trtDiagnosis_AfterEdit b on a.idfsDiagnosis = b.idfsDiagnosis
				where (a.strIDC10 <> b.strIDC10) 
					or(a.strIDC10 is not null and b.strIDC10 is null)
					or(a.strIDC10 is null and b.strIDC10 is not null)

				--strOIECode
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_trtDiagnosis, 
					81170000000,
					a.idfsDiagnosis,
					null,
					a.strOIECode,
					b.strOIECode 
				from @trtDiagnosis_BeforeEdit a  inner join @trtDiagnosis_AfterEdit b on a.idfsDiagnosis = b.idfsDiagnosis
				where (a.strOIECode <> b.strOIECode) 
					or(a.strOIECode is not null and b.strOIECode is null)
					or(a.strOIECode is null and b.strOIECode is not null)
					
				--blnZoonotic
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_trtDiagnosis, 
					51389460000000,					
					a.idfsDiagnosis,
					null,
					a.blnZoonotic,
					b.blnZoonotic 
				from @trtDiagnosis_BeforeEdit a  inner join @trtDiagnosis_AfterEdit b on a.idfsDiagnosis = b.idfsDiagnosis
				where (a.blnZoonotic <> b.blnZoonotic) 
					or(a.blnZoonotic is not null and b.blnZoonotic is null)
					or(a.blnZoonotic is null and b.blnZoonotic is not null)

				--blnSyndrome
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_trtDiagnosis, 
					51586990000118,
					a.idfsDiagnosis,
					null,
					a.blnSyndrome,
					b.blnSyndrome 
				from @trtDiagnosis_BeforeEdit a  inner join @trtDiagnosis_AfterEdit b on a.idfsDiagnosis = b.idfsDiagnosis
				where (a.blnSyndrome <> b.blnSyndrome) 
					or(a.blnSyndrome is not null and b.blnSyndrome is null)
					or(a.blnSyndrome is null and b.blnSyndrome is not null)

                INSERT INTO @SuppressSelect
                EXECUTE dbo.USP_ADMIN_EVENT_SET-1,
                                               @EventTypeId,
                                               @UserId,
                                               @idfsDiagnosis,
                                               NULL,
                                               @SiteId,
                                               NULL,
                                               @SiteId,
                                               @LocationId,
                                               @AuditUserName;
            END
            ELSE
            BEGIN

				EXEC dbo.USP_GBL_BaseReference_SET @ReferenceID = @idfsDiagnosis OUTPUT,
					@ReferenceType = 19000019,
					@LangID = @LangID,
					@DefaultName = @strDefault,
					@NationalName = @strName,
					@HACode = @intHACode,
					@Order = @intOrder,
					@System = 0,
					@User = @AuditUserName;

				--Data Audit--

					-- tauDataAuditEvent Event Type - Create 
					set @idfsDataAuditEventType = 10016001;
			
					-- insert record into tauDataAuditEvent - 
					INSERT INTO @SuppressSelect
					EXEC USSP_GBL_DataAuditEvent_GET @UserId, @SiteId, @idfsDataAuditEventType, @idfsObjectType, @idfsDiagnosis, @idfObjectTable_trtDiagnosis, @idfDataAuditEvent OUTPUT

				--Data Audit--

                INSERT INTO dbo.trtDiagnosis
                (
                    idfsDiagnosis,
                    idfsUsingType,
                    strIDC10,
                    strOIECode,
                    intRowStatus,
                    rowguid,
                    blnZoonotic,
                    strMaintenanceFlag,
                    strReservedAttribute,
                    blnSyndrome,
                    SourceSystemNameID,
                    SourceSystemKeyValue,
                    AuditCreateUser,
                    AuditCreateDTM
                )
                VALUES(
					@idfsDiagnosis,
					@idfsUsingType,
					@strIDC10,
					@strOIECode,
					0  ,
					NEWID(),
					ISNULL(@blnZoonotic, 0),
					'ADD',
					'EIDSS7 Disease',
					ISNULL(@blnSyndrome, 0),
					10519001,
					N'[{"idfsDiagnosis":' + CAST(@idfsDiagnosis AS NVARCHAR(300)) + '}]',
					@AuditUserName,
					GETDATE()
				);

				--Data Audit--							

					INSERT INTO tauDataAuditDetailCreate(idfDataAuditEvent, idfObjectTable, idfObject)
					VALUES (@idfDataAuditEvent, @idfObjectTable_trtDiagnosis, @idfsDiagnosis)
			
				--Data Audit--

                -- Add read permission allow to the default employee group.
                DECLARE @ObjectAccessID BIGINT;
                EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tstObjectAccess',
                                                  @ObjectAccessID OUTPUT;

                INSERT INTO dbo.tstObjectAccess
                (
                    idfObjectAccess,
                    idfsObjectOperation,
                    idfsObjectType,
                    idfsObjectID,
                    idfActor,
                    idfsOnSite,
                    intPermission,
                    intRowStatus,
                    SourceSystemNameID,
                    SourceSystemKeyValue
                )
                VALUES
                (   @ObjectAccessID,
                    10059003, -- Read permission
                    10060001, -- Disease record
                    @idfsDiagnosis,
                    -506,     -- Default employee group
                    1,        -- First level site
                    2,        -- Allow permission
                    0,
                    10519001,
                    N'[{"idfObjectAccess":' + CAST(@ObjectAccessID AS NVARCHAR(300)) + '}]'
                );

                INSERT INTO @SuppressSelect
                EXECUTE dbo.USP_ADMIN_EVENT_SET-1,
                                               @EventTypeId,
                                               @UserId,
                                               @idfsDiagnosis,
                                               NULL,
                                               @SiteId,
                                               NULL,
                                               @SiteId,
                                               @LocationId,
                                               @AuditUserName;
            END

            --Common actions
             EXEC dbo.USSP_DISEASETOLABTEST_SET @idfsDiagnosis, @strLabTest, @SiteId, @UserId, @idfDataAuditEvent;

            EXEC dbo.USSP_DISEASETOPENSIDETEST_SET @idfsDiagnosis, @strPensideTest, @SiteId, @UserId, @idfDataAuditEvent;

            EXEC dbo.USSP_DISEASETOSAMPLETYPE_SET @idfsDiagnosis, @strSampleType, @SiteId, @UserId, @idfDataAuditEvent;
        END
        COMMIT TRANSACTION;

        SELECT @ReturnMessage AS 'ReturnMessage',
               @ReturnCode AS 'ReturnCode',
               @idfsDiagnosis AS 'idfsDiagnosis';
    END TRY
    BEGIN CATCH
        --Rollback the transaction
        IF @@TRANCOUNT > 0
        BEGIN
            ROLLBACK
        END;

        THROW;
    END CATCH
END
GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_EMPLOYEEGROUP_SET_TEMP]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_EMPLOYEEGROUP_SET_TEMP]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_Veterinary_Aggregate_Disease_Summary_Report_Detail]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_Veterinary_Aggregate_Disease_Summary_Report_Detail]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_Human_Aggregate_Disease_Summary_Report_Detail]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_Human_Aggregate_Disease_Summary_Report_Detail]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_DEDUPLICATION_PERSON_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_DEDUPLICATION_PERSON_SET]';


GO
PRINT N'Update complete.';


GO
