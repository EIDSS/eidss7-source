/*
Deployment script for EIDSS7_GG

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
USE [EIDSS7_GG];


GO

PRINT N'Creating Table [dbo].[tauPINAuditEvent]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE TABLE [dbo].[tauPINAuditEvent] (
    [idfPINAuditEvent]      BIGINT     NOT NULL,
    [strPIN]                NCHAR (11) NOT NULL,
    [idfUserID]             BIGINT     NOT NULL,
    [idfsSite]              BIGINT     NOT NULL,
    [idfHumanCase]          BIGINT     NULL,
    [idfH0Form]             BIGINT     NULL,
    [datEIDSSAccessAttempt] DATETIME   NOT NULL,
    [datPINAccessAttempt]   DATETIME   NOT NULL,
    CONSTRAINT [PK_tauPINAuditEvent] PRIMARY KEY CLUSTERED ([idfPINAuditEvent] ASC) ON [PRIMARY]
) ON [PRIMARY];


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tauPINAuditEvent_tstUserTable]...';


GO
ALTER TABLE [dbo].[tauPINAuditEvent] WITH NOCHECK
    ADD CONSTRAINT [FK_tauPINAuditEvent_tstUserTable] FOREIGN KEY ([idfUserID]) REFERENCES [dbo].[tstUserTable] ([idfUserID]);


GO
PRINT N'Altering Function [dbo].[FN_REF_LABTESTNAMETODISEASE_GET]...';


GO
-- ====================================================================================================
-- Name: FN_REF_LABTESTTODISEASE_GET
-- Description:	Returns a comma separated string of lab test name associated with a disease
--							
-- Author: Ricky Moss
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -----------------------------------------------
-- Ricky Moss		01/30/2019  Initial Release
-- Ricky Moss		02/08/2019	Included active clause
-- Ann Xiong		11/07/2022	Replaced comma in lab test name with semicolon to properly disply Lab Tests in the Disease Editor when in Edit mode
--
-- Test Code:
-- SELECT dbo.FN_REF_LABTESTNAMETODISEASE_GET('en',55540680000288) 
-- ===================================================================================================

ALTER FUNCTION [dbo].[FN_REF_LABTESTNAMETODISEASE_GET]
(
	@LangID NVARCHAR(50),
	@idfsDiagnosis BIGINT
)
RETURNS NVARCHAR(4000)
AS
BEGIN
DECLARE @CSV NVARCHAR(4000) = '';

	IF @idfsDiagnosis IS NULL RETURN NULL;
	
	IF @idfsDiagnosis <> 0
	BEGIN
		WITH results ([strTestName]) AS
		(
			SELECT REPLACE(tbr.name, ',', ';') FROM trtTestForDisease td
			JOIN dbo.FN_GBL_Reference_List_GET(@LangID, 19000097) tbr ON td.idfsTestName = tbr.idfsReference 
			WHERE td.idfsDiagnosis = @idfsDiagnosis AND td.intRowStatus = 0
		)
		SELECT @CSV = STRING_AGG([strTestName], ', ')
		FROM results;
	END

	-- Return the result of the function
	RETURN @CSV;

END
GO
PRINT N'Altering Function [dbo].[FN_GBL_Institution_Min]...';


GO





--*************************************************************
-- Name 				: [FN_GBL_Institution]
-- Description			: The FUNCTION returns all the Institution details 
--          
-- Author               : Mandar Kulkarni
-- Revision History
--		Name       Date       Change Detail
--JWJ	20180611	added OrganizationTypeID
--RYM	20190619	added OwnershipForm, LegalForm, and MainFormofActivity 
--RYM   20190913	added auditcreatedate field
-- SHL  20220210    Added site ID.
-- MCW  20221108    Added strOrganizationID.
-- Testing code:
--SELECT * FROM [dbo].[FN_GBL_Institution_Min]('en')
--*************************************************************
ALTER FUNCTION [dbo].[FN_GBL_Institution_Min]
(
 @LangID  NVARCHAR(50)
)
RETURNS TABLE
AS
	RETURN( 

			SELECT			Office.idfOffice, 
							Org.[name] AS EnglishFullName,
							Org.strDefault AS EnglishName,
							Orgab.[name] AS AbbreviatedName,
							OrgAb.strDefault AS AbbreviatedEnglishName,
							Office.idfsOfficeName,
							Office.idfsOfficeAbbreviation,
							Office.idfsSite,
---------------------------- added strOrganizationID
							Office.strOrganizationID
			FROM			dbo.tlbOffice Office
			LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000046) Org ON Org.idfsReference = Office.idfsOfficeName AND Org.intRowStatus = 0
			LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000045) OrgAb ON OrgAb.idfsReference = Office.idfsOfficeAbbreviation AND Orgab.intRowStatus = 0

		)
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_ADMINLEVEL_GETLIST]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_ADMINLEVEL_GETLIST
--
-- Description: Get the list of admin level units based on search criteria entered.
--          
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Mandar Kulkarni   11292021          Initial release.
-- Manickandan Govindarajan 03/16/2022   Fixed Rayan  National name and Default Name          
-- Manickandan Govindarajan 10/27/2022  Added strSettlementHASC as retrun type         
-- Manickandan Govindarajan 11/09/2022  Added strCode paramter and pulling hascode and strcode for all the levels.
-- Testing Code:
/*

EXEC	[dbo].[USP_ADMIN_ADMINLEVEL_GETLIST]
N'en-US',10003005,NULL,NULL,NULL,NULL,N'BAKU',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,1,10,NULL,NULL

*/
-- ================================================================================================
ALTER       PROCEDURE [dbo].[USP_ADMIN_ADMINLEVEL_GETLIST] 
(
	@LangId NVARCHAR(20),
	@idfsAdminLevel BIGINT,
	@idfsCountry BIGINT,
	@idfsRegion BIGINT,
	@idfsRayon BIGINT,
	@idfsSettlement BIGINT,
	@strDefaultName NVARCHAR(100),
	@strNationalName NVARCHAR(100),
	@idfsSettlementType BIGINT,
	@LatFrom FLOAT,
	@LatTo FLOAT,
	@LongFrom FLOAT,
	@LongTo FLOAT,
	@ElevationFrom FLOAT,
	@ElevationTo FLOAT,
	@pageNo INT = 1,
	@pageSize INT = 10, 
	@sortColumn NVARCHAR(30) = '', 
	@sortOrder NVARCHAR(4) = 'asc',
	@strHASC NVARCHAR(6) = NULL,
	@strCode NVARCHAR(200) = NULL

)
AS
BEGIN

	BEGIN TRY
		DECLARE @firstRec INT, @lastRec INT,@idfsLangId BIGINT 
		
		SELECT @idfsLangId = idfsBaseReference 
		FROM dbo.trtBaseReference a 
		WHERE a.strBaseReferenceCode = @LangId 
		AND a.idfsReferenceType = 19000049

		DECLARE @Results TABLE
		( 
			idfKey BIGINT PRIMARY KEY IDENTITY(1,1),
			idfsAdministrativeLevel BIGINT,
			idfsCountry BIGINT,
			strCountryHASC NVARCHAR(255),
			strCountryCode NVARCHAR(255),
			strDefaultCountryName NVARCHAR(200),
			strNationalCountryName NVARCHAR(200),
			idfsRegion BIGINT,
			strRegionHASC NVARCHAR(255),
			strRegionCode NVARCHAR(255),
			strDefaultRegionName NVARCHAR(200),
			strNationalRegionName NVARCHAR(200),
			idfsRayon BIGINT,
			strRayonHASC NVARCHAR(255),
			strRayonCode NVARCHAR(255),
			strDefaultRayonName NVARCHAR(200),
			strNationalRayonName NVARCHAR(200),
			idfsSettlement NVARCHAR(200),
			strSettlementHASC NVARCHAR(255),
			strSettlementCode NVARCHAR(255),
			strDefaultSettlementName NVARCHAR(200),
			strNationalSettlementName NVARCHAR(200),
			idfsSettlementType BIGINT,
			strSettlementTypeDefaultName NVARCHAR(200),
			strSettlementTypeNationalName NVARCHAR(200),
			Latitude FLOAT,
			Longitude FLOAT,
			Elevation FLOAT
		)
		IF @idfsAdminLevel = 10003001
			BEGIN
				SET @idfsRegion = NULL
				SET @idfsRayon = NULL
				SET @idfsSettlement = NULL
			END

		IF @idfsAdminLevel = 10003003
			BEGIN
				SET @idfsRayon = NULL
				SET @idfsSettlement = NULL
			END

		IF @idfsAdminLevel = 10003002
			BEGIN
				SET @idfsSettlement = NULL
			END

		-- Populate country names if Administrative Level is for the country
		IF (@idfsAdminLevel = 10003001 OR @idfsCountry IS NOT NULL OR @idfsAdminLevel IS NULL)
		AND (@idfsAdminLevel = 10003001  AND @idfsRegion IS NULL AND @idfsRayon IS NULL AND @idfsSettlement IS NULL)
			BEGIN
				INSERT INTO @Results
				(
					idfsAdministrativeLevel,
					idfsCountry,
					strCountryHASC,
					strCountryCode,
					strNationalCountryName,
					strDefaultCountryName
				)
				SELECT @idfsAdminLevel, 
						a.idfsCountry,
						a.strHASC,
						a.strCode,
						c.strTextString,
						b.strDefault
				FROM dbo.gisCountry a
				INNER JOIN dbo.gisBaseReference b ON a.idfsCountry = b.idfsGISBaseReference AND b.intRowStatus = 0 
				INNER JOIN dbo.gisStringNameTranslation c ON b.idfsGISBaseReference = c.idfsGISBaseReference AND b.intRowStatus = 0  AND c.idfsLanguage = @idfsLangId
				WHERE ((@strDefaultName IS NOT NULL AND b.strDefault LIKE '%' + @strDefaultName  + '%')
					OR @strDefaultName IS NULL)
				AND ((@strNationalName IS NOT NULL AND c.strTextString LIKE '%' + @strNationalName + '%')
					OR @strNationalName IS NULL)
				AND (a.idfsCountry = @idfsCountry OR @idfsCountry IS NULL)
				AND (a.strHASC = @strHASC OR @strHASC IS NULL)
				AND (a.strCode = @strCode OR @strCode IS NULL)

			END

		-- Populate region names if Administrative Level is for the region
		IF (@idfsAdminLevel = 10003003 OR @idfsRegion IS NOT NULL OR @idfsAdminLevel IS NULL)
		AND (@idfsAdminLevel = 10003003 AND @idfsRayon IS NULL AND @idfsSettlement IS NULL)
			BEGIN
				INSERT INTO @Results
				(
					idfsAdministrativeLevel,
					idfsCountry,
					strCountryHASC,
					strCountryCode,
					strNationalCountryName,
					strDefaultCountryName,
					idfsRegion,
					strRegionHASC,
					strRegionCode,
					strNationalRegionName,
					strDefaultRegionName,
					Longitude,
					Latitude,
					Elevation
				)
				SELECT	@idfsAdminLevel, 
						a.idfsCountry,
						f.strHASC,
						f.strCode,
						e.strTextString,
						d.strDefault,
						a.idfsRegion,
						a.strHASC,
						a.strCode,
						c.strTextString,
						b.strDefault,
						a.dbllongitude,
						a.dbllatitude,
						a.intelevation
				FROM dbo.gisRegion a
				INNER JOIN dbo.gisBaseReference b ON a.idfsRegion = b.idfsGISBaseReference AND b.intRowStatus =0
				INNER JOIN dbo.gisStringNameTranslation c ON b.idfsGISBaseReference = c.idfsGISBaseReference AND c.intRowStatus = 0 AND c.idfsLanguage = @idfsLangId
				INNER JOIN dbo.gisBaseReference d ON a.idfsCountry = d.idfsGISBaseReference AND d.intRowStatus = 0
				INNER JOIN dbo.gisStringNameTranslation e ON d.idfsGISBaseReference = e.idfsGISBaseReference AND e.intRowStatus = 0 AND e.idfsLanguage = @idfsLangId
				INNER JOIN dbo.gisCountry f ON a.idfsCountry = f.idfsCountry AND f.intRowStatus =0
				WHERE ((@strDefaultName IS NOT NULL AND b.strDefault LIKE '%' + @strDefaultName  + '%')
					OR @strDefaultName IS NULL)
				AND ((@strNationalName IS NOT NULL AND c.strTextString LIKE '%' + @strNationalName + '%')
					OR @strNationalName IS NULL)
				AND ((a.dblLatitude BETWEEN @LatFrom AND @LatTo) OR (@LatFrom IS NULL AND @LatTo IS NULL))
				AND ((a.dblLongitude BETWEEN @LongFrom AND @LongTo) OR (@LongFrom IS NULL AND @LongTo IS NULL))
				AND ((a.intElevation BETWEEN @ElevationFrom AND @ElevationTo) OR (@ElevationFrom IS NULL AND @ElevationTo IS NULL))
				AND (a.idfsRegion = @idfsRegion OR @idfsRegion IS NULL)
				AND (a.idfsCountry = @idfsCountry OR @idfsCountry IS NULL)
				AND (a.strHASC = @strHASC OR @strHASC IS NULL)
				AND (a.strCode = @strCode OR @strCode IS NULL)

			END

		-- Populate Rayon names if Administrative Level is for the rayon
		IF (@idfsAdminLevel = 10003002 OR @idfsRayon IS NOT NULL OR @idfsAdminLevel IS NULL)
		AND (@idfsAdminLevel = 10003002  AND @idfsSettlement IS NULL)
			BEGIN
				INSERT INTO @Results
				(
					idfsAdministrativeLevel,
					idfsCountry,
					strCountryHASC,
					strCountryCode,
					strNationalCountryName,
					strDefaultCountryName,
					idfsRegion,
					strRegionHASC,
					strRegionCode,
					strNationalRegionName,
					strDefaultRegionName,
					idfsRayon,
					strRayonHASC,
					strRayonCode,
					strNationalRayonName,
					strDefaultRayonName,
					Latitude,
					Longitude,
					Elevation
				)
				SELECT	@idfsAdminLevel, 
						a.idfsCountry,
						i.strHASC,
						i.strCode,
						e.strTextString,
						d.strDefault,
						a.idfsRegion,
						h.strHASC,
						h.strCode,
						g.strTextString,
						f.strDefault,
						a.idfsRayon,
						a.strHASC,
						a.strCode,
						c.strTextString,
						b.strDefault,
						a.dblLatitude,
						a.dblLongitude,
						a.intElevation
				FROM dbo.gisRayon a
				INNER JOIN dbo.gisBaseReference b ON a.idfsRayon = b.idfsGISBaseReference AND b.intRowStatus =0
				LEFT JOIN dbo.gisStringNameTranslation c ON b.idfsGISBaseReference = c.idfsGISBaseReference AND c.intRowStatus = 0 AND c.idfsLanguage = @idfsLangId
				INNER JOIN dbo.gisBaseReference d ON a.idfsCountry = d.idfsGISBaseReference AND d.intRowStatus = 0
				LEFT JOIN dbo.gisStringNameTranslation e ON d.idfsGISBaseReference = e.idfsGISBaseReference AND e.intRowStatus = 0 AND e.idfsLanguage = @idfsLangId
				INNER JOIN dbo.gisBaseReference f ON a.idfsRegion = f.idfsGISBaseReference AND f.intRowStatus = 0
				LEFT JOIN dbo.gisStringNameTranslation g ON f.idfsGISBaseReference = g.idfsGISBaseReference AND g.intRowStatus = 0 AND g.idfsLanguage = @idfsLangId
				INNER JOIN dbo.gisRegion h ON a.idfsRegion = h.idfsRegion AND h.intRowStatus = 0
				INNER JOIN dbo.gisCountry i ON a.idfsCountry = i.idfsCountry AND i.intRowStatus = 0
				WHERE ((@strDefaultName IS NOT NULL AND b.strDefault LIKE '%' + @strDefaultName  + '%') 
					OR @strDefaultName IS NULL)
				AND ((@strNationalName IS NOT NULL AND c.strTextString LIKE '%' + @strNationalName + '%')
					OR @strNationalName IS NULL)
				AND ((a.dblLatitude BETWEEN @LatFrom AND @LatTo) OR (@LatFrom IS NULL AND @LatTo IS NULL))
				AND ((a.dblLongitude BETWEEN @LongFrom AND @LongTo) OR (@LongFrom IS NULL AND @LongTo IS NULL))
				AND ((a.intElevation BETWEEN @ElevationFrom AND @ElevationTo) OR (@ElevationFrom IS NULL AND @ElevationTo IS NULL))
				AND ((a.idfsRayon = @idfsRayon OR @idfsRayon IS NULL)
					AND ((@idfsRegion IS NOT NULL AND a.idfsRegion= @idfsRegion) OR @idfsRegion IS NULL)
					AND ((@idfsCountry IS NOT NULL AND a.idfsCountry = @idfsCountry) OR @idfsCountry IS NULL)
					)
						AND (a.strHASC = @strHASC OR @strHASC IS NULL)
						AND (a.strCode = @strCode OR @strCode IS NULL)

			END

		-- Populate Settlement names if Administrative Level is for the Settlement
		IF (@idfsAdminLevel = 10003004 OR @idfsSettlement IS NOT NULL OR @idfsAdminLevel IS NULL)
			BEGIN
				INSERT INTO @Results
				(
					idfsAdministrativeLevel,
					idfsCountry,
					strCountryHASC,
					strCountryCode,
					strNationalCountryName,
					strDefaultCountryName,
					idfsRegion,
					strRegionHASC,
					strRegionCode,
					strNationalRegionName,
					strDefaultRegionName,
					idfsRayon,
					strRayonHASC,
					strRayonCode,
					strNationalRayonName,
					strDefaultRayonName,
					idfsSettlement,
					strSettlementHASC,
					strSettlementCode,
					strNationalSettlementName,
					strDefaultSettlementName,
					idfsSettlementType,
					strSettlementTypeNationalName,
					strSettlementTypeDefaultName,
					Latitude,
					Longitude,
					Elevation
				)
				SELECT	@idfsAdminLevel, 
						a.idfsCountry,
						n.strHASC,
						n.strCode,
						e.strTextString,
						d.strDefault,
						a.idfsRegion,
						m.strHASC,
						m.strCode,
						g.strTextString,
						f.strDefault,
						a.idfsRayon,
						l.strHASC,
						l.strCode,
						i.strTextString,
						h.strDefault,
						a.idfsSettlement,
						b.strBaseReferenceCode,
						a.strSettlementCode,
						c.strTextString,
						b.strDefault,
						a.idfsSettlementType,
						k.strTextString,
						j.strDefault,
						a.dblLatitude,
						a.dblLongitude,
						a.intElevation
				FROM dbo.gisSettlement a
				INNER JOIN dbo.gisBaseReference b ON a.idfsSettlement = b.idfsGISBaseReference AND b.intRowStatus =0
				LEFT JOIN dbo.gisStringNameTranslation c ON b.idfsGISBaseReference = c.idfsGISBaseReference AND c.intRowStatus = 0 AND c.idfsLanguage = @idfsLangId
				INNER JOIN dbo.gisBaseReference d ON a.idfsCountry = d.idfsGISBaseReference AND d.intRowStatus = 0
				LEFT JOIN dbo.gisStringNameTranslation e ON d.idfsGISBaseReference = e.idfsGISBaseReference AND e.intRowStatus = 0 AND e.idfsLanguage = @idfsLangId
				INNER JOIN dbo.gisBaseReference f ON a.idfsRegion = f.idfsGISBaseReference AND f.intRowStatus = 0
				LEFT JOIN dbo.gisStringNameTranslation g ON d.idfsGISBaseReference = g.idfsGISBaseReference AND e.intRowStatus = 0 AND g.idfsLanguage = @idfsLangId
				INNER JOIN dbo.gisBaseReference h ON a.idfsRayon = h.idfsGISBaseReference AND h.intRowStatus = 0
				LEFT JOIN dbo.gisStringNameTranslation i ON h.idfsGISBaseReference = i.idfsGISBaseReference AND i.intRowStatus = 0 AND i.idfsLanguage = @idfsLangId
				INNER JOIN dbo.gisBaseReference j ON a.idfsSettlementType = j.idfsGISBaseReference AND j.intRowStatus = 0
				LEFT JOIN dbo.gisStringNameTranslation k ON j.idfsGISBaseReference = k.idfsGISBaseReference AND k.intRowStatus = 0 AND k.idfsLanguage = @idfsLangId
				INNER JOIN dbo.gisRayon l ON a.idfsRayon = l.idfsRayon AND l.intRowStatus = 0
				INNER JOIN dbo.gisRegion m ON a.idfsRegion = m.idfsRegion AND m.intRowStatus = 0
				INNER JOIN dbo.gisCountry n ON a.idfsCountry = n.idfsCountry AND n.intRowStatus = 0
				WHERE ((@strDefaultName IS NOT NULL AND b.strDefault LIKE '%' + @strDefaultName  + '%') 
					OR @strDefaultName IS NULL)
				AND ((@strNationalName IS NOT NULL AND c.strTextString LIKE '%' + @strNationalName + '%')
					OR @strNationalName IS NULL)
				AND (a.idfsSettlementType = @idfsSettlementType OR @idfsSettlementType IS NULL)
				AND ((a.dblLatitude BETWEEN @LatFrom AND @LatTo) OR (@LatFrom IS NULL OR @LatTo IS NULL))
				AND ((a.dblLongitude BETWEEN @LongFrom AND @LongTo) OR (@LongFrom IS NULL OR @LongTo IS NULL))
				AND ((a.intElevation BETWEEN @ElevationFrom AND @ElevationTo) OR (@ElevationFrom IS NULL OR @ElevationTo IS NULL))
				AND ((a.idfsSettlement = @idfsSettlement OR @idfsSettlement IS NULL) 
					AND ((@idfsRayon IS NOT NULL AND a.idfsRayon = @idfsRayon) OR @idfsRayon IS NULL)
					AND ((@idfsRegion IS NOT NULL AND a.idfsRegion= @idfsRegion) OR @idfsRegion IS NULL)
					AND ((@idfsCountry IS NOT NULL AND a.idfsCountry = @idfsCountry) OR @idfsCountry IS NULL)
					)
				AND (b.strBaseReferenceCode = @strHASC OR @strHASC IS NULL)
				AND (a.strSettlementCode = @strCode OR @strCode IS NULL)

			END

		SET @firstRec = (@pageNo-1)* @pagesize
		SET @lastRec = (@pageNo*@pageSize+1);
		
		WITH CTEResults AS
		(
			SELECT ROW_NUMBER() OVER ( ORDER BY 
			CASE WHEN @sortColumn = 'strNationalCountryName' AND @SortOrder = 'asc' THEN a.strNationalCountryName END ASC,
			CASE WHEN @sortColumn = 'strNationalCountryName' AND @SortOrder = 'desc' THEN a.strNationalCountryName END DESC,
			CASE WHEN @sortColumn = 'strDefaultCountryName' AND @SortOrder = 'asc' THEN a.strDefaultCountryName END ASC,	
			CASE WHEN @sortColumn = 'strDefaultCountryName' AND @SortOrder = 'desc' THEN a.strDefaultCountryName END DESC,
			CASE WHEN @sortColumn = 'strNationalRegionName' AND @SortOrder = 'asc' THEN a.strNationalRegionName END ASC,	
			CASE WHEN @sortColumn = 'strNationalRegionName' AND @SortOrder = 'desc' THEN a.strNationalRegionName END DESC,
			CASE WHEN @sortColumn = 'strDefaultRegionName' AND @SortOrder = 'asc' THEN a.strDefaultRegionName END ASC,	
			CASE WHEN @sortColumn = 'strDefaultRegionName' AND @SortOrder = 'desc' THEN a.strDefaultRegionName END DESC,
			CASE WHEN @sortColumn = 'strNationalRayonName' AND @SortOrder = 'asc' THEN a.strNationalRayonName END ASC,	
			CASE WHEN @sortColumn = 'strNationalRayonName' AND @SortOrder = 'desc' THEN a.strNationalRayonName END DESC,
			CASE WHEN @sortColumn = 'strDefaultRayonName' AND @SortOrder = 'asc' THEN a.strDefaultRayonName END ASC,	
			CASE WHEN @sortColumn = 'strDefaultRayonName' AND @SortOrder = 'desc' THEN a.strDefaultRayonName END DESC,
			CASE WHEN @sortColumn = 'strNationalSettlementName' AND @SortOrder = 'asc' THEN a.strNationalSettlementName END ASC,	
			CASE WHEN @sortColumn = 'strNationalSettlementName' AND @SortOrder = 'desc' THEN a.strNationalSettlementName END DESC,
			CASE WHEN @sortColumn = 'strDefaultSettlementName' AND @SortOrder = 'asc' THEN a.strDefaultSettlementName END ASC,	
			CASE WHEN @sortColumn = 'strDefaultSettlementName' AND @SortOrder = 'desc' THEN a.strDefaultSettlementName END DESC,
			CASE WHEN @sortColumn = 'strSettlementTypeDefaultName' AND @SortOrder = 'asc' THEN a.strSettlementTypeDefaultName END ASC,	
			CASE WHEN @sortColumn = 'strSettlementTypeDefaultName' AND @SortOrder = 'desc' THEN a.strSettlementTypeDefaultName END DESC,
			CASE WHEN @sortColumn = 'strSettlementTypeNationalName' AND @SortOrder = 'asc' THEN a.strSettlementTypeNationalName END ASC,	
			CASE WHEN @sortColumn = 'strSettlementTypeNationalName' AND @SortOrder = 'desc' THEN a.strSettlementTypeNationalName END DESC,
			CASE WHEN @sortColumn = 'Latitude' AND @SortOrder = 'asc' THEN a.Latitude END ASC,	
			CASE WHEN @sortColumn = 'Latitude' AND @SortOrder = 'desc' THEN a.Latitude END DESC,
			CASE WHEN @sortColumn = 'Longitude' AND @SortOrder = 'asc' THEN a.Longitude END ASC,	
			CASE WHEN @sortColumn = 'Longitude' AND @SortOrder = 'desc' THEN a.Longitude END DESC,
			CASE WHEN @sortColumn = 'Elevation' AND @SortOrder = 'asc' THEN a.elevation END ASC,	
			CASE WHEN @sortColumn = 'Elevation' AND @SortOrder = 'desc' THEN a.elevation END DESC
		) AS ROWNUM,
			COUNT(*) OVER () AS TotalRowCount,
			a.idfsCountry,
			a.strCountryHASC,
			a.strCountryCode,
			a.strNationalCountryName,	
			a.strDefaultCountryName,	
			a.idfsRegion,
			a.strRegionHASC,
			a.strRegionCode,
			a.strNationalRegionName,	
			a.strDefaultRegionName,	
			a.idfsRayon,
			a.strRayonHASC,
			a.strRayonCode,
			a.strNationalRayonName,	
			a.strDefaultRayonName,	
			a.idfsSettlement,
			a.strSettlementHASC,
			a.strSettlementCode,
			a.strNationalSettlementName,	
			a.strDefaultSettlementName,	
			a.idfsSettlementType,
			a.strSettlementTypeDefaultName,	
			a.strSettlementTypeNationalName,	
			a.Latitude,	
			a.Longitude,	
			a.Elevation	
		FROM @Results a
		)

		SELECT 
				TotalRowCount,
				a.idfsCountry,
				a.strCountryHASC,
				a.strCountryCode,
				a.strNationalCountryName,	
				a.strDefaultCountryName,	
				a.idfsRegion,
				a.strRegionHASC,
				a.strRegionCode,
				a.strNationalRegionName,	
				a.strDefaultRegionName,	
				a.idfsRayon,
				a.strRayonHASC,
				a.strRayonCode,
				a.strNationalRayonName,	
				a.strDefaultRayonName,	
				a.idfsSettlement,
				a.strSettlementHASC,
				a.strSettlementCode,
				a.strNationalSettlementName,	
				a.strDefaultSettlementName,	
				a.idfsSettlementType,
				a.strSettlementTypeDefaultName,	
				strSettlementTypeNationalName,	
				a.Latitude,	
				a.Longitude,	
				a.Elevation,	
				TotalPages = (TotalRowCount/@pageSize)+IIF(TotalRowCount%@pageSize>0,1,0),
				CurrentPage = @pageNo 
		FROM CTEResults A
		WHERE a.ROWNUM > @firstRec AND RowNum < @lastRec 	
	END TRY

	BEGIN CATCH
		THROW;
	END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_EMPLOYEE_GETLIST]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_EMPLOYEE_GETLIST
--
-- Description:	Get a list of employees for the various EIDSS use cases.
--
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     02/09/2019 Initial release for new API.
-- Stephen Long     06/20/2019 Fixed where clause to be and's instead of or's.
-- Stephen Long     09/29/2020 Removed employee group join.
-- Mandar Kulkarni  03/22/2022 Removed join for tstUserTable for non-user employee category
-- Ann Xiong		11/07/2022 Changed FirstOrGivenName, SecondName, LastOrSurName, ContactPhone of @t 
--								from nvarchar(100) to nvarchar(200) to fix the error "String or binary data would be truncated."
-- Leo Tracchia     11/08/2022 added change for better performance (using FN_GBL_Institution_Min)
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_EMPLOYEE_GETLIST] (
	@LanguageID AS NVARCHAR(50),
	@EmployeeID AS BIGINT = NULL,
	@FirstOrGivenName AS NVARCHAR(100) = NULL,
	@SecondName AS NVARCHAR(100) = NULL,
	@LastOrSurName AS NVARCHAR(100) = NULL,
	@ContactPhone AS NVARCHAR(100) = NULL,
	@EIDSSOrganizationID AS NVARCHAR(100) = NULL,
	@OrganizationID AS BIGINT = NULL,
	@PositionTypeID AS BIGINT = NULL,
	@EmployeeCategoryID AS BIGINT = NULL,
	@AccountState AS BIGINT = NULL,
	@PersonalIdType AS BIGINT = NULL,
	@PersonalIDValue  AS NVARCHAR(100) = NULL,
	@pageNo INT = 1,
	@pageSize INT = 10 ,
	@sortColumn NVARCHAR(30) = 'EmployeeID',
	@sortOrder NVARCHAR(4) = 'asc'  
	)
AS
BEGIN
	DECLARE @OrganizationAbbreviatedName AS NVARCHAR(4000) = NULL
	DECLARE @OrganizationFullName AS NVARCHAR(4000) = NULL
	SET NOCOUNT ON;

	BEGIN TRY

	DECLARE @firstRec INT
		DECLARE @lastRec INT
		DECLARE @t TABLE( 
			EmployeeID BIGINT PRIMARY KEY, 
			FirstOrGivenName nvarchar(200)	INDEX IDX1 NONCLUSTERED(FirstOrGivenName),
			SecondName nvarchar(200),
			LastOrSurName nvarchar(200) INDEX IDX2 NONCLUSTERED(LastOrSurName), 
			EmployeeFullName nvarchar(100),
			ContactPhone nvarchar(200),
			OrganizationAbbreviatedName nvarchar(100)INDEX IDX7 NONCLUSTERED(OrganizationAbbreviatedName),
			OrganizationFullName nvarchar(200) INDEX IDX3 NONCLUSTERED(OrganizationFullName),
			EIDSSOrganizationID nvarchar(100) 	INDEX IDX4 NONCLUSTERED(EIDSSOrganizationID),
			OrganizationID bigint,
			PositionTypeName nvarchar(100),
			PositionTypeID bigint,
			EmployeeCategoryID BIGINT INDEX IDX5 NONCLUSTERED(EmployeeCategoryID),
			EmployeeCategory nvarchar(100),
			AccountDisabled nvarchar(100),
			AccountLocked nvarchar(100),
			PersonalIdType bigint,
			PersonalIDValue  nvarchar(100) INDEX IDX8 NONCLUSTERED(PersonalIDValue)
			)

		SET @firstRec = (@pageNo-1)* @pagesize
		SET @lastRec = (@pageNo*@pageSize+1)


		INSERT INTO @T

		SELECT p.idfPerson AS EmployeeID,
			p.strFirstName AS FirstOrGivenName,
			p.strSecondName AS SecondName,
			p.strFamilyName AS LastOrSurName,
			p.strContactPhone AS ContactPhone,
			'' AS EmployeeFullName,
			organization.AbbreviatedName AS OrganizationAbbreviatedName,
			organization.EnglishFullName AS OrganizationFullName,
			organization.strOrganizationID AS EIDSSOrganizationID,
			p.idfInstitution AS OrganizationID,
			positionType.[name] AS PositionTypeName,
			positionType.idfsReference AS PositionTypeID,
			employeeCategory.idfsReference AS EmployeeCategoryID,
			employeeCategory.[name] AS EmployeeCategory,
			CASE 
				WHEN u.blnDisabled = 1
				THEN 'Disabled'
				ELSE ''
			END AS 'AccountDisabled',
			CASE    
				WHEN dbo.FN_GBL_ISACCOUNTLOCKED(u.idfUserId) = 1 THEN 'AccountLocked'
                WHEN (u.LockoutEnabled = 1 and u.LockoutEnd IS NULL) OR (u.LockoutEnabled = 0 ) THEN ''
				ELSE ''
			END AS 'AccountLocked',
			p.PersonalIDTypeID AS PersonalIdType,
			p.PersonalIDValue AS PersonalIDValue
		FROM dbo.tlbPerson p
		INNER JOIN dbo.tlbEmployee AS e	ON e.idfEmployee = p.idfPerson AND e.intRowStatus = 0
		INNER JOIN dbo.FN_GBL_Institution_Min(@LanguageID) AS organization
			ON organization.idfOffice = p.idfInstitution
		INNER JOIN dbo.tstUserTable ut ON ut.idfPerson = p.idfPerson AND ut.intRowStatus = 0
		INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000526) AS employeeCategory ON e.idfsEmployeeCategory = employeeCategory.idfsReference
		INNER JOIN dbo.AspNetUsers u ON u.idfUserID = ut.idfUserID 
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000073) AS positionType
			ON p.idfsStaffPosition = positionType.idfsReference
		WHERE p.intRowStatus = 0
		AND e.idfsEmployeeCategory = 10526001
		AND ((u.LockoutEnabled = CASE @AccountState WHEN  10527001 THEN dbo.FN_GBL_ISACCOUNTLOCKED(u.idfUserID) ELSE 2 END) 
		OR (u.blnDisabled = CASE @AccountState WHEN  10527002 THEN 1 ELSE 2 END) OR @AccountState IS NULL)
	UNION
		SELECT p.idfPerson AS EmployeeID,
			p.strFirstName AS FirstOrGivenName,
			p.strSecondName AS SecondName,
			p.strFamilyName AS LastOrSurName,
			p.strContactPhone AS ContactPhone,
			'' AS EmployeeFullName,
			organization.AbbreviatedName AS OrganizationAbbreviatedName,
			organization.EnglishFullName AS OrganizationFullName,
			organization.strOrganizationID AS EIDSSOrganizationID,
			p.idfInstitution AS OrganizationID,
			positionType.[name] AS PositionTypeName,
			positionType.idfsReference AS PositionTypeID,
			employeeCategory.idfsReference AS EmployeeCategoryID,
			employeeCategory.[name] AS EmployeeCategory,
			''AS 'AccountDisabled',
			''AS 'AccountLocked',
			p.PersonalIDTypeID AS PersonalIdType,
			p.PersonalIDValue AS PersonalIDValue
		FROM dbo.tlbPerson p
		INNER JOIN dbo.tlbEmployee AS e	ON e.idfEmployee = p.idfPerson AND e.intRowStatus = 0
		INNER JOIN dbo.FN_GBL_Institution_Min(@LanguageID) AS organization
			ON organization.idfOffice = p.idfInstitution
		INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000526) AS employeeCategory ON e.idfsEmployeeCategory = employeeCategory.idfsReference 
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000073) AS positionType
			ON p.idfsStaffPosition = positionType.idfsReference
		WHERE p.intRowStatus = 0
		AND e.idfsEmployeeCategory = 10526002;

	WITH CTEResults AS
		(
			SELECT ROW_NUMBER() OVER ( ORDER BY 
				CASE WHEN @sortColumn = 'EmployeeID' AND @SortOrder = 'asc' THEN EmployeeID END ASC,
				CASE WHEN @sortColumn = 'EmployeeID' AND @SortOrder = 'desc' THEN EmployeeID END DESC,
				CASE WHEN @sortColumn = 'FirstOrGivenName' AND @SortOrder = 'asc' THEN FirstOrGivenName END ASC,
				CASE WHEN @sortColumn = 'FirstOrGivenName' AND @SortOrder = 'desc' THEN FirstOrGivenName END DESC,
				CASE WHEN @sortColumn = 'SecondName' AND @SortOrder = 'asc' THEN SecondName END ASC,
				CASE WHEN @sortColumn = 'SecondName' AND @SortOrder = 'desc' THEN SecondName END DESC,
				CASE WHEN @sortColumn = 'LastOrSurName' AND @SortOrder = 'asc' THEN LastOrSurName END ASC,
				CASE WHEN @sortColumn = 'LastOrSurName' AND @SortOrder = 'desc' THEN LastOrSurName END DESC,
				CASE WHEN @sortColumn = 'EmployeeFullName' AND @SortOrder = 'asc' THEN EmployeeFullName END ASC,
				CASE WHEN @sortColumn = 'EmployeeFullName' AND @SortOrder = 'desc' THEN EmployeeFullName END DESC,
				CASE WHEN @sortColumn = 'ContactPhone' AND @SortOrder = 'asc' THEN ContactPhone END ASC,
				CASE WHEN @sortColumn = 'ContactPhone' AND @SortOrder = 'desc' THEN ContactPhone END DESC,
				CASE WHEN @sortColumn = 'OrganizationAbbreviatedName' AND @SortOrder = 'asc' THEN OrganizationAbbreviatedName END ASC,
				CASE WHEN @sortColumn = 'OrganizationAbbreviatedName' AND @SortOrder = 'asc' THEN OrganizationAbbreviatedName END ASC,
				CASE WHEN @sortColumn = 'OrganizationFullName' AND @SortOrder = 'desc' THEN OrganizationFullName END DESC,
				CASE WHEN @sortColumn = 'OrganizationFullName' AND @SortOrder = 'asc' THEN OrganizationFullName END ASC,
				CASE WHEN @sortColumn = 'EIDSSOrganizationID' AND @SortOrder = 'asc' THEN EIDSSOrganizationID END ASC,
				CASE WHEN @sortColumn = 'EIDSSOrganizationID' AND @SortOrder = 'desc' THEN EIDSSOrganizationID END DESC,
				CASE WHEN @sortColumn = 'OrganizationID' AND @SortOrder = 'asc' THEN OrganizationID END ASC,
				CASE WHEN @sortColumn = 'OrganizationID' AND @SortOrder = 'desc' THEN OrganizationID END DESC,
				CASE WHEN @sortColumn = 'PositionTypeName' AND @SortOrder = 'asc' THEN PositionTypeName END ASC,
				CASE WHEN @sortColumn = 'PositionTypeName' AND @SortOrder = 'desc' THEN PositionTypeName END DESC,
				CASE WHEN @sortColumn = 'PositionTypeID' AND @SortOrder = 'asc' THEN PositionTypeID END ASC,
				CASE WHEN @sortColumn = 'PositionTypeID' AND @SortOrder = 'desc' THEN PositionTypeID END DESC,
				CASE WHEN @sortColumn = 'EmployeeCategory' AND @SortOrder = 'asc' THEN EmployeeCategory END ASC,
				CASE WHEN @sortColumn = 'EmployeeCategory' AND @SortOrder = 'desc' THEN EmployeeCategory END DESC,
				CASE WHEN @sortColumn = 'AccountDisabled' AND @SortOrder = 'asc' THEN AccountDisabled END DESC,
				CASE WHEN @sortColumn = 'AccountDisabled' AND @SortOrder = 'desc' THEN AccountDisabled END DESC,
				CASE WHEN @sortColumn = 'AccountLocked' AND @SortOrder = 'asc' THEN AccountLocked END DESC,
				CASE WHEN @sortColumn = 'AccountLocked' AND @SortOrder = 'desc' THEN AccountLocked END DESC,
				CASE WHEN @sortColumn = 'PersonalIdType' AND @SortOrder = 'asc' THEN PersonalIdType END ASC,
				CASE WHEN @sortColumn = 'PersonalIdType' AND @SortOrder = 'desc' THEN PersonalIdType END DESC,
				CASE WHEN @sortColumn = 'PersonalIDValue' AND @SortOrder = 'asc' THEN PersonalIDValue END ASC,
				CASE WHEN @sortColumn = 'PersonalIDValue' AND @SortOrder = 'desc' THEN PersonalIDValue END DESC
		) AS ROWNUM,
		COUNT(*) OVER () AS 
				TotalRowCount,
				EmployeeID,
				FirstOrGivenName,
				SecondName,
				LastOrSurName,
				dbo.FN_GBL_ConcatFullName(LastOrSurName,FirstOrGivenName,SecondName) AS EmployeeFullName,
				ContactPhone,
				OrganizationAbbreviatedName,
				OrganizationFullName,
				EIDSSOrganizationID,
				OrganizationID,
				PositionTypeName,
				PositionTypeID,
				EmployeeCategoryID,
				EmployeeCategory,
				AccountDisabled,
				AccountLocked,
				PersonalIdType,
				PersonalIdValue
			FROM @T
			WHERE (
					(
					(EmployeeID = @EmployeeID)
					OR (@EmployeeID IS NULL)
					)
				AND (
					(ContactPhone = @ContactPhone)
					OR (@ContactPhone IS NULL)
					)
				AND (
					(OrganizationID = @OrganizationID)
					OR (@OrganizationID IS NULL)
					)
				AND (
					(PersonalIDType = @PersonalIdType)
					OR (@PersonalIdType IS NULL)
					)
				AND (
					(PersonalIDValue = @PersonalIDValue)
					OR (@PersonalIDValue IS NULL)
					)
				AND (
					(PositionTypeID = @PositionTypeID)
					OR (@PositionTypeID IS NULL)
					)
				AND (
					(EmployeeCategoryID = @EmployeeCategoryID)
					OR (@EmployeeCategoryID IS NULL)
					)
				AND (
					(FirstOrGivenName LIKE '%' + @FirstOrGivenName + '%')
					OR (@FirstOrGivenName IS NULL)
					)
				AND (
					(SecondName LIKE '%' + @SecondName + '%')
					OR (@SecondName IS NULL)
					)
				AND (
					(LastOrSurName LIKE '%' + @LastOrSurName + '%')
					OR (@LastOrSurName IS NULL)
					)
				AND (
					(EIDSSOrganizationID LIKE '%' + @EIDSSOrganizationID + '%')
					OR (@EIDSSOrganizationID IS NULL)
					)
			)
		)	
			SELECT
			TotalRowCount,
			EmployeeID,
			FirstOrGivenName,
			SecondName,
			LastOrSurName,
			EmployeeFullName,
			ContactPhone,
			OrganizationAbbreviatedName,
			OrganizationFullName,
			EIDSSOrganizationID,
			OrganizationID,
			PositionTypeName,
			PositionTypeID,
			EmployeeCategoryID,
			EmployeeCategory,
			AccountDisabled,
			AccountLocked,
			PersonalIdType,
			PersonalIdValue
			,TotalPages = (TotalRowCount/@pageSize)+IIF(TotalRowCount%@pageSize>0,1,0)
			,CurrentPage = @pageNo 
		FROM CTEResults
		WHERE RowNum > @firstRec AND RowNum < @lastRec 


		OPTION (RECOMPILE);

	END TRY

	BEGIN CATCH
		THROW;
	END CATCH
END;
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_GISDATA_DEL]...';


GO

-- ================================================================================================
-- Name: USP_ADMIN_GISDATA_DEL
--
-- Description: DELETE GIS Admin Levels.
--          
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Mark WIlson		12/07/2021  Initial release.
-- Mani Govindarajan  11/01/2022 Added condtions to check  if the record is referenced in child table and reference tables         
-- Mani Govindarajan  11/04/2022 Fixed Else condtion issue for settlement         

--          
-- Testing Code:
/*

EXEC dbo.USP_ADMIN_GISDATA_DEL
	@idfsLocation = 3724160000000,
	@UserName = 'PowerUser'

*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_GISDATA_DEL] 
(
	@idfsLocation BIGINT = NULL, -- the location being added or updated
	@userName NVARCHAR(200) = NULL
)
AS

BEGIN

	DECLARE @ReturnCode INT = 0,
			@ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
			@SettlementCount  int =0,
			@RayonCount  int =0,
			@RegionCount  int =0,
			@GeoLocationRefCount  int=0,
			@GeoLocationSharedRefCount  int=0;

	BEGIN TRY

		BEGIN TRANSACTION 

		DECLARE @AdminLevelNode HIERARCHYID

		SELECT @AdminLevelNode = node FROM dbo.gisLocation WHERE idfsLocation = @idfsLocation

		DECLARE @AdminLevel3 TABLE
		(
			
			idfsLocation BIGINT
		)	

		
		DECLARE @AdminLevel4 TABLE
		(
			
			idfsLocation BIGINT
		)	

		-- additional levels will be needed as the database is expanded


-----------------------------------------------------------------------------------------------------------------------------------------
		IF @AdminLevelNode.GetLevel() = 2
		BEGIN

			INSERT INTO @AdminLevel3
			SELECT
				idfsLocation
			FROM dbo.gisLocationDenormalized WHERE Level = 3 AND Level2ID = @idfsLocation

			INSERT INTO @AdminLevel4
			SELECT
				idfsLocation
			FROM dbo.gisLocationDenormalized WHERE Level = 4 AND Level2ID = @idfsLocation
			SELECT @SettlementCount=  COUNT(*) FROM @AdminLevel4;
			SELECT @RayonCount=  COUNT(*) FROM @AdminLevel3;
			select @SettlementCount= count(idfsSettlement)  FROM dbo.gisSettlement WHERE idfsRegion = @idfsLocation and intRowStatus =0
			SELECT @GeoLocationRefCount =count(idfsLocation) FROM dbo.tlbGeoLocation where idfsLocation=@idfsLocation and intRowStatus =0
			SELECT @GeoLocationSharedRefCount =count(idfsLocation) FROM dbo.tlbGeoLocationShared where idfsRegion=@idfsLocation and intRowStatus =0

			if (@RayonCount =0 and @SettlementCount =0 AND @GeoLocationRefCount=0 AND @GeoLocationSharedRefCount=0)
			BEGIN

				DELETE FROM dbo.gisLocation WHERE idfsLocation IN (SELECT * FROM @AdminLevel4)

				DELETE FROM dbo.gisLocation WHERE idfsLocation IN (SELECT * FROM @AdminLevel3)

				DELETE FROM dbo.gisLocation WHERE idfsLocation = @idfsLocation

				DELETE FROM dbo.gisSettlement WHERE idfsRegion = @idfsLocation

				DELETE FROM dbo.gisRayon WHERE idfsRegion = @idfsLocation

				DELETE FROM dbo.gisRegion WHERE idfsRegion = @idfsLocation

				DELETE FROM dbo.gisStringNameTranslation WHERE idfsGISBaseReference = @idfsLocation

				DELETE FROM dbo.gisBaseReference WHERE idfsGISBaseReference IN (SELECT * FROM @AdminLevel4)

				DELETE FROM dbo.gisBaseReference WHERE idfsGISBaseReference IN (SELECT * FROM @AdminLevel3)

				DELETE FROM dbo.gisBaseReference WHERE idfsGISBaseReference = @idfsLocation
			END
			ELSE
			BEGIN
			 set @ReturnCode=-1;
			END

		END

-----------------------------------------------------------------------------------------------------------------------------------------
		IF @AdminLevelNode.GetLevel() = 3
		BEGIN

			INSERT INTO @AdminLevel4
			SELECT
				idfsLocation
			FROM dbo.gisLocationDenormalized WHERE Level = 4 AND Level3ID = @idfsLocation
			--select @SettlementCount= count(idfsSettlement)  FROM dbo.gisSettlement WHERE idfsRegion = @idfsLocation and intRowStatus =0
			SELECT @GeoLocationRefCount =count(idfsLocation) FROM dbo.tlbGeoLocation where idfsLocation=@idfsLocation and intRowStatus =0
			SELECT @GeoLocationSharedRefCount =count(idfsLocation) FROM dbo.tlbGeoLocationShared where idfsRayon=@idfsLocation and intRowStatus =0
			SELECT @SettlementCount=  COUNT(*) FROM @AdminLevel4;
			
			if (@SettlementCount =0 AND @GeoLocationRefCount=0 AND @GeoLocationSharedRefCount=0)
			BEGIN

				DELETE FROM dbo.gisLocation WHERE idfsLocation IN (SELECT * FROM @AdminLevel4)

				DELETE FROM dbo.gisLocation WHERE idfsLocation = @idfsLocation

				DELETE FROM dbo.gisSettlement WHERE idfsRegion = @idfsLocation

				DELETE FROM dbo.gisRayon WHERE idfsRegion = @idfsLocation

				DELETE FROM dbo.gisStringNameTranslation WHERE idfsGISBaseReference = @idfsLocation

				DELETE FROM dbo.gisBaseReference WHERE idfsGISBaseReference IN (SELECT * FROM @AdminLevel4)

				DELETE FROM dbo.gisBaseReference WHERE idfsGISBaseReference = @idfsLocation
			end
			ELSE
			BEGIN
			 set @ReturnCode=-1;
			END

		END

-----------------------------------------------------------------------------------------------------------------------------------------
		IF @AdminLevelNode.GetLevel() = 4
		BEGIN
			SELECT @GeoLocationRefCount =count(idfsLocation) FROM dbo.tlbGeoLocation where idfsLocation=@idfsLocation and intRowStatus =0
			SELECT @GeoLocationSharedRefCount =count(idfsLocation) FROM dbo.tlbGeoLocationShared where idfsSettlement=@idfsLocation and intRowStatus =0
			if ( @GeoLocationRefCount=0 AND @GeoLocationSharedRefCount=0)
			BEGIN

				DELETE FROM dbo.gisLocation WHERE idfsLocation = @idfsLocation

				DELETE FROM dbo.gisSettlement WHERE idfsRegion = @idfsLocation

				DELETE FROM dbo.gisStringNameTranslation WHERE idfsGISBaseReference = @idfsLocation

				DELETE FROM dbo.gisBaseReference WHERE idfsGISBaseReference = @idfsLocation
			END
			ELSE
			BEGIN
			 set @ReturnCode=-1;
			END


		END

		if (@SettlementCount =0 AND @GeoLocationRefCount=0 AND @GeoLocationSharedRefCount=0)
		BEGIN
			IF @@TRANCOUNT > 0
				COMMIT TRANSACTION;
		END
		ELSE
		BEGIN
			ROLLBACK TRANSACTION;
		END

		SELECT @ReturnCode ReturnCode
			,@ReturnMessage ReturnMessage
			,@idfsLocation IdfsLocation
			,@SettlementCount SettlementCount
			,@RayonCount RayonCount
			,@RegionCount RegionCount
			,@GeoLocationRefCount GeoLocationRefCount
			,@GeoLocationSharedRefCount GeoLocationSharedRefCount

	END TRY

	BEGIN CATCH

		IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION;

		SET @ReturnCode = ERROR_NUMBER();
		SET @ReturnMessage = ERROR_MESSAGE();

		--SELECT @ReturnCode,	@ReturnMessage, @idfsLocation

		THROW;

	END CATCH;

END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_GISDATA_SET]...';


GO



-- ================================================================================================
-- Name: USP_ADMIN_GISDATA_SET
--
-- Description: Add/Update GIS Admin Levels.
--          
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Mandar Kulkarni   11292021          Initial release.
-- Steven Verner	03/16/2022	Wrapped in transaction and initializing @idfsCountry,@idfsRegion and @idfsRayon from denormalized table...
-- Manickandan Govindarajan 03/17/2022 Commented updating node value in gislocation table for update statements in 3 place.
-- Manickandan Govindarajan 11/09/2022 Added strcode for region and rayon levels
--          
-- Testing Code:
/*

-- Move to a new node
EXEC dbo.USP_ADMIN_GISDATA_SET
	@LangID = N'en-US',
	@idfsParent = 1344350000000,
	@strHASC = N'AZORN1',
	@strCode = NULL,
	@idfsLocation = 3724160000000,
	@strDefaultName = 'NewRayon',
	@strNationalName = 'NewRayon',
	@idfsType = NULL,
	@Latitude = NULL,
	@Longitude = NULL,
	@Elevation = NULL,
	@intOrder = 100,
	@UserName = 'PowerUser'



-- add a new location
EXEC dbo.USP_ADMIN_GISDATA_SET
	@LangID = N'en-US',
	@idfsParent = 3723990000000,
	@strHASC = NULL,
	@strCode = 'NewSettlementCode',
	@idfsLocation = NULL,
	@strDefaultName = 'NewSettlement_DF',
	@strNationalName = 'NewSettlement_EN',
	@idfsType = 730120000000,
	@Latitude = 50.3322,
	@Longitude = 40.4219512939453,
	@Elevation = 1000,
	@intOrder = 1,
	@UserName = 'PowerUser'



*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_GISDATA_SET] 
(
		@LangID NVARCHAR(20),
	@idfsParent BIGINT, --  parent location of the location being added
	@strHASC NVARCHAR(6), -- AZ0000, AZBK00, AZBKBK
	@strCode NVARCHAR(200), -- SettlementCode
	@idfsLocation BIGINT = NULL, -- the location being added or updated
	@strDefaultName NVARCHAR(100),
	@strNationalName NVARCHAR(100),
	@idfsType BIGINT  = NULL,
	@Latitude FLOAT = NULL,
	@Longitude FLOAT = NULL,
	@Elevation INT = NULL,
	@intOrder INT = 100,
	@userName NVARCHAR(200) = NULL
)
AS

BEGIN

	DECLARE @ReturnCode INT = 0,
			@ReturnMessage NVARCHAR(MAX) = 'SUCCESS';

	BEGIN TRY

		BEGIN TRANSACTION gisUpdate

		DECLARE @SupressSelect TABLE
		( 
			retrunCode int,
			returnMessage varchar(200)
		)

		DECLARE @idfsLanguage BIGINT, 
				@SourceSystemKeyValue NVARCHAR(MAX),
				@idfsGISBaseReference BIGINT

		DECLARE @ParentNode HIERARCHYID 
		
		SELECT @ParentNode = node 
		FROM dbo.gisLocation WHERE idfsLocation = @idfsParent
		
		DECLARE @MaxNode HIERARCHYID -- the max node of the Location's level
		DECLARE @NewNode HIERARCHYID -- the max node of the Location's level


		SELECT
			@MaxNode = MAX(node)
		FROM dbo.gisLocation
		WHERE node.GetAncestor(1) = @ParentNode

		SELECT @NewNode = @ParentNode.GetDescendant(@MaxNode, NULL) -- get next available node for insert

		DECLARE @idfsCountry BIGINT,
				@idfsRegion BIGINT,
				@idfsRayon BIGINT

		SELECT @idfsCountry = ld.Level1ID, @idfsRegion =ld.Level2ID, @idfsRayon=ld.Level3ID
		FROM gisLocationDenormalized ld
		WHERE ld.idfsLocation = @idfsParent

		SELECT @idfsLanguage = idfsBaseReference
		FROM dbo.trtBaseReference 
		WHERE strBaseReferenceCode = @LangID
		
-----------------------------------------------------------------------------------------------------------------------------------------
---------- The location is Admin Level 2 (this corresponds to Region in EIDSS6)
		-- If administrative level unit being added or updated is Level 2 (e.g. Region), the Parent is Level 1 (Country)
		IF @ParentNode.GetLevel() = 1  
		BEGIN
			IF EXISTS (SELECT * FROM dbo.gisBaseReference WHERE idfsGISBaseReference = @idfsLocation)
				BEGIN
					UPDATE dbo.gisBaseReference
					SET strDefault = @strDefaultName,
						strBaseReferenceCode = @strHASC,
						intRowStatus = 0,
						intOrder = @intOrder,
						auditUpdateUser = @userName,
						auditUpdateDTM = GETDATE()
					WHERE idfsGISBaseReference = @idfsLocation

					
					-- update a translation
					IF EXISTS(SELECT * FROM dbo.gisStringNameTranslation WHERE idfsGISBaseReference = @idfsLocation AND idfsLanguage = @idfsLanguage)
					BEGIN
						UPDATE dbo.gisStringNameTranslation
						SET strTextString = @strNationalName,
							intRowStatus = 0,
							auditUpdateUser = @userName,
							auditUpdateDTM = GETDATE()
						WHERE idfsGISBaseReference = @idfsLocation
						AND idfsLanguage = @idfsLanguage
					END

					-- add a new translation
					IF NOT EXISTS(SELECT * FROM dbo.gisStringNameTranslation WHERE idfsGISBaseReference = @idfsLocation AND idfsLanguage = @idfsLanguage)
					BEGIN
						INSERT INTO dbo.gisStringNameTranslation
						(
						    idfsGISBaseReference,
						    idfsLanguage,
						    strTextString,
						    rowguid,
						    intRowStatus,
						    SourceSystemNameID,
						    SourceSystemKeyValue,
						    AuditCreateUser,
						    AuditCreateDTM,
						    AuditUpdateUser,
						    AuditUpdateDTM
						)
						VALUES
						(   @idfsLocation,
						    @idfsLanguage,
						    @strNationalName,
						    NEWID(),
						    0,
							10519001,
							'[{"idfsGISBaseReference":' + CAST(@idfsLocation AS NVARCHAR(24)) + '}, "idfsLanguage":' + CAST(@idfsLanguage AS NVARCHAR(24)) + ']',
						    @userName,
						    GETDATE(),
						    @userName,
						    GETDATE()
						    )
					END

					UPDATE dbo.gisLocation
						SET strHASC = @strHASC,
					    strCode=@strCode,
						--node = @NewNode,
						intRowStatus = 0,
						dblLongitude = @Longitude,
						dblLatitude = @Latitude,
						intElevation = @Elevation,
						auditUpdateUser = @userName,
						auditUpdateDTM = GETDATE()
					WHERE idfsLocation = @idfsLocation

					UPDATE dbo.gisRegion
					SET strHASC = @strHASC,
					    strCode = @strCode,
						intRowStatus = 0,
						dblLongitude = @Longitude,
						dblLatitude = @Latitude,
						intElevation = @Elevation,
						auditUpdateUser = @userName,
						auditUpdateDTM = GETDATE()
					WHERE idfsRegion = @idfsLocation
				END
			ELSE
				BEGIN

					INSERT INTO @SupressSelect
					EXEC dbo.USP_GBL_NEXTKEYID_GET 'gisBaseReference', @idfsGISBaseReference OUTPUT;
					
					--SET @idfsGISBaseReference = (SELECT MAX(idfsGISBaseReference) 
					--							FROM dbo.gisBaseReference)

					--EXEC dbo.USP_GBL_GIS_NewID_GET
					--	@ID = @idfsGISBaseReference OUTPUT;

					SET @SourceSystemKeyValue = '[{"idfsGisBaseReference":' + CAST(@idfsGISBaseReference AS NVARCHAR(MAX) )+'}]'
					INSERT INTO dbo.gisBaseReference
					(
					    idfsGISBaseReference,
					    idfsGISReferenceType,
					    strBaseReferenceCode,
					    strDefault,
					    intOrder,
					    rowguid,
					    intRowStatus,
					    SourceSystemNameID,
					    SourceSystemKeyValue,
					    AuditCreateUser,
					    AuditCreateDTM
					)
					VALUES
					(   
						@idfsGISBaseReference,
					    19000003,
					    @strHASC,
					    @strDefaultName,
					    @intOrder,
					    NEWID(),
					    0,
					    10519001,
					    '[{"idfsGisBaseReference":' + CAST(@idfsGISBaseReference AS NVARCHAR(MAX) )+'}]',
					    @userName,
					    GETDATE()
					 )

					INSERT INTO dbo.gisStringNameTranslation
					(
					    idfsGISBaseReference,
					    idfsLanguage,
					    strTextString,
					    rowguid,
					    intRowStatus,
					    SourceSystemNameID,
					    SourceSystemKeyValue,
					    AuditCreateUser,
					    AuditCreateDTM
					)
					VALUES
					(   
						@idfsGISBaseReference,
					    @idfsLanguage,
					    @strNationalName,
					    NEWID(),
					    0,
					    10519001,
					    '[{"idfsGISBaseReference":' + CAST(@idfsLocation AS NVARCHAR(24)) + '}, "idfsLanguage":' + CAST(@idfsLanguage AS NVARCHAR(24)) + ']',
					    @userName,
					    GETDATE()
					)
				
					INSERT INTO dbo.gisRegion
					(
					    idfsRegion,
					    idfsCountry,
					    strHASC,
						strCode,
					    rowguid,
					    intRowStatus,
					    SourceSystemNameID,
					    SourceSystemKeyValue,
						dblLongitude,
						dblLatitude,
						intElevation,
					    AuditCreateUser,
					    AuditCreateDTM
					)
					VALUES
					(   
						@idfsGISBaseReference,
					    @idfsCountry,
					    @strHASC,
						@strCode,
					    NEWID(), 
					    0,
					    10519001,
					    '[{"idfsRegion":' + CAST(@idfsGISBaseReference AS NVARCHAR(MAX) )+'}]',
						@Longitude,
						@Latitude,
						@Elevation,
					    @userName,
					    GETDATE()
					 )

					INSERT INTO dbo.gisLocation
					(
					    idfsLocation,
					    node,
					    strHASC,
						strCode,
					    rowguid,
					    intRowStatus,
					    SourceSystemNameID,
					    SourceSystemKeyValue,
						dblLongitude,
						dblLatitude,
						intElevation,
					    AuditCreateUser,
					    AuditCreateDTM
					)
					VALUES
					(   
						@idfsGISBaseReference,
					    @NewNode,
					    @strHASC,
						@strCode,
					    NEWID(),
					    0,
					    10519001,
					    '[{"idfsLocation":' + CAST(@idfsGISBaseReference AS NVARCHAR(MAX) )+'}]',
						@Longitude,
						@Latitude,
						@Elevation,
					    @userName,
					    GETDATE()
					)
				END 
		END
-----------------------------------------------------------------------------------------------------------------------------------------
---------- The location is Admin Level 3 (this corresponds to Rayon in EIDSS6)
		--
		-- If administrative level unit is Rayon, the parent is Level2 = Region
		ELSE IF @ParentNode.GetLevel() = 2  
		BEGIN
			IF EXISTS (SELECT * FROM dbo.gisBaseReference WHERE idfsGISBaseReference = @idfsLocation)
			BEGIN
				UPDATE dbo.gisBaseReference
				SET strDefault = @strDefaultName,
					strBaseReferenceCode = @strHASC,
					intOrder = @intOrder,
					intRowStatus = 0,
					auditUpdateUser = @userName,
					auditUpdateDTM = GETDATE()
				WHERE idfsGISBaseReference = @idfsLocation

				-- update a translation
				IF EXISTS(SELECT * FROM dbo.gisStringNameTranslation WHERE idfsGISBaseReference = @idfsLocation AND idfsLanguage = @idfsLanguage)
				BEGIN
					UPDATE dbo.gisStringNameTranslation
					SET strTextString = @strNationalName,
						intRowStatus = 0,
						auditUpdateUser = @userName,
						auditUpdateDTM = GETDATE()
					WHERE idfsGISBaseReference = @idfsLocation
					AND idfsLanguage = @idfsLanguage
				END

				-- add a new translation
				IF NOT EXISTS(SELECT * FROM dbo.gisStringNameTranslation WHERE idfsGISBaseReference = @idfsLocation AND idfsLanguage = @idfsLanguage)
				BEGIN
					INSERT INTO dbo.gisStringNameTranslation
					(
						idfsGISBaseReference,
						idfsLanguage,
						strTextString,
						rowguid,
						intRowStatus,
						SourceSystemNameID,
						SourceSystemKeyValue,
						AuditCreateUser,
						AuditCreateDTM,
						AuditUpdateUser,
						AuditUpdateDTM
					)
					VALUES
					(   @idfsLocation,
						@idfsLanguage,
						@strNationalName,
						NEWID(),
						0,
						10519001,
						'[{"idfsGISBaseReference":' + CAST(@idfsLocation AS NVARCHAR(24)) + '}, "idfsLanguage":' + CAST(@idfsLanguage AS NVARCHAR(24)) + ']',
						@userName,
						GETDATE(),
						@userName,
						GETDATE()
						)
				END

				UPDATE dbo.gisLocation
				SET strHASC = @strHASC,
					strCode=@strCode,
					--node = @NewNode,
					intRowStatus = 0,
					dblLongitude = @Longitude,
					dblLatitude = @Latitude,
					intElevation = @Elevation,
					auditUpdateUser = @userName,
					auditUpdateDTM = GETDATE()
				WHERE idfsLocation = @idfsLocation

				UPDATE dbo.gisRayon
				SET strHASC = @strHASC,
					strCode= strCode,
					idfsRegion = @idfsParent,
					intRowStatus = 0,
					dblLongitude = @Longitude,
					dblLatitude = @Latitude,
					intElevation = @Elevation,
					auditUpdateUser = @userName,
					auditUpdateDTM = GETDATE()
				WHERE idfsRayon = @idfsLocation

			END

			ELSE
			BEGIN
			
				INSERT INTO @SupressSelect
				EXEC dbo.USP_GBL_NEXTKEYID_GET 'gisBaseReference', @idfsGISBaseReference OUTPUT;
				
				--SET @idfsGISBaseReference = (SELECT MAX(idfsGISBaseReference) 
				--							FROM dbo.gisBaseReference)
				--EXEC dbo.USP_GBL_GIS_NewID_GET 
				--	@ID = @idfsGISBaseReference OUTPUT;
				
				SET @SourceSystemKeyValue = '[{"idfsGisBaseReference":' + CAST(@idfsGISBaseReference AS NVARCHAR(MAX) )+'}]'
				INSERT INTO dbo.gisBaseReference
				(
					idfsGISBaseReference,
					idfsGISReferenceType,
					strBaseReferenceCode,
					strDefault,
					intOrder,
					rowguid,
					intRowStatus,
					SourceSystemNameID,
					SourceSystemKeyValue,
					AuditCreateUser,
					AuditCreateDTM
				)
				VALUES
				(   
					@idfsGISBaseReference,
					19000002,
					@strHASC,
					@strDefaultName,
					@intOrder,
					NEWID(),
					0,
					10519001,
					'[{"idfsGisBaseReference":' + CAST(@idfsGISBaseReference AS NVARCHAR(MAX) )+'}]',
					@userName,
					GETDATE()
					)

				INSERT INTO dbo.gisStringNameTranslation
				(
					idfsGISBaseReference,
					idfsLanguage,
					strTextString,
					rowguid,
					intRowStatus,
					SourceSystemNameID,
					SourceSystemKeyValue,
					AuditCreateUser,
					AuditCreateDTM
				)
				VALUES
				(   
					@idfsGISBaseReference,
					@idfsLanguage,
					@strNationalName,
					NEWID(),
					0,
					10519001,
					'[{"idfsGISBaseReference":' + CAST(@idfsLocation AS NVARCHAR(24)) + '}, "idfsLanguage":' + CAST(@idfsLanguage AS NVARCHAR(24)) + ']',
					@userName,
					GETDATE()
				)

				INSERT INTO dbo.gisRayon
				(
					idfsRayon,
					idfsRegion,
					idfsCountry,
					strHASC,
					strCode,
					rowguid,
					intRowStatus,
					SourceSystemNameID,
					SourceSystemKeyValue,
					dblLongitude,
					dblLatitude,
					intElevation,
					AuditCreateUser,
					AuditCreateDTM
				)
				VALUES
				(   @idfsGISBaseReference,       -- idfsRayon - bigint
					@idfsRegion,       -- idfsRegion - bigint
					@idfsCountry,       -- idfsCountry - bigint
					@strHASC,     -- strHASC - nvarchar(6)
					@strCode,
					NEWID(), -- rowguid - uniqueidentifier
					0, -- intRowStatus - int
					10519001,    -- SourceSystemNameID - bigint
					@SourceSystemKeyValue,    -- SourceSystemKeyValue - nvarchar(max)
					@Longitude,
					@Latitude,
					@Elevation,
					@userName,    -- AuditCreateUser - nvarchar(200)
					GETDATE() -- AuditCreateDTM - datetime
					)

				INSERT INTO dbo.gisLocation
				(
					idfsLocation,
					node,
					strHASC,
					strCode,
					rowguid,
					intRowStatus,
					SourceSystemNameID,
					SourceSystemKeyValue,
					dblLongitude,
					dblLatitude,
					intElevation,
					AuditCreateUser,
					AuditCreateDTM
				)
				VALUES
				(   @idfsGISBaseReference, -- idfsLocation - bigint
					@NewNode,    -- node - hierarchyid
					@strHASC,    -- strHASC - nvarchar(6)
					@strCode,
					NEWID(), -- rowguid - uniqueidentifier
					0, -- intRowStatus - int
					10519001, -- SourceSystemNameID - bigint
					@SourceSystemKeyValue,    -- SourceSystemKeyValue - nvarchar(200)
					@Longitude,
					@Latitude,
					@Elevation,
					@userName,    -- AuditCreateUser - nvarchar(200)
					GETDATE() -- AuditCreateDTM - datetime
					)
			END 

		END

-----------------------------------------------------------------------------------------------------------------------------------------
---------- The location is Admin Level 4 (this corresponds to Settlement in EIDSS6)
		-- If administrative level unit is Settlement, the Parent is level 3
		ELSE IF @ParentNode.GetLevel() = 3  
		BEGIN
			IF EXISTS (SELECT * FROM dbo.gisBaseReference WHERE idfsGISBaseReference = @idfsLocation)  -- this is an update
			BEGIN
				UPDATE dbo.gisBaseReference
				SET strDefault = @strDefaultName,
					intRowStatus = 0,
					intOrder = @intOrder,
					auditUpdateUser = @userName,
					auditUpdateDTM = GETDATE()
				WHERE idfsGISBaseReference = @idfsLocation

				-- update a translation
				IF EXISTS(SELECT * FROM dbo.gisStringNameTranslation WHERE idfsGISBaseReference = @idfsLocation AND idfsLanguage = @idfsLanguage)
				BEGIN
					UPDATE dbo.gisStringNameTranslation
					SET strTextString = @strNationalName,
						intRowStatus = 0,
						auditUpdateUser = @userName,
						auditUpdateDTM = GETDATE()
					WHERE idfsGISBaseReference = @idfsLocation
					AND idfsLanguage = @idfsLanguage
				END

				-- add a new translation
				IF NOT EXISTS(SELECT * FROM dbo.gisStringNameTranslation WHERE idfsGISBaseReference = @idfsLocation AND idfsLanguage = @idfsLanguage)
				BEGIN
					INSERT INTO dbo.gisStringNameTranslation
					(
						idfsGISBaseReference,
						idfsLanguage,
						strTextString,
						rowguid,
						intRowStatus,
						SourceSystemNameID,
						SourceSystemKeyValue,
						AuditCreateUser,
						AuditCreateDTM,
						AuditUpdateUser,
						AuditUpdateDTM
					)
					VALUES
					(   @idfsLocation,
						@idfsLanguage,
						@strNationalName,
						NEWID(),
						0,
						10519001,
						'[{"idfsGISBaseReference":' + CAST(@idfsLocation AS NVARCHAR(24)) + '}, "idfsLanguage":' + CAST(@idfsLanguage AS NVARCHAR(24)) + ']',
						@userName,
						GETDATE(),
						@userName,
						GETDATE()
						)
				END

				UPDATE dbo.gisLocation
				SET strHASC = NULL, -- no HASC data for Level 4 and higher
					idfsType = @idfsType,
					strCode = @strCode,
					--node = @NewNode,
					dblLatitude = @Latitude,
					dblLongitude = @Longitude,
					intElevation = @Elevation,
					intRowStatus = 0,
					auditUpdateUser = @userName,
					auditUpdateDTM = GETDATE()
				WHERE idfsLocation = @idfsLocation

				UPDATE dbo.gisSettlement
				SET idfsRayon = @idfsParent,
					idfsRegion = @idfsRegion,
					idfsSettlementType = @idfsType,
					strSettlementCode = @strCode,
					dblLatitude = @Latitude,
					dblLongitude = @Longitude,
					intRowStatus = 0,
					intElevation = @Elevation,
					auditUpdateUser = @userName,
					auditUpdateDTM = GETDATE()
				WHERE idfsSettlement = @idfsLocation

			END

			ELSE -- This is an insert

				BEGIN

				
					INSERT INTO @SupressSelect
					EXEC dbo.USP_GBL_NEXTKEYID_GET 'gisBaseReference', @idfsGISBaseReference OUTPUT;

				--SET @idfsGISBaseReference = (SELECT MAX(idfsGISBaseReference) 
				--							FROM dbo.gisBaseReference) 
				--EXEC dbo.USP_GBL_GIS_NewID_GET
				--	@ID = @idfsGISBaseReference OUTPUT;

				INSERT INTO dbo.gisBaseReference
				(
					idfsGISBaseReference,
					idfsGISReferenceType,
					strBaseReferenceCode,
					strDefault,
					intOrder,
					rowguid,
					intRowStatus,
					SourceSystemNameID,
					SourceSystemKeyValue,
					AuditCreateUser,
					AuditCreateDTM
				)
				VALUES
				(   
					@idfsGISBaseReference,
					19000004,
					NULL,
					@strDefaultName,
					@intOrder,
					NEWID(),
					0,
					10519001,
					'[{"idfsGisBaseReference":' + CAST(@idfsGISBaseReference AS NVARCHAR(MAX) )+'}]',
					@userName,
					GETDATE()
					)


				INSERT INTO dbo.gisStringNameTranslation
				(
					idfsGISBaseReference,
					idfsLanguage,
					strTextString,
					rowguid,
					intRowStatus,
					SourceSystemNameID,
					SourceSystemKeyValue,
					AuditCreateUser,
					AuditCreateDTM
				)
				VALUES
				(   
					@idfsGISBaseReference,
					@idfsLanguage,
					@strNationalName,
					NEWID(),
					0,
					10519001,
					'[{"idfsGISBaseReference":' + CAST(@idfsLocation AS NVARCHAR(24)) + '}, "idfsLanguage":' + CAST(@idfsLanguage AS NVARCHAR(24)) + ']',
					@userName,
					GETDATE()
				)

					INSERT INTO dbo.gisSettlement
					(
					    idfsSettlement,
					    idfsSettlementType,
					    idfsCountry,
					    idfsRegion,
					    idfsRayon,
					    strSettlementCode,
					    dblLongitude,
					    dblLatitude,
					    rowguid,
					    intRowStatus,
					    intElevation,
					    SourceSystemNameID,
					    SourceSystemKeyValue,
					    AuditCreateUser,
					    AuditCreateDTM
					)
					VALUES
					(   @idfsGISBaseReference, -- idfsSettlement - bigint
					    @idfsType,       -- idfsSettlementType - bigint
					    @idfsCountry,       -- idfsCountry - bigint
					    @idfsRegion,       -- idfsRegion - bigint
					    @idfsRayon,       -- idfsRayon - bigint
					    @strCode,    -- strSettlementCode - nvarchar(200)
					    @Longitude,    -- dblLongitude - float
					    @Latitude,    -- dblLatitude - float
					    NEWID(), -- rowguid - uniqueidentifier
					    0, -- intRowStatus - int
					    @Elevation,    -- intElevation - int
					    10519001,    -- SourceSystemNameID - bigint
						'[{"idfsSettlement":' + CAST(@idfsGISBaseReference AS NVARCHAR(MAX) )+'}]',
					    @userName,    -- AuditCreateUser - nvarchar(200)
					    GETDATE() -- AuditCreateDTM - datetime
					    )		

					INSERT INTO dbo.gisLocation
					(
					    idfsLocation,
					    node,
						idfsType,
						strCode,
						dblLatitude,
						dblLongitude,
						intElevation,
					    rowguid,
					    intRowStatus,
					    SourceSystemNameID,
					    SourceSystemKeyValue,
					    AuditCreateUser,
					    AuditCreateDTM
					)
					VALUES
					(   @idfsGISBaseReference,
					    @NewNode,
					    @idfsType,
						@strCode,
						@Latitude,
						@Longitude,
						@Elevation,
					    NEWID(),
					    0,
					    10519001,
						'[{"idfsLocation":' + CAST(@idfsGISBaseReference AS NVARCHAR(MAX) )+'}]',
					    @userName,
					    GETDATE()
					    )
				END 
		END

		COMMIT TRANSACTION gisUpdate;

		SELECT @ReturnCode ReturnCode
			,@ReturnMessage ReturnMessage
			,@idfsGISBaseReference idfsGISBaseReference
		

	END TRY

	BEGIN CATCH

		IF @@TRANCOUNT > 0
			ROLLBACK TRANSACTION gisUpdate;

		SET @ReturnCode = ERROR_NUMBER();
		SET @ReturnMessage = ERROR_MESSAGE();

		--SELECT @ReturnCode,	@ReturnMessage, @idfsGISBaseReference

		THROW;

	END CATCH;

END
GO
PRINT N'Altering Procedure [dbo].[USP_CONF_TESTTOTESTRESULTMATRIX_GETLIST]...';


GO
-- ================================================================================================
-- NAME: USP_CONF_TESTTOTESTRESULTMATRIX_GETLIST
-- DESCRIPTION: Returns a list of test to test result relationships
-- AUTHOR: Ricky Moss
-- Revision History:
-- Name             Date        Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Ricky Moss		03/08/2019 Initial Release
-- Stephen Long     04/07/2020 Make test name nullable for the laboratory module; for performance 
--                             purposes bring all records in one call to, so app will not have to 
--                             make repeated calls loading grid views and call on each row as 
--                             results will vary with different test names.
-- Doug Albanese	4/16/2020  This SP was generated with two different possible output structures. 
--								This is wrong and both can't be picked up by POCO.
-- Ann Xiong		11/09/2022 Modified to return no record when idfsTestName is NULL
-- exec USP_CONF_TESTTOTESTRESULTMATRIX_GETLIST 'en', 19000097, 803960000000
-- exec USP_CONF_TESTTOTESTRESULTMATRIX_GETLIST 'en', 190000104, 807510000000
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_CONF_TESTTOTESTRESULTMATRIX_GETLIST] (
	 @langId NVARCHAR(10)
	,@idfsTestResultRelation BIGINT
	,@idfsTestName BIGINT = NULL
	,@pageNo INT = 1
	,@pageSize INT = 10 
	,@sortColumn NVARCHAR(30) = 'strTestNameDefault' 
	,@sortOrder NVARCHAR(4) = 'asc'	)
AS
BEGIN
	DECLARE @firstRec INT
	DECLARE @lastRec INT
	DECLARE @t TABLE( 
		idfsTestName bigint,
		strTestNameDefault nvarchar(2000),
		strTestName nvarchar(2000),
		idfsTestResult bigint,
		strTestResultDefault nvarchar(2000),
		strTestResultName nvarchar(2000),
		blnIndicative bit
	)

	SET @firstRec = (@pageNo-1)* @pagesize
	SET @lastRec = (@pageNo*@pageSize+1)

	BEGIN TRY
		IF @idfsTestResultRelation = 19000097
			INSERT INTO @T
			SELECT idfsTestName,
				tnbr.strDefault AS strTestNameDefault,
				tnbr.name AS strTestName,
				idfsTestResult,
				trbr.strDefault AS strTestResultDefault,
				trbr.name AS strTestResultName,
				blnIndicative
			FROM dbo.trtTestTypeToTestResult ttr
			LEFT JOIN dbo.FN_GBL_Reference_GETList(@langId, 19000097) tnbr
				ON ttr.idfsTestName = tnbr.idfsReference
			LEFT JOIN dbo.FN_GBL_Reference_GETList(@langId, 19000096) trbr
				ON ttr.idfsTestResult = trbr.idfsReference
			WHERE ttr.intRowStatus = 0
				AND ((idfsTestName = @idfsTestName) 
				--OR (@idfsTestName IS NULL)
				)
		ELSE
			INSERT INTO @T
			SELECT idfsPensideTestName,
				ptnbr.strDefault AS strTestNameDefault,
				ptnbr.name AS strTestName,
				idfsPensideTestResult as idfsTestResult,
				ptrbr.strDefault AS strTestResultDefault,
				ptrbr.name AS strTestResultName,
				blnIndicative
			FROM dbo.trtPensideTestTypeToTestResult pttr
			LEFT JOIN dbo.FN_GBL_Reference_GETList(@langId, 19000104) ptnbr
				ON pttr.idfsPensideTestName = ptnbr.idfsReference
			LEFT JOIN dbo.FN_GBL_Reference_GETList(@langId, 19000105) ptrbr
				ON pttr.idfsPensideTestResult = ptrbr.idfsReference
			WHERE pttr.intRowStatus = 0
				AND ((idfsPensideTestName = @idfsTestName) 
				--OR (@idfsTestName IS NULL)
				)
		;
		WITH CTEResults as
		(
			SELECT ROW_NUMBER() OVER ( ORDER BY 
				CASE WHEN @sortColumn = 'strTestNameDefault' AND @SortOrder = 'asc' THEN strTestNameDefault END ASC,
				CASE WHEN @sortColumn = 'strTestNameDefault' AND @SortOrder = 'desc' THEN strTestNameDefault END DESC,
				CASE WHEN @sortColumn = 'strTestResultDefault' AND @SortOrder = 'asc' THEN strTestResultDefault END ASC,
				CASE WHEN @sortColumn = 'strTestResultDefault' AND @SortOrder = 'desc' THEN strTestResultDefault END DESC,
				CASE WHEN @sortColumn = 'strTestResultName' AND @SortOrder = 'asc' THEN strTestResultName END ASC,
				CASE WHEN @sortColumn = 'strTestResultName' AND @SortOrder = 'desc' THEN strTestResultName END DESC
		) AS ROWNUM,
		COUNT(*) OVER () AS 
				TotalRowCount, 
				idfsTestName,
				strTestNameDefault,
				strTestName,
				idfsTestResult, 
				strTestResultDefault,
				strTestResultName,
				blnIndicative
			FROM @T
		)

			SELECT
				TotalRowCount, 
				idfsTestName,
				strTestNameDefault,
				strTestName,
				idfsTestResult, 
				strTestResultDefault,
				strTestResultName,
				blnIndicative,
				TotalPages = (TotalRowCount/@pageSize)+IIF(TotalRowCount%@pageSize>0,1,0),
				CurrentPage = @pageNo 
		FROM CTEResults
		WHERE RowNum > @firstRec AND RowNum < @lastRec 
	END TRY

	BEGIN CATCH
		THROW
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_HUM_DISEASE_REPORT_GETList]...';


GO
-- ================================================================================================
-- Name: USP_HUM_DISEASE_REPORT_GETList
--
-- Description: Get a list of human disease reports for the human module.
--          
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Mandar Kulkarni             Initial release.
-- Stephen Long     03/26/2018 Added the person reported by name for the farm use case.
-- JWJ	            04/17/2018 Added extra col to return:  tlbHuman.idfHumanActual. Added alias 
--                             for region rayon to make them unique in results added report status 
--                             to results 
-- Harold Pryor     10/22/2018 Added input search parameters SearchStrPersonFirstName, 
--                             SearchStrPersonMiddleName, and SearchStrPersonLastName
-- Harold Pryor     10/31/2018 Added input search parameters SearchLegacyCaseID and	
--                             added strLocation (region, rayon) field to list result set
-- Harold Pryor     11/12/2018 Changed @SearchLegacyCaseID parameter from BIGINT to NVARCHAR(200)
-- Stephen Long     12/19/2018 Added pagination logic.
-- Stephen Long     07/07/2019 Added monitoring session ID to parameters and where clause.
-- Stephen Long     07/10/2019 Changed address join from exposure location to patient's current 
--                             residence address.
-- Stephen Long     07/19/2019 Corrected patient name and person entered by name ', '.
-- Stephen Long     02/26/2020 Added non-configurable site filtration rules.
-- Lamont Mitchell  03/03/2020 Modified all joins on human case and human to join on human actual.
-- Stephen Long     04/01/2020 Added if/else for first-level and second-level site types to bypass 
--                             non-configurable rules.
-- Stephen Long     05/18/2020 Added disease filtration rules from use case SAUC62.
-- Stephen Long     06/18/2020 Corrected the join on the rayon of the report current residence 
--                             address (human ID to human ID instead of human ID to human actual 
--                             ID).
-- Stephen Long     06/18/2020 Added where criteria to the query when no site filtration is 
--                             required.
-- Stephen Long     07/07/2020 Added trim to EIDSS identifier like criteria.
-- Doug Albanese	11/16/2020 Added Outbreak Tied filtering
-- Stephen Long     11/18/2020 Added site ID to the query.
-- Stephen Long     11/28/2020 Added configurable site filtration rules.
-- Stephen Long     12/13/2020 Added apply configurable filtration indicator parameter.
-- Stephen Long     12/24/2020 Modified join on disease filtration default role rule.
-- Stephen Long     12/29/2020 Changed function call on reference data for inactive records.
-- Stephen Long     01/04/2020 Added option recompile due to number of optional parameters for 
--                             better execution plan.
-- Stephen Long     04/04/2021 Added updated pagination and location hierarchy.
-- Mike Kornegay	09/23/2021 Added HospitalizationStatus field
-- Stephen Long     11/03/2021 Added disease ID field.
-- Mike Kornegay	11/16/2021 Fix hospitalization field for translations
-- Mike Kornegay	12/07/2021 Added back EnteredByPersonName 
-- Mike Kornegay	12/08/2021 Swapped out FN_GBL_GIS_ReferenceRepair for new flat hierarchy
-- Mike Kornegay	12/23/2021 Fixed YN hospitalization where clause
-- Manickandan Govindarajan 03/21/2022  Rename Param PageNumber to Page
-- Stephen Long     03/29/2022 Fix to site filtration to pull back a user's own site records.
-- Stephen Long     06/03/2022 Updated to point default access rules to base reference.
-- Mike Kornegay    06/06/2022 Added parameter OutcomeID.
-- Mike Kornegay	06/13/2022 Changed inner joins to left joins in final query because result set 
--                             was incorrect.
-- Stephen Long     08/14/2022 Added additional criteria for outbreak cases for laboratory module.
--                             TODO: replace filter outbreak cases parameter, and just filter in 
--                             the initial query to avoid getting extra unneeded records; also just 
--                             make it a boolean value.
-- Mark Wilson      09/01/2022 update to use denormalized locations to work with site filtration.
-- Stephen Long     09/22/2022 Add check for "0" page size.  If "0", then set to 1.
-- Mike Kornegay	10/11/2022 Move order by back to CTE row partition for performance and add 
--                             LanguageID to default filtration rule joins.
-- Stephen Long     11/02/2022 Fixes for 4599 - site filtration returning the wrong results.
-- Stephen Long     11/09/2022 Fix on where criteria when filtration is run; added groupings for 
--                             the user entered parameters from the search criteria page.
--
-- Testing code:
-- EXEC USP_HUM_DISEASE_REPORT_GETList 'en-US'
-- EXEC USP_HUM_DISEASE_REPORT_GETList 'en-US', @EIDSSReportID = 'H'
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_HUM_DISEASE_REPORT_GETList]
    @LanguageID NVARCHAR(50),
    @ReportKey BIGINT = NULL,
    @ReportID NVARCHAR(200) = NULL,
    @LegacyReportID NVARCHAR(200) = NULL,
    @SessionKey BIGINT = NULL,
    @PatientID BIGINT = NULL,
    @PersonID NVARCHAR(200) = NULL,
    @DiseaseID BIGINT = NULL,
    @ReportStatusTypeID BIGINT = NULL,
    @AdministrativeLevelID BIGINT = NULL,
    @DateEnteredFrom DATETIME = NULL,
    @DateEnteredTo DATETIME = NULL,
    @ClassificationTypeID BIGINT = NULL,
    @HospitalizationYNID BIGINT = NULL,
    @PatientFirstName NVARCHAR(200) = NULL,
    @PatientMiddleName NVARCHAR(200) = NULL,
    @PatientLastName NVARCHAR(200) = NULL,
    @SentByFacilityID BIGINT = NULL,
    @ReceivedByFacilityID BIGINT = NULL,
    @DiagnosisDateFrom DATETIME = NULL,
    @DiagnosisDateTo DATETIME = NULL,
    @LocalOrFieldSampleID NVARCHAR(200) = NULL,
    @DataEntrySiteID BIGINT = NULL,
    @DateOfSymptomsOnsetFrom DATETIME = NULL,
    @DateOfSymptomsOnsetTo DATETIME = NULL,
    @NotificationDateFrom DATETIME = NULL,
    @NotificationDateTo DATETIME = NULL,
    @DateOfFinalCaseClassificationFrom DATETIME = NULL,
    @DateOfFinalCaseClassificationTo DATETIME = NULL,
    @LocationOfExposureAdministrativeLevelID BIGINT = NULL,
    @OutcomeID BIGINT = NULL,
    @FilterOutbreakTiedReports INT = 0,
    @OutbreakCasesIndicator BIT = 0,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT,
    @UserEmployeeID BIGINT,
    @ApplySiteFiltrationIndicator BIT = 0,
    @SortColumn NVARCHAR(30) = 'ReportID',
    @SortOrder NVARCHAR(4) = 'DESC',
    @Page INT = 1,
    @PageSize INT = 10
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @firstRec INT,
            @lastRec INT,
            @FiltrationSiteAdministrativeLevelID AS BIGINT, 
            @LanguageCode AS BIGINT = dbo.FN_GBL_LanguageCode_GET(@LanguageID);
    SET @firstRec = (@Page - 1) * @PageSize
    SET @lastRec = (@Page * @PageSize + 1);

    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator BIT NOT NULL,
        AccessToPersonalDataPermissionIndicator BIT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
        WritePermissionIndicator BIT NOT NULL,
        DeletePermissionIndicator BIT NOT NULL, INDEX IDX_ID (ID
                                                             ));
    DECLARE @FinalResults TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator BIT NOT NULL,
        AccessToPersonalDataPermissionIndicator BIT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
        WritePermissionIndicator BIT NOT NULL,
        DeletePermissionIndicator BIT NOT NULL
    );

    BEGIN TRY
        IF @PageSize = 0
        BEGIN
            SET @PageSize = 1;
        END

        -- ========================================================================================
        -- NO SITE FILTRATION RULES APPLIED
        --
        -- For first and second level sites, do not apply any site filtration rules.
        -- ========================================================================================
        IF @ApplySiteFiltrationIndicator = 0
        BEGIN
            INSERT INTO @Results
            SELECT hc.idfHumanCase,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbHumanCase hc
                INNER JOIN dbo.tlbHuman h
                    ON h.idfHuman = hc.idfHuman
                       AND h.intRowStatus = 0
                INNER JOIN dbo.tlbGeoLocation currentAddress
                    ON currentAddress.idfGeoLocation = h.idfCurrentResidenceAddress
                LEFT JOIN dbo.gisLocationDenormalized g
                    ON g.idfsLocation = currentAddress.idfsLocation
                       AND g.idfsLanguage = @LanguageCode
                LEFT JOIN dbo.tlbMaterial m
                    ON m.idfHumanCase = hc.idfHumanCase
                       AND m.intRowStatus = 0
                LEFT JOIN dbo.tlbGeoLocation exposure
                    ON exposure.idfGeoLocation = hc.idfPointGeoLocation
                LEFT JOIN dbo.gisLocationDenormalized gExposure
                    ON gExposure.idfsLocation = exposure.idfsLocation
                       AND gExposure.idfsLanguage = @LanguageCode
            WHERE hc.intRowStatus = 0
                  AND hc.idfsFinalDiagnosis IS NOT NULL
                  AND (
                          hc.idfHumanCase = @ReportKey
                          OR @ReportKey IS NULL
                      )
                  AND (
                          hc.idfParentMonitoringSession = @SessionKey
                          OR @SessionKey IS NULL
                      )
                  AND (
                          h.idfHumanActual = @PatientID
                          OR @PatientID IS NULL
                      )
                  AND (
                          h.strPersonId = @PersonID
                          OR @PersonID IS NULL
                      )
                  AND (
                          idfsFinalDiagnosis = @DiseaseID
                          OR @DiseaseID IS NULL
                      )
                  AND (
                          idfsCaseProgressStatus = @ReportStatusTypeID
                          OR @ReportStatusTypeID IS NULL
                      )
                  AND (
                          g.Level1ID = @AdministrativeLevelID
                          OR g.Level2ID = @AdministrativeLevelID
                          OR g.Level3ID = @AdministrativeLevelID
                          OR g.Level4ID = @AdministrativeLevelID
                          OR g.Level5ID = @AdministrativeLevelID
                          OR g.Level6ID = @AdministrativeLevelID
                          OR g.Level7ID = @AdministrativeLevelID
                          OR @AdministrativeLevelID IS NULL
                      )
                  AND (
                          (CAST(hc.datEnteredDate AS DATE)
                  BETWEEN @DateEnteredFrom AND @DateEnteredTo
                          )
                          OR (
                                 @DateEnteredFrom IS NULL
                                 OR @DateEnteredTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datFinalDiagnosisDate AS DATE)
                  BETWEEN @DiagnosisDateFrom AND @DiagnosisDateTo
                          )
                          OR (
                                 @DiagnosisDateFrom IS NULL
                                 OR @DiagnosisDateTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datNotificationDate AS DATE)
                  BETWEEN @NotificationDateFrom AND @NotificationDateTo
                          )
                          OR (
                                 @NotificationDateFrom IS NULL
                                 OR @NotificationDateTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datOnSetDate AS DATE)
                  BETWEEN @DateOfSymptomsOnsetFrom AND @DateOfSymptomsOnsetTo
                          )
                          OR (
                                 @DateOfSymptomsOnsetFrom IS NULL
                                 OR @DateOfSymptomsOnsetTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datFinalCaseClassificationDate AS DATE)
                  BETWEEN @DateOfFinalCaseClassificationFrom AND @DateOfFinalCaseClassificationTo
                          )
                          OR (
                                 @DateOfFinalCaseClassificationFrom IS NULL
                                 OR @DateOfFinalCaseClassificationTo IS NULL
                             )
                      )
                  AND (
                          hc.idfReceivedByOffice = @ReceivedByFacilityID
                          OR @ReceivedByFacilityID IS NULL
                      )
                  AND (
                          hc.idfSentByOffice = @SentByFacilityID
                          OR @SentByFacilityID IS NULL
                      )
                  AND (
                          idfsFinalCaseStatus = @ClassificationTypeID
                          OR @ClassificationTypeID IS NULL
                      )
                  AND (
                          idfsYNHospitalization = @HospitalizationYNID
                          OR @HospitalizationYNID IS NULL
                      )
                  AND (
                          g.Level1ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level2ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level3ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level4ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level5ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level6ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level7ID = @LocationOfExposureAdministrativeLevelID
                          OR @LocationOfExposureAdministrativeLevelID IS NULL
                      )
                  AND (
                          (ISNULL(h.strFirstName, '') = CASE ISNULL(@PatientFirstName, '')
                                                            WHEN '' THEN
                                                                ISNULL(h.strFirstName, '')
                                                            ELSE
                                                                @PatientFirstName
                                                        END
                          )
                          OR (CHARINDEX(@PatientFirstName, ISNULL(h.strFirstName, '')) > 0)
                      )
                  AND (
                          (ISNULL(h.strSecondName, '') = CASE ISNULL(@PatientMiddleName, '')
                                                             WHEN '' THEN
                                                                 ISNULL(h.strSecondName, '')
                                                             ELSE
                                                                 @PatientMiddleName
                                                         END
                          )
                          OR (CHARINDEX(@PatientMiddleName, ISNULL(h.strSecondName, '')) > 0)
                      )
                  AND (
                          (ISNULL(h.strLastName, '') = CASE ISNULL(@PatientLastName, '')
                                                           WHEN '' THEN
                                                               ISNULL(h.strLastName, '')
                                                           ELSE
                                                               @PatientLastName
                                                       END
                          )
                          OR (CHARINDEX(@PatientLastName, ISNULL(h.strLastName, '')) > 0)
                      )
                  AND (
                          hc.idfsSite = @DataEntrySiteID
                          OR @DataEntrySiteID IS NULL
                      )
                  AND (
                          (
                              hc.idfOutbreak IS NULL
                              AND @OutbreakCasesIndicator = 0
                          )
                          OR (
                                 hc.idfOutbreak IS NOT NULL
                                 AND @OutbreakCasesIndicator = 1
                             )
                          OR (@OutbreakCasesIndicator IS NULL)
                      )
                  AND (
                          hc.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
                          OR @ReportID IS NULL
                      )
                  AND (
                          hc.LegacyCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
                          OR @LegacyReportID IS NULL
                      )
                  AND (
                          m.strFieldBarcode LIKE '%' + TRIM(@LocalOrFieldSampleID) + '%'
                          OR @LocalOrFieldSampleID IS NULL
                      )
                  AND (
                          hc.idfsOutcome = @OutcomeID
                          OR @OutcomeID IS NULL
                      )
            GROUP BY hc.idfHumanCase;
        END
        ELSE
        BEGIN -- Site Filtration
            DECLARE @InitialFilteredResults TABLE
            (
                ID BIGINT NOT NULL,
                ReadPermissionIndicator BIT NOT NULL,
                AccessToPersonalDataPermissionIndicator BIT NOT NULL,
                AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
                WritePermissionIndicator BIT NOT NULL,
                DeletePermissionIndicator BIT NOT NULL, INDEX IDX_ID (ID
                                                                     ));

            INSERT INTO @InitialFilteredResults
            SELECT hc.idfHumanCase,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbHumanCase hc
            WHERE hc.intRowStatus = 0
                  AND hc.idfsSite = @UserSiteID;

            INSERT INTO @Results
            SELECT hc.idfHumanCase,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM @InitialFilteredResults res
                INNER JOIN dbo.tlbHumanCase hc
                    ON hc.idfHumanCase = res.ID
                INNER JOIN dbo.tlbHuman h
                    ON h.idfHuman = hc.idfHuman
                       AND h.intRowStatus = 0
                INNER JOIN dbo.tlbGeoLocation currentAddress
                    ON currentAddress.idfGeoLocation = h.idfCurrentResidenceAddress
                LEFT JOIN dbo.gisLocationDenormalized g
                    ON g.idfsLocation = currentAddress.idfsLocation
                       AND g.idfsLanguage = @LanguageCode
                LEFT JOIN dbo.tlbMaterial m
                    ON m.idfHumanCase = hc.idfHumanCase
                       AND m.intRowStatus = 0
                LEFT JOIN dbo.tlbGeoLocation exposure
                    ON exposure.idfGeoLocation = hc.idfPointGeoLocation
                LEFT JOIN dbo.gisLocationDenormalized gExposure
                    ON gExposure.idfsLocation = exposure.idfsLocation
                       AND gExposure.idfsLanguage = @LanguageCode
            WHERE hc.idfsFinalDiagnosis IS NOT NULL
                  AND (
                          hc.idfHumanCase = @ReportKey
                          OR @ReportKey IS NULL
                      )
                  AND (
                          hc.idfParentMonitoringSession = @SessionKey
                          OR @SessionKey IS NULL
                      )
                  AND (
                          h.idfHumanActual = @PatientID
                          OR @PatientID IS NULL
                      )
                  AND (
                          h.strPersonId = @PersonID
                          OR @PersonID IS NULL
                      )
                  AND (
                          idfsFinalDiagnosis = @DiseaseID
                          OR @DiseaseID IS NULL
                      )
                  AND (
                          idfsCaseProgressStatus = @ReportStatusTypeID
                          OR @ReportStatusTypeID IS NULL
                      )
                  AND (
                          g.Level1ID = @AdministrativeLevelID
                          OR g.Level2ID = @AdministrativeLevelID
                          OR g.Level3ID = @AdministrativeLevelID
                          OR g.Level4ID = @AdministrativeLevelID
                          OR g.Level5ID = @AdministrativeLevelID
                          OR g.Level6ID = @AdministrativeLevelID
                          OR g.Level7ID = @AdministrativeLevelID
                          OR @AdministrativeLevelID IS NULL
                      )
                  AND (
                          (CAST(hc.datEnteredDate AS DATE)
                  BETWEEN @DateEnteredFrom AND @DateEnteredTo
                          )
                          OR (
                                 @DateEnteredFrom IS NULL
                                 OR @DateEnteredTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datFinalDiagnosisDate AS DATE)
                  BETWEEN @DiagnosisDateFrom AND @DiagnosisDateTo
                          )
                          OR (
                                 @DiagnosisDateFrom IS NULL
                                 OR @DiagnosisDateTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datNotificationDate AS DATE)
                  BETWEEN @NotificationDateFrom AND @NotificationDateTo
                          )
                          OR (
                                 @NotificationDateFrom IS NULL
                                 OR @NotificationDateTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datOnSetDate AS DATE)
                  BETWEEN @DateOfSymptomsOnsetFrom AND @DateOfSymptomsOnsetTo
                          )
                          OR (
                                 @DateOfSymptomsOnsetFrom IS NULL
                                 OR @DateOfSymptomsOnsetTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datFinalCaseClassificationDate AS DATE)
                  BETWEEN @DateOfFinalCaseClassificationFrom AND @DateOfFinalCaseClassificationTo
                          )
                          OR (
                                 @DateOfFinalCaseClassificationFrom IS NULL
                                 OR @DateOfFinalCaseClassificationTo IS NULL
                             )
                      )
                  AND (
                          hc.idfReceivedByOffice = @ReceivedByFacilityID
                          OR @ReceivedByFacilityID IS NULL
                      )
                  AND (
                          hc.idfSentByOffice = @SentByFacilityID
                          OR @SentByFacilityID IS NULL
                      )
                  AND (
                          idfsFinalCaseStatus = @ClassificationTypeID
                          OR @ClassificationTypeID IS NULL
                      )
                  AND (
                          idfsYNHospitalization = @HospitalizationYNID
                          OR @HospitalizationYNID IS NULL
                      )
                  AND (
                          g.Level1ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level2ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level3ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level4ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level5ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level6ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level7ID = @LocationOfExposureAdministrativeLevelID
                          OR @LocationOfExposureAdministrativeLevelID IS NULL
                      )
                  AND (
                          (ISNULL(h.strFirstName, '') = CASE ISNULL(@PatientFirstName, '')
                                                            WHEN '' THEN
                                                                ISNULL(h.strFirstName, '')
                                                            ELSE
                                                                @PatientFirstName
                                                        END
                          )
                          OR (CHARINDEX(@PatientFirstName, ISNULL(h.strFirstName, '')) > 0)
                      )
                  AND (
                          (ISNULL(h.strSecondName, '') = CASE ISNULL(@PatientMiddleName, '')
                                                             WHEN '' THEN
                                                                 ISNULL(h.strSecondName, '')
                                                             ELSE
                                                                 @PatientMiddleName
                                                         END
                          )
                          OR (CHARINDEX(@PatientMiddleName, ISNULL(h.strSecondName, '')) > 0)
                      )
                  AND (
                          (ISNULL(h.strLastName, '') = CASE ISNULL(@PatientLastName, '')
                                                           WHEN '' THEN
                                                               ISNULL(h.strLastName, '')
                                                           ELSE
                                                               @PatientLastName
                                                       END
                          )
                          OR (CHARINDEX(@PatientLastName, ISNULL(h.strLastName, '')) > 0)
                      )
                  AND (
                          hc.idfsSite = @DataEntrySiteID
                          OR @DataEntrySiteID IS NULL
                      )
                  AND (
                          (
                              hc.idfOutbreak IS NULL
                              AND @OutbreakCasesIndicator = 0
                          )
                          OR (
                                 hc.idfOutbreak IS NOT NULL
                                 AND @OutbreakCasesIndicator = 1
                             )
                          OR (@OutbreakCasesIndicator IS NULL)
                      )
                  AND (
                          hc.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
                          OR @ReportID IS NULL
                      )
                  AND (
                          hc.LegacyCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
                          OR @LegacyReportID IS NULL
                      )
                  AND (
                          m.strFieldBarcode LIKE '%' + TRIM(@LocalOrFieldSampleID) + '%'
                          OR @LocalOrFieldSampleID IS NULL
                      )
                  AND (
                          hc.idfsOutcome = @OutcomeID
                          OR @OutcomeID IS NULL
                      )
            GROUP BY hc.idfHumanCase;

            DECLARE @FilteredResults TABLE
            (
                ID BIGINT NOT NULL,
                ReadPermissionIndicator BIT NOT NULL,
                AccessToPersonalDataPermissionIndicator BIT NOT NULL,
                AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
                WritePermissionIndicator BIT NOT NULL,
                DeletePermissionIndicator BIT NOT NULL, INDEX IDX_ID (ID
                                                                     ));

            -- =======================================================================================
            -- DEFAULT SITE FILTRATION RULES
            --
            -- Apply active default site filtration rules for third level sites.
            -- =======================================================================================
            DECLARE @RuleActiveStatus INT = 0;
            DECLARE @AdministrativeLevelTypeID INT;
            DECLARE @DefaultAccessRules AS TABLE
            (
                AccessRuleID BIGINT NOT NULL,
                ActiveIndicator INT NOT NULL,
                ReadPermissionIndicator BIT NOT NULL,
                AccessToPersonalDataPermissionIndicator BIT NOT NULL,
                AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
                WritePermissionIndicator BIT NOT NULL,
                DeletePermissionIndicator BIT NOT NULL,
                AdministrativeLevelTypeID INT NULL
            );

            INSERT INTO @DefaultAccessRules
            SELECT AccessRuleID,
                   a.intRowStatus,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator,
                   a.AdministrativeLevelTypeID
            FROM dbo.AccessRule a
            WHERE DefaultRuleIndicator = 1;

            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
            WHERE AccessRuleID = 10537000;

            IF @RuleActiveStatus = 0
            BEGIN
                SELECT @AdministrativeLevelTypeID = AdministrativeLevelTypeID
                FROM @DefaultAccessRules
                WHERE AccessRuleID = 10537000;

                SELECT @FiltrationSiteAdministrativeLevelID = CASE
                                                                  WHEN @AdministrativeLevelTypeID = 1 THEN
                                                                      g.Level1ID
                                                                  WHEN @AdministrativeLevelTypeID = 2 THEN
                                                                      g.Level2ID
                                                                  WHEN @AdministrativeLevelTypeID = 3 THEN
                                                                      g.Level3ID
                                                                  WHEN @AdministrativeLevelTypeID = 4 THEN
                                                                      g.Level4ID
                                                                  WHEN @AdministrativeLevelTypeID = 5 THEN
                                                                      g.Level5ID
                                                                  WHEN @AdministrativeLevelTypeID = 6 THEN
                                                                      g.Level6ID
                                                                  WHEN @AdministrativeLevelTypeID = 7 THEN
                                                                      g.Level7ID
                                                              END
                FROM dbo.tlbOffice o
                    INNER JOIN dbo.tlbGeoLocationShared l
                        ON l.idfGeoLocationShared = o.idfLocation
                           AND l.intRowStatus = 0
                    INNER JOIN dbo.gisLocationDenormalized g
                        ON g.idfsLocation = l.idfsLocation
                           AND g.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
                WHERE o.intRowStatus = 0
                      AND o.idfOffice = @UserOrganizationID;

                -- Administrative level specified in the rule of the site where the report was created.
                INSERT INTO @FilteredResults
                SELECT h.idfHumanCase,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbHumanCase h
                    INNER JOIN dbo.tstSite s
                        ON h.idfsSite = s.idfsSite
                    INNER JOIN dbo.tlbOffice o
                        ON o.idfOffice = s.idfOffice
                           AND o.intRowStatus = 0
                    INNER JOIN dbo.tlbGeoLocationShared l
                        ON l.idfGeoLocationShared = o.idfLocation
                           AND l.intRowStatus = 0
                    INNER JOIN dbo.gisLocationDenormalized g
                        ON g.idfsLocation = l.idfsLocation
                           AND g.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537000
                WHERE h.intRowStatus = 0
                      AND (
                              g.Level1ID = @FiltrationSiteAdministrativeLevelID
                              AND @AdministrativeLevelTypeID = 1
                              OR g.Level2ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 2
                              OR g.Level3ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 3
                              OR g.Level4ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 4
                              OR g.Level5ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 5
                              OR g.Level6ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 6
                              OR g.Level7ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 7
                          )

                -- Administrative level specified in the rule of the report current residence address.
                INSERT INTO @FilteredResults
                SELECT h.idfHumanCase,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbHumanCase h
                    INNER JOIN dbo.tlbHuman hu
                        ON hu.idfHuman = h.idfHuman
                           AND hu.intRowStatus = 0
                    INNER JOIN dbo.tlbGeoLocation l
                        ON l.idfGeoLocation = hu.idfCurrentResidenceAddress
                           AND l.intRowStatus = 0
                    INNER JOIN dbo.gisLocationDenormalized g
                        ON g.idfsLocation = l.idfsLocation
                           AND g.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537000
                WHERE h.intRowStatus = 0
                      AND (
                              g.Level1ID = @FiltrationSiteAdministrativeLevelID
                              AND @AdministrativeLevelTypeID = 1
                              OR g.Level2ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 2
                              OR g.Level3ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 3
                              OR g.Level4ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 4
                              OR g.Level5ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 5
                              OR g.Level6ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 6
                              OR g.Level7ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 7
                          )

                -- Administrative level specified in the rule of the report location of exposure, 
                -- if corresponding field was filled in.
                INSERT INTO @FilteredResults
                SELECT h.idfHumanCase,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbHumanCase h
                    INNER JOIN dbo.tlbGeoLocation l
                        ON l.idfGeoLocation = h.idfPointGeoLocation
                           AND l.intRowStatus = 0
                    INNER JOIN dbo.gisLocationDenormalized g
                        ON g.idfsLocation = l.idfsLocation
                           AND g.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537000
                WHERE h.intRowStatus = 0
                      AND (
                              g.Level1ID = @FiltrationSiteAdministrativeLevelID
                              AND @AdministrativeLevelTypeID = 1
                              OR g.Level2ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 2
                              OR g.Level3ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 3
                              OR g.Level4ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 4
                              OR g.Level5ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 5
                              OR g.Level6ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 6
                              OR g.Level7ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 7
                          )
            END;

            -- Report data shall be available to all sites' organizations connected to the particular report.
            -- Notification sent by, notification received by, facility where the patient first sought 
            -- care, hospital, and the conducting investigation organizations.
            SELECT @RuleActiveStatus = intRowStatus
            FROM dbo.AccessRule
            WHERE AccessRuleID = 10537001;

            IF @RuleActiveStatus = 0
            BEGIN
                INSERT INTO @FilteredResults
                SELECT h.idfHumanCase,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbHumanCase h
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537001
                WHERE h.intRowStatus = 0
                      AND (
                              h.idfSentByOffice = @UserOrganizationID
                              OR h.idfReceivedByOffice = @UserOrganizationID
                              OR h.idfSoughtCareFacility = @UserOrganizationID
                              OR h.idfHospital = @UserOrganizationID
                              OR h.idfInvestigatedByOffice = @UserOrganizationID
                          )
                ORDER BY h.idfHumanCase;

                -- Sample collected by and sent to organizations
                INSERT INTO @FilteredResults
                SELECT MAX(m.idfHumanCase),
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbMaterial m
                    INNER JOIN dbo.tlbHumanCase h
                        ON h.idfHumanCase = m.idfHumanCase
                           AND h.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537001
                WHERE m.intRowStatus = 0
                      AND (
                              m.idfFieldCollectedByOffice = @UserOrganizationID
                              OR m.idfSendToOffice = @UserOrganizationID
                          )
                GROUP BY m.idfHumanCase,
                         a.ReadPermissionIndicator,
                         a.AccessToPersonalDataPermissionIndicator,
                         a.AccessToGenderAndAgeDataPermissionIndicator,
                         a.WritePermissionIndicator,
                         a.DeletePermissionIndicator;

                -- Sample transferred to organizations
                INSERT INTO @FilteredResults
                SELECT MAX(m.idfHumanCase),
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbMaterial m
                    INNER JOIN dbo.tlbHumanCase h
                        ON h.idfHumanCase = m.idfHumanCase
                           AND h.intRowStatus = 0
                    INNER JOIN dbo.tlbTransferOutMaterial tom
                        ON m.idfMaterial = tom.idfMaterial
                           AND tom.intRowStatus = 0
                    INNER JOIN dbo.tlbTransferOUT t
                        ON tom.idfTransferOut = t.idfTransferOut
                           AND t.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537001
                WHERE m.intRowStatus = 0
                      AND t.idfSendToOffice = @UserOrganizationID
                GROUP BY m.idfHumanCase,
                         a.ReadPermissionIndicator,
                         a.AccessToPersonalDataPermissionIndicator,
                         a.AccessToGenderAndAgeDataPermissionIndicator,
                         a.WritePermissionIndicator,
                         a.DeletePermissionIndicator;
            END;

            --
            -- Report data shall be available to the sites with the connected outbreak, if the report 
            -- is the primary report/session for an outbreak.
            --
            SELECT @RuleActiveStatus = intRowStatus
            FROM dbo.AccessRule
            WHERE AccessRuleID = 10537002;

            IF @RuleActiveStatus = 0
            BEGIN
                INSERT INTO @FilteredResults
                SELECT h.idfHumanCase,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbHumanCase h
                    INNER JOIN dbo.tlbOutbreak o
                        ON h.idfHumanCase = o.idfPrimaryCaseOrSession
                           AND o.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537002
                WHERE h.intRowStatus = 0
                      AND o.idfsSite = @UserSiteID;
            END;

            -- =======================================================================================
            -- CONFIGURABLE SITE FILTRATION RULES
            -- 
            -- Apply configurable site filtration rules for use case SAUC34. Some of these rules may 
            -- overlap the default rules.
            -- =======================================================================================
            --
            -- Apply at the user's site group level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = h.idfsSite
                INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                    ON userSiteGroup.idfsSite = @UserSiteID
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = h.idfsSite
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's employee group level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = h.idfsSite
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's ID level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = h.idfsSite
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site group level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tflSiteToSiteGroup sgs
                    ON sgs.idfsSite = @UserSiteID
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND sgs.idfsSite = h.idfsSite;

            -- 
            -- Apply at the user's site level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteID = h.idfsSite;

            -- 
            -- Apply at the user's employee group level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteID = h.idfsSite;

            -- 
            -- Apply at the user's ID level, granted by a site.
            ----
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteID = h.idfsSite;

            -- Copy filtered results to results and use search criteria
            INSERT INTO @Results
            SELECT ID,
                   ReadPermissionIndicator,
                   AccessToPersonalDataPermissionIndicator,
                   AccessToGenderAndAgeDataPermissionIndicator,
                   WritePermissionIndicator,
                   DeletePermissionIndicator
            FROM @FilteredResults
                INNER JOIN dbo.tlbHumanCase hc
                    ON hc.idfHumanCase = ID
                INNER JOIN dbo.tlbHuman h
                    ON h.idfHuman = hc.idfHuman
                       AND h.intRowStatus = 0
                INNER JOIN dbo.tlbHumanActual ha
                    ON ha.idfHumanActual = h.idfHumanActual
                       AND ha.intRowStatus = 0
                INNER JOIN dbo.tlbGeoLocation currentAddress
                    ON currentAddress.idfGeoLocation = h.idfCurrentResidenceAddress
                LEFT JOIN dbo.gisLocationDenormalized g
                    ON g.idfsLocation = currentAddress.idfsLocation
                       AND g.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
                LEFT JOIN dbo.tlbMaterial m
                    ON m.idfHumanCase = hc.idfHumanCase
                       AND m.intRowStatus = 0
                LEFT JOIN dbo.tlbGeoLocation exposure
                    ON exposure.idfGeoLocation = hc.idfPointGeoLocation
                LEFT JOIN dbo.gisLocationDenormalized gExposure
                    ON gExposure.idfsLocation = exposure.idfsLocation
                       AND gExposure.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
            WHERE hc.intRowStatus = 0
                  AND hc.idfsFinalDiagnosis IS NOT NULL
                  AND (
                          hc.idfHumanCase = @ReportKey
                          OR @ReportKey IS NULL
                      )
                  AND (
                          hc.idfParentMonitoringSession = @SessionKey
                          OR @SessionKey IS NULL
                      )
                  AND (
                          ha.idfHumanActual = @PatientID
                          OR @PatientID IS NULL
                      )
                  AND (
                          h.strPersonId = @PersonID
                          OR @PersonID IS NULL
                      )
                  AND (
                          idfsFinalDiagnosis = @DiseaseID
                          OR @DiseaseID IS NULL
                      )
                  AND (
                          idfsCaseProgressStatus = @ReportStatusTypeID
                          OR @ReportStatusTypeID IS NULL
                      )
                  AND (
                          g.Level1ID = @AdministrativeLevelID
                          OR g.Level2ID = @AdministrativeLevelID
                          OR g.Level3ID = @AdministrativeLevelID
                          OR g.Level4ID = @AdministrativeLevelID
                          OR g.Level5ID = @AdministrativeLevelID
                          OR g.Level6ID = @AdministrativeLevelID
                          OR g.Level7ID = @AdministrativeLevelID
                          OR @AdministrativeLevelID IS NULL
                      )
                  AND (
                          (CAST(hc.datEnteredDate AS DATE)
                  BETWEEN @DateEnteredFrom AND @DateEnteredTo
                          )
                          OR (
                                 @DateEnteredFrom IS NULL
                                 OR @DateEnteredTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datFinalDiagnosisDate AS DATE)
                  BETWEEN @DiagnosisDateFrom AND @DiagnosisDateTo
                          )
                          OR (
                                 @DiagnosisDateFrom IS NULL
                                 OR @DiagnosisDateTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datNotificationDate AS DATE)
                  BETWEEN @NotificationDateFrom AND @NotificationDateTo
                          )
                          OR (
                                 @NotificationDateFrom IS NULL
                                 OR @NotificationDateTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datOnSetDate AS DATE)
                  BETWEEN @DateOfSymptomsOnsetFrom AND @DateOfSymptomsOnsetTo
                          )
                          OR (
                                 @DateOfSymptomsOnsetFrom IS NULL
                                 OR @DateOfSymptomsOnsetTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datFinalCaseClassificationDate AS DATE)
                  BETWEEN @DateOfFinalCaseClassificationFrom AND @DateOfFinalCaseClassificationTo
                          )
                          OR (
                                 @DateOfFinalCaseClassificationFrom IS NULL
                                 OR @DateOfFinalCaseClassificationTo IS NULL
                             )
                      )
                  AND (
                          hc.idfReceivedByOffice = @ReceivedByFacilityID
                          OR @ReceivedByFacilityID IS NULL
                      )
                  AND (
                          hc.idfSentByOffice = @SentByFacilityID
                          OR @SentByFacilityID IS NULL
                      )
                  AND (
                          idfsFinalCaseStatus = @ClassificationTypeID
                          OR @ClassificationTypeID IS NULL
                      )
                  AND (
                          idfsYNHospitalization = @HospitalizationYNID
                          OR @HospitalizationYNID IS NULL
                      )
                  AND (
                          g.Level1ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level2ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level3ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level4ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level5ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level6ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level7ID = @LocationOfExposureAdministrativeLevelID
                          OR @LocationOfExposureAdministrativeLevelID IS NULL
                      )
                  AND (
                          (ISNULL(h.strFirstName, '') = CASE ISNULL(@PatientFirstName, '')
                                                            WHEN '' THEN
                                                                ISNULL(h.strFirstName, '')
                                                            ELSE
                                                                @PatientFirstName
                                                        END
                          )
                          OR (CHARINDEX(@PatientFirstName, ISNULL(h.strFirstName, '')) > 0)
                      )
                  AND (
                          (ISNULL(h.strSecondName, '') = CASE ISNULL(@PatientMiddleName, '')
                                                             WHEN '' THEN
                                                                 ISNULL(h.strSecondName, '')
                                                             ELSE
                                                                 @PatientMiddleName
                                                         END
                          )
                          OR (CHARINDEX(@PatientMiddleName, ISNULL(h.strSecondName, '')) > 0)
                      )
                  AND (
                          (ISNULL(h.strLastName, '') = CASE ISNULL(@PatientLastName, '')
                                                           WHEN '' THEN
                                                               ISNULL(h.strLastName, '')
                                                           ELSE
                                                               @PatientLastName
                                                       END
                          )
                          OR (CHARINDEX(@PatientLastName, ISNULL(h.strLastName, '')) > 0)
                      )
                  AND (
                          hc.idfsSite = @DataEntrySiteID
                          OR @DataEntrySiteID IS NULL
                      )
                  AND (
                          (
                              hc.idfOutbreak IS NULL
                              AND @OutbreakCasesIndicator = 0
                          )
                          OR (
                                 hc.idfOutbreak IS NOT NULL
                                 AND @OutbreakCasesIndicator = 1
                             )
                          OR (@OutbreakCasesIndicator IS NULL)
                      )
                  AND (
                          hc.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
                          OR @ReportID IS NULL
                      )
                  AND (
                          hc.LegacyCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
                          OR @LegacyReportID IS NULL
                      )
                  AND (
                          m.strFieldBarcode LIKE '%' + TRIM(@LocalOrFieldSampleID) + '%'
                          OR @LocalOrFieldSampleID IS NULL
                      )
                  AND (
                          hc.idfsOutcome = @OutcomeID
                          OR @OutcomeID IS NULL
                      )
            GROUP BY ID,
                     ReadPermissionIndicator,
                     AccessToPersonalDataPermissionIndicator,
                     AccessToGenderAndAgeDataPermissionIndicator,
                     WritePermissionIndicator,
                     DeletePermissionIndicator;
        END;

        -- =======================================================================================
        -- Remove "Outbreak" tied disease reports, if filtering is needed
        -- =======================================================================================
        IF @FilterOutbreakTiedReports = 1
        BEGIN
            DELETE I
            FROM @Results I
                INNER JOIN dbo.tlbHumanCase hc
                    ON hc.idfHumanCase = I.ID
            WHERE hc.idfOutbreak IS NOT NULL;
        END;

        -- =======================================================================================
        -- DISEASE FILTRATION RULES
        --
        -- Apply disease filtration rules from use case SAUC62.
        -- =======================================================================================
        -- 
        -- Apply level 0 disease filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --

        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT h.idfHumanCase
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = h.idfsFinalDiagnosis
                       AND oa.intRowStatus = 0
            WHERE oa.intPermission = 1
                  AND oa.idfsObjectType = 10060001 -- Disease
                  AND oa.idfActor = -506 -- Default role
        );

        --
        -- Apply level 1 disease filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        INSERT INTO @Results
        SELECT hc.idfHumanCase,
               1,
               1,
               1,
               1,
               1
        FROM dbo.tlbHumanCase hc
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = hc.idfsFinalDiagnosis
                   AND oa.intRowStatus = 0
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.tlbHuman h
                ON h.idfHuman = hc.idfHuman
                   AND h.intRowStatus = 0
            INNER JOIN dbo.tlbGeoLocation currentAddress
                ON currentAddress.idfGeoLocation = h.idfCurrentResidenceAddress
            LEFT JOIN dbo.gisLocationDenormalized g
                ON g.idfsLocation = currentAddress.idfsLocation
                   AND g.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
            LEFT JOIN dbo.tlbMaterial m
                ON m.idfHumanCase = hc.idfHumanCase
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbGeoLocation exposure
                ON exposure.idfGeoLocation = hc.idfPointGeoLocation
            LEFT JOIN dbo.gisLocationDenormalized gExposure
                ON gExposure.idfsLocation = exposure.idfsLocation
                   AND gExposure.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
        WHERE oa.intPermission = 2 -- Allow permission
              AND hc.intRowStatus = 0
              AND oa.idfsObjectType = 10060001 -- Disease
              AND oa.idfActor = egm.idfEmployeeGroup
              AND hc.idfsFinalDiagnosis IS NOT NULL
              AND (
                      hc.idfHumanCase = @ReportKey
                      OR @ReportKey IS NULL
                  )
              AND (
                      hc.idfParentMonitoringSession = @SessionKey
                      OR @SessionKey IS NULL
                  )
              AND (
                      h.idfHumanActual = @PatientID
                      OR @PatientID IS NULL
                  )
              AND (
                      h.strPersonId = @PersonID
                      OR @PersonID IS NULL
                  )
              AND (
                      idfsFinalDiagnosis = @DiseaseID
                      OR @DiseaseID IS NULL
                  )
              AND (
                      idfsCaseProgressStatus = @ReportStatusTypeID
                      OR @ReportStatusTypeID IS NULL
                  )
              AND (
                      g.Level1ID = @AdministrativeLevelID
                      OR g.Level2ID = @AdministrativeLevelID
                      OR g.Level3ID = @AdministrativeLevelID
                      OR g.Level4ID = @AdministrativeLevelID
                      OR g.Level5ID = @AdministrativeLevelID
                      OR g.Level6ID = @AdministrativeLevelID
                      OR g.Level7ID = @AdministrativeLevelID
                      OR @AdministrativeLevelID IS NULL
                  )
              AND (
                      (CAST(hc.datEnteredDate AS DATE)
              BETWEEN @DateEnteredFrom AND @DateEnteredTo
                      )
                      OR (
                             @DateEnteredFrom IS NULL
                             OR @DateEnteredTo IS NULL
                         )
                  )
              AND (
                      (CAST(hc.datFinalDiagnosisDate AS DATE)
              BETWEEN @DiagnosisDateFrom AND @DiagnosisDateTo
                      )
                      OR (
                             @DiagnosisDateFrom IS NULL
                             OR @DiagnosisDateTo IS NULL
                         )
                  )
              AND (
                      (CAST(hc.datNotificationDate AS DATE)
              BETWEEN @NotificationDateFrom AND @NotificationDateTo
                      )
                      OR (
                             @NotificationDateFrom IS NULL
                             OR @NotificationDateTo IS NULL
                         )
                  )
              AND (
                      (CAST(hc.datOnSetDate AS DATE)
              BETWEEN @DateOfSymptomsOnsetFrom AND @DateOfSymptomsOnsetTo
                      )
                      OR (
                             @DateOfSymptomsOnsetFrom IS NULL
                             OR @DateOfSymptomsOnsetTo IS NULL
                         )
                  )
              AND (
                      (CAST(hc.datFinalCaseClassificationDate AS DATE)
              BETWEEN @DateOfFinalCaseClassificationFrom AND @DateOfFinalCaseClassificationTo
                      )
                      OR (
                             @DateOfFinalCaseClassificationFrom IS NULL
                             OR @DateOfFinalCaseClassificationTo IS NULL
                         )
                  )
              AND (
                      hc.idfReceivedByOffice = @ReceivedByFacilityID
                      OR @ReceivedByFacilityID IS NULL
                  )
              AND (
                      hc.idfSentByOffice = @SentByFacilityID
                      OR @SentByFacilityID IS NULL
                  )
              AND (
                      idfsFinalCaseStatus = @ClassificationTypeID
                      OR @ClassificationTypeID IS NULL
                  )
              AND (
                      idfsYNHospitalization = @HospitalizationYNID
                      OR @HospitalizationYNID IS NULL
                  )
              AND (
                      g.Level1ID = @LocationOfExposureAdministrativeLevelID
                      OR g.Level2ID = @LocationOfExposureAdministrativeLevelID
                      OR g.Level3ID = @LocationOfExposureAdministrativeLevelID
                      OR g.Level4ID = @LocationOfExposureAdministrativeLevelID
                      OR g.Level5ID = @LocationOfExposureAdministrativeLevelID
                      OR g.Level6ID = @LocationOfExposureAdministrativeLevelID
                      OR g.Level7ID = @LocationOfExposureAdministrativeLevelID
                      OR @LocationOfExposureAdministrativeLevelID IS NULL
                  )
              AND (
                      (ISNULL(h.strFirstName, '') = CASE ISNULL(@PatientFirstName, '')
                                                        WHEN '' THEN
                                                            ISNULL(h.strFirstName, '')
                                                        ELSE
                                                            @PatientFirstName
                                                    END
                      )
                      OR (CHARINDEX(@PatientFirstName, ISNULL(h.strFirstName, '')) > 0)
                  )
              AND (
                      (ISNULL(h.strSecondName, '') = CASE ISNULL(@PatientMiddleName, '')
                                                         WHEN '' THEN
                                                             ISNULL(h.strSecondName, '')
                                                         ELSE
                                                             @PatientMiddleName
                                                     END
                      )
                      OR (CHARINDEX(@PatientMiddleName, ISNULL(h.strSecondName, '')) > 0)
                  )
              AND (
                      (ISNULL(h.strLastName, '') = CASE ISNULL(@PatientLastName, '')
                                                       WHEN '' THEN
                                                           ISNULL(h.strLastName, '')
                                                       ELSE
                                                           @PatientLastName
                                                   END
                      )
                      OR (CHARINDEX(@PatientLastName, ISNULL(h.strLastName, '')) > 0)
                  )
              AND (
                      hc.idfsSite = @DataEntrySiteID
                      OR @DataEntrySiteID IS NULL
                  )
              AND (
                      (
                          hc.idfOutbreak IS NULL
                          AND @OutbreakCasesIndicator = 0
                      )
                      OR (
                             hc.idfOutbreak IS NOT NULL
                             AND @OutbreakCasesIndicator = 1
                         )
                      OR (@OutbreakCasesIndicator IS NULL)
                  )
              AND (
                      hc.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
                      OR @ReportID IS NULL
                  )
              AND (
                      hc.LegacyCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
                      OR @LegacyReportID IS NULL
                  )
              AND (
                      m.strFieldBarcode LIKE '%' + TRIM(@LocalOrFieldSampleID) + '%'
                      OR @LocalOrFieldSampleID IS NULL
                  )
              AND (
                      hc.idfsOutcome = @OutcomeID
                      OR @OutcomeID IS NULL
                  )
        GROUP BY hc.idfHumanCase;

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbHumanCase hc
                ON hc.idfHumanCase = res.ID
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = hc.idfsFinalDiagnosis
                   AND oa.intRowStatus = 0
        WHERE oa.intPermission = 1
              AND oa.idfsObjectType = 10060001 -- Disease
              AND oa.idfActor = egm.idfEmployeeGroup;

        --
        -- Apply level 2 disease filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        INSERT INTO @Results
        SELECT hc.idfHumanCase,
               1,
               1,
               1,
               1,
               1
        FROM dbo.tlbHumanCase hc
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = hc.idfsFinalDiagnosis
                   AND oa.intRowStatus = 0
            INNER JOIN dbo.tlbHuman h
                ON h.idfHuman = hc.idfHuman
                   AND h.intRowStatus = 0
            INNER JOIN dbo.tlbGeoLocation currentAddress
                ON currentAddress.idfGeoLocation = h.idfCurrentResidenceAddress
            LEFT JOIN dbo.gisLocationDenormalized g
                ON g.idfsLocation = currentAddress.idfsLocation
                   AND g.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
            LEFT JOIN dbo.tlbMaterial m
                ON m.idfHumanCase = hc.idfHumanCase
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbGeoLocation exposure
                ON exposure.idfGeoLocation = hc.idfPointGeoLocation
            LEFT JOIN dbo.gisLocationDenormalized gExposure
                ON gExposure.idfsLocation = exposure.idfsLocation
                   AND gExposure.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
        WHERE oa.intPermission = 2 -- Allow permission
              AND hc.intRowStatus = 0
              AND oa.idfsObjectType = 10060001 -- Disease
              AND oa.idfActor = @UserEmployeeID
              AND hc.idfsFinalDiagnosis IS NOT NULL
              AND (
                      hc.idfHumanCase = @ReportKey
                      OR @ReportKey IS NULL
                  )
              AND (
                      hc.idfParentMonitoringSession = @SessionKey
                      OR @SessionKey IS NULL
                  )
              AND (
                      h.idfHumanActual = @PatientID
                      OR @PatientID IS NULL
                  )
              AND (
                      h.strPersonId = @PersonID
                      OR @PersonID IS NULL
                  )
              AND (
                      idfsFinalDiagnosis = @DiseaseID
                      OR @DiseaseID IS NULL
                  )
              AND (
                      idfsCaseProgressStatus = @ReportStatusTypeID
                      OR @ReportStatusTypeID IS NULL
                  )
              AND (
                      g.Level1ID = @AdministrativeLevelID
                      OR g.Level2ID = @AdministrativeLevelID
                      OR g.Level3ID = @AdministrativeLevelID
                      OR g.Level4ID = @AdministrativeLevelID
                      OR g.Level5ID = @AdministrativeLevelID
                      OR g.Level6ID = @AdministrativeLevelID
                      OR g.Level7ID = @AdministrativeLevelID
                      OR @AdministrativeLevelID IS NULL
                  )
              AND (
                      (CAST(hc.datEnteredDate AS DATE)
              BETWEEN @DateEnteredFrom AND @DateEnteredTo
                      )
                      OR (
                             @DateEnteredFrom IS NULL
                             OR @DateEnteredTo IS NULL
                         )
                  )
              AND (
                      (CAST(hc.datFinalDiagnosisDate AS DATE)
              BETWEEN @DiagnosisDateFrom AND @DiagnosisDateTo
                      )
                      OR (
                             @DiagnosisDateFrom IS NULL
                             OR @DiagnosisDateTo IS NULL
                         )
                  )
              AND (
                      (CAST(hc.datNotificationDate AS DATE)
              BETWEEN @NotificationDateFrom AND @NotificationDateTo
                      )
                      OR (
                             @NotificationDateFrom IS NULL
                             OR @NotificationDateTo IS NULL
                         )
                  )
              AND (
                      (CAST(hc.datOnSetDate AS DATE)
              BETWEEN @DateOfSymptomsOnsetFrom AND @DateOfSymptomsOnsetTo
                      )
                      OR (
                             @DateOfSymptomsOnsetFrom IS NULL
                             OR @DateOfSymptomsOnsetTo IS NULL
                         )
                  )
              AND (
                      (CAST(hc.datFinalCaseClassificationDate AS DATE)
              BETWEEN @DateOfFinalCaseClassificationFrom AND @DateOfFinalCaseClassificationTo
                      )
                      OR (
                             @DateOfFinalCaseClassificationFrom IS NULL
                             OR @DateOfFinalCaseClassificationTo IS NULL
                         )
                  )
              AND (
                      hc.idfReceivedByOffice = @ReceivedByFacilityID
                      OR @ReceivedByFacilityID IS NULL
                  )
              AND (
                      hc.idfSentByOffice = @SentByFacilityID
                      OR @SentByFacilityID IS NULL
                  )
              AND (
                      idfsFinalCaseStatus = @ClassificationTypeID
                      OR @ClassificationTypeID IS NULL
                  )
              AND (
                      idfsYNHospitalization = @HospitalizationYNID
                      OR @HospitalizationYNID IS NULL
                  )
              AND (
                      g.Level1ID = @LocationOfExposureAdministrativeLevelID
                      OR g.Level2ID = @LocationOfExposureAdministrativeLevelID
                      OR g.Level3ID = @LocationOfExposureAdministrativeLevelID
                      OR g.Level4ID = @LocationOfExposureAdministrativeLevelID
                      OR g.Level5ID = @LocationOfExposureAdministrativeLevelID
                      OR g.Level6ID = @LocationOfExposureAdministrativeLevelID
                      OR g.Level7ID = @LocationOfExposureAdministrativeLevelID
                      OR @LocationOfExposureAdministrativeLevelID IS NULL
                  )
              AND (
                      (ISNULL(h.strFirstName, '') = CASE ISNULL(@PatientFirstName, '')
                                                        WHEN '' THEN
                                                            ISNULL(h.strFirstName, '')
                                                        ELSE
                                                            @PatientFirstName
                                                    END
                      )
                      OR (CHARINDEX(@PatientFirstName, ISNULL(h.strFirstName, '')) > 0)
                  )
              AND (
                      (ISNULL(h.strSecondName, '') = CASE ISNULL(@PatientMiddleName, '')
                                                         WHEN '' THEN
                                                             ISNULL(h.strSecondName, '')
                                                         ELSE
                                                             @PatientMiddleName
                                                     END
                      )
                      OR (CHARINDEX(@PatientMiddleName, ISNULL(h.strSecondName, '')) > 0)
                  )
              AND (
                      (ISNULL(h.strLastName, '') = CASE ISNULL(@PatientLastName, '')
                                                       WHEN '' THEN
                                                           ISNULL(h.strLastName, '')
                                                       ELSE
                                                           @PatientLastName
                                                   END
                      )
                      OR (CHARINDEX(@PatientLastName, ISNULL(h.strLastName, '')) > 0)
                  )
              AND (
                      hc.idfsSite = @DataEntrySiteID
                      OR @DataEntrySiteID IS NULL
                  )
              AND (
                      (
                          hc.idfOutbreak IS NULL
                          AND @OutbreakCasesIndicator = 0
                      )
                      OR (
                             hc.idfOutbreak IS NOT NULL
                             AND @OutbreakCasesIndicator = 1
                         )
                      OR (@OutbreakCasesIndicator IS NULL)
                  )
              AND (
                      hc.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
                      OR @ReportID IS NULL
                  )
              AND (
                      hc.LegacyCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
                      OR @LegacyReportID IS NULL
                  )
              AND (
                      m.strFieldBarcode LIKE '%' + TRIM(@LocalOrFieldSampleID) + '%'
                      OR @LocalOrFieldSampleID IS NULL
                  )
              AND (
                      hc.idfsOutcome = @OutcomeID
                      OR @OutcomeID IS NULL
                  )
        GROUP BY hc.idfHumanCase;

        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT hc.idfHumanCase
            FROM dbo.tlbHumanCase hc
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = hc.idfsFinalDiagnosis
                       AND oa.intRowStatus = 0
            WHERE intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060001 -- Disease
                  AND idfActor = @UserEmployeeID
        );

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        INSERT INTO @FinalResults
        SELECT ID,
               ReadPermissionIndicator,
               AccessToPersonalDataPermissionIndicator,
               AccessToGenderAndAgeDataPermissionIndicator,
               WritePermissionIndicator,
               DeletePermissionIndicator
        FROM @Results res
        WHERE res.ReadPermissionIndicator = 1
        GROUP BY ID,
                 ReadPermissionIndicator,
                 AccessToPersonalDataPermissionIndicator,
                 AccessToGenderAndAgeDataPermissionIndicator,
                 WritePermissionIndicator,
                 DeletePermissionIndicator;


        WITH paging
        AS (SELECT ROW_NUMBER() OVER (ORDER BY CASE
                                                   WHEN @SortColumn = 'ReportID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       hc.strCaseID
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'ReportID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       hc.strCaseID
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'EnteredDate'
                                                        AND @SortOrder = 'ASC' THEN
                                                       hc.datEnteredDate
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EnteredDate'
                                                        AND @SortOrder = 'DESC' THEN
                                                       hc.datEnteredDate
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'DiseaseName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       disease.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'DiseaseName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       disease.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'PersonName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       ISNULL(h.strLastName, N'') + ISNULL(', ' + h.strFirstName, N'')
                                                       + ISNULL(' ' + h.strSecondName, N'')
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'PersonName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       ISNULL(h.strLastName, N'') + ISNULL(', ' + h.strFirstName, N'')
                                                       + ISNULL(' ' + h.strSecondName, N'')
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'PersonLocation'
                                                        AND @SortOrder = 'ASC' THEN
                                               (LH.AdminLevel1Name + ', ' + LH.AdminLevel2Name)
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'PersonLocation'
                                                        AND @SortOrder = 'DESC' THEN
                                               (LH.AdminLevel1Name + ', ' + LH.AdminLevel2Name)
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'ClassificationTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       finalClassification.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'ClassificationTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       finalClassification.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'ReportStatusTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       reportStatus.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'ReportStatusTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       reportStatus.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'LegacyReportID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       hc.LegacyCaseID
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'LegacyReportID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       hc.LegacyCaseID
                                               END DESC
                                     ) AS ROWNUM,
                   res.ID AS ReportKey,
                   hc.strCaseId AS ReportID,
                   hc.LegacyCaseID AS LegacyReportID,
                   reportStatus.name AS ReportStatusTypeName,
                   reportType.name AS ReportTypeName,
                   hc.datTentativeDiagnosisDate AS TentativeDiagnosisDate,
                   hc.datFinalDiagnosisDate AS FinalDiagnosisDate,
                   ISNULL(finalClassification.name, initialClassification.name) AS ClassificationTypeName,
                   finalClassification.name AS FinalClassificationTypeName,
                   hc.datOnSetDate AS DateOfOnset,
                   hc.idfsFinalDiagnosis AS DiseaseID,
                   disease.Name AS DiseaseName,
                   h.idfHumanActual AS PersonMasterID,
                   hc.idfHuman AS PersonKey,
                   haai.EIDSSPersonID AS PersonID,
                   h.strPersonID AS PersonalID,
                   dbo.FN_GBL_ConcatFullName(h.strLastName, h.strFirstName, h.strSecondName) AS PersonName,
                   ISNULL(LH.AdminLevel1Name, '') + IIF(LH.AdminLevel2Name IS NULL, '', ', ')
                   + ISNULL(LH.AdminLevel2Name, '') AS PersonLocation,
                   ha.strEmployerName AS EmployerName,
                   hc.datEnteredDate AS EnteredDate,
                   ISNULL(p.strFamilyName, N'') + ISNULL(', ' + p.strFirstName, N'')
                   + ISNULL(' ' + p.strSecondName, N'') AS EnteredByPersonName,
                   hc.datModificationDate AS ModificationDate,
                   ISNULL(hospitalization.name, hospitalization.strDefault) AS HospitalizationStatus,
                   hc.idfsSite AS SiteID,
                   res.ReadPermissionIndicator AS ReadPermissionIndicator,
                   res.AccessToPersonalDataPermissionIndicator AS AccessToPersonalDataPermissionIndicator,
                   res.AccessToGenderAndAgeDataPermissionIndicator AS AccessToGenderAndAgeDataPermissionIndicator,
                   res.WritePermissionIndicator AS WritePermissionIndicator,
                   res.DeletePermissionIndicator AS DeletePermissionIndicator,
                   COUNT(*) OVER () AS RecordCount,
                   (
                       SELECT COUNT(*) FROM dbo.tlbHumanCase hc WHERE hc.intRowStatus = 0
                   ) AS TotalCount,
                   LH.AdminLevel2Name AS Region,
                   LH.AdminLevel3Name AS Rayon
            FROM @FinalResults res
                INNER JOIN dbo.tlbHumanCase hc
                    ON hc.idfHumanCase = res.ID
                INNER JOIN dbo.tlbHuman h
                    ON h.idfHuman = hc.idfHuman
                       AND h.intRowStatus = 0
                INNER JOIN dbo.tlbHumanActual ha
                    ON ha.idfHumanActual = h.idfHumanActual
                       AND ha.intRowStatus = 0
                LEFT JOIN dbo.tlbGeoLocation gl
                    ON gl.idfGeoLocation = h.idfCurrentResidenceAddress
                LEFT JOIN dbo.gisLocation g
                    ON g.idfsLocation = gl.idfsLocation
                LEFT JOIN FN_GBL_LocationHierarchy_Flattened(@LanguageID) LH
                    ON LH.idfsLocation = gl.idfsLocation
                LEFT JOIN dbo.HumanActualAddlInfo haai
                    ON haai.HumanActualAddlInfoUID = ha.idfHumanActual
                       AND haai.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000019) disease
                    ON disease.idfsReference = hc.idfsFinalDiagnosis
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000011) initialClassification
                    ON initialClassification.idfsReference = hc.idfsInitialCaseStatus
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000011) finalClassification
                    ON finalClassification.idfsReference = hc.idfsFinalCaseStatus
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000111) reportStatus
                    ON reportStatus.idfsReference = hc.idfsCaseProgressStatus
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000144) reportType
                    ON reportType.idfsReference = hc.DiseaseReportTypeID
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000041) hospitalization
                    ON hospitalization.idfsReference = idfsHospitalizationStatus
                LEFT JOIN dbo.tlbPerson p
                    ON p.idfPerson = hc.idfPersonEnteredBy
                       AND p.intRowStatus = 0
           )
        SELECT ReportKey,
               ReportID,
               LegacyReportID,
               ReportStatusTypeName,
               ReportTypeName,
               TentativeDiagnosisDate,
               FinalDiagnosisDate,
               ClassificationTypeName,
               FinalClassificationTypeName,
               DateOfOnset,
               DiseaseID,
               DiseaseName,
               PersonMasterID,
               PersonKey,
               PersonID,
               PersonalID,
               PersonName,
               PersonLocation,
               EmployerName,
               EnteredDate,
               EnteredByPersonName,
               ModificationDate,
               HospitalizationStatus,
               SiteID,
               ReadPermissionIndicator,
               AccessToPersonalDataPermissionIndicator,
               AccessToGenderAndAgeDataPermissionIndicator,
               WritePermissionIndicator,
               DeletePermissionIndicator,
               RecordCount,
               TotalCount,
               TotalPages = (RecordCount / @PageSize) + IIF(RecordCount % @PageSize > 0, 1, 0),
               CurrentPage = @Page,
               Region,
               Rayon
        FROM paging
        WHERE RowNum > @firstRec
              AND RowNum < @lastRec;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USP_HUM_HUMAN_MASTER_GETList]...';


GO
-- ================================================================================================
-- Name: USP_HUM_HUMAN_MASTER_GETList
--
-- Description: Get human actual list for human, laboratory and veterinary modules.
--          
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Mandar Kulkarni             Initial release.
-- Stephen Long     03/13/2018 Added additional address fields.
-- Stephen Long     08/23/2018 Added EIDSS person ID to list.
-- Stephen Long     09/26/2018 Added wildcard to the front of fields using the wildcard symbol, as 
--                             per use case.
-- Stephen Long		09/28/2018 Added order by and total records, as per use case.
-- Stephen Long     11/26/2018 Updated for the new API; removed returnCode and returnMsg. Total 
--                             records will need to be handled differently.
-- Stephen Long     12/14/2018 Added pagination set, page size and max pages per fetch parameters
--                             and fetch portion.
-- Stephen Long     12/30/2018 Renamed to master so the human get list stored procedure can query 
--                             the human table which is needed for the lab module instead of human 
--                             actual.
-- Stephen Long     01/18/2019 Changed date of birth to date of birth range, and duplicate check.
-- Stephen Long     04/08/2019 Changed full name from first name last name second name to last 
--                             name ', ' first name and then second name.
-- Stephen Long     07/07/2019 Added settlement ID and settlement name to select.
-- Ann Xiong	    10/29/2019 added PassportNumber to return
-- Ann Xiong		01/15/2020 Used humanAddress.strAddressString instead of 
--                             humanAddress.strForeignAddress for AddressString
-- Stephen Long     01/28/2021 Added order by clause to handle user selected sorting across 
--                             pagination sets.
-- Doug Albanese	06/11/2021 Refactored to conform to the new filtering requirements and return structure for our gridview.
-- Mark Wilson		10/05/2021 updated for changes to DOB rules, location udpates, etc...
-- Mark Wilson		10/26/2021 changed to nolock...
-- Ann Xiong		12/03/2021 Changed ha.datDateofBirth AS DateOfBirth to CONVERT(char(10), ha.datDateofBirth,126) AS DateOfBirth
-- Mike Kornegay	12/10/2021 Changed procedure to use denormailized location table function.
-- Mike Kornegay	01/12/2022 Swapped where condition referring to gisLocation for new flat location hierarchy and corrected ISNULL
--							   check on PersonalTypeID and fixed where statements on left joins.
-- Mike Kornegay	04/27/2022 Added AddressID and ContactPhoneNbrTypeID to revert fields after accidental alter.
-- Mike Kornegay	05/06/2022 Changed inner join to left join on FN_GBL_LocationHierarchy_Flattened so results return if location is not
--								in FN_GBL_LocationHierarchy_Flattened.
-- Stephen Long     09/22/2022 Add check for "0" page size.  If "0", then set to 1.
-- Stephen Long     10/10/2022 Added monitoring session ID parameter and where criteria.
-- Ann Xiong		11/10/2022 Added SettlementTypeID parameter and where criteria. 
--
/*Test Code

EXEC dbo.USP_HUM_HUMAN_MASTER_GETList
	@LangID = 'en-US',
	@FirstOrGivenName = 'a',
--	@idfsLocation = 1344330000000 -- region = Baku
	@idfsLocation = 4720500000000  -- Rayon = Pirallahi (Baku)

EXEC dbo.USP_HUM_HUMAN_MASTER_GETList
	@LangID = 'en-US',
	@FirstOrGivenName = 'a',
    @DateOfBirthFrom = '2010-12-30 00:00:00.000',
    @DateOfBirthTo = '2012-12-30 00:00:00.000',
	--@idfsLocation = 1344330000000, -- region = Baku
	@idfsLocation = 1344380000000, -- Rayon = Khatai (Baku)
	@pageSize = 50000 
---------

DECLARE @return_value int

EXEC    @return_value = [dbo].[USP_HUM_HUMAN_MASTER_GETList]
        @LangID = N'en-US',
        @EIDSSPersonID = NULL,
        @PersonalIDType = NULL,
        @PersonalID = NULL,
        @FirstOrGivenName = 'a',
        @SecondName = NULL,
        @LastOrSurname = NULL,
        @DateOfBirthFrom = '1976-02-04 00:00:00.000',
        @DateOfBirthTo = '1980-02-04 00:00:00.000',
        @GenderTypeID = NULL,
		@idfsLocation = 1344330000000, -- region = Baku
        @pageNo = 1,
        @pageSize = 10,
        @sortColumn = N'EIDSSPersonID',
        @sortOrder = N'asc'

SELECT  @return_value
*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_HUM_HUMAN_MASTER_GETList]
(
    @LangID NVARCHAR(50),
    @EIDSSPersonID NVARCHAR(200) = NULL,
    @PersonalIDType BIGINT = NULL,
    @PersonalID NVARCHAR(100) = NULL,
    @FirstOrGivenName NVARCHAR(200) = NULL,
    @SecondName NVARCHAR(200) = NULL,
    @LastOrSurname NVARCHAR(200) = NULL,
    @DateOfBirthFrom DATETIME = NULL,
    @DateOfBirthTo DATETIME = NULL,
    @GenderTypeID BIGINT = NULL,
    @idfsLocation BIGINT = NULL,
    @MonitoringSessionID BIGINT = NULL,
    @SettlementTypeID BIGINT = NULL,
    @pageNo INT = 1,
    @pageSize INT = 10,
    @sortColumn NVARCHAR(30) = 'EIDSSPersonID',
    @sortOrder NVARCHAR(4) = 'DESC'
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        DECLARE @firstRec INT
        DECLARE @lastRec INT

        IF @PageSize = 0
        BEGIN
            SET @PageSize = 1;
        END

        DECLARE @DOB DATETIME = NULL

        IF (@DateOfBirthTo IS NOT NULL AND @DateOfBirthTo = @DateOfBirthFrom)
            SET @DOB = @DateOfBirthFrom

        SET @firstRec = (@pageNo - 1) * @pagesize
        SET @lastRec = (@pageNo * @pageSize + 1);

        WITH CTEResults
        AS (SELECT ROW_NUMBER() OVER (ORDER BY CASE
                                                   WHEN @sortColumn = 'EIDSSPersonID'
                                                        AND @SortOrder = 'asc' THEN
                                                       hai.EIDSSPersonID
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'EIDSSPersonID'
                                                        AND @SortOrder = 'desc' THEN
                                                       hai.EIDSSPersonID
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'LastOrSurname'
                                                        AND @SortOrder = 'asc' THEN
                                                       ha.strLastName
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'LastOrSurname'
                                                        AND @SortOrder = 'desc' THEN
                                                       ha.strLastName
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'FirstOrGivenName'
                                                        AND @SortOrder = 'asc' THEN
                                                       ha.strFirstName
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'FirstOrGivenName'
                                                        AND @SortOrder = 'desc' THEN
                                                       ha.strFirstName
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'PersonalID'
                                                        AND @SortOrder = 'asc' THEN
                                                       ha.strPersonID
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'PersonalID'
                                                        AND @SortOrder = 'desc' THEN
                                                       ha.strPersonID
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'PersonIDTypeName'
                                                        AND @SortOrder = 'asc' THEN
                                                       idType.name
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'PersonIDTypeName'
                                                        AND @SortOrder = 'desc' THEN
                                                       idType.name
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'PassportNumber'
                                                        AND @SortOrder = 'asc' THEN
                                                       hai.PassportNbr
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'PassportNumber'
                                                        AND @SortOrder = 'desc' THEN
                                                       hai.PassportNbr
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'GenderTypeName'
                                                        AND @SortOrder = 'asc' THEN
                                                       genderType.name
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'GenderTypeName'
                                                        AND @SortOrder = 'desc' THEN
                                                       genderType.name
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'RayonName'
                                                        AND @SortOrder = 'asc' THEN
                                                       LH.AdminLevel3Name
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'RayonName'
                                                        AND @SortOrder = 'desc' THEN
                                                       LH.AdminLevel3Name
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'DateOfBirth'
                                                        AND @SortOrder = 'asc' THEN
                                                       ha.datDateofBirth
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'DateOfBirth'
                                                        AND @SortOrder = 'desc' THEN
                                                       ha.datDateofBirth
                                               END DESC
                                     ) AS ROWNUM,
                   COUNT(*) OVER () AS TotalRowCount,
                   ha.idfHumanActual AS HumanMasterID,
                   hai.EIDSSPersonID AS EIDSSPersonID,
                   ha.idfCurrentResidenceAddress AS AddressID,
                   ha.strFirstName AS FirstOrGivenName,
                   ha.strSecondName AS SecondName,
                   ha.strLastName AS LastOrSurname,
                   dbo.FN_GBL_ConcatFullName(ha.strLastName, ha.strFirstName, ha.strSecondName) AS FullName,
                   CONVERT(CHAR(10), ha.datDateofBirth, 126) AS DateOfBirth,
                   ha.strPersonID AS PersonalID,
                   ISNULL(idType.[name], idType.strDefault) AS PersonIDTypeName,
                   humanAddress.strStreetName AS StreetName,
                   dbo.FN_GBL_CreateAddressString(
                                                     LH.AdminLevel1Name,
                                                     LH.AdminLevel2Name,
                                                     LH.AdminLevel3Name,
                                                     humanAddress.strPostCode,
                                                     '',
                                                     LH.AdminLevel4Name,
                                                     humanAddress.strStreetName,
                                                     humanAddress.strHouse,
                                                     humanAddress.strBuilding,
                                                     humanAddress.strApartment,
                                                     humanAddress.blnForeignAddress,
                                                     ''
                                                 ) AS AddressString,
                   (CONVERT(NVARCHAR(100), humanAddress.dblLatitude) + ', '
                    + CONVERT(NVARCHAR(100), humanAddress.dblLongitude)
                   ) AS LongitudeLatitude,
                   hai.ContactPhoneCountryCode AS ContactPhoneCountryCode,
                   hai.ContactPhoneNbr AS ContactPhoneNumber,
                   hai.ContactPhoneNbrTypeID AS ContactPhoneNbrTypeID,
                   hai.ReportedAge AS Age,
                   hai.PassportNbr AS PassportNumber,
                   ha.idfsNationality AS CitizenshipTypeID,
                   citizenshipType.[name] AS CitizenshipTypeName,
                   ha.idfsHumanGender AS GenderTypeID,
                   genderType.[name] AS GenderTypeName,
                   humanAddress.idfsCountry AS CountryID,
                   LH.AdminLevel1Name AS CountryName,
                   LH.AdminLevel2ID AS RegionID,
                   LH.AdminLevel2Name AS RegionName,
                   LH.AdminLevel3ID AS RayonID,
                   LH.AdminLevel3Name AS RayonName,
                   humanAddress.idfsSettlement AS SettlementID,
                   LH.AdminLevel4Name AS SettlementName,
                   dbo.FN_GBL_CreateAddressString(
                                                     LH.AdminLevel1Name,
                                                     LH.AdminLevel2Name,
                                                     LH.AdminLevel3Name,
                                                     '',
                                                     '',
                                                     '',
                                                     '',
                                                     '',
                                                     '',
                                                     '',
                                                     humanAddress.blnForeignAddress,
                                                     humanAddress.strForeignAddress
                                                 ) AS FormattedAddressString
            FROM dbo.tlbHumanActual AS ha WITH (NOLOCK)
                INNER JOIN dbo.HumanActualAddlInfo hai WITH (NOLOCK)
                    ON ha.idfHumanActual = hai.HumanActualAddlInfoUID
                       AND hai.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000043) AS genderType
                    ON ha.idfsHumanGender = genderType.idfsReference
                       AND genderType.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000148) AS idType
                    ON ha.idfsPersonIDType = idType.idfsReference
                       AND idType.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000054) AS citizenshipType
                    ON ha.idfsNationality = citizenshipType.idfsReference
                       AND citizenshipType.intRowStatus = 0
                LEFT JOIN dbo.tlbGeoLocationShared humanAddress WITH (NOLOCK)
                    ON ha.idfCurrentResidenceAddress = humanAddress.idfGeoLocationShared
                       AND humanAddress.intRowStatus = 0
                INNER JOIN dbo.gisLocation L WITH (NOLOCK)
                    ON L.idfsLocation = humanAddress.idfsLocation
                INNER JOIN FN_GBL_LocationHierarchy_Flattened(@LangID) LH
                    ON LH.idfsLocation = L.idfsLocation
            WHERE (
                      ha.intRowStatus = 0
                      AND hai.intRowStatus = 0
                      AND (
                              (
                                  @idfsLocation IS NOT NULL
                                  AND (
                                          LH.AdminLevel1ID = @idfsLocation
                                          OR LH.AdminLevel2ID = @idfsLocation
                                          OR LH.AdminLevel3ID = @idfsLocation
                                          OR LH.AdminLevel4ID = @idfsLocation
                                          OR LH.AdminLevel5ID = @idfsLocation
                                          OR LH.AdminLevel6ID = @idfsLocation
                                          OR LH.AdminLevel7ID = @idfsLocation
                                      )
                              )
                              OR (@idfsLocation IS NULL)
                          )
                      AND (
                              (
                                  @SettlementTypeID IS NOT NULL
                                  AND L.idfsType = @SettlementTypeID
                              )
                              OR (@SettlementTypeID IS NULL)
                          )
                      AND (
                              @DOB = ha.datDateofBirth
                              OR @DateOfBirthFrom IS NULL
                              OR (ha.datDateofBirth
                  BETWEEN @DateOfBirthFrom AND @DateOfBirthTo
                                 )
                          )
                      AND (
                              (
                                  @EIDSSPersonID IS NOT NULL
                                  AND hai.EIDSSPersonID LIKE '%' + @EIDSSPersonID + '%'
                              )
                              OR (@EIDSSPersonID IS NULL)
                          )
                      AND (
                              (
                                  @PersonalID IS NOT NULL
                                  AND ha.strPersonID LIKE '%' + @PersonalID + '%'
                              )
                              OR (@PersonalID IS NULL)
                          )
                      AND (
                              (
                                  @FirstOrGivenName IS NOT NULL
                                  AND ha.strFirstName LIKE '%' + @FirstOrGivenName + '%'
                              )
                              OR (@FirstOrGivenName IS NULL)
                          )
                      AND (
                              (
                                  @SecondName IS NOT NULL
                                  AND ha.strSecondName LIKE '%' + @SecondName + '%'
                              )
                              OR (@SecondName IS NULL)
                          )
                      AND (
                              (
                                  @LastOrSurname IS NOT NULL
                                  AND ha.strLastName LIKE '%' + @LastOrSurname + '%'
                              )
                              OR (@LastOrSurname IS NULL)
                          )
                      AND (
                              (
                                  @PersonalIDType IS NOT NULL
                                  AND idType.idfsReference = @PersonalIDType
                              )
                              OR (@PersonalIDType IS NULL)
                          )
                      AND (
                              (
                                  @GenderTypeID IS NOT NULL
                                  AND genderType.idfsReference = @GenderTypeID
                              )
                              OR (@GenderTypeID IS NULL)
                          )
                      AND (
                              EXISTS
            (
                SELECT h.idfHuman
                FROM dbo.tlbHuman h 
				INNER JOIN dbo.tlbMaterial m ON m.idfHuman = h.idfHuman 
                WHERE h.idfHumanActual = ha.idfHumanActual
                      AND m.idfMonitoringSession = @MonitoringSessionID
            )
                              OR @MonitoringSessionID IS NULL
                          )
                  )
           )
        SELECT TotalRowCount,
               HumanMasterID,
               EIDSSPersonID,
               AddressID,
               FirstOrGivenName,
               SecondName,
               LastOrSurname,
               FullName,
               DateOfBirth,
               PersonalID,
               PersonIDTypeName,
               StreetName,
               AddressString,
               LongitudeLatitude,
               ContactPhoneCountryCode,
               ContactPhoneNumber,
               ContactPhoneNbrTypeID,
               Age,
               PassportNumber,
               CitizenshipTypeID,
               CitizenshipTypeName,
               GenderTypeID,
               GenderTypeName,
               CountryID,
               CountryName,
               RegionID,
               RegionName,
               RayonID,
               RayonName,
               SettlementID,
               SettlementName,
               FormattedAddressString,
               TotalPages = (TotalRowCount / @pageSize) + IIF(TotalRowCount % @pageSize > 0, 1, 0),
               CurrentPage = @pageNo
        FROM CTEResults
        WHERE RowNum > @firstRec
              AND RowNum < @lastRec
        OPTION (RECOMPILE);
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_SAMPLE_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_SAMPLE_GETList
--
-- Description:	Get sample list for the laboratory module use case LUC01.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     07/18/2018 Initial release.
-- Stephen Long	    12/19/2018 Added pagination logic.
-- Stephen Long     01/14/2019 Split out search functionality (where conditions) for better 
--                             performance on this procedure.
-- Stephen Long     01/30/2019 Added sample disease reference join and removed the vector 
--                             surveillance session joins as they are no longer needed.
-- Stephen Long     02/11/2019 Fix to the value used for the test completed indicator.  It was 
--                             using the wrong base reference value.
-- Stephen Long     02/21/2019 Changed field collection and field sent to collection and sent to 
--                             be consistent on naming.  Added parent sample ID to support the 
--                             edit transfer use case.
-- Stephen Long     03/28/2019 Removed test status 'Not Started' as criteria for the test assigned 
--                             indicator and test assigned count.
-- Stephen Long     06/22/2019 Removal of herd join and joined species on the sample table.
-- Stephen Long     07/01/2019 Corrected reference type on monitoring session category.
-- Stephen Long     07/09/2019 Added human master ID to select as placeholder for model.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     07/17/2019 Added vector join and field vector ID to the patient/species/vector.
-- Stephen Long     07/28/2019 Corrected sample kind ID where clause for aliquots/derivatives.
-- Stephen Long     08/12/2019 Corrected parenthesis for POCO error on sample kind where clause.
-- Stephen Long     08/30/2019 Removed commented out IF ELSE for individual sample.
-- Stephen Long     09/11/2019 Added sample destroyed status to sample status where clause.  Added 
--                             pagination set 0 to bring back "all" records.
-- Stephen Long     09/26/2019 Added sample list parameter and where clause.
-- Stephen Long     10/03/2019 Added comma to split sample list delimeter.
-- Stephen Long     10/17/2019 Added intRowStatus and non-laboratory test check on test completed 
--                             and test assigned indicators, and test assigned count.
-- Stephen Long     01/21/2020 Converted site ID to site list for site filtration.
-- Stephen Long     02/19/2020 Corrected left joins needing intRowStatus = 0.
-- Stephen Long     03/11/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     03/16/2020 Added sample status type of transferred out to include in the list.
-- Stephen Long     04/16/2020 Correction on vector surveillance session disease ID's and names.
-- Stephen Long     04/20/2020 Added vector type ID and vector species type ID to the model.
-- Stephen Long     05/05/2020 Added transfer status type ID of final when sample status type ID 
--                             is transferred out.
-- Stephen Long     06/21/2020 Added additional criteria to show samples with a final or amended 
--                             test to be selected within the accession timeframe.
-- Stephen Long     06/30/2020 Added additional criteria to pull back transferred in records after
--                             accessioned in.
-- Stephen Long     07/06/2020 Added lab module source indicator to model.
-- Stephen Long     10/27/2020 Removed test assigned indicator, and split out queries for better 
--                             performance.
-- Stephen Long     10/29/2020 Added test unassigned and test completed parameters and where 
--                             criteria.
-- Stephen Long     10/31/2020 Correct disease report/session query where criteria; prevent dups.
-- Stephen Long     11/28/2020 Added configurable site filtration rules.
-- Stephen Long     12/15/2020 Changed join for vector surveillance session diseases to the sample
--                             table.
-- Stephen Long     12/31/2020 Correct record and unaccessioned counts.
-- Stephen Long     01/21/2021 Change counts from distinct count to group by with sub-query.
-- Stephen Long     02/08/2021 Change where criteria to handle null organization for the central
--                             data repository.
-- Stephen Long     06/28/2021 Applied new pagination parameters.
-- Mark Wilson		08/11/2021 updated to join tlbMonitoringSessionToDiagnosis
-- Stephen Long     09/18/2021 Removed unneeded fields and joins to improve performance.
-- Stephen Long     12/14/2021 Added sample status date to the query.
-- Stephen Long     02/03/2022 Corrected monitoring session to diagnosis join.
-- Stephen Long     02/07/2022 Removed unneeded joins on the disease fields.
-- Stephen Long     02/17/2022 Fix on where criteria for test status types.
-- Stephen Long     03/10/2022 Changed note to comment and transfer count to transferred count.
-- Stephen Long     03/24/2022 Added final results table variable to account for duplicates that 
--                             may return from filtration rules.
-- Stephen Long     04/15/2022 Fix to filtration query grouping.
-- Stephen Long     05/17/2022 Removed primary key from monitoring and vector session disease 
--                             table variables.
-- Stephen Long     05/20/2022 Added string agg to session diseases.
-- Stephen Long     05/23/2022 Added check on testing table to only look for laboratory tests and
--                             rejected samples check within sample window.
-- Stephen Long     06/20/2022 Added row status check when looking for parent samples.
-- Stephen Long     06/28/2022 Added check to include transferred out samples only when the 
--                             transfer is final and within the accession date window.
-- Stephen Long     07/26/2022 Updated case statement on disease id and name.
-- Stephen Long     08/17/2022 Added collection and entered date to the default sort order.
-- Stephen Long     09/21/2022 Removed test status types of final and amended from the in 
--                             repository samples within the accession date window check.  Changed 
--                             rejected samples to use collection date or entered date against the 
--                             date window (number of days for samples to stay in the list).
-- Stephen Long     10/04/2022 Bug fix on item 5057; don't show marked for deletion or marked 
--                             for destruction in the default listing.
-- Stephen Long     10/21/2022 Added display disease names separated by comma.
-- Stephen Long     11/03/2022 Added date to the table variable to store the collection date, if 
--                             available, otherwise entered date.  Sort order for default base on 
--                             this new date field.
-- 
-- Testing Code:
/*
DECLARE	@return_value int

EXEC	@return_value = [dbo].[USP_LAB_SAMPLE_GETList]
		@LanguageID = N'en-US',
		@SampleID = NULL,
		@ParentSampleID = NULL,
		@DaysFromAccessionDate = 60,
		@SampleList = NULL,
		@TestUnassignedIndicator = NULL,
		@TestCompletedIndicator = NULL,
		@UserID = 161287150000872, --rykermase
		@UserEmployeeID = 420664190000872,
		@UserSiteID = 864,
		@UserOrganizationID = 758210000000,
		@UserSiteGroupID = NULL,
		@Page = 1,
		@PageSize = 100,
		@SortColumn = N'AccessionDate',
		@SortOrder = N'ASC'

SELECT	'Return Value' = @return_value

GO
*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_SAMPLE_GETList]
(
    @LanguageID NVARCHAR(50),
    @SampleID BIGINT = NULL,
    @ParentSampleID BIGINT = NULL,
    @DaysFromAccessionDate INT,
    @SampleList VARCHAR(MAX) = NULL,
    @TestUnassignedIndicator BIT = NULL,
    @TestCompletedIndicator BIT = NULL,
    @UserID BIGINT,
    @UserEmployeeID BIGINT,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT = NULL,
    @UserSiteGroupID BIGINT = NULL,
    @Page INT = 1,
    @PageSize INT = 10,
    @SortColumn VARCHAR(200) = 'Default',
    @SortOrder VARCHAR(4) = 'ASC'
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @UnaccessionedCount INT = 0,
            @TotalRowCount INT = 0;
    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL,
        AccessionedIndicator BIT NOT NULL,
        AccessionConditionTypeID BIGINT NULL,
        SortDate DATETIME NULL, 
        ReadPermissionIndicator BIT NOT NULL,
        AccessToPersonalDataPermissionIndicator BIT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
        WritePermissionIndicator BIT NOT NULL,
        DeletePermissionIndicator BIT NOT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID BIGINT NOT NULL,
        AccessionedIndicator BIT NOT NULL,
        AccessionConditionTypeID BIGINT NULL,
        SortDate DATETIME NULL, 
        ReadPermissionIndicator BIT NOT NULL,
        AccessToPersonalDataPermissionIndicator BIT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
        WritePermissionIndicator BIT NOT NULL,
        DeletePermissionIndicator BIT NOT NULL
    );
    DECLARE @MonitoringSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL, 
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL 
    );
    DECLARE @VectorSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL, 
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL 
    );
    DECLARE @SampleListTable TABLE (ID BIGINT NOT NULL);
    DECLARE @Favorites XML;

    IF @SampleList IS NOT NULL
        INSERT INTO @SampleListTable
        SELECT CAST([Value] AS BIGINT)
        FROM dbo.FN_GBL_SYS_SplitList(@SampleList, NULL, ',')

    BEGIN TRY
        INSERT INTO @MonitoringSessionDiseases
        SELECT MonitoringSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames, 
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames 
        FROM dbo.FN_LAB_MONITORING_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY MonitoringSessionID;

        INSERT INTO @VectorSessionDiseases
        SELECT VectorSurveillanceSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames, 
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames 
        FROM dbo.FN_LAB_VECTOR_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY VectorSurveillanceSessionID;

        SET @Favorites =
        (
            SELECT PreferenceDetail
            FROM dbo.UserPreference Laboratory
            WHERE idfUserID = @UserID
                  AND ModuleConstantID = 10508006
                  AND intRowStatus = 0
        );

        IF @SampleID IS NOT NULL
           OR @SampleList IS NOT NULL
           OR @ParentSampleID IS NOT NULL
        BEGIN
            INSERT INTO @FinalResults
            SELECT m.idfMaterial,
                   m.blnAccessioned,
                   m.idfsAccessionCondition,
                   CASE WHEN m.datFieldCollectionDate IS NULL THEN m.datEnteringDate ELSE m.datFieldCollectionDate END,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbMaterial m
            WHERE m.intRowStatus = 0 
                  AND (
                      @SampleList IS NULL
                      OR m.idfMaterial IN (
                                              SELECT ID FROM @SampleListTable
                                          )
                  )
                  AND (
                          @SampleID IS NULL
                          OR m.idfMaterial = @SampleID
                      )
                  AND (
                          @ParentSampleID IS NULL
                          OR m.idfParentMaterial = @ParentSampleID
                      );
        END
        ELSE
        BEGIN
            INSERT INTO @Results
            SELECT m.idfMaterial,
                   m.blnAccessioned,
                   m.idfsAccessionCondition,
                   CASE WHEN m.datFieldCollectionDate IS NULL THEN m.datEnteringDate ELSE m.datFieldCollectionDate END,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbMaterial m
            WHERE m.intRowStatus = 0
                  AND m.idfsSampleType <> 10320001 --Unknown
                  AND (
                          @UserOrganizationID IS NULL
                          OR m.idfSendToOffice = @UserOrganizationID
                      )
                  AND (
                          (
                              GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                              AND
                              (
                                  SELECT COUNT(*)
                                  FROM dbo.tlbTesting t
                                  WHERE t.idfMaterial = m.idfMaterial
                                        AND t.intRowStatus = 0
                                        AND t.blnNonLaboratoryTest = 0
                                        AND t.idfsTestStatus IN ( 10001003, 10001004, 10001005 ) -- In Progress, Preliminary and Not Started
                              ) = 0
                              AND @TestUnassignedIndicator IS NOT NULL
                              AND m.blnAccessioned = 1
                              AND m.datAccession IS NOT NULL
                              AND m.idfsAccessionCondition IS NOT NULL
                              AND m.idfsSampleStatus = 10015007 -- In Repository
                          )
                          OR (
                                 GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                                 AND
                                 (
                                     SELECT COUNT(*)
                                     FROM dbo.tlbTesting t
                                     WHERE t.idfMaterial = m.idfMaterial
                                           AND t.intRowStatus = 0
                                           AND t.blnNonLaboratoryTest = 0
                                           AND t.idfsTestStatus IN ( 10001001, 10001006 ) -- Final and Amended
                                 ) > 0
                                 AND @TestCompletedIndicator IS NOT NULL
                             )
                          OR (
                                 m.blnAccessioned = 0
                                 AND m.idfsAccessionCondition IS NULL
                                 AND m.idfsSampleStatus IS NULL
                                 AND @TestCompletedIndicator IS NULL
                                 AND @TestUnassignedIndicator IS NULL
                             )
                          OR ( -- Accessioned In with no in progress, preliminary tests assigned, Deleted or Destroyed
                                 GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                                 AND
                                 (
                                     SELECT COUNT(*)
                                     FROM dbo.tlbTesting t
                                     WHERE t.idfMaterial = m.idfMaterial
                                           AND t.intRowStatus = 0
                                           AND t.blnNonLaboratoryTest = 0
                                           AND t.idfsTestStatus IN ( 10001003, 10001004, 10001005 ) -- In Progress, Preliminary and Not Started
                                 ) = 0
                                 AND m.idfsSampleStatus IN (10015007, 10015008, 10015009) -- In Repository, Deleted, Destroyed
                                 AND @TestUnassignedIndicator IS NULL
                                 AND @TestCompletedIndicator IS NULL
                             )
                          OR (
                                GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
								AND m.idfsSampleStatus = 10015010 -- Transferred Out
								AND
                                 (
                                     SELECT COUNT(tr.idfTransferOut)
                                     FROM dbo.tlbTransferOutMaterial tom
                                     INNER JOIN dbo.tlbTransferOUT tr ON tr.idfTransferOut = tom.idfTransferOut
                                     WHERE tom.idfMaterial = m.idfMaterial
                                           AND tr.intRowStatus = 0
                                           AND tr.idfsTransferStatus IN ( 10001003 ) -- Final
                                 ) = 0
								AND @TestCompletedIndicator IS NULL
								AND @TestUnassignedIndicator IS NULL
							) --Transferred Out and Final
                          OR (
                                 (
                                     (m.datFieldCollectionDate IS NOT NULL AND GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datFieldCollectionDate))
                                     OR (m.datEnteringDate IS NOT NULL AND GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datEnteringDate))
                                 )
                                 AND
                                 m.blnAccessioned = 0
                                 AND m.idfsAccessionCondition = 10108003 -- Rejected sample
                             )
                      );
        END

        -- =======================================================================================
        -- CONFIGURABLE SITE FILTRATION RULES
        -- 
        -- Apply configurable site filtration rules for use case SAUC34. Some of these rules may 
        -- overlap the non-configurable rules.
        -- =======================================================================================
        --
        -- Apply at the user's site group level, granted by a site group.
        --
        IF @UserOrganizationID IS NOT NULL --First-level sites (central data repository, general data repository, etc.) do not filter results.
        BEGIN
            INSERT INTO @Results
            SELECT m.idfMaterial,
                   m.blnAccessioned,
                   m.idfsAccessionCondition,
                   CASE WHEN m.datFieldCollectionDate IS NULL THEN m.datEnteringDate ELSE m.datFieldCollectionDate END,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = m.idfsSite
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = @UserSiteGroupID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
            WHERE m.intRowStatus = 0
                  AND @UserSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site level, granted by a site group.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial,
                   m.blnAccessioned,
                   m.idfsAccessionCondition,
                   CASE WHEN m.datFieldCollectionDate IS NULL THEN m.datEnteringDate ELSE m.datFieldCollectionDate END,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = m.idfsSite
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
            WHERE m.intRowStatus = 0
                  AND ar.GrantingActorSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's employee group level, granted by a site group.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial,
                   m.blnAccessioned,
                   m.idfsAccessionCondition,
                   CASE WHEN m.datFieldCollectionDate IS NULL THEN m.datEnteringDate ELSE m.datFieldCollectionDate END,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = m.idfsSite
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
            WHERE m.intRowStatus = 0
                  AND ar.GrantingActorSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's ID level, granted by a site group.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial,
                   m.blnAccessioned,
                   m.idfsAccessionCondition,
                   CASE WHEN m.datFieldCollectionDate IS NULL THEN m.datEnteringDate ELSE m.datFieldCollectionDate END,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = m.idfsSite
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
            WHERE m.intRowStatus = 0
                  AND ar.GrantingActorSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site group level, granted by a site.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial,
                   m.blnAccessioned,
                   m.idfsAccessionCondition,
                   CASE WHEN m.datFieldCollectionDate IS NULL THEN m.datEnteringDate ELSE m.datFieldCollectionDate END,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tflSiteToSiteGroup sgs
                    ON sgs.idfSiteGroup = @UserSiteGroupID
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
            WHERE m.intRowStatus = 0
                  AND @UserSiteGroupID IS NOT NULL
                  AND sgs.idfsSite = m.idfsSite;

            -- 
            -- Apply at the user's site level, granted by a site.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial,
                   m.blnAccessioned,
                   m.idfsAccessionCondition,
                   CASE WHEN m.datFieldCollectionDate IS NULL THEN m.datEnteringDate ELSE m.datFieldCollectionDate END,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.AccessRule ar
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.tlbMaterial m
                    ON m.intRowStatus = 0
            WHERE ar.GrantingActorSiteID IS NOT NULL
                  AND m.idfsSite = ar.GrantingActorSiteID;

            DECLARE @UserEmployeeGroupID BIGINT = (
                                                      SELECT TOP 1
                                                          egm.idfEmployeeGroup
                                                      FROM dbo.tlbEmployeeGroupMember egm
                                                      WHERE egm.idfEmployee = @UserEmployeeID
                                                            AND egm.intRowStatus = 0
                                                  );

            -- Apply at the user's employee group level, granted by a site.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial,
                   m.blnAccessioned,
                   m.idfsAccessionCondition,
                   CASE WHEN m.datFieldCollectionDate IS NULL THEN m.datEnteringDate ELSE m.datFieldCollectionDate END,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.AccessRuleActor ara
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
                       AND ar.GrantingActorSiteID IS NOT NULL
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfsSite = ar.GrantingActorSiteID
                       AND m.intRowStatus = 0
            WHERE ara.ActorEmployeeGroupID = @UserEmployeeGroupID
                  AND ara.intRowStatus = 0;

            -- 
            -- Apply at the user's ID level, granted by a site.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial,
                   m.blnAccessioned,
                   m.idfsAccessionCondition,
                   CASE WHEN m.datFieldCollectionDate IS NULL THEN m.datEnteringDate ELSE m.datFieldCollectionDate END,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.AccessRule ar
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.tlbMaterial m
                    ON m.intRowStatus = 0
            WHERE ar.GrantingActorSiteID IS NOT NULL
                  AND m.idfsSite = ar.GrantingActorSiteID;
        END;

        IF @SortColumn <> 'Query'
        BEGIN
        INSERT INTO @FinalResults
        SELECT ID,
               AccessionedIndicator,
               AccessionConditionTypeID,
               SortDate, 
               CASE
                   WHEN EXISTS
                        (
                            SELECT ReadPermissionIndicator FROM @Results WHERE ID = ID
                        ) THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN EXISTS
                        (
                            SELECT AccessToPersonalDataPermissionIndicator FROM @Results WHERE ID = ID
                        ) THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN EXISTS
                        (
                            SELECT AccessToGenderAndAgeDataPermissionIndicator
                            FROM @Results
                            WHERE ID = ID
                        ) THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN EXISTS
                        (
                            SELECT WritePermissionIndicator FROM @Results WHERE ID = ID
                        ) THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN EXISTS
                        (
                            SELECT DeletePermissionIndicator FROM @Results WHERE ID = ID
                        ) THEN
                       1
                   ELSE
                       0
               END
        FROM @Results res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.ID
        WHERE res.ReadPermissionIndicator = 1
              AND m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                          AND
                          (
                              SELECT COUNT(*)
                              FROM dbo.tlbTesting t
                              WHERE t.idfMaterial = m.idfMaterial
                                    AND t.intRowStatus = 0
                                    AND t.blnNonLaboratoryTest = 0
                                    AND t.idfsTestStatus IN ( 10001003, 10001004, 10001005 ) -- In Progress, Preliminary and Not Started
                          ) = 0
                          AND @TestUnassignedIndicator IS NOT NULL
                          AND m.blnAccessioned = 1
                          AND m.datAccession IS NOT NULL
                          AND m.idfsAccessionCondition IS NOT NULL
                          AND m.idfsSampleStatus = 10015007 -- In Repository
                      )
                      OR (
                             GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                             AND
                             (
                                 SELECT COUNT(*)
                                 FROM dbo.tlbTesting t
                                 WHERE t.idfMaterial = m.idfMaterial
                                       AND t.intRowStatus = 0
                                       AND t.blnNonLaboratoryTest = 0
                                       AND t.idfsTestStatus IN ( 10001001, 10001006 ) -- Final and Amended
                             ) > 0
                             AND @TestCompletedIndicator IS NOT NULL
                         )
                      OR (
                             m.blnAccessioned = 0
                             AND m.idfsAccessionCondition IS NULL
                             AND m.idfsSampleStatus IS NULL
                             AND @TestCompletedIndicator IS NULL
                             AND @TestUnassignedIndicator IS NULL
                         )
                      OR (
                             GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                             AND
                             (
                                 SELECT COUNT(*)
                                 FROM dbo.tlbTesting t
                                 WHERE t.idfMaterial = m.idfMaterial
                                       AND t.intRowStatus = 0
                                       AND t.blnNonLaboratoryTest = 0
                                       AND t.idfsTestStatus IN ( 10001003, 10001004, 10001005 ) -- In Progress, Preliminary and Not Started
                             ) = 0
                             AND m.idfsSampleStatus IN (10015007, 10015008, 10015009) -- In Repository, Deleted, Destroyed
                             AND @TestUnassignedIndicator IS NULL
                             AND @TestCompletedIndicator IS NULL
                         )
                      OR (
                             GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
							 AND m.idfsSampleStatus = 10015010 -- Transferred Out
							 AND
                             (
                                 SELECT COUNT(tr.idfTransferOut)
                                 FROM dbo.tlbTransferOutMaterial tom
                                 INNER JOIN dbo.tlbTransferOUT tr ON tr.idfTransferOut = tom.idfTransferOut
                                 WHERE tom.idfMaterial = m.idfMaterial
                                       AND tr.intRowStatus = 0
                                       AND tr.idfsTransferStatus IN ( 10001003 ) -- Final
                             ) = 0
							 AND @TestCompletedIndicator IS NULL
							 AND @TestUnassignedIndicator IS NULL
						 ) --Transferred Out and Final
                      OR (
                             (
                                 (m.datFieldCollectionDate IS NOT NULL AND GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datFieldCollectionDate))
                                 OR (m.datEnteringDate IS NOT NULL AND GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datEnteringDate))
                             )
                             AND
                             m.blnAccessioned = 0
                             AND m.idfsAccessionCondition = 10108003 -- Rejected sample
                         )
                  )
        GROUP BY ID,
                 AccessionedIndicator,
                 AccessionConditionTypeID, 
                 SortDate;
        END

        SET @TotalRowCount =
        (
            SELECT COUNT(ID) FROM @FinalResults
        );
        SET @UnaccessionedCount =
        (
            SELECT COUNT(ID)
            FROM @FinalResults
            WHERE AccessionedIndicator = 0
                  AND AccessionConditionTypeID IS NULL
        );

        IF @SortColumn = 'Default' OR @SortColumn = 'Query'
        BEGIN
            SELECT m.idfMaterial AS SampleID,
                   m.strBarcode AS EIDSSLaboratorySampleID,
                   CASE
                       WHEN f.SampleID IS NULL THEN
                           0
                       ELSE
                           1
                   END AS FavoriteIndicator,
                   m.idfRootMaterial AS RootSampleID,
                   m.idfParentMaterial AS ParentSampleID,
                   m.idfsSampleType AS SampleTypeID,
                   sampleType.name AS SampleTypeName,
                   m.idfHuman AS HumanID,
                   m.strCalculatedHumanName AS PatientOrFarmOwnerName,
                   m.idfSpecies AS SpeciesID,
                   m.idfAnimal AS AnimalID,
                   a.strAnimalCode AS EIDSSAnimalID,
                   m.idfVector AS VectorID,
                   m.idfMonitoringSession AS MonitoringSessionID,
                   m.idfVectorSurveillanceSession AS VectorSessionID,
                   m.idfHumanCase AS HumanDiseaseReportID,
                   m.idfVetCase AS VeterinaryDiseaseReportID,
                   m.strCalculatedCaseID AS EIDSSReportOrSessionID,
                   '' AS ReportOrSessionTypeName,
                   m.TestCompletedIndicator,
                   CASE
                       WHEN m.DiseaseID IS NOT NULL THEN
                           CAST(m.DiseaseID AS NVARCHAR(MAX))
                       WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                           msDiseases.DiseaseIdentifiers
                       WHEN (m.DiseaseID IS NULL AND ISNULL(m.idfVectorSurveillanceSession, '') = '') THEN
                           vsDiseases.DiseaseIdentifiers
                       ELSE
                           '' 
                   END AS DiseaseID,
                   CASE
                       WHEN m.DiseaseID IS NOT NULL THEN 
                           diseaseName.name
                       WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                           msDiseases.DiseaseNames
                       WHEN (m.DiseaseID IS NULL AND ISNULL(m.idfVectorSurveillanceSession, '') = '') THEN
                           vsDiseases.DiseaseNames
                       ELSE
                           ''
                   END AS DiseaseName,
                   CASE
                       WHEN m.DiseaseID IS NOT NULL THEN 
                           diseaseName.name
                       WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                           msDiseases.DisplayDiseaseNames
                       WHEN (m.DiseaseID IS NULL AND ISNULL(m.idfVectorSurveillanceSession, '') = '') THEN
                           vsDiseases.DisplayDiseaseNames
                       ELSE
                           ''
                   END AS DisplayDiseaseName,
                   m.idfInDepartment AS FunctionalAreaID,
                   functionalArea.name AS FunctionalAreaName,
                   m.idfSubdivision AS FreezerSubdivisionID,
                   m.StorageBoxPlace,
                   m.datFieldCollectionDate AS CollectionDate,
                   m.idfFieldCollectedByPerson AS CollectedByPersonID,
                   m.idfFieldCollectedByOffice AS CollectedByOrganizationID,
                   m.datFieldSentDate AS SentDate,
                   m.idfSendToOffice AS SentToOrganizationID,
                   m.idfsSite AS SiteID,
                   m.strFieldBarcode AS EIDSSLocalOrFieldSampleID,
                   m.datEnteringDate AS EnteredDate,
                   m.datOutOfRepositoryDate AS OutOfRepositoryDate,
                   m.idfMarkedForDispositionByPerson AS MarkedForDispositionByPersonID,
                   m.blnReadOnly AS ReadOnlyIndicator,
                   m.blnAccessioned AS AccessionIndicator,
                   m.datAccession AS AccessionDate,
                   m.idfsAccessionCondition AS AccessionConditionTypeID,
                   CASE
                       WHEN m.blnAccessioned = 0
                            AND m.idfsAccessionCondition IS NULL THEN
                           'Un-accessioned'
                       WHEN m.idfsSampleStatus IS NULL THEN
                           accessionConditionType.name
                       WHEN m.idfsSampleStatus = 10015007 --In Repository
                   THEN
                           accessionConditionType.name
                       ELSE
                           sampleStatusType.name
                   END AS AccessionConditionOrSampleStatusTypeName,
                   m.idfAccesionByPerson AS AccessionByPersonID,
                   m.idfsSampleStatus AS SampleStatusTypeID,
                   m.datSampleStatusDate AS SampleStatusDate,
                   m.strCondition AS AccessionComment,
                   m.idfsDestructionMethod AS DestructionMethodTypeID,
                   m.datDestructionDate AS DestructionDate,
                   m.idfDestroyedByPerson AS DestroyedByPersonID,
                   CASE
                       WHEN m.TestUnassignedIndicator = 1 THEN
                           0
                       ELSE
                           1
                   END AS TestAssignedCount,
                   m.TransferIndicator AS TransferredCount,
                   m.strNote AS Comment,
                   m.idfsCurrentSite AS CurrentSiteID,
                   m.idfsBirdStatus AS BirdStatusTypeID,
                   m.idfMainTest AS MainTestID,
                   m.idfsSampleKind AS SampleKindTypeID,
                   m.PreviousSampleStatusID AS PreviousSampleStatusTypeID,
                   m.LabModuleSourceIndicator,
                   m.intRowStatus AS RowStatus,
                   ReadPermissionIndicator,
                   AccessToPersonalDataPermissionIndicator,
                   AccessToGenderAndAgeDataPermissionIndicator,
                   WritePermissionIndicator,
                   DeletePermissionIndicator,
                   0 AS RowAction,
                   0 AS RowSelectionIndicator,
                   @Page AS CurrentPage,
                   @TotalRowCount AS TotalRowCount,
                   @UnaccessionedCount AS UnaccessionedSampleCount
            FROM @FinalResults res
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = res.ID
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                    ON sampleType.idfsReference = m.idfsSampleType
                LEFT JOIN
                (
                    SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                    FROM @favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
                ) f
                    ON m.idfMaterial = f.SampleID
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) diseaseName
                    ON diseaseName.idfsReference = m.DiseaseID
                LEFT JOIN @MonitoringSessionDiseases msDiseases
                    ON msDiseases.ID = m.idfMonitoringSession
                LEFT JOIN @VectorSessionDiseases vsDiseases
                    ON vsDiseases.ID = m.idfVectorSurveillanceSession
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                    ON sampleStatusType.idfsReference = m.idfsSampleStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                    ON accessionConditionType.idfsReference = m.idfsAccessionCondition
                LEFT JOIN dbo.tlbAnimal a
                    ON a.idfAnimal = m.idfAnimal
                       AND a.intRowStatus = 0
                LEFT JOIN dbo.tlbDepartment d
                    ON d.idfDepartment = m.idfInDepartment
                       AND d.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000164) functionalArea
                    ON functionalArea.idfsReference = d.idfsDepartmentName
            ORDER BY m.blnAccessioned,
                     m.idfsSampleStatus DESC,
                     m.idfsAccessionCondition, 
                     res.SortDate DESC OFFSET @PageSize * (@Page - 1) ROWS FETCH NEXT @PageSize ROWS ONLY
                     OPTION (RECOMPILE);
        END
        ELSE
        BEGIN
            SELECT m.idfMaterial AS SampleID,
                   m.strBarcode AS EIDSSLaboratorySampleID,
                   CASE
                       WHEN f.SampleID IS NULL THEN
                           0
                       ELSE
                           1
                   END AS FavoriteIndicator,
                   m.idfRootMaterial AS RootSampleID,
                   m.idfParentMaterial AS ParentSampleID,
                   m.idfsSampleType AS SampleTypeID,
                   sampleType.name AS SampleTypeName,
                   m.idfHuman AS HumanID,
                   m.strCalculatedHumanName AS PatientOrFarmOwnerName,
                   m.idfSpecies AS SpeciesID,
                   m.idfAnimal AS AnimalID,
                   a.strAnimalCode AS EIDSSAnimalID,
                   m.idfVector AS VectorID,
                   m.idfMonitoringSession AS MonitoringSessionID,
                   m.idfVectorSurveillanceSession AS VectorSessionID,
                   m.idfHumanCase AS HumanDiseaseReportID,
                   m.idfVetCase AS VeterinaryDiseaseReportID,
                   m.strCalculatedCaseID AS EIDSSReportOrSessionID,
                   '' AS ReportOrSessionTypeName,
                   m.TestCompletedIndicator,
                   CASE
                       WHEN m.DiseaseID IS NOT NULL THEN
                           CAST(m.DiseaseID AS NVARCHAR(MAX))
                       WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                           msDiseases.DiseaseIdentifiers
                       WHEN (m.DiseaseID IS NULL AND ISNULL(m.idfVectorSurveillanceSession, '') = '') THEN
                           vsDiseases.DiseaseIdentifiers
                       ELSE
                           '' 
                   END AS DiseaseID,
                   CASE
                       WHEN m.DiseaseID IS NOT NULL THEN 
                           diseaseName.name
                       WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                           msDiseases.DiseaseNames
                       WHEN (m.DiseaseID IS NULL AND ISNULL(m.idfVectorSurveillanceSession, '') = '') THEN
                           vsDiseases.DiseaseNames
                       ELSE
                           ''
                   END AS DiseaseName,
                   CASE
                       WHEN m.DiseaseID IS NOT NULL THEN 
                           diseaseName.name
                       WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                           msDiseases.DisplayDiseaseNames
                       WHEN (m.DiseaseID IS NULL AND ISNULL(m.idfVectorSurveillanceSession, '') = '') THEN
                           vsDiseases.DisplayDiseaseNames
                       ELSE
                           ''
                   END AS DisplayDiseaseName,
                   m.idfInDepartment AS FunctionalAreaID,
                   functionalArea.name AS FunctionalAreaName,
                   m.idfSubdivision AS FreezerSubdivisionID,
                   m.StorageBoxPlace,
                   m.datFieldCollectionDate AS CollectionDate,
                   m.idfFieldCollectedByPerson AS CollectedByPersonID,
                   m.idfFieldCollectedByOffice AS CollectedByOrganizationID,
                   m.datFieldSentDate AS SentDate,
                   m.idfSendToOffice AS SentToOrganizationID,
                   m.idfsSite AS SiteID,
                   m.strFieldBarcode AS EIDSSLocalOrFieldSampleID,
                   m.datEnteringDate AS EnteredDate,
                   m.datOutOfRepositoryDate AS OutOfRepositoryDate,
                   m.idfMarkedForDispositionByPerson AS MarkedForDispositionByPersonID,
                   m.blnReadOnly AS ReadOnlyIndicator,
                   m.blnAccessioned AS AccessionIndicator,
                   m.datAccession AS AccessionDate,
                   m.idfsAccessionCondition AS AccessionConditionTypeID,
                   CASE
                       WHEN m.blnAccessioned = 0
                            AND m.idfsAccessionCondition IS NULL THEN
                           'Un-accessioned'
                       WHEN m.idfsSampleStatus IS NULL THEN
                           accessionConditionType.name
                       WHEN m.idfsSampleStatus = 10015007 --In Repository
                   THEN
                           accessionConditionType.name
                       ELSE
                           sampleStatusType.name
                   END AS AccessionConditionOrSampleStatusTypeName,
                   m.idfAccesionByPerson AS AccessionByPersonID,
                   m.idfsSampleStatus AS SampleStatusTypeID,
                   m.datSampleStatusDate AS SampleStatusDate,
                   m.strCondition AS AccessionComment,
                   m.idfsDestructionMethod AS DestructionMethodTypeID,
                   m.datDestructionDate AS DestructionDate,
                   m.idfDestroyedByPerson AS DestroyedByPersonID,
                   CASE
                       WHEN m.TestUnassignedIndicator = 1 THEN
                           0
                       ELSE
                           1
                   END AS TestAssignedCount,
                   m.TransferIndicator AS TransferredCount,
                   m.strNote AS Comment,
                   m.idfsCurrentSite AS CurrentSiteID,
                   m.idfsBirdStatus AS BirdStatusTypeID,
                   m.idfMainTest AS MainTestID,
                   m.idfsSampleKind AS SampleKindTypeID,
                   m.PreviousSampleStatusID AS PreviousSampleStatusTypeID,
                   m.LabModuleSourceIndicator,
                   m.intRowStatus AS RowStatus,
                   ReadPermissionIndicator,
                   AccessToPersonalDataPermissionIndicator,
                   AccessToGenderAndAgeDataPermissionIndicator,
                   WritePermissionIndicator,
                   DeletePermissionIndicator,
                   0 AS RowAction,
                   0 AS RowSelectionIndicator,
                   @Page AS CurrentPage,
                   @TotalRowCount AS TotalRowCount,
                   @UnaccessionedCount AS UnaccessionedSampleCount
            FROM @FinalResults res
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = res.ID
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                    ON sampleType.idfsReference = m.idfsSampleType
                LEFT JOIN
                (
                    SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                    FROM @favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
                ) f
                    ON m.idfMaterial = f.SampleID
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) diseaseName
                    ON diseaseName.idfsReference = m.DiseaseID
                LEFT JOIN @MonitoringSessionDiseases msDiseases
                    ON msDiseases.ID = m.idfMonitoringSession
                LEFT JOIN @VectorSessionDiseases vsDiseases
                    ON vsDiseases.ID = m.idfVectorSurveillanceSession
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                    ON sampleStatusType.idfsReference = m.idfsSampleStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                    ON accessionConditionType.idfsReference = m.idfsAccessionCondition
                LEFT JOIN dbo.tlbAnimal a
                    ON a.idfAnimal = m.idfAnimal
                       AND a.intRowStatus = 0
                LEFT JOIN dbo.tlbDepartment d
                    ON d.idfDepartment = m.idfInDepartment
                       AND d.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000164) functionalArea
                    ON functionalArea.idfsReference = d.idfsDepartmentName
            ORDER BY CASE
                         WHEN @SortColumn = 'EIDSSReportOrSessionID'
                              AND @SortOrder = 'ASC' THEN
                             m.strCalculatedCaseID
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'EIDSSReportOrSessionID'
                              AND @SortOrder = 'DESC' THEN
                             m.strCalculatedCaseID
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'PatientOrFarmOwnerName'
                              AND @SortOrder = 'ASC' THEN
                             m.strCalculatedHumanName
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'PatientOrFarmOwnerName'
                              AND @SortOrder = 'DESC' THEN
                             m.strCalculatedHumanName
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'EIDSSLocalOrFieldSampleID'
                              AND @SortOrder = 'ASC' THEN
                             m.strFieldBarcode
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'EIDSSLocalOrFieldSampleID'
                              AND @SortOrder = 'DESC' THEN
                             m.strFieldBarcode
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'AccessionDate'
                              AND @SortOrder = 'ASC' THEN
                             m.datAccession
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'AccessionDate'
                              AND @SortOrder = 'DESC' THEN
                             m.datAccession
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'SampleTypeName'
                              AND @SortOrder = 'ASC' THEN
                             sampleType.name
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'SampleTypeName'
                              AND @SortOrder = 'DESC' THEN
                             sampleType.name
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'DisplayDiseaseName'
                              AND @SortOrder = 'ASC' THEN
                             CASE
                                 WHEN m.DiseaseID IS NOT NULL THEN 
                                     diseaseName.name
                                 WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                                     msDiseases.DisplayDiseaseNames
                                 WHEN (m.DiseaseID IS NULL AND ISNULL(m.idfVectorSurveillanceSession, '') = '') THEN
                                     vsDiseases.DisplayDiseaseNames
                                 ELSE
                                     ''
                             END
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'DisplayDiseaseName'
                              AND @SortOrder = 'DESC' THEN
                             CASE
                                 WHEN m.DiseaseID IS NOT NULL THEN 
                                     diseaseName.name
                                 WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                                     msDiseases.DisplayDiseaseNames
                                 WHEN (m.DiseaseID IS NULL AND ISNULL(m.idfVectorSurveillanceSession, '') = '') THEN
                                     vsDiseases.DisplayDiseaseNames
                                 ELSE
                                     ''
                             END
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'EIDSSLaboratorySampleID'
                              AND @SortOrder = 'ASC' THEN
                             m.strBarcode
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'EIDSSLaboratorySampleID'
                              AND @SortOrder = 'DESC' THEN
                             m.strBarcode
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'AccessionConditionOrSampleStatusTypeName'
                              AND @SortOrder = 'ASC' THEN
                             CASE
                                 WHEN m.blnAccessioned = 0
                                      AND m.idfsAccessionCondition IS NULL THEN
                                     'Un-accessioned'
                                 WHEN m.idfsSampleStatus IS NULL THEN
                                     accessionConditionType.name
                                 WHEN m.idfsSampleStatus = 10015007 --In Repository
                     THEN
                                     accessionConditionType.name
                                 ELSE
                                     sampleStatusType.name
                             END
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'AccessionConditionOrSampleStatusTypeName'
                              AND @SortOrder = 'DESC' THEN
                             CASE
                                 WHEN m.blnAccessioned = 0
                                      AND m.idfsAccessionCondition IS NULL THEN
                                     'Un-accessioned'
                                 WHEN m.idfsSampleStatus IS NULL THEN
                                     accessionConditionType.name
                                 WHEN m.idfsSampleStatus = 10015007 --In Repository
                     THEN
                                     accessionConditionType.name
                                 ELSE
                                     sampleStatusType.name
                             END
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'FunctionalAreaName'
                              AND @SortOrder = 'ASC' THEN
                             functionalArea.name
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'FunctionalAreaName'
                              AND @SortOrder = 'DESC' THEN
                             functionalArea.name
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'EIDSSAnimalID'
                              AND @SortOrder = 'ASC' THEN
                             a.strAnimalCode
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'EIDSSAnimalID'
                              AND @SortOrder = 'DESC' THEN
                             a.strAnimalCode
                     END DESC OFFSET @PageSize * (@Page - 1) ROWS FETCH NEXT @PageSize ROWS ONLY
           OPTION (RECOMPILE);
        END
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_VAS_MONITORING_SESSION_GETDetail]...';


GO
-- ================================================================================================
-- Name: USP_VAS_MONITORING_SESSION_GETDetail
--
-- Description:	Get active surveillance monitoring session detail (one record) for the veterinary 
-- surveillance session edit/enter and other use cases.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     05/02/2019 Initial release.
-- Stephen Long     04/27/2020 Corrected legacy session ID.
-- Stephen Long     08/22/2020 Corrected joins for person entered by site.
-- Mike Kornegay    12/16/2021 Added tlbMonitoringSessionToDiagnosis to all joins involving idfsDiagnosis and changed
--                             location hieararchy to use FN_GBL_LocationHierarchy_Flattened 
-- Mike Kornegay	01/19/2022 Added join to tlbVetCase and added idfCaseType
-- Mike Kornegay	01/26/2022 Added the disease identifiers and names fields to the query and added
--							   the strCampaign field as CampaignID and idfCampaign as CampaignKey.
-- Mike Kornegay	02/01/2022 Removed join to tlbVetCase and added join to MonitoringSessionToSampletypes to
--							   get if the report is Avian or Livestock
-- Mike Kornegay    02/15/2022 Changed SpeciesTypeID to ReportTypeID
-- Mike Kornegay	03/08/2022 Added LocationID
-- Mike Kornegay	06/13/2022 Changed ReportTypeID and ReportTypeName to point to the new SessionCategoryID - this
--							   field now stores the report type of the vet surveillance session so we do not depend 
--							   on the diagnosis list to determine type.
-- Mike Kornegay	10/20/2022 Changed ReportTypeID to point to the new idfsMonitoringSessionSpeciesType.
-- Srini Goli		11/13/2022 Updated Region, Rayon and Settlement Names
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_VAS_MONITORING_SESSION_GETDetail] (
	@LanguageID NVARCHAR(50),
	@MonitoringSessionID BIGINT
	)
AS
BEGIN
	BEGIN TRY
		SET NOCOUNT ON;

		DECLARE @ReturnMessage VARCHAR(MAX) = 'SUCCESS';
		DECLARE @ReturnCode BIGINT = 0;

		SELECT ms.idfMonitoringSession AS VeterinaryMonitoringSessionID,
			ms.strMonitoringSessionID AS EIDSSSessionID,
			ms.idfsMonitoringSessionStatus AS SessionStatusTypeID,
			MonitoringSessionStatus.name AS SessionStatusTypeName,
			ms.idfsMonitoringSessionSpeciesType AS ReportTypeID,
			ISNULL(reportType.name, reportType.strDefault) as ReportTypeName,
			ms.datEnteredDate AS EnteredDate,
			ms.datStartDate AS StartDate,
			ms.datEndDate AS EndDate,
			diseaseIDs.diseaseIDs AS DiseaseIdentifiers,
            diseaseNames.diseaseNames AS DiseaseNames,
            ms.idfsCountry AS CountryID,
			ms.idfsRegion AS RegionID,
			LH.AdminLevel2Name AS RegionName,
			ms.idfsRayon AS RayonID,
			LH.AdminLevel3Name AS RayonName,
			ms.idfsSettlement AS SettlementID,
			LH.AdminLevel4Name AS SettlementName,
			LH.idfsLocation AS LocationID,
			ms.idfPersonEnteredBy AS EnteredByPersonID,
			ISNULL(p.strFamilyName, N'') + ISNULL(', ' + p.strFirstName, '') + ISNULL(' ' + p.strSecondName, '') AS EnteredByPersonName,
			ms.idfsSite AS SiteID,
			siteName.strSiteName AS SiteName,
			ms.LegacySessionID AS LegacyID,
			c.idfCampaign AS CampaignKey,
			c.strCampaignID AS CampaignID,
			c.strCampaignName AS CampaignName,
			c.idfsCampaignType AS CampaignTypeID,
			campaignType.name AS CampaignTypeName
		FROM dbo.tlbMonitoringSession ms
        LEFT JOIN dbo.tlbMonitoringSessionToDiagnosis msd 
            ON msd.idfMonitoringSession = ms.idfMonitoringSession
		LEFT JOIN dbo.tlbCampaign AS c
			ON c.idfCampaign = ms.idfCampaign
				AND c.intRowStatus = 0
		LEFT JOIN dbo.MonitoringSessionToSampleType AS mss
			ON ms.idfMonitoringSession = mss.idfMonitoringSession
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000116) AS campaignType
			ON c.idfsCampaignType = campaignType.idfsReference
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000117) AS monitoringSessionStatus
			ON monitoringSessionStatus.idfsReference = ms.idfsMonitoringSessionStatus
		LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000538) AS reportType 
			ON reportType.idfsReference = ms.SessionCategoryID
        LEFT JOIN FN_GBL_LocationHierarchy_Flattened(@LanguageID) AS LH 
			ON LH.idfsLocation = ms.idfsLocation
		LEFT JOIN dbo.tlbPerson p
			ON p.idfPerson = ms.idfPersonEnteredBy
				AND p.intRowStatus = 0
		LEFT JOIN dbo.tstUserTable u
			ON u.idfPerson = ms.idfPersonEnteredBy
				AND u.intRowStatus = 0
		LEFT JOIN dbo.tstSite AS SiteName
			ON siteName.idfsSite = ms.idfsSite 
			AND siteName.intRowStatus = 0
		CROSS APPLY (
            SELECT dbo.FN_GBL_SESSION_DISEASEIDS_GET(ms.idfMonitoringSession) diseaseIDs
            ) diseaseIDs
		CROSS APPLY (
            SELECT dbo.FN_GBL_SESSION_DISEASE_NAMES_GET(ms.idfMonitoringSession, @LanguageID) diseaseNames
            ) diseaseNames
		WHERE ms.idfMonitoringSession = @MonitoringSessionID
			AND ms.intRowStatus = 0;
	END TRY

	BEGIN CATCH
		THROW;
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_VET_DISEASE_REPORT_GETList]...';


GO
-- ================================================================================================
-- Name: USP_VET_DISEASE_REPORT_GETList
--
-- Description:	Get disease list for the farm edit/enter and other use cases.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     03/25/2018 Initial release.
-- Stephen Long     11/09/2018 Added FarmOwnerID and FarmOwnerName for lab use case 10.
-- Stephen Long     11/25/2018 Updated for the new API.
-- Stephen Long     12/31/2018 Added pagination logic.
-- Stephen Long     04/24/2019 Added advanced search parameters to sync up with use case VUC10.
-- Stephen Long     04/29/2019 Added related to veterinary disease report fields for use case VUC11 
--                             and VUC12.
-- Stephen Long     06/14/2019 Adjusted date from's and to's to be cast as just dates with no time.
-- Stephen Long     06/22/2019 Fix to the farm address logic (building, apartment, house IIF's 
--                             to case statements).
-- Stephen Long     06/25/2019 Add group by for joins with multiple records (such as samples).
-- Stephen Long     07/20/2019 Changed farm inventory counts to ISNULL.
-- Stephen Long     09/03/2019 Add active status check on species list.
-- Ann Xiong		12/05/2019 Added EIDSSPersonID to select list and replaced "ON 
--                             caseType.idfsReference = vc.idfsCaseReportType" with 
--                             "caseType.idfsReference = vc.idfsCaseType".
-- Ann Xiong		12/10/2019 Added a parameter @PersonID NVARCHAR(200) = NULL.
-- Ann Xiong		12/19/2019 Added EIDSSFarmID to select list
-- Stephen Long     01/22/2020 Added site list parameter for site filtration.
-- Stephen Long     01/28/2020 Added non-configurable filtration rules, and legacy report ID.
-- Stephen Long     02/03/2020 Added dbo prefix and changed non-configurable filtration comments.
-- Stephen Long     02/16/2020 Removed group by and pagination applied on final query.
-- Stephen Long     02/26/2020 Added data entry site ID parameter and where clause.
-- Stephen Long     03/04/2020 Corrected where clause on total count for null species type.
-- Stephen Long     03/17/2020 Corrected farm owner ID to use idfHuman instead of idfHumanActual.
-- Stephen Long     03/25/2020 Added if/else for first-level and second-level site types to bypass 
--                             non-configurable rules.
-- Stephen Long     05/18/2020 Added disease filtration rules from use case SAUC62.
-- Stephen Long     06/18/2020 Added where criteria to the query when no site filtration is 
--                             required.
-- Stephen Long     07/07/2020 Added trim to the EIDSS identifier like criteria.
-- Stephen Long     07/08/2020 Replaced common table experssion; was not working well with POCO.
-- Stephen Long     09/24/2020 Update address fields returned (settlement, rayon and region only).
-- Stephen Long     11/18/2020 Added site ID to the query.
-- Stephen Long     11/23/2020 Added configurable site filtration rules.
-- Stephen Long     11/25/2020 Modified for new permission fields on the AccessRule table.
-- Stephen Long     11/28/2020 Add index to table variable primary key.
-- Stephen Long     12/02/2020 Remove primary key from table variable IDs.
-- Stephen Long     12/13/2020 Added apply configurable filtration indicator parameter.
-- Stephen Long     12/23/2020 Added EIDSS session ID parameter and where clause criteria.
-- Stephen Long     12/24/2020 Modified join on disease filtration default role rule.
-- Stephen Long     12/29/2020 Changed function call on reference data for inactive records.
-- Stephen Long     01/04/2021 Added option recompile due to number of optional parameters for 
--                             better execution plan.
-- Stephen Long     01/05/2021 Removed species list sub-query due to performance.  New stored 
--                             procedure added to get species list when user expands disease 
--                             report row in search.
-- Stephen Long     01/06/2021 Added string aggregate function on species list and parameter to 
--                             include.
-- Stephen Long     01/25/2021 Added order by parameter to handle when a user selected a specific 
--                             column to sort by.
-- Stephen Long     01/27/2021 Fix for order by; alias will not work on order by with case.
-- Stephen Long     04/02/2021 Added updated pagination and location hierarchy.
-- Stephen Long     01/11/2022 Added farm owner (idfHuman) ID to the query and updated location 
--                             hierarchy.
-- Mike Kornegay	01/26/2022 Changed RecordCount to TotalRowCount to match BaseModel.
-- Stephen Long     03/29/2022 Added disease ID to the model for laboratory module, and corrected 
--                             site filtration.
-- Ann Xiong		04/25/2022 Added f.idfFarm to select list for Veterinary Disease Report 
--                             Deduplication.
-- Stephen Long     05/10/2022 Added report category type ID to the query.
-- Stephen Long     06/03/2022 Updated to point default access rules to base reference.
-- Mike Kornegay	08/28/2022 Changed FarmAddress to FarmLocation and added FarmLocation.
-- Mike Kornegay    08/31/2022 Corrected sort by adding order by to final query.
-- Stephen Long     09/22/2022 Add check for "0" page size.  If "0", then set to 1.
-- Ann Xiong		11/03/2022 Updated to format FarmAddress as in the use case VUC10.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_VET_DISEASE_REPORT_GETList] (
	@LanguageID NVARCHAR(50)
	,@ReportKey BIGINT = NULL
	,@ReportID NVARCHAR(200) = NULL
	,@LegacyReportID NVARCHAR(200) = NULL
	,@SessionKey BIGINT = NULL
	,@FarmMasterID BIGINT = NULL
	,@DiseaseID BIGINT = NULL
	,@ReportStatusTypeID BIGINT = NULL
	,@AdministrativeLevelID BIGINT = NULL
	,@DateEnteredFrom DATE = NULL
	,@DateEnteredTo DATE = NULL
	,@ClassificationTypeID BIGINT = NULL
	,@PersonID NVARCHAR(200) = NULL
	,@ReportTypeID BIGINT = NULL
	,@SpeciesTypeID BIGINT = NULL
	,@OutbreakCasesIndicator BIT = 0
	,@DiagnosisDateFrom DATE = NULL
	,@DiagnosisDateTo DATE = NULL
	,@InvestigationDateFrom DATE = NULL
	,@InvestigationDateTo DATE = NULL
	,@LocalOrFieldSampleID NVARCHAR(200) = NULL
	,@TotalAnimalQuantityFrom INT = NULL
	,@TotalAnimalQuantityTo INT = NULL
	,@SessionID NVARCHAR(200) = NULL
	,@DataEntrySiteID BIGINT = NULL
	,@UserSiteID BIGINT
	,@UserOrganizationID BIGINT
	,@UserEmployeeID BIGINT
	,@ApplySiteFiltrationIndicator BIT = 0
	,@IncludeSpeciesListIndicator BIT = 0
	,@SortColumn NVARCHAR(30) = 'ReportID'
	,@SortOrder NVARCHAR(4) = 'DESC'
	,@PageNumber INT = 1
	,@PageSize INT = 10
	)
AS
BEGIN
	SET NOCOUNT ON;

	     
	DECLARE @firstRec INT;
    DECLARE @lastRec INT;

    SET @firstRec = (@PageNumber - 1) * @PageSize;
    SET @lastRec = (@PageNumber * @PageSize + 1);

	DECLARE @AdministrativeLevelNode AS HIERARCHYID;
	DECLARE @Results TABLE (
		ID BIGINT NOT NULL
		,ReadPermissionIndicator BIT NOT NULL
		,AccessToPersonalDataPermissionIndicator BIT NOT NULL
		,AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL
		,WritePermissionIndicator BIT NOT NULL
		,DeletePermissionIndicator BIT NOT NULL
		,INDEX IDX_ID(ID)
		);

	BEGIN TRY
	    IF @PageSize = 0
        BEGIN
            SET @PageSize = 1;
        END

		IF @AdministrativeLevelID IS NOT NULL
		BEGIN
			SELECT @AdministrativeLevelNode = node
			FROM dbo.gisLocation
			WHERE idfsLocation = @AdministrativeLevelID;
		END;

		-- ========================================================================================
		-- NO SITE FILTRATION RULES APPLIED
		--
		-- For first and second level sites, do not apply any site filtration rules.
		-- ========================================================================================
		IF @ApplySiteFiltrationIndicator = 0
		BEGIN
			INSERT INTO @Results
			SELECT v.idfVetCase
				,1
				,1
				,1
				,1
				,1
			FROM dbo.tlbVetCase v
			INNER JOIN dbo.tlbFarm f ON f.idfFarm = v.idfFarm
			LEFT JOIN dbo.tlbHuman h ON h.idfHuman = f.idfHuman
			LEFT JOIN dbo.HumanActualAddlInfo haai ON haai.HumanActualAddlInfoUID = h.idfHumanActual
			LEFT JOIN dbo.tlbGeoLocation gl ON gl.idfGeoLocation = f.idfFarmAddress
			LEFT JOIN dbo.gisLocation g ON g.idfsLocation = gl.idfsLocation
			LEFT JOIN dbo.tlbMaterial m ON m.idfVetCase = v.idfVetCase
			LEFT JOIN dbo.tlbMonitoringSession ms ON ms.idfMonitoringSession = v.idfParentMonitoringSession
			WHERE v.intRowStatus = 0
				AND (
					f.idfFarmActual = @FarmMasterID
					OR @FarmMasterID IS NULL
					)
				AND (
					v.idfVetCase = @ReportKey
					OR @ReportKey IS NULL
					)
				AND (
					v.idfParentMonitoringSession = @SessionKey
					OR @SessionKey IS NULL
					)
				AND (
					g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
					OR @AdministrativeLevelID IS NULL
					)
				AND (
					v.idfsFinalDiagnosis = @DiseaseID
					OR @DiseaseID IS NULL
					)
				AND (
					v.idfsCaseClassification = @ClassificationTypeID
					OR @ClassificationTypeID IS NULL
					)
				AND (
					v.idfsCaseProgressStatus = @ReportStatusTypeID
					OR @ReportStatusTypeID IS NULL
					)
				AND (
					(
						CAST(v.datEnteredDate AS DATE) BETWEEN @DateEnteredFrom
							AND @DateEnteredTo
						)
					OR (
						@DateEnteredFrom IS NULL
						OR @DateEnteredTo IS NULL
						)
					)
				AND (
					v.idfsCaseReportType = @ReportTypeID
					OR @ReportTypeID IS NULL
					)
				AND (
					v.idfsCaseType = @SpeciesTypeID
					OR @SpeciesTypeID IS NULL
					)
				AND (
					(
						CAST(v.datFinalDiagnosisDate AS DATE) BETWEEN @DiagnosisDateFrom
							AND @DiagnosisDateTo
						)
					OR (
						@DiagnosisDateFrom IS NULL
						OR @DiagnosisDateTo IS NULL
						)
					)
				AND (
					(
						CAST(v.datInvestigationDate AS DATE) BETWEEN @InvestigationDateFrom
							AND @InvestigationDateTo
						)
					OR (
						@InvestigationDateFrom IS NULL
						OR @InvestigationDateTo IS NULL
						)
					)
				AND (
					(
						(
							f.intAvianTotalAnimalQty BETWEEN @TotalAnimalQuantityFrom
								AND @TotalAnimalQuantityTo
							)
						OR (
							f.intLivestockTotalAnimalQty BETWEEN @TotalAnimalQuantityFrom
								AND @TotalAnimalQuantityTo
							)
						)
					OR (
						@TotalAnimalQuantityFrom IS NULL
						OR @TotalAnimalQuantityTo IS NULL
						)
					)
				AND (
					(
						v.idfOutbreak IS NULL
						AND @OutbreakCasesIndicator = 0
						)
					OR (
						v.idfOutbreak IS NOT NULL
						AND @OutbreakCasesIndicator = 1
						)
					OR (@OutbreakCasesIndicator IS NULL)
					)
				AND (
					v.idfsSite = @DataEntrySiteID
					OR @DataEntrySiteID IS NULL
					)
				AND (
					v.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
					OR @ReportID IS NULL
					)
				AND (
					v.LegacyCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
					OR @LegacyReportID IS NULL
					)
				AND (
					haai.EIDSSPersonID LIKE '%' + TRIM(@PersonID) + '%'
					OR @PersonID IS NULL
					)
				AND (
					m.strFieldBarcode LIKE '%' + TRIM(@LocalOrFieldSampleID) + '%'
					OR @LocalOrFieldSampleID IS NULL
					)
				AND (
					ms.strMonitoringSessionID LIKE '%' + TRIM(@SessionID) + '%'
					OR @SessionID IS NULL
					)
			GROUP BY v.idfVetCase;
		END
		ELSE
		BEGIN
		INSERT INTO @Results
			SELECT v.idfVetCase
				,1
				,1
				,1
				,1
				,1
			FROM dbo.tlbVetCase v
			INNER JOIN dbo.tlbFarm f ON f.idfFarm = v.idfFarm
			LEFT JOIN dbo.tlbHuman h ON h.idfHuman = f.idfHuman
			LEFT JOIN dbo.HumanActualAddlInfo haai ON haai.HumanActualAddlInfoUID = h.idfHumanActual
			LEFT JOIN dbo.tlbGeoLocation gl ON gl.idfGeoLocation = f.idfFarmAddress
			LEFT JOIN dbo.gisLocation g ON g.idfsLocation = gl.idfsLocation
			LEFT JOIN dbo.tlbMaterial m ON m.idfVetCase = v.idfVetCase
			LEFT JOIN dbo.tlbMonitoringSession ms ON ms.idfMonitoringSession = v.idfParentMonitoringSession
			WHERE v.intRowStatus = 0
				AND v.idfsSite = @UserSiteID 
				AND (
					f.idfFarmActual = @FarmMasterID
					OR @FarmMasterID IS NULL
					)
				AND (
					v.idfVetCase = @ReportKey
					OR @ReportKey IS NULL
					)
				AND (
					v.idfParentMonitoringSession = @SessionKey
					OR @SessionKey IS NULL
					)
				AND (
					g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
					OR @AdministrativeLevelID IS NULL
					)
				AND (
					v.idfsFinalDiagnosis = @DiseaseID
					OR @DiseaseID IS NULL
					)
				AND (
					v.idfsCaseClassification = @ClassificationTypeID
					OR @ClassificationTypeID IS NULL
					)
				AND (
					v.idfsCaseProgressStatus = @ReportStatusTypeID
					OR @ReportStatusTypeID IS NULL
					)
				AND (
					(
						CAST(v.datEnteredDate AS DATE) BETWEEN @DateEnteredFrom
							AND @DateEnteredTo
						)
					OR (
						@DateEnteredFrom IS NULL
						OR @DateEnteredTo IS NULL
						)
					)
				AND (
					v.idfsCaseReportType = @ReportTypeID
					OR @ReportTypeID IS NULL
					)
				AND (
					v.idfsCaseType = @SpeciesTypeID
					OR @SpeciesTypeID IS NULL
					)
				AND (
					(
						CAST(v.datFinalDiagnosisDate AS DATE) BETWEEN @DiagnosisDateFrom
							AND @DiagnosisDateTo
						)
					OR (
						@DiagnosisDateFrom IS NULL
						OR @DiagnosisDateTo IS NULL
						)
					)
				AND (
					(
						CAST(v.datInvestigationDate AS DATE) BETWEEN @InvestigationDateFrom
							AND @InvestigationDateTo
						)
					OR (
						@InvestigationDateFrom IS NULL
						OR @InvestigationDateTo IS NULL
						)
					)
				AND (
					(
						(
							f.intAvianTotalAnimalQty BETWEEN @TotalAnimalQuantityFrom
								AND @TotalAnimalQuantityTo
							)
						OR (
							f.intLivestockTotalAnimalQty BETWEEN @TotalAnimalQuantityFrom
								AND @TotalAnimalQuantityTo
							)
						)
					OR (
						@TotalAnimalQuantityFrom IS NULL
						OR @TotalAnimalQuantityTo IS NULL
						)
					)
				AND (
					(
						v.idfOutbreak IS NULL
						AND @OutbreakCasesIndicator = 0
						)
					OR (
						v.idfOutbreak IS NOT NULL
						AND @OutbreakCasesIndicator = 1
						)
					OR (@OutbreakCasesIndicator IS NULL)
					)
				AND (
					v.idfsSite = @DataEntrySiteID
					OR @DataEntrySiteID IS NULL
					)
				AND (
					v.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
					OR @ReportID IS NULL
					)
				AND (
					v.LegacyCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
					OR @LegacyReportID IS NULL
					)
				AND (
					haai.EIDSSPersonID LIKE '%' + TRIM(@PersonID) + '%'
					OR @PersonID IS NULL
					)
				AND (
					m.strFieldBarcode LIKE '%' + TRIM(@LocalOrFieldSampleID) + '%'
					OR @LocalOrFieldSampleID IS NULL
					)
				AND (
					ms.strMonitoringSessionID LIKE '%' + TRIM(@SessionID) + '%'
					OR @SessionID IS NULL
					)
			GROUP BY v.idfVetCase;

			DECLARE @FilteredResults TABLE (
				ID BIGINT NOT NULL
				,ReadPermissionIndicator BIT NOT NULL
				,AccessToPersonalDataPermissionIndicator BIT NOT NULL
				,AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL
				,WritePermissionIndicator BIT NOT NULL
				,DeletePermissionIndicator BIT NOT NULL
				,INDEX IDX_ID(ID)
				);
			DECLARE @FinalResults TABLE
			(
				ID BIGINT NOT NULL,
		        ReadPermissionIndicator BIT NOT NULL,
				AccessToPersonalDataPermissionIndicator BIT NOT NULL,
				AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
				WritePermissionIndicator BIT NOT NULL,
				DeletePermissionIndicator BIT NOT NULL
			);

			-- =======================================================================================
			-- DEFAULT SITE FILTRATION RULES
			--
			-- Apply active default site filtration rules for third level sites.
			-- =======================================================================================
			DECLARE @RuleActiveStatus INT = 0;
			DECLARE @AdministrativeLevelTypeID INT;
			DECLARE @OrganizationAdministrativeLevelNode HIERARCHYID;
			DECLARE @DefaultAccessRules AS TABLE (
				AccessRuleID BIGINT NOT NULL,
				ActiveIndicator INT NOT NULL
				,ReadPermissionIndicator BIT NOT NULL
				,AccessToPersonalDataPermissionIndicator BIT NOT NULL
				,AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL
				,WritePermissionIndicator BIT NOT NULL
				,DeletePermissionIndicator BIT NOT NULL
				,AdministrativeLevelTypeID INT NULL
				);

			INSERT INTO @DefaultAccessRules
			SELECT AccessRuleID
			    ,a.intRowStatus
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
				,a.AdministrativeLevelTypeID
			FROM dbo.AccessRule a
			WHERE DefaultRuleIndicator = 1;

			--
			-- Report data shall be available to all sites of the same administrative level 
			-- specified in the rule.
			--
            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
			WHERE AccessRuleID = 10537009;

			IF @RuleActiveStatus = 0
			BEGIN
				SELECT @AdministrativeLevelTypeID = AdministrativeLevelTypeID
				FROM @DefaultAccessRules
				WHERE AccessRuleID = 10537009;

				SELECT @OrganizationAdministrativeLevelNode = g.node.GetAncestor(g.node.GetLevel() - @AdministrativeLevelTypeID)
				FROM dbo.tlbOffice o
				INNER JOIN dbo.tlbGeoLocationShared l ON l.idfGeoLocationShared = o.idfLocation
				INNER JOIN dbo.gisLocation g ON g.idfsLocation = l.idfsLocation
				WHERE o.idfOffice = @UserOrganizationID
					AND g.node.GetLevel() >= @AdministrativeLevelTypeID;

				-- Administrative level specified in the rule of the site where the report was created.
				INSERT INTO @FilteredResults
				SELECT v.idfVetCase
					,a.ReadPermissionIndicator
					,a.AccessToPersonalDataPermissionIndicator
					,a.AccessToGenderAndAgeDataPermissionIndicator
					,a.WritePermissionIndicator
					,a.DeletePermissionIndicator
				FROM dbo.tlbVetCase v
				INNER JOIN dbo.tstSite s ON v.idfsSite = s.idfsSite
				INNER JOIN dbo.tlbOffice o ON o.idfOffice = s.idfOffice
				INNER JOIN dbo.tlbGeoLocationShared l ON l.idfGeoLocationShared = o.idfLocation
				INNER JOIN dbo.gisLocation g ON g.idfsLocation = l.idfsLocation
				INNER JOIN @DefaultAccessRules a ON a.AccessRuleID = 10537009
				WHERE v.intRowStatus = 0
					AND (
						v.idfsCaseType = @SpeciesTypeID
						OR @SpeciesTypeID IS NULL
						)
					AND (
						(
							CAST(v.datEnteredDate AS DATE) BETWEEN @DateEnteredFrom
								AND @DateEnteredTo
							)
						OR (
							@DateEnteredFrom IS NULL
							OR @DateEnteredTo IS NULL
							)
						)
					AND g.node.IsDescendantOf(@OrganizationAdministrativeLevelNode) = 1;

				-- Administrative level specified in the rule of the farm address.
				INSERT INTO @FilteredResults
				SELECT v.idfVetCase
					,a.ReadPermissionIndicator
					,a.AccessToPersonalDataPermissionIndicator
					,a.AccessToGenderAndAgeDataPermissionIndicator
					,a.WritePermissionIndicator
					,a.DeletePermissionIndicator
				FROM dbo.tlbVetCase v
				INNER JOIN dbo.tlbFarm f ON f.idfFarm = v.idfFarm
				INNER JOIN dbo.tlbGeoLocation l ON l.idfGeoLocation = f.idfFarmAddress
				INNER JOIN dbo.gisLocation g ON g.idfsLocation = l.idfsLocation
				INNER JOIN @DefaultAccessRules a ON a.AccessRuleID = 10537009
				WHERE v.intRowStatus = 0
					AND (
						v.idfsCaseType = @SpeciesTypeID
						OR @SpeciesTypeID IS NULL
						)
					AND (
						(
							CAST(v.datEnteredDate AS DATE) BETWEEN @DateEnteredFrom
								AND @DateEnteredTo
							)
						OR (
							@DateEnteredFrom IS NULL
							OR @DateEnteredTo IS NULL
							)
						)
					AND g.node.IsDescendantOf(@OrganizationAdministrativeLevelNode) = 1;
			END;

			--
			-- Report data shall be available to all sites' organizations connected to the particular report.
			--
            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
			WHERE AccessRuleID = 10537010;

			IF @RuleActiveStatus = 0
			BEGIN
				-- Investigated and reported by organizations
				INSERT INTO @FilteredResults
				SELECT v.idfVetCase
					,a.ReadPermissionIndicator
					,a.AccessToPersonalDataPermissionIndicator
					,a.AccessToGenderAndAgeDataPermissionIndicator
					,a.WritePermissionIndicator
					,a.DeletePermissionIndicator
				FROM dbo.tlbVetCase v
				INNER JOIN @DefaultAccessRules a ON a.AccessRuleID = 10537010
				WHERE (v.intRowStatus = 0)
					AND (
						v.idfInvestigatedByOffice = @UserOrganizationID
						OR v.idfReportedByOffice = @UserOrganizationID
						);

				-- Sample collected by and sent to organizations
				INSERT INTO @FilteredResults
				SELECT MAX(m.idfVetCase)
					,a.ReadPermissionIndicator
					,a.AccessToPersonalDataPermissionIndicator
					,a.AccessToGenderAndAgeDataPermissionIndicator
					,a.WritePermissionIndicator
					,a.DeletePermissionIndicator
				FROM dbo.tlbMaterial m
				INNER JOIN dbo.tlbVetCase v ON v.idfVetCase = m.idfVetCase
					AND v.intRowStatus = 0
				INNER JOIN @DefaultAccessRules a ON a.AccessRuleID = 10537010
				WHERE m.intRowStatus = 0
					AND (
						m.idfFieldCollectedByOffice = @UserOrganizationID
						OR m.idfSendToOffice = @UserOrganizationID
						)
				GROUP BY m.idfVetCase
					,a.ReadPermissionIndicator
					,a.AccessToPersonalDataPermissionIndicator
					,a.AccessToGenderAndAgeDataPermissionIndicator
					,a.WritePermissionIndicator
					,a.DeletePermissionIndicator;

				-- Sample transferred to organizations
				INSERT INTO @FilteredResults
				SELECT MAX(m.idfVetCase)
					,a.ReadPermissionIndicator
					,a.AccessToPersonalDataPermissionIndicator
					,a.AccessToGenderAndAgeDataPermissionIndicator
					,a.WritePermissionIndicator
					,a.DeletePermissionIndicator
				FROM dbo.tlbMaterial m
				INNER JOIN dbo.tlbVetCase v ON v.idfVetCase = m.idfVetCase
					AND v.intRowStatus = 0
				INNER JOIN dbo.tlbTransferOutMaterial tom ON m.idfMaterial = tom.idfMaterial
					AND tom.intRowStatus = 0
				INNER JOIN dbo.tlbTransferOUT t ON tom.idfTransferOut = t.idfTransferOut
					AND t.intRowStatus = 0
				INNER JOIN @DefaultAccessRules a ON a.AccessRuleID = 10537010
				WHERE m.intRowStatus = 0
					AND t.idfSendToOffice = @UserOrganizationID
				GROUP BY m.idfVetCase
					,a.ReadPermissionIndicator
					,a.AccessToPersonalDataPermissionIndicator
					,a.AccessToGenderAndAgeDataPermissionIndicator
					,a.WritePermissionIndicator
					,a.DeletePermissionIndicator;
			END;

			--
			-- Report data shall be available to the sites with the connected outbreak, if the report 
			-- is the primary report/session for an outbreak.
			--
            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
			WHERE AccessRuleID = 10537011;

			IF @RuleActiveStatus = 0
			BEGIN
				INSERT INTO @FilteredResults
				SELECT v.idfVetCase
					,a.ReadPermissionIndicator
					,a.AccessToPersonalDataPermissionIndicator
					,a.AccessToGenderAndAgeDataPermissionIndicator
					,a.WritePermissionIndicator
					,a.DeletePermissionIndicator
				FROM dbo.tlbVetCase v
				INNER JOIN dbo.tlbOutbreak o ON v.idfVetCase = o.idfPrimaryCaseOrSession
					AND o.intRowStatus = 0
				INNER JOIN @DefaultAccessRules a ON a.AccessRuleID = 10537011
				WHERE v.intRowStatus = 0
					AND o.idfsSite = @UserSiteID
			END;

			-- =======================================================================================
			-- CONFIGURABLE SITE FILTRATION RULES
			-- 
			-- Apply configurable site filtration rules for use case SAUC34. Some of these rules may 
			-- overlap the default rules.
			-- =======================================================================================
			--
			-- Apply at the user's site group level, granted by a site group.
			--
			INSERT INTO @FilteredResults
			SELECT v.idfVetCase
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbVetCase v
			INNER JOIN dbo.tflSiteToSiteGroup grantingSGS ON grantingSGS.idfsSite = v.idfsSite
			INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup ON userSiteGroup.idfsSite = @UserSiteID
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE v.intRowStatus = 0
				AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

			--
			-- Apply at the user's site level, granted by a site group.
			--
			INSERT INTO @FilteredResults
			SELECT v.idfVetCase
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbVetCase v
			INNER JOIN dbo.tflSiteToSiteGroup grantingSGS ON grantingSGS.idfsSite = v.idfsSite
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorSiteID = @UserSiteID
				AND ara.ActorEmployeeGroupID IS NULL
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE v.intRowStatus = 0
				AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

			-- 
			-- Apply at the user's employee group level, granted by a site group.
			--
			INSERT INTO @FilteredResults
			SELECT v.idfVetCase
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbVetCase v
			INNER JOIN dbo.tflSiteToSiteGroup grantingSGS ON grantingSGS.idfsSite = v.idfsSite
			INNER JOIN dbo.tlbEmployeeGroupMember egm ON egm.idfEmployee = @UserEmployeeID
				AND egm.intRowStatus = 0
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE v.intRowStatus = 0
				AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

			-- 
			-- Apply at the user's ID level, granted by a site group.
			--
			INSERT INTO @FilteredResults
			SELECT v.idfVetCase
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbVetCase v
			INNER JOIN dbo.tflSiteToSiteGroup grantingSGS ON grantingSGS.idfsSite = v.idfsSite
			INNER JOIN dbo.tstUserTable u ON u.idfPerson = @UserEmployeeID
				AND u.intRowStatus = 0
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorUserID = u.idfUserID
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE v.intRowStatus = 0
				AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

			--
			-- Apply at the user's site group level, granted by a site.
			--
			INSERT INTO @FilteredResults
			SELECT v.idfVetCase
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbVetCase v
			INNER JOIN dbo.tflSiteToSiteGroup sgs ON sgs.idfsSite = @UserSiteID
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorSiteGroupID = sgs.idfSiteGroup
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE v.intRowStatus = 0
				AND sgs.idfsSite = v.idfsSite;

			-- 
			-- Apply at the user's site level, granted by a site.
			--
			INSERT INTO @FilteredResults
			SELECT v.idfVetCase
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbVetCase v
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorSiteID = @UserSiteID
				AND ara.ActorEmployeeGroupID IS NULL
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE v.intRowStatus = 0
				AND a.GrantingActorSiteID = v.idfsSite;

			-- 
			-- Apply at the user's employee group level, granted by a site.
			--
			INSERT INTO @FilteredResults
			SELECT v.idfVetCase
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbVetCase v
			INNER JOIN dbo.tlbEmployeeGroupMember egm ON egm.idfEmployee = @UserEmployeeID
				AND egm.intRowStatus = 0
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE v.intRowStatus = 0
				AND a.GrantingActorSiteID = v.idfsSite;

			-- 
			-- Apply at the user's ID level, granted by a site.
			--
			INSERT INTO @FilteredResults
			SELECT v.idfVetCase
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbVetCase v
			INNER JOIN dbo.tstUserTable u ON u.idfPerson = @UserEmployeeID
				AND u.intRowStatus = 0
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorUserID = u.idfUserID
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE v.intRowStatus = 0
				AND a.GrantingActorSiteID = v.idfsSite;

			-- Copy filtered results to results and use search criteria
			INSERT INTO @Results
			SELECT ID
				,ReadPermissionIndicator
				,AccessToPersonalDataPermissionIndicator
				,AccessToGenderAndAgeDataPermissionIndicator
				,WritePermissionIndicator
				,DeletePermissionIndicator
			FROM @FilteredResults
			INNER JOIN dbo.tlbVetCase v ON v.idfVetCase = ID
			INNER JOIN dbo.tlbFarm f ON f.idfFarm = v.idfFarm
			LEFT JOIN dbo.tlbHuman h ON h.idfHuman = f.idfHuman
			LEFT JOIN dbo.HumanActualAddlInfo haai ON haai.HumanActualAddlInfoUID = h.idfHumanActual
			LEFT JOIN dbo.tlbGeoLocation gl ON gl.idfGeoLocation = f.idfFarmAddress
			LEFT JOIN dbo.gisLocation g ON g.idfsLocation = gl.idfsLocation
			LEFT JOIN dbo.tlbMaterial m ON m.idfVetCase = v.idfVetCase
			LEFT JOIN dbo.tlbMonitoringSession ms ON ms.idfMonitoringSession = v.idfParentMonitoringSession
			WHERE v.intRowStatus = 0
				AND (
					f.idfFarmActual = @FarmMasterID
					OR @FarmMasterID IS NULL
					)
				AND (
					v.idfVetCase = @ReportKey
					OR @ReportKey IS NULL
					)
				AND (
					v.idfParentMonitoringSession = @SessionKey
					OR @SessionKey IS NULL
					)
				AND (
					g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
					OR @AdministrativeLevelID IS NULL
					)
				AND (
					v.idfsFinalDiagnosis = @DiseaseID
					OR @DiseaseID IS NULL
					)
				AND (
					v.idfsCaseClassification = @ClassificationTypeID
					OR @ClassificationTypeID IS NULL
					)
				AND (
					v.idfsCaseProgressStatus = @ReportStatusTypeID
					OR @ReportStatusTypeID IS NULL
					)
				AND (
					(
						CAST(v.datEnteredDate AS DATE) BETWEEN @DateEnteredFrom
							AND @DateEnteredTo
						)
					OR (
						@DateEnteredFrom IS NULL
						OR @DateEnteredTo IS NULL
						)
					)
				AND (
					v.idfsCaseReportType = @ReportTypeID
					OR @ReportTypeID IS NULL
					)
				AND (
					v.idfsCaseType = @SpeciesTypeID
					OR @SpeciesTypeID IS NULL
					)
				AND (
					(
						CAST(v.datFinalDiagnosisDate AS DATE) BETWEEN @DiagnosisDateFrom
							AND @DiagnosisDateTo
						)
					OR (
						@DiagnosisDateFrom IS NULL
						OR @DiagnosisDateTo IS NULL
						)
					)
				AND (
					(
						CAST(v.datInvestigationDate AS DATE) BETWEEN @InvestigationDateFrom
							AND @InvestigationDateTo
						)
					OR (
						@InvestigationDateFrom IS NULL
						OR @InvestigationDateTo IS NULL
						)
					)
				AND (
					(
						(
							f.intAvianTotalAnimalQty BETWEEN @TotalAnimalQuantityFrom
								AND @TotalAnimalQuantityTo
							)
						OR (
							f.intLivestockTotalAnimalQty BETWEEN @TotalAnimalQuantityFrom
								AND @TotalAnimalQuantityTo
							)
						)
					OR (
						@TotalAnimalQuantityFrom IS NULL
						OR @TotalAnimalQuantityTo IS NULL
						)
					)
				AND (
					(
						v.idfOutbreak IS NULL
						AND @OutbreakCasesIndicator = 0
						)
					OR (
						v.idfOutbreak IS NOT NULL
						AND @OutbreakCasesIndicator = 1
						)
					OR (@OutbreakCasesIndicator IS NULL)
					)
				AND (
					v.idfsSite = @DataEntrySiteID
					OR @DataEntrySiteID IS NULL
					)
				AND (
					v.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
					OR @ReportID IS NULL
					)
				AND (
					v.LegacyCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
					OR @LegacyReportID IS NULL
					)
				AND (
					haai.EIDSSPersonID LIKE '%' + TRIM(@PersonID) + '%'
					OR @PersonID IS NULL
					)
				AND (
					m.strFieldBarcode LIKE '%' + TRIM(@LocalOrFieldSampleID) + '%'
					OR @LocalOrFieldSampleID IS NULL
					)
				AND (
					ms.strMonitoringSessionID LIKE '%' + TRIM(@SessionID) + '%'
					OR @SessionID IS NULL
					)
			GROUP BY ID
				,ReadPermissionIndicator
				,AccessToPersonalDataPermissionIndicator
				,AccessToGenderAndAgeDataPermissionIndicator
				,WritePermissionIndicator
				,DeletePermissionIndicator;
		END;

		-- =======================================================================================
		-- DISEASE FILTRATION RULES
		--
		-- Apply disease filtration rules from use case SAUC62.
		-- =======================================================================================
		-- 
		-- Apply level 0 disease filtration rules for the employee default user group - Denies ONLY
		-- as all records have been pulled above with or without site filtration rules applied.
		--
		DELETE
		FROM @Results
		WHERE ID IN (
				SELECT v.idfVetCase
				FROM dbo.tlbVetCase v
				INNER JOIN dbo.tstObjectAccess AS oa ON oa.idfsObjectID = v.idfsFinalDiagnosis
					AND oa.intRowStatus = 0
				WHERE oa.intPermission = 1
					AND oa.idfActor = - 506 -- Default role
				);

		--
		-- Apply level 1 disease filtration rules for an employee's associated user group(s).  
		-- Allows and denies will supersede level 0.
		--
		INSERT INTO @Results
		SELECT v.idfVetCase
			,1
			,1
			,1
			,1
			,1
		FROM dbo.tlbVetCase v
		INNER JOIN dbo.tstObjectAccess oa ON oa.idfsObjectID = v.idfsFinalDiagnosis
			AND oa.intRowStatus = 0
		INNER JOIN dbo.tlbEmployeeGroupMember egm ON egm.idfEmployee = @UserEmployeeID
			AND egm.intRowStatus = 0
		INNER JOIN dbo.tlbFarm f ON f.idfFarm = v.idfFarm
		LEFT JOIN dbo.tlbHuman h ON h.idfHuman = f.idfHuman
		LEFT JOIN dbo.HumanActualAddlInfo haai ON haai.HumanActualAddlInfoUID = h.idfHumanActual
		LEFT JOIN dbo.tlbGeoLocation gl ON gl.idfGeoLocation = f.idfFarmAddress
		LEFT JOIN dbo.gisLocation g ON g.idfsLocation = gl.idfsLocation
		LEFT JOIN dbo.tlbMaterial m ON m.idfVetCase = v.idfVetCase
			AND m.intRowStatus = 0
		LEFT JOIN dbo.tlbMonitoringSession ms ON ms.idfMonitoringSession = v.idfParentMonitoringSession
			AND ms.intRowStatus = 0
		WHERE oa.intPermission = 2 -- Allow permission
			AND v.intRowStatus = 0
			AND oa.idfActor = egm.idfEmployeeGroup
			AND (
				f.idfFarmActual = @FarmMasterID
				OR @FarmMasterID IS NULL
				)
			AND (
				v.idfVetCase = @ReportKey
				OR @ReportKey IS NULL
				)
			AND (
				v.idfParentMonitoringSession = @SessionKey
				OR @SessionKey IS NULL
				)
			AND (
				g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
				OR @AdministrativeLevelID IS NULL
				)
			AND (
				v.idfsFinalDiagnosis = @DiseaseID
				OR @DiseaseID IS NULL
				)
			AND (
				v.idfsCaseClassification = @ClassificationTypeID
				OR @ClassificationTypeID IS NULL
				)
			AND (
				v.idfsCaseProgressStatus = @ReportStatusTypeID
				OR @ReportStatusTypeID IS NULL
				)
			AND (
				(
					CAST(v.datEnteredDate AS DATE) BETWEEN @DateEnteredFrom
						AND @DateEnteredTo
					)
				OR (
					@DateEnteredFrom IS NULL
					OR @DateEnteredTo IS NULL
					)
				)
			AND (
				v.idfsCaseReportType = @ReportTypeID
				OR @ReportTypeID IS NULL
				)
			AND (
				v.idfsCaseType = @SpeciesTypeID
				OR @SpeciesTypeID IS NULL
				)
			AND (
				(
					CAST(v.datFinalDiagnosisDate AS DATE) BETWEEN @DiagnosisDateFrom
						AND @DiagnosisDateTo
					)
				OR (
					@DiagnosisDateFrom IS NULL
					OR @DiagnosisDateTo IS NULL
					)
				)
			AND (
				(
					CAST(v.datInvestigationDate AS DATE) BETWEEN @InvestigationDateFrom
						AND @InvestigationDateTo
					)
				OR (
					@InvestigationDateFrom IS NULL
					OR @InvestigationDateTo IS NULL
					)
				)
			AND (
				(
					(
						f.intAvianTotalAnimalQty BETWEEN @TotalAnimalQuantityFrom
							AND @TotalAnimalQuantityTo
						)
					OR (
						f.intLivestockTotalAnimalQty BETWEEN @TotalAnimalQuantityFrom
							AND @TotalAnimalQuantityTo
						)
					)
				OR (
					@TotalAnimalQuantityFrom IS NULL
					OR @TotalAnimalQuantityTo IS NULL
					)
				)
			AND (
				(
					v.idfOutbreak IS NULL
					AND @OutbreakCasesIndicator = 0
					)
				OR (
					v.idfOutbreak IS NOT NULL
					AND @OutbreakCasesIndicator = 1
					)
				OR (@OutbreakCasesIndicator IS NULL)
				)
			AND (
				v.idfsSite = @DataEntrySiteID
				OR @DataEntrySiteID IS NULL
				)
			AND (
				v.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
				OR @ReportID IS NULL
				)
			AND (
				v.LegacyCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
				OR @LegacyReportID IS NULL
				)
			AND (
				haai.EIDSSPersonID LIKE '%' + TRIM(@PersonID) + '%'
				OR @PersonID IS NULL
				)
			AND (
				m.strFieldBarcode LIKE '%' + TRIM(@LocalOrFieldSampleID) + '%'
				OR @LocalOrFieldSampleID IS NULL
				)
			AND (
				ms.strMonitoringSessionID LIKE '%' + TRIM(@SessionID) + '%'
				OR @SessionID IS NULL
				)
		GROUP BY v.idfVetCase;

		DELETE res
		FROM @Results res
		INNER JOIN dbo.tlbVetCase AS v ON v.idfVetCase = res.ID
		INNER JOIN dbo.tlbEmployeeGroupMember AS egm ON egm.idfEmployee = @UserEmployeeID
			AND egm.intRowStatus = 0
		INNER JOIN dbo.tstObjectAccess AS oa ON oa.idfsObjectID = v.idfsFinalDiagnosis
			AND oa.intRowStatus = 0
		WHERE oa.intPermission = 1
			AND oa.idfsObjectType = 10060001 -- Disease
			AND oa.idfActor = egm.idfEmployeeGroup;

		--
		-- Apply level 2 disease filtration rules for the employee's identity.  Allows and denies 
		-- will supersede level 1.
		--
		INSERT INTO @Results
		SELECT v.idfVetCase
			,1
			,1
			,1
			,1
			,1
		FROM dbo.tlbVetCase v
		INNER JOIN dbo.tstObjectAccess oa ON oa.idfsObjectID = v.idfsFinalDiagnosis
			AND oa.intRowStatus = 0
		INNER JOIN dbo.tlbFarm f ON f.idfFarm = v.idfFarm
		LEFT JOIN dbo.tlbHuman h ON h.idfHuman = f.idfHuman
		LEFT JOIN dbo.HumanActualAddlInfo haai ON haai.HumanActualAddlInfoUID = h.idfHumanActual
		LEFT JOIN dbo.tlbGeoLocation gl ON gl.idfGeoLocation = f.idfFarmAddress
		LEFT JOIN dbo.gisLocation g ON g.idfsLocation = gl.idfsLocation
		LEFT JOIN dbo.tlbMaterial m ON m.idfVetCase = v.idfVetCase
			AND m.intRowStatus = 0
		LEFT JOIN dbo.tlbMonitoringSession ms ON ms.idfMonitoringSession = v.idfParentMonitoringSession
			AND ms.intRowStatus = 0
		WHERE oa.intPermission = 2 -- Allow permission
			AND v.intRowStatus = 0
			AND oa.idfsObjectType = 10060001 -- Disease
			AND oa.idfActor = @UserEmployeeID
			AND (
				f.idfFarmActual = @FarmMasterID
				OR @FarmMasterID IS NULL
				)
			AND (
				v.idfVetCase = @ReportKey
				OR @ReportKey IS NULL
				)
			AND (
				v.idfParentMonitoringSession = @SessionKey
				OR @SessionKey IS NULL
				)
			AND (
				g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
				OR @AdministrativeLevelID IS NULL
				)
			AND (
				v.idfsFinalDiagnosis = @DiseaseID
				OR @DiseaseID IS NULL
				)
			AND (
				v.idfsCaseClassification = @ClassificationTypeID
				OR @ClassificationTypeID IS NULL
				)
			AND (
				v.idfsCaseProgressStatus = @ReportStatusTypeID
				OR @ReportStatusTypeID IS NULL
				)
			AND (
				(
					CAST(v.datEnteredDate AS DATE) BETWEEN @DateEnteredFrom
						AND @DateEnteredTo
					)
				OR (
					@DateEnteredFrom IS NULL
					OR @DateEnteredTo IS NULL
					)
				)
			AND (
				v.idfsCaseReportType = @ReportTypeID
				OR @ReportTypeID IS NULL
				)
			AND (
				v.idfsCaseType = @SpeciesTypeID
				OR @SpeciesTypeID IS NULL
				)
			AND (
				(
					CAST(v.datFinalDiagnosisDate AS DATE) BETWEEN @DiagnosisDateFrom
						AND @DiagnosisDateTo
					)
				OR (
					@DiagnosisDateFrom IS NULL
					OR @DiagnosisDateTo IS NULL
					)
				)
			AND (
				(
					CAST(v.datInvestigationDate AS DATE) BETWEEN @InvestigationDateFrom
						AND @InvestigationDateTo
					)
				OR (
					@InvestigationDateFrom IS NULL
					OR @InvestigationDateTo IS NULL
					)
				)
			AND (
				(
					(
						f.intAvianTotalAnimalQty BETWEEN @TotalAnimalQuantityFrom
							AND @TotalAnimalQuantityTo
						)
					OR (
						f.intLivestockTotalAnimalQty BETWEEN @TotalAnimalQuantityFrom
							AND @TotalAnimalQuantityTo
						)
					)
				OR (
					@TotalAnimalQuantityFrom IS NULL
					OR @TotalAnimalQuantityTo IS NULL
					)
				)
			AND (
				(
					v.idfOutbreak IS NULL
					AND @OutbreakCasesIndicator = 0
					)
				OR (
					v.idfOutbreak IS NOT NULL
					AND @OutbreakCasesIndicator = 1
					)
				OR (@OutbreakCasesIndicator IS NULL)
				)
			AND (
				v.idfsSite = @DataEntrySiteID
				OR @DataEntrySiteID IS NULL
				)
			AND (
				v.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
				OR @ReportID IS NULL
				)
			AND (
				v.LegacyCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
				OR @LegacyReportID IS NULL
				)
			AND (
				haai.EIDSSPersonID LIKE '%' + TRIM(@PersonID) + '%'
				OR @PersonID IS NULL
				)
			AND (
				m.strFieldBarcode LIKE '%' + TRIM(@LocalOrFieldSampleID) + '%'
				OR @LocalOrFieldSampleID IS NULL
				)
			AND (
				ms.strMonitoringSessionID LIKE '%' + TRIM(@SessionID) + '%'
				OR @SessionID IS NULL
				)
		GROUP BY v.idfVetCase;

		DELETE
		FROM @Results
		WHERE ID IN (
				SELECT v.idfVetCase
				FROM dbo.tlbVetCase v
				INNER JOIN dbo.tstObjectAccess oa ON oa.idfsObjectID = v.idfsFinalDiagnosis
					AND oa.intRowStatus = 0
				WHERE oa.intPermission = 1 -- Deny permission
					AND oa.idfsObjectType = 10060001 -- Disease
					AND oa.idfActor = @UserEmployeeID
				);

		-- ========================================================================================
		-- FINAL QUERY, PAGINATION AND COUNTS
		-- ========================================================================================
		INSERT INTO @FinalResults
        SELECT ID,
               ReadPermissionIndicator,
               AccessToPersonalDataPermissionIndicator,
               AccessToGenderAndAgeDataPermissionIndicator,
               WritePermissionIndicator,
               DeletePermissionIndicator
        FROM @Results res
        WHERE res.ReadPermissionIndicator = 1
        GROUP BY ID,
               ReadPermissionIndicator,
               AccessToPersonalDataPermissionIndicator,
               AccessToGenderAndAgeDataPermissionIndicator,
               WritePermissionIndicator,
               DeletePermissionIndicator;

		WITH paging
		AS (SELECT 
				ID,
				c = COUNT(*) OVER()
			FROM @FinalResults res
			INNER JOIN dbo.tlbVetCase v ON v.idfVetCase = res.ID
			INNER JOIN dbo.tlbFarm f ON f.idfFarm = v.idfFarm
			LEFT JOIN dbo.tlbGeoLocation gl ON gl.idfGeoLocation = f.idfFarmAddress
			LEFT JOIN dbo.gisLocation g ON g.idfsLocation = gl.idfsLocation
			LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh ON lh.idfsLocation = g.idfsLocation
			LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000019) disease ON disease.idfsReference = v.idfsFinalDiagnosis
			LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000011) caseClassification ON caseClassification.idfsReference = v.idfsCaseClassification
			LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000111) reportStatus ON reportStatus.idfsReference = v.idfsCaseProgressStatus
			LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000144) reportType ON reportType.idfsReference = v.idfsCaseReportType
			ORDER BY 
				CASE WHEN @SortColumn = 'ReportID' AND @SortOrder = 'ASC' THEN v.strCaseID END ASC,
				CASE WHEN @SortColumn = 'ReportID' AND @SortOrder = 'DESC' THEN v.strCaseID END DESC,
				CASE WHEN @SortColumn = 'EnteredDate' AND @SortOrder = 'ASC' THEN v.datEnteredDate END ASC,
				CASE WHEN @SortColumn = 'EnteredDate' AND @SortOrder = 'DESC' THEN v.datEnteredDate END DESC,
				CASE WHEN @SortColumn = 'DiseaseName' AND @SortOrder = 'ASC' THEN disease.name END ASC,
				CASE WHEN @SortColumn = 'DiseaseName' AND @SortOrder = 'DESC' THEN disease.name END DESC,
				CASE WHEN @SortColumn = 'FarmName' AND @SortOrder = 'ASC' THEN f.strNationalName END ASC,
				CASE WHEN @SortColumn = 'FarmName' AND @SortOrder = 'DESC' THEN f.strNationalName END DESC,
				CASE WHEN @SortColumn = 'FarmAddress' AND @SortOrder = 'ASC' THEN (lh.AdminLevel1Name + ', ' + lh.AdminLevel2Name) END ASC,
				CASE WHEN @SortColumn = 'FarmAddress' AND @SortOrder = 'DESC' THEN (lh.AdminLevel1Name + ', ' + lh.AdminLevel2Name) END DESC,
				CASE WHEN @SortColumn = 'ClassificationTypeName' AND @SortOrder = 'ASC' THEN caseClassification.name END ASC,
				CASE WHEN @SortColumn = 'ClassificationTypeName' AND @SortOrder = 'DESC' THEN caseClassification.name END DESC,
				CASE WHEN @SortColumn = 'ReportStatusTypeName' AND @SortOrder = 'ASC' THEN reportStatus.name END ASC,
				CASE WHEN @SortColumn = 'ReportStatusTypeName' AND @SortOrder = 'DESC' THEN reportStatus.name END DESC,
				CASE WHEN @SortColumn = 'ReportTypeName' AND @SortOrder = 'ASC' THEN reportType.name END ASC,
				CASE WHEN @SortColumn = 'ReportTypeName' AND @SortOrder = 'DESC' THEN reportType.name END DESC
				OFFSET @PageSize * (@PageNumber - 1) ROWS FETCH NEXT @PageSize ROWS ONLY)
		SELECT res.ID AS ReportKey
			,v.strCaseID AS ReportID
			,v.idfOutbreak AS OutbreakKey
			,o.strOutbreakID AS OutbreakID
			,v.idfsCaseType AS ReportCategoryTypeID
			,reportStatus.name AS ReportStatusTypeName
			,reportType.name AS ReportTypeName
			,caseType.name AS SpeciesTypeName
			,caseClassification.name AS ClassificationTypeName
			,v.datReportDate AS ReportDate
			,v.datInvestigationDate AS InvestigationDate
			,v.idfsFinalDiagnosis AS DiseaseID 
			,finalDiagnosis.name AS DiseaseName
			,v.datFinalDiagnosisDate AS FinalDiagnosisDate
			,ISNULL(personInvestigatedBy.strFamilyName, N'') + ISNULL(', ' + personInvestigatedBy.strFirstName, '') + ISNULL(' ' + personInvestigatedBy.strSecondName, '') AS InvestigatedByPersonName
			,ISNULL(personReportedBy.strFamilyName, N'') + ISNULL(', ' + personReportedBy.strFirstName, '') + ISNULL(' ' + personReportedBy.strSecondName, '') AS ReportedByPersonName
			,(
				CASE 
					WHEN v.idfsCaseType = 10012003
						THEN ISNULL(f.intLivestockSickAnimalQty, '0')
					ELSE ISNULL(f.intAvianSickAnimalQty, '0')
					END
				) AS TotalSickAnimalQuantity
			,(
				CASE 
					WHEN v.idfsCaseType = 10012003
						THEN ISNULL(f.intLivestockTotalAnimalQty, '0')
					ELSE ISNULL(f.intAvianTotalAnimalQty, '0')
					END
				) AS TotalAnimalQuantity
			,(
				CASE 
					WHEN v.idfsCaseType = 10012003
						THEN ISNULL(f.intLivestockDeadAnimalQty, '0')
					ELSE ISNULL(f.intAvianDeadAnimalQty, '0')
					END
				) AS TotalDeadAnimalQuantity
			,(
				CASE 
					WHEN @IncludeSpeciesListIndicator = 1
						THEN (
								SELECT STRING_AGG(speciesType.name, ', ') WITHIN
								GROUP (
										ORDER BY speciesType.name
										) AS Result
								FROM dbo.tlbSpecies s
								INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000086) AS speciesType ON speciesType.idfsReference = s.idfsSpeciesType
								INNER JOIN dbo.tlbHerd AS h ON h.idfHerd = s.idfHerd
									AND h.intRowStatus = 0
									AND h.idfFarm = v.idfFarm
								WHERE s.intRowStatus = 0
								)
					ELSE ''
					END
				) AS SpeciesList
			,f.strFarmCode AS FarmID
			,f.idfFarmActual AS FarmMasterKey
			,f.strNationalName AS FarmName
			,f.idfHuman AS FarmOwnerKey
			,haai.EIDSSPersonID AS FarmOwnerID
			,ISNULL(h.strLastName, N'') + ISNULL(', ' + h.strFirstName, '') + ISNULL(' ' + h.strSecondName, '') AS FarmOwnerName
			,(lh.AdminLevel1Name + ', ' + lh.AdminLevel2Name) AS FarmLocation
			,dbo.FN_GBL_CreateAddressString	(ISNULL(lh.AdminLevel4Name, N''), ISNULL(lh.AdminLevel3Name, N''), ISNULL(lh.AdminLevel2Name, N''), '', '', '', '', '', '', '',0,'') AS FarmAddress
			,v.datEnteredDate AS EnteredDate
			,ISNULL(personEnteredBy.strFamilyName, N'') + ISNULL(', ' + personEnteredBy.strFirstName, '') + ISNULL(' ' + personEnteredBy.strSecondName, '') AS EnteredByPersonName
			,v.idfsSite AS SiteKey
			,f.idfFarm
			,res.ReadPermissionIndicator
			,res.AccessToPersonalDataPermissionIndicator
			,res.AccessToGenderAndAgeDataPermissionIndicator
			,res.WritePermissionIndicator
			,res.DeletePermissionIndicator
			,c AS TotalRowCount
			,(
				SELECT COUNT(*)
				FROM dbo.tlbVetCase v
				INNER JOIN dbo.tlbFarm f ON f.idfFarm = v.idfFarm
					AND f.intRowStatus = 0
				WHERE v.intRowStatus = 0
					AND (
						(v.idfsCaseType = @SpeciesTypeID)
						OR @SpeciesTypeID IS NULL
						)
				) AS TotalCount
			,TotalPages = (c / @PageSize) + IIF(c % @PageSize > 0, 1, 0)
			,CurrentPage = @PageNumber
		FROM paging 
			INNER JOIN @FinalResults res ON res.ID = paging.ID
			INNER JOIN dbo.tlbVetCase v ON v.idfVetCase = res.ID
			INNER JOIN dbo.tlbFarm f ON f.idfFarm = v.idfFarm
			LEFT JOIN dbo.tlbHuman h ON h.idfHuman = f.idfHuman
			LEFT JOIN dbo.HumanActualAddlInfo haai ON haai.HumanActualAddlInfoUID = h.idfHumanActual
			LEFT JOIN dbo.tlbPerson personInvestigatedBy ON personInvestigatedBy.idfPerson = v.idfPersonInvestigatedBy
			LEFT JOIN dbo.tlbPerson personEnteredBy ON personEnteredBy.idfPerson = v.idfPersonEnteredBy
			LEFT JOIN dbo.tlbPerson personReportedBy ON personReportedBy.idfPerson = v.idfPersonReportedBy
			LEFT JOIN dbo.tlbGeoLocation gl ON gl.idfGeoLocation = f.idfFarmAddress
			LEFT JOIN dbo.gisLocation g ON g.idfsLocation = gl.idfsLocation
			LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh ON lh.idfsLocation = g.idfsLocation
			LEFT JOIN dbo.tlbOutbreak o ON o.idfOutbreak = v.idfOutbreak
				AND o.intRowStatus = 0
			LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000019) finalDiagnosis ON finalDiagnosis.idfsReference = v.idfsFinalDiagnosis
			LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000011) caseClassification ON caseClassification.idfsReference = v.idfsCaseClassification
			LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000111) reportStatus ON reportStatus.idfsReference = v.idfsCaseProgressStatus
			LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000144) reportType ON reportType.idfsReference = v.idfsCaseReportType
			LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000012) caseType ON caseType.idfsReference = v.idfsCaseType
		ORDER BY 
			CASE WHEN @SortColumn = 'ReportID' AND @SortOrder = 'ASC' THEN v.strCaseID END ASC,
			CASE WHEN @SortColumn = 'ReportID' AND @SortOrder = 'DESC' THEN v.strCaseID END DESC,
			CASE WHEN @SortColumn = 'EnteredDate' AND @SortOrder = 'ASC' THEN v.datEnteredDate END ASC,
			CASE WHEN @SortColumn = 'EnteredDate' AND @SortOrder = 'DESC' THEN v.datEnteredDate END DESC,
			CASE WHEN @SortColumn = 'DiseaseName' AND @SortOrder = 'ASC' THEN finalDiagnosis.name END ASC,
			CASE WHEN @SortColumn = 'DiseaseName' AND @SortOrder = 'DESC' THEN finalDiagnosis.name END DESC,
			CASE WHEN @SortColumn = 'FarmName' AND @SortOrder = 'ASC' THEN f.strNationalName END ASC,
			CASE WHEN @SortColumn = 'FarmName' AND @SortOrder = 'DESC' THEN f.strNationalName END DESC,
			CASE WHEN @SortColumn = 'FarmAddress' AND @SortOrder = 'ASC' THEN (lh.AdminLevel1Name + ', ' + lh.AdminLevel2Name) END ASC,
			CASE WHEN @SortColumn = 'FarmAddress' AND @SortOrder = 'DESC' THEN (lh.AdminLevel1Name + ', ' + lh.AdminLevel2Name) END DESC,
			CASE WHEN @SortColumn = 'ClassificationTypeName' AND @SortOrder = 'ASC' THEN caseClassification.name END ASC,
			CASE WHEN @SortColumn = 'ClassificationTypeName' AND @SortOrder = 'DESC' THEN caseClassification.name END DESC,
			CASE WHEN @SortColumn = 'ReportStatusTypeName' AND @SortOrder = 'ASC' THEN reportStatus.name END ASC,
			CASE WHEN @SortColumn = 'ReportStatusTypeName' AND @SortOrder = 'DESC' THEN reportStatus.name END DESC,
			CASE WHEN @SortColumn = 'ReportTypeName' AND @SortOrder = 'ASC' THEN reportType.name END ASC,
			CASE WHEN @SortColumn = 'ReportTypeName' AND @SortOrder = 'DESC' THEN reportType.name END DESC;
			
	END TRY

	BEGIN CATCH
		THROW;
	END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USSP_GBL_DataAuditEvent_GET]...';


GO
-- =============================================
-- Author:		Steven Verner
-- Create date: 2.2.2022
-- Description:	Gets the audit event for the given user
-- Added Additional input Parameters  @idfsDataAuditObjectType,@idfMainObject,@idfMainObjectTable
-- =============================================
ALTER PROCEDURE [dbo].[USSP_GBL_DataAuditEvent_GET] 
		-- Add the parameters for the stored procedure here
	@idfUserId BIGINT = NULL, 
	@idfSiteId BIGINT = NULL,
	@idfsDataAuditEventType BIGINT=NULL,
	@idfsDataAuditObjectType BIGINT=NULL,
	@idfMainObject BIGINT=NULL,
	@idfMainObjectTable BIGINT=NULL,
	@event BIGINT OUTPUT

AS
BEGIN

	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @officeid BIGINT
	DECLARE @siteid BIGINT 
	DECLARE @aspnetUserId UNIQUEIDENTIFIER

	-- Get the user's siteid...
	SELECT @aspnetUserId = ID FROM aspnetUsers WHERE idfUserID = @idfUserId
	SELECT @officeid = idfInstitution FROM EmployeeToInstitution eti WHERE eti.aspNetUserId = @aspnetUserId AND eti.IsDefault = 1
	if (@idfSiteId != NULL)
		SELECT @siteid = idfsSite FROM tstsite WHERE idfOffice = @officeid
	ELSE
		SEt @siteid= @idfSiteId

	SELECT @event = idfDataAuditEvent 
	FROM tstLocalConnectionContext lcc 
	WHERE @idfUserId = @idfUserId

	IF @event is null
	BEGIN
		EXEC USP_GBL_NEXTKEYID_GET 'tauDataAuditEvent', @event OUTPUT

		INSERT INTO [tauDataAuditEvent] (
			[idfDataAuditEvent],
			[idfsDataAuditObjectType],
			[idfsDataAuditEventType],
			[idfMainObject],
			[idfMainObjectTable],
			[idfUserID],
			[idfsSite],
			[datEnteringDate]
		) 
		values
			(@event,
			@idfsDataAuditObjectType,
			@idfsDataAuditEventType, 
			@idfMainObject,
			@idfMainObjectTable,
			@idfUserId,
			@siteid,
			GETDATE()
			)

			UPDATE tstLocalConnectionContext
			SET idfDataAuditEvent = @event
			WHERE idfUserID = @idfUserId
	END 
END
GO
PRINT N'Altering Procedure [Report].[USP_REP_LAB_HumSerologyResearchCard]...';


GO
--*************************************************************************
-- Name 				: report.USP_REP_LAB_HumSerologyResearchCard
-- Description			: Select data for Serology Research Card.
-- 
-- Author               : Srini Goli
-- Revision History
--		Name			Date		Change Detail
--		Srini Goli		11/13/2022	Function returning worong SiteId --Commented that like
-- Testing code:
/*
--Example of a call of procedure:
EXEC report.USP_REP_LAB_HumSerologyResearchCard @LangID=N'en-US',@SampleID='SE01130039'
*/

ALTER PROCEDURE [Report].[USP_REP_LAB_HumSerologyResearchCard]
	(
		@LangID		AS NVARCHAR(10), 
		@SampleID	AS VARCHAR(36),	 
		@LastName	AS NVARCHAR(200) = NULL,
		@FirstName	AS NVARCHAR(200) = NULL,
		@SiteID		AS BIGINT = NULL
	)
AS	

-- Field description may be found here
-- "https://repos.btrp.net/BTRP/Project_Documents/08x-Implementation/Customizations/GG/Reports/Specification for report development - Serology Research Card Human GG v1.0.doc"
-- by number marked red at screen form prototype 

DECLARE	@ReportTable 	TABLE
(	idfTesting				BIGINT,
	strSiteName				NVARCHAR(200), --1
	strSiteAddress			NVARCHAR(200), --2
	strSampleId				NVARCHAR(200), --4
	datSampleReceived		DATETIME,	   --5
	datSampleCollected		DATETIME,	   --6
	strNameSurname			NVARCHAR(200), --8
	strAge					NVARCHAR(200), --9
	strResearchedSample		NVARCHAR(200), --10
	strSampleReceivedFrom	NVARCHAR(200), --11
	strResearchMethod		NVARCHAR(200), --13
	strResearchedDiagnosis	NVARCHAR(200), --14
	strResultReceived		NVARCHAR(200), --15
	strNorm					NVARCHAR(200), --16
	strDiagnosticalMeaning	NVARCHAR(200), --17
	strResearchConductedBy	NVARCHAR(max), --19
	strResponsiblePerson	NVARCHAR(2000),--20
	datResultDate			DATETIME,	   --21
	strKey					NVARCHAR(200) -- it need's for merge with archive data in application
)	
DECLARE
	@idfsOffice				BIGINT,
	@strOfficeName			NVARCHAR(200),
	@strOfficeLocation		NVARCHAR(200),
	@idfsCustomReportType	BIGINT,
	@tel					NVARCHAR(10)
  
DECLARE	
	@FFResultReceived	BIGINT,
	@FFNorm				BIGINT
  
--IF @SiteID IS NULL SET @SiteID = report.FN_GBL_SiteID_GET() 
SET @idfsCustomReportType = 10290014 -- GG Serology Research Result

SELECT @FFResultReceived = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ffp_ResultReceived'
AND intRowStatus = 0

SELECT @FFNorm = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ffp_Norm'
AND intRowStatus = 0  
  

  
SELECT	@tel = ISNULL(RTRIM(r.[name]) + N' ', N'')
FROM	FN_GBL_ReferenceRepair(@LangID, 19000132) r -- Additional report Text
WHERE	r.strDefault = N'Tel.:'

  
SELECT 
	@idfsOffice = o.idfOffice,
	@strOfficeLocation = ISNULL(report.FN_REP_AddressSharedString(@LangID, o.idfLocation), '') + ISNULL(', ' + @tel + o.strContactPhone, ''),
	@strOfficeName = fni.[name]
FROM	tstSite s
	INNER JOIN	tlbOffice o
	ON			o.idfOffice = s.idfOffice
	INNER JOIN	dbo.FN_GBL_Institution(@LangID) fni
	ON			o.idfOffice = fni.idfOffice
WHERE	 s.idfsSite = @SiteID



INSERT INTO @ReportTable (
	idfTesting				,
	strSiteName				, --1
	strSiteAddress			, --2
	strSampleId				, --4
	datSampleReceived		, --5
	datSampleCollected		, --6
	strNameSurname			, --8
	strAge					, --9
	strResearchedSample		, --10
	strSampleReceivedFrom	, --11
	strResearchMethod		, --13
	strResearchedDiagnosis	, --14
	strResultReceived		, --15
	strNorm					, --16
	strDiagnosticalMeaning	, --17
	strResearchConductedBy	, --19
	strResponsiblePerson	, --20
	datResultDate			, --21
	strKey
) 

SELECT
	testing.idfTesting,
	@strOfficeName,			--1
	@strOfficeLocation,		--2
	m.strBarcode,				--strSampleId --4
	m.datAccession,			--datSampleReceived	--5
	m.datFieldCollectionDate, --datSampleCollected --6
	ISNULL(h.strFirstName + ' ', '') + ISNULL(h.strLastName,''), --strNameSurname--8
	CAST(hc.intPatientAge AS NVARCHAR(10)) + N' (' + ref_age.[name] + N')', --strAge --9
	SampleType.[name],      --strResearchedSample --10
	CollectedByOffice.[name], --strSampleReceivedFrom --11
	TestName.[name],    --strResearchMethod --13
	TestDiagnosis.[name],   --strResearchedDiagnosis --14
	CAST(ap_ResultRec.varValue AS NVARCHAR(200)), --strResultReceived --15
	CAST(ap_Norm.varValue AS NVARCHAR(200)), --strNorm --16
	TestResult.[name],  --strDiagnosticalMeaning	, --17
	
  	CAST(	(	SELECT 
			 ISNULL(t.strFirstName + ' ', '') + ISNULL(t.strFamilyName, '') + N', '
     	 	FROM
     	 	(
     	 			SELECT TOP 1 WITH TIES
     	 				prcb.strFirstName,
     	 				prcb.strFamilyName,
     	 				Diagnosis.[name] AS DiagnosisName,
     	 				test.datConcludedDate,
     	 				tn.[name] AS TestName
				FROM tlbTesting test 
					INNER JOIN	trtTestTypeForCustomReport ttfcr
					ON		ttfcr.idfsTestName = test.idfsTestName
					AND		ttfcr.intRowStatus = 0
					AND		ttfcr.idfsCustomReportType = @idfsCustomReportType

					LEFT JOIN	dbo.FN_GBL_Reference_GETList(@LangID,19000019) Diagnosis
					ON		test.idfsDiagnosis = Diagnosis.idfsReference

					LEFT JOIN	dbo.FN_GBL_Reference_GETList(@LangID,19000097) tn
					ON			test.idfsTestName = tn.idfsReference		
	            	        
					LEFT JOIN	( tlbEmployee ercb
							INNER JOIN	tlbPerson prcb
							ON			prcb.idfPerson = ercb.idfEmployee
					)
					ON		ercb.idfEmployee = test.idfTestedByPerson	
					AND		ercb.intRowStatus = 0	
				WHERE test.idfMaterial = m.idfMaterial
					AND test.blnNonLaboratoryTest = 0
  					AND test.blnExternalTest = 0
  					AND test.blnReadOnly = 0
					AND test.intRowStatus = 0
				ORDER BY ROW_NUMBER() OVER(PARTITION BY prcb.strFirstName, prcb.strFamilyName ORDER BY test.datConcludedDate, tn.[name], Diagnosis.[name])

     	 	) AS t
     	 	ORDER BY t.datConcludedDate, t.TestName, t.DiagnosisName
		FOR	XML PATH('')
		) AS NVARCHAR(MAX)
	)	AS strResearchConductedBy, --  strResearchConductedBy --19
  
	(	SELECT TOP 1
  				 ISNULL(prcb.strFirstName + ' ', '') + ISNULL(prcb.strFamilyName, '')
  				FROM tlbTesting t 
  					INNER JOIN trtTestTypeForCustomReport ttfcr
					ON  ttfcr.idfsTestName = t.idfsTestName
						AND ttfcr.intRowStatus = 0
						AND ttfcr.idfsCustomReportType = @idfsCustomReportType
				  						        
  					LEFT JOIN	( tlbEmployee ercb
  							INNER JOIN	tlbPerson prcb
  							ON			prcb.idfPerson = ercb.idfEmployee
  					)
  					ON		ercb.idfEmployee = t.idfValidatedByPerson
  					AND		ercb.intRowStatus = 0	
  						          			    
         	 		WHERE	t.idfMaterial = m.idfMaterial
         	 				AND t.blnNonLaboratoryTest = 0
  							AND t.blnExternalTest = 0
  							AND t.blnReadOnly = 0
  							AND t.intRowStatus = 0
	 	ORDER BY t.datConcludedDate, t.idfTesting DESC
	)	AS strResponsiblePerson, --  strResponsiblePerson --20
  
  
	(	SELECT TOP 1
  				 t.datConcludedDate 
  				FROM tlbTesting t 
  					INNER JOIN trtTestTypeForCustomReport ttfcr
					ON  ttfcr.idfsTestName = t.idfsTestName
						AND ttfcr.intRowStatus = 0
						AND ttfcr.idfsCustomReportType = @idfsCustomReportType
				          			    
         	 		WHERE	t.idfMaterial = m.idfMaterial
         	 				AND t.blnNonLaboratoryTest = 0
  							AND t.blnExternalTest = 0
  							AND t.blnReadOnly = 0
  							AND t.intRowStatus = 0
	 	ORDER BY t.datConcludedDate, t.idfTesting DESC
	)	AS datResultDate, --datResultDate --21
  
  
  CONVERT(NVARCHAR(20), ISNULL(testing.datConcludedDate, testing.datStartedDate), 112)  + '_' + CAST(testing.idfTesting AS NVARCHAR(50)) AS strKey -- it need's for merge with archive data in application



FROM tlbMaterial m
	INNER JOIN	FN_GBL_ReferenceRepair(@LangID, 19000087) SampleType	-- Sample Type
	ON			SampleType.idfsReference = m.idfsSampleType

	LEFT JOIN	dbo.FN_GBL_Institution(@LangID) CollectedByOffice
	ON			CollectedByOffice.idfOffice = m.idfFieldCollectedByOffice
	
	LEFT JOIN	dbo.FN_GBL_Department(@LangID) dep
	ON			dep.idfDepartment = m.idfInDepartment

	INNER JOIN	( tlbHumanCase hc
					LEFT JOIN	FN_GBL_ReferenceRepair(@LangID, 19000042) ref_age	-- Human Age Type
					ON			ref_age.idfsReference = hc.idfsHumanAgeType
				    
					LEFT JOIN	FN_GBL_ReferenceRepair(@LangID,19000019) ref_diag_c
					ON			COALESCE(hc.idfsFinalDiagnosis, hc.idfsTentativeDiagnosis) = ref_diag_c.idfsReference
				)
	ON		hc.idfHumanCase = m.idfHumanCase
	AND		hc.intRowStatus = 0
			
	INNER JOIN	tlbHuman h
	ON			h.idfHuman = m.idfHuman
	AND			h.intRowStatus = 0

	INNER JOIN (tlbTesting testing 
            INNER JOIN trtTestTypeForCustomReport ttfcr
            ON  ttfcr.idfsTestName = testing.idfsTestName
                AND ttfcr.intRowStatus = 0
                AND ttfcr.idfsCustomReportType = @idfsCustomReportType
                
            LEFT JOIN tlbBatchTest tbt
            ON tbt.idfBatchTest = testing.idfBatchTest
            AND tbt.intRowStatus = 0
            
            LEFT JOIN tlbObservation BatchObs
			ON BatchObs.idfObservation = tbt.idfObservation
			AND BatchObs.intRowStatus = 0
			            
			LEFT JOIN tlbObservation TestObs
			ON TestObs.idfObservation = testing.idfObservation
			AND TestObs.intRowStatus = 0
			
			LEFT JOIN tlbActivityParameters ap_ResultRec
			ON ap_ResultRec.idfObservation = TestObs.idfObservation
			AND ap_ResultRec.intRowStatus = 0
			AND ap_ResultRec.idfsParameter = @FFResultReceived
			
			LEFT JOIN tlbActivityParameters ap_Norm
			ON ap_Norm.idfObservation = BatchObs.idfObservation
			AND ap_Norm.intRowStatus = 0
			AND ap_Norm.idfsParameter = @FFNorm		
         			
            LEFT JOIN	dbo.FN_GBL_Reference_GETList(@LangID,19000097) TestName
            ON			testing.idfsTestName=TestName.idfsReference			   

            LEFT JOIN	dbo.FN_GBL_Reference_GETList(@LangID,19000019) TestDiagnosis
            ON			testing.idfsDiagnosis = TestDiagnosis.idfsReference

	        LEFT JOIN	dbo.FN_GBL_ReferenceRepair (@LangID, 19000096) TestResult
	        ON			testing.idfsTestResult = TestResult.idfsReference
	) 
	ON	testing.idfMaterial = m.idfMaterial 
		AND testing.blnNonLaboratoryTest = 0
  		AND testing.blnExternalTest = 0
  		AND testing.blnReadOnly = 0
		AND testing.intRowStatus = 0
           
WHERE	
		m.strBarcode = @SampleID
		AND (m.idfsSite = @SiteID OR ISNULL(@SiteID, N'') = N'')
		AND ((h.strLastName LIKE @LastName + '%') OR ISNULL(@LastName, N'') = N'')
		AND ((h.strFirstName LIKE @FirstName + '%') OR ISNULL(@FirstName, N'') = N'')

ORDER BY ISNULL(testing.datConcludedDate, testing.datStartedDate), testing.idfTesting



UPDATE	@ReportTable
SET		strResearchConductedBy = SUBSTRING(LTRIM(RTRIM(strResearchConductedBy)), 0, LEN(LTRIM(RTRIM(strResearchConductedBy))))
WHERE	LTRIM(RTRIM(strResearchConductedBy)) LIKE N'%,'


IF NOT EXISTS (SELECT * FROM @ReportTable)
BEGIN
  INSERT INTO @ReportTable (strSiteName, strSiteAddress)
  VALUES  (@strOfficeName, @strOfficeLocation)
END

    

SELECT 	
	idfTesting				,
	strSiteName				, --1
	strSiteAddress			, --2
	strSampleId				, --4
	datSampleReceived		, --5
	datSampleCollected		, --6
	strNameSurname			, --8
	strAge					, --9
	strResearchedSample		, --10
	strSampleReceivedFrom	, --11
	strResearchMethod		, --13
	strResearchedDiagnosis	, --14
	strResultReceived		, --15
	strNorm					, --16
	strDiagnosticalMeaning	, --17
	strResearchConductedBy	, --19
	strResponsiblePerson	, --20
	datResultDate			, --21
	strKey
 
FROM @ReportTable
ORDER BY strKey
GO
PRINT N'Creating Procedure [dbo].[USP_PIN_Audit_Set]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- =============================================
-- Author:		Steven L. Verner
-- Create date: 11/12/2022
-- Description:	Adds an entry into the PIN audit table when a user attempts to access the PIN system.
-- =============================================
CREATE PROCEDURE USP_PIN_Audit_Set 
	-- Add the parameters for the stored procedure here
	 @strPIN CHAR(11)
	,@idfUser BIGINT = NULL
	,@idfsSite BIGINT = NULL
	,@idfHumanCase BIGINT = NULL
	,@idfH0Form BIGINT = NULL
	,@datEIDSSAccessAttempt DATETIME
	,@datPINAccessAttempt DATETIME 
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE 
	 @ReturnMsg NVARCHAR(MAX) = 'SUCCESS'
	,@ReturnCode BIGINT = 0
	,@idfPINAudit BIGINT = 0

	BEGIN TRY	
			BEGIN TRANSACTION

			EXEC dbo.USP_GBL_NEXTKEYID_GET 'tauPINAuditEvent'
				,@idfPINAudit OUTPUT;

			INSERT INTO tauPINAuditEvent (
				 idfPINAuditEvent
				,strPIN
				,idfUserID
				,idfsSite
				,idfHumanCase
				,idfH0Form
				,datEIDSSAccessAttempt
				,datPINAccessAttempt)
			VALUES (
				 @idfPINAudit
				,@strPIN
				,@idfUser
				,@idfsSite
				,@idfHumanCase
				,@idfH0Form
				,@datEIDSSAccessAttempt
				,@datPINAccessAttempt
			)
			
			IF @@TRANCOUNT > 0
			 COMMIT;
			
			SELECT @ReturnCode AS ReturnCode, @ReturnMsg AS ReturnMessage

    END TRY
    BEGIN CATCH
		SET @returnMsg = 'ErrorNumber: ' + CONVERT(VARCHAR, ERROR_NUMBER()) + 
						 ' ErrorSeverity: ' + CONVERT(VARCHAR, ERROR_SEVERITY()) + 
						 ' ErrorState: ' + CONVERT(VARCHAR, ERROR_STATE()) + ' ErrorProcedure: ' + 
						 ISNULL(ERROR_PROCEDURE(), '') + ' ErrorLine: ' + 
						 CONVERT(VARCHAR, ISNULL(ERROR_LINE(), '')) + ' ErrorMessage: ' + ERROR_MESSAGE()
		SET @returnCode = ERROR_NUMBER()
		SELECT @ReturnCode AS ReturnCode, @ReturnMsg AS ReturnMessage
    END CATCH
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering Procedure [dbo].[USP_GBL_DataAuditEvent_SET]...';


GO
-- =============================================
-- Author:		Steven Verner
-- Create date: 02/28/2022
-- Description:	
-- Create an entry into the tauDataAuditDetailCreate table if one doesn't exist or updates an audit 
-- event in the tauDataAuditDetailUpdate table.
-- =============================================
ALTER PROCEDURE [dbo].[USP_GBL_DataAuditEvent_SET]
	-- Add the parameters for the stored procedure here
	 @userName nvarchar(2576)
	,@idfSiteId  BIGINT =NULL
	,@JSONUpdates NVARCHAR(MAX)
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @idfDataAuditEvent BIGINT 
	DECLARE @returnMsg	VARCHAR(MAX) = 'SUCCESS';
	DECLARE @returnCode	BIGINT = 0;
	DECLARE @idfUserID BIGINT
	DECLARE @siteID BIGINT 
	DECLARE @strValue SQL_VARIANT
	DECLARE @strOldValue SQL_VARIANT
	DECLARE @ID INT 
	DECLARE @max INT
	DECLARE @idfsObjectType BIGINT
	DECLARE @idfsDataAuditEventType BIGINT
	DECLARE @idfObject BIGINT
	DECLARE @idfObjectTable BIGINT
	DECLARE @idfColumn BIGINT


	DECLARE @Input TABLE( 
		 ID INT IDENTITY(1,1)
		,idfsObjectType BIGINT	
		,idfsDataAuditEventType BIGINT
		,idfsObjectTable BIGINT
		,idfColumn BIGINT
		,idfObject BIGINT
		,idfObjectDetail BIGINT
		,strValue nvarchar(4000))

	BEGIN TRY

		SELECT @idfUserID = a.idfUserId, @siteID = lcc.idfsSite --, @event = lcc.idfDataAuditEvent
		FROM aspnetusers a 
		LEFT JOIN tstLocalConnectionContext lcc ON lcc.idfUserID = a.idfUserID
		WHERE a.username = @username

		-- If the json object is null, there's nothing to do...
		IF(@JSONUpdates IS NULL ) RETURN 0

		-- insert json
		INSERT INTO @input
		SELECT idfsObjectType, idfEventType, idfsObjectTable,idfColumn,idfObject,idfObjectDetail, AuditValue
		FROM OPENJSON(@JSONUpdates)
		WITH(
			idfsObjectType BIGINT,
			idfEventType BIGINT,
			idfsObjectTable BIGINT,
			idfColumn BIGINT,
			idfObject BIGINT,
			idfObjectDetail BIGINT,
			AuditValue NVARCHAR(4000) )

			select top 1 
			@idfsObjectType = idfsObjectType ,
			@idfsDataAuditEventType = idfsDataAuditEventType,
			@idfObjectTable=idfsObjectTable,
			@idfObject=idfObject
			from @input

		-- Get the current event id for this user from the local context table...
		EXEC USSP_GBL_DataAuditEvent_GET @idfUserID,@siteId, @idfsDataAuditEventType,@idfsObjectType,@idfObject, @idfObjectTable, @idfDataAuditEvent OUTPUT
		
		SET @ID = 1	
		SELECT @Max = COUNT(*) FROM @Input

		WHILE ( @ID <= @Max )
		BEGIN
			SELECT 
				 @idfsObjectType = idfsObjectType
				,@idfsDataAuditEventType = idfsDataAuditEventType
				,@idfObject = idfObject
				,@idfObjectTable = idfsObjectTable
				,@strValue = strValue
				,@idfColumn  = idfColumn
			FROM @Input
			WHERE ID =@ID
			
			IF @idfsDataAuditEventType = 10016001
			BEGIN
				-- Create the audit create record if it isn't already there...
				--IF( NOT EXISTS(
				--	SELECT idfDataAuditEvent 
				--	FROM tauDataAuditDetailCreate ac
				--	WHERE ac.idfDataAuditEvent = @idfDataAuditEvent AND ac.idfObjectTable = @idfObjectTable AND ac.idfObject = @idfObject))

					INSERT INTO dbo.tauDataAuditDetailCreate( idfDataAuditEvent, idfObjectTable, idfObject)
					VALUES( @idfDataAuditEvent, @idfObjectTable, @idfObject )
			END
			
			IF @idfsDataAuditEventType = 10016003
			BEGIN
				---- Old value...
				--SELECT TOP 1 @strOldValue = strNewValue
				--FROM tauDataAuditDetailUpdate 
				--WHERE idfObjectTable = @idfObjectTable AND idfObject = @idfObject AND IdfColumn = @idfColumn
				--ORDER BY AuditCreateDTM DESC

				-- Create the update record...
				INSERT INTO tauDataAuditDetailUpdate(idfDataAuditEvent,idfObjectTable, idfColumn,idfObject,strOldValue, strNewValue )
				VALUES(@idfDataAuditEvent,@idfObjectTable, @idfColumn, @idfObject, @strOldValue, @strValue)
			END

			SELECT @ID = @ID+1

		END

		SELECT @returnCode 'ReturnCode', @returnMsg 'ReturnMessage';
	END TRY
	BEGIN CATCH
		SET @returnCode = ERROR_NUMBER()
		SET @returnMsg = 
		'ErrorNumber: ' + CONVERT(VARCHAR, ERROR_NUMBER()) 
		+ ' ErrorSeverity: ' + CONVERT(VARCHAR, ERROR_SEVERITY())
		+ ' ErrorState: ' + CONVERT(VARCHAR, ERROR_STATE())
		+ ' ErrorProcedure: ' + ISNULL(ERROR_PROCEDURE(), '')
		+ ' ErrorLine: ' +  CONVERT(VARCHAR, ISNULL(ERROR_LINE(), ''))
		+ ' ErrorMessage: '+ ERROR_MESSAGE()

		SELECT @returnCode 'ReturnCode', @returnMsg 'ReturnMessage'
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_HUM_HUMAN_DISEASE_DEL]...';


GO
--*************************************************************
-- Name 				:	USP_HUM_HUMAN_DISEASE_DEL
-- Description			:	delete human disease record
--          
-- Author               :	Jeff Johnson
-- Revision History
--	Name			Date			Change Detail
--	JWJ				20180508		created
--	Mark Wilson		20220526		updated the logic to support multiple testing records
--   Ann Xiong       11/01/2022		Updated to display message and not delete the disease report when the disease report is associated with an Outbreak Session 
--    								or when the disease report is associated with at least one child object (Test or Sample)
--
---exec USP_HUM_HUMAN_DISEASE_DEL
--*************************************************************
ALTER PROCEDURE [dbo].[USP_HUM_HUMAN_DISEASE_DEL]
(
	@idfHumanCase	BIGINT  -- tlbHumanCase.idfHumanCase Primary Key
	,@idfUserID BIGINT
	,@idfSiteId BIGINT
	,@DeduplicationIndicator BIT = 0
)
AS
DECLARE @returnCode					INT = 0 
	DECLARE	@returnMsg					NVARCHAR(MAX) = 'SUCCESS' 

declare @geoLocationId as TABLE
    (
      idfObject bigint,
	  idfTable bigint
    )

declare @tlbHumanCase as TABLE
    (
      idfObject bigint,
	  idfTable bigint
    )
declare @gHumanDiseaseReportRelationshipId as TABLE
    (
      idfObject bigint,
	  idfTable bigint
    )
declare @tlbAntimicrobialTherapyId as TABLE
    (
      idfObject bigint,
	  idfTable bigint
    )
declare @HumanDiseaseReportVaccinationId as TABLE
    (
      idfObject bigint,
	  idfTable bigint
    )
declare @tlbContactedCasePersonId as TABLE
(
      idfObject bigint,
	  idfTable bigint
)
declare @tlbMaterialId as TABLE
(
      idfObject bigint,
	  idfTable bigint
)

declare @tlbTestingId as TABLE
(
      idfObject bigint,
	  idfTable bigint
)

declare @tlbTestValidationId as TABLE
(
      idfObject bigint,
	  idfTable bigint
)

declare @idfsDataAuditEventType bigint =10016002;
declare @idfsObjectType bigint =10017026;
declare @idfObject bigint =@idfHumanCase;
declare @idfObjectTable bigint =75610000000;
declare @idfDataAuditEvent bigint;

BEGIN

	BEGIN TRY

		BEGIN TRANSACTION

		DECLARE @NonLaboratoryTestIndicator INT = 1

		DECLARE @SampleCount AS INT = 0
			,@TestCount AS INT = 0
			,@OutbreakSessionCount AS INT = 0;

		SELECT @SampleCount = COUNT(*)
		FROM dbo.tlbMaterial
		WHERE idfHumanCase = @idfHumanCase
			AND intRowStatus = 0;

		SELECT @TestCount = COUNT(*)
		FROM dbo.tlbTesting t
		INNER JOIN dbo.tlbMaterial m ON m.idfMaterial = t.idfMaterial
			AND m.intRowStatus = 0
		WHERE m.idfHumanCase = @idfHumanCase
			AND t.intRowStatus = 0;

		SELECT @OutbreakSessionCount = COUNT(*)
		FROM dbo.tlbHumanCase v
		INNER JOIN dbo.tlbOutbreak o ON o.idfOutbreak = v.idfOutbreak
			AND o.intRowStatus = 0
		WHERE v.idfHumanCase = @idfHumanCase
			AND v.idfOutbreak IS NOT NULL

		IF @DeduplicationIndicator = 0
		BEGIN
			IF @SampleCount = 0
				AND @TestCount = 0
				AND @OutbreakSessionCount = 0
			BEGIN
				UPDATE dbo.tlbHumanCase
				SET intRowStatus = 1	
				OUTPUT INSERTED.idfHumanCase,75340000000 into @tlbHumanCase
				WHERE	idfHumanCase = @idfHumanCase
				AND		intRowStatus = 0
			
				-- Continue deleting the child records

				-- Delete Location of Exposure
				UPDATE tg
				SET tg.intRowStatus = 1
				OUTPUT INSERTED.idfGeoLocation,75580000000 into @geoLocationId
				FROM dbo.tlbGeoLocation tg
				INNER JOIN dbo.tlbHumanCase thc ON thc.idfPointGeoLocation = tg.idfGeoLocation
				WHERE thc.idfHumanCase = @idfHumanCase

				--Delete from HumanDiseaseReportRelationship
				UPDATE hrr
				SET hrr.intRowStatus = 0
				--OUTPUT INSERTED.HumanDiseasereportRelnUID into @gHumanDiseaseReportRelationshipId
				FROM dbo.HumanDiseaseReportRelationship hrr 
				WHERE hrr.HumanDiseaseReportID = @idfHumanCase

				-- Delete from Antiviral Therapy
				UPDATE tat
				SET tat.intRowStatus = 1
				--OUTPUT INSERTED.idfAntimicrobialTherapy into @tlbAntimicrobialTherapyId
				FROM dbo.tlbAntimicrobialTherapy tat
				WHERE tat.idfHumanCase = @idfHumanCase

				-- Delete from Human Disease Report Vaccination
				UPDATE hrv
				SET hrv.intRowStatus = 1
				--OUTPUT INSERTED.HumanDiseaseReportVaccinationUID into @HumanDiseaseReportVaccinationId
				FROM dbo.HumanDiseaseReportVaccination hrv
				WHERE hrv.idfHumanCase = @idfHumanCase

				-- Delete from Contacted Case Person
				UPDATE tccp
				SET tccp.intRowStatus = 1
				--OUTPUT INSERTED.idfContactedCasePerson into @tlbContactedCasePersonId
				FROM dbo.tlbContactedCasePerson tccp
				WHERE tccp.idfHumanCase = @idfHumanCase

				--If record is being soft-deleted, then check if the test record was originally created 
				--in the laboaratory module.  If it was, then disassociate the test record from the 
				--human disease Report, so that the test record remains in the laboratory module 
				--for further action.
---------------------------------------------------------------------------------------------------------------
				-- updated the logic to support multiple testing records
				SET @NonLaboratoryTestIndicator = 1
				IF EXISTS 
				(
					SELECT tt.blnNonLaboratoryTest 
					FROM dbo.tlbTesting tt
					INNER JOIN dbo.tlbMaterial tm ON tt.idfMaterial = tm.idfMaterial AND tm.idfHumanCase = @idfHumanCase
					WHERE tt.blnNonLaboratoryTest = 0
				)
				SET @NonLaboratoryTestIndicator = 0

				IF @NonLaboratoryTestIndicator = 1 -- Okay to delete
				BEGIN
						-- Delete samples
						UPDATE tm
						SET tm.intRowStatus = 1
						OUTPUT INSERTED.idfMaterial,75620000000 into @tlbMaterialId
						FROM dbo.tlbMaterial tm WHERE tm.idfHumanCase = @idfHumanCase

						-- Delete tests
						UPDATE tt
						SET tt.intRowStatus = 1
						OUTPUT INSERTED.idfTesting,75740000000 into @tlbTestingId
						FROM dbo.tlbTesting tt
						INNER JOIN dbo.tlbMaterial tm ON tt.idfMaterial = tm.idfMaterial
						WHERE tm.idfHumanCase = @idfHumanCase

						-- Delete test valiation
						UPDATE tv
						SET tv.intRowStatus = 1
						OUTPUT INSERTED.idfTestValidation,75750000000 into @tlbTestValidationId
						FROM dbo.tlbTestValidation tv
						INNER JOIN dbo.tlbTesting tt ON tt.idfTesting = tv.idfTesting
						INNER JOIN dbo.tlbMaterial tm ON tt.idfMaterial = tm.idfMaterial
						WHERE tm.idfHumanCase = @idfHumanCase
				END
				ELSE -- Disassociate Samples from Human Case
				BEGIN
						UPDATE dbo.tlbMaterial
						SET idfHumanCase = NULL
						WHERE idfHumanCase= @idfHumanCase
				END

				--DataAudit 
				-- insert record into tauDataAuditEvent
				EXEC USSP_GBL_DataAuditEvent_GET @idfUserID,@idfSiteId, @idfsDataAuditEventType,@idfsObjectType,@idfObject, @idfObjectTable, @idfDataAuditEvent OUTPUT
				-- insert into delete 

					-- Insert statements for procedure here
				INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject )
				SELECT @idfDataAuditEvent, idfTable, idfObject
				FROM @tlbHumanCase

				-- Insert statements for procedure here
				INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject )
				SELECT @idfDataAuditEvent, idfTable, idfObject
				FROM @geoLocationId

				-- Insert statements for procedure here
				INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject )
				SELECT @idfDataAuditEvent, idfTable, idfObject
				FROM @tlbMaterialId

				-- Insert statements for procedure here
				INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject )
				SELECT @idfDataAuditEvent, idfTable, idfObject
				FROM @tlbTestingId

				-- Insert statements for procedure here
				INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject )
				SELECT @idfDataAuditEvent, idfTable, idfObject
				FROM @tlbTestValidationId


			END
			ELSE
			BEGIN
				IF @OutbreakSessionCount > 0
				BEGIN
					SET @ReturnCode = 2;
					SET @ReturnMsg = 'Unable to delete this record as it is associated with an Outbreak Session.';
				END;
				ELSE
				BEGIN
					SET @ReturnCode = 1;
					SET @ReturnMsg = 'Unable to delete this record as it contains dependent child objects.';
				END;
			END;
		END
		ELSE
		BEGIN
			UPDATE dbo.tlbHumanCase
			SET intRowStatus = 1						
			WHERE	idfHumanCase = @idfHumanCase
			AND		intRowStatus = 0
			
			-- Continue deleting the child records

			-- Delete Location of Exposure
			UPDATE tg
			SET tg.intRowStatus = 1
			FROM dbo.tlbGeoLocation tg
			INNER JOIN dbo.tlbHumanCase thc ON thc.idfPointGeoLocation = tg.idfGeoLocation
			WHERE thc.idfHumanCase = @idfHumanCase

			--Delete from HumanDiseaseReportRelationship
			UPDATE hrr
			SET hrr.intRowStatus = 0
			FROM dbo.HumanDiseaseReportRelationship hrr 
			WHERE hrr.HumanDiseaseReportID = @idfHumanCase

			-- Delete from Antiviral Therapy
			UPDATE tat
			SET tat.intRowStatus = 1
			FROM dbo.tlbAntimicrobialTherapy tat
			WHERE tat.idfHumanCase = @idfHumanCase

			-- Delete from Human Disease Report Vaccination
			UPDATE hrv
			SET hrv.intRowStatus = 1
			FROM dbo.HumanDiseaseReportVaccination hrv
			WHERE hrv.idfHumanCase = @idfHumanCase

			-- Delete from Contacted Case Person
			UPDATE tccp
			SET tccp.intRowStatus = 1
			FROM dbo.tlbContactedCasePerson tccp
			WHERE tccp.idfHumanCase = @idfHumanCase

			--If record is being soft-deleted, then check if the test record was originally created 
			--in the laboaratory module.  If it was, then disassociate the test record from the 
			--human disease Report, so that the test record remains in the laboratory module 
			--for further action.

			--Data Audito



---------------------------------------------------------------------------------------------------------------
-- updated the logic to support multiple testing records
			SET @NonLaboratoryTestIndicator = 1
			IF EXISTS 
			(
				SELECT tt.blnNonLaboratoryTest 
				FROM dbo.tlbTesting tt
				INNER JOIN dbo.tlbMaterial tm ON tt.idfMaterial = tm.idfMaterial AND tm.idfHumanCase = @idfHumanCase
				WHERE tt.blnNonLaboratoryTest = 0
			)
			SET @NonLaboratoryTestIndicator = 0

			IF @NonLaboratoryTestIndicator = 1 -- Okay to delete
				BEGIN
					-- Delete samples
					UPDATE tm
					SET tm.intRowStatus = 1
					FROM dbo.tlbMaterial tm WHERE tm.idfHumanCase = @idfHumanCase

					-- Delete tests
					UPDATE tt
					SET tt.intRowStatus = 1
					FROM dbo.tlbTesting tt
					INNER JOIN dbo.tlbMaterial tm ON tt.idfMaterial = tm.idfMaterial
					WHERE tm.idfHumanCase = @idfHumanCase

					-- Delete test valiation
					UPDATE tv
					SET tv.intRowStatus = 1
					FROM dbo.tlbTestValidation tv
					INNER JOIN dbo.tlbTesting tt ON tt.idfTesting = tv.idfTesting
					INNER JOIN dbo.tlbMaterial tm ON tt.idfMaterial = tm.idfMaterial
					WHERE tm.idfHumanCase = @idfHumanCase
				END
			ELSE -- Disassociate Samples from Human Case
				BEGIN
					UPDATE dbo.tlbMaterial
					SET idfHumanCase = NULL
					WHERE idfHumanCase= @idfHumanCase
                		END

		END
			
			IF @@TRANCOUNT > 0 
				COMMIT
			
			SELECT 
				@returnCode 'ReturnCode',
				@returnMsg 'ReturnMessage'
	END TRY
	BEGIN CATCH
			IF @@Trancount = 1 
				THROW;
				
	END CATCH
END
GO
PRINT N'Refreshing Procedure [dbo].[USP_LAB_TRANSFER_GETList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_LAB_TRANSFER_GETList]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_LAB_TRANSFER_SEARCH_GETList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_LAB_TRANSFER_SEARCH_GETList]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_LAB_SAMPLE_GROUP_ACCESSION_GETList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_LAB_SAMPLE_GROUP_ACCESSION_GETList]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_LAB_SAMPLE_GETDetail]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_LAB_SAMPLE_GETDetail]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_LAB_TRANSFER_GETDetail]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_LAB_TRANSFER_GETDetail]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_OMM_CASE_MONITORING_GETList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_OMM_CASE_MONITORING_GETList]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_GBL_DataAuditEvent_Delete]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_GBL_DataAuditEvent_Delete]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_GBL_DataAuditEvent_Update]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_GBL_DataAuditEvent_Update]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_DIAGNOSISREFERENCE_GETList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_DIAGNOSISREFERENCE_GETList]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_DIAGNOSISREFERENCE_GETDetail]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_DIAGNOSISREFERENCE_GETDetail]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_DEDUPLICATION_HUMAN_DISEASE_Report_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_DEDUPLICATION_HUMAN_DISEASE_Report_SET]';


GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [EIDSS7_GG];


GO
ALTER TABLE [dbo].[tauPINAuditEvent] WITH CHECK CHECK CONSTRAINT [FK_tauPINAuditEvent_tstUserTable];


GO
PRINT N'Update complete.';


GO
