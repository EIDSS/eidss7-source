/*
Deployment script for EIDSS7_GG

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO

USE [$(DatabaseName)];


GO

PRINT N'Altering Trigger [dbo].[TR_tlbMaterial_Calculate]...';


GO
ALTER TRIGGER [dbo].[TR_tlbMaterial_Calculate]
ON [dbo].[tlbMaterial]
FOR INSERT, UPDATE
NOT FOR REPLICATION
AS
BEGIN
    IF dbo.FN_GBL_TriggersWork() = 1
       AND (
               UPDATE(idfHumanCase)
               OR UPDATE(idfVetCase)
               OR UPDATE(idfMonitoringSession)
               OR UPDATE(idfVectorSurveillanceSession)
           )
    BEGIN
        UPDATE a
        SET strCalculatedCaseID = CASE
                                      WHEN a.idfMonitoringSession IS NOT NULL THEN
                                          dbo.tlbMonitoringSession.strMonitoringSessionID
                                      WHEN a.idfVectorSurveillanceSession IS NOT NULL THEN
                                          dbo.tlbVectorSurveillanceSession.strSessionID
                                      WHEN a.idfHumanCase IS NOT NULL THEN
                                          CASE
                                              WHEN dbo.tlbHumanCase.idfOutbreak IS NULL THEN
                                                  dbo.tlbHumanCase.strCaseID
                                              ELSE
                                                  humOCR.strOutbreakCaseID
                                          END
                                      WHEN a.idfVetCase IS NOT NULL THEN
                                          CASE
                                              WHEN dbo.tlbVetCase.idfOutbreak IS NULL THEN
                                                  dbo.tlbVetCase.strCaseID
                                              ELSE
                                                  vetOCR.strOutbreakCaseID
                                          END
                                  END
        FROM dbo.tlbMaterial a
            INNER JOIN inserted
                ON inserted.idfMaterial = a.idfMaterial
            LEFT JOIN dbo.tlbHumanCase
                ON tlbHumanCase.idfHumanCase = a.idfHumanCase
                   AND dbo.tlbHumanCase.intRowStatus = 0
            LEFT JOIN dbo.OutbreakCaseReport humOCR
                ON humOCR.idfHumanCase = dbo.tlbHumanCase.idfHumanCase
            LEFT JOIN dbo.tlbVetCase
                ON tlbVetCase.idfVetCase = a.idfVetCase
                   AND dbo.tlbVetCase.intRowStatus = 0
            LEFT JOIN dbo.OutbreakCaseReport vetOCR
                ON vetOCR.idfVetCase = dbo.tlbVetCase.idfVetCase
            LEFT JOIN dbo.tlbMonitoringSession
                ON dbo.tlbMonitoringSession.idfMonitoringSession = a.idfMonitoringSession
                   AND dbo.tlbMonitoringSession.intRowStatus = 0
            LEFT JOIN dbo.tlbVectorSurveillanceSession
                ON dbo.tlbVectorSurveillanceSession.idfVectorSurveillanceSession = a.idfVectorSurveillanceSession
                   AND dbo.tlbVectorSurveillanceSession.intRowStatus = 0

        UPDATE a
        SET strCalculatedHumanName = CASE
                                         WHEN a.idfSpecies IS NOT NULL
                                              AND a.idfVetCase IS NULL
                                              AND a.idfMonitoringSession IS NULL THEN
                                             CASE
                                                 WHEN dbo.tlbFarm.idfHuman IS NULL THEN
                                                     CASE
                                                         WHEN dbo.tlbFarm.strNationalName IS NULL THEN
                                                             dbo.tlbFarm.strFarmCode
                                                         ELSE
                                                             dbo.tlbFarm.strNationalName
                                                     END
                                                 WHEN HumanFromCase.strLastName IS NULL THEN
                                                     CASE
                                                         WHEN dbo.tlbFarm.strNationalName IS NULL THEN
                                                             dbo.tlbFarm.strFarmCode
                                                         ELSE
                                                             dbo.tlbFarm.strNationalName
                                                     END
                                                 ELSE
                                                     ISNULL(HumanFromCase.strLastName, '')
                                                     + ISNULL(', ' + HumanFromCase.strFirstName + ' ', '')
                                                     + ISNULL(HumanFromCase.strSecondName, '')
                                             END
                                        WHEN a.idfSpecies IS NOT NULL
                                              AND a.idfVetCase IS NOT NULL
                                              OR a.idfMonitoringSession IS NOT NULL THEN
                                              CASE WHEN dbo.tlbFarm.idfHuman IS NULL THEN
                                                     CASE
                                                         WHEN dbo.tlbFarm.strNationalName IS NULL THEN
                                                             dbo.tlbFarm.strFarmCode
                                                         ELSE
                                                             dbo.tlbFarm.strNationalName
                                                     END
                                                 WHEN HumanFromCase.strLastName IS NULL THEN
                                                     CASE
                                                         WHEN dbo.tlbFarm.strNationalName IS NULL THEN
                                                             dbo.tlbFarm.strFarmCode
                                                         ELSE
                                                             dbo.tlbFarm.strNationalName
                                                     END
                                                 ELSE
                                                     ISNULL(HumanFromCase.strLastName, '')
                                                     + ISNULL(', ' + HumanFromCase.strFirstName + ' ', '')
                                                     + ISNULL(HumanFromCase.strSecondName, '')
                                             END
                                         ELSE
                                             ISNULL(HumanFromCase.strLastName, '')
                                             + ISNULL(', ' + HumanFromCase.strFirstName + ' ', '')
                                             + ISNULL(HumanFromCase.strSecondName, '')
                                     END
        FROM dbo.tlbMaterial a
            INNER JOIN inserted
                ON inserted.idfMaterial = a.idfMaterial
            LEFT JOIN dbo.tlbAnimal
                ON dbo.tlbAnimal.idfAnimal = a.idfAnimal
                   AND dbo.tlbAnimal.intRowStatus = 0
            LEFT JOIN dbo.tlbSpecies
                ON (
                       dbo.tlbSpecies.idfSpecies = a.idfSpecies
                       OR dbo.tlbSpecies.idfSpecies = dbo.tlbAnimal.idfSpecies
                   )
                   AND dbo.tlbSpecies.intRowStatus = 0
            LEFT JOIN dbo.tlbHerd
                ON dbo.tlbHerd.idfHerd = dbo.tlbSpecies.idfHerd
                   AND dbo.tlbHerd.intRowStatus = 0
            LEFT JOIN dbo.tlbFarm
                ON dbo.tlbFarm.idfFarm = dbo.tlbHerd.idfFarm
                   AND dbo.tlbFarm.intRowStatus = 0
            LEFT JOIN dbo.tlbHuman HumanFromCase
                ON HumanFromCase.idfHuman = tlbFarm.idfHuman
                   OR HumanFromCase.idfHuman = a.idfHuman
    END

END
GO
PRINT N'Altering Procedure [dbo].[USP_GBL_SAMPLE_IMPORT_GETList]...';


GO
-- ================================================================================================
-- Name: USP_GBL_SAMPLE_IMPORT_GETList
--
-- Description:	Get sample list for the disease report import sample feature.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     08/12/2020 Initial release.
-- Stephen Long     10/14/2020 Added farm master ID and species type ID to the query.
-- Stephen Long     02/02/2021 Removed unneeded joins, and altering to work with POCO.
-- Stephen Long     01/19/2022 Added updated pagination and sorting logic.
-- Stephen Long     01/25/2022 Added farm master, species type and disease ID parameters.
-- Stephen Long     03/31/2022 Added lab sample ID to the where criteria.
-- Stephen Long     12/17/2022 Fix to not select samples that have already been imported.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_GBL_SAMPLE_IMPORT_GETList]
(
    @LanguageID NVARCHAR(50),
    @PageNumber INT = 1,
    @PageSize INT = 10,
    @SortColumn NVARCHAR(30) = 'EIDSSLocalOrFieldSampleID',
    @SortOrder NVARCHAR(4) = 'DESC',
    @EIDSSLocalOrFieldSampleID NVARCHAR(200),
    @FarmMasterID BIGINT,
    @SpeciesTypeIDList VARCHAR(MAX),
    @DiseaseID BIGINT
)
AS
BEGIN
    DECLARE @FirstRec INT,
            @LastRec INT,
            @TotalRowCount INT = 0;
    DECLARE @Results TABLE (SampleID BIGINT NOT NULL);

    SET @FirstRec = (@PageNumber - 1) * @PageSize;
    SET @LastRec = (@PageNumber * @PageSize + 1);
    SET NOCOUNT ON;

    BEGIN TRY
        INSERT INTO @Results
        SELECT m.idfMaterial
        FROM dbo.tlbMaterial m
            LEFT JOIN dbo.tlbSpecies s
                ON s.idfSpecies = m.idfSpecies
                   AND s.intRowStatus = 0
            LEFT JOIN dbo.tlbHerd h
                ON h.idfHerd = s.idfHerd
                   AND h.intRowStatus = 0
            LEFT JOIN dbo.tlbFarm f
                ON f.idfFarm = h.idfFarm
                   AND f.intRowStatus = 0
        WHERE m.intRowStatus = 0
              AND m.idfVetCase IS NULL
              AND m.idfHumanCase IS NULL 
              AND m.DiseaseID = @DiseaseID
              AND f.idfFarmActual = @FarmMasterID
              AND s.idfsSpeciesType IN (
                                                SELECT CAST([Value] AS BIGINT)
                                                FROM dbo.FN_GBL_SYS_SplitList(@SpeciesTypeIDList, NULL, ',')
                                            )
              AND (m.strFieldBarcode LIKE '%' + @EIDSSLocalOrFieldSampleID + '%'
                   OR m.strBarcode LIKE '%' + @EIDSSLocalOrFieldSampleID + '%');

        SELECT SampleID,
               SampleTypeID,
               SampleTypeName,
               RootSampleID,
               OriginalSampleID,
               HumanID,
               SpeciesID,
               SpeciesTypeID,
               SpeciesTypeName,
               AnimalID,
               EIDSSAnimalID,
               AnimalGenderTypeID,
               AnimalGenderTypeName,
               AnimalAgeTypeID,
               AnimalAgeTypeName,
               AnimalColor,
               AnimalName,
               MonitoringSessionID,
               CollectedByPersonID,
               CollectedByPersonName,
               CollectedByOrganizationID,
               CollectedByOrganizationName,
               MainTestID,
               CollectionDate,
               SentDate,
               EIDSSLocalOrFieldSampleID,
               EIDSSReportOrSessionID,
               PatientOrFarmOwnerName,
               VectorSessionID,
               VectorID,
               FreezerID,
               SampleStatusTypeID,
               SampleStatusTypeName,
               FunctionalAreaID,
               FunctionalAreaName,
               DestroyedByPersonID,
               EnteredDate,
               DestructionDate,
               EIDSSLaboratorySampleID,
               Comments,
               SiteID,
               SentToOrganizationID,
               SentToOrganizationName,
               ReadOnlyIndicator,
               BirdStatusTypeID,
               BirdStatusTypeName,
               HumanDiseaseReportID,
               VeterinaryDiseaseReportID,
               AccessionDate,
               AccessionConditionTypeID,
               AccessionConditionTypeName,
               AccessionComment,
               AccessionByPersonID,
               DestructionMethodTypeID,
               CurrentSiteID,
               SampleKindTypeID,
               SampleKindTypeName,
               AccessionedIndicator,
               ShowInReportSessionListIndicator,
               ShowInLaboratoryListIndicator,
               ShowInDispositionListIndicator,
               ShowInAccessionListIndicator,
               MarkedForDispositionByPersonID,
               OutOfRepositoryDate,
               SampleStatusDate,
               DiseaseID,
               FarmID,
               FarmMasterID,
               EIDSSFarmID,
               Species,
               EIDSSLaboratoryOrLocalFieldSampleID,
               LabModuleSourceIndicator,
               RowStatus,
               RowAction,
               TotalRowCount,
               CurrentPage,
               TotalPages
        FROM
        (
            SELECT ROW_NUMBER() OVER (ORDER BY CASE
                                                   WHEN @SortColumn = 'EIDSSLocalOrFieldSampleID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.strFieldBarcode
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSLocalOrFieldSampleID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.strFieldBarcode
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'SampleTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       sampleType.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'SampleTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       sampleType.name
                                               END DESC
                                     ) AS RowNum,
                   m.idfMaterial AS SampleID,
                   m.idfsSampleType AS SampleTypeID,
                   sampleType.name AS SampleTypeName,
                   m.idfRootMaterial AS RootSampleID,
                   m.idfParentMaterial AS OriginalSampleID,
                   m.idfHuman AS HumanID,
                   m.idfSpecies AS SpeciesID,
                   speciesType.idfsReference AS SpeciesTypeID,
                   speciesType.name AS SpeciesTypeName,
                   m.idfAnimal AS AnimalID,
                   a.strAnimalCode AS EIDSSAnimalID,
                   a.idfsAnimalGender AS AnimalGenderTypeID,
                   animalSexType.name AS AnimalGenderTypeName,
                   a.idfsAnimalAge AS AnimalAgeTypeID,
                   animalAgeType.name AS AnimalAgeTypeName,
                   a.strColor AS AnimalColor,
                   a.strName AS AnimalName,
                   m.idfMonitoringSession AS MonitoringSessionID,
                   m.idfFieldCollectedByPerson AS CollectedByPersonID,
                   ISNULL(collectedByPerson.strFamilyName, N'') + ISNULL(', ' + collectedByPerson.strFirstName, '')
                   + ISNULL(' ' + collectedByPerson.strSecondName, '') AS CollectedByPersonName,
                   m.idfFieldCollectedByOffice AS CollectedByOrganizationID,
                   collectedByOrganization.name AS CollectedByOrganizationName,
                   m.idfMainTest AS MainTestID,
                   m.datFieldCollectionDate AS CollectionDate,
                   m.datFieldSentDate AS SentDate,
                   m.strFieldBarcode AS EIDSSLocalOrFieldSampleID,
                   m.strCalculatedCaseID AS EIDSSReportOrSessionID,
                   m.strCalculatedHumanName AS PatientOrFarmOwnerName,
                   m.idfVectorSurveillanceSession AS VectorSessionID,
                   m.idfVector AS VectorID,
                   m.idfSubdivision AS FreezerID,
                   m.idfsSampleStatus AS SampleStatusTypeID,
                   sampleStatusType.name AS SampleStatusTypeName,
                   m.idfInDepartment AS FunctionalAreaID,
                   functionalArea.name AS FunctionalAreaName,
                   m.idfDestroyedByPerson AS DestroyedByPersonID,
                   m.datEnteringDate AS EnteredDate,
                   m.datDestructionDate AS DestructionDate,
                   m.strBarcode AS EIDSSLaboratorySampleID,
                   m.strNote AS Comments,
                   m.idfsSite AS SiteID,
                   m.idfSendToOffice AS SentToOrganizationID,
                   sentToOrganization.name AS SentToOrganizationName,
                   m.blnReadOnly AS ReadOnlyIndicator,
                   m.idfsBirdStatus AS BirdStatusTypeID,
                   birdStatusType.name AS BirdStatusTypeName,
                   m.idfHumanCase AS HumanDiseaseReportID,
                   m.idfVetCase AS VeterinaryDiseaseReportID,
                   m.datAccession AS AccessionDate,
                   m.idfsAccessionCondition AS AccessionConditionTypeID,
                   accessionConditionType.name AS AccessionConditionTypeName,
                   m.strCondition AS AccessionComment,
                   m.idfAccesionByPerson AS AccessionByPersonID,
                   m.idfsDestructionMethod AS DestructionMethodTypeID,
                   m.idfsCurrentSite AS CurrentSiteID,
                   m.idfsSampleKind AS SampleKindTypeID,
                   sampleKindType.name AS SampleKindTypeName,
                   m.blnAccessioned AS AccessionedIndicator,
                   m.blnShowInCaseOrSession AS ShowInReportSessionListIndicator,
                   m.blnShowInLabList AS ShowInLaboratoryListIndicator,
                   m.blnShowInDispositionList AS ShowInDispositionListIndicator,
                   m.blnShowInAccessionInForm AS ShowInAccessionListIndicator,
                   m.idfMarkedForDispositionByPerson AS MarkedForDispositionByPersonID,
                   m.datOutOfRepositoryDate AS OutOfRepositoryDate,
                   m.datSampleStatusDate AS SampleStatusDate,
                   m.DiseaseID,
                   f.idfFarm AS FarmID,
                   f.idfFarmActual AS FarmMasterID,
                   f.strFarmCode AS EIDSSFarmID,
                   hd.strHerdCode + ' - ' + speciesType.name AS Species,
                   CASE
                       WHEN m.strBarcode IS NULL THEN
                           m.strFieldBarcode
                       ELSE
                           m.strBarcode
                   END AS EIDSSLaboratoryOrLocalFieldSampleID,
                   m.LabModuleSourceIndicator,
                   m.intRowStatus AS RowStatus,
                   0 AS RowAction,
                   COUNT(*) OVER () AS TotalRowCount,
                   CurrentPage = @PageNumber,
                   TotalPages = (@TotalRowCount / @PageSize) + IIF(COUNT(*) % @PageSize > 0, 1, 0)
            FROM @Results res
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = res.SampleID
                INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000087) sampleType
                    ON sampleType.idfsReference = m.idfsSampleType
                LEFT JOIN dbo.FN_GBL_Institution(@LanguageID) collectedByOrganization
                    ON collectedByOrganization.idfOffice = m.idfFieldCollectedByOffice
                LEFT JOIN dbo.tlbDepartment d
                    ON d.idfDepartment = m.idfInDepartment
                       AND d.intRowStatus = 0
                LEFT JOIN dbo.tlbOffice departmentOffice
                    ON departmentOffice.idfOffice = d.idfOrganization
                       AND departmentOffice.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000164) functionalArea
                    ON functionalArea.idfsReference = d.idfsDepartmentName
                LEFT JOIN dbo.FN_GBL_Institution(@LanguageID) sentToOrganization
                    ON sentToOrganization.idfOffice = m.idfSendToOffice
                LEFT JOIN dbo.tlbPerson collectedByPerson
                    ON collectedByPerson.idfPerson = m.idfFieldCollectedByPerson
                       AND collectedByPerson.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000015) sampleStatusType
                    ON sampleStatusType.idfsReference = m.idfsSampleStatus
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000006) birdStatusType
                    ON birdStatusType.idfsReference = m.idfsBirdStatus
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000110) accessionConditionType
                    ON accessionConditionType.idfsReference = m.idfsAccessionCondition
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000158) sampleKindType
                    ON sampleKindType.idfsReference = m.idfsSampleKind
                LEFT JOIN dbo.tlbAnimal a
                    ON a.idfAnimal = m.idfAnimal
                       AND a.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000005) animalAgeType
                    ON animalAgeType.idfsReference = a.idfsAnimalAge
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000007) animalSexType
                    ON animalSexType.idfsReference = a.idfsAnimalGender
                LEFT JOIN dbo.tlbSpecies s
                    ON s.idfSpecies = CASE
                                          WHEN m.idfAnimal IS NULL THEN
                                              m.idfSpecies
                                          ELSE
                                              a.idfSpecies
                                      END
                       AND s.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000086) speciesType
                    ON speciesType.idfsReference = s.idfsSpeciesType
                LEFT JOIN dbo.tlbHerd hd
                    ON hd.idfHerd = s.idfHerd
                       AND hd.intRowStatus = 0
                LEFT JOIN dbo.tlbFarm f
                    ON f.idfFarm = hd.idfFarm
                       AND f.intRowStatus = 0
            GROUP BY m.idfMaterial,
                     m.idfsSampleType,
                     sampleType.name,
                     m.idfRootMaterial,
                     m.idfParentMaterial,
                     m.idfHuman,
                     m.idfSpecies,
                     speciesType.idfsReference,
                     speciesType.name,
                     m.idfAnimal,
                     a.strAnimalCode,
                     a.idfsAnimalGender,
                     animalSexType.name,
                     a.idfsAnimalAge,
                     animalAgeType.name,
                     a.strColor,
                     a.strName,
                     m.idfMonitoringSession,
                     m.idfFieldCollectedByPerson,
                     collectedByPerson.strFamilyName,
                     collectedByPerson.strFirstName,
                     collectedByPerson.strSecondName,
                     m.idfFieldCollectedByOffice,
                     collectedByOrganization.name,
                     m.idfMainTest,
                     m.datFieldCollectionDate,
                     m.datFieldSentDate,
                     m.strFieldBarcode,
                     m.strCalculatedCaseID,
                     m.strCalculatedHumanName,
                     m.idfVectorSurveillanceSession,
                     m.idfVector,
                     m.idfSubdivision,
                     m.idfsSampleStatus,
                     sampleStatusType.name,
                     m.idfInDepartment,
                     functionalArea.name,
                     m.idfDestroyedByPerson,
                     m.datEnteringDate,
                     m.datDestructionDate,
                     m.strBarcode,
                     m.strNote,
                     m.idfsSite,
                     m.intRowStatus,
                     m.idfSendToOffice,
                     sentToOrganization.name,
                     m.blnReadOnly,
                     m.idfsBirdStatus,
                     birdStatusType.name,
                     m.idfHumanCase,
                     m.idfVetCase,
                     m.datAccession,
                     m.idfsAccessionCondition,
                     accessionConditionType.name,
                     m.strCondition,
                     m.idfAccesionByPerson,
                     m.idfsDestructionMethod,
                     m.idfsCurrentSite,
                     m.idfsSampleKind,
                     sampleKindType.name,
                     m.blnAccessioned,
                     m.blnShowInCaseOrSession,
                     m.blnShowInLabList,
                     m.blnShowInDispositionList,
                     m.blnShowInAccessionInForm,
                     m.idfMarkedForDispositionByPerson,
                     m.datOutOfRepositoryDate,
                     m.datSampleStatusDate,
                     m.DiseaseID,
                     hd.strHerdCode,
                     f.idfFarm,
                     f.idfFarmActual,
                     f.strFarmCode,
                     m.LabModuleSourceIndicator
        ) AS x
        WHERE RowNum > @FirstRec
              AND RowNum < @LastRec
        ORDER BY RowNum;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USP_HUM_HUMAN_MASTER_GETDetail]...';


GO
-- ================================================================================================
-- Name: USP_HUM_HUMAN_MASTER_GETDetail
--
-- Description:	Get a human actual record
--          
-- Revision History:
-- Name				Date		Change Detail
-- ---------------	----------	--------------------------------------------------------------------
-- Mandar Kulkarni				Initial release.
-- Vilma Thomas		05/25/2018	Update the ReferenceType key from 19000167 to 19000500 for 'Contact 
--								Phone Type'
-- Stephen Long		11/26/2018	Update for the new API; remove returnCode and returnMsg.
-- Ann Xiong		08/30/2019	Added script to select PersonalIDTypeName, OccupationTypeName, 
--								SchoolCountry, 
--								SchoolRegion, SchoolRayon, SchoolSettlement for Person Deduplication.
-- Ann Xiong		09/09/2019	return haai.SchoolAddressID instead of haai.AltAddressID as 
--								SchoolGeoLocationID
-- Mark Wilson		10/29/2019	added Settlement Type to return
-- Ann Xiong		02/17/2020	Added IsAnotherPhone and Age to select
-- Ann Xiong		05/08/2020	Added YNAnotherAddress, YNHumanForeignAddress, 
--								YNEmployerForeignAddress, YNHumanAltForeignAddress, 
--								YNSchoolForeignAddress, YNWorkSameAddress to select
-- Stephen Long		07/07/2020	Changed v6.1 function call for create address string to v7 version.
-- Mark Wilson		09/20/2021	reworked the locations to use gisLocation and hierarchy
-- Mark Wilson		10/04/2021	Updated to pull location data from correct table
-- Mark Wilson		10/05/2021	Updated to use correct location references and udpate test code
-- Mark Wilson		10/06/2021	Added Alt Address fields
-- Mark Wilson		10/07/2021	Lat/Long only needed for Current Address and Foreign Address not needed for Permanent
-- Mark Wilson		10/12/2021  Added YNPermanentSameAddress, updated YNAnotherAddress
-- Leo Tracchia		05/13/2022	Added joins for Location hierachy
-- Doug Albanese	 12/08/2022	 I have performed work to improve the speed of a record.

/*Test Code

EXEC dbo.USP_HUM_HUMAN_MASTER_GETDetail
	@LangID = 'en-US',
	@HumanMasterID = 422849750000916


EXEC dbo.USP_HUM_HUMAN_MASTER_GETDetail
	@LangID = 'az-Latn-AZ',
	@HumanMasterID = 411420970000870


EXEC dbo.USP_HUM_HUMAN_MASTER_GETDetail
	@LangID = 'en-US',
	@HumanMasterID = 413771740000870

*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_HUM_HUMAN_MASTER_GETDetail] (
	@LangID NVARCHAR(20),
	@HumanMasterID BIGINT
	)
AS
BEGIN
	DECLARE @HumanAltInfo AS TABLE (
   HumanAltidfsLocation		  BIGINT,
   HumanAltidfsCountry		  BIGINT,
   HumanAltCountry			  NVARCHAR(200),
   HumanAltidfsRegion		  BIGINT,
   HumanAltRegion			  NVARCHAR(200),
   HumanAltidfsRayon		  BIGINT,
   HumanAltRayon			  NVARCHAR(200),
   HumanAltidfsSettlement	  BIGINT,
   HumanAltSettlement		  NVARCHAR(200),
   HumanAltidfsSettlementType BIGINT
)

INSERT INTO @HumanAltInfo
SELECT
   haai.AltAddressID AS idfsLocation,
   lhAlt.AdminLevel1ID AS HumanAltidfsCountry,
   lhAlt.AdminLevel1Name AS HumanAltCountry,
   lhAlt.AdminLevel2ID AS HumanAltidfsRegion,
   lhAlt.AdminLevel2Name AS HumanAltRegion,
   lhAlt.AdminLevel3ID AS HumanAltidfsRayon,
   lhAlt.AdminLevel3Name AS HumanAltRayon,
   lhAlt.AdminLevel4ID AS HumanAltidfsSettlement,
   lhAlt.AdminLevel4Name AS HumanAltSettlement,
   AltLocation.idfsType	AS HumanAltidfsSettlementType   
FROM 
   HumanActualAddlinfo haai
INNER JOIN dbo.tlbGeoLocationShared AS tglAlt ON haai.AltAddressID = tglAlt.idfGeoLocationShared
INNER JOIN dbo.gisLocation AltLocation ON AltLocation.idfsLocation = tglAlt.idfsLocation
INNER JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LangID) lhAlt ON lhAlt.idfsLocation = tglAlt.idfsLocation	
WHERE 
   HumanActualAddlInfoUID = @HumanMasterID
   
	SET NOCOUNT ON;

	BEGIN TRY
		SELECT ISNULL(ha.strFirstName, '') + ' ' + ISNULL(ha.strLastName, '') AS PatientFarmOwnerName,
			haai.EIDSSPersonId AS EIDSSPersonID,
			ha.idfsOccupationType AS OccupationTypeID,
			ha.idfsNationality AS CitizenshipTypeID,
			citizenshipType.name AS CitizenshipTypeName,
			ha.idfsHumanGender AS GenderTypeID,
			tb.name AS GenderTypeName,

			-- Current Address
			ha.idfCurrentResidenceAddress AS HumanGeoLocationID,
			lhHuman.AdminLevel1ID AS HumanidfsCountry,
			lhHuman.AdminLevel1Name AS HumanCountry,
			lhHuman.AdminLevel2ID AS HumanidfsRegion,
			lhHuman.AdminLevel2Name AS HumanRegion,
			lhHuman.AdminLevel3ID AS HumanidfsRayon,
			lhHuman.AdminLevel3Name AS HumanRayon,
			lhHuman.AdminLevel4ID AS HumanidfsSettlement,
			lhHuman.AdminLevel4Name AS HumanSettlement,			
			HL.idfsType AS HumanidfsSettlementType,
			humanSettlementType.[name] AS HumanSettlementType,
			tglHuman.strPostCode AS HumanstrPostalCode,
			tglHuman.strStreetName AS HumanstrStreetName,
			tglHuman.strHouse AS HumanstrHouse,
			tglHuman.strBuilding AS HumanstrBuilding,
			tglHuman.strApartment AS HumanstrApartment,
			tglHuman.strDescription AS HumanDescription,
			tglHuman.dblLatitude AS HumanstrLatitude,
			tglHuman.dblLongitude AS HumanstrLongitude,
			tglHuman.blnForeignAddress AS HumanForeignAddressIndicator,
			tglHuman.strForeignAddress AS HumanForeignAddressString,

			-- Employer Address
			ha.idfEmployerAddress AS EmployerGeoLocationID,
			lhEmployer.AdminLevel1ID AS EmployeridfsCountry,
			lhEmployer.AdminLevel1Name AS EmployerCountry,
			lhEmployer.AdminLevel2ID AS EmployeridfsRegion,
			lhEmployer.AdminLevel2Name AS EmployerRegion,
			lhEmployer.AdminLevel3ID AS EmployeridfsRayon,
			lhEmployer.AdminLevel3Name AS EmployerRayon,
			lhEmployer.AdminLevel4ID AS EmployeridfsSettlement,
			lhEmployer.AdminLevel4Name AS EmployerSettlement,
			EA.idfsType AS EmployeridfsSettlementType,
			EmpSettlementType.strDefault AS EmployerSettlementType,
			tglEmployer.strPostCode AS EmployerstrPostalCode,
			tglEmployer.strStreetName AS EmployerstrStreetName,
			tglEmployer.strHouse AS EmployerstrHouse,
			tglEmployer.strBuilding AS EmployerstrBuilding,
			tglEmployer.strApartment AS EmployerstrApartment,
			tglEmployer.strDescription AS EmployerDescription,
			tglEmployer.blnForeignAddress AS EmployerForeignAddressIndicator,
			tglEmployer.strForeignAddress AS EmployerForeignAddressString,

			-- Permanent Address
			ha.idfRegistrationAddress AS HumanPermGeoLocationID,
			lhPerm.AdminLevel1ID AS HumanPermidfsCountry,
			lhPerm.AdminLevel1Name AS HumanPermCountry,
			lhPerm.AdminLevel2ID AS HumanPermidfsRegion,
			lhPerm.AdminLevel2Name AS HumanPermRegion,
			lhPerm.AdminLevel3ID AS HumanPermidfsRayon,
			lhPerm.AdminLevel3Name AS HumanPermRayon,
			lhPerm.AdminLevel4ID HumanPermidfsSettlement,
			lhPerm.AdminLevel4Name AS HumanPermSettlement,
			registrationLocation.idfsType AS HumanPermidfsSettlementType,
			registrationSettlementType.[name] AS HumanPermSettlementType,
			tglRegistrationAddress.strPostCode AS HumanPermstrPostalCode,
			tglRegistrationAddress.strStreetName AS HumanPermstrStreetName,
			tglRegistrationAddress.strHouse AS HumanPermstrHouse,
			tglRegistrationAddress.strBuilding AS HumanPermstrBuilding,
			tglRegistrationAddress.strApartment AS HumanPermstrApartment,
			tglRegistrationAddress.strDescription AS HumanPermDescription,

			-- Alternate Address
			haai.AltAddressID AS HumanAltGeoLocationID,
			lhAlt.HumanAltidfsCountry,
			lhAlt.HumanAltCountry,
			lhAlt.HumanAltidfsRegion,
			lhAlt.HumanAltRegion,
			lhAlt.HumanAltidfsRayon,
			lhAlt.HumanAltRayon,
			lhAlt.HumanAltidfsSettlement,
			lhAlt.HumanAltSettlement,
			lhAlt.HumanAltidfsSettlementType,
			AltSettlementType.name AS HumanAltSettlementType,
			tglAlt.strPostCode AS HumanAltstrPostalCode,
			tglAlt.strStreetName AS HumanAltstrStreetName,
			tglAlt.strHouse AS HumanAltstrHouse,
			tglAlt.strBuilding AS HumanAltstrBuilding,
			tglAlt.strApartment AS HumanAltstrApartment,
			tglAlt.strDescription AS HumanAltDescription,
			tglAlt.blnForeignAddress AS HumanAltForeignAddressIndicator,
			tglAlt.strForeignAddress AS HumanAltForeignAddressString,

			-- School Address
			haai.SchoolAddressID AS SchoolGeoLocationID,
			lhSchool.AdminLevel1ID AS SchoolidfsCountry,
			lhSchool.AdminLevel1Name AS SchoolCountry,
			lhSchool.AdminLevel2ID AS SchoolidfsRegion,
			lhSchool.AdminLevel2Name AS SchoolRegion,
			lhSchool.AdminLevel3ID AS SchoolidfsRayon,
			lhSchool.AdminLevel3Name AS SchoolRayon,
			lhSchool.AdminLevel4ID AS SchoolidfsSettlement,
			lhSchool.AdminLevel4Name AS SchoolSettlement,
			SchoolLocation.idfsType AS SchoolAltidfsSettlementType,
			SchoolSettlementType.strDefault AS SchoolAltSettlementType,
			tglSchool.strPostCode AS SchoolstrPostalCode,
			tglSchool.strStreetName AS SchoolstrStreetName,
			tglSchool.strHouse AS SchoolstrHouse,
			tglSchool.strBuilding AS SchoolstrBuilding,
			tglSchool.strApartment AS SchoolstrApartment,
			tglSchool.blnForeignAddress AS SchoolForeignAddressIndicator,
			tglSchool.strForeignAddress AS SchoolForeignAddressString,

			dbo.FN_GBL_FormatDate(ha.datDateofBirth, 'mm/dd/yyyy') AS DateOfBirth,
			dbo.FN_GBL_FormatDate(ha.datDateOfDeath, 'mm/dd/yyyy') AS DateOfDeath,
			dbo.FN_GBL_FormatDate(ha.datEnteredDate, 'mm/dd/yyyy') AS EnteredDate,
			dbo.FN_GBL_FormatDate(ha.datModificationDate, 'mm/dd/yyyy') AS ModificationDate,
			ha.strFirstName AS FirstOrGivenName,
			ha.strSecondName AS SecondName,
			ha.strLastName AS LastOrSurname,
			ha.strEmployerName AS EmployerName,
			ha.strHomePhone AS HomePhone,
			ha.strWorkPhone AS WorkPhone,
			ha.idfsPersonIDType AS PersonalIDType,
			ha.strPersonID AS PersonalID,
			haai.ReportedAge,
			haai.ReportedAgeUOMID,
			haai.PassportNbr AS PassportNumber,
			haai.IsEmployedID AS IsEmployedTypeID,
			isEmployed.name AS IsEmployedTypeName,
			haai.EmployerPhoneNbr AS EmployerPhone,
			haai.EmployedDTM AS EmployedDateLastPresent,
			haai.IsStudentID AS IsStudentTypeID,
			isStudent.name AS IsStudentTypeName,
			haai.SchoolName AS SchoolName,
			haai.SchoolLastAttendDTM AS SchoolDateLastAttended,
			haai.SchoolPhoneNbr AS SchoolPhone,
			haai.ContactPhoneCountryCode,
			haai.ContactPhoneNbr AS ContactPhone,
			haai.ContactPhoneNbrTypeID AS ContactPhoneTypeID,
			ContactPhoneNbrTypeID.name AS ContactPhoneTypeName,
			haai.ContactPhone2CountryCode,
			haai.ContactPhone2Nbr AS ContactPhone2,
			haai.ContactPhone2NbrTypeID AS ContactPhone2TypeID,
			ContactPhone2NbrTypeID.name AS ContactPhone2TypeName,
			personalIDType.name AS PersonalIDTypeName,
			occupationType.name AS OccupationTypeName,
			CASE 
				WHEN haai.ContactPhone2Nbr IS NULL
					AND haai.ContactPhone2NbrTypeID IS NULL
					THEN 'No'
				ELSE 'Yes'
				END AS IsAnotherPhone,
			CAST(ISNULL(haai.ReportedAge, '') AS VARCHAR(3)) + ' ' + ISNULL(HumanAgeType.name, '') AS Age,
			CASE 
				WHEN ((ha.idfRegistrationAddress IS NOT NULL AND ha.idfRegistrationAddress > 0) OR (haai.AltAddressID IS NOT NULL AND haai.AltAddressID > 0))
					THEN 'Yes'
				ELSE 'No'
				END AS YNAnotherAddress,
			CASE 
				WHEN tglHuman.blnForeignAddress IS NOT NULL
					AND tglHuman.blnForeignAddress = 1
					THEN 'Yes'
				ELSE 'No'
				END AS YNHumanForeignAddress,
			CASE 
				WHEN tglEmployer.blnForeignAddress IS NOT NULL
					AND tglEmployer.blnForeignAddress = 1
					THEN 'Yes'
				ELSE 'No'
				END AS YNEmployerForeignAddress,
			CASE 
				WHEN tglRegistrationAddress.blnForeignAddress IS NOT NULL
					AND tglRegistrationAddress.blnForeignAddress = 1
					THEN 'Yes'
				ELSE 'No'
				END AS YNHumPermForeignAddress,
			CASE 
				WHEN tglAlt.blnForeignAddress IS NOT NULL
					AND tglAlt.blnForeignAddress = 1
					THEN 'Yes'
				ELSE 'No'
				END AS YNHumanAltForeignAddress,
			CASE 
				WHEN tglSchool.blnForeignAddress IS NOT NULL
					AND tglSchool.blnForeignAddress = 1
					THEN 'Yes'
				ELSE 'No'
				END AS YNSchoolForeignAddress,
			CASE 
				WHEN dbo.FN_GBL_CreateAddressString(ISNULL(lhHuman.AdminLevel1Name, N''), ISNULL(lhHuman.AdminLevel2Name, N''), ISNULL(lhHuman.AdminLevel3Name, N''), ISNULL(tglHuman.strPostCode, N''), ISNULL(humanSettlementType.strDefault, N''), ISNULL(lhHuman.AdminLevel4Name, N''), ISNULL(tglHuman.strStreetName, N''), ISNULL(tglHuman.strHouse, N''), ISNULL(tglHuman.strBuilding, N''), ISNULL(tglHuman.strApartment, N''), ISNULL(tglHuman.blnForeignAddress, N''), ISNULL(tglHuman.strForeignAddress, N'')) = 
						dbo.FN_GBL_CreateAddressString(ISNULL(lhEmployer.AdminLevel1Name, N''), ISNULL(lhEmployer.AdminLevel2Name, N''), ISNULL(lhEmployer.AdminLevel3Name, N''), ISNULL(tglEmployer.strPostCode, N''), ISNULL(EmpSettlementType.strDefault, N''), ISNULL(lhEmployer.AdminLevel4Name, N''), ISNULL(tglEmployer.strStreetName, N''), ISNULL(tglEmployer.strHouse, N''), ISNULL(tglEmployer.strBuilding, N''), ISNULL(tglEmployer.strApartment, N''), ISNULL(tglEmployer.blnForeignAddress, N''), ISNULL(tglEmployer.strForeignAddress, N''))
					THEN 'Yes'
				ELSE 'No'
				END AS YNWorkSameAddress,
			CASE 
				WHEN dbo.FN_GBL_CreateAddressString(ISNULL(lhHuman.AdminLevel1Name, N''), ISNULL(lhHuman.AdminLevel2Name, N''), ISNULL(lhHuman.AdminLevel3Name, N''), ISNULL(tglHuman.strPostCode, N''), ISNULL(humanSettlementType.strDefault, N''), ISNULL(lhHuman.AdminLevel4Name, N''), ISNULL(tglHuman.strStreetName, N''), ISNULL(tglHuman.strHouse, N''), ISNULL(tglHuman.strBuilding, N''), ISNULL(tglHuman.strApartment, N''), ISNULL(tglHuman.blnForeignAddress, N''), ISNULL(tglHuman.strForeignAddress, N'')) = 
						dbo.FN_GBL_CreateAddressString(ISNULL(lhPerm.AdminLevel1Name, N''), ISNULL(lhPerm.AdminLevel2Name, N''), ISNULL(lhPerm.AdminLevel3Name, N''), ISNULL(tglRegistrationAddress.strPostCode, N''), ISNULL(registrationSettlementType.strDefault, N''), ISNULL(lhPerm.AdminLevel4Name, N''), ISNULL(tglRegistrationAddress.strStreetName, N''), ISNULL(tglRegistrationAddress.strHouse, N''), ISNULL(tglRegistrationAddress.strBuilding, N''), ISNULL(tglRegistrationAddress.strApartment, N''), ISNULL(tglRegistrationAddress.blnForeignAddress, N''), ISNULL(tglRegistrationAddress.strForeignAddress, N''))
					THEN 'Yes'
				ELSE 'No'
				END AS YNPermanentSameAddress 

		FROM dbo.tlbHumanActual ha

		LEFT JOIN dbo.HumanActualAddlinfo haai ON ha.idfHumanActual = haai.HumanActualAddlinfoUID
		LEFT JOIN dbo.tlbGeoLocationShared AS tglHuman ON ha.idfCurrentResidenceAddress = tglHuman.idfGeoLocationShared
		LEFT JOIN dbo.tlbGeoLocationShared AS tglEmployer ON ha.idfEmployerAddress = tglEmployer.idfGeoLocationShared
		LEFT JOIN dbo.tlbGeoLocationShared AS tglRegistrationAddress ON ha.idfRegistrationAddress = tglRegistrationAddress.idfGeoLocationShared
		LEFT JOIN dbo.tlbGeoLocationShared AS tglSchool ON haai.SchoolAddressID = tglSchool.idfGeoLocationShared
		LEFT JOIN dbo.tlbGeoLocationShared AS tglAlt ON haai.AltAddressID = tglAlt.idfGeoLocationShared
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000043) tb ON tb.idfsReference = ha.idfsHumanGender

		-- Current Address
		LEFT JOIN dbo.gisLocation HL ON HL.idfsLocation = tglHuman.idfsLocation	
		LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LangID) lhHuman ON lhHuman.idfsLocation = tglHuman.idfsLocation			
		LEFT JOIN dbo.FN_GBL_GIS_Reference(@LangID, 19000005) AS humanSettlementType ON humanSettlementType.idfsReference = HL.idfsType

		-- Employer address 
		LEFT JOIN dbo.gisLocation EA ON EA.idfsLocation = tglEmployer.idfsLocation
		LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LangID) lhEmployer ON lhEmployer.idfsLocation = tglEmployer.idfsLocation		
		LEFT JOIN dbo.FN_GBL_GIS_Reference(@LangID, 19000005) AS EmpSettlementType ON EmpSettlementType.idfsReference = EA.idfsType

		-- Permanent address 
		LEFT JOIN dbo.gisLocation registrationLocation ON registrationLocation.idfsLocation = tglRegistrationAddress.idfsLocation
		LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LangID) lhPerm ON lhPerm.idfsLocation = tglRegistrationAddress.idfsLocation		
		LEFT JOIN dbo.FN_GBL_GIS_Reference(@LangID, 19000005) AS registrationSettlementType ON registrationSettlementType.idfsReference = registrationLocation.idfsType
		
		-- Alternate address - new for EIDSS7
		LEFT JOIN @HumanAltInfo lhAlt ON lhAlt.HumanAltidfsLocation = tglAlt.idfsLocation	
		LEFT JOIN dbo.FN_GBL_GIS_Reference(@LangID, 19000005) AS AltSettlementType ON AltSettlementType.idfsReference = lhAlt.HumanAltidfsSettlementType

		LEFT JOIN dbo.FN_GBL_Repair(@LangID, 19000100) isEmployed ON IsEmployed.idfsReference = haai.IsEmployedID
		LEFT JOIN dbo.FN_GBL_Repair(@LangID, 19000100) isStudent ON isStudent.idfsReference = haai.IsStudentID
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000054) AS citizenshipType ON ha.idfsNationality = citizenshipType.idfsReference
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000500) AS contactPhoneNbrTypeID ON contactPhoneNbrTypeID.idfsReference = haai.ContactPhoneNbrTypeID
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000500) AS contactPhone2NbrTypeID ON contactPhone2NbrTypeID.idfsReference = haai.ContactPhone2NbrTypeID
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000148) AS personalIDType ON ha.idfsPersonIDType = personalIDType.idfsReference
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000061) AS occupationType ON ha.idfsOccupationType = occupationType.idfsReference

		-- School address - E6 school address was originally stored in idfEmployerAddress with employment type = 'Student'
		LEFT JOIN dbo.gisLocation SchoolLocation ON SchoolLocation.idfsLocation = tglSchool.idfsLocation
		LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LangID) lhSchool ON lhSchool.idfsLocation = tglSchool.idfsLocation		
		LEFT JOIN dbo.FN_GBL_GIS_Reference(@LangID, 19000005) AS schoolSettlementType ON schoolSettlementType.idfsReference = SchoolLocation.idfsType

		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000042) AS HumanAgeType	ON haai.ReportedAgeUOMID = HumanAgeType.idfsReference

		WHERE ha.idfHumanActual = @HumanMasterID;
	END TRY

	BEGIN CATCH
		THROW;
	END CATCH

END
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_SET]...';


GO
-- ================================================================================================
-- Name: USP_LAB_SET
--
-- Description:	Inserts or updates samples, tests, test amendments, test interpretations, 
-- transfers, batches and approvals for the laboratory module use cases.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     07/19/2018 Initial release.
-- Stephen Long		10/31/2018 Added the test amendments and transfers - LUC03 and LUC07.
-- Stephen Long		01/24/2019 Added box place availabilities parameter and updates.
-- Stephen Long     02/06/2019 Removed UserPreferenceID parameter; retrieved in the stored 
--                             procedure.  Replace temporary sample ID with the database ID 
--                             on new sample record that was also marked as a favorite. 
-- Stephen Long     02/09/2019 Corrected the JSON table name for EIDSSFieldSampleID to EIDSSLocal 
--                             FieldSampleID.
-- Stephen Long     02/19/2019 Modified for removed parameters from USSP_GBL_BATCH_TEST_SET and 
--                             added parameter to USSP_LAB_TRANSFER_SET.  Removed test 
--                             interpretation parameter.
-- Stephen Long     03/10/2019 Changed temp table field names for test amendement to sync up with 
--                             the API parameter names (LUC07).
-- Stephen Long     03/20/2019 Added row action on the batch test select from JSON variable. 
--                             Added check on Favorites parameter to only process if not null.
-- Stephen Long     04/17/2019 Update to use human master ID when registering new samples, and 
--                             copy over to human (similiar to how human disease report works).
-- Stephen Long     07/09/2019 Added human master ID parameter for call to sample set.
-- Stephen Long     08/29/2019 Corrected root sample ID on call to USSP_LAB_SAMPLE_SET.
-- Stephen Long     03/30/2020 Added audit user name parameter.
-- Stephen Long     04/20/2020 Changes for LUC10 vector type and species type ID's additions.
-- Stephen Long     10/28/2020 Changed row action from nchar to char.
-- Stephen Long     09/24/2021 Removed language parameter as it is not needed.
-- Stephen Long     01/03/2022 Changed login site to NVARCHAR(20).
-- Stephen Long     01/07/2022 Added copy of human actual to human stored procedure call.
-- Stephen Long     01/25/2022 Added logic to add farm, herd and species for samples having no
--                             disease report or monitoring session association.
-- Stephen Long     03/10/2022 Changed note to comment on samples table variable.
-- Stephen Long     03/25/2022 Updated suppress select table variables for adding of vet samples.
-- Stephen Long     03/29/2022 Fix on suppress select of species.
-- Stephen Long     03/30/2022 Fix on suppress select of human copy.
-- Stephen Long     04/20/2022 Changed observation ID on batch test table variable to nullable.
-- Stephen Long     05/18/2022 Added notification processing on new transfer records.
-- Stephen Long     05/24/2022 Fix to check vector ID less than zero and not -1.
-- Stephen Long     07/06/2022 Updates for site alerts to call new stored procedure.
-- Stephen Long     10/10/2022 Added monitoring session ID check when farm or human master ID is 
--                             not null for registering new samples.
-- Stephen Long     10/11/2022 Added insert to tlbMonitoringSessionToMaterial to pick up the 
--                             correct disease on an active surveillance session.
-- Stephen Long     10/18/2022 Fix to account for human active surveillance session diseases and 
--                             transferred samples for an active surveillance session.
-- Leo Tracchia		10/21/2022 Fix for properly deleting tests for human disease report DevOps 
--                             defect 5006.
-- Stephen Long     10/21/2022 Added veterinary disease report, monitoring session and vector 
--                             identifiers to the USSP_LAB_TEST_SET call.
-- Stephen Long     12/14/2022 Added null data audit event to call of herd and species set.
-- Stephen Long     12/17/2022 Fix to call of USSP_VET_SPECIES_SET for outbreak status type; 
--                             passing null.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_SET]
( 
    @Samples NVARCHAR(MAX) = NULL,
    @BatchTests NVARCHAR(MAX) = NULL,
    @Tests NVARCHAR(MAX) = NULL,
    @TestAmendments NVARCHAR(MAX) = NULL,
    @Transfers NVARCHAR(MAX) = NULL,
    @FreezerBoxLocationAvailabilities NVARCHAR(MAX) = NULL,
    @Events NVARCHAR(MAX) = NULL,
    @UserID BIGINT,
    @Favorites XML = NULL,
    @AuditUserName NVARCHAR(200)
)
AS
DECLARE @ReturnCode INT = 0,
        @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
        @KeyId BIGINT = 0;
DECLARE @SuppressSelect TABLE
(
    ReturnCode INT,
    ReturnMessage NVARCHAR(MAX),
    ID BIGINT NULL
);
DECLARE @SuppressSelect2 TABLE
(
    ReturnCode INT,
    ReturnMessage NVARCHAR(MAX)
);
DECLARE @RowID BIGINT,
        @RowStatus INT,
        @RowAction CHAR(1),
        @SampleID BIGINT,
        @SampleTypeID BIGINT,
        @RootSampleID BIGINT = NULL,
        @ParentSampleID BIGINT = NULL,
        @HumanMasterID BIGINT = NULL,
        @HumanID BIGINT = NULL,
        @FarmMasterID BIGINT = NULL,
        @FarmID BIGINT = NULL,
        @SpeciesID BIGINT = NULL,
        @AnimalID BIGINT = NULL,
        @VectorID BIGINT = NULL,
        @MonitoringSessionID BIGINT = NULL,
        @VectorSessionID BIGINT = NULL,
        @HumanDiseaseReportID BIGINT = NULL,
        @VeterinaryDiseaseReportID BIGINT = NULL,
        @FunctionalAreaID BIGINT = NULL,
        @FreezerSubdivisionID BIGINT = NULL,
        @StorageBoxPlace NVARCHAR(200) = NULL,
        @CollectionDate DATETIME2 = NULL,
        @CollectedByPersonID BIGINT = NULL,
        @CollectedByOrganizationID BIGINT = NULL,
        @SentDate DATETIME2 = NULL,
        @EIDSSLocalOrFieldSampleID NVARCHAR(200) = NULL,
        @EIDSSLaboratorySampleID NVARCHAR(200) = NULL,
        @EnteredDate DATETIME2 = NULL,
        @OutOfRepositoryDate DATETIME2 = NULL,
        @MarkedForDispositionByPersonID BIGINT = NULL,
        @SentToOrganizationID BIGINT = NULL,
        @SiteID BIGINT = NULL,
        @CurrentSiteID BIGINT = NULL,
        @SampleKindTypeID BIGINT = NULL,
        @ReadOnlyIndicator BIT = NULL,
        @AccessionDate DATETIME2 = NULL,
        @AccessionConditionTypeID BIGINT = NULL,
        @AccessionByPersonID BIGINT = NULL,
        @SampleStatusTypeID BIGINT = NULL,
        @PreviousSampleStatusTypeID BIGINT = NULL,
        @AccessionComment NVARCHAR(200) = NULL,
        @DestructionMethodTypeID BIGINT = NULL,
        @DestructionDate DATETIME2 = NULL,
        @DestroyedByPersonID BIGINT = NULL,
        @Note NVARCHAR(500) = NULL,
        @Comment NVARCHAR(500) = NULL,
        @BatchTestID BIGINT,
        @TestNameTypeID BIGINT = NULL,
        @BatchStatusTypeID BIGINT = NULL,
        @PerformedByOrganizationID BIGINT = NULL,
        @PerformedByPersonID BIGINT = NULL,
        @ValidatedByOrganizationID BIGINT = NULL,
        @ValidatedByPersonID BIGINT = NULL,
        @ObservationID BIGINT = NULL,
        @PerformedDate DATETIME2 = NULL,
        @ValidationDate DATETIME2 = NULL,
        @EIDSSBatchTestID NVARCHAR(200) = NULL,
        @ResultEnteredByPersonID BIGINT = NULL,
        @ResultEnteredByOrganizationID BIGINT = NULL,
        @TestRequested NVARCHAR(200) = NULL,
        @TestID BIGINT,
        @TestCategoryTypeID BIGINT = NULL,
        @TestResultTypeID BIGINT = NULL,
        @TestStatusTypeID BIGINT,
        @PreviousTestStatusTypeID BIGINT = NULL,
        @TestNumber INT = NULL,
        @StartedDate DATETIME2 = NULL,
        @ConcludedDate DATETIME2 = NULL,
        @TestedByPersonID BIGINT = NULL,
        @TestedByOrganizationID BIGINT = NULL,
        @NonLaboratoryTestIndicator BIT,
        @ExternalTestIndicator BIT = NULL,
        @ReceivedDate DATETIME2 = NULL,
        @ContactPersonName NVARCHAR(200) = NULL,
        @DiseaseID BIGINT = NULL,
        @FavoriteIndicator INT = NULL,
        @TestAmendmentID BIGINT,
        @AmendedByOrganizationID BIGINT = NULL,
        @AmendedByPersonID BIGINT = NULL,
        @AmendmentDate DATETIME2 = NULL,
        @OldTestResultTypeID BIGINT = NULL,
        @ChangedTestResultTypeID BIGINT = NULL,
        @OldNote NVARCHAR(500) = NULL,
        @ChangedNote NVARCHAR(500) = NULL,
        @ReasonForAmendment NVARCHAR(500),
        @TransferID BIGINT,
        @EIDSSTransferID NVARCHAR(200) = NULL,
        @TransferStatusTypeID BIGINT = NULL,
        @TransferredFromOrganizationID BIGINT = NULL,
        @TransferredToOrganizationID BIGINT = NULL,
        @SentByPersonID BIGINT = NULL,
        @TransferDate DATETIME2 = NULL,
        @BoxPlaceAvailability NVARCHAR(MAX),
        @EventId BIGINT,
        @EventTypeId BIGINT = NULL,
        @EventSiteId BIGINT = NULL,
        @EventObjectId BIGINT = NULL,
        @EventUserId BIGINT = NULL,
        @EventDiseaseId BIGINT = NULL,
        @EventLocationId BIGINT = NULL,
        @EventInformationString NVARCHAR(MAX) = NULL,
        @EventLoginSiteId BIGINT = NULL,
        @NewHumanID BIGINT = NULL,
        @VectorTypeID BIGINT = NULL,
        @SpeciesTypeID BIGINT = NULL,
        @EIDSSVectorID NVARCHAR(50) = NULL,
        @MonitoringSessionToMaterialID BIGINT = NULL;

DECLARE @SamplesTemp TABLE
(
    SampleID BIGINT NOT NULL,
    SampleTypeID BIGINT NOT NULL,
    RootSampleID BIGINT NULL,
    ParentSampleID BIGINT NULL,
    HumanMasterID BIGINT NULL,
    HumanID BIGINT NULL,
    FarmMasterID BIGINT NULL,
    FarmID BIGINT NULL,
    SpeciesID BIGINT NULL,
    AnimalID BIGINT NULL,
    MonitoringSessionID BIGINT NULL,
    CollectedByPersonID BIGINT NULL,
    CollectedByOrganizationID BIGINT NULL,
    MainTestID BIGINT NULL,
    CollectionDate DATETIME2 NULL,
    SentDate DATETIME2 NULL,
    EIDSSLocalOrFieldSampleID NVARCHAR(200) NULL,
    VectorSessionID BIGINT NULL,
    VectorID BIGINT NULL,
    FreezerSubdivisionID BIGINT NULL,
    StorageBoxPlace NVARCHAR(200) NULL,
    SampleStatusTypeID BIGINT NULL,
    PreviousSampleStatusTypeID BIGINT NULL,
    FunctionalAreaID BIGINT NULL,
    DestroyedByPersonID BIGINT NULL,
    EnteredDate DATETIME2 NULL,
    DestructionDate DATETIME2 NULL,
    EIDSSLaboratorySampleID NVARCHAR(200) NULL,
    Comment NVARCHAR(500) NULL,
    SiteID BIGINT NULL,
    RowStatus INT NOT NULL,
    SentToOrganizationID BIGINT NULL,
    ReadOnlyIndicator BIT NOT NULL,
    BirdStatusTypeID BIGINT NULL,
    HumanDiseaseReportID BIGINT NULL,
    VeterinaryDiseaseReportID BIGINT NULL,
    AccessionDate DATETIME2 NULL,
    AccessionConditionTypeID BIGINT NULL,
    AccessionComment NVARCHAR(200) NULL,
    AccessionByPersonID BIGINT NULL,
    DestructionMethodTypeID BIGINT NULL,
    CurrentSiteID BIGINT NULL,
    SampleKindTypeID BIGINT NULL,
    MarkedForDispositionByPersonID BIGINT NULL,
    OutOfRepositoryDate DATETIME2 NULL,
    DiseaseID BIGINT NULL,
    VectorTypeID BIGINT NULL,
    SpeciesTypeID BIGINT NULL,
    FavoriteIndicator BIT NOT NULL,
    RowAction INT NULL
);
DECLARE @BatchTestsTemp TABLE
(
    BatchTestID BIGINT NOT NULL,
    TestNameTypeID BIGINT NULL,
    BatchStatusTypeID BIGINT NULL,
    PerformedByOrganizationID BIGINT NULL,
    PerformedByPersonID BIGINT NULL,
    ValidatedByOrganizationID BIGINT NULL,
    ValidatedByPersonID BIGINT NULL,
    ObservationID BIGINT NULL,
    SiteID BIGINT NOT NULL,
    PerformedDate DATETIME2 NULL,
    ValidationDate DATETIME2 NULL,
    EIDSSBatchTestID NVARCHAR(200) NULL,
    RowStatus INT NOT NULL,
    ResultEnteredByPersonID BIGINT NULL,
    ResultEnteredByOrganizationID BIGINT NULL,
    TestRequested NVARCHAR(200) NULL,
    RowAction INT NULL
);
DECLARE @TestsTemp TABLE
(
    TestID BIGINT NOT NULL,
    TestNameTypeID BIGINT NULL,
    TestCategoryTypeID BIGINT NULL,
    TestResultTypeID BIGINT NULL,
    TestStatusTypeID BIGINT NOT NULL,
    PreviousTestStatusTypeID BIGINT NULL,
    DiseaseID BIGINT NOT NULL,
    SampleID BIGINT NULL,
    BatchTestID BIGINT NULL,
    ObservationID BIGINT NULL,
    TestNumber INT NULL,
    Note NVARCHAR(500) NULL,
    RowStatus INT NOT NULL,
    StartedDate DATETIME2 NULL,
    ConcludedDate DATETIME2 NULL,
    TestedByOrganizationID BIGINT NULL,
    TestedByPersonID BIGINT NULL,
    ResultEnteredByOrganizationID BIGINT NULL,
    ResultEnteredByPersonID BIGINT NULL,
    ValidatedByOrganizationID BIGINT NULL,
    ValidatedByPersonID BIGINT NULL,
    ReadOnlyIndicator BIT NOT NULL,
    NonLaboratoryTestIndicator BIT NOT NULL,
    ExternalTestIndicator BIT NULL,
    PerformedByOrganizationID BIGINT NULL,
    ReceivedDate DATETIME2 NULL,
    ContactPersonName NVARCHAR(200) NULL,
   	HumanDiseaseReportID BIGINT NULL, 
    VeterinaryDiseaseReportID BIGINT NULL, 
    MonitoringSessionID BIGINT NULL, 
    VectorID BIGINT NULL,
    RowAction INT NULL
);
DECLARE @TestAmendmentsTemp TABLE
(
    TestAmendmentID BIGINT NOT NULL,
    TestID BIGINT NOT NULL,
    AmendedByOrganizationID BIGINT NULL,
    AmendedByPersonID BIGINT NULL,
    AmendmentDate DATETIME2 NULL,
    OldTestResultTypeID BIGINT NULL,
    ChangedTestResultTypeID BIGINT NULL,
    OldNote NVARCHAR(500) NULL,
    ChangedNote NVARCHAR(500) NULL,
    ReasonForAmendment NVARCHAR(500) NOT NULL,
    RowStatus INT NOT NULL,
    RowAction INT NULL
);
DECLARE @TransfersTemp TABLE
(
    TransferID BIGINT NOT NULL,
    SampleID BIGINT NOT NULL,
    EIDSSTransferID NVARCHAR(200) NULL,
    TransferStatusTypeID BIGINT NULL,
    TransferredFromOrganizationID BIGINT NULL,
    TransferredToOrganizationID BIGINT NULL,
    SentByPersonID BIGINT NULL,
    TransferDate DATETIME2 NULL,
    PurposeOfTransfer NVARCHAR(200) NULL,
    SiteID BIGINT NOT NULL,
    TestRequested NVARCHAR(200) NULL,
    RowStatus INT NOT NULL,
    RowAction INT NULL
);
DECLARE @FreezerBoxLocationAvailabilitiesTemp TABLE
(
    FreezerSubdivisionID BIGINT NOT NULL,
    BoxPlaceAvailability NVARCHAR(MAX) NOT NULL
);
DECLARE @EventsTemp TABLE
(
    EventId BIGINT NOT NULL,
    EventTypeId BIGINT NULL,
    UserId BIGINT NULL,
    SiteId BIGINT NULL,
    LoginSiteId BIGINT NULL,
    ObjectId BIGINT NULL,
    DiseaseId BIGINT NULL,
    LocationId BIGINT NULL,
    InformationString NVARCHAR(MAX) NULL
);
DECLARE @FavoritesString VARCHAR(MAX);

BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        BEGIN TRANSACTION;

        INSERT INTO @SamplesTemp
        SELECT *
        FROM
            OPENJSON(@Samples)
            WITH
            (
                SampleID BIGINT,
                SampleTypeID BIGINT,
                RootSampleID BIGINT,
                ParentSampleID BIGINT,
                HumanMasterID BIGINT,
                HumanID BIGINT,
                FarmMasterID BIGINT,
                FarmID BIGINT,
                SpeciesID BIGINT,
                AnimalID BIGINT,
                MonitoringSessionID BIGINT,
                CollectedByPersonID BIGINT,
                CollectedByOrganizationID BIGINT,
                MainTestID BIGINT,
                CollectionDate DATETIME2,
                SentDate DATETIME2,
                EIDSSLocalOrFieldSampleID NVARCHAR(200),
                VectorSessionID BIGINT,
                VectorID BIGINT,
                FreezerSubdivisionID BIGINT,
                StorageBoxPlace NVARCHAR(200),
                SampleStatusTypeID BIGINT,
                PreviousSampleStatusTypeID BIGINT,
                FunctionalAreaID BIGINT,
                DestroyedByPersonID BIGINT,
                EnteredDate DATETIME2,
                DestructionDate DATETIME2,
                EIDSSLaboratorySampleID NVARCHAR(200),
                Comment NVARCHAR(500),
                SiteID BIGINT,
                RowStatus INT,
                SentToOrganizationID BIGINT,
                ReadOnlyIndicator BIT,
                BirdStatusTypeID BIGINT,
                HumanDiseaseReportID BIGINT,
                VeterinaryDiseaseReportID BIGINT,
                AccessionDate DATETIME2,
                AccessionConditionTypeID BIGINT,
                AccessionComment NVARCHAR(200),
                AccessionByPersonID BIGINT,
                DestructionMethodTypeID BIGINT,
                CurrentSiteID BIGINT,
                SampleKindTypeID BIGINT,
                MarkedForDispositionByPersonID BIGINT,
                OutOfRepositoryDate DATETIME2,
                DiseaseID BIGINT,
                VectorTypeID BIGINT,
                SpeciesTypeID BIGINT,
                FavoriteIndicator BIT,
                RowAction INT
            );

        INSERT INTO @BatchTestsTemp
        SELECT *
        FROM
            OPENJSON(@BatchTests)
            WITH
            (
                BatchTestID BIGINT,
                TestNameTypeID BIGINT,
                BatchStatusTypeID BIGINT,
                PerformedByOrganizationID BIGINT,
                PerformedByPersonID BIGINT,
                ValidatedByOrganizationID BIGINT,
                ValidatedByPersonID BIGINT,
                ObservationID BIGINT,
                SiteID BIGINT,
                PerformedDate DATETIME2,
                ValidationDate DATETIME2,
                EIDSSBatchTestID NVARCHAR(200),
                RowStatus INT,
                ResultEnteredByPersonID BIGINT,
                ResultEnteredByOrganizationID BIGINT,
                TestRequested NVARCHAR(200),
                RowAction INT
            );

        INSERT INTO @TestsTemp
        SELECT *
        FROM
            OPENJSON(@Tests)
            WITH
            (
                TestID BIGINT,
                TestNameTypeID BIGINT,
                TestCategoryTypeID BIGINT,
                TestResultTypeID BIGINT,
                TestStatusTypeID BIGINT,
                PreviousTestStatusTypeID BIGINT,
                DiseaseID BIGINT,
                SampleID BIGINT,
                BatchTestID BIGINT,
                ObservationID BIGINT,
                TestNumber INT,
                Note NVARCHAR(500),
                RowStatus INT,
                StartedDate DATETIME2,
                ConcludedDate DATETIME2,
                TestedByOrganizationID BIGINT,
                TestedByPersonID BIGINT,
                ResultEnteredByOrganizationID BIGINT,
                ResultEnteredByPersonID BIGINT,
                ValidatedByOrganizationID BIGINT,
                ValidatedByPersonID BIGINT,
                ReadOnlyIndicator BIT,
                NonLaboratoryTestIndicator BIT,
                ExternalTestIndicator BIT,
                PerformedByOrganizationID BIGINT,
                ReceivedDate DATETIME2,
                ContactPersonName NVARCHAR(200),
                HumanDiseaseReportID BIGINT, 
                VeterinaryDiseaseReportID BIGINT, 
                MonitoringSessionID BIGINT, 
                VectorID BIGINT,
                RowAction INT
            );

        INSERT INTO @TestAmendmentsTemp
        SELECT *
        FROM
            OPENJSON(@TestAmendments)
            WITH
            (
                TestAmendmentID BIGINT,
                TestID BIGINT,
                AmendedByOrganizationID BIGINT,
                AmendedByPersonID BIGINT,
                AmendmentDate DATETIME2,
                OldTestResultTypeID BIGINT,
                ChangedTestResultTypeID BIGINT,
                OldNote NVARCHAR(500),
                ChangedNote NVARCHAR(500),
                ReasonForAmendment NVARCHAR(500),
                RowStatus INT,
                RowAction INT
            );

        INSERT INTO @TransfersTemp
        SELECT *
        FROM
            OPENJSON(@Transfers)
            WITH
            (
                TransferID BIGINT,
                SampleID BIGINT,
                EIDSSTransferID NVARCHAR(200),
                TransferStatusTypeID BIGINT,
                TransferredFromOrganizationID BIGINT,
                TransferredToOrganizationID BIGINT,
                SentByPersonID BIGINT,
                TransferDate DATETIME2,
                PurposeOfTransfer NVARCHAR(200),
                SiteID BIGINT,
                TestRequested NVARCHAR(200),
                RowStatus INT,
                RowAction INT
            );

        INSERT INTO @FreezerBoxLocationAvailabilitiesTemp
        SELECT *
        FROM
            OPENJSON(@FreezerBoxLocationAvailabilities)
            WITH
            (
                FreezerSubdivisionID BIGINT,
                BoxPlaceAvailability NVARCHAR(MAX)
            );

        INSERT INTO @EventsTemp
        SELECT *
        FROM
            OPENJSON(@Events)
            WITH
            (
                EventId BIGINT,
                EventTypeId BIGINT,
                UserId BIGINT,
                SiteId BIGINT,
                LoginSiteId BIGINT,
                ObjectId BIGINT,
                DiseaseId BIGINT,
                LocationId BIGINT,
                InformationString NVARCHAR(MAX)
            );

        SET @FavoritesString = CONVERT(NVARCHAR(MAX), @Favorites, 1);

        WHILE EXISTS (SELECT * FROM @SamplesTemp)
        BEGIN
            SELECT TOP 1
                @RowID = SampleID,
                @SampleID = SampleID,
                @SampleTypeID = SampleTypeID,
                @RootSampleID = RootSampleID,
                @ParentSampleID = ParentSampleID,
                @HumanMasterID = HumanMasterID,
                @HumanID = HumanID,
                @FarmMasterID = FarmMasterID,
                @FarmID = FarmID,
                @SpeciesID = SpeciesID,
                @AnimalID = AnimalID,
                @VectorID = VectorID,
                @MonitoringSessionID = MonitoringSessionID,
                @VectorSessionID = VectorSessionID,
                @HumanDiseaseReportID = HumanDiseaseReportID,
                @VeterinaryDiseaseReportID = VeterinaryDiseaseReportID,
                @CollectionDate = CollectionDate,
                @CollectedByPersonID = CollectedByPersonID,
                @CollectedByOrganizationID = CollectedByOrganizationID,
                @SentDate = SentDate,
                @SentToOrganizationID = SentToOrganizationID,
                @EIDSSLocalOrFieldSampleID = EIDSSLocalOrFieldSampleID,
                @EIDSSLaboratorySampleID = EIDSSLaboratorySampleID,
                @SiteID = SiteID,
                @FunctionalAreaID = FunctionalAreaID,
                @FreezerSubdivisionID = FreezerSubdivisionID,
                @StorageBoxPlace = StorageBoxPlace,
                @EnteredDate = EnteredDate,
                @OutOfRepositoryDate = OutOfRepositoryDate,
                @DestructionDate = DestructionDate,
                @DestructionMethodTypeID = DestructionMethodTypeID,
                @DestroyedByPersonID = DestroyedByPersonID,
                @ReadOnlyIndicator = ReadOnlyIndicator,
                @AccessionDate = AccessionDate,
                @AccessionConditionTypeID = AccessionConditionTypeID,
                @AccessionByPersonID = AccessionByPersonID,
                @SampleStatusTypeID = SampleStatusTypeID,
                @PreviousSampleStatusTypeID = PreviousSampleStatusTypeID,
                @AccessionComment = AccessionComment,
                @Comment = Comment,
                @CurrentSiteID = CurrentSiteID,
                @SampleKindTypeID = SampleKindTypeID,
                @MarkedForDispositionByPersonID = MarkedForDispositionByPersonID,
                @DiseaseID = DiseaseID,
                @VectorTypeID = VectorTypeID,
                @SpeciesTypeID = SpeciesTypeID,
                @FavoriteIndicator = FavoriteIndicator,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @SamplesTemp;

            IF @RowAction = 1
               OR @RowAction = 5
            BEGIN
                IF @FarmMasterID IS NOT NULL -- Registering new veterinary sample with either no disease report or possibly no monitoring session.
                BEGIN
                    IF @FarmID IS NULL
                    BEGIN
                        DECLARE @NewFarmOwnerID BIGINT,
                                @FlockOrHerdID BIGINT;

                        INSERT INTO @SuppressSelect2
                        EXECUTE dbo.USSP_VET_FARM_COPY @AuditUserName,
                                                       @FarmMasterID,
                                                       NULL,
                                                       NULL,
                                                       NULL,
                                                       NULL,
                                                       NULL,
                                                       NULL,
                                                       NULL,
                                                       NULL,
                                                       NULL,
                                                       NULL,
                                                       @HumanMasterID,
                                                       @FarmID OUTPUT,
                                                       @NewFarmOwnerID OUTPUT;

                        IF @MonitoringSessionID IS NOT NULL -- New farm added to the veterinary active surveillance session.
                        BEGIN
                            UPDATE dbo.tlbFarm
                            SET idfMonitoringSession = @MonitoringSessionID
                            WHERE idfFarm = @FarmID;
                        END

                        SET @HumanID = @NewFarmOwnerID;
                        SET @HumanMasterID = NULL;
                    END

                    IF @SpeciesID IS NULL -- Adding new flock or herd and species to an existing farm.
                    BEGIN
                        INSERT INTO @SuppressSelect2
                        EXECUTE dbo.USSP_VET_HERD_SET @AuditUserName,
                                                      NULL, 
                                                      @FlockOrHerdID OUTPUT,
                                                      NULL,
                                                      @FarmID,
                                                      NULL,
                                                      NULL,
                                                      NULL,
                                                      NULL,
                                                      NULL,
                                                      0,
                                                      1;

                        INSERT INTO @SuppressSelect
                        EXECUTE dbo.USSP_VET_SPECIES_SET @AuditUserName,
                                                         NULL, 
                                                         @SpeciesID OUTPUT,
                                                         NULL,
                                                         @SpeciesTypeID,
                                                         @FlockOrHerdID,
                                                         NULL,
                                                         NULL,
                                                         NULL,
                                                         NULL,
                                                         NULL,
                                                         NULL,
                                                         NULL,
                                                         0,
                                                         1, 
                                                         NULL;
                    END
                END
                ELSE
                BEGIN
                    IF @HumanMasterID IS NOT NULL -- Registering new human sample with either no disease report or possibly no active surveillance session.
                    BEGIN
                        INSERT INTO @SuppressSelect2
                        EXECUTE dbo.USP_HUM_COPYHUMANACTUALTOHUMAN @HumanMasterID,
                                                                   @HumanID OUTPUT,
                                                                   @ReturnCode OUTPUT,
                                                                   @ReturnMessage OUTPUT;

                        IF @MonitoringSessionID IS NOT NULL -- New person added to the human active surveillance session.
                        BEGIN
                            UPDATE dbo.tlbHuman
                            SET idfMonitoringSession = @MonitoringSessionID
                            WHERE idfHuman = @HumanID;
                        END
                    END
                END
            END;

            IF @VectorID < 0
               AND @SpeciesTypeID IS NOT NULL
            BEGIN
                INSERT INTO @SuppressSelect
                EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tlbVector', @VectorID OUTPUT;

                INSERT INTO @SuppressSelect
                EXECUTE dbo.USP_GBL_NextNumber_GET 'Vector Surveillance Vector',
                                                   @EIDSSVectorID OUTPUT,
                                                   NULL;

                INSERT INTO dbo.tlbVector
                (
                    idfVector,
                    strVectorID,
                    idfCollectedByOffice,
                    idfCollectedByPerson,
                    datCollectionDateTime,
                    idfsVectorType,
                    idfsVectorSubType,
                    intQuantity,
                    intRowStatus,
                    AuditCreateDTM,
                    AuditCreateUser
                )
                VALUES
                (@VectorID,
                 @EIDSSVectorID,
                 @CollectedByOrganizationID,
                 @CollectedByPersonID,
                 @CollectionDate,
                 @VectorTypeID,
                 @SpeciesTypeID,
                 1  ,
                 0  ,
                 GETDATE(),
                 @AuditUserName
                );
            END;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_LAB_SAMPLE_SET @SampleID OUTPUT,
                                            @SampleTypeID,
                                            @RootSampleID,
                                            @ParentSampleID,
                                            @HumanMasterID,
                                            @HumanID,
                                            @SpeciesID,
                                            @AnimalID,
                                            @VectorID,
                                            @MonitoringSessionID,
                                            @VectorSessionID,
                                            @HumanDiseaseReportID,
                                            @VeterinaryDiseaseReportID,
                                            @CollectionDate,
                                            @CollectedByPersonID,
                                            @CollectedByOrganizationID,
                                            @SentDate,
                                            @SentToOrganizationID,
                                            @EIDSSLocalOrFieldSampleID,
                                            @EIDSSLaboratorySampleID,
                                            @SiteID,
                                            @FunctionalAreaID,
                                            @FreezerSubdivisionID,
                                            @StorageBoxPlace,
                                            @EnteredDate,
                                            @OutOfRepositoryDate,
                                            @MarkedForDispositionByPersonID,
                                            @DestructionDate,
                                            @DestructionMethodTypeID,
                                            @DestroyedByPersonID,
                                            @ReadOnlyIndicator,
                                            @AccessionDate,
                                            @AccessionConditionTypeID,
                                            @AccessionByPersonID,
                                            @SampleStatusTypeID,
                                            @PreviousSampleStatusTypeID,
                                            @AccessionComment,
                                            @Comment,
                                            @CurrentSiteID,
                                            @SampleKindTypeID,
                                            @DiseaseID,
                                            @RowStatus,
                                            @RowAction,
                                            @AuditUserName;

            IF (
                   @RowAction = 1 -- Register new sample
                   OR @RowAction = 5 -- Insert accession
               )
               AND @MonitoringSessionID IS NOT NULL
            BEGIN
                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_AS_SAMPLE_TO_DISEASE_SET @AuditUserName,
                                                          0,
                                                          @MonitoringSessionID,
                                                          @SampleID,
                                                          @DiseaseID,
                                                          @SampleTypeID,
                                                          0,
                                                          1;
            END
            ELSE IF @RowAction = 7
                    AND @MonitoringSessionID IS NOT NULL -- Transfer a sample (creates a new sample record)
            BEGIN
                DECLARE @SamplesToDiseaseRowID BIGINT;
                DECLARE @SamplesToDiseasesTemp TABLE
                (
                    MonitoringSessionToMaterialID BIGINT NOT NULL,
                    MonitoringSessionID BIGINT NULL,
                    SampleID BIGINT NOT NULL,
                    SampleTypeID BIGINT NULL,
                    DiseaseID BIGINT NOT NULL
                );

                INSERT INTO @SamplesToDiseasesTemp
                SELECT idfMonitoringSessionToMaterial,
                       idfMonitoringSession,
                       idfMaterial,
                       idfsSampleType,
                       idfsDisease
                FROM dbo.tlbMonitoringSessionToMaterial
                WHERE idfMaterial = @RootSampleID
                      AND intRowStatus = 0;

                WHILE EXISTS (SELECT * FROM @SamplesToDiseasesTemp)
                BEGIN
                    SELECT TOP 1
                        @SamplesToDiseaseRowID = MonitoringSessionToMaterialID,
                        @MonitoringSessionToMaterialID = MonitoringSessionToMaterialID,
                        @DiseaseID = DiseaseID
                    FROM @SamplesToDiseasesTemp;

                    INSERT INTO @SuppressSelect
                    EXECUTE dbo.USSP_AS_SAMPLE_TO_DISEASE_SET @AuditUserName,
                                                              @MonitoringSessionToMaterialID,
                                                              @MonitoringSessionID,
                                                              @SampleID,
                                                              @DiseaseID,
                                                              @SampleTypeID,
                                                              0,
                                                              1;

                    DELETE FROM @SamplesToDiseasesTemp
                    WHERE MonitoringSessionToMaterialID = @SamplesToDiseaseRowID;
                END;
            END

            UPDATE @TestsTemp
            SET SampleID = @SampleID
            WHERE SampleID = @RowID;

            UPDATE @TransfersTemp
            SET SampleID = @SampleID
            WHERE SampleID = @RowID;

            IF @FavoriteIndicator = 1
                SELECT @FavoritesString = REPLACE(@FavoritesString, @RowID, @SampleID);

            --POCO does not like the XML modify command; used string and replace for now.
            --SELECT @Favorites = @Favorites.modify('replace value of (/Favorites/Favorite/@SampleID[.=sql:variable("@RowID")])[1] with sql:variable("@SampleID")');
            IF @SampleID <> @RootSampleID
               AND (
                       @RowAction = 4
                       OR @RowAction = 5
                   )
            BEGIN
                DECLARE @TransferIDTemp AS BIGINT;

                SELECT @TransferIDTemp = tro.idfTransferOut
                FROM dbo.tlbTransferOutMaterial tom
                    INNER JOIN dbo.tlbTransferOUT AS tro
                        ON tro.idfTransferOut = tom.idfTransferOut
                WHERE tom.idfMaterial = @RootSampleID;

                UPDATE dbo.tlbTransferOUT
                SET idfsTransferStatus = 10001001,
                    AuditUpdateUser = @AuditUserName,
                    AuditUpdateDTM = GETDATE()
                WHERE idfTransferOut = @TransferIDTemp;
            END;

            DELETE FROM @SamplesTemp
            WHERE SampleID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @BatchTestsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = BatchTestID,
                @BatchTestID = BatchTestID,
                @TestNameTypeID = TestNameTypeID,
                @BatchStatusTypeID = BatchStatusTypeID,
                @PerformedByOrganizationID = PerformedByOrganizationID,
                @PerformedByPersonID = PerformedByPersonID,
                @ValidatedByOrganizationID = ValidatedByOrganizationID,
                @ValidatedByPersonID = ValidatedByPersonID,
                @ObservationID = ObservationID,
                @SiteID = SiteID,
                @PerformedDate = PerformedDate,
                @ValidationDate = ValidationDate,
                @EIDSSBatchTestID = EIDSSBatchTestID,
                @RowStatus = RowStatus,
                @ResultEnteredByPersonID = ResultEnteredByPersonID,
                @ResultEnteredByOrganizationID = ResultEnteredByOrganizationID,
                @TestRequested = TestRequested,
                @RowAction = RowAction
            FROM @BatchTestsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_GBL_BATCH_TEST_SET @BatchTestID OUTPUT,
                                                @TestNameTypeID,
                                                @BatchStatusTypeID,
                                                @PerformedByOrganizationID,
                                                @PerformedByPersonID,
                                                @ValidatedByOrganizationID,
                                                @ValidatedByPersonID,
                                                @ObservationID,
                                                @SiteID,
                                                @PerformedDate,
                                                @ValidationDate,
                                                @EIDSSBatchTestID,
                                                @RowStatus,
                                                @ResultEnteredByPersonID,
                                                @ResultEnteredByOrganizationID,
                                                @TestRequested,
                                                @RowAction,
                                                @AuditUserName;

            UPDATE @TestsTemp
            SET BatchTestID = @BatchTestID
            WHERE BatchTestID = @RowID;

            DELETE FROM @BatchTestsTemp
            WHERE BatchTestID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @TestsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = TestID,
                @TestID = TestID,
                @TestNameTypeID = TestNameTypeID,
                @TestCategoryTypeID = TestCategoryTypeID,
                @TestResultTypeID = TestResultTypeID,
                @TestStatusTypeID = TestStatusTypeID,
                @PreviousTestStatusTypeID = PreviousTestStatusTypeID,
                @DiseaseID = DiseaseID,
                @SampleID = SampleID,
                @BatchTestID = BatchTestID,
                @ObservationID = ObservationID,
                @TestNumber = TestNumber,
                @Note = Note,
                @RowStatus = RowStatus,
                @StartedDate = StartedDate,
                @ConcludedDate = ConcludedDate,
                @TestedByOrganizationID = TestedByOrganizationID,
                @TestedByPersonID = TestedByPersonID,
                @ResultEnteredByOrganizationID = ResultEnteredByOrganizationID,
                @ResultEnteredByPersonID = ResultEnteredByPersonID,
                @ValidatedByOrganizationID = ValidatedByOrganizationID,
                @ValidatedByPersonID = ValidatedByPersonID,
                @ReadOnlyIndicator = ReadOnlyIndicator,
                @NonLaboratoryTestIndicator = NonLaboratoryTestIndicator,
                @ExternalTestIndicator = ExternalTestIndicator,
                @PerformedByOrganizationID = PerformedByOrganizationID,
                @ReceivedDate = ReceivedDate,
                @ContactPersonName = ContactPersonName,
   				@HumanDiseaseReportID = HumanDiseaseReportID,
                @VeterinaryDiseaseReportID = VeterinaryDiseaseReportID,
                @MonitoringSessionID = MonitoringSessionID, 
                @VectorID = VectorID,
                @RowAction = RowAction
            FROM @TestsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_LAB_TEST_SET @TestID,
                                          @TestNameTypeID,
                                          @TestCategoryTypeID,
                                          @TestResultTypeID,
                                          @TestStatusTypeID,
                                          @PreviousTestStatusTypeID,
                                          @DiseaseID,
                                          @SampleID,
                                          @BatchTestID,
                                          @ObservationID,
                                          @TestNumber,
                                          @Note,
                                          @RowStatus,
                                          @StartedDate,
                                          @ConcludedDate,
                                          @TestedByOrganizationID,
                                          @TestedByPersonID,
                                          @ResultEnteredByOrganizationID,
                                          @ResultEnteredByPersonID,
                                          @ValidatedByOrganizationID,
                                          @ValidatedByPersonID,
                                          @ReadOnlyIndicator,
                                          @NonLaboratoryTestIndicator,
                                          @ExternalTestIndicator,
                                          @PerformedByOrganizationID,
                                          @ReceivedDate,
                                          @ContactPersonName,
                                          @HumanDiseaseReportID, 
                                          @VeterinaryDiseaseReportID,
                                          @MonitoringSessionID, 
                                          @VectorID, 
                                          @RowAction,
                                          @AuditUserName;

            UPDATE @TestAmendmentsTemp
            SET TestID = @TestID
            WHERE TestID = @RowID;

            DELETE FROM @TestsTemp
            WHERE TestID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @TestAmendmentsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = TestAmendmentID,
                @TestAmendmentID = TestAmendmentID,
                @TestID = TestID,
                @AmendedByOrganizationID = AmendedByOrganizationID,
                @AmendedByPersonID = AmendedByPersonID,
                @AmendmentDate = AmendmentDate,
                @OldTestResultTypeID = OldTestResultTypeID,
                @ChangedTestResultTypeID = ChangedTestResultTypeID,
                @OldNote = OldNote,
                @ChangedNote = ChangedNote,
                @ReasonForAmendment = ReasonForAmendment,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @TestAmendmentsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_GBL_TEST_AMENDMENT_SET @TestAmendmentID,
                                                    @TestID,
                                                    @AmendedByOrganizationID,
                                                    @AmendedByPersonID,
                                                    @AmendmentDate,
                                                    @OldTestResultTypeID,
                                                    @ChangedTestResultTypeID,
                                                    @OldNote,
                                                    @ChangedNote,
                                                    @ReasonForAmendment,
                                                    @RowStatus,
                                                    @RowAction,
                                                    @AuditUserName;

            DELETE FROM @TestAmendmentsTemp
            WHERE TestAmendmentID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @TransfersTemp)
        BEGIN
            SELECT TOP 1
                @RowID = TransferID,
                @TransferID = TransferID,
                @SampleID = SampleID,
                @EIDSSTransferID = EIDSSTransferID,
                @TransferStatusTypeID = TransferStatusTypeID,
                @TransferredFromOrganizationID = TransferredFromOrganizationID,
                @TransferredToOrganizationID = TransferredToOrganizationID,
                @SentByPersonID = SentByPersonID,
                @TransferDate = TransferDate,
                @Note = PurposeOfTransfer,
                @SiteID = SiteID,
                @TestRequested = TestRequested,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @TransfersTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_LAB_TRANSFER_SET @TransferID,
                                              @SampleID,
                                              @EIDSSTransferID,
                                              @TransferStatusTypeID,
                                              @TransferredFromOrganizationID,
                                              @TransferredToOrganizationID,
                                              @SentByPersonID,
                                              @TransferDate,
                                              @Note,
                                              @SiteID,
                                              @TestRequested,
                                              @RowStatus,
                                              @RowAction,
                                              @AuditUserName;

            IF @RowAction = 1
            BEGIN
                UPDATE @EventsTemp
                SET ObjectId = @TransferID
                WHERE ObjectId = @RowID;
            END;

            DELETE FROM @TransfersTemp
            WHERE TransferID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @FreezerBoxLocationAvailabilitiesTemp)
        BEGIN
            SELECT TOP 1
                @RowID = FreezerSubdivisionID,
                @FreezerSubdivisionID = FreezerSubdivisionID,
                @BoxPlaceAvailability = BoxPlaceAvailability
            FROM @FreezerBoxLocationAvailabilitiesTemp;

            UPDATE dbo.tlbFreezerSubdivision
            SET BoxPlaceAvailability = @BoxPlaceAvailability,
                AuditUpdateUser = @AuditUserName,
                AuditUpdateDTM = GETDATE()
            WHERE idfSubdivision = @FreezerSubdivisionID;

            DELETE FROM @FreezerBoxLocationAvailabilitiesTemp
            WHERE FreezerSubdivisionID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @EventsTemp)
        BEGIN
            SELECT TOP 1
                @EventId = EventId,
                @EventTypeId = EventTypeId,
                @EventUserId = UserId,
                @EventObjectId = ObjectId,
                @EventSiteId = SiteId,
                @EventDiseaseId = DiseaseId,
                @EventLocationId = LocationId,
                @EventInformationString = InformationString,
                @EventLoginSiteId = LoginSiteId
            FROM @EventsTemp;

            INSERT INTO @SuppressSelect2
            EXECUTE dbo.USP_ADMIN_EVENT_SET @EventId,
                                            @EventTypeId,
                                            @EventUserId,
                                            @EventObjectId,
                                            @EventDiseaseId,
                                            @EventSiteId,
                                            @EventInformationString,
                                            @EventLoginSiteId,
                                            @EventLocationId,
                                            @AuditUserName;

            DELETE FROM @EventsTemp
            WHERE EventId = @EventId;
        END;

        IF @Favorites IS NOT NULL
        BEGIN
            DECLARE @UserPreferenceID AS BIGINT;

            SELECT @UserPreferenceID =
            (
                SELECT UserPreferenceUID
                FROM dbo.UserPreference
                WHERE idfUserID = @UserID
                      AND ModuleConstantID = 10508006
                      AND intRowStatus = 0
            );

            IF @UserPreferenceID IS NULL
            BEGIN
                INSERT INTO @SuppressSelect
                EXECUTE dbo.USP_GBL_NEXTKEYID_GET N'UserPreference',
                                                  @UserPreferenceID OUTPUT;

                INSERT INTO dbo.UserPreference
                (
                    UserPreferenceUID,
                    idfUserID,
                    ModuleConstantID,
                    PreferenceDetail,
                    intRowStatus,
                    AuditCreateUser,
                    AuditCreateDTM
                )
                VALUES
                (@UserPreferenceID, @UserID, 10508006, @FavoritesString, 0, @AuditUserName, GETDATE());
            END
            ELSE
            BEGIN
                UPDATE dbo.UserPreference
                SET idfUserID = @UserID,
                    PreferenceDetail = @FavoritesString,
                    AuditUpdateUser = @AuditUserName,
                    AuditUpdateDTM = GETDATE()
                WHERE UserPreferenceUID = @UserPreferenceID;
            END
        END;

        IF @@TRANCOUNT > 0
            COMMIT;

        SELECT @ReturnCode AS ReturnCode,
               @ReturnMessage AS ReturnMessage,
               @KeyId AS KeyId,
               'Labratory' AS KeyName;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK;

        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_VET_DISEASE_REPORT_SET]...';


GO
-- ================================================================================================
-- Name: USP_VET_DISEASE_REPORT_SET
--
-- Description:	Inserts or updates veterinary "case" for the avian and livestock veterinary disease 
-- report use cases.
--                      
-- Revision History:
-- Name            Date       Change Detail
-- --------------- ---------- -------------------------------------------------------------------
-- Stephen Long    04/02/2018 Initial release.
-- Stephen Long    04/17/2019 Updated for API; use case updates.
-- Stephen Long    04/23/2019 Added updates for herd master and species master if new ones are 
--                            added to the farm during disease report creation.
-- Stephen Long    04/29/2019 Added related to veterinary disease report fields for use case VUC11 
--                            and VUC12.
-- Stephen Long    05/26/2019 Made corrections to farm copy observation ID and species table 
--                            observation ID for flexible form saving.
-- Stephen Long    06/01/2019 Made corrections to JSON for herds and species parameters.
-- Stephen Long    06/10/2019 Added farm owner ID output parameter to USSP_VET_FARM_COPY call.
-- Stephen Long    06/19/2019 Added diagnosis date and tests conducted indicator parameters.
-- Stephen Long    06/22/2019 Added read only indicator parameter for sample set - sample import.
-- Stephen Long    06/24/2019 Update to match new parameter for USSP_VET_FARM_COPY call.
-- Stephen Long    07/26/2019 Corrected farm counts (total, sick and dead).
-- Stephen Long    09/14/2019 Corrected root sample ID/parent sample ID on sample update call.
-- Stephen Long    10/01/2019 Added monitoring session ID parameter to farm copy for the sceanrio 
--                            where a disease report is tied to a monitoring session.
-- Stephen Long    12/23/2019 Added farm latitude and longitude parameters.
-- Stephen Long    02/05/2020 Updated sample set to account for the current site ID when samples 
--                            are imported from the laboratory module.
-- Stephen Long    02/16/2020 Add logic to copy activity parameters, and add observation record for 
--                            connected disease reports.
-- Stephen Long    04/21/2020 Added additional check on clinical signs when related disease report.
-- Stephen Long    04/24/2020 Added clinical signs indicator for the animal set call.
-- Stephen Long    08/12/2020 Corrected status on report log from status type to log status type.
-- Stephen Long    08/25/2020 Added observation ID set for the update of the vet case table.
-- Stephen Long    09/18/2020 Check for null related to observation ID
-- Stephen Long    12/20/2020 Updated USSP_GBL_TEST_SET call with four new parameters.
-- Stephen Long    11/29/2021 Removed language ID and added audit user name to USSP calls.
-- Stephen Long    01/19/2022 Added missing audit user name on ussp calls, and added events.
-- Stephen Long    01/22/2022 Made disease ID nullable on SamplesTemp table variable.
-- Stephen Long    01/24/2022 Added link local or field sample ID to report ID parameter.
-- Stephen Long    01/28/2022 Removed herd actual and species actual, no longer used.
-- Stephen Long    02/18/2022 Added lab module source indicator check on sample set.
-- Stephen Long    03/08/2022 Set notification object ID after saving disease report.
-- Stephen Long    04/12/2022 Added outbreak veterinary case parameters and logic.
-- Stephen Long    04/27/2022 Added additional outbreak case parameters: status type and case 
--                            questionnaire observation ID.
-- Stephen Long    05/09/2022 Bug fix on item 4199 - local/field sample ID iteration.
-- Stephen Long    06/16/2022 Added status type ID to species set.
-- Stephen Long    07/06/2022 Updates for site alerts to call new stored procedure.
-- Stephen Long    09/15/2022 Added note parameter to event set call.  Temporarily removed!
-- Stephen Long    12/07/2022 Added data audit logic for SAUC30 and 31.
-- Stephen Long    12/09/2022 Changed object type ID reference for veterinary disease report, 
--                            and added EIDSS object ID to samples, tests and test 
--                            interpretations calls.
-- Stephen Long    12/14/2022 Fix to observation ID when adding a connected disease report; site 
--                            identifier was not picked up from the original record.
-- Stephen Long    12/17/2022 Fix to importing sample when the disease report has not been saved.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_VET_DISEASE_REPORT_SET]
(
    @DiseaseReportID BIGINT,
    @EIDSSReportID NVARCHAR(200) = NULL,
    @FarmID BIGINT,
    @FarmMasterID BIGINT,
    @FarmOwnerID BIGINT = NULL,
    @MonitoringSessionID BIGINT = NULL,
    @OutbreakID BIGINT = NULL,
    @RelatedToDiseaseReportID BIGINT = NULL,
    @EIDSSFieldAccessionID NVARCHAR(200) = NULL,
    @DiseaseID BIGINT,
    @EnteredByPersonID BIGINT = NULL,
    @ReportedByOrganizationID BIGINT = NULL,
    @ReportedByPersonID BIGINT = NULL,
    @InvestigatedByOrganizationID BIGINT = NULL,
    @InvestigatedByPersonID BIGINT = NULL,
    @ReceivedByOrganizationID BIGINT = NULL,
    @ReceivedByPersonID BIGINT = NULL,
    @SiteID BIGINT,
    @DiagnosisDate DATETIME = NULL,
    @EnteredDate DATETIME = NULL,
    @ReportDate DATETIME = NULL,
    @AssignedDate DATETIME = NULL,
    @InvestigationDate DATETIME = NULL,
    @RowStatus INT,
    @ReportTypeID BIGINT = NULL,
    @ClassificationTypeID BIGINT = NULL,
    @StatusTypeID BIGINT = NULL,
    @ReportCategoryTypeID BIGINT,
    @FarmTotalAnimalQuantity INT = NULL,
    @FarmSickAnimalQuantity INT = NULL,
    @FarmDeadAnimalQuantity INT = NULL,
    @FarmLatitude FLOAT = NULL,
    @FarmLongitude FLOAT = NULL,
    @FarmEpidemiologicalObservationID BIGINT = NULL,
    @ControlMeasuresObservationID BIGINT = NULL,
    @TestsConductedIndicator BIGINT = NULL,
    @AuditUserName NVARCHAR(200),
    @FlocksOrHerds NVARCHAR(MAX) = NULL,
    @Species NVARCHAR(MAX) = NULL,
    @Animals NVARCHAR(MAX) = NULL,
    @Vaccinations NVARCHAR(MAX) = NULL,
    @Samples NVARCHAR(MAX) = NULL,
    @PensideTests NVARCHAR(MAX) = NULL,
    @LaboratoryTests NVARCHAR(MAX) = NULL,
    @LaboratoryTestInterpretations NVARCHAR(MAX) = NULL,
    @CaseLogs NVARCHAR(MAX) = NULL,
    @ClinicalInformation NVARCHAR(MAX) = NULL,
    @Contacts NVARCHAR(MAX) = NULL,
    @CaseMonitorings NVARCHAR(MAX) = NULL,
    @Events NVARCHAR(MAX) = NULL,
    @UserID BIGINT,
    @LinkLocalOrFieldSampleIDToReportID BIT = 0,
    @OutbreakCaseIndicator BIT = 0,
    @OutbreakCaseReportUID BIGINT = NULL,
    @OutbreakCaseStatusTypeID BIGINT = NULL,
    @OutbreakCaseQuestionnaireObservationID BIGINT = NULL,
    @PrimaryCaseIndicator BIT = 0
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        DECLARE @ReturnCode INT
            = 0,
                @ReturnMessage NVARCHAR(MAX) = N'SUCCESS',
                @RowAction INT = NULL,
                @RowID BIGINT,
                @Iteration INT = 0,
                @NewFarmOwnerID BIGINT = NULL,
                @FlockOrHerdID BIGINT = NULL,
                @FlockOrHerdMasterID BIGINT = NULL,
                @EIDSSFlockOrHerdID NVARCHAR(200) = NULL,
                @SickAnimalQuantity INT = NULL,
                @TotalAnimalQuantity INT = NULL,
                @DeadAnimalQuantity INT = NULL,
                @Comments NVARCHAR(2000) = NULL,
                @SpeciesID BIGINT = NULL,
                @SpeciesMasterID BIGINT = NULL,
                @SpeciesTypeID BIGINT = NULL,
                @StartOfSignsDate DATETIME = NULL,
                @AverageAge NVARCHAR(200) = NULL,
                @ObservationID BIGINT = NULL,
                @OutbreakSpeciesCaseStatusTypeID BIGINT = NULL,
                @AnimalID BIGINT = NULL,
                @SexTypeID BIGINT = NULL,
                @ConditionTypeID BIGINT = NULL,
                @AgeTypeID BIGINT = NULL,
                @EIDSSAnimalID NVARCHAR(200) = NULL,
                @AnimalName NVARCHAR(200) = NULL,
                @Color NVARCHAR(200) = NULL,
                @AnimalDescription NVARCHAR(200) = NULL,
                @ClinicalSignsIndicator BIGINT = NULL,
                @VaccinationID BIGINT,
                @VaccinationTypeID BIGINT = NULL,
                @RouteTypeID BIGINT = NULL,
                @VaccinationDate DATETIME = NULL,
                @Manufacturer NVARCHAR(200) = NULL,
                @LotNumber NVARCHAR(200) = NULL,
                @NumberVaccinated INT = NULL,
                @SampleID BIGINT,
                @SampleTypeID BIGINT = NULL,
                @RootSampleID BIGINT = NULL,
                @ParentSampleID BIGINT = NULL,
                @CollectedByPersonID BIGINT = NULL,
                @CollectedByOrganizationID BIGINT = NULL,
                @CollectionDate DATETIME = NULL,
                @SentDate DATETIME = NULL,
                @EIDSSLocalOrFieldSampleID NVARCHAR(200) = NULL,
                @SampleStatusTypeID BIGINT = NULL,
                @EIDSSLaboratorySampleID NVARCHAR(200) = NULL,
                @SentToOrganizationID BIGINT = NULL,
                @ReadOnlyIndicator BIT = NULL,
                @CurrentSiteID BIGINT = NULL,
                @BirdStatusTypeID BIGINT = NULL,
                @PensideTestID BIGINT = NULL,
                @PensideTestResultTypeID BIGINT = NULL,
                @PensideTestNameTypeID BIGINT = NULL,
                @TestedByPersonID BIGINT = NULL,
                @TestedByOrganizationID BIGINT = NULL,
                @TestDate DATETIME = NULL,
                @PensideTestCategoryTypeID BIGINT = NULL,
                @TestID BIGINT = NULL,
                @TestNameTypeID BIGINT = NULL,
                @TestCategoryTypeID BIGINT = NULL,
                @TestResultTypeID BIGINT = NULL,
                @TestStatusTypeID BIGINT,
                @BatchTestID BIGINT = NULL,
                @StartedDate DATETIME = NULL,
                @ResultDate DATETIME = NULL,
                @ResultEnteredByOrganizationID BIGINT = NULL,
                @ResultEnteredByPersonID BIGINT = NULL,
                @ValidatedByOrganizationID BIGINT = NULL,
                @ValidatedByPersonID BIGINT = NULL,
                @NonLaboratoryTestIndicator BIT,
                @ExternalTestIndicator BIT = NULL,
                @PerformedByOrganizationID BIGINT = NULL,
                @ReceivedDate DATETIME = NULL,
                @ContactPersonName NVARCHAR(200) = NULL,
                @TestDiseaseReportID BIGINT = NULL,
                @TestInterpretationID BIGINT,
                @InterpretedStatusTypeID BIGINT = NULL,
                @InterpretedByOrganizationID BIGINT = NULL,
                @InterpretedByPersonID BIGINT = NULL,
                @TestingInterpretations BIGINT,
                @ValidatedStatusIndicator BIT = NULL,
                @ReportSessionCreatedIndicator BIT = NULL,
                @ValidatedComment NVARCHAR(200) = NULL,
                @InterpretedComment NVARCHAR(200) = NULL,
                @ValidatedDate DATETIME = NULL,
                @InterpretedDate DATETIME = NULL,
                @CaseLogID BIGINT,
                @LogStatusTypeID BIGINT = NULL,
                @LoggedByPersonID BIGINT = NULL,
                @LogDate DATETIME = NULL,
                @ActionRequired NVARCHAR(200) = NULL,
                @VeterinaryDiseaseReportRelationshipID BIGINT = NULL,
                @RelatedToSpeciesID BIGINT = NULL,
                @RelatedToAnimalID BIGINT = NULL,
                @RelatedToObservationID BIGINT = NULL,
                @FormTemplateID BIGINT,
                @ObservationSiteID BIGINT,
                @ActivityID BIGINT = NULL,
                @ActivityIDNew BIGINT = NULL,
                @ParameterID BIGINT = NULL,
                @ParameterValue SQL_VARIANT = NULL,
                @ParameterRowID BIGINT = NULL,
                @EventId BIGINT,
                @EventTypeId BIGINT = NULL,
                @EventSiteId BIGINT = NULL,
                @EventObjectId BIGINT = NULL,
                @EventUserId BIGINT = NULL,
                @EventDiseaseId BIGINT = NULL,
                @EventLocationId BIGINT = NULL,
                @EventInformationString NVARCHAR(MAX) = NULL,
                @EventNote NVARCHAR(MAX) = NULL,
                @EventLoginSiteId BIGINT = NULL,
                                                                                           -- Data audit
                @AuditUserID BIGINT = NULL,
                @AuditSiteID BIGINT = NULL,
                @DataAuditEventID BIGINT = NULL,
                @DataAuditEventTypeID BIGINT = NULL,
                @ObjectTypeID BIGINT = 10017085,                                           -- Veterinary disease report
                @ObjectID BIGINT = @DiseaseReportID,
                @ObjectTableID BIGINT = 75800000000,                                       -- tlbVetCase
                @ObjectVeterinaryDiseaseReportRelationshipTableID BIGINT = 53577790000004, -- VetDiseaseReportRelationship
                @ObjectObservationTableID BIGINT = 75640000000,                            -- tlbObservation
                @ObjectActivityParametersTableID BIGINT = 75410000000,                     -- tlbActivityParameters
                                                                                           -- End data audit
                @LabModuleSourceIndicator INT = 0,
                @SampleDiseaseReportID BIGINT = NULL,
                @EIDSSCaseID NVARCHAR(200) = NULL;
        DECLARE @SuppressSelect TABLE
        (
            ReturnCode INT,
            ReturnMessage NVARCHAR(MAX)
        );
        DECLARE @FlocksOrHerdsTemp TABLE
        (
            FlockOrHerdID BIGINT NOT NULL,
            FarmID BIGINT NULL,
            FlockOrHerdMasterID BIGINT NULL,
            EIDSSFlockOrHerdID NVARCHAR(200) NULL,
            SickAnimalQuantity INT NULL,
            TotalAnimalQuantity INT NULL,
            DeadAnimalQuantity INT NULL,
            RowStatus INT NULL,
            RowAction INT NULL
        );
        DECLARE @SpeciesTemp TABLE
        (
            SpeciesID BIGINT NOT NULL,
            SpeciesMasterID BIGINT NULL,
            FlockOrHerdID BIGINT NOT NULL,
            SpeciesTypeID BIGINT NOT NULL,
            SickAnimalQuantity INT NULL,
            TotalAnimalQuantity INT NULL,
            DeadAnimalQuantity INT NULL,
            StartOfSignsDate DATETIME NULL,
            AverageAge NVARCHAR(200) NULL,
            ObservationID BIGINT NULL,
            Comments NVARCHAR(2000) NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL,
            RelatedToSpeciesID BIGINT NULL,
            RelatedToObservationID BIGINT NULL,
            OutbreakCaseStatusTypeID BIGINT NULL
        );
        DECLARE @AnimalsTemp TABLE
        (
            AnimalID BIGINT NOT NULL,
            SexTypeID BIGINT NULL,
            ConditionTypeID BIGINT NULL,
            AgeTypeID BIGINT NULL,
            SpeciesID BIGINT NULL,
            ObservationID BIGINT NULL,
            EIDSSAnimalID NVARCHAR(200) NULL,
            AnimalName NVARCHAR(200) NULL,
            Color NVARCHAR(200) NULL,
            AnimalDescription NVARCHAR(200) NULL,
            ClinicalSignsIndicator BIGINT NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL,
            RelatedToAnimalID BIGINT NULL,
            RelatedToObservationID BIGINT NULL
        );
        DECLARE @VaccinationsTemp TABLE
        (
            VaccinationID BIGINT NOT NULL,
            SpeciesID BIGINT NULL,
            VaccinationTypeID BIGINT NULL,
            RouteTypeID BIGINT NULL,
            DiseaseID BIGINT NULL,
            VaccinationDate DATETIME NULL,
            Manufacturer NVARCHAR(200) NULL,
            LotNumber NVARCHAR(200) NULL,
            NumberVaccinated INT NULL,
            Comments NVARCHAR(2000) NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @SamplesTemp TABLE
        (
            SampleID BIGINT NOT NULL,
            SampleTypeID BIGINT NULL,
            RootSampleID BIGINT NULL,
            ParentSampleID BIGINT NULL,
            SpeciesID BIGINT NULL,
            AnimalID BIGINT NULL,
            VeterinaryDiseaseReportID BIGINT NULL,
            MonitoringSessionID BIGINT NULL,
            SampleStatusTypeID BIGINT NULL,
            CollectionDate DATETIME NULL,
            CollectedByOrganizationID BIGINT NULL,
            CollectedByPersonID BIGINT NULL,
            SentDate DATETIME NULL,
            SentToOrganizationID BIGINT NULL,
            EIDSSLocalOrFieldSampleID NVARCHAR(200) NULL,
            Comments NVARCHAR(200) NULL,
            SiteID BIGINT NOT NULL,
            CurrentSiteID BIGINT NULL,
            EnteredDate DATETIME NULL,
            DiseaseID BIGINT NULL,
            BirdStatusTypeID BIGINT NULL,
            ReadOnlyIndicator BIT NULL,
            LabModuleSourceIndicator INT NOT NULL,
            FarmID BIGINT NULL,
            FarmOwnerID BIGINT NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @PensideTestsTemp TABLE
        (
            PensideTestID BIGINT NOT NULL,
            SampleID BIGINT NOT NULL,
            PensideTestNameTypeID BIGINT NULL,
            PensideTestResultTypeID BIGINT NULL,
            PensideTestCategoryTypeID BIGINT NULL,
            TestedByPersonID BIGINT NULL,
            TestedByOrganizationID BIGINT NULL,
            DiseaseID BIGINT NULL,
            TestDate DATETIME NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @LaboratoryTestsTemp TABLE
        (
            TestID BIGINT NOT NULL,
            TestNameTypeID BIGINT NULL,
            TestCategoryTypeID BIGINT NULL,
            TestResultTypeID BIGINT NULL,
            TestStatusTypeID BIGINT NOT NULL,
            DiseaseID BIGINT NOT NULL,
            SampleID BIGINT NULL,
            BatchTestID BIGINT NULL,
            ObservationID BIGINT NULL,
            TestNumber INT NULL,
            Comments NVARCHAR NULL,
            StartedDate DATETIME NULL,
            ResultDate DATETIME NULL,
            TestedByOrganizationID BIGINT NULL,
            TestedByPersonID BIGINT NULL,
            ResultEnteredByOrganizationID BIGINT NULL,
            ResultEnteredByPersonID BIGINT NULL,
            ValidatedByOrganizationID BIGINT NULL,
            ValidatedByPersonID BIGINT NULL,
            ReadOnlyIndicator BIT NOT NULL,
            NonLaboratoryTestIndicator BIT NOT NULL,
            ExternalTestIndicator BIT NULL,
            PerformedByOrganizationID BIGINT NULL,
            ReceivedDate DATETIME NULL,
            ContactPersonName NVARCHAR(200) NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @LaboratoryTestInterpretationsTemp TABLE
        (
            TestInterpretationID BIGINT NOT NULL,
            DiseaseID BIGINT NULL,
            InterpretedStatusTypeID BIGINT NULL,
            ValidatedByOrganizationID BIGINT NULL,
            ValidatedByPersonID BIGINT NULL,
            InterpretedByOrganizationID BIGINT NULL,
            InterpretedByPersonID BIGINT NULL,
            TestID BIGINT NOT NULL,
            ValidatedStatusIndicator BIT NULL,
            ReportSessionCreatedIndicator BIT NULL,
            ValidatedComment NVARCHAR(200) NULL,
            InterpretedComment NVARCHAR(200) NULL,
            ValidatedDate DATETIME NULL,
            InterpretedDate DATETIME NULL,
            ReadOnlyIndicator BIT NOT NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @CaseLogsTemp TABLE
        (
            CaseLogID BIGINT NOT NULL,
            LogStatusTypeID BIGINT NULL,
            LoggedByPersonID BIGINT NULL,
            LogDate DATETIME NULL,
            ActionRequired NVARCHAR(200) NULL,
            Comments NVARCHAR(1000) NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @ClinicalInformationTemp TABLE
        (
            langId NVARCHAR(200) NULL,
            HerdID BIGINT NOT NULL,
            Herd NVARCHAR(200) NULL,
            ClinicalSignsIndicator BIGINT NOT NULL,
            SpeciesTypeID BIGINT NULL,
            SpeciesTypeName NVARCHAR(200) NULL,
            StatusTypeID BIGINT NULL,
            InvestigationPerformedTypeID BIGINT NULL
        );
        DECLARE @ActivityParametersTemp TABLE
        (
            ActivityID BIGINT NOT NULL,
            ParameterID BIGINT NOT NULL,
            ParameterValue SQL_VARIANT NULL,
            ParameterRowID BIGINT NOT NULL
        );
        DECLARE @EventsTemp TABLE
        (
            EventId BIGINT NOT NULL,
            EventTypeId BIGINT NULL,
            UserId BIGINT NULL,
            SiteId BIGINT NULL,
            LoginSiteId BIGINT NULL,
            ObjectId BIGINT NULL,
            DiseaseId BIGINT NULL,
            LocationId BIGINT NULL,
            InformationString NVARCHAR(MAX) NULL,
            Note NVARCHAR(MAX) NULL
        );
        DECLARE @VeterinaryDiseaseReportAfterEdit TABLE
        (
            DiseaseReportID BIGINT,
            FarmID BIGINT,
            DiseaseID BIGINT,
            PersonEnteredByID BIGINT,
            PersonReportedByID BIGINT,
            PersonInvestigatedByID BIGINT,
            ObservationID BIGINT,
            ReportDate DATETIME,
            AssignedDate DATETIME,
            InvestigationDate DATETIME,
            FinalDiagnosisDate DATETIME,
            FieldAccessionID NVARCHAR(200),
            YNTestsConductedTypeID BIGINT,
            ReportedByOfficeID BIGINT,
            InvestigatedByOfficeID BIGINT,
            CaseReportTypeID BIGINT,
            CaseClassificationTypeID BIGINT,
            OutbreakID BIGINT,
            EnteredDate DATETIME,
            EIDSSReportID NVARCHAR(200),
            CaseProgressStatusTypeID BIGINT,
            ParentMonitoringSessionID BIGINT,
            CaseTypeID BIGINT,
            ReceivedByOfficeID BIGINT,
            ReceivedByPersonID BIGINT
        );
        DECLARE @VeterinaryDiseaseReportBeforeEdit TABLE
        (
            DiseaseReportID BIGINT,
            FarmID BIGINT,
            DiseaseID BIGINT,
            PersonEnteredByID BIGINT,
            PersonReportedByID BIGINT,
            PersonInvestigatedByID BIGINT,
            ObservationID BIGINT,
            ReportDate DATETIME,
            AssignedDate DATETIME,
            InvestigationDate DATETIME,
            FinalDiagnosisDate DATETIME,
            FieldAccessionID NVARCHAR(200),
            YNTestsConductedTypeID BIGINT,
            ReportedByOfficeID BIGINT,
            InvestigatedByOfficeID BIGINT,
            CaseReportTypeID BIGINT,
            CaseClassificationTypeID BIGINT,
            OutbreakID BIGINT,
            EnteredDate DATETIME,
            EIDSSReportID NVARCHAR(200),
            CaseProgressStatusTypeID BIGINT,
            ParentMonitoringSessionID BIGINT,
            CaseTypeID BIGINT,
            ReceivedByOfficeID BIGINT,
            ReceivedByPersonID BIGINT
        );

        BEGIN TRANSACTION;

        SET @AuditUserName = ISNULL(@AuditUserName, '');

        -- Data audit
        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = userInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo;
        -- End data audit

        -- Predetermine the outbreak report ID for the upcoming section
        SELECT @OutbreakCaseReportUID = OutbreakCaseReportUID
        FROM dbo.OutbreakCaseReport
        WHERE idfVetCase = @DiseaseReportID;

        INSERT INTO @FlocksOrHerdsTemp
        SELECT *
        FROM
            OPENJSON(@FlocksOrHerds)
            WITH
            (
                FlockOrHerdID BIGINT,
                FarmID BIGINT,
                FlockOrHerdMasterID BIGINT,
                EIDSSFlockOrHerdID NVARCHAR(200),
                SickAnimalQuantity INT,
                TotalAnimalQuantity INT,
                DeadAnimalQuantity INT,
                RowStatus INT,
                RowAction INT
            );

        INSERT INTO @SpeciesTemp
        SELECT *
        FROM
            OPENJSON(@Species)
            WITH
            (
                SpeciesID BIGINT,
                SpeciesMasterID BIGINT,
                FlockOrHerdID BIGINT,
                SpeciesTypeID BIGINT,
                SickAnimalQuantity INT,
                TotalAnimalQuantity INT,
                DeadAnimalQuantity INT,
                StartOfSignsDate DATETIME,
                AverageAge NVARCHAR(200),
                ObservationID BIGINT,
                Comments NVARCHAR(2000),
                RowStatus INT,
                RowAction INT,
                RelatedToSpeciesID BIGINT,
                RelatedToObservationID BIGINT,
                OutbreakCaseStatusTypeID BIGINT
            );

        INSERT INTO @AnimalsTemp
        SELECT *
        FROM
            OPENJSON(@Animals)
            WITH
            (
                AnimalID BIGINT,
                SexTypeID BIGINT,
                ConditionTypeID BIGINT,
                AgeTypeID BIGINT,
                SpeciesID BIGINT,
                ObservationID BIGINT,
                EIDSSAnimalID NVARCHAR(200),
                AnimalName NVARCHAR(200),
                Color NVARCHAR(200),
                AnimalDescription NVARCHAR(200),
                ClinicalSignsIndicator BIGINT,
                RowStatus INT,
                RowAction INT,
                RelatedToAnimalID BIGINT,
                RelatedToObservationID BIGINT
            );

        INSERT INTO @VaccinationsTemp
        SELECT *
        FROM
            OPENJSON(@Vaccinations)
            WITH
            (
                VaccinationID BIGINT,
                SpeciesID BIGINT,
                VaccinationTypeID BIGINT,
                RouteTypeID BIGINT,
                DiseaseID BIGINT,
                VaccinationDate DATETIME2,
                Manufacturer NVARCHAR(200),
                LotNumber NVARCHAR(200),
                NumberVaccinated INT,
                Comments NVARCHAR(2000),
                RowStatus INT,
                RowAction INT
            );

        INSERT INTO @SamplesTemp
        SELECT *
        FROM
            OPENJSON(@Samples)
            WITH
            (
                SampleID BIGINT,
                SampleTypeID BIGINT,
                RootSampleID BIGINT,
                ParentSampleID BIGINT,
                SpeciesID BIGINT,
                AnimalID BIGINT,
                VeterinaryDiseaseReportID BIGINT,
                MonitoringSessionID BIGINT,
                SampleStatusTypeID BIGINT,
                CollectionDate DATETIME2,
                CollectedByOrganizationID BIGINT,
                CollectedByPersonID BIGINT,
                SentDate DATETIME2,
                SentToOrganizationID BIGINT,
                EIDSSLocalOrFieldSampleID NVARCHAR(200),
                Comments NVARCHAR(200),
                SiteID BIGINT,
                CurrentSiteID BIGINT,
                EnteredDate DATETIME2,
                DiseaseID BIGINT,
                BirdStatusTypeID BIGINT,
                ReadOnlyIndicator BIT,
                LabModuleSourceIndicator INT,
                FarmID BIGINT,
                FarmOwnerID BIGINT,
                RowStatus INT,
                RowAction INT
            );

        SET @Iteration =
        (
            SELECT COUNT(*) FROM dbo.tlbMaterial WHERE idfVetCase = @DiseaseReportID
        );

        INSERT INTO @PensideTestsTemp
        SELECT *
        FROM
            OPENJSON(@PensideTests)
            WITH
            (
                PensideTestID BIGINT,
                SampleID BIGINT,
                PensideTestNameTypeID BIGINT,
                PensideTestResultTypeID BIGINT,
                PensideTestCategoryTypeID BIGINT,
                TestedByPersonID BIGINT,
                TestedByOrganizationID BIGINT,
                DiseaseID BIGINT,
                TestDate DATETIME2,
                RowStatus INT,
                RowAction INT
            );

        INSERT INTO @LaboratoryTestsTemp
        SELECT *
        FROM
            OPENJSON(@LaboratoryTests)
            WITH
            (
                TestID BIGINT,
                TestNameTypeID BIGINT,
                TestCategoryTypeID BIGINT,
                TestResultTypeID BIGINT,
                TestStatusTypeID BIGINT,
                DiseaseID BIGINT,
                SampleID BIGINT,
                BatchTestID BIGINT,
                ObservationID BIGINT,
                TestNumber INT,
                Comments NVARCHAR(500),
                StartedDate DATETIME2,
                ResultDate DATETIME2,
                TestedByOrganizationID BIGINT,
                TestedByPersonID BIGINT,
                ResultEnteredByOrganizationID BIGINT,
                ResultEnteredByPersonID BIGINT,
                ValidatedByOrganizationID BIGINT,
                ValidatedByPersonID BIGINT,
                ReadOnlyIndicator BIT,
                NonLaboratoryTestIndicator BIT,
                ExternalTestIndicator BIT,
                PerformedByOrganizationID BIGINT,
                ReceivedDate DATETIME2,
                ContactPersonName NVARCHAR(200),
                RowStatus INT,
                RowAction INT
            );

        INSERT INTO @LaboratoryTestInterpretationsTemp
        SELECT *
        FROM
            OPENJSON(@LaboratoryTestInterpretations)
            WITH
            (
                TestInterpretationID BIGINT,
                DiseaseID BIGINT,
                InterpretedStatusTypeID BIGINT,
                ValidatedByOrganizationID BIGINT,
                ValidatedByPersonID BIGINT,
                InterpretedByOrganizationID BIGINT,
                InterpretedByPersonID BIGINT,
                TestID BIGINT,
                ValidatedStatusIndicator BIT,
                ReportSessionCreatedIndicator BIT,
                ValidatedComment NVARCHAR(200),
                InterpretedComment NVARCHAR(200),
                ValidatedDate DATETIME2,
                InterpretedDate DATETIME2,
                ReadOnlyIndicator BIT,
                RowStatus INT,
                RowAction INT
            );

        INSERT INTO @CaseLogsTemp
        SELECT *
        FROM
            OPENJSON(@CaseLogs)
            WITH
            (
                CaseLogID BIGINT,
                LogStatusTypeID BIGINT,
                LoggedByPersonID BIGINT,
                LogDate DATETIME2,
                ActionRequired NVARCHAR(200),
                Comments NVARCHAR(1000),
                RowStatus INT,
                RowAction INT
            );

        INSERT INTO @ClinicalInformationTemp
        SELECT *
        FROM
            OPENJSON(@ClinicalInformation)
            WITH
            (
                langId NVARCHAR(200),
                HerdID BIGINT,
                Herd NVARCHAR(200),
                ClinicalSignsTypeID BIGINT,
                SpeciesTypeID BIGINT,
                SpeciesTypeName NVARCHAR(200),
                StatusTypeID BIGINT,
                InvestigationPerformedTypeID BIGINT
            );

        INSERT INTO @EventsTemp
        SELECT *
        FROM
            OPENJSON(@Events)
            WITH
            (
                EventId BIGINT,
                EventTypeId BIGINT,
                UserId BIGINT,
                SiteId BIGINT,
                LoginSiteId BIGINT,
                ObjectId BIGINT,
                DiseaseId BIGINT,
                LocationId BIGINT,
                InformationString NVARCHAR(MAX),
                Note NVARCHAR(MAX)
            );

        IF NOT EXISTS
        (
            SELECT *
            FROM dbo.tlbVetCase
            WHERE idfVetCase = @DiseaseReportID
                  AND intRowStatus = 0
        )
        BEGIN
            -- Get next key value
            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tlbVetCase', @DiseaseReportID OUTPUT;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_GBL_NextNumber_GET 'Vet Disease Report',
                                               @EIDSSReportID OUTPUT,
                                               NULL;

            -- Data audit
            SET @DataAuditEventTypeID = 10016001; -- Data audit create event type

            INSERT INTO @SuppressSelect
            EXEC dbo.USSP_GBL_DataAuditEvent_GET @AuditUserID,
                                                 @AuditSiteID,
                                                 @DataAuditEventTypeID,
                                                 @ObjectTypeID,
                                                 @DiseaseReportID,
                                                 @ObjectTableID,
                                                 @DataAuditEventID OUTPUT;
            -- End data audit

            IF @ReportCategoryTypeID = 10012004 --Avian
            BEGIN
                UPDATE dbo.tlbFarmActual
                SET intAvianTotalAnimalQty = @FarmTotalAnimalQuantity,
                    intAvianSickAnimalQty = @FarmSickAnimalQuantity,
                    intAvianDeadAnimalQty = @FarmDeadAnimalQuantity,
                    AuditUpdateUser = @AuditUserName
                WHERE idfFarmActual = @FarmMasterID;

                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_VET_COPY_FARM_SET @AuditUserName,
                                                   @DataAuditEventID,
                                                   @EIDSSReportID,
                                                   @FarmMasterID,
                                                   @FarmTotalAnimalQuantity,
                                                   @FarmSickAnimalQuantity,
                                                   @FarmDeadAnimalQuantity,
                                                   NULL,
                                                   NULL,
                                                   NULL,
                                                   @FarmLatitude,
                                                   @FarmLongitude,
                                                   NULL,
                                                   @FarmEpidemiologicalObservationID,
                                                   @FarmOwnerID,
                                                   @FarmID OUTPUT,
                                                   @NewFarmOwnerID OUTPUT;

                IF @NewFarmOwnerID IS NOT NULL
                BEGIN
                    SET @FarmOwnerID = @NewFarmOwnerID;
                END;
            END
            ELSE --Livestock
            BEGIN
                UPDATE dbo.tlbFarmActual
                SET intLivestockTotalAnimalQty = @FarmTotalAnimalQuantity,
                    intLivestockSickAnimalQty = @FarmSickAnimalQuantity,
                    intLivestockDeadAnimalQty = @FarmDeadAnimalQuantity,
                    AuditUpdateUser = @AuditUserName
                WHERE idfFarmActual = @FarmMasterID;

                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_VET_COPY_FARM_SET @AuditUserName,
                                                   @DataAuditEventID,
                                                   @EIDSSReportID,
                                                   @FarmMasterID,
                                                   NULL,
                                                   NULL,
                                                   NULL,
                                                   @FarmTotalAnimalQuantity,
                                                   @FarmSickAnimalQuantity,
                                                   @FarmDeadAnimalQuantity,
                                                   @FarmLatitude,
                                                   @FarmLongitude,
                                                   NULL,
                                                   @FarmEpidemiologicalObservationID,
                                                   @FarmOwnerID,
                                                   @FarmID OUTPUT,
                                                   @NewFarmOwnerID OUTPUT;

                IF @NewFarmOwnerID IS NOT NULL
                BEGIN
                    SET @FarmOwnerID = @NewFarmOwnerID;
                END;
            END

            INSERT INTO dbo.tlbVetCase
            (
                idfVetCase,
                idfFarm,
                idfsFinalDiagnosis,
                idfPersonEnteredBy,
                idfPersonReportedBy,
                idfPersonInvestigatedBy,
                idfObservation,
                idfsSite,
                datReportDate,
                datAssignedDate,
                datInvestigationDate,
                datFinalDiagnosisDate,
                strTestNotes,
                strSummaryNotes,
                strClinicalNotes,
                strFieldAccessionID,
                idfsYNTestsConducted,
                intRowStatus,
                idfReportedByOffice,
                idfInvestigatedByOffice,
                idfsCaseReportType,
                strDefaultDisplayDiagnosis,
                idfsCaseClassification,
                idfOutbreak,
                datEnteredDate,
                strCaseID,
                idfsCaseProgressStatus,
                strSampleNotes,
                datModificationForArchiveDate,
                idfParentMonitoringSession,
                idfsCaseType,
                idfReceivedByOffice,
                idfReceivedByPerson,
                AuditCreateUser,
                SourceSystemNameID,
                SourceSystemKeyValue
            )
            VALUES
            (@DiseaseReportID,
             @FarmID,
             @DiseaseID,
             @EnteredByPersonID,
             @ReportedByPersonID,
             @InvestigatedByPersonID,
             @ControlMeasuresObservationID,
             @SiteID,
             @ReportDate,
             @AssignedDate,
             @InvestigationDate,
             @DiagnosisDate,
             NULL,
             NULL,
             NULL,
             @EIDSSFieldAccessionID,
             @TestsConductedIndicator,
             @RowStatus,
             @ReportedByOrganizationID,
             @InvestigatedByOrganizationID,
             @ReportTypeID,
             NULL,
             @ClassificationTypeID,
             @OutbreakID,
             @EnteredDate,
             @EIDSSReportID,
             @StatusTypeID,
             NULL,
             NULL,
             @MonitoringSessionID,
             @ReportCategoryTypeID,
             @ReceivedByOrganizationID,
             @ReceivedByPersonID,
             @AuditUserName,
             10519001,
             '[{"idfVetCase":' + CAST(@DiseaseReportID AS NVARCHAR(300)) + '}]'
            );

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailCreate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser,
                strObject
            )
            VALUES
            (@DataAuditEventID,
             @ObjectTableID,
             @DiseaseReportID,
             10519001,
             '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
             + CAST(@ObjectTableID AS NVARCHAR(300)) + '}]',
             @AuditUserName,
             @EIDSSReportID
            );

            -- Update data audit event ID on tlbObservation and tlbActivityParameters
            -- for flexible forms saved outside this DB transaction.
            UPDATE dbo.tauDataAuditDetailCreate
            SET idfDataAuditEvent = @DataAuditEventID,
                strObject = @EIDSSReportID
            WHERE idfObject = @FarmEpidemiologicalObservationID
                  AND idfDataAuditEvent IS NULL;

            UPDATE dbo.tauDataAuditDetailCreate
            SET idfDataAuditEvent = @DataAuditEventID,
                strObject = @EIDSSReportID
            WHERE idfObject = @ControlMeasuresObservationID
                  AND idfDataAuditEvent IS NULL;
            -- End data audit

            UPDATE @EventsTemp
            SET ObjectId = @DiseaseReportID,
                Note = REPLACE(Note, 'diseaseReportID=0', 'diseaseReportID=' + CAST(@DiseaseReportID AS NVARCHAR(300)))
            WHERE ObjectId = 0;

            -- Update imported samples from laboratory
            UPDATE @SamplesTemp 
            SET VeterinaryDiseaseReportID = @DiseaseReportID
            WHERE VeterinaryDiseaseReportID = 0
                  AND LabModuleSourceIndicator = 1;
        END
        ELSE
        BEGIN
            -- Data audit
            SET @DataAuditEventTypeID = 10016003; -- Data audit edit event type

            INSERT INTO @SuppressSelect
            EXEC dbo.USSP_GBL_DataAuditEvent_GET @AuditUserID,
                                                 @AuditSiteID,
                                                 @DataAuditEventTypeID,
                                                 @ObjectTypeID,
                                                 @DiseaseReportID,
                                                 @ObjectTableID,
                                                 @DataAuditEventID OUTPUT;
            -- End data audit

            IF @ReportCategoryTypeID = 10012004 --Avian
            BEGIN
                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_VET_COPY_FARM_SET @AuditUserName,
                                                   @DataAuditEventID,
                                                   @EIDSSReportID,
                                                   @FarmMasterID,
                                                   @FarmTotalAnimalQuantity,
                                                   @FarmSickAnimalQuantity,
                                                   @FarmDeadAnimalQuantity,
                                                   NULL,
                                                   NULL,
                                                   NULL,
                                                   @FarmLatitude,
                                                   @FarmLongitude,
                                                   @MonitoringSessionID,
                                                   @FarmEpidemiologicalObservationID,
                                                   @FarmOwnerID,
                                                   @FarmID OUTPUT,
                                                   @NewFarmOwnerID OUTPUT;

                IF @NewFarmOwnerID IS NOT NULL
                BEGIN
                    SET @FarmOwnerID = @NewFarmOwnerID;
                END;
            END
            ELSE --Livestock
            BEGIN
                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_VET_COPY_FARM_SET @AuditUserName,
                                                   @DataAuditEventID,
                                                   @EIDSSReportID,
                                                   @FarmMasterID,
                                                   NULL,
                                                   NULL,
                                                   NULL,
                                                   @FarmTotalAnimalQuantity,
                                                   @FarmSickAnimalQuantity,
                                                   @FarmDeadAnimalQuantity,
                                                   @FarmLatitude,
                                                   @FarmLongitude,
                                                   @MonitoringSessionID,
                                                   @FarmEpidemiologicalObservationID,
                                                   @FarmOwnerID,
                                                   @FarmID OUTPUT,
                                                   @NewFarmOwnerID OUTPUT;

                IF @NewFarmOwnerID IS NOT NULL
                BEGIN
                    SET @FarmOwnerID = @NewFarmOwnerID;
                END;
            END
            -- Data audit
            INSERT INTO @VeterinaryDiseaseReportBeforeEdit
            (
                DiseaseReportID,
                FarmID,
                DiseaseID,
                PersonEnteredByID,
                PersonReportedByID,
                PersonInvestigatedByID,
                ObservationID,
                ReportDate,
                AssignedDate,
                InvestigationDate,
                FinalDiagnosisDate,
                FieldAccessionID,
                YNTestsConductedTypeID,
                ReportedByOfficeID,
                InvestigatedByOfficeID,
                CaseReportTypeID,
                CaseClassificationTypeID,
                OutbreakID,
                EnteredDate,
                EIDSSReportID,
                CaseProgressStatusTypeID,
                ParentMonitoringSessionID,
                CaseTypeID,
                ReceivedByOfficeID,
                ReceivedByPersonID
            )
            SELECT idfVetCase,
                   idfFarm,
                   idfsFinalDiagnosis,
                   idfPersonEnteredBy,
                   idfPersonReportedBy,
                   idfPersonInvestigatedBy,
                   idfObservation,
                   datReportDate,
                   datAssignedDate,
                   datInvestigationDate,
                   datFinalDiagnosisDate,
                   strFieldAccessionID,
                   idfsYNTestsConducted,
                   idfReportedByOffice,
                   idfInvestigatedByOffice,
                   idfsCaseReportType,
                   idfsCaseClassification,
                   idfOutbreak,
                   datEnteredDate,
                   strCaseID,
                   idfsCaseProgressStatus,
                   idfParentMonitoringSession,
                   idfsCaseType,
                   idfReceivedByOffice,
                   idfReceivedByPerson
            FROM dbo.tlbVetCase
            WHERE idfVetCase = @DiseaseReportID;
            -- End data audit

            UPDATE dbo.tlbVetCase
            SET idfFarm = @FarmID,
                idfsFinalDiagnosis = @DiseaseID,
                idfPersonEnteredBy = @EnteredByPersonID,
                idfPersonReportedBy = @ReportedByPersonID,
                idfPersonInvestigatedBy = @InvestigatedByPersonID,
                idfReceivedByPerson = @ReceivedByPersonID,
                idfObservation = @ControlMeasuresObservationID,
                idfsSite = @SiteID,
                datReportDate = @ReportDate,
                datAssignedDate = @AssignedDate,
                datInvestigationDate = @InvestigationDate,
                datFinalDiagnosisDate = @DiagnosisDate,
                strTestNotes = NULL,
                strSummaryNotes = NULL,
                strClinicalNotes = NULL,
                strFieldAccessionID = @EIDSSFieldAccessionID,
                idfsYNTestsConducted = @TestsConductedIndicator,
                intRowStatus = @RowStatus,
                idfReportedByOffice = @ReportedByOrganizationID,
                idfInvestigatedByOffice = @InvestigatedByOrganizationID,
                idfReceivedByOffice = @ReceivedByOrganizationID,
                idfsCaseReportType = @ReportTypeID,
                idfsCaseClassification = @ClassificationTypeID,
                idfOutbreak = @OutbreakID,
                datEnteredDate = @EnteredDate,
                strCaseID = @EIDSSReportID,
                idfsCaseProgressStatus = @StatusTypeID,
                strSampleNotes = NULL,
                idfParentMonitoringSession = @MonitoringSessionID,
                idfsCaseType = @ReportCategoryTypeID,
                AuditUpdateUser = @AuditUserName
            WHERE idfVetCase = @DiseaseReportID;

            -- Data audit
            INSERT INTO @VeterinaryDiseaseReportAfterEdit
            (
                DiseaseReportID,
                FarmID,
                DiseaseID,
                PersonEnteredByID,
                PersonReportedByID,
                PersonInvestigatedByID,
                ObservationID,
                ReportDate,
                AssignedDate,
                InvestigationDate,
                FinalDiagnosisDate,
                FieldAccessionID,
                YNTestsConductedTypeID,
                ReportedByOfficeID,
                InvestigatedByOfficeID,
                CaseReportTypeID,
                CaseClassificationTypeID,
                OutbreakID,
                EnteredDate,
                EIDSSReportID,
                CaseProgressStatusTypeID,
                ParentMonitoringSessionID,
                CaseTypeID,
                ReceivedByOfficeID,
                ReceivedByPersonID
            )
            SELECT idfVetCase,
                   idfFarm,
                   idfsFinalDiagnosis,
                   idfPersonEnteredBy,
                   idfPersonReportedBy,
                   idfPersonInvestigatedBy,
                   idfObservation,
                   datReportDate,
                   datAssignedDate,
                   datInvestigationDate,
                   datFinalDiagnosisDate,
                   strFieldAccessionID,
                   idfsYNTestsConducted,
                   idfReportedByOffice,
                   idfInvestigatedByOffice,
                   idfsCaseReportType,
                   idfsCaseClassification,
                   idfOutbreak,
                   datEnteredDate,
                   strCaseID,
                   idfsCaseProgressStatus,
                   idfParentMonitoringSession,
                   idfsCaseType,
                   idfReceivedByOffice,
                   idfReceivedByPerson
            FROM dbo.tlbVetCase
            WHERE idfVetCase = @DiseaseReportID;

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4575810000000,
                   a.DiseaseReportID,
                   NULL,
                   b.FarmID,
                   a.FarmID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.FarmID <> b.FarmID)
                  OR (
                         a.FarmID IS NOT NULL
                         AND b.FarmID IS NULL
                     )
                  OR (
                         a.FarmID IS NULL
                         AND b.FarmID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   80940000000,
                   a.DiseaseReportID,
                   NULL,
                   b.DiseaseID,
                   a.DiseaseID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.DiseaseID <> b.DiseaseID)
                  OR (
                         a.DiseaseID IS NOT NULL
                         AND b.DiseaseID IS NULL
                     )
                  OR (
                         a.DiseaseID IS NULL
                         AND b.DiseaseID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   80910000000,
                   a.DiseaseReportID,
                   NULL,
                   b.PersonEnteredByID,
                   a.PersonEnteredByID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.PersonEnteredByID <> b.PersonEnteredByID)
                  OR (
                         a.PersonEnteredByID IS NOT NULL
                         AND b.PersonEnteredByID IS NULL
                     )
                  OR (
                         a.PersonEnteredByID IS NULL
                         AND b.PersonEnteredByID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   80930000000,
                   a.DiseaseReportID,
                   NULL,
                   b.PersonReportedByID,
                   a.PersonReportedByID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.PersonReportedByID <> b.PersonReportedByID)
                  OR (
                         a.PersonReportedByID IS NOT NULL
                         AND b.PersonReportedByID IS NULL
                     )
                  OR (
                         a.PersonReportedByID IS NULL
                         AND b.PersonReportedByID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   80920000000,
                   a.DiseaseReportID,
                   NULL,
                   b.PersonInvestigatedByID,
                   a.PersonInvestigatedByID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.PersonInvestigatedByID <> b.PersonInvestigatedByID)
                  OR (
                         a.PersonInvestigatedByID IS NOT NULL
                         AND b.PersonInvestigatedByID IS NULL
                     )
                  OR (
                         a.PersonInvestigatedByID IS NULL
                         AND b.PersonInvestigatedByID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4566320000000,
                   a.DiseaseReportID,
                   NULL,
                   b.ObservationID,
                   a.ObservationID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.ObservationID <> b.ObservationID)
                  OR (
                         a.ObservationID IS NOT NULL
                         AND b.ObservationID IS NULL
                     )
                  OR (
                         a.ObservationID IS NULL
                         AND b.ObservationID IS NOT NULL
                     )

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   80870000000,
                   a.DiseaseReportID,
                   NULL,
                   b.ReportDate,
                   a.ReportDate,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.ReportDate <> b.ReportDate)
                  OR (
                         a.ReportDate IS NOT NULL
                         AND b.ReportDate IS NULL
                     )
                  OR (
                         a.ReportDate IS NULL
                         AND b.ReportDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   80850000000,
                   a.DiseaseReportID,
                   NULL,
                   b.AssignedDate,
                   a.AssignedDate,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.AssignedDate <> b.AssignedDate)
                  OR (
                         a.AssignedDate IS NOT NULL
                         AND b.AssignedDate IS NULL
                     )
                  OR (
                         a.AssignedDate IS NULL
                         AND b.AssignedDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4566330000000,
                   a.DiseaseReportID,
                   NULL,
                   b.InvestigationDate,
                   a.InvestigationDate,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.InvestigationDate <> b.InvestigationDate)
                  OR (
                         a.InvestigationDate IS NOT NULL
                         AND b.InvestigationDate IS NULL
                     )
                  OR (
                         a.InvestigationDate IS NULL
                         AND b.InvestigationDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   80860000000,
                   a.DiseaseReportID,
                   NULL,
                   b.FinalDiagnosisDate,
                   a.FinalDiagnosisDate,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.FinalDiagnosisDate <> b.FinalDiagnosisDate)
                  OR (
                         a.FinalDiagnosisDate IS NOT NULL
                         AND b.FinalDiagnosisDate IS NULL
                     )
                  OR (
                         a.FinalDiagnosisDate IS NULL
                         AND b.FinalDiagnosisDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4566340000000,
                   a.DiseaseReportID,
                   NULL,
                   b.FieldAccessionID,
                   a.FieldAccessionID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.FieldAccessionID <> b.FieldAccessionID)
                  OR (
                         a.FieldAccessionID IS NOT NULL
                         AND b.FieldAccessionID IS NULL
                     )
                  OR (
                         a.FieldAccessionID IS NULL
                         AND b.FieldAccessionID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4578870000000,
                   a.DiseaseReportID,
                   NULL,
                   b.YNTestsConductedTypeID,
                   a.YNTestsConductedTypeID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.YNTestsConductedTypeID <> b.YNTestsConductedTypeID)
                  OR (
                         a.YNTestsConductedTypeID IS NOT NULL
                         AND b.YNTestsConductedTypeID IS NULL
                     )
                  OR (
                         a.YNTestsConductedTypeID IS NULL
                         AND b.YNTestsConductedTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   6618090000000,
                   a.DiseaseReportID,
                   NULL,
                   b.ReportedByOfficeID,
                   a.ReportedByOfficeID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.ReportedByOfficeID <> b.ReportedByOfficeID)
                  OR (
                         a.ReportedByOfficeID IS NOT NULL
                         AND b.ReportedByOfficeID IS NULL
                     )
                  OR (
                         a.ReportedByOfficeID IS NULL
                         AND b.ReportedByOfficeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   6618100000000,
                   a.DiseaseReportID,
                   NULL,
                   b.InvestigatedByOfficeID,
                   a.InvestigatedByOfficeID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.InvestigatedByOfficeID <> b.InvestigatedByOfficeID)
                  OR (
                         a.InvestigatedByOfficeID IS NOT NULL
                         AND b.InvestigatedByOfficeID IS NULL
                     )
                  OR (
                         a.InvestigatedByOfficeID IS NULL
                         AND b.InvestigatedByOfficeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   6618120000000,
                   a.DiseaseReportID,
                   NULL,
                   b.CaseReportTypeID,
                   a.CaseReportTypeID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.CaseReportTypeID <> b.CaseReportTypeID)
                  OR (
                         a.CaseReportTypeID IS NOT NULL
                         AND b.CaseReportTypeID IS NULL
                     )
                  OR (
                         a.CaseReportTypeID IS NULL
                         AND b.CaseReportTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   12665470000000,
                   a.DiseaseReportID,
                   NULL,
                   b.CaseClassificationTypeID,
                   a.CaseClassificationTypeID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.CaseClassificationTypeID <> b.CaseClassificationTypeID)
                  OR (
                         a.CaseClassificationTypeID IS NOT NULL
                         AND b.CaseClassificationTypeID IS NULL
                     )
                  OR (
                         a.CaseClassificationTypeID IS NULL
                         AND b.CaseClassificationTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   12665490000000,
                   a.DiseaseReportID,
                   NULL,
                   b.OutbreakID,
                   a.OutbreakID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.OutbreakID <> b.OutbreakID)
                  OR (
                         a.OutbreakID IS NOT NULL
                         AND b.OutbreakID IS NULL
                     )
                  OR (
                         a.OutbreakID IS NULL
                         AND b.OutbreakID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   12665500000000,
                   a.DiseaseReportID,
                   NULL,
                   b.EnteredDate,
                   a.EnteredDate,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.EnteredDate <> b.EnteredDate)
                  OR (
                         a.EnteredDate IS NOT NULL
                         AND b.EnteredDate IS NULL
                     )
                  OR (
                         a.EnteredDate IS NULL
                         AND b.EnteredDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   12665510000000,
                   a.DiseaseReportID,
                   NULL,
                   b.EIDSSReportID,
                   a.EIDSSReportID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.EIDSSReportID <> b.EIDSSReportID)
                  OR (
                         a.EIDSSReportID IS NOT NULL
                         AND b.EIDSSReportID IS NULL
                     )
                  OR (
                         a.EIDSSReportID IS NULL
                         AND b.EIDSSReportID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   12665520000000,
                   a.DiseaseReportID,
                   NULL,
                   b.CaseProgressStatusTypeID,
                   a.CaseProgressStatusTypeID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.CaseProgressStatusTypeID <> b.CaseProgressStatusTypeID)
                  OR (
                         a.CaseProgressStatusTypeID IS NOT NULL
                         AND b.CaseProgressStatusTypeID IS NULL
                     )
                  OR (
                         a.CaseProgressStatusTypeID IS NULL
                         AND b.CaseProgressStatusTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   12665540000000,
                   a.DiseaseReportID,
                   NULL,
                   b.ParentMonitoringSessionID,
                   a.ParentMonitoringSessionID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.ParentMonitoringSessionID <> b.ParentMonitoringSessionID)
                  OR (
                         a.ParentMonitoringSessionID IS NOT NULL
                         AND b.ParentMonitoringSessionID IS NULL
                     )
                  OR (
                         a.ParentMonitoringSessionID IS NULL
                         AND b.ParentMonitoringSessionID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   12665560000000,
                   a.DiseaseReportID,
                   NULL,
                   b.CaseTypeID,
                   a.CaseTypeID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.CaseTypeID <> b.CaseTypeID)
                  OR (
                         a.CaseTypeID IS NOT NULL
                         AND b.CaseTypeID IS NULL
                     )
                  OR (
                         a.CaseTypeID IS NULL
                         AND b.CaseTypeID IS NOT NULL
                     );
        END;

        -- VUC11 and VUC12 - connected disease report logic.
        IF @RelatedToDiseaseReportID IS NOT NULL
        BEGIN
            IF NOT EXISTS
            (
                SELECT *
                FROM dbo.VetDiseaseReportRelationship
                WHERE VetDiseaseReportID = @DiseaseReportID
                      AND intRowStatus = 0
            )
            BEGIN
                INSERT INTO @SuppressSelect
                EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'VetDiseaseReportRelationship',
                                                  @VeterinaryDiseaseReportRelationshipID OUTPUT;

                INSERT INTO dbo.VetDiseaseReportRelationship
                (
                    VetDiseaseReportRelnUID,
                    VetDiseaseReportID,
                    RelatedToVetDiseaseReportID,
                    RelationshipTypeID,
                    intRowStatus,
                    SourceSystemNameID,
                    SourceSystemKeyValue,
                    AuditCreateUser
                )
                VALUES
                (@VeterinaryDiseaseReportRelationshipID,
                 @DiseaseReportID,
                 @RelatedToDiseaseReportID,
                 10503001,
                 0  ,
                 10519001,
                 '[{"VetDiseaseReportRelnUID":' + CAST(@VeterinaryDiseaseReportRelationshipID AS NVARCHAR(300))
                 + ',"VetDiseaseReportID":' + CAST(@DiseaseReportID AS NVARCHAR(300)) + '}]',
                 @AuditUserName
                );

                -- Data audit
                INSERT INTO dbo.tauDataAuditDetailCreate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    SourceSystemNameID,
                    SourceSystemKeyValue,
                    AuditCreateUser,
                    strObject
                )
                VALUES
                (@DataAuditEventID,
                 @ObjectVeterinaryDiseaseReportRelationshipTableID,
                 @VeterinaryDiseaseReportRelationshipID,
                 10519001,
                 '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
                 + CAST(@ObjectVeterinaryDiseaseReportRelationshipTableID AS NVARCHAR(300)) + '}]',
                 @AuditUserName,
                 @EIDSSReportID
                );
            -- End data audit
            END;
        END;

        -- An outbreak reference via a case must be created in order to tie the disease report to the outbreak session.
        IF @OutbreakCaseIndicator = 1
        BEGIN
            IF @OutbreakCaseReportUID IS NULL
            BEGIN
                INSERT INTO @SuppressSelect
                EXEC dbo.USP_GBL_NEXTKEYID_GET 'OutbreakCaseReport',
                                               @OutbreakCaseReportUID OUTPUT;

                INSERT INTO @SuppressSelect
                EXEC dbo.USP_GBL_NextNumber_GET 'Vet Outbreak Case',
                                                @EIDSSCaseID OUTPUT,
                                                NULL;

                INSERT INTO dbo.OutbreakCaseReport
                (
                    OutbreakCaseReportUID,
                    idfOutbreak,
                    strOutbreakCaseID,
                    idfHumanCase,
                    idfVetCase,
                    OutbreakCaseObservationId,
                    OutbreakCaseStatusId,
                    OutbreakCaseClassificationID,
                    IsPrimaryCaseFlag,
                    intRowStatus,
                    SourceSystemNameID,
                    SourceSystemKeyValue,
                    AuditCreateUser,
                    AuditCreateDTM,
                    AuditUpdateUser,
                    AuditUpdateDTM
                )
                VALUES
                (@OutbreakCaseReportUID,
                 @OutbreakID,
                 @EIDSSCaseID,
                 NULL,
                 @DiseaseReportID,
                 @OutbreakCaseQuestionnaireObservationID,
                 @OutbreakCaseStatusTypeID,
                 @ClassificationTypeID,
                 @PrimaryCaseIndicator,
                 0  ,
                 10519001,
                 '[{"OutBreakCaseReportUID":' + CAST(@OutbreakCaseReportUID AS NVARCHAR(300)) + ',"idfOutbreak":'
                 + CAST(@OutbreakID AS NVARCHAR(300)) + '}]',
                 @AuditUserName,
                 GETDATE(),
                 @AuditUserName,
                 GETDATE()
                );
            END
            ELSE
            BEGIN
                UPDATE dbo.OutbreakCaseReport
                SET OutbreakCaseStatusId = @OutbreakCaseStatusTypeID,
                    OutbreakCaseClassificationID = @ClassificationTypeID,
                    IsPrimaryCaseFlag = @PrimaryCaseIndicator,
                    intRowStatus = 0,
                    AuditUpdateUser = @AuditUserName,
                    AuditUpdateDTM = GETDATE(),
                    OutbreakCaseObservationID = @OutbreakCaseQuestionnaireObservationID
                WHERE OutbreakCaseReportUID = @OutbreakCaseReportUID;
            END
        END

        WHILE EXISTS (SELECT * FROM @FlocksOrHerdsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = FlockOrHerdID,
                @FlockOrHerdID = FlockOrHerdID,
                @FlockOrHerdMasterID = FlockOrHerdMasterID,
                @EIDSSFlockOrHerdID = EIDSSFlockOrHerdID,
                @SickAnimalQuantity = SickAnimalQuantity,
                @TotalAnimalQuantity = TotalAnimalQuantity,
                @DeadAnimalQuantity = DeadAnimalQuantity,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @FlocksOrHerdsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VET_FLOCK_HERD_SET @AuditUserName,
                                                @DataAuditEventID,
                                                @EIDSSReportID,
                                                @FlockOrHerdID OUTPUT,
                                                @FlockOrHerdMasterID,
                                                @FarmID,
                                                @EIDSSFlockOrHerdID,
                                                @SickAnimalQuantity,
                                                @TotalAnimalQuantity,
                                                @DeadAnimalQuantity,
                                                NULL,
                                                @RowStatus,
                                                @RowAction;

            UPDATE @SpeciesTemp
            SET FlockOrHerdID = @FlockOrHerdID
            WHERE FlockOrHerdID = @RowID;

            DELETE FROM @FlocksOrHerdsTemp
            WHERE FLockOrHerdID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @SpeciesTemp)
        BEGIN
            SELECT TOP 1
                @RowID = SpeciesID,
                @SpeciesID = SpeciesID,
                @SpeciesMasterID = SpeciesMasterID,
                @SpeciesTypeID = SpeciesTypeID,
                @FlockOrHerdID = FlockOrHerdID,
                @StartOfSignsDate = StartOfSignsDate,
                @AverageAge = AverageAge,
                @SickAnimalQuantity = SickAnimalQuantity,
                @TotalAnimalQuantity = TotalAnimalQuantity,
                @DeadAnimalQuantity = DeadAnimalQuantity,
                @Comments = Comments,
                @ObservationID = ObservationID,
                @RowStatus = RowStatus,
                @RowAction = RowAction,
                @RelatedToSpeciesID = RelatedToSpeciesID,
                @RelatedToObservationID = RelatedToObservationID,
                @OutbreakSpeciesCaseStatusTypeID = OutbreakCaseStatusTypeID
            FROM @SpeciesTemp;

            -- VUC11 and VUC12 - connected disease report logic for clinical species investigations.
            IF @RelatedToDiseaseReportID IS NOT NULL
               AND @RowAction = 1 -- Insert
            BEGIN
                IF @RelatedToObservationID IS NOT NULL
                BEGIN
                    SELECT @FormTemplateID = idfsFormTemplate,
                           @ObservationSiteID = idfsSite
                    FROM dbo.tlbObservation
                    WHERE idfObservation = @RelatedToObservationID;

                    SET @ObservationID = -1;

                    INSERT INTO @SuppressSelect
                    EXECUTE dbo.USSP_GBL_OBSERVATION_SET @ObservationID OUTPUT,
                                                         @FormTemplateID,
                                                         @ObservationSiteID,
                                                         0,
                                                         1, 
                                                         @AuditUserName, 
                                                         @DataAuditEventID, 
                                                         @EIDSSReportID;

                    UPDATE @SpeciesTemp
                    SET ObservationID = @ObservationID
                    WHERE SpeciesMasterID = @SpeciesMasterID;

                    INSERT INTO @ActivityParametersTemp
                    SELECT idfActivityParameters,
                           idfsParameter,
                           varValue,
                           idfRow
                    FROM dbo.tlbActivityParameters
                    WHERE idfObservation = @RelatedToObservationID;

                    WHILE EXISTS (SELECT * FROM @ActivityParametersTemp)
                    BEGIN
                        SELECT TOP 1
                            @ActivityID = ActivityID,
                            @ParameterID = ParameterID,
                            @ParameterValue = ParameterValue,
                            @ParameterRowID = ParameterRowID
                        FROM @ActivityParametersTemp;

                        INSERT INTO @SuppressSelect
                        EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tlbActivityParameters',
                                                          @ActivityIDNew OUTPUT;

                        INSERT INTO dbo.tlbActivityParameters
                        (
                            idfActivityParameters,
                            idfsParameter,
                            idfObservation,
                            varValue,
                            idfRow,
                            intRowStatus,
                            SourceSystemNameID,
                            SourceSystemKeyValue,
                            AuditCreateUser,
                            AuditCreateDTM
                        )
                        VALUES
                        (@ActivityIDNew,
                         @ParameterID,
                         @ObservationID,
                         @ParameterValue,
                         @ParameterRowID,
                         0  ,
                         10519001,
                         '[{"idfActivityParameters":' + CAST(@ActivityIDNew AS NVARCHAR(300)) + '}]',
                         @AuditUserName,
                         GETDATE()
                        );

                        -- Data audit
                        INSERT INTO dbo.tauDataAuditDetailCreate
                        (
                            idfDataAuditEvent,
                            idfObjectTable,
                            idfObject,
                            idfObjectDetail,
                            SourceSystemNameID,
                            SourceSystemKeyValue,
                            AuditCreateUser
                        )
                        VALUES
                        (@DataAuditEventID,
                         @ObjectActivityParametersTableID,
                         @ActivityIDNew,
                         @ObservationID,
                         10519001,
                         '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
                         + CAST(@ObjectActivityParametersTableID AS NVARCHAR(300)) + '}]',
                         @AuditUserName
                        );
                        -- End data audit

                        DELETE FROM @ActivityParametersTemp
                        WHERE ActivityID = @ActivityID;
                    END;
                END;
            END;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VET_SPECIES_WITH_AUDITING_SET @AuditUserName,
                                                           @DataAuditEventID,
                                                           @EIDSSReportID,
                                                           @SpeciesID OUTPUT,
                                                           @SpeciesMasterID,
                                                           @SpeciesTypeID,
                                                           @FlockOrHerdID,
                                                           @ObservationID,
                                                           @StartOfSignsDate,
                                                           @AverageAge,
                                                           @SickAnimalQuantity,
                                                           @TotalAnimalQuantity,
                                                           @DeadAnimalQuantity,
                                                           @Comments,
                                                           @RowStatus,
                                                           @RowAction,
                                                           @OutbreakSpeciesCaseStatusTypeID;

            UPDATE @AnimalsTemp
            SET SpeciesID = @SpeciesID
            WHERE SpeciesID = @RowID;

            UPDATE @VaccinationsTemp
            SET SpeciesID = @SpeciesID
            WHERE SpeciesID = @RowID;

            UPDATE @SamplesTemp
            SET SpeciesID = @SpeciesID
            WHERE SpeciesID = @RowID;

            DELETE FROM @SpeciesTemp
            WHERE SpeciesID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @AnimalsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = AnimalID,
                @AnimalID = AnimalID,
                @SexTypeID = SexTypeID,
                @ConditionTypeID = ConditionTypeID,
                @AgeTypeID = AgeTypeID,
                @SpeciesID = SpeciesID,
                @ObservationID = ObservationID,
                @AnimalDescription = AnimalDescription,
                @EIDSSAnimalID = EIDSSAnimalID,
                @AnimalName = AnimalName,
                @Color = Color,
                @ClinicalSignsIndicator = ClinicalSignsIndicator,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @AnimalsTemp;

            -- VUC11 and VUC12 - connected disease report logic for clinical signs.
            IF @RelatedToDiseaseReportID IS NOT NULL
               AND @RowAction = 1 -- Insert
               AND @ObservationID IS NOT NULL
            BEGIN
                SELECT @FormTemplateID = idfsFormTemplate,
                       @ObservationSiteID = idfsSite
                FROM dbo.tlbObservation
                WHERE idfObservation = @ObservationID;

                DELETE FROM @ActivityParametersTemp;

                INSERT INTO @ActivityParametersTemp
                SELECT idfActivityParameters,
                       idfsParameter,
                       varValue,
                       idfRow
                FROM dbo.tlbActivityParameters
                WHERE idfObservation = @ObservationID;

                SET @ObservationID = -1;

                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_GBL_OBSERVATION_SET @ObservationID OUTPUT,
                                                     @FormTemplateID,
                                                     @ObservationSiteID,
                                                     0,
                                                     1, 
                                                     @AuditUserName, 
                                                     @DataAuditEventID, 
                                                     @EIDSSReportID;

                UPDATE @AnimalsTemp
                SET ObservationID = @ObservationID
                WHERE AnimalID = @RowID;


                WHILE EXISTS (SELECT * FROM @ActivityParametersTemp)
                BEGIN
                    SELECT TOP 1
                        @ActivityID = ActivityID,
                        @ParameterID = ParameterID,
                        @ParameterValue = ParameterValue,
                        @ParameterRowID = ParameterRowID
                    FROM @ActivityParametersTemp;

                    INSERT INTO @SuppressSelect
                    EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tlbActivityParameters',
                                                      @ActivityIDNew OUTPUT;

                    INSERT INTO dbo.tlbActivityParameters
                    (
                        idfActivityParameters,
                        idfsParameter,
                        idfObservation,
                        varValue,
                        idfRow,
                        intRowStatus,
                        SourceSystemNameID,
                        SourceSystemKeyValue,
                        AuditCreateUser,
                        AuditCreateDTM
                    )
                    VALUES
                    (@ActivityIDNew,
                     @ParameterID,
                     @ObservationID,
                     @ParameterValue,
                     @ParameterRowID,
                     0  ,
                     10519001,
                     '[{"idfActivityParameters":' + CAST(@ActivityIDNew AS NVARCHAR(300)) + '}]',
                     @AuditUserName,
                     GETDATE()
                    );

                    -- Data audit
                    INSERT INTO dbo.tauDataAuditDetailCreate
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfObject,
                        idfObjectDetail,
                        SourceSystemNameID,
                        SourceSystemKeyValue,
                        AuditCreateUser
                    )
                    VALUES
                    (@DataAuditEventID,
                     @ObjectActivityParametersTableID,
                     @ActivityIDNew,
                     @ObservationID,
                     10519001,
                     '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
                     + CAST(@ObjectActivityParametersTableID AS NVARCHAR(300)) + '}]',
                     @AuditUserName
                    );
                    -- End data audit

                    DELETE FROM @ActivityParametersTemp
                    WHERE ActivityID = @ActivityID;
                END;
            END;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VET_ANIMALS_SET @AuditUserName,
                                             @DataAuditEventID,
                                             @EIDSSReportID,
                                             @AnimalID OUTPUT,
                                             @SexTypeID,
                                             @ConditionTypeID,
                                             @AgeTypeID,
                                             @SpeciesID,
                                             @ObservationID,
                                             @AnimalDescription,
                                             @EIDSSAnimalID,
                                             @AnimalName,
                                             @Color,
                                             @ClinicalSignsIndicator,
                                             @RowStatus,
                                             @RowAction;

            UPDATE @SamplesTemp
            SET AnimalID = @AnimalID
            WHERE AnimalID = @RowID;

            DELETE FROM @AnimalsTemp
            WHERE AnimalID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @VaccinationsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = VaccinationID,
                @VaccinationID = VaccinationID,
                @SpeciesID = SpeciesID,
                @VaccinationTypeID = VaccinationTypeID,
                @RouteTypeID = RouteTypeID,
                @DiseaseID = DiseaseID,
                @VaccinationDate = VaccinationDate,
                @Manufacturer = Manufacturer,
                @LotNumber = LotNumber,
                @NumberVaccinated = NumberVaccinated,
                @Comments = Comments,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @VaccinationsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VET_VACCINATIONS_SET @AuditUserName,
                                                  @DataAuditEventID,
                                                  @EIDSSReportID,
                                                  @VaccinationID OUTPUT,
                                                  @DiseaseReportID,
                                                  @SpeciesID,
                                                  @VaccinationTypeID,
                                                  @RouteTypeID,
                                                  @DiseaseID,
                                                  @VaccinationDate,
                                                  @Manufacturer,
                                                  @LotNumber,
                                                  @NumberVaccinated,
                                                  @Comments,
                                                  @RowStatus,
                                                  @RowAction;

            DELETE FROM @VaccinationsTemp
            WHERE VaccinationID = @RowID;
        END;

        IF @Contacts IS NOT NULL
            EXEC dbo.USSP_OMM_CONTACT_SET NULL,
                                          @Contacts,
                                          @User = @AuditUserName,
                                          @OutBreakCaseReportUID = @OutbreakCaseReportUID,
                                          @FunctionCall = 1;

        WHILE EXISTS (SELECT * FROM @SamplesTemp)
        BEGIN
            SELECT TOP 1
                @RowID = SampleID,
                @SampleID = SampleID,
                @SampleTypeID = SampleTypeID,
                @RootSampleID = RootSampleID,
                @ParentSampleID = ParentSampleID,
                @SpeciesID = SpeciesID,
                @AnimalID = AnimalID,
                @SampleDiseaseReportID = VeterinaryDiseaseReportID,
                @MonitoringSessionID = MonitoringSessionID,
                @CollectedByPersonID = CollectedByPersonID,
                @CollectedByOrganizationID = CollectedByOrganizationID,
                @CollectionDate = CollectionDate,
                @SentDate = SentDate,
                @EIDSSLocalOrFieldSampleID = EIDSSLocalOrFieldSampleID,
                @SampleStatusTypeID = SampleStatusTypeID,
                @EnteredDate = EnteredDate,
                @Comments = Comments,
                @SiteID = SiteID,
                @CurrentSiteID = CurrentSiteID,
                @RowStatus = RowStatus,
                @SentToOrganizationID = SentToOrganizationID,
                @BirdStatusTypeID = BirdStatusTypeID,
                @ReadOnlyIndicator = ReadOnlyIndicator,
                @LabModuleSourceIndicator = LabModuleSourceIndicator,
                @RowAction = RowAction
            FROM @SamplesTemp;

            IF (
                   @EIDSSLocalOrFieldSampleID IS NULL
                   OR @EIDSSLocalOrFieldSampleID = ''
               )
               AND @LinkLocalOrFieldSampleIDToReportID = 1
            BEGIN
                SET @Iteration = @Iteration + 1;
                IF @Iteration < 10
                BEGIN
                    SET @EIDSSLocalOrFieldSampleID = @EIDSSReportID + '-0' + CONVERT(NVARCHAR(4), @Iteration);
                END
                ELSE
                BEGIN
                    SET @EIDSSLocalOrFieldSampleID = @EIDSSReportID + '-' + CONVERT(NVARCHAR(4), @Iteration);
                END;
            END;

            -- Check if sample is being de-linked, so use sample disease report ID passed in from 
            -- sample record instead of parent disease report ID.
            IF @LabModuleSourceIndicator = 0
            BEGIN
                SET @SampleDiseaseReportID = @DiseaseReportID;
            END

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_GBL_SAMPLES_SET @AuditUserName,
                                             @DataAuditEventID,
                                             @EIDSSReportID,
                                             @SampleID OUTPUT,
                                             @SampleTypeID,
                                             @RootSampleID,
                                             @ParentSampleID,
                                             @FarmOwnerID,
                                             @SpeciesID,
                                             @AnimalID,
                                             NULL,
                                             @MonitoringSessionID,
                                             NULL,
                                             NULL,
                                             @SampleDiseaseReportID,
                                             @CollectionDate,
                                             @CollectedByPersonID,
                                             @CollectedByOrganizationID,
                                             @SentDate,
                                             @SentToOrganizationID,
                                             @EIDSSLocalOrFieldSampleID,
                                             @SiteID,
                                             @EnteredDate,
                                             @ReadOnlyIndicator,
                                             @SampleStatusTypeID,
                                             @Comments,
                                             @CurrentSiteID,
                                             @DiseaseID,
                                             @BirdStatusTypeID,
                                             @RowStatus,
                                             @RowAction;

            UPDATE @PensideTestsTemp
            SET SampleID = @SampleID
            WHERE SampleID = @RowID;

            UPDATE @LaboratoryTestsTemp
            SET SampleID = @SampleID
            WHERE SampleID = @RowID;

            DELETE FROM @SamplesTemp
            WHERE SampleID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @PensideTestsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = PensideTestID,
                @PensideTestID = PensideTestID,
                @SampleID = SampleID,
                @PensideTestResultTypeID = PensideTestResultTypeID,
                @PensideTestNameTypeID = PensideTestNameTypeID,
                @RowStatus = RowStatus,
                @TestedByPersonID = TestedByPersonID,
                @TestedByOrganizationID = TestedByOrganizationID,
                @DiseaseID = DiseaseID,
                @TestDate = TestDate,
                @PensideTestCategoryTypeID = PensideTestCategoryTypeID,
                @RowAction = RowAction
            FROM @PensideTestsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VET_PENSIDE_TESTS_SET @AuditUserName,
                                                   @DataAuditEventID,
                                                   @EIDSSReportID,
                                                   @PensideTestID OUTPUT,
                                                   @SampleID,
                                                   @PensideTestResultTypeID,
                                                   @PensideTestNameTypeID,
                                                   @TestedByPersonID,
                                                   @TestedByOrganizationID,
                                                   @DiseaseID,
                                                   @TestDate,
                                                   @PensideTestCategoryTypeID,
                                                   @RowStatus,
                                                   @RowAction;

            DELETE FROM @PensideTestsTemp
            WHERE PensideTestID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @LaboratoryTestsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = TestID,
                @TestID = TestID,
                @TestNameTypeID = TestNameTypeID,
                @TestCategoryTypeID = TestCategoryTypeID,
                @TestResultTypeID = TestResultTypeID,
                @TestStatusTypeID = TestStatusTypeID,
                @DiseaseID = DiseaseID,
                @SampleID = SampleID,
                @Comments = Comments,
                @RowStatus = RowStatus,
                @StartedDate = StartedDate,
                @ResultDate = ResultDate,
                @TestedByOrganizationID = TestedByOrganizationID,
                @TestedByPersonID = TestedByPersonID,
                @ResultEnteredByOrganizationID = ResultEnteredByOrganizationID,
                @ResultEnteredByPersonID = ResultEnteredByPersonID,
                @ValidatedByOrganizationID = ValidatedByOrganizationID,
                @ValidatedByPersonID = ValidatedByPersonID,
                @ReadOnlyIndicator = ReadOnlyIndicator,
                @NonLaboratoryTestIndicator = NonLaboratoryTestIndicator,
                @ExternalTestIndicator = ExternalTestIndicator,
                @PerformedByOrganizationID = PerformedByOrganizationID,
                @ReceivedDate = ReceivedDate,
                @ContactPersonName = ContactPersonName,
                @RowAction = RowAction
            FROM @LaboratoryTestsTemp;

            --If record is being soft-deleted, then check if the test record was originally created 
            --in the laboaratory module.  If it was, then disassociate the test record from the 
            --veterinary disease report, so that the test record remains in the laboratory module 
            --for further action.
            IF @RowStatus = 1
               AND @NonLaboratoryTestIndicator = 0
            BEGIN
                SET @RowStatus = 0;
                SET @TestDiseaseReportID = NULL;
            END
            ELSE
            BEGIN
                SET @TestDiseaseReportID = @DiseaseReportID;
            END;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_GBL_TESTS_SET @TestID OUTPUT,
                                           @TestNameTypeID,
                                           @TestCategoryTypeID,
                                           @TestResultTypeID,
                                           @TestStatusTypeID,
                                           @DiseaseID,
                                           @SampleID,
                                           NULL,
                                           NULL,
                                           NULL,
                                           @Comments,
                                           @RowStatus,
                                           @StartedDate,
                                           @ResultDate,
                                           @TestedByOrganizationID,
                                           @TestedByPersonID,
                                           @ResultEnteredByOrganizationID,
                                           @ResultEnteredByPersonID,
                                           @ValidatedByOrganizationID,
                                           @ValidatedByPersonID,
                                           @ReadOnlyIndicator,
                                           @NonLaboratoryTestIndicator,
                                           @ExternalTestIndicator,
                                           @PerformedByOrganizationID,
                                           @ReceivedDate,
                                           @ContactPersonName,
                                           NULL,
                                           NULL,
                                           NULL,
                                           @TestDiseaseReportID,
                                           @AuditUserName,
                                           @DataAuditEventID,
                                           @EIDSSReportID,
                                           @RowAction;

            UPDATE @LaboratoryTestInterpretationsTemp
            SET TestID = @TestID
            WHERE TestID = @RowID;

            DELETE FROM @LaboratoryTestsTemp
            WHERE TestID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @LaboratoryTestInterpretationsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = TestInterpretationID,
                @TestInterpretationID = TestInterpretationID,
                @DiseaseID = DiseaseID,
                @InterpretedStatusTypeID = InterpretedStatusTypeID,
                @ValidatedByOrganizationID = ValidatedByOrganizationID,
                @ValidatedByPersonID = ValidatedByPersonID,
                @InterpretedByOrganizationID = InterpretedByOrganizationID,
                @InterpretedByPersonID = InterpretedByPersonID,
                @TestID = TestID,
                @ValidatedStatusIndicator = ValidatedStatusIndicator,
                @ReportSessionCreatedIndicator = ReportSessionCreatedIndicator,
                @ValidatedComment = ValidatedComment,
                @InterpretedComment = InterpretedComment,
                @ValidatedDate = ValidatedDate,
                @InterpretedDate = InterpretedDate,
                @RowStatus = RowStatus,
                @ReadOnlyIndicator = ReadOnlyIndicator,
                @RowAction = RowAction
            FROM @LaboratoryTestInterpretationsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_GBL_TEST_INTERPRETATIONS_SET @AuditUserName,
                                                          @DataAuditEventID,
                                                          @EIDSSReportID, 
                                                          @TestInterpretationID OUTPUT,
                                                          @DiseaseID,
                                                          @InterpretedStatusTypeID,
                                                          @ValidatedByOrganizationID,
                                                          @ValidatedByPersonID,
                                                          @InterpretedByOrganizationID,
                                                          @InterpretedByPersonID,
                                                          @TestID,
                                                          @ValidatedStatusIndicator,
                                                          @ReportSessionCreatedIndicator,
                                                          @ValidatedComment,
                                                          @InterpretedComment,
                                                          @ValidatedDate,
                                                          @InterpretedDate,
                                                          @RowStatus,
                                                          @ReadOnlyIndicator,
                                                          @RowAction;

            DELETE FROM @LaboratoryTestInterpretationsTemp
            WHERE TestInterpretationID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @CaseLogsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = CaseLogID,
                @CaseLogID = CaseLogID,
                @LogStatusTypeID = LogStatusTypeID,
                @LoggedByPersonID = LoggedByPersonID,
                @LogDate = LogDate,
                @ActionRequired = ActionRequired,
                @Comments = Comments,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @CaseLogsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VET_DISEASE_REPORT_LOG_SET @AuditUserName,
                                                        @DataAuditEventID,
                                                        @EIDSSReportID,
                                                        @CaseLogID,
                                                        @LogStatusTypeID,
                                                        @DiseaseReportID,
                                                        @LoggedByPersonID,
                                                        @LogDate,
                                                        @ActionRequired,
                                                        @Comments,
                                                        @RowStatus,
                                                        @RowAction;

            DELETE FROM @CaseLogsTemp
            WHERE CaseLogID = @RowID;
        END;

        IF @CaseMonitorings IS NOT NULL
        BEGIN
            EXEC dbo.USSP_OMM_CASE_MONITORING_SET @CaseMonitorings = @CaseMonitorings,
                                                  @VeterinaryDiseaseReportID = @DiseaseReportID,
                                                  @User = @AuditUserName;
        END

        WHILE EXISTS (SELECT * FROM @EventsTemp)
        BEGIN
            SELECT TOP 1
                @EventId = EventId,
                @EventTypeId = EventTypeId,
                @EventUserId = UserId,
                @EventObjectId = ObjectId,
                @EventSiteId = SiteId,
                @EventDiseaseId = DiseaseId,
                @EventLocationId = LocationId,
                @EventInformationString = InformationString,
                @EventNote = Note,
                @EventLoginSiteId = LoginSiteId
            FROM @EventsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_ADMIN_EVENT_SET @EventId,
                                             @EventTypeId,
                                             @EventUserId,
                                             @EventObjectId,
                                             @EventDiseaseId,
                                             @EventSiteId,
                                             @EventInformationString,
                                             @EventLoginSiteId,
                                             @EventLocationId,
                                             @AuditUserName,
                                             @DataAuditEventID,
                                             @EIDSSReportID;

            DELETE FROM @EventsTemp
            WHERE EventId = @EventId;
        END;

        IF @@TRANCOUNT > 0
            COMMIT TRANSACTION;

        SELECT @ReturnCode ReturnCode,
               @ReturnMessage ReturnMessage,
               @DiseaseReportID DiseaseReportID,
               @EIDSSReportID EIDSSReportID,
               @OutbreakCaseReportUID CaseID,
               @EIDSSCaseID EIDSSCaseID;
    END TRY
    BEGIN CATCH
        IF @@Trancount > 0
            ROLLBACK TRANSACTION;

        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USSP_HUM_REP_WHOEXPORT_GG]...';


GO
--*************************************************************************
-- Name 				: dbo.USSP_HUM_REP_WHOEXPORT_GG
--
-- Description			: SINT03 - WHO Export dbo ON Measles AND Rubella for GG.
-- 
-- Author               : Mandar Kulkarni
-- Revision History
--		Name			Date		Change Detail
--		Ann Xiong		12/02/2022	Replaced 'WHOrep_specific_gis_rayon' with 'WHOrep_specific_gis_region' to get the correct region data and added strImportationCountry and intInitialDiagnosis to the return list.
--		Ann Xiong		12/05/2022	 Generated new CaseID from WHOAreaID in table gisWHOMap
--		Ann Xiong		12/07/2022	Modified to return OutbreakID when the report is related to Outbreak Session and return data on EndDate
--		Ann Xiong		12/15/2022	Fixed a few issues Anatoliy found during test
--		Ann Xiong		12/16/2022	Modified to return sample types as a comma separated string if multiple samples were collected
--
-- Testing code:

--Example of a call of PROCEDURE:
--GG
--exec dbo.[USSP_HUM_REP_WHOEXPORT_GG] @LangID=N'en',@StartDate='20140101',@EndDate='20141231', @idfsDiagnosis = 9843460000000   
--*************************************************************************

ALTER  PROCEDURE [dbo].[USSP_HUM_REP_WHOEXPORT_GG]
 (
		@LangID		AS NVARCHAR(50), 
		@StartDate DATETIME,
		@EndDate DATETIME,
		@idfsDiagnosis BIGINT
 )
AS	

BEGIN


DECLARE	@cmd	NVARCHAR(4000)

-- Drop temporary tables
IF Object_ID('tempdb..#HumanCasesToExport') IS NOT NULL
BEGIN
	SET	@cmd = N'drop TABLE #HumanCasesToExport'
	EXEC sp_executesql @cmd
END

IF Object_ID('tempdb..#FFToExport') IS NOT NULL
BEGIN
	SET	@cmd = N'drop TABLE #FFToExport'
	EXEC sp_executesql @cmd
END

IF Object_ID('tempdb..#ResultTable') IS NOT NULL
BEGIN
	SET	@cmd = N'drop TABLE #ResultTable'
	EXEC sp_executesql @cmd
END

-- CREATE temporary tables
IF Object_ID('tempdb..#HumanCasesToExport') IS NULL
CREATE TABLE #HumanCasesToExport
(	idfHumanCase				BIGINT NOT NULL PRIMARY KEY,
	idfHuman					BIGINT NOT NULL,
	idfCRAddress				BIGINT NULL,
	idfsDiagnosis				BIGINT NOT NULL,
	idfCSObservation			BIGINT NULL,
	idfEpiObservation			BIGINT NULL,
	datDateOnset				DATETIME NOT NULL,
	idfOutbreak					BIGINT NULL,
	NumberOfReceivedDoses		NVARCHAR(50) collate Cyrillic_General_CI_AS NULL,
	DateOfLastVaccination		DATETIME NULL,
	Fever						BIGINT NULL,
	Cough						BIGINT NULL,
	Coryza						BIGINT NULL,  		
	Conjunctivitis				BIGINT NULL,  
	RashDuration				NVARCHAR(50) collate Cyrillic_General_CI_AS NULL,	
	SourceOfInfection			BIGINT NULL,   
	Complications				BIGINT NULL,    
	Encephalitis				BIGINT NULL,    
	Pneumonia					BIGINT NULL,    	
	Diarrhoea					BIGINT NULL,    
	Other						NVARCHAR(500) collate Cyrillic_General_CI_AS NULL,	
	datConcludedDate			DATETIME NULL,
	idfsSampleType				BIGINT NULL,
	datFieldCollectionDate		DATETIME NULL,
	idfsTestResult				BIGINT NULL,
	idfsTestStatus				BIGINT NULL,
	idfTesting					BIGINT NULL
)
DELETE FROM #HumanCasesToExport

IF Object_ID('tempdb..#FFToExport') IS NULL
CREATE TABLE #FFToExport
(	idfActivityParameters		BIGINT NOT NULL PRIMARY KEY,
	idfsParameter				BIGINT NOT NULL,
	idfObservation				BIGINT NOT NULL,
	idfRow						BIGINT NOT NULL,
	varValue					sql_variant NULL
)
DELETE FROM #FFToExport

IF Object_ID('tempdb..#ResultTable') IS NULL
CREATE TABLE	#ResultTable
(	  
	  idfCase					BIGINT NOT NULL PRIMARY KEY
	, strCaseID					NVARCHAR(300) collate database_default NOT NULL 
	, intAreaID					INT NOT NULL 
	, datDRash					date NULL
	, intGenderID				INT NOT NULL 
	, datDBirth					date NULL
	, intAgeAtRashOnset			INT NULL
	, intNumOfVaccines			INT NULL
	, datDvaccine				DATETIME NULL
	, datDNotification			DATETIME NULL
	, datDInvestigation			DATETIME NULL
	, intClinFever				INT NULL
	, intClinCCC				INT NULL
	, intClinRashDuration		INT NULL
	, intClinOutcome			INT NULL
	, intClinHospitalization	INT NULL
	, intSrcInf					INT NULL
	, intSrcOutbreakRelated		INT NULL
	, strSrcOutbreakID			NVARCHAR(50) collate database_default NULL default NULL
	, intCompComplications		INT NULL
	, intCompEncephalitis		INT NULL
	, intCompPneumonia			INT NULL
	, intCompMalnutrition		INT NULL
	, intCompDiarrhoea			INT NULL
	, intCompOther				INT NULL
	, intFinalClassification	INT NULL
	, datDSpecimen				DATETIME NULL
	, intSpecimen				INT NULL
	, datDLabResult				DATETIME NULL
	, intMeaslesIgm				INT NULL
	, intMeaslesVirusDetection	INT NULL		
	, intRubellaIgm				INT NULL
	, intRubellaVirusDetection	INT NULL
	, strCommentsEpi			NVARCHAR(500) collate database_default NULL 
)
DELETE FROM #ResultTable

DECLARE 
  
	@idfsSummaryReportType			BIGINT,
	
	
	@FFP_DateOfOnset_M				BIGINT,
	@FFP_DateOfOnset_R				BIGINT,  	
		
	@FFP_NumberOfReceivedDoses_M	BIGINT,
	@FFP_NumberOfReceivedDoses_R	BIGINT,  		
	
	@FFP_DateOfLastVaccination_M	BIGINT,
	@FFP_DateOfLastVaccination_R	BIGINT,  		
	
	@FFP_Fever_M					BIGINT,
	@FFP_Fever_R					BIGINT,  		
	
	@FFP_Cough_M					BIGINT,
	@FFP_Cough_R					BIGINT,  	
	
	@FFP_Coryza_M					BIGINT,
	@FFP_Coryza_R					BIGINT,  	  	
	
	@FFP_Conjunctivitis_M			BIGINT,
	@FFP_Conjunctivitis_R			BIGINT,  	   				
	
	@FFP_RashDuration_M				BIGINT,
	@FFP_RashDuration_R				BIGINT,  		
	
	@FFP_SourceOfInfection_M		BIGINT,
	@FFP_SourceOfInfection_R		BIGINT,  		
	
	@FFP_Complications_M			BIGINT,
	@FFP_Complications_R			BIGINT,  		

	@FFP_Encephalitis_M				BIGINT,
	@FFP_Encephalitis_R				BIGINT,  		
	  		
	@FFP_Pneumonia_M				BIGINT,
	@FFP_Pneumonia_R				BIGINT,  		
	  		  		
	@FFP_Diarrhoea_M				BIGINT,
	--@FFP_Diarrhoea_R				BIGINT,  		
	  		  		
	@FFP_Other_M					BIGINT,  		  		
	--@FFP_Other_R					BIGINT,  	 
	 		
	@idfsDiagnosis_Measles			BIGINT,
	@idfsDiagnosis_Rubella			BIGINT
	
			  	
SET @idfsSummaryReportType = 10290027 /*WHO dbo - AJ&GG*/

--HCS FF - Rash onset date. / HCS FF- Date of onset
SELECT @FFP_DateOfOnset_M = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_DateOfOnset_M'
AND intRowStatus = 0

SELECT @FFP_DateOfOnset_R = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_DateOfOnset_R'
AND intRowStatus = 0
  
--HEI - Number of received doses (any vaccine with measles component) / HEI - Number of Measles vaccine doses received
SELECT @FFP_NumberOfReceivedDoses_M = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_NumberOfReceivedDoses_M'
AND intRowStatus = 0

SELECT @FFP_NumberOfReceivedDoses_R = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_NumberOfReceivedDoses_R'
AND intRowStatus = 0  	

--HEI - Date of last vaccination/HEI - Date of last Measles vaccine
SELECT @FFP_DateOfLastVaccination_M = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_DateOfLastVaccination_M'
AND intRowStatus = 0	

SELECT @FFP_DateOfLastVaccination_R = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_DateOfLastVaccination_R'
AND intRowStatus = 0	  
	
--HCS - Fever/HCS - Fever
SELECT @FFP_Fever_M = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Fever_M'
AND intRowStatus = 0

SELECT @FFP_Fever_R = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Fever_R'
AND intRowStatus = 0  	
	
--HCS - Cough / Coryza / Conjunctivitis /HCS - Cough / Coryza / Conjunctivitis
SELECT @FFP_Cough_M = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Cough_M'
AND intRowStatus = 0	

SELECT @FFP_Cough_R = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Cough_R'
AND intRowStatus = 0	 


SELECT @FFP_Coryza_M = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Coryza_M'
AND intRowStatus = 0	

SELECT @FFP_Coryza_R = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Coryza_R'
AND intRowStatus = 0	  	


SELECT @FFP_Conjunctivitis_M = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Conjunctivitis_M'
AND intRowStatus = 0	

SELECT @FFP_Conjunctivitis_R = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Conjunctivitis_R'
AND intRowStatus = 0	  	


--HCS - Rash duration / HCS - Duration (days)
SELECT @FFP_RashDuration_M = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_RashDuration_M'
AND intRowStatus = 0

SELECT @FFP_RashDuration_R = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_RashDuration_R'
AND intRowStatus = 0  	
	
--EPI - Source of infection / EPI - Source of infection
SELECT @FFP_SourceOfInfection_M = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_SourceOfInfection_M'
AND intRowStatus = 0		

SELECT @FFP_SourceOfInfection_R = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_SourceOfInfection_R'
AND intRowStatus = 0	  	

--HCS - Complications / HCS - Complications
SELECT @FFP_Complications_M = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Complications_M'
AND intRowStatus = 0		

SELECT @FFP_Complications_R = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Complications_R'
AND intRowStatus = 0		  

--HCS - Encephalitis / HCS - Encephalitis
SELECT @FFP_Encephalitis_M = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Encephalitis_M'
AND intRowStatus = 0		

SELECT @FFP_Encephalitis_R = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Encephalitis_R'
AND intRowStatus = 0	  	

--HCS - Pneumonia / HCS - Pneumonia
SELECT @FFP_Pneumonia_M = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Pneumonia_M'
AND intRowStatus = 0	

SELECT @FFP_Pneumonia_R = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Pneumonia_R'
AND intRowStatus = 0	  	
	
--HCS - Diarrhoea / HCS - Diarrhoea
SELECT @FFP_Diarrhoea_M = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Diarrhoea_M'
AND intRowStatus = 0		

--SELECT @FFP_Diarrhoea_R = idfsFFObject FROM trtFFObjectForCustomReport
--WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Diarrhoea_R'
--AND intRowStatus = 0		  	

--HCS - Other (specify) / HCS - Other
SELECT @FFP_Other_M = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Other_M'
AND intRowStatus = 0	 

--SELECT @FFP_Other_R = idfsFFObject FROM trtFFObjectForCustomReport
--WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Other_R'
--AND intRowStatus = 0	   	

 	
--idfsDiagnosis for:
--Measles
SELECT top 1 @idfsDiagnosis_Measles = d.idfsDiagnosis
FROM trtDiagnosis d
  INNER JOIN dbo.trtDiagnosisToGroupForReportType dgrt
  ON dgrt.idfsDiagnosis = d.idfsDiagnosis
  AND dgrt.idfsCustomReportType = @idfsSummaryReportType
  
  INNER JOIN dbo.trtReportDiagnosisGroup dg
  ON dgrt.idfsReportDiagnosisGroup = dg.idfsReportDiagnosisGroup
  AND dg.intRowStatus = 0 AND dg.strDiagnosisGroupAlias = 'DG_Measles'
 WHERE d.intRowStatus = 0

--Rubella
SELECT top 1 @idfsDiagnosis_Rubella = d.idfsDiagnosis
FROM trtDiagnosis d
  INNER JOIN dbo.trtDiagnosisToGroupForReportType dgrt
  ON dgrt.idfsDiagnosis = d.idfsDiagnosis
  AND dgrt.idfsCustomReportType = @idfsSummaryReportType
  
  INNER JOIN dbo.trtReportDiagnosisGroup dg
  ON dgrt.idfsReportDiagnosisGroup = dg.idfsReportDiagnosisGroup
  AND dg.intRowStatus = 0 AND dg.strDiagnosisGroupAlias = 'DG_Rubella'
 WHERE d.intRowStatus = 0	


-- DECLARE @AreaIDs TABLE
-- (
-- intAreaID INT,
-- idfsRegion BIGINT
-- )

--INSERT INTO @AreaIDs (intAreaID, idfsRegion)
--SELECT		
--CAST(tgra.varValue AS INT), reg.idfsReference
--FROM trtGISBaseReferenceAttribute tgra
--	INNER JOIN trtAttributeType tat
--	ON tat.idfAttributeType = tgra.idfAttributeType
--	AND tat.strAttributeTypeName = 'WHOrep_specific_gis_region'
--  INNER JOIN report.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000003 /*Region*/) reg
--	  ON reg.idfsReference = tgra.idfsGISBaseReference AND reg.intRowStatus = 0 

DECLARE	@DateOnsetParameter BIGINT = -100
IF	@idfsDiagnosis = @idfsDiagnosis_Measles
	SET	@DateOnsetParameter = @FFP_DateOfOnset_M
ELSE IF	@idfsDiagnosis = @idfsDiagnosis_Rubella
	SET	@DateOnsetParameter = @FFP_DateOfOnset_R

INSERT INTO	#HumanCasesToExport
(	idfHumanCase,
	idfHuman,
	idfCRAddress,
	idfsDiagnosis,
	idfCSObservation,
	idfEpiObservation,
	datDateOnset,
	idfOutbreak
)
SELECT	hc.idfHumanCase,
		h.idfHuman,
		h.idfCurrentResidenceAddress,
		ISNULL(hc.idfsFinalDiagnosis, hc.idfsTentativeDiagnosis),
		hc.idfCSObservation,
		hc.idfEpiObservation,
		COALESCE(	
			CASE
				WHEN	(CAST(SQL_VARIANT_PROPERTY(ap_DateOfOnset.varValue, 'BaseType') AS NVARCHAR) like N'%date%') or
						(CAST(SQL_VARIANT_PROPERTY(ap_DateOfOnset.varValue, 'BaseType') AS NVARCHAR) like N'%char%' AND ISDATE(CAST(ap_DateOfOnset.varValue AS NVARCHAR)) = 1) 
					THEN dbo.fnDateCutTime(CAST(ap_DateOfOnset.varValue AS DATETIME))
					ELSE NULL
			END, hc.datOnSetDate, hc.datFinalDiagnosisDate, hc.datTentativeDiagnosisDate, hc.datNotificationDate, hc.datEnteredDate
			),
		hc.idfOutbreak
FROM tlbHumanCase hc

	INNER JOIN tlbHuman h
	ON hc.idfHuman = h.idfHuman AND  h.intRowStatus = 0	
	OUTER APPLY ( 
		SELECT top 1 
			ap.varValue
		FROM tlbActivityParameters ap
		WHERE	ap.idfObservation = hc.idfCSObservation
			AND	ap.idfsParameter = @DateOnsetParameter
			AND ap.intRowStatus = 0
		ORDER BY ap.idfRow ASC	
	) AS  ap_DateOfOnset

WHERE	
	hc.intRowStatus = 0
	AND 	
	ISNULL(hc.idfsFinalDiagnosis, hc.idfsTentativeDiagnosis) = @idfsDiagnosis 
	AND
	COALESCE(	
		CASE
			WHEN	(CAST(SQL_VARIANT_PROPERTY(ap_DateOfOnset.varValue, 'BaseType') AS NVARCHAR) like N'%date%') or
					(CAST(SQL_VARIANT_PROPERTY(ap_DateOfOnset.varValue, 'BaseType') AS NVARCHAR) like N'%char%' AND ISDATE(CAST(ap_DateOfOnset.varValue AS NVARCHAR)) = 1) 
				THEN dbo.fnDateCutTime(CAST(ap_DateOfOnset.varValue AS DATETIME))
				ELSE NULL
		END, hc.datOnSetDate, hc.datFinalDiagnosisDate, hc.datTentativeDiagnosisDate, hc.datNotificationDate, hc.datEnteredDate
			) >= @StartDate
	
	AND
	COALESCE(	
		CASE
			WHEN	(CAST(SQL_VARIANT_PROPERTY(ap_DateOfOnset.varValue, 'BaseType') AS NVARCHAR) like N'%date%') or
					(CAST(SQL_VARIANT_PROPERTY(ap_DateOfOnset.varValue, 'BaseType') AS NVARCHAR) like N'%char%' AND ISDATE(CAST(ap_DateOfOnset.varValue AS NVARCHAR)) = 1) 
				THEN dbo.fnDateCutTime(CAST(ap_DateOfOnset.varValue AS DATETIME))
				ELSE NULL
		END, hc.datOnSetDate, hc.datFinalDiagnosisDate, hc.datTentativeDiagnosisDate, hc.datNotificationDate, hc.datEnteredDate
			) <= @EndDate   			
		AND hc.idfHumanCase = (SELECT TOP 1 idfHumanCase FROM tlbHumanCase thc WHERE thc.idfCSObservation = hc.idfCSObservation and thc.idfsFinalDiagnosis = @idfsDiagnosis)

INSERT INTO	#FFToExport
(	idfActivityParameters,
	idfsParameter,
	idfObservation,
	idfRow,
	varValue
)
SELECT		ap.idfActivityParameters,
			ap.idfsParameter,
			ap.idfObservation,
			ap.idfRow,
			ap.varValue
FROM		tlbActivityParameters ap
INNER JOIN	#HumanCasesToExport hc_cs
ON			hc_cs.idfCSObservation = ap.idfObservation
WHERE		ap.intRowStatus = 0

INSERT INTO	#FFToExport
(	idfActivityParameters,
	idfsParameter,
	idfObservation,
	idfRow,
	varValue
)
SELECT		ap.idfActivityParameters,
			ap.idfsParameter,
			ap.idfObservation,
			ap.idfRow,
			ap.varValue
FROM		tlbActivityParameters ap
INNER JOIN	#HumanCasesToExport hc_epi
ON			hc_epi.idfEpiObservation = ap.idfObservation
left JOIN	#HumanCasesToExport hc_cs
ON			hc_cs.idfCSObservation = hc_epi.idfEpiObservation
WHERE		ap.intRowStatus = 0
			AND hc_cs.idfHumanCase IS NULL


DECLARE	@FFP_NumberOfReceivedDoses BIGINT = -100
IF	@idfsDiagnosis = @idfsDiagnosis_Measles
	SET	@FFP_NumberOfReceivedDoses = @FFP_NumberOfReceivedDoses_M
ELSE IF	@idfsDiagnosis = @idfsDiagnosis_Rubella
	SET	@FFP_NumberOfReceivedDoses = @FFP_NumberOfReceivedDoses_R

DECLARE	@FFP_DateOfLastVaccination BIGINT = -100
IF	@idfsDiagnosis = @idfsDiagnosis_Measles
	SET	@FFP_DateOfLastVaccination = @FFP_DateOfLastVaccination_M
ELSE IF	@idfsDiagnosis = @idfsDiagnosis_Rubella
	SET	@FFP_DateOfLastVaccination = @FFP_DateOfLastVaccination_R
	
DECLARE	@FFP_Fever BIGINT = -100
IF	@idfsDiagnosis = @idfsDiagnosis_Measles
	SET	@FFP_Fever = @FFP_Fever_M
ELSE IF	@idfsDiagnosis = @idfsDiagnosis_Rubella
	SET	@FFP_Fever = @FFP_Fever_R

DECLARE	@FFP_Cough BIGINT = -100
IF	@idfsDiagnosis = @idfsDiagnosis_Measles
	SET	@FFP_Cough = @FFP_Cough_M
ELSE IF	@idfsDiagnosis = @idfsDiagnosis_Rubella
	SET	@FFP_Cough = @FFP_Cough_R
	
DECLARE	@FFP_Coryza BIGINT = -100
IF	@idfsDiagnosis = @idfsDiagnosis_Measles
	SET	@FFP_Coryza = @FFP_Coryza_M
ELSE IF	@idfsDiagnosis = @idfsDiagnosis_Rubella
	SET	@FFP_Coryza = @FFP_Coryza_R
	
DECLARE	@FFP_Conjunctivitis BIGINT = -100
IF	@idfsDiagnosis = @idfsDiagnosis_Measles
	SET	@FFP_Conjunctivitis = @FFP_Conjunctivitis_M
ELSE IF	@idfsDiagnosis = @idfsDiagnosis_Rubella
	SET	@FFP_Conjunctivitis = @FFP_Conjunctivitis_R
	
DECLARE	@FFP_RashDuration BIGINT = -100
IF	@idfsDiagnosis = @idfsDiagnosis_Measles
	SET	@FFP_RashDuration = @FFP_RashDuration_M
ELSE IF	@idfsDiagnosis = @idfsDiagnosis_Rubella
	SET	@FFP_RashDuration = @FFP_RashDuration_R

DECLARE	@FFP_SourceOfInfection BIGINT = -100
IF	@idfsDiagnosis = @idfsDiagnosis_Measles
	SET	@FFP_SourceOfInfection = @FFP_SourceOfInfection_M
ELSE IF	@idfsDiagnosis = @idfsDiagnosis_Rubella
	SET	@FFP_SourceOfInfection = @FFP_SourceOfInfection_R

DECLARE	@FFP_Complications BIGINT = -100
IF	@idfsDiagnosis = @idfsDiagnosis_Measles
	SET	@FFP_Complications = @FFP_Complications_M
ELSE IF	@idfsDiagnosis = @idfsDiagnosis_Rubella
	SET	@FFP_Complications = @FFP_Complications_R

DECLARE	@FFP_Encephalitis BIGINT = -100
IF	@idfsDiagnosis = @idfsDiagnosis_Measles
	SET	@FFP_Encephalitis = @FFP_Encephalitis_M
ELSE IF	@idfsDiagnosis = @idfsDiagnosis_Rubella
	SET	@FFP_Encephalitis = @FFP_Encephalitis_R

DECLARE	@FFP_Pneumonia BIGINT = -100
IF	@idfsDiagnosis = @idfsDiagnosis_Measles
	SET	@FFP_Pneumonia = @FFP_Pneumonia_M
ELSE IF	@idfsDiagnosis = @idfsDiagnosis_Rubella
	SET	@FFP_Pneumonia = @FFP_Pneumonia_R

DECLARE	@FFP_Diarrhoea BIGINT = -100
IF	@idfsDiagnosis = @idfsDiagnosis_Measles
	SET	@FFP_Diarrhoea = @FFP_Diarrhoea_M

DECLARE	@FFP_Other BIGINT = -100
IF	@idfsDiagnosis = @idfsDiagnosis_Measles
	SET	@FFP_Other = @FFP_Other_M


UPDATE hc
SET	hc.NumberOfReceivedDoses = CAST(ap_NumberOfReceivedDoses.varValue AS NVARCHAR(50)),
	hc.DateOfLastVaccination = 
	CASE
		WHEN CAST(SQL_VARIANT_PROPERTY(ap_DateOfLastVaccination.varValue, 'BaseType') AS NVARCHAR) like N'%date%' or
				(CAST(SQL_VARIANT_PROPERTY(ap_DateOfLastVaccination.varValue, 'BaseType') AS NVARCHAR) like N'%char%' AND ISDATE(CAST(ap_DateOfLastVaccination.varValue AS NVARCHAR)) = 1 )	
			THEN dbo.FN_GBL_DATECUTTIME(CAST(ap_DateOfLastVaccination.varValue AS DATETIME))
		ELSE NULL
	END,
	hc.Fever = 
	CASE
		WHEN SQL_VARIANT_PROPERTY(ap_Fever.varValue, 'BaseType') in ('BIGINT','decimal','float','INT','numeric','real','smallint','tinyint')
			THEN CAST(ap_Fever.varValue AS BIGINT)
		ELSE NULL
	END,
	hc.Cough =
	CASE
		WHEN SQL_VARIANT_PROPERTY(ap_Cough.varValue, 'BaseType') in ('BIGINT','decimal','float','INT','numeric','real','smallint','tinyint')
			THEN CAST(ap_Cough.varValue AS BIGINT)
		ELSE NULL
	END,
	hc.Coryza =
	CASE
		WHEN SQL_VARIANT_PROPERTY(ap_Coryza.varValue, 'BaseType') in ('BIGINT','decimal','float','INT','numeric','real','smallint','tinyint')
			THEN CAST(ap_Coryza.varValue AS BIGINT)
		ELSE NULL
	END,  		
	hc.Conjunctivitis =
	CASE
		WHEN SQL_VARIANT_PROPERTY(ap_Conjunctivitis.varValue, 'BaseType') in ('BIGINT','decimal','float','INT','numeric','real','smallint','tinyint')
			THEN CAST(ap_Conjunctivitis.varValue AS BIGINT)
		ELSE NULL
	END,  
	hc.RashDuration = CAST(ap_RashDuration.varValue AS NVARCHAR(50)),	
	hc.SourceOfInfection =
	CASE
		WHEN SQL_VARIANT_PROPERTY(ap_SourceOfInfection.varValue, 'BaseType') in ('BIGINT','decimal','float','INT','numeric','real','smallint','tinyint')
			THEN CAST(ap_SourceOfInfection.varValue AS BIGINT)
		ELSE NULL
	END,   
	hc.Complications =
	CASE
		WHEN SQL_VARIANT_PROPERTY(ap_Complications.varValue, 'BaseType') in ('BIGINT','decimal','float','INT','numeric','real','smallint','tinyint')
			THEN CAST(ap_Complications.varValue AS BIGINT)
		ELSE NULL
	END,    
	hc.Encephalitis =
	CASE
		WHEN SQL_VARIANT_PROPERTY(ap_Encephalitis.varValue, 'BaseType') in ('BIGINT','decimal','float','INT','numeric','real','smallint','tinyint')
			THEN CAST(ap_Encephalitis.varValue AS BIGINT)
		ELSE NULL
	END,    
	hc.Pneumonia =
	CASE
		WHEN SQL_VARIANT_PROPERTY(ap_Pneumonia.varValue, 'BaseType') in ('BIGINT','decimal','float','INT','numeric','real','smallint','tinyint')
			THEN CAST(ap_Pneumonia.varValue AS BIGINT)
		ELSE NULL
	END,    	
	hc.Diarrhoea =
	CASE
		WHEN SQL_VARIANT_PROPERTY(ap_Diarrhoea.varValue, 'BaseType') in ('BIGINT','decimal','float','INT','numeric','real','smallint','tinyint')
			THEN CAST(ap_Diarrhoea.varValue AS BIGINT)
		ELSE NULL
	END,    
	hc.Other = CAST(ap_Other.varValue AS NVARCHAR(500))	  		  		  		  			

 FROM #HumanCasesToExport hc
			
	OUTER APPLY ( 
		SELECT top 1 
			ap.varValue
		FROM #FFToExport ap
		WHERE	ap.idfObservation = hc.idfEpiObservation
			AND	ap.idfsParameter = @FFP_NumberOfReceivedDoses
			--AND ap.intRowStatus = 0
		ORDER BY ap.idfRow ASC	
	) AS  ap_NumberOfReceivedDoses		
	 			
	OUTER APPLY ( 
		SELECT top 1 
			ap.varValue
		FROM #FFToExport ap
		WHERE	ap.idfObservation = hc.idfEpiObservation
			AND	ap.idfsParameter = @FFP_DateOfLastVaccination
			--AND ap.intRowStatus = 0
		ORDER BY ap.idfRow ASC	
	) AS  ap_DateOfLastVaccination 	
		
	OUTER APPLY ( 
		SELECT top 1 
			ap.varValue
		FROM #FFToExport ap
		WHERE	ap.idfObservation = hc.idfCSObservation
			AND	ap.idfsParameter = @FFP_Fever
			--AND ap.intRowStatus = 0
		ORDER BY ap.idfRow ASC	
	) AS  ap_Fever	
	
		
	OUTER APPLY ( 
		SELECT top 1 
			ap.varValue
		FROM #FFToExport ap
		WHERE	ap.idfObservation = hc.idfCSObservation
			AND	ap.idfsParameter = @FFP_Cough
			--AND ap.intRowStatus = 0
		ORDER BY ap.idfRow ASC	
	) AS  ap_Cough	
	
	OUTER APPLY ( 
		SELECT top 1 
			ap.varValue
		FROM #FFToExport ap
		WHERE	ap.idfObservation = hc.idfCSObservation
			AND	ap.idfsParameter = @FFP_Coryza
			--AND ap.intRowStatus = 0
		ORDER BY ap.idfRow ASC	
	) AS  ap_Coryza
	
	OUTER APPLY ( 
		SELECT top 1 
			ap.varValue
		FROM #FFToExport ap
		WHERE	ap.idfObservation = hc.idfCSObservation
			AND	ap.idfsParameter = @FFP_Conjunctivitis	
			--AND ap.intRowStatus = 0
		ORDER BY ap.idfRow ASC	
	) AS  ap_Conjunctivitis

	OUTER APPLY ( 
		SELECT top 1 
			ap.varValue
		FROM #FFToExport ap
		WHERE	ap.idfObservation = hc.idfCSObservation
			AND	ap.idfsParameter = @FFP_RashDuration	
			--AND ap.intRowStatus = 0
		ORDER BY ap.idfRow ASC	
	) AS  ap_RashDuration
	
	OUTER APPLY ( 
		SELECT top 1 
			ap.varValue
		FROM #FFToExport ap
		WHERE	ap.idfObservation = hc.idfEpiObservation
			AND	ap.idfsParameter = @FFP_SourceOfInfection	
			--AND ap.intRowStatus = 0
		ORDER BY ap.idfRow ASC	
	) AS  ap_SourceOfInfection
	
	OUTER APPLY ( 
		SELECT top 1 
			ap.varValue
		FROM #FFToExport ap
		WHERE	ap.idfObservation = hc.idfCSObservation
			AND	ap.idfsParameter = @FFP_Complications		
			--AND ap.intRowStatus = 0
		ORDER BY ap.idfRow ASC	
	) AS  ap_Complications
	
	OUTER APPLY ( 
		SELECT top 1 
			ap.varValue
		FROM #FFToExport ap
		WHERE	ap.idfObservation = hc.idfCSObservation
			AND	ap.idfsParameter = @FFP_Encephalitis				
			--AND ap.intRowStatus = 0
		ORDER BY ap.idfRow ASC	
	) AS  ap_Encephalitis

	OUTER APPLY ( 
		SELECT top 1 
			ap.varValue
		FROM #FFToExport ap
		WHERE	ap.idfObservation = hc.idfCSObservation
			AND	ap.idfsParameter = @FFP_Pneumonia				
			--AND ap.intRowStatus = 0
		ORDER BY ap.idfRow ASC	
	) AS  ap_Pneumonia
	
	OUTER APPLY ( 
		SELECT top 1 
			ap.varValue
		FROM #FFToExport ap
		WHERE	ap.idfObservation = hc.idfCSObservation
			AND	ap.idfsParameter = @FFP_Diarrhoea						
			--AND ap.intRowStatus = 0
		ORDER BY ap.idfRow ASC	
	) AS  ap_Diarrhoea


	OUTER APPLY ( 
		SELECT top 1 
			ap.varValue
		FROM #FFToExport ap
		WHERE	ap.idfObservation = hc.idfCSObservation
			AND	ap.idfsParameter = @FFP_Other							
			--AND ap.intRowStatus = 0
		ORDER BY ap.idfRow ASC	
	) AS  ap_Other


UPDATE	ct
SET		ct.datConcludedDate = material.datConcludedDate,
		ct.idfsSampleType = material.idfsSampleType,
		ct.datFieldCollectionDate = material.datFieldCollectionDate,
		ct.idfsTestResult = material.idfsTestResult,
		ct.idfsTestStatus = material.idfsTestStatus,
		ct.idfTesting = material.idfTesting
FROM	#HumanCasesToExport ct	
OUTER APPLY	(
	SELECT top 1 
		dbo.fnDateCutTime(tt.datConcludedDate) AS datConcludedDate,
		ISNULL(rm.idfsSampleType, m.idfsSampleType) AS idfsSampleType,
		m.datFieldCollectionDate,
		tt.idfsTestResult,
		tt.idfsTestStatus,
		tt.idfTesting
	FROM tlbMaterial m
		left JOIN tlbTesting tt
			INNER JOIN trtTestTypeForCustomReport ttcr
			ON ttcr.idfsTestName = tt.idfsTestName
			AND ttcr.intRowStatus = 0
			AND ttcr.idfsCustomReportType = @idfsSummaryReportType
		ON tt.idfMaterial = m.idfMaterial
		/*Added 2018-01-22 start*/
		AND tt.idfsDiagnosis = ct.idfsDiagnosis
		/*Added 2018-01-22 END*/
		AND tt.intRowStatus = 0
		AND tt.datConcludedDate IS NOT NULL
		
		left JOIN tlbMaterial rm
		ON rm.idfMaterial = m.idfParentMaterial
		AND rm.intRowStatus = 0						
		
   WHERE m.idfHumanCase = ct.idfHumanCase
			AND m.intRowStatus = 0
   ORDER BY ISNULL(tt.datConcludedDate, '19000101') DESC, m.datFieldCollectionDate DESC
   )	AS material	 

 DECLARE @SampleTypeIDs TABLE
 (
	strSampleTypeIDs	NVARCHAR(100),
	idfHumanCase BIGINT
 )

 INSERT INTO @SampleTypeIDs (strSampleTypeIDs, idfHumanCase)
	SELECT STRING_AGG([idfsSampleType], ','), 
			SampleTypes.idfHumanCase
	FROM 
		(SELECT	CASE Samples.idfsSampleType
					WHEN 9844480000000	/*Blood - Serum*/  THEN 1 	--Blood - Serum
					WHEN 9845550000000	/*Saliva*/ THEN 2 		--Saliva/oral fluid
					WHEN 9845840000000	/*Swab - Nose or Swab - Pharyngeal or Swab - Rhinopharyngeal*/ THEN 3 --Nasopharyngeal swab
					WHEN 52614520000000 	/*Dry Blood Spot*/ THEN 4 	--Dry Blood Spot
					WHEN 9846060000000	/*Urine*/ THEN 5 			--Urine
					WHEN 9844450000000 	/*Blood - anticoagulated whole blood*/ THEN 6 --EDTA whole blood
					WHEN -1 THEN NULL
					ELSE 7
			END AS idfsSampleType,
			Samples.idfHumanCase
		FROM		dbo.tlbMaterial Samples 
				INNER JOIN	dbo.tlbHumanCase as hc 
					ON Samples.idfHumanCase  = hc.idfHumanCase 
				LEFT JOIN	dbo.FN_GBL_REFERENCEREPAIR(@LangID,19000087) SampleType 
					ON	SampleType.idfsReference = Samples.idfsSampleType
				INNER JOIN #HumanCasesToExport ct
					ON hc.idfHumanCase = ct.idfHumanCase
		WHERE		Samples.idfHumanCase = ct.idfHumanCase
				AND	Samples.intRowStatus = 0
		) SampleTypes
	GROUP BY SampleTypes.idfHumanCase


	SELECT
		ct.idfHumanCase AS idfCase,
		CAST(to1.idfOutbreak as varchar(20)) AS strReportID,
		CONCAT(gwm.WHOAreaID,YEAR(@StartDate), hc.strCaseID) AS strCaseID,
		gwm.AreaID AS strAreaID, 
		dbo.fnDateCutTime(ct.datDateOnset) AS datDRash, 
		CASE 
			WHEN h.idfsHumanGender = 10043001 THEN 2
			WHEN h.idfsHumanGender = 10043002 THEN 1
			ELSE 4
		END AS intGenderID, 
		--dbo.fnDateCutTime(h.datDateofBirth) AS datDBirth, 
		CAST(h.datDateofBirth AS DATE) AS datDBirth, 
		CASE
			WHEN	ISNULL(hc.idfsHumanAgeType, -1) = 10042003	-- Years 
					AND (ISNULL(hc.intPatientAge, -1) >= 0 AND ISNULL(hc.intPatientAge, -1) <= 200)
				THEN	hc.intPatientAge
			WHEN	ISNULL(hc.idfsHumanAgeType, -1) = 10042002	-- Months
					AND (ISNULL(hc.intPatientAge, -1) >= 0 AND ISNULL(hc.intPatientAge, -1) <= 60)
				THEN	CAST(hc.intPatientAge / 12 AS INT)
			WHEN	ISNULL(hc.idfsHumanAgeType, -1) = 10042001	-- Days
					AND (ISNULL(hc.intPatientAge, -1) >= 0)
				THEN	0
			ELSE	
				DATEDIFF(YEAR, h.datDateofBirth, ct.datDateOnset) + 
                         CASE 
                           WHEN MONTH(ct.datDateOnset) < MONTH(h.datDateofBirth) THEN -1 
                           WHEN MONTH(ct.datDateOnset) > MONTH(h.datDateofBirth) THEN 0 
                           ELSE 
                             CASE WHEN DAY(ct.datDateOnset) < DAY(h.datDateofBirth) THEN -1 ELSE 0 END 
                         END
		END	 AS intAgeAtRashOnset,     	
		
		ISNULL(CASE WHEN isnumeric(ct.NumberOfReceivedDoses) = 1  AND CAST(ct.NumberOfReceivedDoses AS varchar) NOT in ('.', ',', '-', '+', '$')
					THEN	
						CASE  CAST(ct.NumberOfReceivedDoses AS BIGINT)
							WHEN 9878670000000 THEN 0
							WHEN 9878680000000 THEN 1
							WHEN 9878690000000 THEN 2
							WHEN 9878700000000 THEN 3
							ELSE 9
						END	
					ELSE 9 END
			, 9)	 AS intNumOfVaccines, 
			
		CAST(ct.DateOfLastVaccination AS DATE) AS datDvaccine, 			
		CAST(hc.datNotificationDate AS DATE) AS datDNotification, 
		CAST(hc.datInvestigationStartDate AS DATE) AS datDInvestigation, 
 		
		CASE ct.Fever
			WHEN 25460000000 THEN 1
			WHEN 25640000000 THEN 2
			WHEN 25660000000 THEN 9
			ELSE NULL
		END	 AS intClinFever, 
		
		CASE 
			CASE 
				WHEN ct.Cough = 25460000000 or ct.Coryza = 25460000000 or ct.Conjunctivitis = 25460000000 THEN 25460000000
				WHEN ct.Cough = 25640000000 AND ct.Coryza = 25640000000 AND ct.Conjunctivitis = 25640000000 THEN 25640000000
				ELSE 25660000000
			END		
			WHEN 25460000000 THEN 1
			WHEN 25640000000 THEN 2
			ELSE 9
		END	 AS intClinCCC, 			    			
		CASE WHEN isnumeric(ct.RashDuration) = 1  AND CAST(ct.RashDuration AS varchar) NOT in ('.', ',', '-', '+', '$')
				THEN --CAST(ct.RashDuration AS INT) 
					 CAST(CAST(replace(ct.RashDuration,',','.') AS decimal) AS INT)
				ELSE 2222 END AS intClinRashDuration,
			
		CASE hc.idfsOutcome
			WHEN 10770000000 THEN 1
			WHEN 10760000000 THEN 2
			WHEN 10780000000 THEN 3
			ELSE 3
		END AS intClinOutcome, 
		
		CASE hc.idfsYNHospitalization   
			WHEN 10100001 THEN 1
			WHEN 10100002 THEN 2
			WHEN 10100003 THEN 9
			ELSE NULL
		END AS intClinHospitalization, 
		
		-- GG - FF parameter = 'Source of infection' -- idfsParameter = 9951440000000
		--9879590000000	Imported
		--9879600000000	Import-related
		--9879610000000	Indigenous
		--9879620000000	Unknown
		--Indigenous=Endemic, Imported=Imported, Import-related=Import-related, Unknown = Unknown, Blank = Blank

		CASE ct.SourceOfInfection 
			--GG
			WHEN 9879590000000 THEN 1 --Imported = Imported
			WHEN 9879610000000 THEN 2 --Indigenous = Endemic
			WHEN 9879600000000 THEN 3 -- Import-related=Import-related
			WHEN 9879620000000 THEN 9 --  Unknown = Unknown
			ELSE NULL --Blank = Blank
		END	 AS intSrcInf, 
		
		
		CASE hc.idfsYNRelatedToOutbreak
			WHEN 10100001 THEN 1
			WHEN 10100002 THEN 2
			WHEN 10100003 THEN 9
			ELSE 
				CASE WHEN (to1.strOutbreakID IS NOT NULL) THEN 1
					ELSE 2
				END
		END AS intSrcOutbreakRelated, 
  
		to1.strOutbreakID AS strSrcOutbreakID,
		
		CASE WHEN (to1.strOutbreakID IS NOT NULL) 
		  THEN
		  CASE 
			CASE 
				-- GG
				WHEN ct.Complications = 25460000000 AND ct.idfsDiagnosis = @idfsDiagnosis_Measles THEN 25460000000
				WHEN ct.Complications = 25640000000 AND ct.idfsDiagnosis = @idfsDiagnosis_Measles THEN 25640000000
				WHEN ct.Complications = 25660000000 AND ct.idfsDiagnosis = @idfsDiagnosis_Measles THEN 25660000000
				ELSE 25660000000
			END		
			WHEN 25460000000 THEN 1
			WHEN 25640000000 THEN 2
			WHEN 25660000000 THEN 9
			ELSE NULL
		END	 
		ELSE NULL
		END AS intCompComplications, 		 					
		
		CASE WHEN (to1.strOutbreakID IS NOT NULL) 
		  THEN
		CASE WHEN ct.Complications = 25460000000 /*Yes*/ AND ct.idfsDiagnosis = @idfsDiagnosis_Measles 
			THEN
				CASE ct.Encephalitis 
					WHEN 25460000000 THEN 1 
					WHEN 25640000000 THEN 2 
					WHEN 25660000000 THEN 9 		
					ELSE NULL
				END	 
			ELSE NULL
		END	 
		ELSE NULL
		END AS intCompEncephalitis, 				
	
		CASE WHEN (to1.strOutbreakID IS NOT NULL) 
		  THEN		
		CASE WHEN ct.Complications = 25460000000 /*Yes*/ AND ct.idfsDiagnosis = @idfsDiagnosis_Measles 
			THEN
				CASE ct.Pneumonia 
					WHEN 25460000000 THEN 1 
					WHEN 25640000000 THEN 2 
					WHEN 25660000000 THEN 9 		
					ELSE NULL
				END		 
			ELSE NULL
		END	 
		ELSE NULL
		END AS intCompPneumonia, 				
    
		NULL AS intCompMalnutrition, 
	
		CASE WHEN (to1.strOutbreakID IS NOT NULL) 
		  THEN		
		CASE WHEN ct.Complications = 25460000000 /*Yes*/ AND ct.idfsDiagnosis = @idfsDiagnosis_Measles 
			THEN
				CASE ct.Diarrhoea 
					WHEN 25460000000 THEN 1 
					WHEN 25640000000 THEN 2 
					WHEN 25660000000 THEN 9 		
					ELSE NULL
				END		 
			ELSE NULL
		END	 
		ELSE NULL
		END AS intCompDiarrhoea, 		

		CASE WHEN (to1.strOutbreakID IS NOT NULL) 
		  THEN		
		CASE WHEN ct.Complications = 25460000000 /*Yes*/ AND ct.idfsDiagnosis = @idfsDiagnosis_Measles 
			THEN
				CASE WHEN len(ct.Other) > 0 THEN 1 ELSE 2 END 
			ELSE NULL
		END	 
		ELSE NULL
		END AS intCompOther, 		
            
		CASE 
			WHEN hc.idfsFinalCaseStatus = 370000000  --NOT a CASE
					THEN 0
			WHEN hc.idfsFinalCaseStatus = 350000000 --Confirmed
				AND ct.idfsDiagnosis = @idfsDiagnosis_Measles
				AND hc.blnLabDiagBasis = 1
					THEN 1
			WHEN hc.idfsFinalCaseStatus = 350000000  --Confirmed
				AND ct.idfsDiagnosis = @idfsDiagnosis_Measles
				AND ISNULL(hc.blnLabDiagBasis, 0) = 0
				AND hc.blnEpiDiagBasis = 1
					THEN 2
			--WHEN hc.idfsFinalCaseStatus = 350000000  --Confirmed
			--	AND ISNULL(hc.blnLabDiagBasis, 0) = 0
			--	AND hc.blnClinicalDiagBasis = 1
			--		THEN 3
			WHEN hc.idfsFinalCaseStatus = 360000000 --Probable
				AND ct.idfsDiagnosis = @idfsDiagnosis_Measles
				AND (hc.blnLabDiagBasis = 1 or hc.blnEpiDiagBasis = 1 or hc.blnClinicalDiagBasis = 1)
					THEN 3
			WHEN hc.idfsFinalCaseStatus = 350000000 
				AND ct.idfsDiagnosis = @idfsDiagnosis_Rubella
				AND hc.blnLabDiagBasis = 1
					THEN 6
			WHEN hc.idfsFinalCaseStatus = 350000000 
				AND ct.idfsDiagnosis = @idfsDiagnosis_Rubella
				AND ISNULL(hc.blnLabDiagBasis, 0) = 0
				AND hc.blnEpiDiagBasis = 1
					THEN 7
			WHEN hc.idfsFinalCaseStatus = 360000000 --Probable
				AND ct.idfsDiagnosis = @idfsDiagnosis_Rubella
				AND  (hc.blnLabDiagBasis = 1 or hc.blnEpiDiagBasis = 1 or hc.blnClinicalDiagBasis = 1)
					THEN 8
			WHEN hc.idfsFinalCaseStatus = 380000000	--Suspect
				OR hc.idfsFinalCaseStatus = 12137920000000
				or hc.idfsFinalCaseStatus IS NULL
				or (hc.blnLabDiagBasis IS NULL AND hc.blnEpiDiagBasis IS NULL AND hc.blnClinicalDiagBasis IS NULL)
					THEN NULL
			ELSE NULL
		END intFinalClassification,        
    
    
		CASE 
		   WHEN hc.idfsYNSpecimenCollected = 10100001 THEN ct.datFieldCollectionDate
		   ELSE NULL
		END AS datDSpecimen,       
        
		--Type of sample associated with the test which result IS shown in #29/31. 
		--IF #29/31 IS blank THEN the sample with the latest date of sample collection should be taken. 
		--Blood = 1 Serum, 
		--Blood - serum=1 Serum, 
		--Saliva=2 Saliva/oral fluid, 
		--Swab - Rhinopharyngeal = 3 Nasopharyngeal swab, 
		--Urine=5 Urine, 
		--Blood - anticoagulated whole blood= 6 EDTA whole blood, 
		--in other CASE = 7 Other specimen. 
		--Which sample to send, it shall be defined BY tests (see 29/31) NB: Parent Sample Type should be tranferred to CISID in CASE Sample Derivative was created.  
		
		st.strSampleTypeIDs AS strSpecimen,
	
		CASE 
		   WHEN hc.idfsYNSpecimenCollected = 10100001 THEN ct.datConcludedDate
		   ELSE NULL
		END AS datDLabResult,    			            
       
		

		--Test Name: ELISA IgM, Antibody detection
		--The Result of the lastest "ELISA IgM, Antibody detection" 
		--Test Name shall be taken (BY Result Date). 
		--1 Positive = Positive AND Test Status = Final or Amended, 
		--2 Negative= Negative AND Test Status = Final or Amended, 
		--4 Inclonclusive = Cut off AND Test Status = Final or Amended, 
		--0 NOT Tested = IF sample data IS filled in #26/27 but no test data available, 
		--3 In Process = any test result (including blank) for assigned test AND Test Status = In Process or Preliminary      
		CASE
			ISNULL(
					CASE 
					   WHEN hc.idfsYNSpecimenCollected = 10100001 AND ct.idfsDiagnosis = @idfsDiagnosis_Measles AND ct.idfsTestStatus in (10001001, 10001006) --Final or Amended
							THEN ct.idfsTestResult
					   WHEN hc.idfsYNSpecimenCollected = 10100001 AND ct.idfsDiagnosis = @idfsDiagnosis_Measles AND ct.idfsTestStatus in( 10001003, 10001004)	--In Process or Preliminary   
							THEN 3
					   WHEN ct.idfsDiagnosis = @idfsDiagnosis_Measles AND ct.idfTesting IS NULL AND ct.idfsSampleType IS NOT NULL
							THEN 0
					   ELSE NULL
					END, -1)
			--GG
			WHEN 9848880000000 THEN 4--Indeterminate
			WHEN 9848980000000 THEN 2--Negative
			WHEN 9849050000000 THEN 1--Positive
			WHEN 3			   THEN 3--In Process
			WHEN 0			   THEN 0--Not Tested
			WHEN -1 THEN NULL
			ELSE NULL
		END AS intMeaslesIgm,    
		
		CASE
			ISNULL(
					CASE 
					   WHEN hc.idfsYNSpecimenCollected = 10100001 AND ct.idfsDiagnosis = @idfsDiagnosis_Measles AND ct.idfsTestStatus in (10001001, 10001006) --Final or Amended
							THEN ct.idfsTestResult
					   WHEN hc.idfsYNSpecimenCollected = 10100001 AND ct.idfsDiagnosis = @idfsDiagnosis_Measles AND ct.idfsTestStatus in( 10001003, 10001004)	--In Process or Preliminary   
							THEN 3
					   WHEN ct.idfsDiagnosis = @idfsDiagnosis_Measles AND ct.idfTesting IS NULL AND ct.idfsSampleType IS NOT NULL
							THEN 0
					   ELSE NULL
					END, -1)
			--GG
			--WHEN 9848880000000 THEN 4--Indeterminate
			WHEN 9848980000000 THEN 2--Negative
			WHEN 9849050000000 THEN 1--Positive
			WHEN 3			   THEN 3--In Process
			WHEN 0			   THEN 0--Not Tested
			WHEN -1 THEN NULL
			ELSE NULL
		END AS intMeaslesVirusDetection,
		
		CASE
			ISNULL(
				CASE 
					   WHEN hc.idfsYNSpecimenCollected = 10100001 AND ct.idfsDiagnosis = @idfsDiagnosis_Rubella AND ct.idfsTestStatus  in (10001001, 10001006) --Final or Amended
							THEN ct.idfsTestResult
					   WHEN hc.idfsYNSpecimenCollected = 10100001 AND ct.idfsDiagnosis = @idfsDiagnosis_Rubella AND ct.idfsTestStatus in( 10001003, 10001004)	--In Process or Preliminary   
							THEN 3
					   WHEN ct.idfsDiagnosis = @idfsDiagnosis_Rubella AND ct.idfTesting IS NULL	 AND ct.idfsSampleType IS NOT NULL
							THEN 0
					   ELSE NULL
			END, -1)
			WHEN 9848880000000 THEN 4--Indeterminate
			WHEN 9848980000000 THEN 2--Negative
			WHEN 9849050000000 THEN 1--Positive
			WHEN 3			   THEN 3--In Process
			WHEN 0			   THEN 0--Tested
			WHEN -1 THEN NULL
			ELSE NULL
		END AS intRubellaIgm,  
		NULL AS intRubellaVirusDetection,
		hc.strSummaryNotes AS strComments,
		CASE ct.SourceOfInfection 
			--GG
			WHEN 9879590000000 THEN 'GE' --Imported = Imported
			ELSE '' --Blank = Blank
		END strImportationCountry,
		CASE 
			WHEN CHARINDEX('Measles',NonNotifiableDiagnosisRef.[name]) > 0
					THEN 1
			WHEN CHARINDEX('Rubella',NonNotifiableDiagnosisRef.[name]) > 0
					THEN 2
			ELSE 3
		END intInitialDiagnosis
 			      			
 FROM	#HumanCasesToExport ct
	INNER JOIN tlbHumanCase hc
	ON hc.idfHumanCase = ct.idfHumanCase

	INNER JOIN tlbHuman h
	ON h.idfHuman = ct.idfHuman

	INNER JOIN	tlbGeoLocation gl
	ON gl.idfGeoLocation = ct.idfCRAddress

	left JOIN tlbOutbreak to1
	ON to1.idfOutbreak = hc.idfOutbreak
	AND to1.intRowStatus = 0   

	LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000149) AS NonNotifiableDiagnosisRef
			ON NonNotifiableDiagnosisRef.idfsReference = hc.idfsNonNotifiableDiagnosis

	INNER JOIN gisWHOMap gwm
			ON gwm.idfsLocation = ISNULL(gl.idfsRayon, gl.idfsRegion)

	INNER JOIN @SampleTypeIDs st
	ON st.idfHumanCase = ct.idfHumanCase

ORDER BY ct.datDateOnset, hc.strCaseID


--INSERT INTO	#ResultTable
-- (	
--	  idfCase
--	, strCaseID	
--	, intAreaID	
--	, datDRash	
--	, intGenderID
--	, datDBirth	
--	, intAgeAtRashOnset	
--	, intNumOfVaccines	
--	, datDvaccine	
--	, datDNotification	
--	, datDInvestigation	
--	, intClinFever		
--	, intClinCCC	
--	, intClinRashDuration	
--	, intClinOutcome		
--	, intClinHospitalization	
--	, intSrcInf				
--	, intSrcOutbreakRelated		
--	, strSrcOutbreakID		
--	, intCompComplications	
--	, intCompEncephalitis	
--	, intCompPneumonia		
--	, intCompMalnutrition	
--	, intCompDiarrhoea		
--	, intCompOther		
--	, intFinalClassification
--	, datDSpecimen			
--	, intSpecimen			
--	, datDLabResult			
--	, intMeaslesIgm			
--	, intMeaslesVirusDetection	
--	, intRubellaIgm		
--	, intRubellaVirusDetection		
--	, strCommentsEpi			
--)
--SELECT 
--	idfHumanCase
--	, strCaseID	
--	, intAreaID	
--	, datDRash	
--	, intGenderID
--	, datDBirth	
--	, intAgeAtRashOnset	
--	, intNumOfVaccines	
--	, datDvaccine	
--	, datDNotification	
--	, datDInvestigation	
--	, intClinFever		
--	, intClinCCC	
--	, intClinRashDuration	
--	, intClinOutcome		
--	, intClinHospitalization	
--	, intSrcInf				
--	, intSrcOutbreakRelated		
--	, strSrcOutbreakID		
--	, intCompComplications	
--	, intCompEncephalitis	
--	, intCompPneumonia		
--	, intCompMalnutrition	
--	, intCompDiarrhoea		
--	, intCompOther		
--	, intFinalClassification
--	, datDSpecimen			
--	, intSpecimen			
--	, datDLabResult			
--	, intMeaslesIgm			
--	, intMeaslesVirusDetection	
--	, intRubellaIgm				
--	, intRubellaVirusDetection
--	, strCommentsEpi	 


--FROM hc_table
 


--SELECT * FROM #ResultTable
--ORDER BY datDRash, strCaseID

-- Drop temporary tables
IF Object_ID('tempdb..#HumanCasesToExport') IS NOT NULL
BEGIN
SET	@cmd = N'drop TABLE #HumanCasesToExport'
EXEC sp_executesql @cmd
END

IF Object_ID('tempdb..#ResultTable') IS NOT NULL
BEGIN
SET	@cmd = N'drop TABLE #ResultTable'
EXEC sp_executesql @cmd
END

END
GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_DEDUPLICATION_VET_DISEASE_Report_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_DEDUPLICATION_VET_DISEASE_Report_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USSP_OMM_CONVERT_CONTACT_Set]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USSP_OMM_CONVERT_CONTACT_Set]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_OMM_Contact_Set]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_OMM_Contact_Set]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_HUM_REP_WHOEXPORT]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_HUM_REP_WHOEXPORT]';


GO
PRINT N'Update complete.';


GO
