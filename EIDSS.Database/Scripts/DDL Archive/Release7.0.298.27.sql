/*
Deployment script for EIDSS7_GG

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO


USE [EIDSS7_GAT_Main];


GO

PRINT N'Altering Function [dbo].[FN_VCTS_VSSESSION_DIAGNOSESIDS_GET]...';


GO
-- ================================================================================================
-- Name: FN_VCTS_VSSESSION_DIAGNOSESIDS_GET
--
-- Description: Gets a comma delimited list of disease ids for a vector surveillance session.
--          
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     05/01/2022 Original
-- Mike Kornegay	05/26/2022 Added null reference checks to every query
-- Mike Kornegay	06/10/2022 Moved the semicolon separator to the end of the string
-- Stephen Long     09/29/2022 Fix to split out the diseases with a semi-colon in between.
-- Mike Kornegay	10/06/2022 Added where clauses to include only active records.
--
-- ================================================================================================
ALTER FUNCTION [dbo].[FN_VCTS_VSSESSION_DIAGNOSESIDS_GET]
(
	@idfVectorSurveillanceSession	AS BIGINT,
	@LangID							AS NVARCHAR(50)
)
RETURNS								NVARCHAR(1000)
AS
BEGIN
	DECLARE @strDiagnosesIDs		NVARCHAR(1000);
	
	IF @idfVectorSurveillanceSession IS NOT NULL OR @idfVectorSurveillanceSession <> ''
	BEGIN
		SELECT @strDiagnosesIDs = ISNULL(@strDiagnosesIDs + ';','') + CONVERT(NVARCHAR(1000), vs.idfsDiagnosis)
		FROM (
				SELECT DISTINCT			t.idfsDiagnosis
				FROM					dbo.tlbPensideTest t
				INNER JOIN				dbo.tlbMaterial m 
				ON						m.idfMaterial = t.idfMaterial
				AND						t.intRowStatus = 0
				INNER JOIN				dbo.trtPensideTestTypeToTestResult tr 
				ON						t.idfsPensideTestName = tr.idfsPensideTestName
				AND						t.idfsPensideTestResult = tr.idfsPensideTestResult
				AND						t.intRowStatus = 0
				AND						tr.intRowStatus = 0
				AND						tr.blnIndicative = 1
				WHERE					m.idfVectorSurveillanceSession = @idfVectorSurveillanceSession
				AND						t.idfsDiagnosis is not null

			UNION

				SELECT DISTINCT			t.idfsDiagnosis
				FROM					dbo.tlbTesting t
				INNER JOIN				dbo.tlbMaterial m 
				ON						m.idfMaterial = t.idfMaterial
				WHERE					m.idfVectorSurveillanceSession = @idfVectorSurveillanceSession
				AND						t.idfsDiagnosis is not null
				AND						t.intRowStatus = 0

			UNION

				SELECT DISTINCT			m.DiseaseID
				FROM					dbo.tlbMaterial m
				WHERE					m.idfVectorSurveillanceSession = @idfVectorSurveillanceSession
				AND						m.DiseaseID is not null
				AND						m.intRowStatus = 0

			UNION

				SELECT DISTINCT			vssd.idfsDiagnosis
				FROM					dbo.tlbVectorSurveillanceSessionSummary vss
				INNER JOIN				dbo.tlbVectorSurveillanceSessionSummaryDiagnosis vssd 
				ON						vss.idfsVSSessionSummary = vssd.idfsVSSessionSummary
				WHERE					vss.idfVectorSurveillanceSession = @idfVectorSurveillanceSession
				AND						vssd.idfsDiagnosis is not null
				AND						vssd.intRowStatus = 0

		  ) AS vs;
	END
	RETURN @strDiagnosesIDs;
END
GO
PRINT N'Altering Function [dbo].[FN_VCTS_VSSESSION_DIAGNOSESNAMES_GET]...';


GO

-- ================================================================================================
-- Name: FN_VCTS_VSSESSION_DIAGNOSESNAMES_GET
--
-- Description: Gets a comma delimited list of diagnosis names for a vector surveillance session
--          
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     05/01/2022 Original
-- Mike Kornegay	05/26/2022 Added null reference checks to every query
-- Mike Kornegay	10/06/2022 Added where clauses to include only active records.
--
-- ================================================================================================

ALTER FUNCTION [dbo].[FN_VCTS_VSSESSION_DIAGNOSESNAMES_GET]
(
	@idfVectorSurveillanceSession AS BIGINT--##PARAM @idfVectorSurveillanceSession - AS session ID
	,@LangID AS NVARCHAR(50)--##PARAM @LangID - language ID
)
RETURNS NVARCHAR(1000)
AS
BEGIN
	DECLARE @strDiagnoses NVARCHAR(1000)
	DECLARE @idfsDiagnosises TABLE (idfsDiagnosis BIGINT NOT NULL PRIMARY KEY);
	IF @idfVectorSurveillanceSession IS NOT NULL OR @idfVectorSurveillanceSession <> ''
	BEGIN
		INSERT INTO @idfsDiagnosises
			SELECT 
				DISTINCT	Test.idfsDiagnosis
				FROM		dbo.tlbPensideTest Test
				INNER JOIN	dbo.tlbMaterial Material ON
							Material.idfMaterial = Test.idfMaterial
				AND			Material.intRowStatus = 0
				INNER JOIN	trtPensideTestTypeToTestResult tr ON
							Test.idfsPensideTestName = tr.idfsPensideTestName
				AND			Test.idfsPensideTestResult = tr.idfsPensideTestResult
				AND			tr.intRowStatus = 0
				AND			tr.blnIndicative = 1
				WHERE		test.intRowStatus = 0 
				AND Material.idfVectorSurveillanceSession = @idfVectorSurveillanceSession
				AND Test.idfsDiagnosis is not null

			UNION

				SELECT 
				DISTINCT	Test.idfsDiagnosis
				FROM		dbo.tlbTesting Test
				INNER JOIN	dbo.tlbMaterial Material ON
							Material.idfMaterial = Test.idfMaterial AND material.intRowStatus = 0
				WHERE		Test.intRowStatus = 0 
				AND Material.idfVectorSurveillanceSession = @idfVectorSurveillanceSession
				AND Test.idfsDiagnosis is not null
				
			UNION

				SELECT 
				DISTINCT	Material.DiseaseID
				FROM		dbo.tlbMaterial Material
				WHERE		Material.intRowStatus = 0 
				AND Material.idfVectorSurveillanceSession = @idfVectorSurveillanceSession
				AND Material.DiseaseID is not null

			UNION

				SELECT 
				DISTINCT	Vssd.[idfsDiagnosis] 
				FROM		dbo.tlbVectorSurveillanceSessionSummary Vss
				INNER JOIN	dbo.tlbVectorSurveillanceSessionSummaryDiagnosis Vssd ON
							Vss.[idfsVSSessionSummary] = Vssd.[idfsVSSessionSummary] AND Vssd.intRowStatus = 0
				WHERE		vss.intRowStatus = 0
				AND Vss.idfVectorSurveillanceSession = @idfVectorSurveillanceSession
				AND Vssd.idfsDiagnosis is not null
			
		SELECT @strDiagnoses = ISNULL(@strDiagnoses + '; ','') + ref_Diagnosis.[name]
		FROM @idfsDiagnosises VectorSession
		INNER JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000019) ref_Diagnosis	ON 
				ref_Diagnosis.idfsReference = VectorSession.idfsDiagnosis
	END

	RETURN @strDiagnoses
END
GO
PRINT N'Creating Function [Report].[FN_REP_NoOfLocationsWithFreezerLocations]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
--Select Char(2 + 64)

--select sqrt(25)
--SELECT Report.FN_REP_NoOfLocationsWithFreezerLocations(25)
-- Name             Date		Change Detail
-- Srini Goli		09/27/2022	Created to display Occupied Freezers
-- SELECT [Report].[FN_REP_NoOfLocationsWithFreezerLocations] (25,12429860001232)
CREATE FUNCTION [Report].[FN_REP_NoOfLocationsWithFreezerLocations] (@BoxSize int,@idfSubdivision BIGINT)
RETURNS VARCHAR(MAX)
AS
BEGIN

	DECLARE @tmp varchar(250),
			@count INT,
			@Loop INT,
			@StringRow varchar(MAX)='  ',
			@FinalStringRow varchar(MAX)='';
	DECLARE  @BoxDetails TABLE(BoxColumn NVARCHAR(5),BoxRow INT,AvailabilityIndicator NVARCHAR(2))
	SET @Loop=sqrt(@BoxSize)
	SET @count = 1

	WHILE @count<= @Loop
	BEGIN
	   SET @StringRow= @StringRow +' ' +Char(@count + 64)
	   SET @count = @count + 1
	END;


	SET @count = 1
	INSERT INTO @BoxDetails(BoxColumn,BoxRow,AvailabilityIndicator)
	SELECT 
		LEFT(BOX.[BoxLocation],1) AS BoxColumn,
		SUBSTRING(BOX.[BoxLocation],2,LEN(BOX.[BoxLocation])) AS BoxRow,
		IIF(BOX.[AvailabilityIndicator]='true','0','X') As AvailabilityIndicator
	FROM dbo.tlbFreezerSubdivision 
	CROSS APPLY OPENJSON(BoxPlaceAvailability) 
	WITH ( [BoxLocation] NVARCHAR(50),
	[AvailabilityIndicator] NVARCHAR(50)
	) As BOX
	WHERE idfSubdivision=@idfSubdivision


	WHILE @count<= @Loop
	BEGIN
	SET @tmp = ''
	select @tmp = @tmp + AvailabilityIndicator + ' ' 
	from @BoxDetails where BoxRow=@count order by BoxColumn

	   SET @FinalStringRow= @FinalStringRow + CAST(@count as Varchar(15) ) + ' ' +@tmp +IIF(@count<>@Loop,CHAR(10)+CHAR(13),'');
	   SET @count = @count + 1;
	   --INSERT INTO @TablenameList SELECT @FinalStringRow
	END;

 RETURN @StringRow+CHAR(10)+CHAR(13)+@FinalStringRow;

END;
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering Function [dbo].[fn_NextNumbers_SelectList]...';


GO
--##SUMMARY Selects list of numbering objects for NextNumbersList form

--##REMARKS Author: Zurin M.
--##REMARKS Create date: 24.11.2009

--##RETURNS Doesn't use
--Lamon Mitchell 3/3/2022
 --Added new column intPreviousNumberValue to store previous values in uniquenumberingschema
 -- Mani Govindarajan  10/04/2022 Added intNumberNextValue output
 -- Mani Govindaraan   10/06/2022 Added blnUseHACSCodeSite output
 
/*
--Example of a call of procedure:

SELECT * FROM fn_NextNumbers_SelectList('en')
*/








ALTER     function [dbo].[fn_NextNumbers_SelectList](
	@LangID as nvarchar(50)--##PARAM @LangID - language ID
)
returns table 
as
return

select		nn.[idfsNumberName], 
			nn.[strPrefix], 
			nn.[strSpecialChar],
 			intNumberValue =
			case IsNull(nn.blnUseAlphaNumericValue, 0)
				when 0 then cast(IsNull(nn.[intNumberValue], 0) as varchar(100))
				when 1 then dbo.fnAlphaNumeric(IsNull(nn.[intNumberValue], 0), ISNULL(intMinNumberLength,4))
			end,
			intNumberNextValue =
			case IsNull(nn.intPreviousNumberValue, 0)
				when 0 then dbo.fnAlphaNumeric(IsNull(nn.[intNumberValue], 0), ISNULL(intMinNumberLength,4))
				else dbo.fnAlphaNumeric(IsNull(nn.intPreviousNumberValue, 0), ISNULL(intMinNumberLength,4))			
			end,
			nn.intNumberValue as PreviousNumber,
			NextNumber = IsNull(nn.intPreviousNumberValue,nn.[intNumberValue]),-- Table has wrongName
			nn.[intMinNumberLength], 			
			fnReferenceRepair.[name] as strObjectName,
			strSuffix,
			blnUsePrefix,
			blnUseSiteID,
			blnUseYear,
			blnUseAlphaNumericValue,
			intPreviousNumberValue,
			blnUseHACSCodeSite

from		dbo.tstNextNumbers nn

left join	fnReferenceRepair(@LangID, 19000057/*rftNumberingType*/) 
on			fnReferenceRepair.idfsReference = nn.idfsNumberName
GO
PRINT N'Refreshing Function [dbo].[FN_VCTS_VSSESSION_GetList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[FN_VCTS_VSSESSION_GetList]';


GO
PRINT N'Altering Procedure [dbo].[USP_CONF_UNIQUENUMBERINGSCHEMA_GETLIST]...';


GO
--=============================================================================================== 
-- Name:  USP_CONF_UNIQUENUMBERINGSCHEMA_GETLIST
-- Description: Returns a list of unique numbering schema given a language
-- Author: Ricky Moss
--
-- History of Change
-- Name:					Date:			Description: 
-- Ricky Moss				8/26/2019		Initial Release
-- Doug Albanese			10/22/2020		Added unverisal searching
-- exec USP_CONF_UNIQUENUMBERINGSCHEMA_GETLIST 'en'
--Lamont Mitchell 3/36/22  Added new column intPreviousNumberValue to store previous values in uniquenumberingschema
-- Mani Govindarajan  10/04/2022 Added a few extra output columns
--=============================================================================================== 
ALTER PROCEDURE [dbo].[USP_CONF_UNIQUENUMBERINGSCHEMA_GETLIST]
(
	 @LangId			NVARCHAR(50)
	,@QuickSearch	NVARCHAR(200) = ''
	,@pageNo INT = 1
	,@pageSize INT = 10 
	,@sortColumn NVARCHAR(30) = 'strDefault' --"IntNextNumberValue"
	,@sortOrder NVARCHAR(4) = 'asc'
)
AS
BEGIN

	IF @sortColumn = 'IntNextNumberValue'
		BEGIN
			SET @sortColumn = 'intNumberValue'
		END

	DECLARE @firstRec INT
	DECLARE @lastRec INT
	DECLARE @t TABLE( 
			idfsNumberName bigint, 
			--strObjectName nvarchar(2000), 
			strDefault nvarchar(2000), 
			strName nvarchar(2000), 
			strPrefix nvarchar(50), 
			strSpecialChar nvarchar(2),
			intNumberValue nvarchar(50),
			intMinNumberLength int,
			strSuffix nvarchar(50),
			blnUsePrefix bit, 
			blnUseYear bit, 
			blnUseAlphaNumericValue bit, 
			blnUseSiteID bit,
			intPreviousNumberValue nvarchar(50),
			intNumberNextValue  nvarchar(50),
			PreviousNumber int,
			NextNumber int,
			blnUseHACSCodeSite bit
	)		
	BEGIN TRY

		DECLARE 
		@ErrorMessage NVARCHAR(400),
		@returnCode BIGINT = 0,
		@returnMsg  NVARCHAR(MAX) = 'Success' 

		IF @QuickSearch IS NULL	
			BEGIN
				SET @QuickSearch = ''
			END

		SET @firstRec = (@pageNo-1)* @pagesize
		SET @lastRec = (@pageNo*@pageSize+1)
		
		INSERT INTO @T
			SELECT 
				idfsNumberName, 
				--strObjectName, 
				r.strDefault,
				r.[name] as 'strName',
				strPrefix, 
				strSpecialChar,
				intNumberValue, 
				intMinNumberLength,
				strSuffix,
				blnUsePrefix, 
				blnUseYear, 
				blnUseAlphaNumericValue, 
				blnUseSiteID,
				intPreviousNumberValue,
				intNumberNextValue,
			    PreviousNumber,
			    NextNumber,
				blnUseHACSCodeSite
			FROM 
				fn_NextNumbers_SelectList(@LangId)
				JOIN dbo.FN_GBL_Reference_GETList(@langId,19000057) r on idfsNumberName = r.idfsReference
			WHERE
				--CAST(idfsNumberName AS NVARCHAR) like '%' + @QuickSearch + '%' OR
				strDefault like '%' + @QuickSearch + '%' OR
				r.[name] like '%' + @QuickSearch + '%' OR
				strPrefix like '%' + @QuickSearch + '%' OR
				CAST(intNumberValue AS NVARCHAR) like '%' + @QuickSearch + '%' OR
				CAST(intMinNumberLength AS NVARCHAR) like '%' + @QuickSearch + '%' OR
				strSuffix like '%' + @QuickSearch + '%' OR
				CAST(intPreviousNumberValue AS NVARCHAR) like '%' + @QuickSearch + '%' 
				

			;
		WITH CTEResults as
		(
			SELECT ROW_NUMBER() OVER ( ORDER BY 
				CASE WHEN @sortColumn = 'strDefault' AND @SortOrder = 'asc' THEN strDefault END ASC,
				CASE WHEN @sortColumn = 'strDefault' AND @SortOrder = 'desc' THEN strDefault END DESC,
				CASE WHEN @sortColumn = 'strName' AND @SortOrder = 'asc' THEN strName END ASC,
				CASE WHEN @sortColumn = 'strName' AND @SortOrder = 'desc' THEN strName END DESC,
				CASE WHEN @sortColumn = 'strPrefix' AND @SortOrder = 'asc' THEN strPrefix END ASC,
				CASE WHEN @sortColumn = 'strPrefix' AND @SortOrder = 'desc' THEN strPrefix END DESC,
				CASE WHEN @sortColumn = 'intNumberValue' AND @SortOrder = 'asc' THEN intNumberValue END ASC,
				CASE WHEN @sortColumn = 'intNumberValue' AND @SortOrder = 'desc' THEN intNumberValue END DESC,
				CASE WHEN @sortColumn = 'intMinNumberLength' AND @SortOrder = 'asc' THEN intMinNumberLength END ASC,
				CASE WHEN @sortColumn = 'intMinNumberLength' AND @SortOrder = 'desc' THEN intMinNumberLength END DESC,
					CASE WHEN @sortColumn = 'intPreviousNumberValue' AND @SortOrder = 'asc' THEN intPreviousNumberValue END ASC,
				CASE WHEN @sortColumn = 'intPreviousNumberValue' AND @SortOrder = 'desc' THEN intPreviousNumberValue END DESC
		) AS ROWNUM,
		COUNT(*) OVER () AS 
				TotalRowCount, 
				--strObjectName,
				idfsNumberName,
				strDefault,
				strName,
				strPrefix,
				strSpecialChar,
				intNumberValue,
				intMinNumberLength,
				strSuffix,
				blnUsePrefix, 
				blnUseYear,
				blnUseAlphaNumericValue, 
				blnUseSiteID,
				intPreviousNumberValue,
				intNumberNextValue,
			    PreviousNumber,
			    NextNumber,
				blnUseHACSCodeSite
			FROM @T
		)

			SELECT
				TotalRowCount, 
				--strObjectName,
				idfsNumberName,
				strDefault,
				strName,
				strPrefix,
				strSpecialChar,
				intNumberValue,
				intPreviousNumberValue,
				intMinNumberLength,
				strSuffix,
				blnUsePrefix, 
				blnUseYear, 
				blnUseAlphaNumericValue,
				blnUseSiteID,  
				intNumberNextValue,
			    PreviousNumber,
			    NextNumber,
				blnUseHACSCodeSite,
				TotalPages = (TotalRowCount/@pageSize)+IIF(TotalRowCount%@pageSize>0,1,0),
				CurrentPage = @pageNo 
		FROM CTEResults
		WHERE RowNum > @firstRec AND RowNum < @lastRec 
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
			ROLLBACK TRANSACTION;

		THROW;
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_BarcodeNextNumber_GET]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_Barcode_GETList
-- Description: Barcode Generator Module
--          
-- Author: Doug Albanese
-- 
-- Revision History:
-- Name				Date		Change Detail
-- ---------------- ----------	------------------------------------------------------------------
-- Doug Albanese	11/23/2020	Copy of USP_GBL_NextNumber_GET to be modified for the Barcode Generator Module
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_BarcodeNextNumber_GET] (
	@ObjectName							NVARCHAR(300),
	@NextNumberValue					NVARCHAR(200)	OUTPUT,
	@blnUsePrefix						BIT				= 0,
	@siteId								NVARCHAR(50)	= NULL,
	@blnUseYear							BIT				= 0
)
AS

	DECLARE @NextID						BIGINT
	DECLARE @Year						INT
	DECLARE @MinNumberLength			INT
	DECLARE @Suffix						NVARCHAR(50)
	DECLARE @Prefix						NVARCHAR(50)
	DECLARE @ShowPrefix					BIT
	DECLARE @ShowSiteID					BIT
	DECLARE @ShowYear					BIT
	DECLARE @ShowHASCCodeSite			BIT
	DECLARE @HASCCodeSite				NVARCHAR(200)
	DECLARE @strSiteID					NVARCHAR(10)
	DECLARE @ShowAlphaNumeric			BIT
	DECLARE @idfsNumberName				BIGINT
	DECLARE @returnCode					INT = 0
	DECLARE @returnMsg					NVARCHAR(MAX) = 'SUCCESS'
	DECLARE @CurrentID						BIGINT


	BEGIN
		IF @ObjectName IS NULL
			RETURN - 1

		IF @siteID IS NOT NULL
			BEGIN
				SELECT @HASCCodeSite = SUBSTRING(ISNULL(strHASCsiteID, N''), 3, 5),
					@strSiteID = strSiteID
				FROM tstSite
				WHERE idfsSite = @siteId
			END

		SET @HASCCodeSite = ISNULL(@HASCCodeSite, '')
		SET @strSiteID = ISNULL(@strSiteID, '')
		SET @Year = Year(getdate())

		SELECT @NextID = ISNULL(intPreviousNumberValue, 0),
			@CurrentID = ISNULL(intPreviousNumberValue, 0),
			@Suffix = ISNULL(strSuffix, N''),
			@Prefix = ISNULL(strPrefix, N''),
			@MinNumberLength = ISNULL(intMinNumberLength, 5),
			@ShowPrefix = ISNULL(blnUsePrefix, 0),
			@ShowSiteID = ISNULL(blnUseSiteID, 0),
			@ShowYear = ISNULL(blnUseYear, 0),
			@ShowHASCCodeSite = ISNULL(blnUseHACSCodeSite, 0),
			@ShowAlphaNumeric = ISNULL(blnUseAlphaNumericValue, 0),
			@idfsNumberName = ISNULL(idfsNumberName, 0)
		FROM dbo.tstNextNumbers a
		WHERE strDocumentName = @ObjectName

		IF @@ROWCOUNT = 0
		BEGIN
			SELECT @idfsNumberName = ISNULL(idfsBaseReference, 0)
			FROM dbo.trtBaseReference
			WHERE strDefault = @ObjectName

			IF @@ROWCOUNT = 0
			BEGIN
				SET @returnCode = - 1
				SET @returnMsg = 'Please have EIDSS Administrator generate a Unique Numbering Schema for ' + @ObjectName + '.'

				RETURN
			END
			ELSE
			BEGIN
				SET @Prefix = CASE 
						WHEN @ObjectName = 'Vet Aggregate Disease Report'
							THEN 'VAD'
						WHEN @ObjectName = 'Animal'
							THEN 'ANM'
						WHEN @ObjectName = 'Batch Test Barcode'
							THEN 'BTB'
						WHEN @ObjectName = 'Box Barcode'
							THEN 'BBC'
						WHEN @ObjectName = 'Farm'
							THEN 'FRM'
						WHEN @ObjectName = 'Freezer Barcode'
							THEN 'FBC'
						WHEN @ObjectName = 'Shelf Barcode'
							THEN 'SBC'
						WHEN @ObjectName = 'Rack Barcode'
							THEN 'RBC'
						WHEN @ObjectName = 'Animal Group'
							THEN 'AGP'
						WHEN @ObjectName = 'Human Disease Report'
							THEN 'HUM'
						WHEN @ObjectName = 'Outbreak Session'
							THEN 'OUT'
						WHEN @ObjectName = 'Sample Field Barcode'
							THEN 'SFB'
						WHEN @ObjectName = 'Sample'
							THEN 'SAD'
						WHEN @ObjectName = 'Pendide Test'
							THEN 'PEN'
						WHEN @ObjectName = 'Vet Disease Report'
							THEN 'VET'
						WHEN @ObjectName = 'Vet Case Field Accession Number'
							THEN 'VFN'
						WHEN @ObjectName = 'Sample Transfer Barcode'
							THEN 'STB'
						WHEN @ObjectName = 'Active Surveillance Campaign'
							THEN 'SCV'
						WHEN @ObjectName = 'Active Surveillance Session'
							THEN 'SSV'
						WHEN @ObjectName = 'Vector Surveillance Session'
							THEN 'VSS'
						WHEN @ObjectName = 'Vector Surveillance Vector'
							THEN 'VSR'
						WHEN @ObjectName = 'Vector Surveillance Summary Vector'
							THEN 'VSM'
						WHEN @ObjectName = 'Basic Syndromic Surveillance Form'
							THEN 'SSF'
						WHEN @ObjectName = 'Basic Syndromic Surveillance Aggregate Form'
							THEN 'SSA'
						WHEN @ObjectName = 'EIDSS Person'
							THEN 'PER'
						WHEN @ObjectName = 'Human Active Surveillance Campaign'
							THEN 'SCH'
						WHEN @ObjectName = 'Human Active Surveillance Session'
							THEN 'SSH'
						WHEN @ObjectName = 'Human Outbreak Case'
							THEN 'HOC'
						WHEN @ObjectName = 'Vet Outbreak Case'
							THEN 'VOC'
						WHEN @ObjectName = 'Weekly Reporting Form'
							THEN 'HWR'
						END

				EXECUTE dbo.USP_GBL_NextNumberInit_GET @idfsNumberName,
					@ObjectName,
					@Prefix,
					NULL,
					0,
					4,
					0

				SELECT @NextID= ISNULL(intPreviousNumberValue, 0),
			        @CurrentID = ISNULL(intNumberValue, 0),
					@Suffix = ISNULL(strSuffix, N''),
					@Prefix = ISNULL(strPrefix, N''),
					@MinNumberLength = ISNULL(intMinNumberLength, 5),
					@ShowPrefix = ISNULL(blnUsePrefix, 0),
					@ShowSiteID = ISNULL(blnUseSiteID, 0),
					@ShowYear = ISNULL(blnUseYear, 0),
					@ShowHASCCodeSite = ISNULL(blnUseHACSCodeSite, 0),
					@ShowAlphaNumeric = ISNULL(blnUseAlphaNumericValue, 0),
					@idfsNumberName = ISNULL(idfsNumberName, 0)
				FROM dbo.tstNextNumbers a
				WHERE strDocumentName = @ObjectName
			END
		END
		ELSE
		BEGIN
			--If system configuration is set to show, then check against the barcode module to see if it was requested to show as well
			IF @ShowYear = 1 AND @blnUseYear = 1
			BEGIN
				IF NOT EXISTS (
						SELECT *
						FROM dbo.tstNextNumbers
						WHERE idfsNumberName = @idfsNumberName
							AND intYear = @Year
						)
					UPDATE dbo.tstNextNumbers
					SET intNumberValue = 0,
						intPreviousNumberValue = 0,
						intYear = @Year
					WHERE idfsNumberName = @idfsNumberName
			END
		END

		BEGIN TRANSACTION

		BEGIN TRY
			RETRY:

			DECLARE @CheckNumber BIT
			DECLARE @AttemptCount INT

			SET @CheckNumber = 1
			SET @AttemptCount = 0

			SET @NextID = @NextID - 1

			--Restrict new unique next number search attempts by 1000 
			WHILE @CheckNumber = 1
				AND @AttemptCount < 1000
			BEGIN
				IF @AttemptCount = 0
					SET @NextID = @NextID + 1
				ELSE
					SET @NextID = @NextID + 100

				IF @ShowAlphaNumeric = 1
					SET @NextNumberValue = dbo.FN_GBL_AlphNumeric_GET(@NextID, @MinNumberLength)
				ELSE
					SET @NextNumberValue = CAST(@NextID AS VARCHAR(100))

				IF (@NextNumberValue IS NULL)
				BEGIN
					UPDATE dbo.tstNextNumbers
					SET intMinNumberLength = @MinNumberLength + 1,
						intNumberValue = 0
					WHERE idfsNumberName = @idfsNumberName

					SET @MinNumberLength = @MinNumberLength + 1
					SET @NextID = 0
					SET @CurrentID = 0


					GOTO retry
				END

				IF LEN(@NextNumberValue) > @MinNumberLength
				BEGIN
					SET @returnCode = - 1
					SET @returnMsg = 'Cannot generate new unique value.'

					RETURN
				END

				IF @MinNumberLength > 0
					AND LEN(@NextNumberValue) < @MinNumberLength
				BEGIN
					SET @NextNumberValue = REPLACE(SPACE(@MinNumberLength - LEN(@NextNumberValue)) + @NextNumberValue, N' ', 0)
				END

				SET @NextNumberValue = @NextNumberValue + @Suffix

				--If system configuration is set to show, then check against the barcode module to see if it was requested to show as well
				------------------------------START------------------------------
				IF @ShowYear = 1 AND @blnUseYear = 1
					BEGIN
						SET @NextNumberValue = RIGHT(@Year, 2) + @NextNumberValue
					END

				IF @ShowSiteID = 1 AND @siteId IS NOT NULL
					BEGIN
						IF @ShowHASCCodeSite = 1
							BEGIN
								SET @NextNumberValue = @HASCCodeSite + @NextNumberValue
							END
						ELSE
							BEGIN
								SET @NextNumberValue = @strSiteID + @NextNumberValue
							END
					END

				IF @ShowPrefix = 1 AND @blnUsePrefix = 1
					BEGIN
						SET @NextNumberValue = @Prefix + @NextNumberValue
					END
				------------------------------END------------------------------

				DECLARE @CNT INT

				----------------------- Specimen Field Barcode
				IF @idfsNumberName = 10057019
				BEGIN
					IF NOT EXISTS (
							SELECT idfMaterial
							FROM dbo.tlbMaterial
							WHERE strFieldBarcode = @NextNumberValue
							)
						BREAK

					IF @AttemptCount = 0
						SELECT @CNT = COUNT(*)
						FROM dbo.tlbMaterial
				END
						----------------------- Container (specimen barcode is used for container)
				ELSE IF @idfsNumberName = 10057020
				BEGIN
					IF NOT EXISTS (
							SELECT idfMaterial
							FROM dbo.tlbMaterial
							WHERE strBarcode = @NextNumberValue
							)
						BREAK

					IF @AttemptCount = 0
						SELECT @CNT = COUNT(*)
						FROM dbo.tlbMaterial
				END
						----------------------- Freezer
				ELSE IF @idfsNumberName = 10057011
				BEGIN
					IF NOT EXISTS (
							SELECT idfFreezer
							FROM dbo.tlbFreezer
							WHERE strBarcode = @NextNumberValue
							)
						BREAK

					IF @AttemptCount = 0
						SELECT @CNT = COUNT(*)
						FROM dbo.tlbFreezer
				END
						----------------------- Freezer Box
				ELSE IF @idfsNumberName = 10057006
				BEGIN
					IF NOT EXISTS (
							SELECT idfSubdivision
							FROM dbo.tlbFreezerSubdivision
							WHERE strBarcode = @NextNumberValue
								AND idfsSubdivisionType = 39890000000
							)
						BREAK

					IF @AttemptCount = 0
						SELECT @CNT = COUNT(*)
						FROM dbo.tlbFreezerSubdivision
						WHERE idfsSubdivisionType = 39890000000
				END
						----------------------- Freezer Shelf
				ELSE IF @idfsNumberName = 10057012
				BEGIN
					IF NOT EXISTS (
							SELECT idfSubdivision
							FROM dbo.tlbFreezerSubdivision
							WHERE strBarcode = @NextNumberValue
								AND idfsSubdivisionType = 39900000000
							)
						BREAK

					IF @AttemptCount = 0
						SELECT @CNT = COUNT(*)
						FROM dbo.tlbFreezerSubdivision
						WHERE idfsSubdivisionType = 39900000000
				END
						----------------------- Freezer Rack
				ELSE IF @idfsNumberName = 10057039
				BEGIN
					IF NOT EXISTS (
							SELECT idfSubdivision
							FROM dbo.tlbFreezerSubdivision
							WHERE strBarcode = @NextNumberValue
								AND idfsSubdivisionType = 10093001
							)
						BREAK

					IF @AttemptCount = 0
						SELECT @CNT = COUNT(*)
						FROM dbo.tlbFreezerSubdivision
						WHERE idfsSubdivisionType = 10093001
				END
						----------------------- Human Disease Report
				ELSE IF @idfsNumberName = 10057014
				BEGIN
					IF NOT EXISTS (
							SELECT strCaseID
							FROM dbo.tlbHumanCase
							WHERE strCaseID = @NextNumberValue
							)
						BREAK

					IF @AttemptCount = 0
						SELECT @CNT = COUNT(*)
						FROM dbo.tlbHumanCase
				END
						----------------------- Human Aggregate Disease Report
				ELSE IF @idfsNumberName = 10057001
				BEGIN
					IF NOT EXISTS (
							SELECT idfAggrCase
							FROM dbo.tlbAggrCase
							WHERE strCaseID = @NextNumberValue
							)
						BREAK

					IF @AttemptCount = 0
						SELECT @CNT = COUNT(*)
						FROM dbo.tlbAggrCase
						WHERE idfsAggrCaseType = 0
				END
						----------------------- Veterinary Aggregate Action Report
				ELSE IF @idfsNumberName = 10057002
				BEGIN
					IF NOT EXISTS (
							SELECT idfAggrCase
							FROM dbo.tlbAggrCase
							WHERE strCaseID = @NextNumberValue
							)
						BREAK

					IF @AttemptCount = 0
						SELECT @CNT = COUNT(*)
						FROM dbo.tlbAggrCase
						WHERE idfsAggrCaseType = 0
				END
						----------------------- Veterinary Aggregate Disease Report
				ELSE IF @idfsNumberName = 10057003
				BEGIN
					IF NOT EXISTS (
							SELECT idfAggrCase
							FROM dbo.tlbAggrCase
							WHERE strCaseID = @NextNumberValue
							)
						BREAK

					IF @AttemptCount = 0
						SELECT @CNT = COUNT(*)
						FROM dbo.tlbAggrCase
						WHERE idfsAggrCaseType = 0
				END
						----------------------- Veterinary Disease Report
				ELSE IF @idfsNumberName = 10057024
				BEGIN
					IF NOT EXISTS (
							SELECT strCaseID
							FROM dbo.tlbVetCase
							WHERE strCaseID = @NextNumberValue
							)
						BREAK

					IF @AttemptCount = 0
						SELECT @CNT = COUNT(*)
						FROM dbo.tlbVetCase
				END
						----------------------- Veterinary Disease Report Field Accession ID
				ELSE IF @idfsNumberName = 10057025
				BEGIN
					IF NOT EXISTS (
							SELECT idfVetCase
							FROM dbo.tlbVetCase
							WHERE strFieldAccessionID = @NextNumberValue
							)
						BREAK

					IF @AttemptCount = 0
						SELECT @CNT = COUNT(*)
						FROM dbo.tlbVetCase
				END
						----------------------- Outbreak
				ELSE IF @idfsNumberName = 10057015
				BEGIN
					IF NOT EXISTS (
							SELECT idfOutbreak
							FROM dbo.tlbOutbreak
							WHERE strOutbreakID = @NextNumberValue
							)
						BREAK

					IF @AttemptCount = 0
						SELECT @CNT = COUNT(*)
						FROM tlbOutbreak
				END
						----------------------- Outbreak Case Report (Human)
				ELSE IF @idfsNumberName = 10057037
				BEGIN
					IF NOT EXISTS (
							SELECT OutBreakCaseReportUID
							FROM dbo.OutbreakCaseReport
							WHERE strOutbreakCaseID = @NextNumberValue
							)
						BREAK

					IF @AttemptCount = 0
						SELECT @CNT = COUNT(*)
						FROM OutbreakCaseReport
				END
						----------------------- Outbreak Case Report (Veterinary)
				ELSE IF @idfsNumberName = 10057038
				BEGIN
					IF NOT EXISTS (
							SELECT OutBreakCaseReportUID
							FROM dbo.OutbreakCaseReport
							WHERE strOutbreakCaseID = @NextNumberValue
							)
						BREAK

					IF @AttemptCount = 0
						SELECT @CNT = COUNT(*)
						FROM OutbreakCaseReport
				END
						----------------------- Farm
				ELSE IF @idfsNumberName = 10057010
				BEGIN
					IF NOT EXISTS (
							SELECT idfFarm
							FROM dbo.tlbFarm
							WHERE strFarmCode = @NextNumberValue
							)
						BREAK

					IF @AttemptCount = 0
						SELECT @CNT = COUNT(*)
						FROM tlbFarm
				END
						----------------------- Batch Test
				ELSE IF @idfsNumberName = 10057005
				BEGIN
					IF NOT EXISTS (
							SELECT idfBatchTest
							FROM dbo.tlbBatchTest
							WHERE strBarcode = @NextNumberValue
							)
						BREAK

					IF @AttemptCount = 0
						SELECT @CNT = COUNT(*)
						FROM dbo.tlbBatchTest
				END
						----------------------- Herd/Flock
				ELSE IF @idfsNumberName = 10057013
				BEGIN
					IF NOT EXISTS (
							SELECT idfHerd
							FROM dbo.tlbHerd
							WHERE strHerdCode = @NextNumberValue
							)
						BREAK

					IF @AttemptCount = 0
						SELECT @CNT = COUNT(*)
						FROM dbo.tlbHerd
				END
						----------------------- Animal
				ELSE IF @idfsNumberName = 10057004
				BEGIN
					IF NOT EXISTS (
							SELECT idfAnimal
							FROM dbo.tlbAnimal
							WHERE strAnimalCode = @NextNumberValue
							)
						BREAK

					IF @AttemptCount = 0
						SELECT @CNT = COUNT(*)
						FROM dbo.tlbAnimal
				END
						----------------------- Sample Transfer
				ELSE IF @idfsNumberName = 10057026
				BEGIN
					IF NOT EXISTS (
							SELECT idfTransferOut
							FROM dbo.tlbTransferOUT
							WHERE strBarcode = @NextNumberValue
							)
						BREAK

					IF @AttemptCount = 0
						SELECT @CNT = COUNT(*)
						FROM dbo.tlbTransferOUT
				END
						----------------------- Active Surveillance Campaign
				ELSE IF @idfsNumberName = 10057027
				BEGIN
					IF NOT EXISTS (
							SELECT idfCampaign
							FROM dbo.tlbCampaign
							WHERE strCampaignID = @NextNumberValue
							)
						BREAK

					IF @AttemptCount = 0
						SELECT @CNT = COUNT(*)
						FROM dbo.tlbCampaign
				END
						----------------------- Active Surveillance Session
				ELSE IF @idfsNumberName = 10057028
				BEGIN
					IF NOT EXISTS (
							SELECT idfMonitoringSession
							FROM dbo.tlbMonitoringSession
							WHERE strMonitoringSessionID = @NextNumberValue
							)
						BREAK

					IF @AttemptCount = 0
						SELECT @CNT = COUNT(*)
						FROM dbo.tlbMonitoringSession
				END
						----------------------- Vector Surveillance Session
				ELSE IF @idfsNumberName = 10057029
				BEGIN
					IF NOT EXISTS (
							SELECT idfVectorSurveillanceSession
							FROM dbo.tlbVectorSurveillanceSession
							WHERE strSessionID = @NextNumberValue
							)
						BREAK

					IF @AttemptCount = 0
						SELECT @CNT = COUNT(*)
						FROM dbo.tlbVectorSurveillanceSession
				END
						----------------------- Vector Surveillance Vector
				ELSE IF @idfsNumberName = 10057030
				BEGIN
					IF NOT EXISTS (
							SELECT idfVector
							FROM dbo.tlbVector
							WHERE strVectorID = @NextNumberValue
							)
						BREAK

					IF @AttemptCount = 0
						SELECT @CNT = COUNT(*)
						FROM dbo.tlbVector
				END
						----------------------- Vector Surveillance Summary Vector
				ELSE IF @idfsNumberName = 10057031
				BEGIN
					IF NOT EXISTS (
							SELECT idfsVSSessionSummary
							FROM dbo.tlbVectorSurveillanceSessionSummary
							WHERE strVSSessionSummaryID = @NextNumberValue
							)
						BREAK

					IF @AttemptCount = 0
						SELECT @CNT = COUNT(*)
						FROM dbo.tlbVectorSurveillanceSessionSummary
				END
						----------------------- Basic Syndromic Surveillance Form
				ELSE IF @idfsNumberName = 10057032
				BEGIN
					IF NOT EXISTS (
							SELECT idfBasicSyndromicSurveillance
							FROM dbo.tlbBasicSyndromicSurveillance
							WHERE strFormID = @NextNumberValue
							)
						BREAK

					IF @AttemptCount = 0
						SELECT @CNT = COUNT(*)
						FROM dbo.tlbBasicSyndromicSurveillance
				END
						----------------------- Basic Syndromic Surveillance Aggregate Form
				ELSE IF @idfsNumberName = 10057033
				BEGIN
					IF NOT EXISTS (
							SELECT idfAggregateHeader
							FROM dbo.tlbBasicSyndromicSurveillanceAggregateHeader
							WHERE strFormID = @NextNumberValue
							)
						BREAK

					IF @AttemptCount = 0
						SELECT @CNT = COUNT(*)
						FROM dbo.tlbBasicSyndromicSurveillanceAggregateHeader
				END
						----------------------- EIDSS Person ID
				ELSE IF @idfsNumberName = 10057034
				BEGIN
					IF NOT EXISTS (
							SELECT EIDSSPersonID
							FROM dbo.HumanActualAddlInfo
							WHERE EIDSSPersonID = @NextNumberValue
							)
						BREAK

					IF @AttemptCount = 0
						SELECT @CNT = COUNT(*)
						FROM dbo.HumanActualAddlInfo
				END
				----------------------- Weekly Reporting Form
				ELSE IF @idfsNumberName = 10057040
				BEGIN
					IF NOT EXISTS (
							SELECT idfReportForm
							FROM dbo.tlbReportForm
							WHERE strReportFormID = @NextNumberValue
							)
						BREAK

					IF @AttemptCount = 0
						SELECT @CNT = COUNT(*)
						FROM dbo.tlbReportForm
				END
				ELSE
					SET @CheckNumber = 0

				IF @AttemptCount = 0
					AND NOT @CNT IS NULL
					SET @NextID = @CNT + 1
				SET @AttemptCount = @AttemptCount + 1
			END

			IF @AttemptCount < 1000
			BEGIN
				UPDATE dbo.tstNextNumbers
				SET intPreviousNumberValue = @NextID+1,
				intNumberValue = @CurrentID
				WHERE idfsNumberName = @idfsNumberName

				COMMIT TRAN

				RETURN
			END
		END TRY

		--
		BEGIN CATCH
			IF (XACT_STATE()) = - 1
			BEGIN
				PRINT N'The transaction is in an uncommittable state. ' + 'Rolling back transaction.'

				ROLLBACK TRAN;
			END
			ELSE IF (XACT_STATE()) = 1
			BEGIN
				IF @@TRANCOUNT < 2
					ROLLBACK TRAN
				ELSE
					COMMIT TRAN
			END

			IF @AttemptCount >= 100
			BEGIN
				SET @returnCode = - 1
				SET @returnMsg = 'Can''t generate new number'

				RETURN
			END
			ELSE
			BEGIN
				SET @returnCode = - 1
				SET @returnMsg = 'Unknown error during generating new number'

				RETURN
			END

			DECLARE @strNextNumberName AS VARCHAR(200)

			SET @strNextNumberName = CAST(@idfsNumberName AS VARCHAR)
			SET @returnCode = - 1
			SET @returnMsg = 'NumberType:%s'

			RETURN
		END CATCH
	END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_EVENT_SET]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- ================================================================================================
-- Name: USP_ADMIN_EVENT_SET
--
-- Description:	Inserts or updates the event table for SAUC55 and SAUC56.
-- 
-- Field Notes:
--
-- Object - ID of record such as human disease report
-- LoginSite - ID of organization login site where initial event that raise notification was 
-- created.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     07/06/2022 Initial release.
-- Stephen Long     07/11/2022 Added third party site alert events.
-- Stephen Long     07/12/2022 Added vector surveillance session third party site alerts.
-- Stephen Long     09/15/2022 Added note parameter.  Temporarily removed!
-- Stephen Long     10/05/2022 Fix for event type ID when third party site event is already passed 
--                             in, and where from site ID to login site ID on event users.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_EVENT_SET]
(
    @EventId BIGINT,
    @EventTypeId BIGINT,
    @UserId BIGINT,
    @ObjectId BIGINT = NULL,
    @DiseaseId BIGINT = NULL,
    @SiteId BIGINT = NULL,
    @InformationString NVARCHAR(MAX) = NULL,
    --@Note NVARCHAR(MAX) = NULL, 
    @LoginSiteId BIGINT = NULL,
    @LocationId BIGINT = NULL,
    @AuditUserName NVARCHAR(200)
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        DECLARE @ReturnCode INT = 0,
                @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
                @NeighboringSiteId BIGINT = NULL,
                @EventUserId BIGINT = NULL,
                @EventSiteId BIGINT = NULL;
        DECLARE @EventUsers TABLE
        (
            UserId BIGINT NOT NULL,
            SiteId BIGINT NOT NULL
        );
        DECLARE @NeighboringSites TABLE
        (
            AccessRuleId BIGINT,
            SiteId BIGINT
        );
        DECLARE @SiteAccessRuleGrantee TABLE (AccessRuleId BIGINT);

        -- Get all users of the target site that have subscribed to the notification type.
        INSERT INTO @EventUsers
        SELECT u.idfUserID,
               u.idfsSite
        FROM dbo.tstUserTable u
            INNER JOIN dbo.EventSubscription e
                ON e.idfUserID = u.idfUserID
                   AND e.EventNameID = @EventTypeId
        WHERE u.idfsSite = @LoginSiteId
              AND u.intRowStatus = 0
              AND e.ReceiveAlertFlag = 1;

        -- Get all users of the target site's neighboring sites based on filtration rules.
        -- Logged in user site ID is a grantor, then get list of grantee sites.
        INSERT INTO @NeighboringSites
        SELECT ar.AccessRuleID,
               ara.ActorSiteID
        FROM dbo.AccessRule ar
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.AccessRuleID = ar.AccessRuleID
                   AND ara.intRowStatus = 0
        WHERE ar.intRowStatus = 0
              AND ar.BorderingAreaRuleIndicator = 1
              AND ar.GrantingActorSiteID = @LoginSiteId
              AND ara.ActorSiteID IS NOT NULL
              AND ara.ActorSiteID <> @LoginSiteId
        GROUP BY ara.ActorSiteID,
                 ar.AccessRuleID;

        -- Logged in user site ID access rules as a grantee.
        INSERT INTO @SiteAccessRuleGrantee
        SELECT ara.AccessRuleID
        FROM dbo.AccessRuleActor ara
            INNER JOIN dbo.AccessRule ar
                ON ar.AccessRuleID = ara.AccessRuleID
                   AND ar.intRowStatus = 0
        WHERE ara.ActorSiteID = @LoginSiteId
              AND ara.intRowStatus = 0
              AND ar.BorderingAreaRuleIndicator = 1;

        -- Select all grantee sites that the site is also a grantee of.
        INSERT INTO @NeighboringSites
        SELECT sg.AccessRuleID,
               ara.ActorSiteID
        FROM @SiteAccessRuleGrantee sg
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.AccessRuleID = sg.AccessRuleID
                   AND ara.intRowStatus = 0
        WHERE ara.ActorSiteID <> @LoginSiteId
              AND ara.ActorSiteID IS NOT NULL
        GROUP BY ara.ActorSiteID,
                 sg.AccessRuleID;

        WHILE EXISTS (SELECT * FROM @NeighboringSites)
        BEGIN
            SELECT TOP 1
                @NeighboringSiteId = SiteId
            FROM @NeighboringSites;

            -- Get all users of the neighboring site.
            INSERT INTO @EventUsers
            SELECT u.idfUserID,
                   u.idfsSite
            FROM dbo.tstUserTable u
                INNER JOIN dbo.EventSubscription e
                    ON e.idfUserID = u.idfUserID
                       AND e.EventNameID = @EventTypeId
            WHERE u.idfsSite = @NeighboringSiteId
                  AND u.intRowStatus = 0
                  AND e.ReceiveAlertFlag = 1;

            DELETE FROM @NeighboringSites
            WHERE SiteID = @NeighboringSiteId;
        END

        WHILE EXISTS (SELECT * FROM @EventUsers)
        BEGIN
            SELECT TOP 1
                @EventUserId = UserId,
                @EventSiteId = SiteId
            FROM @EventUsers;

            EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tstEvent', @EventId OUTPUT;

            -- Change to the third party site alert/event type id.
            IF @EventSiteId <> @SiteId
            BEGIN
                SET @EventTypeId = CASE WHEN @EventTypeId = 10025503 THEN
                    10025504
                WHEN @EventTypeId = 10025501 THEN
                    10025502
                WHEN @EventTypeId = 10025505 THEN
                    10025506
                WHEN @EventTypeId = 10025507 THEN
                    10025508
                WHEN @EventTypeId = 10025509 THEN
                    10025512
                WHEN @EventTypeId = 10025510 THEN
                    10025511
                WHEN @EventTypeId = 10025037 THEN
                    10025038
                WHEN @EventTypeId = 10025041 THEN
                    10025042
                WHEN @EventTypeId = 10025043 THEN
                    10025044
                WHEN @EventTypeId = 10025045 THEN
                    10025046
                WHEN @EventTypeId = 10025047 THEN
                    10025048
                WHEN @EventTypeId = 10025077 THEN
                    10025078
                WHEN @EventTypeId = 10025079 THEN
                    10025080
                WHEN @EventTypeId = 10025081 THEN
                    10025082
                WHEN @EventTypeId = 10025099 THEN
                    10025100
                WHEN @EventTypeId = 10025097 THEN
                    10025098
                WHEN @EventTypeId = 10025129 THEN
                    10025130
                WHEN @EventTypeId = 10025101 THEN
                    10025102
                WHEN @EventTypeId = 10025103 THEN
                    10025104
                WHEN @EventTypeId = 10025105 THEN
                    10025106
                WHEN @EventTypeId = 10025107 THEN
                    10025108
                WHEN @EventTypeId = 10025085 THEN
                    10025086
                WHEN @EventTypeId = 10025087 THEN
                    10025088
                WHEN @EventTypeId = 10025089 THEN
                    10025090
                WHEN @EventTypeId = 10025091 THEN
                    10025092
                WHEN @EventTypeId = 10025093 THEN
                    10025094
                WHEN @EventTypeId = 10025095 THEN
                    10025096
                WHEN @EventTypeId = 10025067 THEN
                    10025068
                WHEN @EventTypeId = 10025071 THEN
                    10025072
                WHEN @EventTypeId = 10025073 THEN
                    10025074
                WHEN @EventTypeId = 10025075 THEN
                    10025076
                WHEN @EventTypeId = 10025513 THEN
                    10025514
                WHEN @EventTypeId = 10025517 THEN
                    10025518
                WHEN @EventTypeId = 10025519 THEN
                    10025520
                WHEN @EventTypeId = 10025525 THEN
                    10025526
                WHEN @EventTypeId = 10025049 THEN
                    10025050
                WHEN @EventTypeId = 10025051 THEN
                    10025052
                WHEN @EventTypeId = 10025053 THEN
                    10025054
                WHEN @EventTypeId = 10025055 THEN
                    10025056
                WHEN @EventTypeId = 10025057 THEN
                    10025058
                WHEN @EventTypeId = 10025059 THEN
                    10025060
                WHEN @EventTypeId = 10025061 THEN
                    10025062
                WHEN @EventTypeId = 10025065 THEN
                    10025066
                WHEN @EventTypeId = 10025069 THEN
                    10025070
                WHEN @EventTypeId = 10025527 THEN
                    10025528
                WHEN @EventTypeId = 10025529 THEN
                    10025530
                WHEN @EventTypeId = 10025537 THEN
                    10025538
                WHEN @EventTypeId = 10025539 THEN
                    10025540
                WHEN @EventTypeId = 10025563 THEN
                    10025564
                ELSE
                    @EventTypeId
                END
            END

            INSERT INTO dbo.tstEvent
            (
                idfEventID,
                idfsEventTypeID,
                idfObjectID,
                strInformationString,
                --strNote, 
                datEventDatatime,
                idfUserID,
                intProcessed,
                idfsSite,
                idfsDiagnosis,
                idfsLoginSite,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateDTM,
                AuditCreateUser,
                idfsLocation
            )
            VALUES
            (@EventId,
             @EventTypeId,
             @ObjectId,
             @InformationString,
             --@Note, 
             GETDATE(),
             @EventUserId,
             0  ,
             @EventSiteId,
             @DiseaseId,
             @LoginSiteId,
             10519001,
             '[{"idfEventID":' + CAST(@EventId AS NVARCHAR(300)) + '}]',
             GETDATE(),
             @AuditUserName,
             @LocationId
            );

            DELETE FROM @EventUsers
            WHERE UserId = @EventUserId
                  AND SiteId = @EventSiteId;
        END;
    END TRY
    BEGIN CATCH
        SET @ReturnCode = ERROR_NUMBER();
        SET @ReturnMessage = ERROR_MESSAGE();

        THROW;
    END CATCH;

    SELECT @ReturnCode ReturnCode,
           @ReturnMessage ReturnMessage;
END;
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering Procedure [dbo].[USP_CONF_VeterinaryProphylacticMatrixReport_SET]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- ================================================================================================
-- Name: USP_CONF_VeterinaryProphylacticMatrixReport_SET
--
-- Description: Saves Entries For Veterinary Aggregate Case Matrix Report.
-- 
-- Author: Lamont Mitchell
--
-- Revision History:
-- Name                         Date       Change Detail
-- ---------------------------- ---------- -------------------------------------------------------
-- Lamont Mitchell              03/04/2019 Initial Created
-- Stephen Long                 07/15/2022 Added site alert and renamed sproc to standard SET.
-- Leo Tracchia                 10/06/2022 Fix for bug 5202 ADM 16 - Vet Prophylactic Measure Matrix #456 
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_CONF_VeterinaryProphylacticMatrixReport_SET]
    @idfAggrProphylacticActionMTX BIGINT NULL,
    @idfVersion BIGINT NULL,
    @inJsonString Varchar(Max) NULL,
    @EventTypeId BIGINT,
    @SiteId BIGINT,
    @UserId BIGINT,
    @LocationId BIGINT,
    @AuditUserName NVARCHAR(200)
AS
BEGIN
    DECLARE @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
            @ReturnCode BIGINT = 0,
            @idfsReferenceType BIGINT,
            @JsonString VARCHAR(MAX),
            @EventId BIGINT = -1,
            @EventSiteId BIGINT = @SiteId,
            @EventUserId BIGINT = @UserId,
            @EventDiseaseId BIGINT = NULL,
            @EventLocationId BIGINT = @LocationId,
            @EventInformationString NVARCHAR(MAX) = NULL,
            @EventLoginSiteId BIGINT = @SiteId;
    DECLARE @SuppressSelect TABLE
    (
        ReturnCode INT,
        ReturnMessage NVARCHAR(MAX)
    );
    DECLARE @Disease TABLE
    (
        IntNumRow INT,
        --IdfVersion BIGINT,
        IdfAggrProphylacticActionMTX BIGINT, 
        IdfsProphilacticAction BIGINT,
        IdfsSpeciesType BIGINT,
        IdfsDiagnosis BIGINT
    );

    SET NOCOUNT ON;

    BEGIN TRY
        SET @JsonString = @inJsonString;
        IF EXISTS
        (
            SELECT *
            FROM dbo.tlbAggrProphylacticActionMTX
            WHERE idfVersion = @idfVersion
        )
        BEGIN
            UPDATE dbo.tlbAggrProphylacticActionMTX
            SET intRowStatus = 1,
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUserName
            WHERE idfVersion = @idfVersion;
        END

        INSERT INTO @Disease
        (
            IntNumRow,
            --IdfVersion,
            IdfAggrProphylacticActionMTX,
            IdfsProphilacticAction,
            IdfsSpeciesType,
            IdfsDiagnosis
        )
        SELECT *
        FROM
            OPENJSON(@JsonString)
            WITH
            (
                IntNumRow INT,
                --IdfVersion BIGINT,
                IdfAggrProphylacticActionMTX BIGINT, 
                IdfsProphilacticAction BIGINT,
                IdfsSpeciesType BIGINT,
                IdfsDiagnosis BIGINT
            );
        DECLARE @rowCount INT = 0;
        SET @rowCount =
        (
            SELECT MAX(IntNumRow) FROM @Disease
        );
        DECLARE @_int INT = 1;
        WHILE @_int <= @rowCount
        BEGIN
            IF EXISTS
            (
                SELECT *
                FROM dbo.tlbAggrProphylacticActionMTX
                WHERE idfVersion = @idfVersion
                      AND idfsDiagnosis =
                      (
                          SELECT IdfsDiagnosis FROM @Disease WHERE IntNumRow = @_int
                      )
                      AND idfsSpeciesType =
                      (
                          SELECT IdfsSpeciesType FROM @Disease WHERE IntNumRow = @_int
                      )
                      AND idfsProphilacticAction =
                      (
                          SELECT IdfsProphilacticAction FROM @Disease WHERE IntNumRow = @_int
                      )
            )
            BEGIN
                UPDATE dbo.tlbAggrProphylacticActionMTX
                SET intRowStatus = 0,
                    intNumRow = @_int,
                    AuditUpdateDTM = GETDATE(),
                    AuditUpdateUser = @AuditUserName
                WHERE idfsDiagnosis =
                (
                    SELECT IdfsDiagnosis FROM @Disease WHERE IntNumRow = @_int
                )
                      AND idfVersion =
                      (
                          SELECT IdfVersion FROM @Disease WHERE IntNumRow = @_int
                      )
                      AND idfsSpeciesType =
                      (
                          SELECT IdfsSpeciesType FROM @Disease WHERE IntNumRow = @_int
                      )
                      AND idfsProphilacticAction =
                      (
                          SELECT IdfsProphilacticAction FROM @Disease WHERE IntNumRow = @_int
                      );
            END
            ELSE
            BEGIN
                IF EXISTS (SELECT * FROM @Disease WHERE IntNumRow = @_int)
                BEGIN
                    INSERT INTO @SuppressSelect
                    EXEC dbo.USP_GBL_NEXTKEYID_GET 'tlbAggrProphylacticActionMTX',
                                                   @idfAggrProphylacticActionMTX OUTPUT;

                    INSERT INTO dbo.tlbAggrProphylacticActionMTX
                    (
                        idfAggrProphylacticActionMTX,
                        idfVersion,
                        idfsDiagnosis,
                        idfsSpeciesType,
                        idfsProphilacticAction,
                        intNumRow,
                        intRowStatus,
                        AuditCreateDTM,
                        AuditCreateUser
                    )
                    SELECT @idfAggrProphylacticActionMTX,
                           --IdfVersion,
						   @idfVersion,
                           IdfsDiagnosis,
                           IdfsSpeciesType,
                           IdfsProphilacticAction,
                           IntNumRow,
                           0,
                           GETDATE(),
                           @AuditUserName
                    FROM @Disease
                    WHERE IntNumRow = @_int;
                END
            END

            SET @_int = @_int + 1;
        END

        INSERT INTO @SuppressSelect
        EXECUTE dbo.USP_ADMIN_EVENT_SET @EventId,
                                        @EventTypeId,
                                        @EventUserId,
                                        @idfAggrProphylacticActionMTX,
                                        @EventDiseaseId,
                                        @EventSiteId,
                                        @EventInformationString,
                                        @EventLoginSiteId,
                                        @EventLocationId,
                                        @AuditUserName;

        SELECT @ReturnCode AS 'ReturnCode',
               @ReturnMessage AS 'ReturnMessage',
               @idfAggrProphylacticActionMTX AS 'idfAggrProphylacticActionMTX'
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering Procedure [dbo].[USP_VAS_MONITORING_SESSION_SET]...';


GO
-- ================================================================================================
-- Name: USP_VAS_MONITORING_SESSION_SET
--
-- Description:	Inserts or updates veterinary surveillance session for the veterinary active surveillance 
-- session use cases.
--                      
-- Revision History:
-- Name					Date       Change Detail
-- ---------------		---------- -------------------------------------------------------------------
-- Mike Kornegay		02/02/2022 Initial release. (Copied from USP_VET_DISEASE_REPORT_SET).
-- Mike Kornegay		02/14/2022 Correct problem with saving actions - retrieve monitoring session id first.
-- Mike Kornegay		02/15/2022 Removed @SpeciesTypeID because this was the same as @ReportTypeID
-- Mike Kornegay		02/16/2022 Added back the animals temp to add or update animals 
--							  before samples are written.
-- Mike Kornegay		02/26/2022 Fixed FlockOrHerd section not passing the FarmID.
-- Mike Kornegay		03/08/2022 Removed MonitoringSessionID from samples - should come from new or update key
--							  and added @LocationID
-- Mike Kornegay		03/11/2022 Refactored Aggregate Info sections.
-- Mike Kornegay		03/18/2022 Corrected parameters for USSP_VCT_MONITORING_SESSION_SUMMARY_SET.
-- Mike Kornegay		03/19/2022 Corrected issue with farm copy for aggregate farms and saving of aggregate diseases.
-- Mike Kornegay		03/21/2022 Corrected defect in reading aggregate summary temp table.
-- Mani Govindarajan	05/26/2022 Disassociate MonitoringSession with Farm in tlbFarm Table  search for comment -- disassociate farm with session
-- Mike Kornegay		06/02/2022 Add notifications save routine.
-- Mike Kornegay		06/13/2022 Changed references for @ReportTypeID to point to the new SessionCategoryID fields.
-- Stephen Long         07/06/2022 Updates for site alerts to call new stored procedure.
-- Mike Kornegay		07/08/2022 Correct logic for removing aggregate farms from monitoring session.
-- Mike Kornegay		08/18/2022 Added logic for storing multiple diseases per sample.
-- Mike Kornegay        08/19/2022 Correct error on SampleToDisease temp table.
-- Mike Kornegay		09/05/2022 Fixed error where MonitoringSessionToDiagnosisID was not set correctly.
-- Mike Kornegay		09/30/2022 Add saving of idfsMonitoringSessionSpeciesType and correct farm save for new type.
-- Mike Kornegay		10/07/2022 Defect #5140 - EIDSSLocalOrFieldSampleID not generating correctly.
--
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_VAS_MONITORING_SESSION_SET]
(
    @MonitoringSessionID BIGINT = NULL,
    @SessionID NVARCHAR(200) = NULL,
    @SessionStartDate DATETIME = NULL,
    @SessionEndDate DATETIME = NULL,
    @SessionStatusTypeID BIGINT = NULL,
    @SessionCategoryID BIGINT = NULL,
    @SiteID BIGINT = NULL,
    @LegacySessionID NVARCHAR(200) = NULL,
    @CountryID BIGINT = NULL,
    @RegionID BIGINT = NULL,
    @RayonID BIGINT = NULL,
    @SettlementID BIGINT = NULL,
    @CampaignKey BIGINT = NULL,
    @CampaignID NVARCHAR(200) = NULL,
    @DateEntered DATETIME = NULL,
    @EnteredByPersonID BIGINT = NULL,
    @RowStatus INT,
    @ReportTypeID BIGINT = NULL,
    @AuditUserName NVARCHAR(200),
    @FlocksOrHerds NVARCHAR(MAX) = NULL,
    @DiseaseSpeciesSamples NVARCHAR(MAX) = NULL,
    @Species NVARCHAR(MAX) = NULL,
    @Animals NVARCHAR(MAX) = NULL,
    @Farms NVARCHAR(MAX) = NULL,
    @Samples NVARCHAR(MAX) = NULL,
	@SamplesToDiseases NVARCHAR(MAX) = NULL,
    @LaboratoryTests NVARCHAR(MAX) = NULL,
    @LaboratoryTestInterpretations NVARCHAR(MAX) = NULL,
    @Actions NVARCHAR(MAX) = NULL,
    @AggregateSummaryInfo NVARCHAR(MAX) = NULL,
    @AggregateSummaryDiseases NVARCHAR(MAX) = NULL,
    @FarmsAggregate NVARCHAR(MAX) = NULL,
    @FlocksOrHerdsAggregate NVARCHAR(MAX) = NULL,
    @SpeciesAggregate NVARCHAR(MAX) = NULL,
    @DiseaseReports NVARCHAR(MAX) = NULL,
    @Events NVARCHAR(MAX) = NULL,
    @UserID BIGINT,
    @LocationID BIGINT = NULL,
	@LinkLocalOrFieldSampleIDToReportID BIT = 0
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        DECLARE @ReturnCode INT = 0;
        DECLARE @ReturnMessage NVARCHAR(MAX) = N'SUCCESS';
        DECLARE @SuppressSelect TABLE
        (
            ReturnCode INT,
            ReturnMessage NVARCHAR(MAX)
        );
        DECLARE @RowAction INT = NULL,
                @RowID BIGINT,
				@ChildRowID BIGINT,
				@Iteration INT = 0,
                @NewFarmOwnerID BIGINT = NULL,
                @FarmID BIGINT = NULL,
                @FarmMasterID BIGINT = NULL,
                @FarmOwnerID BIGINT = NULL,
                @Latitude FLOAT = NULL,
                @Longitude FLOAT = NULL,
                @FlockOrHerdID BIGINT = NULL,
                @FlockOrHerdMasterID BIGINT = NULL,
                @EIDSSFlockOrHerdID NVARCHAR(200) = NULL,
                @SickAnimalQuantity INT = NULL,
                @TotalAnimalQuantity INT = NULL,
                @DeadAnimalQuantity INT = NULL,
                @Comments NVARCHAR(2000) = NULL,
                @SpeciesID BIGINT = NULL,
                @SpeciesMasterID BIGINT = NULL,
                @InternalSpeciesTypeID BIGINT = NULL,
                @StartOfSignsDate DATETIME = NULL,
                @AverageAge NVARCHAR(200) = NULL,
                @ObservationID BIGINT = NULL,
                @AnimalID BIGINT = NULL,
                @SexTypeID BIGINT = NULL,
                @DiseaseID BIGINT = NULL,
                @ConditionTypeID BIGINT = NULL,
                @AgeTypeID BIGINT = NULL,
                @EIDSSAnimalID NVARCHAR(200) = NULL,
                @AnimalName NVARCHAR(200) = NULL,
                @Color NVARCHAR(200) = NULL,
                @AnimalDescription NVARCHAR(200) = NULL,
                @ClinicalSignsIndicator BIGINT = NULL,
                @VaccinationID BIGINT,
                @VaccinationTypeID BIGINT = NULL,
                @RouteTypeID BIGINT = NULL,
                @VaccinationDate DATETIME = NULL,
                @Manufacturer NVARCHAR(200) = NULL,
                @LotNumber NVARCHAR(200) = NULL,
                @NumberVaccinated INT = NULL,
                @SampleID BIGINT,
                @SampleTypeID BIGINT = NULL,
                @RootSampleID BIGINT = NULL,
                @ParentSampleID BIGINT = NULL,
                @CollectedByPersonID BIGINT = NULL,
                @CollectedByOrganizationID BIGINT = NULL,
                @CollectionDate DATETIME = NULL,
                @SentDate DATETIME = NULL,
                @EIDSSLocalOrFieldSampleID NVARCHAR(200) = NULL,
                @SampleStatusTypeID BIGINT = NULL,
                @SpeciesTypeID BIGINT = NULL,
                @EIDSSLaboratorySampleID NVARCHAR(200) = NULL,
                @SentToOrganizationID BIGINT = NULL,
                @ReadOnlyIndicator BIT = NULL,
                @CurrentSiteID BIGINT = NULL,
                @BirdStatusTypeID BIGINT = NULL,
                @PensideTestID BIGINT = NULL,
                @PensideTestResultTypeID BIGINT = NULL,
                @PensideTestNameTypeID BIGINT = NULL,
                @TestedByPersonID BIGINT = NULL,
                @TestedByOrganizationID BIGINT = NULL,
                @TestDate DATETIME = NULL,
                @PensideTestCategoryTypeID BIGINT = NULL,
                @TestID BIGINT = NULL,
                @TestNameTypeID BIGINT = NULL,
                @TestCategoryTypeID BIGINT = NULL,
                @TestResultTypeID BIGINT = NULL,
                @TestStatusTypeID BIGINT,
                @BatchTestID BIGINT = NULL,
                @StartedDate DATETIME = NULL,
                @ResultDate DATETIME = NULL,
                @ResultEnteredByOrganizationID BIGINT = NULL,
                @ResultEnteredByPersonID BIGINT = NULL,
                @ValidatedByOrganizationID BIGINT = NULL,
                @ValidatedByPersonID BIGINT = NULL,
                @NonLaboratoryTestIndicator BIT,
                @ExternalTestIndicator BIT = NULL,
                @PerformedByOrganizationID BIGINT = NULL,
                @ReceivedDate DATETIME = NULL,
                @ContactPersonName NVARCHAR(200) = NULL,
                @TestMonitoringSesssionID BIGINT = NULL,
                @TestInterpretationID BIGINT,
                @InterpretedStatusTypeID BIGINT = NULL,
                @InterpretedByOrganizationID BIGINT = NULL,
                @InterpretedByPersonID BIGINT = NULL,
                @TestingInterpretations BIGINT,
                @ValidatedStatusIndicator BIT = NULL,
                @ReportSessionCreatedIndicator BIT = NULL,
                @ValidatedComment NVARCHAR(200) = NULL,
                @InterpretedComment NVARCHAR(200) = NULL,
                @ValidatedDate DATETIME = NULL,
                @InterpretedDate DATETIME = NULL,
                @CaseLogID BIGINT,
                @LogStatusTypeID BIGINT = NULL,
                @LoggedByPersonID BIGINT = NULL,
                @LogDate DATETIME = NULL,
                @ActionRequired NVARCHAR(200) = NULL,
                @VeterinaryDiseaseReportRelationshipID BIGINT = NULL,
                @RelatedToSpeciesID BIGINT = NULL,
                @RelatedToAnimalID BIGINT = NULL,
                @RelatedToObservationID BIGINT = NULL,
                @FormTemplateID BIGINT,
                @ObservationSiteID BIGINT,
                @ActivityID BIGINT = NULL,
                @ActivityIDNew BIGINT = NULL,
                @ParameterID BIGINT = NULL,
                @ParameterValue SQL_VARIANT = NULL,
                @ParameterRowID BIGINT = NULL,
                @EventId BIGINT,
                @EventTypeId BIGINT = NULL,
                @EventSiteId BIGINT = NULL,
                @EventObjectId BIGINT = NULL,
                @EventUserId BIGINT = NULL,
                @EventDiseaseId BIGINT = NULL,
                @EventLocationId BIGINT = NULL,
                @EventInformationString NVARCHAR(MAX) = NULL,
                @EventLoginSiteId BIGINT = NULL,
                @MonitoringSessionActionID BIGINT = NULL,
                @MonitoringSessionActionStatusTypeID BIGINT = NULL,
                @MonitoringSessionActionTypeID BIGINT = NULL,
                @MonitoringSessionToDiagnosis BIGINT = NULL,
                @MonitoringSessionSummaryID BIGINT = NULL,
				@MonitoringSessionToMaterialID BIGINT = NULL,
                @ActionDate DATETIME = NULL,
                @SampledAnimalsQuantity INT = NULL,
                @SamplesQuantity INT = NULL,
                @PositiveAnimalsQuantity INT = NULL,
                @Order INT = NULL;


        DECLARE @DiseaseSpeciesSampleTemp TABLE
        (
            MonitoringSessionToDiagnosisID BIGINT NOT NULL,
            DiseaseID BIGINT NOT NULL,
            [Order] INT NOT NULL,
            SpeciesTypeID BIGINT NULL,
            SampleTypeID BIGINT NULL,
            RowStatus INT NULL,
            RowAction INT NULL
        );
        DECLARE @FarmsTemp TABLE
        (
            FarmMasterID BIGINT NOT NULL,
            FarmID BIGINT NULL,
            TotalAnimalQuantity INT NULL,
            Latitude FLOAT NULL,
            Longitude FLOAT NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @FlocksOrHerdsTemp TABLE
        (
            FlockOrHerdID BIGINT NOT NULL,
            FarmID BIGINT NULL,
            FarmMasterID BIGINT NULL,
            FlockOrHerdMasterID BIGINT NULL,
            EIDSSFlockOrHerdID NVARCHAR(200) NULL,
            SickAnimalQuantity INT NULL,
            TotalAnimalQuantity INT NULL,
            DeadAnimalQuantity INT NULL,
            RowStatus INT NULL,
            RowAction INT NULL
        );
        DECLARE @SpeciesTemp TABLE
        (
            SpeciesID BIGINT NOT NULL,
            SpeciesMasterID BIGINT NULL,
            FlockOrHerdID BIGINT NOT NULL,
            SpeciesTypeID BIGINT NOT NULL,
            SickAnimalQuantity INT NULL,
            TotalAnimalQuantity INT NULL,
            DeadAnimalQuantity INT NULL,
            StartOfSignsDate DATETIME NULL,
            AverageAge NVARCHAR(200) NULL,
            ObservationID BIGINT NULL,
            Comments NVARCHAR(2000) NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL,
            RelatedToSpeciesID BIGINT NULL,
            RelatedToObservationID BIGINT NULL
        );
        DECLARE @AnimalsTemp TABLE
        (
            AnimalID BIGINT NOT NULL,
            SexTypeID BIGINT NULL,
            ConditionTypeID BIGINT NULL,
            AgeTypeID BIGINT NULL,
            SpeciesID BIGINT NULL,
            ObservationID BIGINT NULL,
            EIDSSAnimalID NVARCHAR(200) NULL,
            AnimalName NVARCHAR(200) NULL,
            Color NVARCHAR(200) NULL,
            AnimalDescription NVARCHAR(200) NULL,
            ClinicalSignsIndicator BIGINT NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL,
            RelatedToAnimalID BIGINT NULL,
            RelatedToObservationID BIGINT NULL
        );
        DECLARE @SamplesTemp TABLE
        (
            SampleID BIGINT NOT NULL,
            SampleTypeID BIGINT NULL,
            RootSampleID BIGINT NULL,
            ParentSampleID BIGINT NULL,
            SpeciesID BIGINT NULL,
            AnimalID BIGINT NULL,
            MonitoringSessionID BIGINT NULL,
            SampleStatusTypeID BIGINT NULL,
            CollectionDate DATETIME NULL,
            CollectedByOrganizationID BIGINT NULL,
            CollectedByPersonID BIGINT NULL,
            SentDate DATETIME NULL,
            SentToOrganizationID BIGINT NULL,
            EIDSSLocalOrFieldSampleID NVARCHAR(200) NULL,
            Comments NVARCHAR(200) NULL,
            SiteID BIGINT NOT NULL,
            CurrentSiteID BIGINT NULL,
            EnteredDate DATETIME NULL,
            DiseaseID BIGINT NULL,
            BirdStatusTypeID BIGINT NULL,
            ReadOnlyIndicator BIT NULL,
            FarmID BIGINT NULL,
            FarmMasterID BIGINT NULL,
            FarmOwnerID BIGINT NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
		DECLARE @SamplesToDiseasesTemp TABLE
        (
            MonitoringSessionToMaterialID BIGINT NOT NULL,
            MonitoringSessionID BIGINT NOT NULL,
			SampleID BIGINT NOT NULL,
			SampleTypeID BIGINT NULL,
            DiseaseID BIGINT NOT NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @LaboratoryTestsTemp TABLE
        (
            TestID BIGINT NOT NULL,
            TestNameTypeID BIGINT NULL,
            TestCategoryTypeID BIGINT NULL,
            TestResultTypeID BIGINT NULL,
            TestStatusTypeID BIGINT NOT NULL,
            DiseaseID BIGINT NOT NULL,
            SampleID BIGINT NULL,
            BatchTestID BIGINT NULL,
            ObservationID BIGINT NULL,
            TestNumber INT NULL,
            Comments NVARCHAR NULL,
            StartedDate DATETIME NULL,
            ResultDate DATETIME NULL,
            TestedByOrganizationID BIGINT NULL,
            TestedByPersonID BIGINT NULL,
            ResultEnteredByOrganizationID BIGINT NULL,
            ResultEnteredByPersonID BIGINT NULL,
            ValidatedByOrganizationID BIGINT NULL,
            ValidatedByPersonID BIGINT NULL,
            ReadOnlyIndicator BIT NOT NULL,
            NonLaboratoryTestIndicator BIT NOT NULL,
            ExternalTestIndicator BIT NULL,
            PerformedByOrganizationID BIGINT NULL,
            ReceivedDate DATETIME NULL,
            ContactPersonName NVARCHAR(200) NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @LaboratoryTestInterpretationsTemp TABLE
        (
            TestInterpretationID BIGINT NOT NULL,
            DiseaseID BIGINT NULL,
            InterpretedStatusTypeID BIGINT NULL,
            ValidatedByOrganizationID BIGINT NULL,
            ValidatedByPersonID BIGINT NULL,
            InterpretedByOrganizationID BIGINT NULL,
            InterpretedByPersonID BIGINT NULL,
            TestID BIGINT NOT NULL,
            ValidatedStatusIndicator BIT NULL,
            ReportSessionCreatedIndicator BIT NULL,
            ValidatedComment NVARCHAR(200) NULL,
            InterpretedComment NVARCHAR(200) NULL,
            ValidatedDate DATETIME NULL,
            InterpretedDate DATETIME NULL,
            ReadOnlyIndicator BIT NOT NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @ActionsTemp TABLE
        (
            MonitoringSessionActionID BIGINT NOT NULL,
            MonitoringSessionActionStatusTypeID BIGINT NULL,
            MonitoringSessionActionTypeID BIGINT NULL,
            EnteredByPersonID BIGINT NULL,
            ActionDate DATETIME NULL,
            Comments NVARCHAR(1000) NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @AggregateSummaryInfoTemp TABLE
        (
            MonitoringSessionSummaryID BIGINT NOT NULL,
            FarmID BIGINT NULL,
            FarmMasterID BIGINT NULL,
            SpeciesID BIGINT NULL,
            AnimalSexID BIGINT NULL,
            SampleAnimalsQty INT NULL,
            SamplesQty INT NULL,
            CollectionDate DATETIME NULL,
            CollectedByPersonID BIGINT NULL,
            PositiveAnimalsQty INT NULL,
            DiseaseID BIGINT NULL,
            SampleTypeID BIGINT NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @AggregateSummaryDiseasesTemp TABLE
        (
            MonitoringSessionSummaryID BIGINT NULL,
            DiseaseID BIGINT NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @FarmsAggregateTemp TABLE
        (
            FarmMasterID BIGINT NOT NULL,
            FarmID BIGINT NULL,
            TotalAnimalQuantity INT NULL,
            Latitude FLOAT NULL,
            Longitude FLOAT NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @FlocksOrHerdsAggregateTemp TABLE
        (
            FlockOrHerdID BIGINT NOT NULL,
            FarmID BIGINT NULL,
            FarmMasterID BIGINT NULL,
            FlockOrHerdMasterID BIGINT NULL,
            EIDSSFlockOrHerdID NVARCHAR(200) NULL,
            SickAnimalQuantity INT NULL,
            TotalAnimalQuantity INT NULL,
            DeadAnimalQuantity INT NULL,
            RowStatus INT NULL,
            RowAction INT NULL
        );
        DECLARE @SpeciesAggregateTemp TABLE
        (
            SpeciesID BIGINT NOT NULL,
            SpeciesMasterID BIGINT NULL,
            FlockOrHerdID BIGINT NOT NULL,
            SpeciesTypeID BIGINT NOT NULL,
            SickAnimalQuantity INT NULL,
            TotalAnimalQuantity INT NULL,
            DeadAnimalQuantity INT NULL,
            StartOfSignsDate DATETIME NULL,
            AverageAge NVARCHAR(200) NULL,
            ObservationID BIGINT NULL,
            Comments NVARCHAR(2000) NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL,
            RelatedToSpeciesID BIGINT NULL,
            RelatedToObservationID BIGINT NULL
        );
        DECLARE @EventsTemp TABLE
        (
            EventId BIGINT NOT NULL,
            EventTypeId BIGINT NULL,
            UserId BIGINT NULL,
            SiteId BIGINT NULL,
            LoginSiteId BIGINT NULL,
            ObjectId BIGINT NULL,
            DiseaseId BIGINT NULL,
            LocationId BIGINT NULL,
            InformationString NVARCHAR(MAX) NULL
        );

        BEGIN TRANSACTION;

        INSERT INTO @DiseaseSpeciesSampleTemp
        SELECT *
        FROM
            OPENJSON(@DiseaseSpeciesSamples)
            WITH
            (
                MonitoringSessionToDiagnosisID BIGINT,
                DiseaseID BIGINT,
                [Order] INT,
                SpeciesTypeID BIGINT,
                SampleTypeID BIGINT,
                RowStatus INT,
                RowAction INT
            );
        INSERT INTO @FarmsTemp
        SELECT *
        FROM
            OPENJSON(@Farms)
            WITH
            (
                FarmMasterID BIGINT,
                FarmID BIGINT,
                TotalAnimalQuantity INT,
                Latitude FLOAT,
                Longitude FLOAT,
                RowStatus INT,
                RowAction INT
            );
        INSERT INTO @FlocksOrHerdsTemp
        SELECT *
        FROM
            OPENJSON(@FlocksOrHerds)
            WITH
            (
                FlockOrHerdID BIGINT,
                FarmID BIGINT,
                FarmMasterID BIGINT,
                FlockOrHerdMasterID BIGINT,
                EIDSSFlockOrHerdID NVARCHAR(200),
                SickAnimalQuantity INT,
                TotalAnimalQuantity INT,
                DeadAnimalQuantity INT,
                RowStatus INT,
                RowAction INT
            );
        INSERT INTO @SpeciesTemp
        SELECT *
        FROM
            OPENJSON(@Species)
            WITH
            (
                SpeciesID BIGINT,
                SpeciesMasterID BIGINT,
                FlockOrHerdID BIGINT,
                SpeciesTypeID BIGINT,
                SickAnimalQuantity INT,
                TotalAnimalQuantity INT,
                DeadAnimalQuantity INT,
                StartOfSignsDate DATETIME,
                AverageAge NVARCHAR(200),
                ObservationID BIGINT,
                Comments NVARCHAR(2000),
                RowStatus INT,
                RowAction INT,
                RelatedToSpeciesID BIGINT,
                RelatedToObservationID BIGINT
            );
        INSERT INTO @AnimalsTemp
        SELECT *
        FROM
            OPENJSON(@Animals)
            WITH
            (
                AnimalID BIGINT,
                SexTypeID BIGINT,
                ConditionTypeID BIGINT,
                AgeTypeID BIGINT,
                SpeciesID BIGINT,
                ObservationID BIGINT,
                EIDSSAnimalID NVARCHAR(200),
                AnimalName NVARCHAR(200),
                Color NVARCHAR(200),
                AnimalDescription NVARCHAR(200),
                ClinicalSignsIndicator BIGINT,
                RowStatus INT,
                RowAction INT,
                RelatedToAnimalID BIGINT,
                RelatedToObservationID BIGINT
            );
        INSERT INTO @SamplesTemp
        SELECT *
        FROM
            OPENJSON(@Samples)
            WITH
            (
                SampleID BIGINT,
                SampleTypeID BIGINT,
                RootSampleID BIGINT,
                ParentSampleID BIGINT,
                SpeciesID BIGINT,
                AnimalID BIGINT,
                MonitoringSessionID BIGINT,
                SampleStatusTypeID BIGINT,
                CollectionDate DATETIME2,
                CollectedByOrganizationID BIGINT,
                CollectedByPersonID BIGINT,
                SentDate DATETIME2,
                SentToOrganizationID BIGINT,
                EIDSSLocalOrFieldSampleID NVARCHAR(200),
                Comments NVARCHAR(200),
                SiteID BIGINT,
                CurrentSiteID BIGINT,
                EnteredDate DATETIME2,
                DiseaseID BIGINT,
                BirdStatusTypeID BIGINT,
                ReadOnlyIndicator BIT,
                FarmID BIGINT,
                FarmMasterID BIGINT,
                FarmOwnerID BIGINT,
                RowStatus INT,
                RowAction INT
            );
		INSERT INTO @SamplesToDiseasesTemp
		SELECT *
		FROM
			OPENJSON(@SamplesToDiseases)
			WITH
			(
				MonitoringSessionToMaterialID BIGINT,
				MonitoringSessionID BIGINT,
				SampleID BIGINT,
				SampleTypeID BIGINT,
				DiseaseID BIGINT,
				RowStatus INT,
				RowAction INT
			);
        INSERT INTO @LaboratoryTestsTemp
        SELECT *
        FROM
            OPENJSON(@LaboratoryTests)
            WITH
            (
                TestID BIGINT,
                TestNameTypeID BIGINT,
                TestCategoryTypeID BIGINT,
                TestResultTypeID BIGINT,
                TestStatusTypeID BIGINT,
                DiseaseID BIGINT,
                SampleID BIGINT,
                BatchTestID BIGINT,
                ObservationID BIGINT,
                TestNumber INT,
                Comments NVARCHAR(500),
                StartedDate DATETIME2,
                ResultDate DATETIME2,
                TestedByOrganizationID BIGINT,
                TestedByPersonID BIGINT,
                ResultEnteredByOrganizationID BIGINT,
                ResultEnteredByPersonID BIGINT,
                ValidatedByOrganizationID BIGINT,
                ValidatedByPersonID BIGINT,
                ReadOnlyIndicator BIT,
                NonLaboratoryTestIndicator BIT,
                ExternalTestIndicator BIT,
                PerformedByOrganizationID BIGINT,
                ReceivedDate DATETIME2,
                ContactPersonName NVARCHAR(200),
                RowStatus INT,
                RowAction INT
            );
        INSERT INTO @LaboratoryTestInterpretationsTemp
        SELECT *
        FROM
            OPENJSON(@LaboratoryTestInterpretations)
            WITH
            (
                TestInterpretationID BIGINT,
                DiseaseID BIGINT,
                InterpretedStatusTypeID BIGINT,
                ValidatedByOrganizationID BIGINT,
                ValidatedByPersonID BIGINT,
                InterpretedByOrganizationID BIGINT,
                InterpretedByPersonID BIGINT,
                TestID BIGINT,
                ValidatedStatusIndicator BIT,
                ReportSessionCreatedIndicator BIT,
                ValidatedComment NVARCHAR(200),
                InterpretedComment NVARCHAR(200),
                ValidatedDate DATETIME2,
                InterpretedDate DATETIME2,
                ReadOnlyIndicator BIT,
                RowStatus INT,
                RowAction INT
            );
        INSERT INTO @ActionsTemp
        SELECT *
        FROM
            OPENJSON(@Actions)
            WITH
            (
                MonitoringSessionActionID BIGINT,
                MonitoringSessionActionStatusTypeID BIGINT,
                MonitoringSessionActionTypeID BIGINT,
                EnteredByPersonID BIGINT,
                ActionDate DATETIME,
                Comments NVARCHAR(1000),
                RowStatus INT,
                RowAction INT
            );
        INSERT INTO @AggregateSummaryInfoTemp
        SELECT *
        FROM
            OPENJSON(@AggregateSummaryInfo)
            WITH
            (
                MonitoringSessionSummaryID BIGINT,
                FarmID BIGINT,
                FarmMasterID BIGINT,
                SpeciesID BIGINT,
                AnimalSexID BIGINT,
                SampleAnimalsQty INT,
                SamplesQty INT,
                CollectionDate DATETIME,
                CollectedByPersonID BIGINT,
                PositiveAnimalsQty INT,
                DiseaseID BIGINT,
                SampleTypeID BIGINT,
                RowStatus INT,
                RowAction INT
            );
        INSERT INTO @AggregateSummaryDiseasesTemp
        SELECT *
        FROM
            OPENJSON(@AggregateSummaryDiseases)
            WITH
            (
                MonitoringSessionSummaryID BIGINT,
                DiseaseID BIGINT,
                RowStatus INT,
                RowAction INT
            );
        INSERT INTO @FarmsAggregateTemp
        SELECT *
        FROM
            OPENJSON(@FarmsAggregate)
            WITH
            (
                FarmMasterID BIGINT,
                FarmID BIGINT,
                TotalAnimalQuantity INT,
                Latitude FLOAT,
                Longitude FLOAT,
                RowStatus INT,
                RowAction INT
            );
        INSERT INTO @FlocksOrHerdsAggregateTemp
        SELECT *
        FROM
            OPENJSON(@FlocksOrHerdsAggregate)
            WITH
            (
                FlockOrHerdID BIGINT,
                FarmID BIGINT,
                FarmMasterID BIGINT,
                FlockOrHerdMasterID BIGINT,
                EIDSSFlockOrHerdID NVARCHAR(200),
                SickAnimalQuantity INT,
                TotalAnimalQuantity INT,
                DeadAnimalQuantity INT,
                RowStatus INT,
                RowAction INT
            );
        INSERT INTO @SpeciesAggregateTemp
        SELECT *
        FROM
            OPENJSON(@SpeciesAggregate)
            WITH
            (
                SpeciesID BIGINT,
                SpeciesMasterID BIGINT,
                FlockOrHerdID BIGINT,
                SpeciesTypeID BIGINT,
                SickAnimalQuantity INT,
                TotalAnimalQuantity INT,
                DeadAnimalQuantity INT,
                StartOfSignsDate DATETIME,
                AverageAge NVARCHAR(200),
                ObservationID BIGINT,
                Comments NVARCHAR(2000),
                RowStatus INT,
                RowAction INT,
                RelatedToSpeciesID BIGINT,
                RelatedToObservationID BIGINT
            );

        INSERT INTO @EventsTemp
        SELECT *
        FROM
            OPENJSON(@Events)
            WITH
            (
                EventId BIGINT,
                EventTypeId BIGINT,
                UserId BIGINT,
                SiteId BIGINT,
                LoginSiteId BIGINT,
                ObjectId BIGINT,
                DiseaseId BIGINT,
                LocationId BIGINT,
                InformationString NVARCHAR(MAX)
            );

        IF NOT EXISTS
        (
            SELECT *
            FROM dbo.tlbMonitoringSession
            WHERE idfMonitoringSession = @MonitoringSessionID
                  AND intRowStatus = 0
        )
        BEGIN

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tlbMonitoringSession',
                                              @MonitoringSessionID OUTPUT;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_GBL_NextNumber_GET 'Vet Active Surveillance Session',
                                               @SessionID OUTPUT,
                                               NULL;

            INSERT INTO dbo.tlbMonitoringSession
            (
                [idfMonitoringSession],
                [idfsMonitoringSessionStatus],
                [idfsCountry],
                [idfsRegion],
                [idfsRayon],
                [idfsSettlement],
                [idfPersonEnteredBy],
                [idfCampaign],
                [idfsSite],
                [datEnteredDate],
                [strMonitoringSessionID],
                [intRowStatus],
                [datStartDate],
                [datEndDate],
                [SessionCategoryID],
                [LegacySessionID],
                [AuditCreateUser],
                [SourceSystemNameID],
                [SourceSystemKeyValue],
                [idfsLocation],
				[idfsMonitoringSessionSpeciesType]
            )
            VALUES
            (@MonitoringSessionID,
             @SessionStatusTypeID,
             @CountryID,
             @RegionID,
             @RayonID,
             @SettlementID,
             @EnteredByPersonID,
             @CampaignKey,
             @SiteID,
             @DateEntered,
             @SessionID,
             0  ,
             @SessionStartDate,
             @SessionEndDate,
             @SessionCategoryID,
             @LegacySessionID,
             @AuditUserName,
             10519001,
             '[{"idfMonitoringSessionID":' + CAST(@MonitoringSessionID AS NVARCHAR(300)) + '}]',
             @LocationID,
			 @ReportTypeID
            );

            UPDATE @EventsTemp
            SET ObjectId = @MonitoringSessionID
            WHERE ObjectId = 0;
        END
        ELSE
        BEGIN
            UPDATE [dbo].[tlbMonitoringSession]
            SET [idfsMonitoringSessionStatus] = @SessionStatusTypeID,
                [idfsCountry] = @CountryID,
                [idfsRegion] = @RegionID,
                [idfsRayon] = @RayonID,
                [idfsSettlement] = @SettlementID,
                [idfPersonEnteredBy] = @EnteredByPersonID,
                [idfCampaign] = @CampaignKey,
                [idfsSite] = @SiteID,
                [datEnteredDate] = @DateEntered,
                [strMonitoringSessionID] = @SessionID,
                [intRowStatus] = 0,
                [datStartDate] = @SessionStartDate,
                [datEndDate] = @SessionEndDate,
                [SessionCategoryID] = @SessionCategoryID,
                [LegacySessionID] = @LegacySessionID,
                [AuditUpdateUser] = @AuditUserName,
                [idfsLocation] = @LocationID,
				[idfsMonitoringSessionSpeciesType] = @ReportTypeID
            WHERE idfMonitoringSession = @MonitoringSessionID
        END;

        WHILE EXISTS (SELECT * FROM @DiseaseSpeciesSampleTemp)
        BEGIN
            SELECT TOP 1
                @RowID = MonitoringSessionToDiagnosisID,
				@MonitoringSessionToDiagnosis = MonitoringSessionToDiagnosisID,
                @DiseaseID = DiseaseID,
                @SpeciesTypeID = SpeciesTypeID,
                @SampleTypeID = SampleTypeID,
                @Order = [Order],
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @DiseaseSpeciesSampleTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VAS_MONITORING_SESSION_TO_DIAGNOSIS_SPECIES_SAMPLE_SET @MonitoringSessionToDiagnosis OUTPUT,
                                                                                    @MonitoringSessionID,
                                                                                    @DiseaseID,
                                                                                    @SpeciesTypeID,
                                                                                    @SampleTypeID,
                                                                                    @Order,
                                                                                    @RowStatus,
                                                                                    @RowAction,
                                                                                    @AuditUserName;

            DELETE FROM @DiseaseSpeciesSampleTemp
            WHERE MonitoringSessionToDiagnosisID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @FarmsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = FarmMasterID,
                @FarmMasterID = FarmMasterID,
                @FarmID = FarmID,
                @TotalAnimalQuantity = TotalAnimalQuantity,
                @Latitude = Latitude,
                @Longitude = Longitude,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @FarmsTemp;



            IF @ReportTypeID = 129909620007069 --Avian
            BEGIN
                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_VET_FARM_COPY @AuditUserName,
                                               @RowID,
                                               @TotalAnimalQuantity,
                                               NULL,
                                               NULL,
                                               NULL,
                                               NULL,
                                               NULL,
                                               @Latitude,
                                               @Longitude,
                                               @MonitoringSessionID,
                                               NULL,
                                               @FarmOwnerID,
                                               @FarmID OUTPUT,
                                               @NewFarmOwnerID OUTPUT;

                IF @NewFarmOwnerID IS NOT NULL
                BEGIN
                    SET @FarmOwnerID = @NewFarmOwnerID;
                END;

                UPDATE @FlocksOrHerdsTemp
                SET FarmID = @FarmID
                WHERE FarmMasterID = @RowID;

                UPDATE @SamplesTemp
                SET FarmID = @FarmID
                WHERE FarmMasterID = @RowID;

            END
            ELSE --Livestock
            BEGIN
                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_VET_FARM_COPY @AuditUserName,
                                               @RowID,
                                               NULL,
                                               NULL,
                                               NULL,
                                               @TotalAnimalQuantity,
                                               NULL,
                                               NULL,
                                               @Latitude,
                                               @Longitude,
                                               @MonitoringSessionID,
                                               NULL,
                                               @FarmOwnerID,
                                               @FarmID OUTPUT,
                                               @NewFarmOwnerID OUTPUT;

                IF @NewFarmOwnerID IS NOT NULL
                BEGIN
                    SET @FarmOwnerID = @NewFarmOwnerID;
                END;

                UPDATE @FlocksOrHerdsTemp
                SET FarmID = @FarmID
                WHERE FarmMasterID = @RowID;

                UPDATE @SamplesTemp
                SET FarmID = @FarmID
                WHERE FarmMasterID = @RowID;
            END

            -- disassociate farm with session 
            if ((@MonitoringSessionID IS NOT NULL) AND (@RowStatus = 1))
            BEGIN
                UPDATE dbo.tlbFarm
                set idfMonitoringSession = null
                where idfFarm = @FarmID
                      and idfMonitoringSession = @MonitoringSessionID;
            END;


            DELETE FROM @FarmsTemp
            WHERE FarmMasterID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @FlocksOrHerdsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = FlockOrHerdID,
                @FlockOrHerdID = FlockOrHerdID,
                @FarmID = FarmID,
                @FarmMasterID = FarmMasterID,
                @FlockOrHerdMasterID = FlockOrHerdMasterID,
                @EIDSSFlockOrHerdID = EIDSSFlockOrHerdID,
                @SickAnimalQuantity = SickAnimalQuantity,
                @TotalAnimalQuantity = TotalAnimalQuantity,
                @DeadAnimalQuantity = DeadAnimalQuantity,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @FlocksOrHerdsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VET_HERD_SET @AuditUserName,
                                          @FlockOrHerdID OUTPUT,
                                          @FlockOrHerdMasterID,
                                          @FarmID,
                                          @EIDSSFlockOrHerdID,
                                          @SickAnimalQuantity,
                                          @TotalAnimalQuantity,
                                          @DeadAnimalQuantity,
                                          NULL,
                                          @RowStatus,
                                          @RowAction;

            UPDATE @SpeciesTemp
            SET FlockOrHerdID = @FlockOrHerdID
            WHERE FlockOrHerdID = @RowID;

            DELETE FROM @FlocksOrHerdsTemp
            WHERE FLockOrHerdID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @SpeciesTemp)
        BEGIN
            SELECT TOP 1
                @RowID = SpeciesID,
                @SpeciesID = SpeciesID,
                @SpeciesMasterID = SpeciesMasterID,
                @SpeciesTypeID = SpeciesTypeID,
                @FlockOrHerdID = FlockOrHerdID,
                @StartOfSignsDate = StartOfSignsDate,
                @AverageAge = AverageAge,
                @SickAnimalQuantity = SickAnimalQuantity,
                @TotalAnimalQuantity = TotalAnimalQuantity,
                @DeadAnimalQuantity = DeadAnimalQuantity,
                @Comments = Comments,
                @ObservationID = ObservationID,
                @RowStatus = RowStatus,
                @RowAction = RowAction,
                @RelatedToSpeciesID = RelatedToSpeciesID,
                @RelatedToObservationID = RelatedToObservationID
            FROM @SpeciesTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VET_SPECIES_SET @AuditUserName,
                                             @SpeciesID OUTPUT,
                                             @SpeciesMasterID,
                                             @SpeciesTypeID,
                                             @FlockOrHerdID,
                                             @ObservationID,
                                             @StartOfSignsDate,
                                             @AverageAge,
                                             @SickAnimalQuantity,
                                             @TotalAnimalQuantity,
                                             @DeadAnimalQuantity,
                                             @Comments,
                                             @RowStatus,
                                             @RowAction;

            UPDATE @AnimalsTemp
            SET SpeciesID = @SpeciesID
            WHERE SpeciesID = @RowID;

            UPDATE @SamplesTemp
            SET SpeciesID = @SpeciesID
            WHERE SpeciesID = @RowID;

            DELETE FROM @SpeciesTemp
            WHERE SpeciesID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @AnimalsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = AnimalID,
                @AnimalID = AnimalID,
                @SexTypeID = SexTypeID,
                @ConditionTypeID = ConditionTypeID,
                @AgeTypeID = AgeTypeID,
                @SpeciesID = SpeciesID,
                @ObservationID = ObservationID,
                @AnimalDescription = AnimalDescription,
                @EIDSSAnimalID = EIDSSAnimalID,
                @AnimalName = AnimalName,
                @Color = Color,
                @ClinicalSignsIndicator = ClinicalSignsIndicator,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @AnimalsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VET_ANIMAL_SET @AuditUserName,
                                            @AnimalID OUTPUT,
                                            @SexTypeID,
                                            @ConditionTypeID,
                                            @AgeTypeID,
                                            @SpeciesID,
                                            @ObservationID,
                                            @AnimalDescription,
                                            @EIDSSAnimalID,
                                            @AnimalName,
                                            @Color,
                                            @ClinicalSignsIndicator,
                                            @RowStatus,
                                            @RowAction;

            UPDATE @SamplesTemp
            SET AnimalID = @AnimalID
            WHERE AnimalID = @RowID;

            DELETE FROM @AnimalsTemp
            WHERE AnimalID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @SamplesTemp)
        BEGIN
            SELECT TOP 1
                @RowID = SampleID,
                @SampleID = SampleID,
                @SampleTypeID = SampleTypeID,
                @RootSampleID = RootSampleID,
                @ParentSampleID = ParentSampleID,
                @SpeciesID = SpeciesID,
                @AnimalID = AnimalID,
                @CollectedByPersonID = CollectedByPersonID,
                @CollectedByOrganizationID = CollectedByOrganizationID,
                @CollectionDate = CollectionDate,
                @SentDate = SentDate,
                @EIDSSLocalOrFieldSampleID = EIDSSLocalOrFieldSampleID,
                @SampleStatusTypeID = SampleStatusTypeID,
                @FarmID = FarmID,
                @FarmMasterID = FarmMasterID,
                @DiseaseID = DiseaseID,
                @DateEntered = EnteredDate,
                @Comments = Comments,
                @SiteID = SiteID,
                @CurrentSiteID = CurrentSiteID,
                @RowStatus = RowStatus,
                @SentToOrganizationID = SentToOrganizationID,
                @BirdStatusTypeID = BirdStatusTypeID,
                @ReadOnlyIndicator = ReadOnlyIndicator,
                @RowAction = RowAction
            FROM @SamplesTemp;

			--Format the EIDSSLocalOrFieldSampleID according to system preferences.
			IF (
				@EIDSSLocalOrFieldSampleID IS NULL
				OR @EIDSSLocalOrFieldSampleID = ''
               )
               AND @LinkLocalOrFieldSampleIDToReportID = 1
            BEGIN
                SET @Iteration = @Iteration + 1;
                IF @Iteration < 10
                BEGIN
                    SET @EIDSSLocalOrFieldSampleID = @SessionID + '-0' + CONVERT(NVARCHAR(4), @Iteration);
                END
                ELSE
                BEGIN
                    SET @EIDSSLocalOrFieldSampleID = @SessionID + '-' + CONVERT(NVARCHAR(4), @Iteration);
                END;
            END;

			INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_GBL_SAMPLE_SET @AuditUserName,
                                            @SampleID OUTPUT,
                                            @SampleTypeID,
                                            @RootSampleID,
                                            @ParentSampleID,
                                            @FarmOwnerID,
                                            @SpeciesID,
                                            @AnimalID,
                                            NULL,
                                            @MonitoringSessionID,
                                            NULL,
                                            NULL,
                                            NULL,
                                            @CollectionDate,
                                            @CollectedByPersonID,
                                            @CollectedByOrganizationID,
                                            @SentDate,
                                            @SentToOrganizationID,
                                            @EIDSSLocalOrFieldSampleID,
                                            @SiteID,
                                            @DateEntered,
                                            @ReadOnlyIndicator,
                                            @SampleStatusTypeID,
                                            @Comments,
                                            @CurrentSiteID,
                                            @DiseaseID,
                                            @BirdStatusTypeID,
                                            @RowStatus,
                                            @RowAction;

		
       	   		 
            UPDATE @LaboratoryTestsTemp
            SET SampleID = @SampleID
            WHERE SampleID = @RowID;

			UPDATE @SamplesToDiseasesTemp
            SET SampleID = @SampleID
            WHERE SampleID = @RowID;

            DELETE FROM @SamplesTemp
            WHERE SampleID = @RowID;
        END;

		WHILE EXISTS (SELECT * FROM @SamplesToDiseasesTemp)
		BEGIN
			SELECT TOP 1
				@RowID = MonitoringSessionToMaterialID,
				@MonitoringSessionToMaterialID = MonitoringSessionToMaterialID,
				@MonitoringSessionID = @MonitoringSessionID,
				@SampleID = SampleID,
				@SampleTypeID = SampleTypeID,
				@DiseaseID = DiseaseID,
				@RowAction = RowAction,
				@RowStatus = RowStatus
			FROM @SamplesToDiseasesTemp;

			--insert or update the diseases for this sample
			INSERT INTO @SuppressSelect
			EXECUTE dbo.USSP_VAS_SAMPLE_TO_DISEASE_SET
										@AuditUserName,
                                        @MonitoringSessionToMaterialID,
										@MonitoringSessionID,
										@SampleID,
										@DiseaseID,
                                        @SampleTypeID,
                                        @RowStatus,
                                        @RowAction;

			DELETE FROM @SamplesToDiseasesTemp
			WHERE MonitoringSessionToMaterialID = @RowID;
		END;

        WHILE EXISTS (SELECT * FROM @LaboratoryTestsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = TestID,
                @TestID = TestID,
                @TestNameTypeID = TestNameTypeID,
                @TestCategoryTypeID = TestCategoryTypeID,
                @TestResultTypeID = TestResultTypeID,
                @TestStatusTypeID = TestStatusTypeID,
                @DiseaseID = DiseaseID,
                @SampleID = SampleID,
                @Comments = Comments,
                @RowStatus = RowStatus,
                @StartedDate = StartedDate,
                @ResultDate = ResultDate,
                @TestedByOrganizationID = TestedByOrganizationID,
                @TestedByPersonID = TestedByPersonID,
                @ResultEnteredByOrganizationID = ResultEnteredByOrganizationID,
                @ResultEnteredByPersonID = ResultEnteredByPersonID,
                @ValidatedByOrganizationID = ValidatedByOrganizationID,
                @ValidatedByPersonID = ValidatedByPersonID,
                @ReadOnlyIndicator = ReadOnlyIndicator,
                @NonLaboratoryTestIndicator = NonLaboratoryTestIndicator,
                @ExternalTestIndicator = ExternalTestIndicator,
                @PerformedByOrganizationID = PerformedByOrganizationID,
                @ReceivedDate = ReceivedDate,
                @ContactPersonName = ContactPersonName,
                @RowAction = RowAction
            FROM @LaboratoryTestsTemp;

            --If record is being soft-deleted, then check if the test record was originally created 
            --in the laboaratory module.  If it was, then disassociate the test record from the 
            --veterinary surveillance session, so that the test record remains in the laboratory module 
            --for further action.
            IF @RowStatus = 1
               AND @NonLaboratoryTestIndicator = 0
            BEGIN
                SET @RowStatus = 0;
                SET @TestMonitoringSesssionID = NULL;
            END
            ELSE
            BEGIN
                SET @TestMonitoringSesssionID = @MonitoringSessionID;
            END;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_GBL_TEST_SET @AuditUserName,
                                          @TestID OUTPUT,
                                          @TestNameTypeID,
                                          @TestCategoryTypeID,
                                          @TestResultTypeID,
                                          @TestStatusTypeID,
                                          @DiseaseID,
                                          @SampleID,
                                          NULL,
                                          NULL,
                                          NULL,
                                          @Comments,
                                          @RowStatus,
                                          @StartedDate,
                                          @ResultDate,
                                          @TestedByOrganizationID,
                                          @TestedByPersonID,
                                          @ResultEnteredByOrganizationID,
                                          @ResultEnteredByPersonID,
                                          @ValidatedByOrganizationID,
                                          @ValidatedByPersonID,
                                          @ReadOnlyIndicator,
                                          @NonLaboratoryTestIndicator,
                                          @ExternalTestIndicator,
                                          @PerformedByOrganizationID,
                                          @ReceivedDate,
                                          @ContactPersonName,
                                          @MonitoringSessionID,
                                          NULL,
                                          NULL,
                                          NULL,
                                          @AuditUserName,
                                          @RowAction;

            UPDATE @LaboratoryTestInterpretationsTemp
            SET TestID = @TestID
            WHERE TestID = @RowID;

            DELETE FROM @LaboratoryTestsTemp
            WHERE TestID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @LaboratoryTestInterpretationsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = TestInterpretationID,
                @TestInterpretationID = TestInterpretationID,
                @DiseaseID = DiseaseID,
                @InterpretedStatusTypeID = InterpretedStatusTypeID,
                @ValidatedByOrganizationID = ValidatedByOrganizationID,
                @ValidatedByPersonID = ValidatedByPersonID,
                @InterpretedByOrganizationID = InterpretedByOrganizationID,
                @InterpretedByPersonID = InterpretedByPersonID,
                @TestID = TestID,
                @ValidatedStatusIndicator = ValidatedStatusIndicator,
                @ReportSessionCreatedIndicator = ReportSessionCreatedIndicator,
                @ValidatedComment = ValidatedComment,
                @InterpretedComment = InterpretedComment,
                @ValidatedDate = ValidatedDate,
                @InterpretedDate = InterpretedDate,
                @RowStatus = RowStatus,
                @ReadOnlyIndicator = ReadOnlyIndicator,
                @RowAction = RowAction
            FROM @LaboratoryTestInterpretationsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_GBL_TEST_INTERPRETATION_SET @AuditUserName,
                                                         @TestInterpretationID OUTPUT,
                                                         @DiseaseID,
                                                         @InterpretedStatusTypeID,
                                                         @ValidatedByOrganizationID,
                                                         @ValidatedByPersonID,
                                                         @InterpretedByOrganizationID,
                                                         @InterpretedByPersonID,
                                                         @TestID,
                                                         @ValidatedStatusIndicator,
                                                         @ReportSessionCreatedIndicator,
                                                         @ValidatedComment,
                                                         @InterpretedComment,
                                                         @ValidatedDate,
                                                         @InterpretedDate,
                                                         @RowStatus,
                                                         @ReadOnlyIndicator,
                                                         @RowAction;

            DELETE FROM @LaboratoryTestInterpretationsTemp
            WHERE TestInterpretationID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @ActionsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = MonitoringSessionActionID,
                @MonitoringSessionActionTypeID = MonitoringSessionActionTypeID,
                @MonitoringSessionActionStatusTypeID = MonitoringSessionActionStatusTypeID,
                @EnteredByPersonID = EnteredByPersonID,
                @ActionDate = ActionDate,
                @Comments = Comments,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @ActionsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VAS_MONITORING_SESSION_ACTION_SET @MonitoringSessionActionID,
                                                               @MonitoringSessionID,
                                                               @EnteredByPersonID,
                                                               @MonitoringSessionActionTypeID,
                                                               @MonitoringSessionActionStatusTypeID,
                                                               @ActionDate,
                                                               @Comments,
                                                               @RowStatus,
                                                               @RowAction,
                                                               @AuditUserName;

            DELETE FROM @ActionsTemp
            WHERE MonitoringSessionActionID = @RowID;
        END;

        /* Aggregate Information Section */

        WHILE EXISTS (SELECT * FROM @FarmsAggregateTemp)
        BEGIN
            SELECT TOP 1
                @RowID = FarmMasterID,
                @FarmMasterID = FarmMasterID,
                @FarmID = FarmID,
                @TotalAnimalQuantity = TotalAnimalQuantity,
                @Latitude = Latitude,
                @Longitude = Longitude,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @FarmsAggregateTemp;

            IF @ReportTypeID = 129909620007069 --Avian
            BEGIN
                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_VET_FARM_COPY @AuditUserName,
                                               @RowID,
                                               @TotalAnimalQuantity,
                                               NULL,
                                               NULL,
                                               NULL,
                                               NULL,
                                               NULL,
                                               @Latitude,
                                               @Longitude,
                                               NULL,
                                               NULL,
                                               @FarmOwnerID,
                                               @FarmID OUTPUT,
                                               @NewFarmOwnerID OUTPUT;

                IF @NewFarmOwnerID IS NOT NULL
                BEGIN
                    SET @FarmOwnerID = @NewFarmOwnerID;
                END;

            END
            ELSE --Livestock
            BEGIN
                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_VET_FARM_COPY @AuditUserName,
                                               @RowID,
                                               NULL,
                                               NULL,
                                               NULL,
                                               @TotalAnimalQuantity,
                                               NULL,
                                               NULL,
                                               @Latitude,
                                               @Longitude,
                                               NULL,
                                               NULL,
                                               @FarmOwnerID,
                                               @FarmID OUTPUT,
                                               @NewFarmOwnerID OUTPUT;

                IF @NewFarmOwnerID IS NOT NULL
                BEGIN
                    SET @FarmOwnerID = @NewFarmOwnerID;
                END;

            END

            UPDATE @FlocksOrHerdsAggregateTemp
            SET FarmID = @FarmID
            WHERE FarmMasterID = @RowID;

            UPDATE @AggregateSummaryInfoTemp
            SET FarmID = @FarmID
            WHERE FarmMasterID = @RowID;

			/*farm is being removed from aggregate monitoring session*/
			IF ((@MonitoringSessionID IS NOT NULL) AND (@RowStatus = 1))
			BEGIN
				UPDATE dbo.tlbFarm 
				SET  idfMonitoringSession = null
					,intRowStatus = @RowStatus
				WHERE idfFarm = @FarmID;
			END;

            DELETE FROM @FarmsAggregateTemp
            WHERE FarmMasterID = @RowID;

        END;

        WHILE EXISTS (SELECT * FROM @FlocksOrHerdsAggregateTemp)
        BEGIN
            SELECT TOP 1
                @RowID = FlockOrHerdID,
                @FlockOrHerdID = FlockOrHerdID,
                @FarmID = FarmID,
                @FarmMasterID = FarmMasterID,
                @FlockOrHerdMasterID = FlockOrHerdMasterID,
                @EIDSSFlockOrHerdID = EIDSSFlockOrHerdID,
                @SickAnimalQuantity = SickAnimalQuantity,
                @TotalAnimalQuantity = TotalAnimalQuantity,
                @DeadAnimalQuantity = DeadAnimalQuantity,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @FlocksOrHerdsAggregateTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VET_HERD_SET @AuditUserName,
                                          @FlockOrHerdID OUTPUT,
                                          @FlockOrHerdMasterID,
                                          @FarmID,
                                          @EIDSSFlockOrHerdID,
                                          @SickAnimalQuantity,
                                          @TotalAnimalQuantity,
                                          @DeadAnimalQuantity,
                                          NULL,
                                          @RowStatus,
                                          @RowAction;

            UPDATE @SpeciesAggregateTemp
            SET FlockOrHerdID = @FlockOrHerdID
            WHERE FlockOrHerdID = @RowID;

            DELETE FROM @FlocksOrHerdsAggregateTemp
            WHERE FLockOrHerdID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @SpeciesAggregateTemp)
        BEGIN
            SELECT TOP 1
                @RowID = SpeciesID,
                @SpeciesID = SpeciesID,
                @SpeciesMasterID = SpeciesMasterID,
                @SpeciesTypeID = SpeciesTypeID,
                @FlockOrHerdID = FlockOrHerdID,
                @StartOfSignsDate = StartOfSignsDate,
                @AverageAge = AverageAge,
                @SickAnimalQuantity = SickAnimalQuantity,
                @TotalAnimalQuantity = TotalAnimalQuantity,
                @DeadAnimalQuantity = DeadAnimalQuantity,
                @Comments = Comments,
                @ObservationID = ObservationID,
                @RowStatus = RowStatus,
                @RowAction = RowAction,
                @RelatedToSpeciesID = RelatedToSpeciesID,
                @RelatedToObservationID = RelatedToObservationID
            FROM @SpeciesAggregateTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VET_SPECIES_SET @AuditUserName,
                                             @SpeciesID OUTPUT,
                                             @SpeciesMasterID,
                                             @SpeciesTypeID,
                                             @FlockOrHerdID,
                                             @ObservationID,
                                             @StartOfSignsDate,
                                             @AverageAge,
                                             @SickAnimalQuantity,
                                             @TotalAnimalQuantity,
                                             @DeadAnimalQuantity,
                                             @Comments,
                                             @RowStatus,
                                             @RowAction;

            UPDATE @AggregateSummaryInfoTemp
            SET SpeciesID = @SpeciesID
            WHERE SpeciesID = @RowID;

            DELETE FROM @SpeciesAggregateTemp
            WHERE SpeciesID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @AggregateSummaryInfoTemp)
        BEGIN
            SELECT TOP 1
                @RowID = MonitoringSessionSummaryID,
                @MonitoringSessionSummaryID = MonitoringSessionSummaryID,
                @SpeciesID = SpeciesID,
                @SampledAnimalsQuantity = SampleAnimalsQty,
                @SamplesQuantity = SamplesQty,
                @CollectionDate = CollectionDate,
                @CollectedByPersonID = CollectedByPersonID,
                @PositiveAnimalsQuantity = PositiveAnimalsQty,
                @SexTypeID = AnimalSexID,
                @FarmID = FarmID,
                @FarmMasterID = FarmMasterID,
                @DiseaseID = DiseaseID,
                @SampleTypeID = SampleTypeID,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @AggregateSummaryInfoTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VCT_MONITORING_SESSION_SUMMARY_SET @MonitoringSessionSummaryID OUTPUT,
                                                                @MonitoringSessionID,
                                                                @FarmID,
                                                                @SpeciesID,
                                                                @SexTypeID,
                                                                @SampledAnimalsQuantity,
                                                                @SamplesQuantity,
                                                                @CollectionDate,
                                                                @PositiveAnimalsQuantity,
                                                                @RowStatus,
                                                                @DiseaseID,
                                                                @SampleTypeID,
                                                                @RowAction,
                                                                @AuditUserName;

            UPDATE @AggregateSummaryDiseasesTemp
            SET MonitoringSessionSummaryID = @MonitoringSessionSummaryID
            WHERE MonitoringSessionSummaryID = @RowID

            DELETE FROM @AggregateSummaryInfoTemp
            WHERE MonitoringSessionSummaryID = @RowID;

            PRINT @RowID
        END;

        WHILE EXISTS (SELECT * FROM @AggregateSummaryDiseasesTemp)
        BEGIN
            SELECT TOP 1
                @RowID = MonitoringSessionSummaryID,
                @MonitoringSessionSummaryID = MonitoringSessionSummaryID,
                @DiseaseID = DiseaseID,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @AggregateSummaryDiseasesTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VCT_MONITORING_SESSION_SUMMARY_DIAGNOSIS_SET @MonitoringSessionSummaryID,
                                                                          @RowStatus,
                                                                          @DiseaseID,
                                                                          @RowAction,
                                                                          @AuditUserName;


            DELETE FROM @AggregateSummaryDiseasesTemp
            WHERE @MonitoringSessionSummaryID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @EventsTemp)
        BEGIN
            SELECT TOP 1
                @EventId = EventId,
                @EventTypeId = EventTypeId,
                @EventUserId = UserId,
                @EventObjectId = ObjectId,
                @EventSiteId = SiteId,
                @EventDiseaseId = DiseaseId,
                @EventLocationId = LocationId,
                @EventInformationString = InformationString,
                @EventLoginSiteId = LoginSiteId
            FROM @EventsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_ADMIN_EVENT_SET @EventId,
                                            @EventTypeId,
                                            @EventUserId,
                                            @EventObjectId,
                                            @EventDiseaseId,
                                            @EventSiteId,
                                            @EventInformationString,
                                            @EventLoginSiteId,
                                            @EventLocationId,
                                            @AuditUserName;

            DELETE FROM @EventsTemp
            WHERE EventId = @EventId;
        END;

        IF @@TRANCOUNT > 0
            COMMIT TRANSACTION;

        SELECT @ReturnCode ReturnCode,
               @ReturnMessage ReturnMessage,
               @MonitoringSessionID SessionKey,
               @SessionID SessionID;
    END TRY
    BEGIN CATCH
        IF @@Trancount > 0
            ROLLBACK TRANSACTION;

        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_FF_ActivityParameters_GET]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_FF_ActivityParameters_GET
-- Description:	Retrieves the list of Activity Parameters 
--          
-- Revision History:
-- Name				Date		Change
-- ---------------	----------	--------------------------------------------------------------------
-- Kishore Kodru	11/28/2018	Initial release for new API.
-- Stephen Long		08/20/2019	Removed commit and rollback transaction statements.
-- Stephen Long		10/02/2019	Added parameter type to table variable.
-- Doug Albanese	07/29/2021	Added idfActivityParameters to the return list
-- Doug Albanese	08/12/2021	Had to reverse some of the changes that Mandar put in, because EF doesn't accept SQL_VARIANT datatypes
-- Mark Wilson		09/30/2021  removed the check for NULL LangID and also removed unused variables.  Added test code.
-- Doug Albanese	 10/04/2022	 Correction to a translation join to denote which type the data is from the SQL Variant field
-- Test code
/*

DECLARE @observationList NVARCHAR(MAX) = '34400000806;1639880000004;1685240000004;1690060000004'
EXEC dbo.USP_ADMIN_FF_ActivityParameters_GET
	@observationList = @observationList, 
	@LangID = 'en-US'

*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_FF_ActivityParameters_GET] 
(
	@observationList NVARCHAR(MAX),
	@LangID NVARCHAR(50) = NULL
)
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE 
		@idfsLanguage BIGINT,
		@rowCount INT,
		@currentRow INT,
		@currentObservation BIGINT,
		@idfVersion BIGINT,
		@innerCurrentRow INT,
		@NumRow INT,
		@idfRow BIGINT,
		@CurrentIdfRow BIGINT,
		@type BIGINT,
		@innerRowCount INT,
		@idfsSection BIGINT,
		@idfsCurrentSection BIGINT,
		@OldType BIGINT = 0

	DECLARE @ResultTable TABLE (
		[idfActivityParameters] BIGINT,
		[idfObservation] BIGINT,
		[idfsFormTemplate] BIGINT,
		[idfsParameter] BIGINT,
		[idfsSection] BIGINT,
		[idfRow] BIGINT,
		[intNumRow] INT,
		[Type] BIGINT,
		[varValue] NVARCHAR(4000),
		[strNameValue] NVARCHAR(200),
		[numRow] INT,
		[ParameterType] BIGINT 
		)
	DECLARE @observationsTable TABLE (
		[idfObservation] BIGINT,
		[idfVersion] BIGINT,
		[intRowNumber] INT
		)
	DECLARE @MatrixInfo AS TABLE (
		[idfVersion] BIGINT,
		[idfsAggrCaseType] BIGINT,
		[idfAggregateCaseSection] BIGINT
		)
	DECLARE @matrixTable AS TABLE (
		idfVersion BIGINT,
		idfRow BIGINT,
		idfsParameter BIGINT,
		strDefaultParameterName NVARCHAR(400),
		idfsParameterValue NVARCHAR(MAX),
		NumRow INT,
		[strNameValue] NVARCHAR(200),
		[idfsSection] BIGINT,
		[langid] NVARCHAR(20)
		)

	BEGIN TRY
		SET @idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LangID);

		INSERT INTO @observationsTable (
			[idfObservation],
			[intRowNumber]
			)
		SELECT CAST([Value] AS BIGINT),
			ROW_NUMBER() OVER (
				ORDER BY [Value]
				)
		FROM [dbo].[FN_GBL_SYS_SplitList](@observationList, NULL, NULL)
		
		INSERT INTO @ResultTable 
		(
			idfActivityParameters,
			idfObservation,
			idfsFormTemplate,
			idfsParameter,
			idfsSection,
			idfRow,
			varValue,
			[Type],
			numRow, 
			[ParameterType]
		)
		SELECT 
			AP.idfActivityParameters,
			AP.idfObservation,
			O.idfsFormTemplate,
			AP.idfsParameter,
			P.idfsSection,
			AP.idfRow,
			CAST(AP.varValue AS NVARCHAR(MAX)),
			dbo.FN_ADMIN_FF_TypeActivityParameters_GET(AP.idfsParameter),
			ROW_NUMBER() OVER (
				PARTITION BY AP.idfObservation ORDER BY AP.idfRow
				), 
			P.idfsParameterType
		FROM dbo.tlbActivityParameters AP
		LEFT JOIN dbo.ffParameter P	ON P.idfsParameter = AP.idfsParameter AND P.intRowStatus = 0
		INNER JOIN dbo.tlbObservation O ON AP.idfObservation = O.idfObservation
		
		WHERE AP.idfObservation IN (SELECT idfObservation FROM @observationsTable)
		AND AP.intRowStatus = 0
		AND O.intRowStatus = 0
		ORDER BY 
			AP.idfObservation,
			P.idfsSection,
			AP.idfRow

		SELECT @rowCount = MAX([intRowNumber])
		FROM @observationsTable

		SET @currentRow = 1;

		WHILE (@currentRow <= @rowCount)
		BEGIN
			SELECT @currentObservation = [idfObservation]
			FROM @observationsTable
			WHERE intRowNumber = @currentRow;

			DELETE
			FROM @MatrixInfo

			INSERT INTO @MatrixInfo
			EXEC dbo.USP_ADMIN_FF_AggregateObservationMatrixVersion_GET 
				@currentObservation

			SELECT TOP 1 @idfVersion = [idfVersion]
			FROM @MatrixInfo

			IF (@idfVersion IS NULL)
			BEGIN
				SELECT TOP 1 @idfVersion = [idfVersion]
				FROM dbo.tlbAggrMatrixVersionHeader
				WHERE idfsMatrixType IN (
						SELECT TOP 1 [idfAggregateCaseSection]
						FROM @MatrixInfo
						)
					AND [blnIsActive] = 1
				ORDER BY CAST(ISNULL(blnIsDefault, 0) AS INT) + CAST(ISNULL(blnIsActive, 0) AS INT) DESC,
					datStartDate DESC
			END;

			UPDATE @observationsTable
			SET [idfVersion] = @idfVersion
			WHERE intRowNumber = @currentRow;

			SELECT @innerRowCount = NULL

			SELECT @innerRowCount = MAX([numRow])
			FROM @ResultTable
			WHERE [Type] = 1
				AND [idfObservation] = @currentObservation

			IF (@innerRowCount > 0)
			BEGIN
				SELECT @NumRow = - 1,
					@CurrentIdfRow = 0,
					@innerCurrentRow = 1;

				DECLARE curs CURSOR LOCAL FORWARD_ONLY STATIC
				FOR
				SELECT [idfRow],
					[idfsSection]
				FROM @ResultTable
				WHERE [Type] = 1
					AND [idfObservation] = @currentObservation

				OPEN curs

				FETCH NEXT
				FROM curs
				INTO @idfRow,
					@idfsSection

				WHILE @@FETCH_STATUS = 0
				BEGIN
					IF (@idfsCurrentSection IS NULL)
						SET @idfsCurrentSection = @idfsSection;

					IF (@idfsCurrentSection <> @idfsSection)
					BEGIN
						SET @idfsCurrentSection = @idfsSection;
						SET @NumRow = - 1;
					END

					IF (@CurrentIdfRow <> @idfRow)
					BEGIN
						SET @CurrentIdfRow = @idfRow;
						SET @NumRow = @NumRow + 1;

						UPDATE @ResultTable
						SET [intNumRow] = @NumRow
						WHERE [idfRow] = @idfRow
							AND [idfObservation] = @currentObservation
					END

					FETCH NEXT
					FROM curs
					INTO @idfRow,
						@idfsSection
				END

				CLOSE curs

				DEALLOCATE curs
			END
			
			SELECT @innerRowCount = NULL

			SELECT @innerRowCount = MAX([numRow])
			FROM @ResultTable
			WHERE [Type] > 1
				AND [idfObservation] = @currentObservation

			IF (@innerRowCount > 0)
			BEGIN
				SELECT @NumRow = NULL,
					@idfRow = NULL,
					@innerCurrentRow = 1;

				DECLARE curs CURSOR LOCAL FORWARD_ONLY STATIC
				FOR
				SELECT [idfRow],
					[Type]
				FROM @ResultTable
				WHERE [Type] > 1
					AND [idfObservation] = @currentObservation

				OPEN curs

				FETCH NEXT
				FROM curs
				INTO @idfRow,
					@type

				WHILE @@FETCH_STATUS = 0
				BEGIN
					IF @OldType <> ISNULL(@type, - 1)
					BEGIN
						DELETE
						FROM @matrixTable

						INSERT INTO @matrixTable
						EXEC dbo.USP_ADMIN_FF_PredefinedStub_GET 
							@type,
							@idfVersion,
							@idfsLanguage

						SET @OldType = ISNULL(@type, 0)
					END

					SET @NumRow = NULL

					SELECT @NumRow = [NumRow]
					FROM @matrixTable
					WHERE [idfRow] = @idfRow

					UPDATE @ResultTable
					SET [intNumRow] = @NumRow
					WHERE [idfRow] = @idfRow
						AND [idfObservation] = @currentObservation;

					FETCH NEXT
					FROM curs
					INTO @idfRow,
						@type
				END

				CLOSE curs

				DEALLOCATE curs
			END

			SET @currentRow = @currentRow + 1;
		END
		
		UPDATE @ResultTable
		SET [intNumRow] = 0
		WHERE [Type] = 0
		
		UPDATE RT
		SET RT.[strNameValue] = ISNULL(SNT.[strTextString], BR.[strDefault])
		FROM @ResultTable AS RT
		INNER JOIN dbo.ffParameter P ON RT.idfsParameter = P.idfsParameter AND P.idfsEditor = 10067002 AND P.[intRowStatus] = 0
		INNER JOIN dbo.trtBaseReference BR ON BR.idfsBaseReference = CASE 
																		WHEN (SQL_VARIANT_PROPERTY(RT.varValue, 'BaseType') = 'bigint')
																			OR (
																				SQL_VARIANT_PROPERTY(RT.varValue, 'BaseType') = 'nvarchar'
																				AND ISNUMERIC(CAST(RT.varValue AS NVARCHAR)) = 1
																				)
																			THEN CAST(RT.varValue AS BIGINT)
																		ELSE - 1
																		END
		 LEFT JOIN dbo.trtStringNameTranslation SNT ON SNT.idfsBaseReference = CASE 
																		WHEN (SQL_VARIANT_PROPERTY(RT.varValue, 'BaseType') = 'bigint')
																			OR (
																				SQL_VARIANT_PROPERTY(RT.varValue, 'BaseType') = 'nvarchar'
																				AND ISNUMERIC(CAST(RT.varValue AS NVARCHAR)) = 1
																				)
																			THEN CAST(RT.varValue AS BIGINT)
																		ELSE - 1
																		END AND SNT.idfsLanguage = @idfsLanguage AND SNT.[intRowStatus] = 0
		
		SELECT 
			[idfActivityParameters],
			[idfObservation],
			[idfsFormTemplate],
			[idfsParameter],
			[idfsSection],
			[idfRow],
			[intNumRow],
			[Type],
			[varValue],
			[strNameValue],
			[numRow],
			0 AS [FakeField], 
			[ParameterType] 
		FROM @ResultTable
		ORDER BY [idfObservation],
			[idfsParameter],
			[idfRow]
			
	END TRY

	BEGIN CATCH
		THROW;
	END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_FF_ParameterTemplate_SET]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_FF_ParameterTemplate_SET
-- Description: Save the Parameter Template
--          
-- Revision History:
-- Name				Date		Change
-- ---------------	----------	--------------------------------------------------------------------
-- Kishore Kodru    11/28/2018	Initial release for new API.
-- Doug Albanese	4/3/2020	Changes to get it inline with the new designer
-- Doug Albanese	4/27/2020	Changes to correct errors with commit transaction
-- Doug Albanese	10/20/2020	Added Auditing information
-- Doug Albanese	01/19/2021	Added the psuedo function call parameter for use by other SPs
-- Mark Wilson		03/02/2022	Added the INSERT INTO @SuppressSelect, removed unneeded PRINT
--	Doug Albanese	06/02/2022	Remove the Suppress to allow functioncall = 0 to work correctly.
--	Doug Albanese	06/06/2022	Not sure how this was missed, but set the CopyOnly and FunctionCall to 0
--	Doug Albanese	06/07/2022	Rearranged the functioncall supression for USP_ADMIN_FF_ParameterDesignOptions_SET
--	Doug Albanese	06/10/2022	Corrected to prevent EF from blowing up the repository call for this SP
-- Doug Albanese	09/14/2022	 Further correction on USP_ADMIN_FF_ParameterDesignOptions_SET to remove supression for fucntion calling.
-- Doug Albanese	 10/06/2022	 Converted over to a API Call SP only, rather than being used from multiple locations
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_FF_ParameterTemplate_SET] 
(
	@idfsParameter BIGINT
	,@idfsFormTemplate BIGINT
	,@LangID NVARCHAR(50) = NULL
	,@idfsEditMode BIGINT = NULL
	,@intLeft INT = NULL
	,@intTop INT = NULL
	,@intWidth INT = NULL
	,@intHeight INT = NULL
	,@intScheme INT = NULL
	,@intLabelSize INT = NULL
	,@intOrder INT = NULL
	,@blnFreeze BIT = NULL
	,@User NVARCHAR(50) = ''
	,@CopyOnly INT = 0
	,@FunctionCall INT = 0
)
AS
BEGIN
	SET NOCOUNT ON;	
	
	DECLARE 
		@returnCode BIGINT = 0,
		@returnMsg  NVARCHAR(MAX) = 'Success' 

	BEGIN TRY
		DECLARE @SupressSelect TABLE
		( 
			retrunCode INT,
			returnMsg NVARCHAR(200)
		)

		IF (@idfsEditMode IS NULL) SET @idfsEditMode = 10068001
		IF (@intLeft IS NULL) SET @intLeft = 0
		IF (@intTop IS NULL) SET @IntTop = 0
		IF (@intWidth IS NULL) SET @intWidth = 0
		IF (@intHeight IS NULL) SET @intHeight = 0
		IF (@intScheme IS NULL)	 SET @intScheme = 0
		IF (@blnFreeze IS NULL) SET @blnFreeze = 0
		
		IF (@intLabelSize IS NULL)
			BEGIN 
				IF (@intScheme = 0 OR @intScheme = 1)
					BEGIN
						SET @intLabelSize = @intWidth / 2
					END
			END
		ELSE
			BEGIN
				SET @intLabelSize = @intWidth
			END

		IF (@intOrder IS NULL) SET @intOrder = 0
			
		IF NOT EXISTS (SELECT TOP 1 1
					   FROM [dbo].[ffParameterForTemplate]
					   WHERE [idfsParameter] = @idfsParameter
							 AND [idfsFormTemplate] = @idfsFormTemplate)
			BEGIN
				INSERT INTO [dbo].[ffParameterForTemplate]
					(
           				[idfsParameter]
           				,[idfsFormTemplate]			  	   
						,[idfsEditMode]		
						,[blnFreeze]
						,AuditCreateDTM
						,AuditCreateUser
					)
				VALUES
					(
           				@idfsParameter
           				,@idfsFormTemplate
						,@idfsEditMode	
						,@blnFreeze	
						,GETDATE()
						,@User	
					)          
			END
		ELSE
			BEGIN
				UPDATE [dbo].[ffParameterForTemplate]
				SET [idfsEditMode] = @idfsEditMode
					,[blnFreeze] = @blnFreeze
					,[intRowStatus] = 0
					,AuditUpdateDTM = GETDATE()
					,AuditUpdateUser = @User
 				WHERE [idfsParameter] = @idfsParameter
					  AND [idfsFormTemplate] = @idfsFormTemplate 						
			END

			INSERT INTO @SupressSelect
			EXEC dbo.[USP_ADMIN_FF_ParameterDesignOptions_SET] 
			   @idfsParameter
			   ,@idfsFormTemplate
			   ,@intLeft
			   ,@intTop
			   ,@intWidth
			   ,@intHeight			
			   ,@intScheme
			   ,@intLabelSize
			   ,@intOrder
			   ,@LangID
			   ,@User
			   ,1

		 SELECT @returnCode AS ReturnCode, @returnMsg AS ReturnMessage

	END TRY
	BEGIN CATCH
		THROW;
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_ASPNetUser_GetDetail]...';


GO
-- ================================================================================================
-- Author: Steven Verner
--
-- Create Date: 04.19.2019
-- 
-- Description:	Retrieves the ASPNet Users information along with all pertinent employee 
-- information
--
-- Revision History:
-- Name            Date       Change Detail
-- --------------- ---------- --------------------------------------------------------------------
-- Steven Verner   04/19/2019 Initial release
-- Stephen Long    12/26/2019 Changed to v7 function call on reference.
-- Stephen Long    03/25/2020 Added site type ID to support site filtration.
-- Stephen Long    11/24/2020 Added site group ID in the scenario a user's site is part of a group.
-- Steven Verner   01/15/2021 Added PasswordRequiresReset.
-- Mani			   01/25/2021 Added Organization Full Name
-- Mani			   01/26/2021 changed FN_GBL_ReferenceRepair('en', 19000046) from inner join to left join
-- Mani				10/07/2022 Added strHASCsiteID 
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ASPNetUser_GetDetail] @Id NVARCHAR(128)
AS
BEGIN
	SET NOCOUNT ON;

	SELECT u.Id
		,ut.idfsSite
		,u.idfUserID
		,u.Email
		,u.LockoutEnd
		,u.LockoutEnabled
		,u.AccessFailedCount
		,u.UserName
		,ut.idfPerson
		,p.strFirstName
		,p.strSecondName
		,p.strFamilyName
		,o.idfOffice
		,o.idfOffice Institution
		,ISNULL(oa.Name, oa.strDefault) OfficeAbbreviation
		,ISNULL(oaf.Name, oaf.strDefault) OfficeFullName
		,gs.idfsRegion
		,gs.idfsRayon
		,s.idfsSiteType
		,sgs.idfSiteGroup AS SiteGroupID
		,u.PasswordResetRequired,
		s.strHASCsiteID
	FROM dbo.AspNetUsers u
	JOIN dbo.tstUserTable ut ON ut.idfUserID = u.idfUserID
	LEFT JOIN dbo.tflSiteToSiteGroup AS sgs ON sgs.idfsSite = ut.idfsSite
	JOIN dbo.tlbPerson p ON p.idfPerson = ut.idfPerson
	JOIN dbo.tlbOffice o ON o.idfOffice = p.idfInstitution
	LEFT JOIN dbo.tstSite s ON s.idfsSite = ut.idfsSite
		AND s.intRowStatus = 0
	JOIN dbo.FN_GBL_ReferenceRepair('en', 19000045) oa ON oa.idfsReference = o.idfsOfficeAbbreviation
	LEFT JOIN dbo.FN_GBL_ReferenceRepair('en', 19000046) oaf ON oaf.idfsReference = o.idfsOfficeName
	JOIN dbo.tlbGeoLocationShared gs ON gs.idfGeoLocationShared = o.idfLocation
	WHERE u.id = @Id;
END
GO
PRINT N'Altering Procedure [dbo].[USP_CONF_ADMIN_AggregateVetCaseMatrixReport_GET]...';


GO

ALTER PROCEDURE [dbo].[USP_CONF_ADMIN_AggregateVetCaseMatrixReport_GET] 
/*******************************************************
NAME						: [USP_CONF_ADMIN_AggregateVetCaseMatrixReport_GET]		


Description					: Retreives List of Diseases For Vet Aggregate Case Matrix Version by version

Author						: Lamont Mitchell

Revision History
		
Name					Date				Change Detail
Lamont Mitchell			03/4/19				Initial Created
Mark Wilson				04/13/21			Added Translation
Mark Wilson				10/28/21			Added test code
Ann Xiong				10/04/22			Changed parameter @idfVersion BIGINT to @versionList NVARCHAR(MAX)

/* Test code

DECLARE	@return_value int

EXEC	@return_value = [dbo].[USP_CONF_ADMIN_AggregateVetCaseMatrixReport_GET]
		@idfVersion = 115299280001056,
		@LangID = N'en-US'

SELECT	'Return Value' = @return_value

*/*******************************************************/
(
	@versionList NVARCHAR(MAX),
	--@idfVersion BIGINT,
	@LangID NVARCHAR(24)
)
AS

BEGIN

	BEGIN TRY 
		SELECT	 
				mtx.intNumRow,
				mtx.idfAggrVetCaseMTX AS idfAggrVetCaseMTX,
				mtx.idfsDiagnosis,
				mtx.idfsSpeciesType,
				D.[Name],
				D.strOIECode

		FROM dbo.tlbAggrVetCaseMTX mtx
		INNER JOIN dbo.FN_GBL_DiagnosisRepair(@LangID, 96, 10020002) D ON D.idfsDiagnosis = mtx.idfsDiagnosis  -- 2 = Human, use 10020002 for Aggregate cases

		--WHERE mtx.intRowStatus = 0 AND  mtx.idfVersion = @idfVersion
		WHERE mtx.intRowStatus = 0 AND  mtx.idfVersion IN (SELECT * FROM STRING_SPLIT(@versionList, ','))
		ORDER BY mtx.intNumRow ASC
		 

	END TRY

	BEGIN CATCH

			THROW;

	END CATCH

END
GO
PRINT N'Altering Procedure [dbo].[USP_CONF_UNIQUENUMBERINGSCHEMA_SET]...';


GO
/*
--Lamont Mitchell 3/36/22  Added new column intPreviousNumberValue to store previous values in uniquenumberingschema

*/
-- exec USP_CONF_UNIQUENUMBERINGSCHEMA_SET 10057013,'Animal Group','Animal Group','AGP',null,'-',343,'en'
ALTER PROCEDURE [dbo].[USP_CONF_UNIQUENUMBERINGSCHEMA_SET]
(
	@idfsNumberName BIGINT,
	--@strDefault NVARCHAR(400),
	@strName NVARCHAR(400),
	--@strPrefix NVARCHAR(10),
	@strSuffix NVARCHAR(10),
	@strSpecialCharacter NVARCHAR(10),
	@intNumberValue INT,
	@langId NVARCHAR(50),
	@intNextNumberValue INT=NULL

)
AS
	DECLARE @returnCode INT = 0 
	DECLARE @returnMsg NVARCHAR(50) = 'SUCCESS' 
BEGIN
	BEGIN TRY
		
		Declare @intPreviousNumberValue BIGINT;
		SELECT @intPreviousNumberValue = intNumberValue from tstNextNumbers where idfsNumberName = @idfsNumberName		

		if (@intNextNumberValue IS NULL)
				SELECT @intNextNumberValue = intNumberValue+1 from tstNextNumbers where idfsNumberName = @idfsNumberName		

		--DECLARE @count INT = 0;
		--SET @count = (SELECT count(*) FROM tstNextNumbers WHERE (strDocumentName = @strName OR intNumberValue = @intNumberValue) AND idfsNumberName <> @idfsNumberName)
		----print @count

		--IF @count > 0
		--	BEGIN
		--		SET @returnMsg = 'DOES EXIST'
		--	END
		--ELSE
			--BEGIN
			 
				--UPDATE trtBaseReference set strDefault = @strDefault where idfsBaseReference = @idfsNumberName

			UPDATE trtStringNameTranslation set strTextString = @strName where idfsBaseReference = @idfsNumberName AND idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@langId)
			
			UPDATE tstNextNumbers 
			SET 
				intNumberValue = @intNumberValue, 
				strSpecialChar = @strSpecialCharacter,
				strSuffix = @strSuffix, 
				intPreviousNumberValue = @intNextNumberValue
			WHERE idfsNumberName = @idfsNumberName

			--END
		SELECT @returnCode 'returnCode', @returnMsg 'returnMessage'

	END TRY

	BEGIN CATCH
		
		THROW

	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_VAS_MONITORING_SESSION_SAMPLE_GETList]...';


GO
-- ================================================================================================
-- Name: USP_VAS_MONITORING_SESSION_SAMPLE_GETList
--
-- Description:	Gets sample records for veterinary surveillance session report use cases.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Mike	Kornegay 01/17/2022 Initial release (copied from USP_VET_SAMPLE_GETList)
-- Mike	Kornegay 09/30/2022 Correct species type to look at HACode instead of idfsBaseReference.
--
-- EXEC	@return_value = [dbo].[USP_VCT_MONITORING_SESSION_SAMPLE_GETList]
		--@LanguageID = N'en-US',
		--@PageNumber = 1,
		--@PageSize = 10,
		--@SortColumn = NULL,
		--@SortOrder = NULL,
		--@MonitoringSessionID = 10,
		--@ParentSampleID = NULL,
		--@RootSampleID = NULL 
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_VAS_MONITORING_SESSION_SAMPLE_GETList] (
	@LanguageID NVARCHAR(50)
	,@PageNumber INT = 1
	,@PageSize INT = 10
	,@SortColumn NVARCHAR(30) = 'SampleTypeName'
	,@SortOrder NVARCHAR(4) = 'ASC'
	,@MonitoringSessionID BIGINT = NULL
	,@ParentSampleID BIGINT = NULL
	,@RootSampleID BIGINT = NULL
	)
AS
BEGIN
	DECLARE @firstRec INT
		,@lastRec INT
		,@TotalRowCount INT = 0;
	DECLARE @Results TABLE (
		SampleID BIGINT NOT NULL
	);

	SET @firstRec = (@PageNumber - 1) * @PageSize;
	SET @lastRec = (@PageNumber * @PageSize + 1);
	SET NOCOUNT ON;

	BEGIN TRY
		INSERT INTO @Results
		SELECT
			m.idfMaterial 
		FROM dbo.tlbMaterial m
		WHERE m.intRowStatus = 0
			AND m.idfMonitoringSession IS NOT NULL 
			AND (m.idfMonitoringSession = @MonitoringSessionID OR @MonitoringSessionID IS NULL)
			AND (
				(
					m.idfParentMaterial = @ParentSampleID
					AND m.idfsSampleKind IS NOT NULL --Get any samples aliquoted or derived once.
					)
				OR (@ParentSampleID IS NULL)
				)
			AND (
				(
					m.idfRootMaterial = @RootSampleID
					AND m.idfsSampleKind IS NOT NULL
					AND m.idfParentMaterial IS NOT NULL
					) --Get any aliquots or derivatives for the root sample.
				OR (@RootSampleID IS NULL)
				);

		SELECT SampleID
			,SampleTypeID
			,SampleTypeName
			,RootSampleID
			,OriginalSampleID
			,HumanID
			,SpeciesID
			,SpeciesTypeID
			,SpeciesTypeName
			,AnimalID
			,EIDSSAnimalID
			,AnimalGenderTypeID
			,AnimalGenderTypeName
			,AnimalAgeTypeID
			,AnimalAgeTypeName
			,AnimalColor
			,AnimalName
			,MonitoringSessionID
			,CollectedByPersonID
			,CollectedByPersonName
			,CollectedByOrganizationID
			,CollectedByOrganizationName
			,MainTestID
			,CollectionDate
			,SentDate
			,EIDSSLocalOrFieldSampleID
			,EIDSSReportSessionID
			,PatientFarmOwnerName
			,VectorSessionID
			,VectorID
			,FreezerID
			,SampleStatusTypeID
			,SampleStatusTypeName
			,FunctionalAreaID
			,FunctionalAreaName
			,DestroyedByPersonID
			,EnteredDate
			,DestructionDate
			,EIDSSLaboratorySampleID
			,Comments
			,SiteID
			,SentToOrganizationID
			,SentToOrganizationName
			,ReadOnlyIndicator
			,BirdStatusTypeID
			,BirdStatusTypeName
			,HumanDiseaseReportID
			,VeterinaryDiseaseReportID
			,AccessionDate
			,AccessionConditionTypeID
			,AccessionConditionTypeName
			,AccessionComment
			,AccessionByPersonID
			,DestructionMethodTypeID
			,CurrentSiteID
			,SampleKindTypeID
			,SampleKindTypeName
			,AccessionedIndicator
			,ShowInReportSessionListIndicator
			,ShowInLaboratoryListIndicator
			,ShowInDispositionListIndicator
			,ShowInAccessionListIndicator
			,MarkedForDispositionByPersonID
			,OutOfRepositoryDate
			,SampleStatusDate
			,DiseaseID
			,EIDSSDiseaseID
			,FarmID
			,FarmMasterID
			,EIDSSFarmID
			,Species
			,EIDSSLaboratoryOrLocalFieldSampleID
			,LabModuleSourceIndicator
			,RowStatus 
			,RowAction
			,TotalRowCount
			,CurrentPage
			,TotalPages
		FROM (
			SELECT ROW_NUMBER() OVER (
					ORDER BY CASE 
							WHEN @SortColumn = 'EIDSSLocalOrFieldSampleID'
								AND @SortOrder = 'ASC'
								THEN m.strFieldBarcode
							END ASC
						,CASE 
							WHEN @SortColumn = 'EIDSSLocalOrFieldSampleID'
								AND @SortOrder = 'DESC'
								THEN m.strFieldBarcode
							END DESC
						,CASE 
							WHEN @SortColumn = 'SampleTypeName'
								AND @SortOrder = 'ASC'
								THEN sampleType.name
							END ASC
						,CASE 
							WHEN @SortColumn = 'SampleTypeName'
								AND @SortOrder = 'DESC'
								THEN sampleType.name
							END DESC
					) AS RowNum
			,m.idfMaterial AS SampleID
			,m.idfsSampleType AS SampleTypeID
			,sampleType.name AS SampleTypeName
			,m.idfRootMaterial AS RootSampleID
			,m.idfParentMaterial AS OriginalSampleID
			,m.idfHuman AS HumanID
			,m.idfSpecies AS SpeciesID
			,speciesType.idfsReference AS SpeciesTypeID
			,speciesType.name AS SpeciesTypeName
			,m.idfAnimal AS AnimalID
			,a.strAnimalCode AS EIDSSAnimalID
			,a.idfsAnimalGender AS AnimalGenderTypeID
			,animalSexType.name AS AnimalGenderTypeName
			,a.idfsAnimalAge AS AnimalAgeTypeID
			,animalAgeType.name AS AnimalAgeTypeName
			,a.strColor AS AnimalColor
			,a.strName AS AnimalName
			,m.idfMonitoringSession AS MonitoringSessionID
			,m.idfFieldCollectedByPerson AS CollectedByPersonID
			,ISNULL(collectedByPerson.strFamilyName, N'') + ISNULL(', ' + collectedByPerson.strFirstName, '') + ISNULL(' ' + collectedByPerson.strSecondName, '') AS CollectedByPersonName
			,m.idfFieldCollectedByOffice AS CollectedByOrganizationID
			,collectedByOrganization.name AS CollectedByOrganizationName
			,m.idfMainTest AS MainTestID
			,m.datFieldCollectionDate AS CollectionDate
			,m.datFieldSentDate AS SentDate
			,m.strFieldBarcode AS EIDSSLocalOrFieldSampleID
			,m.strCalculatedCaseID AS EIDSSReportSessionID
			,m.strCalculatedHumanName AS PatientFarmOwnerName
			,m.idfVectorSurveillanceSession AS VectorSessionID
			,m.idfVector AS VectorID
			,m.idfSubdivision AS FreezerID
			,m.idfsSampleStatus AS SampleStatusTypeID
			,sampleStatusType.name AS SampleStatusTypeName
			,m.idfInDepartment AS FunctionalAreaID
			,functionalArea.name AS FunctionalAreaName
			,m.idfDestroyedByPerson AS DestroyedByPersonID
			,m.datEnteringDate AS EnteredDate
			,m.datDestructionDate AS DestructionDate
			,m.strBarcode AS EIDSSLaboratorySampleID
			,m.strNote AS Comments
			,m.idfsSite AS SiteID
			,m.idfSendToOffice AS SentToOrganizationID
			,sentToOrganization.name AS SentToOrganizationName
			,m.blnReadOnly AS ReadOnlyIndicator
			,m.idfsBirdStatus AS BirdStatusTypeID
			,birdStatusType.name AS BirdStatusTypeName
			,m.idfHumanCase AS HumanDiseaseReportID
			,m.idfVetCase AS VeterinaryDiseaseReportID
			,m.datAccession AS AccessionDate
			,m.idfsAccessionCondition AS AccessionConditionTypeID
			,accessionConditionType.name AS AccessionConditionTypeName
			,m.strCondition AS AccessionComment
			,m.idfAccesionByPerson AS AccessionByPersonID
			,m.idfsDestructionMethod AS DestructionMethodTypeID
			,m.idfsCurrentSite AS CurrentSiteID
			,m.idfsSampleKind AS SampleKindTypeID
			,sampleKindType.name AS SampleKindTypeName
			,m.blnAccessioned AS AccessionedIndicator
			,m.blnShowInCaseOrSession AS ShowInReportSessionListIndicator
			,m.blnShowInLabList AS ShowInLaboratoryListIndicator
			,m.blnShowInDispositionList AS ShowInDispositionListIndicator
			,m.blnShowInAccessionInForm AS ShowInAccessionListIndicator
			,m.idfMarkedForDispositionByPerson AS MarkedForDispositionByPersonID
			,m.datOutOfRepositoryDate AS OutOfRepositoryDate
			,m.datSampleStatusDate AS SampleStatusDate
			,m.DiseaseID
			,diseaseName.[name] EIDSSDiseaseID
			,f.idfFarm AS FarmID
			,f.idfFarmActual AS FarmMasterID
			,f.strFarmCode AS EIDSSFarmID
			,(
				CASE 
					WHEN ms.idfsMonitoringSessionSpeciesType = 129909620007070
						THEN 'Herd ' + hd.strHerdCode + ' - ' + speciesType.name
					ELSE 'Flock ' + hd.strHerdCode + ' - ' + speciesType.name
					END
				) AS Species
			,CASE 
				WHEN m.strBarcode IS NULL
					THEN m.strFieldBarcode
				ELSE m.strBarcode
				END AS EIDSSLaboratoryOrLocalFieldSampleID
			,m.LabModuleSourceIndicator
			,m.intRowStatus AS RowStatus
			,0 AS RowAction
			,COUNT(*) OVER () AS TotalRowCount
			,CurrentPage = @PageNumber
			,TotalPages = (@TotalRowCount / @PageSize) + IIF(COUNT(*) % @PageSize > 0, 1, 0)
		FROM @Results res
		INNER JOIN dbo.tlbMaterial m ON m.idfMaterial = res.SampleID 
		INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000087) sampleType ON sampleType.idfsReference = m.idfsSampleType
		INNER JOIN dbo.tlbMonitoringSession ms ON ms.idfMonitoringSession = m.idfMonitoringSession
			AND ms.intRowStatus = 0
		LEFT JOIN dbo.FN_GBL_Institution(@LanguageID) collectedByOrganization ON collectedByOrganization.idfOffice = m.idfFieldCollectedByOffice
		LEFT JOIN dbo.tlbDepartment d ON d.idfDepartment = m.idfInDepartment
			AND d.intRowStatus = 0
		LEFT JOIN dbo.tlbOffice departmentOffice ON departmentOffice.idfOffice = d.idfOrganization
			AND departmentOffice.intRowStatus = 0
		LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000164) functionalArea ON functionalArea.idfsReference = d.idfsDepartmentName
		LEFT JOIN dbo.FN_GBL_Institution(@LanguageID) sentToOrganization ON sentToOrganization.idfOffice = m.idfSendToOffice
		LEFT JOIN dbo.tlbPerson collectedByPerson ON collectedByPerson.idfPerson = m.idfFieldCollectedByPerson
			AND collectedByPerson.intRowStatus = 0
		LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000015) sampleStatusType ON sampleStatusType.idfsReference = m.idfsSampleStatus
		LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000006) birdStatusType ON birdStatusType.idfsReference = m.idfsBirdStatus
		LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000110) accessionConditionType ON accessionConditionType.idfsReference = m.idfsAccessionCondition
		LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000158) sampleKindType ON sampleKindType.idfsReference = m.idfsSampleKind
		LEFT JOIN dbo.tlbAnimal a ON a.idfAnimal = m.idfAnimal
			AND a.intRowStatus = 0
		LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000005) animalAgeType ON animalAgeType.idfsReference = a.idfsAnimalAge
		LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000007) animalSexType ON animalSexType.idfsReference = a.idfsAnimalGender
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) diseaseName ON diseaseName.idfsReference = m.DiseaseID
		LEFT JOIN dbo.tlbSpecies s ON s.idfSpecies = CASE 
				WHEN m.idfAnimal IS NULL
					THEN m.idfSpecies
				ELSE a.idfSpecies
				END
			AND s.intRowStatus = 0
		LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000086) speciesType ON speciesType.idfsReference = s.idfsSpeciesType
		LEFT JOIN dbo.tlbHerd hd ON hd.idfHerd = s.idfHerd
			AND hd.intRowStatus = 0
		LEFT JOIN dbo.tlbFarm f ON f.idfFarm = hd.idfFarm
			AND f.intRowStatus = 0
		GROUP BY m.idfMaterial
			,m.idfsSampleType
			,sampleType.name
			,m.idfRootMaterial
			,m.idfParentMaterial
			,m.idfHuman
			,m.idfSpecies
			,speciesType.idfsReference
			,speciesType.name
			,m.idfAnimal
			,a.strAnimalCode
			,a.idfsAnimalGender
			,animalSexType.name
			,a.idfsAnimalAge
			,animalAgeType.name
			,a.strColor
			,a.strName
			,m.idfMonitoringSession
			,m.idfFieldCollectedByPerson
			,collectedByPerson.strFamilyName
			,collectedByPerson.strFirstName
			,collectedByPerson.strSecondName
			,m.idfFieldCollectedByOffice
			,collectedByOrganization.name
			,m.idfMainTest
			,m.datFieldCollectionDate
			,m.datFieldSentDate
			,m.strFieldBarcode
			,m.strCalculatedCaseID
			,m.strCalculatedHumanName
			,m.idfVectorSurveillanceSession
			,m.idfVector
			,m.idfSubdivision
			,m.idfsSampleStatus
			,sampleStatusType.name
			,m.idfInDepartment
			,functionalArea.name 
			,m.idfDestroyedByPerson
			,m.datEnteringDate
			,m.datDestructionDate
			,m.strBarcode
			,m.strNote
			,m.idfsSite
			,m.intRowStatus
			,m.idfSendToOffice
			,sentToOrganization.name
			,m.blnReadOnly
			,m.idfsBirdStatus
			,birdStatusType.name
			,m.idfHumanCase
			,m.idfVetCase
			,m.datAccession
			,m.idfsAccessionCondition
			,accessionConditionType.name
			,m.strCondition
			,m.idfAccesionByPerson
			,m.idfsDestructionMethod
			,m.idfsCurrentSite
			,m.idfsSampleKind
			,sampleKindType.name 
			,m.blnAccessioned 
			,m.blnShowInCaseOrSession 
			,m.blnShowInLabList 
			,m.blnShowInDispositionList 
			,m.blnShowInAccessionInForm 
			,m.idfMarkedForDispositionByPerson 
			,m.datOutOfRepositoryDate 
			,m.datSampleStatusDate 
			,m.DiseaseID
			,hd.strHerdCode
			,f.idfFarm 
			,f.idfFarmActual 
			,f.strFarmCode
			,ms.idfsMonitoringSessionSpeciesType
			,m.LabModuleSourceIndicator
		) AS x
		WHERE RowNum > @firstRec
			AND RowNum < @lastRec
		ORDER BY RowNum;
	END TRY

	BEGIN CATCH
		THROW;
	END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USP_VCTS_SURVEILLANCE_SESSION_GetList]...';


GO
-- ================================================================================================
-- Name: USP_VCTS_SURVEILLANCE_SESSION_GetList
--
-- Description: Gets a list of vector surveillance sessions filtered by various criteria.
--          
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     12/31/2018 Added additional search parameters
-- Maheshwar Deo	03/08/2019 Fixed filter for @DiseaseID
-- Stephen Long     07/19/2019 Added summary disease ID and join.
-- Stephen Long     01/22/2020 Converted site ID to site list for site filtration.
-- Stephen Long     02/19/2020 Added non-configurable site filtration rules.
-- Stephen Long     02/26/2020 Corrected all criteria where clauses; returned incorrect results.
-- Stephen Long     03/25/2020 Added if/else for first-level and second-level site types to bypass 
--                             non-configurable rules.
-- Stephen Long     05/18/2020 Added disease filtration rules from use case SAUC62.
-- Stephen Long     06/18/2020 Added where criteria to the query when no site filtration is 
--                             required.
-- Stephen Long     07/07/2020 Added trim to EIDSS identifier like criteria.
-- Doug Albanese	10/16/2020 Added Outbreak's EIDSS ID
-- Doug Albanese	10/16/2020 Added Outbreak's Session Start Date
-- Doug Albanese	11/11/2020 Modified secondary filtering
-- Doug Albanese	11/20/2020 Added dblAlignment (Direction)
-- Stephen Long     11/27/2020 Added configurable site filtration rules.
-- Stephen Long     12/13/2020 Added apply configurable filtration indicator parameter.
-- Stephen Long     12/24/2020 Modified join on disease filtration default role rule.
-- Stephen Long     12/29/2020 Added intRowStatus check on disease filtration insert rules.
-- Doug Albanese	01/21/2021 Change the WHERE claus to detect shared vector types so that it is 
--                             no so strict on records being returned.
-- Stephen Long     04/02/2021 Added updated pagination and location hierarchy.
-- Mike Kornegay	11/05/2021 Added group by surveillance session id to filtration 
--							   intermediate results so final cte join is correct.
-- Stephen Long     11/05/2021 Added vector type ID's and disease ID's to the query.
-- Stephen Long     06/03/2022 Updated to point default access rules to base reference.
-- Mike Kornegay	07/04/2022 Fixed sorting by pointing to correct location tables in final query.
-- Mike Kornegay	07/05/2022 Fixed search by disease and vector type.
-- Mike Kornegay	08/03/2022 Add order by in final select and change location tables back to inner join.
-- Stephen Long     09/22/2022 Add check for "0" page size.  If "0", then set to 1.
-- Mike Kornegay	10/06/2022 Move order by back to CTE row number partition for performance and correct date clauses.
--
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_VCTS_SURVEILLANCE_SESSION_GetList]
(
    @LanguageID NVARCHAR(50),
    @SessionID NVARCHAR(200) = NULL,
    @FieldSessionID NVARCHAR(200) = NULL,
    @StatusTypeID BIGINT = NULL,
    @VectorTypeID NVARCHAR(MAX) = NULL,
    @SpeciesTypeID BIGINT = NULL,
    @DiseaseID BIGINT = NULL,
    @DiseaseGroupID NVARCHAR(MAX) = NULL,
    @AdministrativeLevelID BIGINT = NULL,
    @StartDateFrom DATETIME = NULL,
    @StartDateTo DATETIME = NULL,
    @EndDateFrom DATETIME = NULL,
    @EndDateTo DATETIME = NULL,
    @OutbreakKey BIGINT = NULL,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT,
    @UserEmployeeID BIGINT,
    @ApplySiteFiltrationIndicator BIT = 0,
    @SortColumn NVARCHAR(30) = 'SessionID',
    @SortOrder NVARCHAR(4) = 'DESC',
    @PageNumber INT = 1,
    @PageSize INT = 10
)
AS
BEGIN
    SET NOCOUNT ON;

	DECLARE @firstRec INT;
	DECLARE @lastRec INT;
	SET @firstRec = (@PageNumber-1)* @PageSize
	SET @lastRec = (@PageNumber*@PageSize+1);

    DECLARE @AdministrativeLevelNode AS HIERARCHYID;

	DECLARE @FinalResults TABLE
	(
        ID BIGINT NOT NULL,
        ReadPermissionIndicator BIT NOT NULL,
        AccessToPersonalDataPermissionIndicator BIT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
        WritePermissionIndicator BIT NOT NULL,
        DeletePermissionIndicator BIT NOT NULL
		
    );

    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator BIT NOT NULL,
        AccessToPersonalDataPermissionIndicator BIT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
        WritePermissionIndicator BIT NOT NULL,
        DeletePermissionIndicator BIT NOT NULL,
		INDEX IDX_ID(ID)
    );

    BEGIN TRY
        IF @PageSize = 0
        BEGIN
            SET @PageSize = 1;
        END

        IF @AdministrativeLevelID IS NOT NULL
        BEGIN
            SELECT @AdministrativeLevelNode = node
            FROM dbo.gisLocation
            WHERE idfsLocation = @AdministrativeLevelID;
        END;

        -- ========================================================================================
        -- NO SITE FILTRATION RULES APPLIED
        --
        -- For first and second level sites, do not apply any site filtration rules.
        -- ========================================================================================
        IF @ApplySiteFiltrationIndicator = 0
        BEGIN
            INSERT INTO @Results
            SELECT vss.idfVectorSurveillanceSession,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbVectorSurveillanceSession vss
                LEFT JOIN tlbGeoLocation gl
                    ON gl.idfGeoLocation = vss.idfLocation
                       AND gl.intRowStatus = 0
                LEFT JOIN dbo.gisLocation g
                    ON g.idfsLocation = gl.idfsLocation
				CROSS APPLY (SELECT dbo.FN_VCTS_VSSESSION_VECTORTYPEIDS_GET(vss.idfVectorSurveillanceSession) vectorTypeIDs) vectorTypeIDs
                LEFT JOIN dbo.tlbVector v
                    ON v.idfVectorSurveillanceSession = vss.idfVectorSurveillanceSession
                       AND v.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000141) vectorSubType
                    ON vectorSubType.idfsReference = v.idfsVectorSubType
				CROSS APPLY (SELECT dbo.FN_VCTS_VSSESSION_DIAGNOSESIDS_GET(vss.idfVectorSurveillanceSession, @LanguageID) diseaseIDs) diseaseIDs
            WHERE vss.intRowStatus = 0
                  AND (
                          vss.idfsVectorSurveillanceStatus = @StatusTypeID
                          OR @StatusTypeID IS NULL
                      )
                  AND (
                          CHARINDEX(@VectorTypeID, vectorTypeIDs) > 0
                          OR @VectorTypeID IS NULL
                      )
                  AND (
                          vectorSubType.idfsReference = @SpeciesTypeID
                          OR @SpeciesTypeID IS NULL
                      )
                  AND (
                          g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                          OR @AdministrativeLevelID IS NULL
                      )
                  AND (
                          vss.idfOUtBreak = @OutbreakKey
                          OR @OutbreakKey IS NULL
                      )
                  AND (	
						((CAST(vss.datStartDate AS DATE) >= @StartDateFrom AND @StartDateTo IS NULL)
						OR
						(CAST(vss.datStartDate AS DATE) <= @StartDateTo AND @StartDateFrom IS NULL)
						OR
						(CAST(vss.datStartDate AS DATE) BETWEEN @StartDateFrom AND @StartDateTo))
						OR (@StartDateFrom IS NULL AND @StartDateTo IS NULL)
					  )
                  AND (
						((CAST(vss.datCloseDate AS DATE) >= @EndDateFrom AND @EndDateTo IS NULL)
						OR
						(CAST(vss.datCloseDate AS DATE) <= @EndDateTo AND @EndDateFrom IS NULL)
						OR
						(CAST(vss.datCloseDate AS DATE) BETWEEN @EndDateFrom AND @EndDateTo))
						OR 
						(@EndDateFrom IS NULL AND @EndDateTo IS NULL)
					  ) 
                  AND (
                          vss.strSessionID LIKE '%' + TRIM(@SessionID) + '%'
                          OR @SessionID IS NULL
                      )
                  AND (
                          vss.strFieldSessionID LIKE '%' + TRIM(@FieldSessionID) + '%'
                          OR @FieldSessionID IS NULL
                      )
                  AND (
                          CHARINDEX(CAST(@DiseaseID AS NVARCHAR(2000)), diseaseIDs) > 0
                          OR @DiseaseID IS NULL
                      )
            GROUP BY vss.idfVectorSurveillanceSession;
        END
        ELSE
        BEGIN
            DECLARE @FilteredResults TABLE
            (
                ID BIGINT NOT NULL,
                ReadPermissionIndicator BIT NOT NULL,
                AccessToPersonalDataPermissionIndicator BIT NOT NULL,
                AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
                WritePermissionIndicator BIT NOT NULL,
                DeletePermissionIndicator BIT NOT NULL, INDEX IDX_ID (ID));
            -- =======================================================================================
            -- DEFAULT SITE FILTRATION RULES
            --
            -- Apply non-configurable site filtration rules for third level sites.
            -- =======================================================================================
            DECLARE @RuleActiveStatus INT = 0;
            DECLARE @AdministrativeLevelTypeID INT;
            DECLARE @OrganizationAdministrativeLevelNode HIERARCHYID;
            DECLARE @DefaultAccessRules AS TABLE
            (
                AccessRuleID BIGINT NOT NULL,
                ActiveIndicator INT NOT NULL,
                ReadPermissionIndicator BIT NOT NULL,
                AccessToPersonalDataPermissionIndicator BIT NOT NULL,
                AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
                WritePermissionIndicator BIT NOT NULL,
                DeletePermissionIndicator BIT NOT NULL,
                AdministrativeLevelTypeID INT NULL
            );

            INSERT INTO @DefaultAccessRules
            SELECT AccessRuleID,
                   a.intRowStatus,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator,
                   a.AdministrativeLevelTypeID
            FROM dbo.AccessRule a
            WHERE DefaultRuleIndicator = 1;

            --
            -- Session data shall be available to all sites' organizations connected to the particular 
            -- session.
            --
            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
            WHERE AccessRuleID = 10537019;

            IF @RuleActiveStatus = 0
            BEGIN
                -- Collected and identified by organizations for any vectors/pools
                INSERT INTO @FilteredResults
                SELECT vss.idfVectorSurveillanceSession,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbVectorSurveillanceSession vss
                    INNER JOIN dbo.tlbVector v
                        ON v.idfVectorSurveillanceSession = vss.idfVectorSurveillanceSession
                           AND v.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537019
                WHERE vss.intRowStatus = 0
                      AND (
                              v.idfCollectedByOffice = @UserOrganizationID
                              OR v.idfIdentifiedByOffice = @UserOrganizationID
                          );

                -- Collected by and sent to organizations for any samples
                INSERT INTO @FilteredResults
                SELECT MAX(m.idfVectorSurveillanceSession),
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbMaterial m
                    INNER JOIN dbo.tlbVectorSurveillanceSession vss
                        ON vss.idfVectorSurveillanceSession = m.idfVectorSurveillanceSession
                           AND vss.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537019
                WHERE m.intRowStatus = 0
                      AND (
                              m.idfFieldCollectedByOffice = @UserOrganizationID
                              OR m.idfSendToOffice = @UserOrganizationID
                          )
                GROUP BY m.idfVectorSurveillanceSession,
                         a.ReadPermissionIndicator,
                         a.AccessToPersonalDataPermissionIndicator,
                         a.AccessToGenderAndAgeDataPermissionIndicator,
                         a.WritePermissionIndicator,
                         a.DeletePermissionIndicator;

                -- Tested by organization for any laboratory test
                INSERT INTO @FilteredResults
                SELECT MAX(m.idfVectorSurveillanceSession),
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbMaterial m
                    INNER JOIN dbo.tlbVectorSurveillanceSession vss
                        ON vss.idfVectorSurveillanceSession = m.idfVectorSurveillanceSession
                           AND vss.intRowStatus = 0
                    INNER JOIN dbo.tlbTesting t
                        ON t.idfMaterial = m.idfMaterial
                           AND t.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537019
                WHERE m.intRowStatus = 0
                      AND t.idfTestedByOffice = @UserOrganizationID
                GROUP BY m.idfVectorSurveillanceSession,
                         a.ReadPermissionIndicator,
                         a.AccessToPersonalDataPermissionIndicator,
                         a.AccessToGenderAndAgeDataPermissionIndicator,
                         a.WritePermissionIndicator,
                         a.DeletePermissionIndicator;

                -- Tested by organization for any field test
                INSERT INTO @FilteredResults
                SELECT MAX(m.idfVectorSurveillanceSession),
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbMaterial m
                    INNER JOIN dbo.tlbVectorSurveillanceSession vss
                        ON vss.idfVectorSurveillanceSession = m.idfVectorSurveillanceSession
                           AND vss.intRowStatus = 0
                    INNER JOIN dbo.tlbPensideTest p
                        ON p.idfMaterial = m.idfMaterial
                           AND p.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537019
                WHERE m.intRowStatus = 0
                      AND p.idfTestedByOffice = @UserOrganizationID
                GROUP BY m.idfVectorSurveillanceSession,
                         a.ReadPermissionIndicator,
                         a.AccessToPersonalDataPermissionIndicator,
                         a.AccessToGenderAndAgeDataPermissionIndicator,
                         a.WritePermissionIndicator,
                         a.DeletePermissionIndicator;
            END;

            --
            -- Sent to organizations for any sample transfers
            --
            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
            WHERE AccessRuleID = 10537021;

            IF @RuleActiveStatus = 0
            BEGIN
                INSERT INTO @FilteredResults
                SELECT MAX(vss.idfVectorSurveillanceSession),
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbVectorSurveillanceSession vss
                    INNER JOIN dbo.tlbMaterial m
                        ON vss.idfVectorSurveillanceSession = m.idfVectorSurveillanceSession
                           AND m.intRowStatus = 0
                    INNER JOIN dbo.tlbTransferOutMaterial toutm
                        ON m.idfMaterial = toutm.idfMaterial
                           AND toutm.intRowStatus = 0
                    INNER JOIN dbo.tlbTransferOUT tout
                        ON toutm.idfTransferOut = tout.idfTransferOut
                           AND tout.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537021
                WHERE vss.intRowStatus = 0
                      AND tout.idfSendToOffice = @UserOrganizationID
                GROUP BY vss.idfVectorSurveillanceSession,
                         a.ReadPermissionIndicator,
                         a.AccessToPersonalDataPermissionIndicator,
                         a.AccessToGenderAndAgeDataPermissionIndicator,
                         a.WritePermissionIndicator,
                         a.DeletePermissionIndicator;
            END;

            --
            -- Session data shall be available to all sites of the same administrative level.
            --
            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
            WHERE AccessRuleID = 10537018;

            IF @RuleActiveStatus = 0
            BEGIN
                SELECT @AdministrativeLevelTypeID = AdministrativeLevelTypeID
                FROM @DefaultAccessRules
                WHERE AccessRuleID = 10537018;

                SELECT @OrganizationAdministrativeLevelNode
                    = g.node.GetAncestor(g.node.GetLevel() - @AdministrativeLevelTypeID)
                FROM dbo.tlbOffice o
                    INNER JOIN dbo.tlbGeoLocationShared l
                        ON l.idfGeoLocationShared = o.idfLocation
                    INNER JOIN dbo.gisLocation g
                        ON g.idfsLocation = l.idfsLocation
                WHERE o.idfOffice = @UserOrganizationID
                      AND g.node.GetLevel() >= @AdministrativeLevelTypeID;

                -- Administrative level specified in the rule of the site where the session was created.
                INSERT INTO @FilteredResults
                SELECT vss.idfVectorSurveillanceSession,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbVectorSurveillanceSession vss
                    INNER JOIN dbo.tstSite s
                        ON vss.idfsSite = s.idfsSite
                    INNER JOIN dbo.tlbOffice o
                        ON o.idfOffice = s.idfOffice
                    INNER JOIN dbo.tlbGeoLocationShared l
                        ON l.idfGeoLocationShared = o.idfLocation
                    INNER JOIN dbo.gisLocation g
                        ON g.idfsLocation = l.idfsLocation
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537018
                WHERE vss.intRowStatus = 0
                      AND g.node.IsDescendantOf(@OrganizationAdministrativeLevelNode) = 1;

                -- Administrative level specified in the rule of the session location, if completed
                INSERT INTO @FilteredResults
                SELECT vss.idfVectorSurveillanceSession,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbVectorSurveillanceSession vss
                    INNER JOIN dbo.tlbGeoLocation l
                        ON l.idfGeoLocation = vss.idfLocation
                    INNER JOIN dbo.gisLocation g
                        ON g.idfsLocation = l.idfsLocation
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537018
                WHERE vss.intRowStatus = 0
                      AND g.node.IsDescendantOf(@OrganizationAdministrativeLevelNode) = 1;

                -- Administrative level specified in the rule of any vector location, if completed.
                INSERT INTO @FilteredResults
                SELECT vss.idfVectorSurveillanceSession,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbVectorSurveillanceSession vss
                    INNER JOIN dbo.tlbVector v
                        ON v.idfVectorSurveillanceSession = vss.idfVectorSurveillanceSession
                           AND v.intRowStatus = 0
                    INNER JOIN dbo.tlbGeoLocation l
                        ON l.idfGeoLocation = v.idfLocation
                    INNER JOIN dbo.gisLocation g
                        ON g.idfsLocation = l.idfsLocation
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537018
                WHERE vss.intRowStatus = 0
                      AND g.node.IsDescendantOf(@OrganizationAdministrativeLevelNode) = 1;

                -- Administration level specified in the rule of the location of any session summary record, if completed.
                INSERT INTO @FilteredResults
                SELECT vss.idfVectorSurveillanceSession,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbVectorSurveillanceSession vss
                    INNER JOIN dbo.tlbVectorSurveillanceSessionSummary vsss
                        ON vsss.idfVectorSurveillanceSession = vss.idfVectorSurveillanceSession
                           AND vsss.intRowStatus = 0
                    INNER JOIN dbo.tlbGeoLocation AS l
                        ON l.idfGeoLocation = vsss.idfGeoLocation
                    INNER JOIN dbo.gisLocation AS g
                        ON g.idfsLocation = l.idfsLocation
                    INNER JOIN @DefaultAccessRules AS a
                        ON a.AccessRuleID = 10537018
                WHERE vss.intRowStatus = 0
                      AND g.node.IsDescendantOf(@OrganizationAdministrativeLevelNode) = 1;
            END;

            -- =======================================================================================
            -- CONFIGURABLE SITE FILTRATION RULES
            -- 
            -- Apply configurable site filtration rules for use case SAUC34. Some of these rules may 
            -- overlap the non-configurable rules.
            -- =======================================================================================
            --
            -- Apply at the user's site group level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT vss.idfVectorSurveillanceSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbVectorSurveillanceSession vss
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = vss.idfsSite
                INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                    ON userSiteGroup.idfsSite = @UserSiteID
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE vss.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT vss.idfVectorSurveillanceSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbVectorSurveillanceSession vss
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = vss.idfsSite
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE vss.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's employee group level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT vss.idfVectorSurveillanceSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbVectorSurveillanceSession vss
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = vss.idfsSite
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE vss.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's ID level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT vss.idfVectorSurveillanceSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbVectorSurveillanceSession vss
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = vss.idfsSite
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE vss.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site group level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT vss.idfVectorSurveillanceSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbVectorSurveillanceSession vss
                INNER JOIN dbo.tflSiteToSiteGroup sgs
                    ON sgs.idfsSite = @UserSiteID
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE vss.intRowStatus = 0
                  AND sgs.idfsSite = vss.idfsSite;

            -- 
            -- Apply at the user's site level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT vss.idfVectorSurveillanceSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbVectorSurveillanceSession vss
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE vss.intRowStatus = 0
                  AND a.GrantingActorSiteID = vss.idfsSite;

            -- 
            -- Apply at the user's employee group level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT vss.idfVectorSurveillanceSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbVectorSurveillanceSession vss
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE vss.intRowStatus = 0
                  AND a.GrantingActorSiteID = vss.idfsSite;

            -- 
            -- Apply at the user's ID level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT vss.idfVectorSurveillanceSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbVectorSurveillanceSession vss
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE vss.intRowStatus = 0
                  AND a.GrantingActorSiteID = vss.idfsSite;

            -- Copy filtered results to results and use search criteria
            INSERT INTO @Results
            SELECT ID,
                   ReadPermissionIndicator,
                   AccessToPersonalDataPermissionIndicator,
                   AccessToGenderAndAgeDataPermissionIndicator,
                   WritePermissionIndicator,
                   DeletePermissionIndicator
            FROM @FilteredResults
                INNER JOIN dbo.tlbVectorSurveillanceSession vss
                    ON vss.idfVectorSurveillanceSession = ID
                LEFT JOIN tlbGeoLocation gl
                    ON gl.idfGeoLocation = vss.idfLocation
                       AND gl.intRowStatus = 0
                LEFT JOIN dbo.gisLocation g
                    ON g.idfsLocation = gl.idfsLocation
                CROSS APPLY (SELECT dbo.FN_VCTS_VSSESSION_VECTORTYPEIDS_GET(vss.idfVectorSurveillanceSession) vectorTypeIds) vectorTypeIds
                LEFT JOIN dbo.tlbVector v
                    ON v.idfVectorSurveillanceSession = vss.idfVectorSurveillanceSession
                       AND v.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000141) vectorSubType
                    ON vectorSubType.idfsReference = v.idfsVectorSubType
                CROSS APPLY (SELECT dbo.FN_VCTS_VSSESSION_DIAGNOSESIDS_GET(vss.idfVectorSurveillanceSession, @LanguageID) diseaseIDs) diseaseIDs
            WHERE (
                      vss.idfsVectorSurveillanceStatus = @StatusTypeID
                      OR @StatusTypeID IS NULL
                  )
                  AND (
                          CHARINDEX(@VectorTypeID, vectorTypeIds) > 0
                          OR @VectorTypeID IS NULL
                      )
                  AND (
                          vectorSubType.idfsReference = @SpeciesTypeID
                          OR @SpeciesTypeID IS NULL
                      )
                  AND (
                          g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                          OR @AdministrativeLevelID IS NULL
                      )
                  AND (
                          vss.idfOUtBreak = @OutbreakKey
                          OR @OutbreakKey IS NULL
                      )
				  AND (	
						((CAST(vss.datStartDate AS DATE) >= @StartDateFrom AND @StartDateTo IS NULL)
						OR
						(CAST(vss.datStartDate AS DATE) <= @StartDateTo AND @StartDateFrom IS NULL)
						OR
						(CAST(vss.datStartDate AS DATE) BETWEEN @StartDateFrom AND @StartDateTo))
						OR (@StartDateFrom IS NULL AND @StartDateTo IS NULL)
					  )
                  AND (
						((CAST(vss.datCloseDate AS DATE) >= @EndDateFrom AND @EndDateTo IS NULL)
						OR
						(CAST(vss.datCloseDate AS DATE) <= @EndDateTo AND @EndDateFrom IS NULL)
						OR
						(CAST(vss.datCloseDate AS DATE) BETWEEN @EndDateFrom AND @EndDateTo))
						OR 
						(@EndDateFrom IS NULL AND @EndDateTo IS NULL)
					  ) 
                  AND (
                          vss.strSessionID LIKE '%' + TRIM(@SessionID) + '%'
                          OR @SessionID IS NULL
                      )
                  AND (
                          vss.strFieldSessionID LIKE '%' + TRIM(@FieldSessionID) + '%'
                          OR @FieldSessionID IS NULL
                      )
                   AND (
                          CHARINDEX(CAST(@DiseaseID AS NVARCHAR(2000)), diseaseIDs) > 0
                          OR @DiseaseID IS NULL
                      )
            GROUP BY ID,
                     ReadPermissionIndicator,
                     AccessToPersonalDataPermissionIndicator,
                     AccessToGenderAndAgeDataPermissionIndicator,
                     WritePermissionIndicator,
                     DeletePermissionIndicator;
        END;

        -- =======================================================================================
        -- DISEASE FILTRATION RULES
        --
        -- Apply disease filtration rules from use case SAUC62.
        -- =======================================================================================
        -- 
        -- Apply level 0 disease filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE ID IN (
                        SELECT vss.idfVectorSurveillanceSession
                        FROM dbo.tlbVectorSurveillanceSession vss
                            INNER JOIN dbo.tlbVectorSurveillanceSessionSummary vsss
                                ON vsss.idfVectorSurveillanceSession = vss.idfVectorSurveillanceSession
                                   AND vsss.intRowStatus = 0
                            INNER JOIN dbo.tlbVectorSurveillanceSessionSummaryDiagnosis vssd
                                ON vsss.idfsVSSessionSummary = vssd.idfsVSSessionSummary
                                   AND vssd.intRowStatus = 0
                            INNER JOIN dbo.tstObjectAccess oa
                                ON oa.idfsObjectID = vssd.idfsDiagnosis
                                   AND oa.intRowStatus = 0
                        WHERE oa.intPermission = 1
                              AND oa.idfActor = -506 -- Default role
                    );

        --
        -- Apply level 1 disease filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        INSERT INTO @Results
        SELECT vss.idfVectorSurveillanceSession,
               1,
               1,
               1,
               1,
               1
        FROM dbo.tlbVectorSurveillanceSession vss
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.tlbVectorSurveillanceSessionSummary vsss
                ON vsss.idfVectorSurveillanceSession = vss.idfVectorSurveillanceSession
                   AND vsss.intRowStatus = 0
            INNER JOIN dbo.tlbVectorSurveillanceSessionSummaryDiagnosis vssd
                ON vsss.idfsVSSessionSummary = vssd.idfsVSSessionSummary
                   AND vssd.intRowStatus = 0
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = vssd.idfsDiagnosis
                   AND oa.intRowStatus = 0
            LEFT JOIN tlbGeoLocation gl
                ON gl.idfGeoLocation = vss.idfLocation
            LEFT JOIN dbo.gisLocation g
                ON g.idfsLocation = gl.idfsLocation
            CROSS APPLY (SELECT dbo.FN_VCTS_VSSESSION_VECTORTYPEIDS_GET(vss.idfVectorSurveillanceSession) vectorTypeIDs) vectorTypeIDs
            LEFT JOIN dbo.tlbVector v
                ON v.idfVectorSurveillanceSession = vss.idfVectorSurveillanceSession
                   AND v.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000141) vectorSubType
                ON vectorSubType.idfsReference = v.idfsVectorSubType
			CROSS APPLY (SELECT dbo.FN_VCTS_VSSESSION_DIAGNOSESIDS_GET(vss.idfVectorSurveillanceSession, @LanguageID) diseaseIDs) diseaseIDs
        WHERE oa.intPermission = 2 -- Allow permission
              AND vss.intRowStatus = 0
              AND oa.idfActor = egm.idfEmployeeGroup
              AND (
                      vss.idfsVectorSurveillanceStatus = @StatusTypeID
                      OR @StatusTypeID IS NULL
                  )
              AND (
                      CHARINDEX(@VectorTypeID, vectorTypeIDs) > 0
                      OR @VectorTypeID IS NULL
                  )
              AND (
                      vectorSubType.idfsReference = @SpeciesTypeID
                      OR @SpeciesTypeID IS NULL
                  )
              AND (
                      g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                      OR @AdministrativeLevelID IS NULL
                  )
              AND (
                      vss.idfOUtBreak = @OutbreakKey
                      OR @OutbreakKey IS NULL
                  )
			  AND (	
					((CAST(vss.datStartDate AS DATE) >= @StartDateFrom AND @StartDateTo IS NULL)
					OR
					(CAST(vss.datStartDate AS DATE) <= @StartDateTo AND @StartDateFrom IS NULL)
					OR
					(CAST(vss.datStartDate AS DATE) BETWEEN @StartDateFrom AND @StartDateTo))
					OR (@StartDateFrom IS NULL AND @StartDateTo IS NULL)
					)
			  AND (
					((CAST(vss.datCloseDate AS DATE) >= @EndDateFrom AND @EndDateTo IS NULL)
					OR
					(CAST(vss.datCloseDate AS DATE) <= @EndDateTo AND @EndDateFrom IS NULL)
					OR
					(CAST(vss.datCloseDate AS DATE) BETWEEN @EndDateFrom AND @EndDateTo))
					OR 
					(@EndDateFrom IS NULL AND @EndDateTo IS NULL)
					) 
              AND (
                      vss.strSessionID LIKE '%' + TRIM(@SessionID) + '%'
                      OR @SessionID IS NULL
                  )
              AND (
                      vss.strFieldSessionID LIKE '%' + TRIM(@FieldSessionID) + '%'
                      OR @FieldSessionID IS NULL
                  )
			 AND (
						CHARINDEX(CAST(@DiseaseID AS NVARCHAR(2000)), diseaseIDs) > 0
						OR @DiseaseID IS NULL
				  );

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbVectorSurveillanceSession vss
                ON vss.idfVectorSurveillanceSession = ID
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.tlbVectorSurveillanceSessionSummary vsss
                ON vsss.idfVectorSurveillanceSession = vss.idfVectorSurveillanceSession
                   AND vsss.intRowStatus = 0
            INNER JOIN dbo.tlbVectorSurveillanceSessionSummaryDiagnosis vssd
                ON vsss.idfsVSSessionSummary = vssd.idfsVSSessionSummary
                   AND vssd.intRowStatus = 0
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = vssd.idfsDiagnosis
                   AND oa.intRowStatus = 0
        WHERE intPermission = 1 -- Deny permission
              AND oa.idfsObjectType = 10060001 -- Disease
              AND oa.idfActor = egm.idfEmployeeGroup;

        --
        -- Apply level 2 disease filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        INSERT INTO @Results
        SELECT vss.idfVectorSurveillanceSession,
               1,
               1,
               1,
               1,
               1
        FROM dbo.tlbVectorSurveillanceSession vss
            INNER JOIN dbo.tlbVectorSurveillanceSessionSummary vsss
                ON vsss.idfVectorSurveillanceSession = vss.idfVectorSurveillanceSession
                   AND vsss.intRowStatus = 0
            INNER JOIN dbo.tlbVectorSurveillanceSessionSummaryDiagnosis vssd
                ON vsss.idfsVSSessionSummary = vssd.idfsVSSessionSummary
                   AND vssd.intRowStatus = 0
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = vssd.idfsDiagnosis
                   AND oa.intRowStatus = 0
            LEFT JOIN tlbGeoLocation gl
                ON gl.idfGeoLocation = vss.idfLocation
            LEFT JOIN dbo.gisLocation g
                ON g.idfsLocation = gl.idfsLocation
			CROSS APPLY (SELECT dbo.FN_VCTS_VSSESSION_VECTORTYPEIDS_GET(vss.idfVectorSurveillanceSession) vectorTypeIDs) vectorTypeIDs
            LEFT JOIN dbo.tlbVector v
                ON v.idfVectorSurveillanceSession = vss.idfVectorSurveillanceSession
                   AND v.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000141) vectorSubType
                ON vectorSubType.idfsReference = v.idfsVectorSubType
            CROSS APPLY (SELECT dbo.FN_VCTS_VSSESSION_DIAGNOSESIDS_GET(vss.idfVectorSurveillanceSession, @LanguageID) diseaseIDs ) diseaseIDs
        WHERE oa.intPermission = 2 -- Allow permission
              AND vss.intRowStatus = 0
              AND oa.idfActor = @UserEmployeeID
              AND (
                      vss.idfsVectorSurveillanceStatus = @StatusTypeID
                      OR @StatusTypeID IS NULL
                  )
              AND (
                      CHARINDEX(@VectorTypeID, vectorTypeIDs) > 0
                      OR @VectorTypeID IS NULL
                  )
              AND (
                      vectorSubType.idfsReference = @SpeciesTypeID
                      OR @SpeciesTypeID IS NULL
                  )
              AND (
                      g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                      OR @AdministrativeLevelID IS NULL
                  )
              AND (
                      vss.idfOUtBreak = @OutbreakKey
                      OR @OutbreakKey IS NULL
                  )
			  AND (	
					((CAST(vss.datStartDate AS DATE) >= @StartDateFrom AND @StartDateTo IS NULL)
					OR
					(CAST(vss.datStartDate AS DATE) <= @StartDateTo AND @StartDateFrom IS NULL)
					OR
					(CAST(vss.datStartDate AS DATE) BETWEEN @StartDateFrom AND @StartDateTo))
					OR (@StartDateFrom IS NULL AND @StartDateTo IS NULL)
					)
			  AND (
					((CAST(vss.datCloseDate AS DATE) >= @EndDateFrom AND @EndDateTo IS NULL)
					OR
					(CAST(vss.datCloseDate AS DATE) <= @EndDateTo AND @EndDateFrom IS NULL)
					OR
					(CAST(vss.datCloseDate AS DATE) BETWEEN @EndDateFrom AND @EndDateTo))
					OR 
					(@EndDateFrom IS NULL AND @EndDateTo IS NULL)
					) 
              AND (
                      vss.strSessionID LIKE '%' + TRIM(@SessionID) + '%'
                      OR @SessionID IS NULL
                  )
              AND (
                      vss.strFieldSessionID LIKE '%' + TRIM(@FieldSessionID) + '%'
                      OR @FieldSessionID IS NULL
                  )
             AND (
					  CHARINDEX(CAST(@DiseaseID AS NVARCHAR(2000)), diseaseIDs) > 0
					  OR @DiseaseID IS NULL
                 );

        DELETE FROM @Results
        WHERE ID IN (
                        SELECT vss.idfVectorSurveillanceSession
                        FROM dbo.tlbVectorSurveillanceSession vss
                            INNER JOIN dbo.tlbVectorSurveillanceSessionSummary vsss
                                ON vsss.idfVectorSurveillanceSession = vss.idfVectorSurveillanceSession
                                   AND vsss.intRowStatus = 0
                            INNER JOIN dbo.tlbVectorSurveillanceSessionSummaryDiagnosis vssd
                                ON vsss.idfsVSSessionSummary = vssd.idfsVSSessionSummary
                                   AND vssd.intRowStatus = 0
                            INNER JOIN dbo.tstObjectAccess oa
                                ON oa.idfsObjectID = vssd.idfsDiagnosis
                                   AND oa.intRowStatus = 0
                        WHERE intPermission = 1 -- Deny permission
                              AND idfActor = @UserEmployeeID
                    );

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        INSERT INTO @FinalResults
        SELECT ID,
               ReadPermissionIndicator,
               AccessToPersonalDataPermissionIndicator,
               AccessToGenderAndAgeDataPermissionIndicator,
               WritePermissionIndicator,
               DeletePermissionIndicator
        FROM @Results res
        WHERE res.ReadPermissionIndicator = 1
        GROUP BY ID,
                 ReadPermissionIndicator,
                 AccessToPersonalDataPermissionIndicator,
                 AccessToGenderAndAgeDataPermissionIndicator,
                 WritePermissionIndicator,
                 DeletePermissionIndicator;

        
		WITH paging
        AS (SELECT ROW_NUMBER() OVER (ORDER BY
				CASE WHEN @SortColumn = 'SessionID' AND @SortOrder = 'ASC' THEN vss.strSessionID END ASC,
                CASE WHEN @SortColumn = 'SessionID' AND @SortOrder = 'DESC' THEN vss.strSessionID END DESC,
                CASE WHEN @SortColumn = 'SessionStatusTypeName' AND @SortOrder = 'ASC' THEN sessionStatusType.name END ASC,
                CASE WHEN @SortColumn = 'SessionStatusTypeName' AND @SortOrder = 'DESC' THEN sessionStatusType.name END DESC,
                CASE WHEN @SortColumn = 'StartDate' AND @SortOrder = 'ASC' THEN vss.datStartDate END ASC,
                CASE WHEN @SortColumn = 'StartDate' AND @SortOrder = 'DESC' THEN vss.datStartDate END DESC,
                CASE WHEN @SortColumn = 'CloseDate' AND @SortOrder = 'ASC' THEN vss.datCloseDate END ASC,
                CASE WHEN @SortColumn = 'CloseDate' AND @SortOrder = 'DESC' THEN vss.datCloseDate END DESC,
                CASE WHEN @SortColumn = 'AdministrativeLevel1Name' AND @SortOrder = 'ASC' THEN lh.AdminLevel2Name END ASC,
                CASE WHEN @SortColumn = 'AdministrativeLevel1Name' AND @SortOrder = 'DESC' THEN lh.AdminLevel2Name END DESC,
                CASE WHEN @SortColumn = 'AdministrativeLevel2Name' AND @SortOrder = 'ASC' THEN lh.AdminLevel3Name END ASC,
                CASE WHEN @SortColumn = 'AdministrativeLevel2Name' AND @SortOrder = 'DESC' THEN lh.AdminLevel3Name END DESC,
                CASE WHEN @SortColumn = 'VectorType' AND @SortOrder = 'ASC' THEN vectorTypes.vectorTypes END ASC,
                CASE WHEN @SortColumn = 'VectorType' AND @SortOrder = 'DESC' THEN vectorTypes.vectorTypes END DESC,
                CASE WHEN @SortColumn = 'Disease' AND @SortOrder = 'ASC' THEN diseases.diseases END ASC,
                CASE WHEN @SortColumn = 'Disease' AND @SortOrder = 'DESC' THEN diseases.diseases END DESC 
			) AS ROWNUM,
			idfVectorSurveillanceSession AS SessionKey,
            strSessionID AS SessionID,
            vss.strFieldSessionID AS FieldSessionID,
            vss.idfOUtBreak AS OutbreakKey,
            o.strOutbreakID AS OutbreakID,
            o.datStartDate AS OutbreakStartDate,
            vectorTypeIDs.vectorTypeIDs AS VectorTypeIDs,
            vectorTypes.vectorTypes AS Vectors,
            diseaseIDs.diseaseIDs AS DiseaseIDs,
            diseases.diseases AS Diseases,
            statusType.name AS StatusTypeName,
            lh.AdminLevel2Name AS AdministrativeLevel1Name,
            lh.AdminLevel3Name AS AdministrativeLevel2Name,
            lh.AdminLevel4Name AS SettlementName,
            gl.dblLatitude AS Latitude,
            gl.dblLongitude AS Longitude,
            vss.datStartDate AS StartDate,
            vss.datCloseDate AS CloseDate,
            vss.idfsSite AS SiteID,
            res.ReadPermissionIndicator,
            res.AccessToPersonalDataPermissionIndicator,
            res.AccessToGenderAndAgeDataPermissionIndicator,
            res.WritePermissionIndicator,
            res.DeletePermissionIndicator,
			COUNT(*) OVER() AS RecordCount,
            (SELECT COUNT(*) FROM dbo.tlbVectorSurveillanceSession WHERE intRowStatus = 0 ) AS TotalCount
            FROM @FinalResults res
            INNER JOIN dbo.tlbVectorSurveillanceSession vss ON vss.idfVectorSurveillanceSession = res.ID
            LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000133) sessionStatusType ON sessionStatusType.idfsReference = vss.idfsVectorSurveillanceStatus
            LEFT JOIN dbo.tlbGeoLocation gl ON gl.idfGeoLocation = vss.idfLocation
            INNER JOIN dbo.gisLocation g ON g.idfsLocation = gl.idfsLocation
			INNER JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh ON lh.idfsLocation = g.idfsLocation
            CROSS APPLY (SELECT dbo.FN_VCTS_VSSESSION_DIAGNOSESNAMES_GET(vss.idfVectorSurveillanceSession, @LanguageID) diseases) diseases
			CROSS APPLY (SELECT dbo.FN_VCTS_VSSESSION_VECTORTYPENAMES_GET(vss.idfVectorSurveillanceSession, @LanguageID) vectorTypes) vectorTypes
			CROSS APPLY (SELECT dbo.FN_VCTS_VSSESSION_DIAGNOSESIDS_GET(vss.idfVectorSurveillanceSession, @LanguageID) diseaseIDs ) diseaseIDs
			CROSS APPLY (SELECT dbo.FN_VCTS_VSSESSION_VECTORTYPEIDS_GET(vss.idfVectorSurveillanceSession) vectorTypeIDs ) vectorTypeIDs
			LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000133) statusType ON statusType.idfsReference = vss.idfsVectorSurveillanceStatus
			LEFT JOIN dbo.tlbOutbreak o ON o.idfOutbreak = vss.idfOutbreak AND o.intRowStatus = 0
		)

		SELECT SessionKey,
               SessionID,
               FieldSessionID,
               OutbreakKey,
               OutbreakID,
               OutbreakStartDate,
               VectorTypeIDs,
               Vectors,
               DiseaseIDs,
               Diseases,
               StatusTypeName,
               AdministrativeLevel1Name,
               AdministrativeLevel2Name,
               SettlementName,
               Latitude,
               Longitude,
               StartDate,
               CloseDate,
               SiteID,
               ReadPermissionIndicator,
               AccessToPersonalDataPermissionIndicator,
               AccessToGenderAndAgeDataPermissionIndicator,
               WritePermissionIndicator,
               DeletePermissionIndicator,
			   RecordCount,
               TotalCount,
               CurrentPage = @PageNumber,
               TotalPages = (RecordCount / @PageSize) + IIF(RecordCount % @PageSize > 0, 1, 0)
        FROM paging 
		WHERE RowNum > @firstRec AND RowNum < @lastRec
		ORDER BY 
				CASE WHEN @SortColumn = 'SessionID' AND @SortOrder = 'ASC' THEN SessionID END ASC,
                CASE WHEN @SortColumn = 'SessionID' AND @SortOrder = 'DESC' THEN SessionID END DESC,
                CASE WHEN @SortColumn = 'SessionStatusTypeName' AND @SortOrder = 'ASC' THEN StatusTypeName END ASC,
                CASE WHEN @SortColumn = 'SessionStatusTypeName' AND @SortOrder = 'DESC' THEN StatusTypeName END DESC,
                CASE WHEN @SortColumn = 'StartDate' AND @SortOrder = 'ASC' THEN StartDate END ASC,
                CASE WHEN @SortColumn = 'StartDate' AND @SortOrder = 'DESC' THEN StartDate END DESC,
                CASE WHEN @SortColumn = 'CloseDate' AND @SortOrder = 'ASC' THEN CloseDate END ASC,
                CASE WHEN @SortColumn = 'CloseDate' AND @SortOrder = 'DESC' THEN CloseDate END DESC,
                CASE WHEN @SortColumn = 'AdministrativeLevel1Name' AND @SortOrder = 'ASC' THEN AdministrativeLevel2Name END ASC,
                CASE WHEN @SortColumn = 'AdministrativeLevel1Name' AND @SortOrder = 'DESC' THEN AdministrativeLevel2Name END DESC,
                CASE WHEN @SortColumn = 'AdministrativeLevel2Name' AND @SortOrder = 'ASC' THEN SettlementName END ASC,
                CASE WHEN @SortColumn = 'AdministrativeLevel2Name' AND @SortOrder = 'DESC' THEN SettlementName END DESC,
                CASE WHEN @SortColumn = 'VectorType' AND @SortOrder = 'ASC' THEN Vectors END ASC,
                CASE WHEN @SortColumn = 'VectorType' AND @SortOrder = 'DESC' THEN Vectors END DESC,
                CASE WHEN @SortColumn = 'Disease' AND @SortOrder = 'ASC' THEN Diseases END ASC,
                CASE WHEN @SortColumn = 'Disease' AND @SortOrder = 'DESC' THEN Diseases END DESC;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_VCTS_VSSESSION_New_GetDetail]...';


GO
--*************************************************************
-- Name 				: [USP_VCTS_VSSESSION_NEW_GetDetail]
-- Description			: Get Vector Surveillance Session data for session id
--          
-- Author               : Lamont Mitchell
-- Revision History
--		Name		Date       Change Detail
-- Harold Pryor	 4/23/2018	Initial Creation
-- Harold Pryor  6/7/2018   Updated to return idfsGeoLocationType
--
-- Doug Albanese	03-10-2020	Changes Defect 6212
-- Doug Albanese	10-16-2020	Added Outbreak's EIDSS ID
-- Doug Albanese	11-20-2020	Added dblAlignment (Direction)
-- Lamont Mitchell	11-11-2021	Added AdminLevels
-- Lamont Mitchell  12-12-2021  Added Location Hiarchy and missing fields, renamed SP added the work New to identify the new SP
-- Mike Kornegay	10-05-2022  Correct idfsSite to pull from the tlbVectorSurveillanceSession and not tlbGeoLocation.
-- Testing code:
-- EXEC USP_VCTS_VSSESSION_GetDetail(1, 'en')
--*************************************************************

ALTER PROCEDURE [dbo].[USP_VCTS_VSSESSION_New_GetDetail]
(
	@idfVectorSurveillanceSession AS BIGINT ,--##PARAM @idfVectorSurveillanceSession - AS session ID
	@LangID AS nvarchar(50)--##PARAM @LangID - language ID
)
AS
BEGIN
	DECLARE @ReturnMsg VARCHAR(MAX)
	SELECT	@ReturnMsg = ''
	DECLARE @ReturnCode BIGINT

	BEGIN TRY  	
  SELECT		vss.idfVectorSurveillanceSession,
				vss.strSessionID,
				ISNULL([dbo].[FN_VCTS_VSSESSION_VECTORTYPENAMES_GET](vss.idfVectorSurveillanceSession, @LangID),'') AS [strVectors],  
				ISNULL([dbo].[FN_VCTS_VSSESSION_VECTORTYPEIDS_GET](vss.idfVectorSurveillanceSession),'') AS [strVectorTypeIds],
				ISNULL([dbo].[FN_VCTS_VSSESSION_DIAGNOSESNAMES_GET](vss.idfVectorSurveillanceSession, @LangID), '') AS [strDiagnoses],
				ISNULL([dbo].[FN_VCTS_VSSESSION_DIAGNOSESIDS_GET](vss.idfVectorSurveillanceSession, @LangID), '') AS [strDiagnosesIDs],
				vss.strFieldSessionID,
				VSStatus.name strVSStatus,
				vss.idfsVectorSurveillanceStatus,  
				vss.intCollectionEffort,
				vss.strDescription,
				vss.datStartDate,
				vss.datCloseDate,  
				o.idfOutbreak,
			 	vss.idfLocation as idfGeoLocation,
				g.AdminLevel1Name strCountry,
				gl.idfsCountry,
				g.AdminLevel2Name strRegion,
				g.AdminLevel2ID idfsRegion,
				g.AdminLevel3Name strRayon,
				g.AdminLevel3ID idfsRayon,
				g.AdminLevel4ID idfsSettlement,
				g.AdminLevel4Name strSettlement, 
				gl.dblLatitude,
				gl.dblLongitude,
				vss.idfsSite,
				gl.strForeignAddress,
				gl.idfsGroundType,
				gl.dblDistance,
				gl.idfsGeoLocationType,
				gl.idfsLocation,
				gl.strStreetName,
				gl.strHouse,
				gl.strBuilding,
				gl.strApartment,
				gl.strAddressString,
				gl.strPostCode,
				gl.dblAccuracy,
				gl.strDescription LocationDescription,
				o.strOutbreakID,
				o.datStartDate OutbreakStartDate,
				gl.dblAlignment As dblDirection,
				g.AdminLevel1ID   AdminLevel0Value,
				g.AdminLevel1Name  AS AdminLevel0Text,
				g.AdminLevel2ID   AS AdminLevel1Value,
				g.AdminLevel2Name  AS AdminLevel1Text,
				g.AdminLevel3ID   AS AdminLevel2Value,
				g.AdminLevel3Name AS AdminLevel2Text,
				g.AdminLevel4ID   AS AdminLevel3Value,
				g.AdminLevel4Name  AS AdminLevel3Text,
				g.AdminLevel5ID   AS AdminLevel4Value,
				g.AdminLevel5Name  AS AdminLevel4Text,
				g.AdminLevel6ID   AS AdminLevel5Value,
				g.AdminLevel6Name  AS AdminLevel5Text,
				g.AdminLevel7ID   AS AdminLevel6Value,
				g.AdminLevel7Name  AS AdminLevel6Text
			FROM tlbVectorSurveillanceSession Vss
			LEFT JOIN	dbo.tlbGeoLocation gl ON Vss.idfLocation = gl.idfGeoLocation
			LEFT JOIN fn_gbl_locationHierarchy_Flattened(@LangID) g ON g.idfsLocation = gl.idfsLocation
			LEFT JOIN	tlbOutbreak O ON O.idfOutbreak = VSS.idfOutbreak
			Left JOIN FN_GBL_ReferenceRepair(@LangID,19000133) VSStatus On Vss.idfsVectorSurveillanceStatus = VSStatus.idfsReference
		WHERE	idfVectorSurveillanceSession = @idfVectorSurveillanceSession

	END TRY  
		BEGIN CATCH
		THROW;
	END CATCH;
END
GO
PRINT N'Altering Procedure [Report].[USP_LAB_FREEZER_SUBDIVISION_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_FREEZER_SUBDIVISION_GETList
--
-- Description:	Get freezer subdivision list (shelf, rack, box) for a specific freezer.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     01/19/2019 Initial release.
-- Stephen Long     03/01/2019 Added return code and return message.
-- Stephen Long     01/06/2021 Updated where criteria on site ID to look at freezer site ID only.
-- Leo Tracchia     09/15/2020 Removed return message and return code and change on joins
-- Srini Goli		10/03/2020 Used function fn_NoOfLocationsWithFreezerLocations to disply occupied Freezers
-- ================================================================================================
ALTER PROCEDURE [Report].[USP_LAB_FREEZER_SUBDIVISION_GETList] (
	@LanguageID NVARCHAR(50)
	,@FreezerID BIGINT = NULL
	,@SiteID BIGINT = NULL
	)
AS
BEGIN
	DECLARE @ReturnCode INT = 0;
	DECLARE @ReturnMessage NVARCHAR(MAX) = 'SUCCESS';

	BEGIN TRY
		SET NOCOUNT ON;

		SELECT fs.idfSubdivision AS FreezerSubdivisionID
			,fs.idfsSubdivisionType AS SubdivisionTypeID
			,subdivisionType.name AS SubdivisionTypeName
			,fs.idfFreezer AS FreezerID
			,f.strFreezerName AS FreezerName
			,f.LocBuildingName AS Building
			,f.strNote AS FreezerNote
			,f.idfsStorageType AS StorageTypeID
			,f.strBarcode AS FreezerBarCode
			,f.LocRoom AS Room
			,fs.idfParentSubdivision AS ParentFreezerSubdivisionID
			,fs.idfsSite AS OrganizationID
			,fs.strBarcode AS EIDSSFreezerSubdivisionID
			,fs.strNameChars AS FreezerSubdivisionName
			,fs.strNote AS SubdivisionNote
			,fs.intCapacity AS NumberOfLocations
			,fs.BoxSizeID AS BoxSizeTypeID
			,boxSizeType.name AS BoxSizeTypeName
			,fs.BoxPlaceAvailability
			,(
				SELECT COUNT(m.idfMaterial)
				FROM dbo.tlbMaterial m
				WHERE m.idfSubdivision = fs.idfSubdivision
					AND m.intRowStatus = 0
					AND (
						m.idfsSampleStatus <> 10015008
						AND m.idfsSampleStatus <> 10015009
						)
				) AS SampleCount
			,fs.intRowStatus AS RowStatus
			,'R' AS RowAction into #temp
		FROM dbo.tlbFreezerSubdivision fs
		LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000093) AS subdivisionType ON fs.idfsSubdivisionType = subdivisionType.idfsReference AND subdivisionType.intRowStatus = 0
		LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000512) AS boxSizeType ON fs.BoxSizeID = boxSizeType.idfsReference  AND boxSizeType.intRowStatus = 0
		LEFT JOIN dbo.tlbFreezer AS f ON f.idfFreezer = fs.idfFreezer AND f.intRowStatus = 0
		WHERE (
				(@FreezerID IS NOT NULL AND fs.idfFreezer = @FreezerID)
				OR (@FreezerID IS NULL)
				)
			AND (
				(@SiteID IS NOT NULL AND f.idfsSite = @SiteID)
				OR (@SiteID IS NULL)
				)
			AND fs.intRowStatus = 0
		ORDER BY fs.idfParentSubdivision;


WITH  cte1 AS (
  SELECT    FreezerSubdivisionID,
        SubdivisionTypeName,
		FreezerName,
		Building,
		Room,
		FreezerBarCode,
		FreezerNote,
		FreezerSubdivisionName,
		EIDSSFreezerSubdivisionID,
		NumberOfLocations,
		BoxSizeTypeName,
		CAST(FreezerSubdivisionID AS VARCHAR(255)) AS PATH,
        1 As LEVEL
  FROM #temp
  WHERE ParentFreezerSubdivisionID IS NULL
     
  UNION ALL
     
  SELECT    t.FreezerSubdivisionID,
            t.SubdivisionTypeName,
			t.FreezerName,
			t.Building,
			t.Room,
			t.FreezerBarCode,
			t.FreezerNote,
			t.FreezerSubdivisionName,
			t.EIDSSFreezerSubdivisionID,
			t.NumberOfLocations,
			t.BoxSizeTypeName,
			CAST(PATH + '.' + CAST(t.FreezerSubdivisionID AS VARCHAR(255)) AS VARCHAR(255)),
            --t.ParentFreezerSubdivisionID + '.'+t.FreezerSubdivisionID,
            th.LEVEL+1
  FROM #temp t
  INNER JOIN cte1 th
  ON th.FreezerSubdivisionID = t.ParentFreezerSubdivisionID
  WHERE t.ParentFreezerSubdivisionID IS NOT NULL
)
SELECT    FreezerSubdivisionID,
        SubdivisionTypeName,
		FreezerName,
		Building,
		Room,
		FreezerBarCode,
		FreezerNote,
		FreezerSubdivisionName,
		EIDSSFreezerSubdivisionID,
		IIF(LEVEL=3,Report.FN_REP_NoOfLocationsWithFreezerLocations(NumberOfLocations,FreezerSubdivisionID),CAST(NumberOfLocations AS VARCHAR)) AS NumberOfLocations,
		BoxSizeTypeName,
		PATH,
        LEVEL,
		IIF(CHARINDEX('.',PATH)=0,PATH,SUBSTRING(PATH,0,CHARINDEX('.',PATH))) as ReportGroup
FROM cte1 ORDER BY ReportGroup,Level;

	END TRY

	BEGIN CATCH
		THROW;
	END CATCH;

	--SELECT @ReturnCode
	--	,@ReturnMessage;
END;
GO
PRINT N'Altering Procedure [Report].[USP_REP_Human_Aggregate_Disease_Summary_Report_Detail]...';


GO
-- ================================================================================================
-- Name: USP_REP_Human_Aggregate_Disease_Summary_Report_Detail
-- Description: PrintedForm Human Aggregate Report
--          
-- Revision History:
-- Name				Date			Change
-- ---------------	----------	--------------------------------------------------------------------
-- Srini Goli		08/24/2022	Initial release for Human Aggregate Report.
-- Srini Goli		10/07/2022  used Sql Veriant data type.
/*

EXEC    [Report].[USP_REP_Human_Aggregate_Disease_Summary_Report_Detail]
        @LangID = N'en-US',
        @idfsAggrCaseType = 10102001,
        @idfAggrCaseList = '155564770001958;155564770001956'

*/
-- ================================================================================================
ALTER PROCEDURE [Report].USP_REP_Human_Aggregate_Disease_Summary_Report_Detail (
	@LangID AS NVARCHAR(50)
	,@idfsAggrCaseType AS  BIGINT= NULL
	,@idfAggrCaseList AS  NVARCHAR(MAX)= NULL
	)
AS
BEGIN
	DECLARE @returnCode INT = 0;
	DECLARE @returnMsg NVARCHAR(MAX) = 'SUCCESS';

	DECLARE @AggrCaseTable TABLE (
		[idfAggrCase] BIGINT,
		[intRowNumber] INT
		)

	DECLARE @tmpMatrix AS TABLE (
		intNumRow INT
		,idfAggrHumanCaseMTX BIGINT
		,idfsDiagnosis BIGINT
		,strDefault NVARCHAR(2000)
		,strIDC10 NVARCHAR(100)
		)

   DECLARE @tempFlexForm TABLE (
		idfsParentSection BIGINT
		,idfsSection BIGINT
		,idfsParameter BIGINT
		,SectionName NVARCHAR(2000)
		,ParameterName NVARCHAR(500)
		,parameterType NVARCHAR(100)
		,idfsParameterType BIGINT
		,idfsReferenceType BIGINT
		,idfsEditor BIGINT
		,SectionOrder INT
		,ParameterOrder INT
		,blnGrid BIT
		,blnFixedRowSet BIT
		,idfsEditMode BIGINT
		,idfsFormTemplate BIGINT
		)

	DECLARE @observationsTable TABLE (
		[idfObservation] BIGINT,
		[idfVersion] BIGINT,
		[idfsCaseFormTemplate] BIGINT,
		[intRowNumber] INT
		)

	DECLARE @tmpActivityParameters TABLE (
		[idfActivityParameters] BIGINT,
		[idfObservation] BIGINT,
		[idfsFormTemplate] BIGINT,
		[idfsParameter] BIGINT,
		[idfsSection] BIGINT,
		[idfRow] BIGINT,
		--[intNumRow] INT,
		[Type] BIGINT,
		[varValue] sql_variant,
		--[strNameValue] NVARCHAR(200),
		[numRow] INT,
		--[FakeField ] INT,
		[ParameterType]  BIGINT
		)

	BEGIN TRY
			BEGIN

			--Get Selected Agg Cases
			INSERT INTO @AggrCaseTable (
					[idfAggrCase],
					[intRowNumber]
					)
				SELECT CAST([Value] AS BIGINT),
					ROW_NUMBER() OVER (
						ORDER BY [Value]
						)
				FROM [dbo].[FN_GBL_SYS_SplitList](@idfAggrCaseList, NULL, NULL)

				--Get this SQl from [dbo].[USP_AGG_CASE_GETDETAIL]
				SELECT 
					a.idfCaseObservation
					,CaseObs.idfsFormTemplate AS idfsCaseFormTemplate
					,a.idfVersion
				INTO #tmpDetails
				FROM dbo.tlbAggrCase a	
				LEFT JOIN dbo.tlbObservation CaseObs ON idfCaseObservation = CaseObs.idfObservation
				WHERE a.intRowStatus = 0
				AND a.idfAggrCase IN (SELECT idfAggrCase FROM @AggrCaseTable)
				--AND (@idfAggrCase IS NULL OR a.idfAggrCase = @idfAggrCase)
				--	AND (
				--		CASE 
				--			WHEN @idfsAggrCaseType IS NULL
				--				THEN 1
				--			WHEN ISNULL(a.idfsAggrCaseType, '') = @idfsAggrCaseType
				--				THEN 1
				--			ELSE 0
				--			END = 1
				--		)
				--	AND (
				--		CASE 
				--			WHEN @idfAggrCase IS NULL
				--				THEN 1
				--			WHEN ISNULL(a.idfAggrCase, '') = @idfAggrCase
				--				THEN 1
				--			ELSE 0
				--			END = 1
				--		);
				
				DECLARE @idfsFormTemplate BIGINT,
						@idfVersion BIGINT

				INSERT INTO @observationsTable (
					[idfObservation],
					[idfVersion],
					[idfsCaseFormTemplate],
					[intRowNumber]
					)
				SELECT [idfCaseObservation],
					[idfVersion],
					[idfsCaseFormTemplate],
					ROW_NUMBER() OVER (
						ORDER BY [idfCaseObservation]
						)
				FROM #tmpDetails

				SELECT @idfsFormTemplate=idfsCaseFormTemplate, 
						@idfVersion= idfVersion
				FROM @observationsTable


				--Get this SQL from dbo.USP_CONF_ADMIN_AggregateHumanCaseMatrixReport_GET
				INSERT INTO @tmpMatrix
				SELECT	 
					mtx.intNumRow as intNumRow,
					mtx.idfAggrHumanCaseMTX,
					mtx.idfsDiagnosis,
					D.name AS strDefault,
					D.strIDC10

				FROM dbo.tlbAggrHumanCaseMTX mtx
				INNER JOIN dbo.FN_GBL_DiagnosisRepair(@LangID, 2, 10020002) D ON D.idfsDiagnosis = mtx.idfsDiagnosis  -- 2 = Human, use 10020002 for Aggregate cases
		
				WHERE mtx.intRowStatus = 0 AND mtx.idfVersion = @idfVersion

				--Get Flex Form header details
				INSERT INTO @tempFlexForm
				EXEC [dbo].[USP_ADMIN_FF_FlexForm_Get] 
						@LangID =@LangID, 
						@idfsDiagnosis= NULL, 
						@idfsFormType = 10034012, 
						@idfsFormTemplate=@idfsFormTemplate

				--Get Activity Parameters
				--INSERT INTO @tmpActivityParameters
				--EXEC dbo.USP_ADMIN_FF_ActivityParameters_GET
				--		@observationList = @observationList, 
				--		@LangID = @LangID
				INSERT INTO @tmpActivityParameters  (
						[idfActivityParameters],
						[idfObservation],
						[idfsFormTemplate],
						[idfsParameter],
						[idfsSection],
						[idfRow],
						[varValue],
						[Type],
						[numRow],
						[ParameterType]  
				)
				SELECT 
					AP.idfActivityParameters,
					AP.idfObservation,
					O.idfsFormTemplate,
					AP.idfsParameter,
					P.idfsSection,
					AP.idfRow,
					--CAST(AP.varValue AS NVARCHAR(MAX)),
					AP.varValue,
					dbo.FN_ADMIN_FF_TypeActivityParameters_GET(AP.idfsParameter),
					ROW_NUMBER() OVER (
						PARTITION BY AP.idfObservation ORDER BY AP.idfRow
						), 
					P.idfsParameterType
				FROM dbo.tlbActivityParameters AP
				LEFT JOIN dbo.ffParameter P	ON P.idfsParameter = AP.idfsParameter AND P.intRowStatus = 0
				INNER JOIN dbo.tlbObservation O ON AP.idfObservation = O.idfObservation
		
				WHERE AP.idfObservation IN (SELECT idfObservation FROM @observationsTable)
				AND AP.intRowStatus = 0
				AND O.intRowStatus = 0
				ORDER BY 
					AP.idfObservation,
					P.idfsSection,
					AP.idfRow


				--Report
				SELECT	ff.ParameterName
						,ff.idfsParameter
						,ff.ParameterOrder
						,m.idfsDiagnosis
						,m.strDefault
						,m.strIDC10
						,m.intNumRow
						,ap.varValue as varValue--ap.idfRow,m.idfAggrHumanCaseMTX as idfRow
				FROM @tempFlexForm ff 
				CROSS JOIN @tmpMatrix m 
				LEFT JOIN @tmpActivityParameters ap ON ff.idfsParameter=ap.idfsParameter and m.idfAggrHumanCaseMTX=ap.idfRow
				ORDER BY intNumRow

				--Test
				--Dynamic Pivot
				--DECLARE @ColumnToPivot  NVARCHAR(255),
				--		@ListToPivot    NVARCHAR(255),
				--		@SqlStatement NVARCHAR(MAX)
				--SET @ColumnToPivot='ParameterName'
				--SELECT @ListToPivot= COALESCE(@ListToPivot + ',','') +  N'[' + CAST(ff.ParameterName AS varchar(100)) + ']'
				--FROM @tempFlexForm ff
				--ORDER BY ParameterOrder

				----SELECT @ListToPivot
				----EXEC dbo.USP_ADMIN_DynamicPivotTableInSql @ColumnToPivot,@ListToPivot

				--  SET @SqlStatement = N'
				--	SELECT * FROM (
				--	  SELECT
				--	    [intNumRow],
				--		[strDefault],
				--		[strIDC10],
				--		[ParameterName],
				--		[varValue]
				--	  FROM #tempReport
				--	) Results
				--	PIVOT (
				--	  MAX([varValue])
				--	  FOR ['+@ColumnToPivot+']
				--	  IN (
				--		'+@ListToPivot+'
				--	  )
				--	) AS PivotTable
				--	ORDER BY intNumRow
				--  ';

			END

		DROP TABLE IF EXISTS #tmpDetails;

	END TRY

	BEGIN CATCH
		IF @@TRANCOUNT = 1
			ROLLBACK;

		SET @returnCode = ERROR_NUMBER();
		SET @returnMsg = 'ErrorNumber: ' + CONVERT(VARCHAR, ERROR_NUMBER()) + ' ErrorSeverity: ' + CONVERT(VARCHAR, ERROR_SEVERITY()) + ' ErrorState: ' + CONVERT(VARCHAR, ERROR_STATE()) + ' ErrorProcedure: ' + ISNULL(ERROR_PROCEDURE(), '') + ' ErrorLine: ' + CONVERT(VARCHAR, ISNULL(ERROR_LINE(), '')) + ' ErrorMessage: ' + ERROR_MESSAGE();;

		THROW;
	END CATCH
END
GO
PRINT N'Altering Procedure [Report].[USP_REP_Veterinary_Aggregate_Disease_Summary_Report_Detail]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- ================================================================================================
-- Name: USP_REP_Veterinary_Aggregate_Disease_Summary_Report_Detail
-- Description: PrintedForm Veterinary Aggregate Report
--          
-- Revision History:
-- Name				Date			Change
-- ---------------	----------	--------------------------------------------------------------------
-- Srini Goli		08/10/2022	Initial release for Veterinary Aggregate Report.
-- Srini Goli		10/07/2022  used Sql Veriant data type.
/*

EXEC    [Report].[USP_REP_Veterinary_Aggregate_Disease_Summary_Report_Detail]
        @LangID = N'en-US',
        @idfsAggrCaseType = 10102002,
        @idfAggrCaseList = '155564770001946;155564770001955'

*/
-- ================================================================================================
ALTER PROCEDURE [Report].USP_REP_Veterinary_Aggregate_Disease_Summary_Report_Detail (
	@LangID AS NVARCHAR(50)
	,@idfsAggrCaseType AS  BIGINT= NULL
	,@idfAggrCaseList AS  NVARCHAR(MAX)= NULL
	)
AS
BEGIN
	DECLARE @returnCode INT = 0;
	DECLARE @returnMsg NVARCHAR(MAX) = 'SUCCESS';

	DECLARE @AggrCaseTable TABLE (
		[idfAggrCase] BIGINT,
		[intRowNumber] INT
		)

	DECLARE @tmpMatrix AS TABLE (
		intNumRow INT
		,idfAggrVetCaseMTX BIGINT
		,idfsDiagnosis BIGINT
		,idfsSpeciesType BIGINT
		,strDefault NVARCHAR(2000)
		,strOIECode NVARCHAR(100)
		)

   DECLARE @tempFlexForm TABLE (
		idfsParentSection BIGINT
		,idfsSection BIGINT
		,idfsParameter BIGINT
		,SectionName NVARCHAR(2000)
		,ParameterName NVARCHAR(500)
		,parameterType NVARCHAR(100)
		,idfsParameterType BIGINT
		,idfsReferenceType BIGINT
		,idfsEditor BIGINT
		,SectionOrder INT
		,ParameterOrder INT
		,blnGrid BIT
		,blnFixedRowSet BIT
		,idfsEditMode BIGINT
		,idfsFormTemplate BIGINT
		)

	DECLARE @observationsTable TABLE (
		[idfObservation] BIGINT,
		[idfVersion] BIGINT,
		[idfsCaseFormTemplate] BIGINT,
		[intRowNumber] INT
		)

	DECLARE @tmpActivityParameters TABLE (
		[idfActivityParameters] BIGINT,
		[idfObservation] BIGINT,
		[idfsFormTemplate] BIGINT,
		[idfsParameter] BIGINT,
		[idfsSection] BIGINT,
		[idfRow] BIGINT,
		--[intNumRow] INT,
		[Type] BIGINT,
		[varValue] sql_variant, --NVARCHAR(MAX),
		[numRow] INT,
		[ParameterType]  BIGINT
		)

	DECLARE @tmpSpeciesList TABLE (
		[idfBaseReference] BIGINT,
		strDefault NVARCHAR(2000),
		strSpecies NVARCHAR(100),
		[intRowNumber] INT
		--idfsReferenceType BIGINT
		)

	BEGIN TRY
			BEGIN

			--Get Selected Agg Cases
			INSERT INTO @AggrCaseTable (
					[idfAggrCase],
					[intRowNumber]
					)
				SELECT CAST([Value] AS BIGINT),
					ROW_NUMBER() OVER (
						ORDER BY [Value]
						)
				FROM [dbo].[FN_GBL_SYS_SplitList](@idfAggrCaseList, NULL, NULL)

				--Get this SQl from [dbo].[USP_AGG_CASE_GETDETAIL]
				SELECT 
					a.idfCaseObservation
					,CaseObs.idfsFormTemplate AS idfsCaseFormTemplate
					,a.idfVersion
				INTO #tmpDetails
				FROM dbo.tlbAggrCase a	
				LEFT JOIN dbo.tlbObservation CaseObs ON idfCaseObservation = CaseObs.idfObservation
				WHERE a.intRowStatus = 0
				AND a.idfAggrCase IN (SELECT idfAggrCase FROM @AggrCaseTable)
				--AND (@idfAggrCase IS NULL OR a.idfAggrCase = @idfAggrCase)
				--	AND (
				--		CASE 
				--			WHEN @idfsAggrCaseType IS NULL
				--				THEN 1
				--			WHEN ISNULL(a.idfsAggrCaseType, '') = @idfsAggrCaseType
				--				THEN 1
				--			ELSE 0
				--			END = 1
				--		)
				--	AND (
				--		CASE 
				--			WHEN @idfAggrCase IS NULL
				--				THEN 1
				--			WHEN ISNULL(a.idfAggrCase, '') = @idfAggrCase
				--				THEN 1
				--			ELSE 0
				--			END = 1
				--		);
				
				DECLARE @idfsFormTemplate BIGINT,
						@idfVersion BIGINT

				INSERT INTO @observationsTable (
					[idfObservation],
					[idfVersion],
					[idfsCaseFormTemplate],
					[intRowNumber]
					)
				SELECT [idfCaseObservation],
					[idfVersion],
					[idfsCaseFormTemplate],
					ROW_NUMBER() OVER (
						ORDER BY [idfCaseObservation]
						)
				FROM #tmpDetails

				SELECT @idfsFormTemplate=idfsCaseFormTemplate, 
						@idfVersion= idfVersion
				FROM @observationsTable
				--SELECT * FROM @observationsTable

				--Get this SQL from USP_CONF_ADMIN_AggregateVetCaseMatrixReport_GET -- dbo.USP_CONF_ADMIN_AggregateHumanCaseMatrixReport_GET
				INSERT INTO @tmpMatrix
				SELECT	 
					mtx.intNumRow as intNumRow,
					mtx.idfAggrVetCaseMTX,
					mtx.idfsDiagnosis,
					mtx.idfsSpeciesType,
					D.name AS strDefault,
					D.strOIECode

				FROM dbo.tlbAggrVetCaseMTX mtx
				INNER JOIN dbo.FN_GBL_DiagnosisRepair(@LangID, 96, 10020002) D ON D.idfsDiagnosis = mtx.idfsDiagnosis  -- 2 = Human, use 10020002 for Aggregate cases

				WHERE mtx.intRowStatus = 0 AND  mtx.idfVersion = @idfVersion
				--ORDER BY mtx.intNumRow ASC

				--SpicesList
				INSERT INTO @tmpSpeciesList
				EXEC dbo.USP_CONF_GetSpeciesList_GET 
						@idfsBaseReference= 19000086,
						@intHACode=96,
						@strLanguageID=@LangID --@idfVersion=19000086
				
				--Get Flex Form header details
				INSERT INTO @tempFlexForm
				EXEC [dbo].[USP_ADMIN_FF_FlexForm_Get] 
						@LangID =@LangID, 
						@idfsDiagnosis= NULL, 
						@idfsFormType = 10034012, 
						@idfsFormTemplate=@idfsFormTemplate

				--Get Activity Parameters
				--INSERT INTO @tmpActivityParameters
				--EXEC dbo.USP_ADMIN_FF_ActivityParameters_GET
				--		@observationList = @observationList, 
				--		@LangID = @LangID
				INSERT INTO @tmpActivityParameters  (
						[idfActivityParameters],
						[idfObservation],
						[idfsFormTemplate],
						[idfsParameter],
						[idfsSection],
						[idfRow],
						[varValue],
						[Type],
						[numRow],
						[ParameterType]  
				)
				SELECT 
					AP.idfActivityParameters,
					AP.idfObservation,
					O.idfsFormTemplate,
					AP.idfsParameter,
					P.idfsSection,
					AP.idfRow,
					AP.varValue,
					--CAST(AP.varValue AS NVARCHAR(MAX)),
					dbo.FN_ADMIN_FF_TypeActivityParameters_GET(AP.idfsParameter),
					ROW_NUMBER() OVER (
						PARTITION BY AP.idfObservation ORDER BY AP.idfRow
						), 
					P.idfsParameterType
				FROM dbo.tlbActivityParameters AP
				LEFT JOIN dbo.ffParameter P	ON P.idfsParameter = AP.idfsParameter AND P.intRowStatus = 0
				INNER JOIN dbo.tlbObservation O ON AP.idfObservation = O.idfObservation
		
				WHERE AP.idfObservation IN (SELECT idfObservation FROM @observationsTable)
				AND AP.intRowStatus = 0
				AND O.intRowStatus = 0
				ORDER BY 
					AP.idfObservation,
					P.idfsSection,
					AP.idfRow

				--Report
				SELECT	ff.ParameterName
						,sl.strSpecies
						,ff.idfsParameter
						,ff.ParameterOrder
						,m.idfsDiagnosis
						,m.strDefault
						,m.strOIECode
						,m.intNumRow
						,ap.varValue as varValue--ap.idfRow,m.idfAggrHumanCaseMTX as idfRow
				FROM @tempFlexForm ff 
				CROSS JOIN @tmpMatrix m 
				LEFT JOIN @tmpActivityParameters ap ON ff.idfsParameter=ap.idfsParameter and m.idfAggrVetCaseMTX=ap.idfRow
				LEFT JOIN @tmpSpeciesList sl ON sl.idfBaseReference=m.idfsSpeciesType
				ORDER BY intNumRow

				--Test
				--Dynamic Pivot
				--DECLARE @ColumnToPivot  NVARCHAR(255),
				--		@ListToPivot    NVARCHAR(255),
				--		@SqlStatement NVARCHAR(MAX)
				--SET @ColumnToPivot='ParameterName'
				--SELECT @ListToPivot= COALESCE(@ListToPivot + ',','') +  N'[' + CAST(ff.ParameterName AS varchar(100)) + ']'
				--FROM @tempFlexForm ff
				--ORDER BY ParameterOrder

				----SELECT @ListToPivot
				----EXEC dbo.USP_ADMIN_DynamicPivotTableInSql @ColumnToPivot,@ListToPivot

				--  SET @SqlStatement = N'
				--	SELECT * FROM (
				--	  SELECT
				--	    [intNumRow],
				--		[strDefault],
				--		[strIDC10],
				--		[ParameterName],
				--		[varValue]
				--	  FROM #tempReport
				--	) Results
				--	PIVOT (
				--	  MAX([varValue])
				--	  FOR ['+@ColumnToPivot+']
				--	  IN (
				--		'+@ListToPivot+'
				--	  )
				--	) AS PivotTable
				--	ORDER BY intNumRow
				--  ';

			END

		DROP TABLE IF EXISTS #tmpDetails;

	END TRY

	BEGIN CATCH
		IF @@TRANCOUNT = 1
			ROLLBACK;

		SET @returnCode = ERROR_NUMBER();
		SET @returnMsg = 'ErrorNumber: ' + CONVERT(VARCHAR, ERROR_NUMBER()) + ' ErrorSeverity: ' + CONVERT(VARCHAR, ERROR_SEVERITY()) + ' ErrorState: ' + CONVERT(VARCHAR, ERROR_STATE()) + ' ErrorProcedure: ' + ISNULL(ERROR_PROCEDURE(), '') + ' ErrorLine: ' + CONVERT(VARCHAR, ISNULL(ERROR_LINE(), '')) + ' ErrorMessage: ' + ERROR_MESSAGE();;

		THROW;
	END CATCH
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating Procedure [Report].[USP_REP_Avion_FF_ActivityParameters_GET]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- ================================================================================================
-- Name: USP_REP_Avion_FF_ActivityParameters_GET
-- Description: Avion Report
--          
-- Revision History:
-- Name				Date			Change
-- ---------------	----------	--------------------------------------------------------------------
-- Srini Goli		10/07/2022  Created Intitial Version
/*
		--Use below codes for idfsFormType
        AvionFarmFarmEpidemiologicalInfo = 10034007,
        AvionSpeciesClinicalInvestigation = 10034008

--EPI
EXEC    [Report].[USP_REP_Avion_FF_ActivityParameters_GET]
        @LangID = N'en-US',  --ka-GE,
        @idfsFormType = 10034007,
        @ObjID = '5672'

--Species
EXEC    [Report].[USP_REP_Avion_FF_ActivityParameters_GET]
        @LangID = N'en-US',  --ka-GE,
        @idfsFormType = 10034008,
        @ObjID = '5672'
*/
-- ================================================================================================
CREATE PROCEDURE [Report].[USP_REP_Avion_FF_ActivityParameters_GET] (
	@LangID AS NVARCHAR(50)
	,@idfsFormType AS  BIGINT= NULL
	,@ObjID AS BIGINT= NULL --idfVetCase
	)
AS
BEGIN
	DECLARE @idfsCountry AS BIGINT,
			@idfsLanguage BIGINT = dbo.FN_GBL_LanguageCode_GET(@LangID),
			@idfsEnglish BIGINT = dbo.FN_GBL_LanguageCode_GET('en-US')
	DECLARE @tmpTemplate AS TABLE (
		idfsFormTemplate BIGINT
		,IsUNITemplate BIT
		)

	DECLARE @returnCode INT = 0;
	DECLARE @returnMsg NVARCHAR(MAX) = 'SUCCESS';

   DECLARE @tempFlexForm TABLE (
		idfsParentSection BIGINT
		,idfsSection BIGINT
		,idfsParameter BIGINT
		,SectionNameDefault NVARCHAR(2000)
		,SectionName NVARCHAR(2000)
		,ParameterName NVARCHAR(2000)
		,parameterType NVARCHAR(1000)
		,idfsParameterType BIGINT
		,idfsReferenceType BIGINT
		,idfsEditor BIGINT
		,SectionOrder INT
		,ParameterOrder INT
		,blnGrid BIT
		,blnFixedRowSet BIT
		,idfsEditMode BIGINT
		,idfsFormTemplate BIGINT
		)

	DECLARE @tmpActivityParameters TABLE (
		[idfActivityParameters] BIGINT,
		[idfObservation] BIGINT,
		[idfsFormTemplate] BIGINT,
		[idfsParameter] BIGINT,
		[idfsSection] BIGINT,
		[idfRow] BIGINT,
		[Type] BIGINT,
		[varValue] sql_variant,
		[numRow] INT,
		[ParameterType]  BIGINT
		)

	DECLARE @observationsTable TABLE (
		[idfsFormType] BIGINT,
		[idfObservation] BIGINT
		)

	BEGIN TRY
			BEGIN
				DECLARE @idfsFormTemplate BIGINT,
						@idfObservation BIGINT

				--Get this logic from dbo.USP_ADMIN_FF_FlexForm_Get
				IF @idfsFormTemplate IS NULL
					BEGIN
						--Obtain idfsFormTemplate, via given parameters of idfsDiagnosis and idfsFormType
						---------------------------------------------------------------------------------
						SET @idfsCountry = dbo.FN_GBL_CurrentCountry_GET()

						INSERT INTO @tmpTemplate
						EXECUTE dbo.USP_ADMIN_FF_ActualTemplate_GET 
							@idfsCountry,
							@ObjID,
							@idfsFormType

						SELECT TOP 1 @idfsFormTemplate = idfsFormTemplate
						FROM @tmpTemplate

						IF @idfsFormTemplate = - 1
							SET @idfsFormTemplate = NULL

						---------------------------------------------------------------------------------
					END

				--Get Flex Form header details
				INSERT INTO @tempFlexForm
				SELECT 
					s.idfsParentSection
					,COALESCE(p.idfsSection,0) AS idfsSection
					,p.idfsParameter
					,RF.strDefault AS SectionNameDefault
					,RF.Name AS SectionName
					,PN.Name AS ParameterName
					,PTR.Name AS parameterType
					,p.idfsParameterType
					,pt.idfsReferenceType
					,p.idfsEditor
					,sdo.intOrder	AS SectionOrder
					,ISNULL(PDO.intOrder,PDOE.intOrder)	AS ParameterOrder
					,s.blnGrid
					,s.blnFixedRowSet
					,PFT.idfsEditMode
					,pft.idfsFormTemplate
				FROM dbo.ffParameter p
				LEFT JOIN dbo.ffParameterForTemplate PFT ON PFT.idfsParameter = p.idfsParameter AND PFT.intRowStatus = 0
				LEFT JOIN dbo.ffSection s ON s.idfsSection = p.idfsSection
				LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000101) RF ON S.idfsSection = RF.idfsReference
				LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000071) PTR ON PTR.idfsReference = P.idfsParameterType
				LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000066) PN ON PN.idfsReference = P.idfsParameter
				LEFT JOIN dbo.ffParameterDesignOption PDO ON PFT.idfsParameter = PDO.idfsParameter
					AND PFT.idfsFormTemplate = PDO.idfsFormTemplate
					AND PDO.idfsLanguage = @idfsLanguage
					AND PDO.intRowStatus = 0
				LEFT JOIN dbo.ffParameterDesignOption PDOE ON PFT.idfsParameter = PDOE.idfsParameter
					AND PFT.idfsFormTemplate = PDOE.idfsFormTemplate
					AND PDOE.idfsLanguage = @idfsEnglish
					AND PDOE.intRowStatus = 0
				LEFT JOIN dbo.ffSectionDesignOption sdo ON sdo.idfsSection = s.idfsSection 
					AND sdo.idfsFormTemplate = @idfsFormTemplate 
					AND sdo.idfsLanguage = @idfsLanguage
					AND sdo.intRowStatus = 0
				LEFT JOIN dbo.ffParameterType PT
					ON pt.idfsParameterType = p.idfsParameterType
				WHERE PFT.idfsFormTemplate = @idfsFormTemplate
				ORDER BY  sdo.intOrder
					,pdo.intOrder
				
				--To Get Correct ObservationID	
				INSERT INTO @observationsTable(idfsFormType,idfObservation)
				SELECT 
					@idfsFormType as idfsFormType,
					CASE 
						 WHEN @idfsFormType=10034007 THEN f.idfObservation --For EPI
						 WHEN @idfsFormType=10034008 THEN s.idfObservation --For SpeciesClinicalInvestigation
					END as idfObservation
				FROM dbo.tlbVetCase a	
				LEFT JOIN dbo.tlbFarm f ON a.idfFarm=f.idfFarm --EPI
				LEFT JOIN dbo.tlbHerd h ON h.idfFarm=f.idfFarm
				LEFT JOIN dbo.tlbMaterial m on m.idfVetCase=a.idfVetCase
				LEFT JOIN dbo.tlbSpecies s on s.idfHerd =h.idfHerd   --Mutiple rows(more than one idfObservation for Species)
				LEFT JOIN dbo.tlbAnimal ani ON ani.idfSpecies=s.idfSpecies --Mutiple rows(more than one idfObservation for Animal)
				WHERE a.intRowStatus = 0
				AND a.idfVetCase = @ObjID

				--Get Activity Parameters (dbo.USP_ADMIN_FF_ActivityParameters_GET)
				INSERT INTO @tmpActivityParameters  (
						[idfActivityParameters],
						[idfObservation],
						[idfsFormTemplate],
						[idfsParameter],
						[idfsSection],
						[idfRow],
						[varValue],
						[Type],
						[numRow],
						[ParameterType]  
				)
				SELECT 
					AP.idfActivityParameters,
					AP.idfObservation,
					O.idfsFormTemplate,
					AP.idfsParameter,
					P.idfsSection,
					AP.idfRow,
					AP.varValue,
					dbo.FN_ADMIN_FF_TypeActivityParameters_GET(AP.idfsParameter),
					ROW_NUMBER() OVER (
						PARTITION BY AP.idfObservation ORDER BY AP.idfRow
						), 
					P.idfsParameterType
				FROM dbo.tlbActivityParameters AP
				LEFT JOIN dbo.ffParameter P	ON P.idfsParameter = AP.idfsParameter AND P.intRowStatus = 0
				INNER JOIN dbo.tlbObservation O ON AP.idfObservation = O.idfObservation
				
				WHERE AP.idfObservation IN (SELECT DISTINCT idfObservation FROM @observationsTable WHERE idfsFormType=@idfsFormType)
				AND AP.intRowStatus = 0
				AND O.intRowStatus = 0
				ORDER BY 
					AP.idfObservation,
					P.idfsSection,
					AP.idfRow

				--Report
				SELECT ParameterName
						,SectionName
						,SectionNameDefault
						,idfActivityParameters
						,idfRow
						,idfsParameter
						,Type
						,ParameterOrder
						,IIF(strNameValue IS NULL,varValue,strNameValue) AS varValue
						,strNameValue
						,idfsFormType
						,idfObservation
				FROM
				(
				SELECT	DISTINCT 
						ff.ParameterName
						,ff.SectionName
						,ff.SectionNameDefault
						,ap.idfActivityParameters
						,ap.idfRow
						--,SQL_VARIANT_PROPERTY(ap.varValue, 'BaseType') AS varValueType
						,ff.idfsParameter
						,ap.Type
						,ff.ParameterOrder
						,ap.varValue AS varValue
						,CASE SQL_VARIANT_PROPERTY(ap.varValue, 'BaseType') 
							WHEN 'nvarchar' THEN CAST(ap.varValue AS NVARCHAR(3000)) 
							ELSE ISNULL(SNT.strTextString, BR.strDefault) END AS strNameValue
						,@idfsFormType AS idfsFormType
						,ot.idfObservation
				FROM @tempFlexForm ff 
				CROSS JOIN @observationsTable ot 
				LEFT JOIN @tmpActivityParameters ap ON ff.idfsParameter=ap.idfsParameter AND ot.idfObservation=ap.idfObservation
				LEFT JOIN dbo.ffParameter P ON ap.idfsParameter = P.idfsParameter AND P.idfsEditor = 10067002 AND P.intRowStatus = 0
				--LEFT JOIN dbo.FN_GBL_ReferenceRepair_GET(@LangID, 19000066) FFP ON FFP.idfsReference = CASE WHEN CAST(SQL_VARIANT_PROPERTY(ap.varValue, 'BaseType') AS NVARCHAR(10)) = 'bigint'																			 
				--																							 THEN CAST(ap.varValue AS BIGINT)
				--																								--ELSE -1
				--																								END 
				
				LEFT JOIN dbo.trtBaseReference BR ON BR.idfsBaseReference = CASE WHEN CAST(SQL_VARIANT_PROPERTY(ap.varValue, 'BaseType') AS NVARCHAR(10)) = 'bigint'																			 
																				 THEN CAST(ap.varValue AS BIGINT)
																			--ELSE - 1
																			END 
				LEFT JOIN dbo.trtStringNameTranslation SNT ON SNT.idfsBaseReference = CASE WHEN (SQL_VARIANT_PROPERTY(ap.varValue, 'BaseType') = 'bigint')																				 
																				 THEN CAST(ap.varValue AS BIGINT)
																			--ELSE - 1
																			END 
															AND SNT.idfsLanguage = @idfsLanguage AND SNT.intRowStatus = 0
				) A
				ORDER BY 12,8 --ap.idfObservation,ff.ParameterOrder
			END

	END TRY

	BEGIN CATCH
		IF @@TRANCOUNT = 1
			ROLLBACK;

		SET @returnCode = ERROR_NUMBER();
		SET @returnMsg = 'ErrorNumber: ' + CONVERT(VARCHAR, ERROR_NUMBER()) + ' ErrorSeverity: ' + CONVERT(VARCHAR, ERROR_SEVERITY()) + ' ErrorState: ' + CONVERT(VARCHAR, ERROR_STATE()) + ' ErrorProcedure: ' + ISNULL(ERROR_PROCEDURE(), '') + ' ErrorLine: ' + CONVERT(VARCHAR, ISNULL(ERROR_LINE(), '')) + ' ErrorMessage: ' + ERROR_MESSAGE();;

		THROW;
	END CATCH
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_Barcode_GetList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_Barcode_GetList]';


GO
PRINT N'Refreshing Procedure [Report].[USP_ADMIN_Barcode_GetList]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_ADMIN_Barcode_GetList]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_DEDUPLICATION_HUMAN_DISEASE_Report_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_DEDUPLICATION_HUMAN_DISEASE_Report_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_FF_Determinant_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_FF_Determinant_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_FF_Template_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_FF_Template_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_AGG_REPORT_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_AGG_REPORT_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_AS_CAMPAIGN_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_AS_CAMPAIGN_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_CONF_AGEGROUPSTATISTICALAGEGROUPMATRIX_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_CONF_AGEGROUPSTATISTICALAGEGROUPMATRIX_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_CONF_AggregateSetting_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_CONF_AggregateSetting_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_CONF_CUSTOMREPORT_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_CONF_CUSTOMREPORT_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_CONF_DISEASEGROUPDISEASEMATRIX_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_CONF_DISEASEGROUPDISEASEMATRIX_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_CONF_DISEASEHUMANGENDERMATRIX_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_CONF_DISEASEHUMANGENDERMATRIX_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_CONF_HumanAggregateCaseMatrixReport_SET]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_CONF_HumanAggregateCaseMatrixReport_SET]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing Procedure [dbo].[USP_CONF_HumanAggregateCaseMatrixVersion_SET]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_CONF_HumanAggregateCaseMatrixVersion_SET]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing Procedure [dbo].[USP_CONF_PERSONALIDTYPEMATRIX_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_CONF_PERSONALIDTYPEMATRIX_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_CONF_REPORTDISEASEGROUPDISEASEMATRIX_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_CONF_REPORTDISEASEGROUPDISEASEMATRIX_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_CONF_SAMPLETYPEDERIVATIVEMATRIX_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_CONF_SAMPLETYPEDERIVATIVEMATRIX_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_CONF_SPECIESTYPEANIMALAGEMATRIX_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_CONF_SPECIESTYPEANIMALAGEMATRIX_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_CONF_TESTTOTESTRESULTMATRIX_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_CONF_TESTTOTESTRESULTMATRIX_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_CONF_VECTORTYPECOLLECTIONMETHODMATRIX_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_CONF_VECTORTYPECOLLECTIONMETHODMATRIX_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_CONF_VECTORTYPEFIELDTESTMATRIX_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_CONF_VECTORTYPEFIELDTESTMATRIX_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_CONF_VECTORTYPESAMPLETYPEMATRIX_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_CONF_VECTORTYPESAMPLETYPEMATRIX_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_CONF_VeterinaryAggregateCaseMatrixReport_SET]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_CONF_VeterinaryAggregateCaseMatrixReport_SET]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing Procedure [dbo].[USP_CONF_VeterinaryDiagnosticInvestigationMatrixReport_SET]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_CONF_VeterinaryDiagnosticInvestigationMatrixReport_SET]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing Procedure [dbo].[USP_CONF_VeterinarySanitaryActionMatrixReport_SET]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_CONF_VeterinarySanitaryActionMatrixReport_SET]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing Procedure [dbo].[USP_HAS_MONITORING_SESSION_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_HAS_MONITORING_SESSION_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_HUM_HUMAN_DISEASE_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_HUM_HUMAN_DISEASE_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ILI_Aggregate_Set]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ILI_Aggregate_Set]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_LAB_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_LAB_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_OMM_Case_QuickSet]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_OMM_Case_QuickSet]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_OMM_Session_Set]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_OMM_Session_Set]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_AGEGROUP_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_AGEGROUP_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_BASEREFERENCE_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_BASEREFERENCE_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_CASECLASSIFICATION_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_CASECLASSIFICATION_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_DIAGNOSISREFERENCE_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_DIAGNOSISREFERENCE_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_MEASUREREFERENCE_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_MEASUREREFERENCE_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_REPORTDIAGNOSISGROUP_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_REPORTDIAGNOSISGROUP_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_SAMPLETYPEREFERENCE_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_SAMPLETYPEREFERENCE_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_SPECIESTYPE_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_SPECIESTYPE_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_STATISTICDATATYPE_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_STATISTICDATATYPE_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_VectorSubType_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_VectorSubType_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_VECTORTYPEREFERENCE_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_VECTORTYPEREFERENCE_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_SecurityConfiguration_Set]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_SecurityConfiguration_Set]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_VCTS_SURVEILLANCE_SESSION_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_VCTS_SURVEILLANCE_SESSION_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_VET_DISEASE_REPORT_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_VET_DISEASE_REPORT_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_FF_Copy_Template]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_FF_Copy_Template]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_OMM_FF_Copy_Template]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_OMM_FF_Copy_Template]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_DEDUPLICATION_VET_DISEASE_Report_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_DEDUPLICATION_VET_DISEASE_Report_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_OMM_Vector_GetList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_OMM_Vector_GetList]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_VCTS_VSSESSION_GetDetail]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_VCTS_VSSESSION_GetDetail]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_DAS_MYCOLLECTIONS_GETCOUNT]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_DAS_MYCOLLECTIONS_GETCOUNT]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_DAS_MYCOLLECTIONS_GETList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_DAS_MYCOLLECTIONS_GETList]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_VCTS_VSSESSION_GetList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_VCTS_VSSESSION_GetList]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_OMM_Case_Set]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_OMM_Case_Set]';


GO
PRINT N'Update complete.';


GO
