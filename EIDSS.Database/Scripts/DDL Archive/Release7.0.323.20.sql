/*
Deployment script for EIDSS7_GG

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO

PRINT N'Altering Procedure [dbo].[USSP_HUM_DISEASE_GEOLOCATION_SET]...';

GO
-- ================================================================================================
-- Name: USSP_HUM_DISEASE_GEOLOCATION_SET
--
-- Description: Inserts or updates a geo-location record for a human associated with a human 
-- diease report.
--          
-- Author: Lamont Mitchell
--
-- Revision History:
-- Name                   Date       Change Detail
-- ---------------------- ---------- -------------------------------------------------------------
-- Stephen Long           11/18/2022 Initial release with data audit logic for SAUC30 and 31.
-- Stephen Long           12/01/2022 Added EIDSS object ID; smart key that represents the parent 
--                                   object. 
--
-- Testing code:

/*
--Example of a call of procedure:
DECLARE @idfGeoLocation BIGINT
DECLARE @idfsGroundType BIGINT
DECLARE @idfsGeoLocationType BIGINT
DECLARE @idfsCountry BIGINT
DECLARE @idfsRegion BIGINT
DECLARE @idfsRayon BIGINT
DECLARE @idfsSettlement BIGINT
DECLARE @strDescription NVARCHAR(200)
DECLARE @dblDistance FLOAT
DECLARE @dblLatitude FLOAT
DECLARE @dblLongitude FLOAT
DECLARE @dblAccuracy FLOAT
DECLARE @dblAlignment FLOAT
declare @blnGeoLocationShared bit

-- TODO: Set parameter values here.

EXECUTE dbo.USP_GBL_GEOLOCATION_SET
   @idfGeoLocation
  ,@idfsGroundType
  ,@idfsGeoLocationType
  ,@idfsCountry
  ,@idfsRegion
  ,@idfsRayon
  ,@idfsSettlement
  ,@strDescription
  ,@dblDistance
  ,@dblLatitude
  ,@dblLongitude
  ,@dblAccuracy
  ,@dblAlignment
  ,@blnGeoLocationShared
*/
-- ================================================================================================
CREATE PROCEDURE [dbo].[USSP_HUM_DISEASE_GEOLOCATION_SET]
(
    @GeoLocationID BIGINT,
    @GroundTypeID BIGINT,
    @GeoLocationTypeID BIGINT,
    @CountryID BIGINT,
    @RegionID BIGINT,
    @RayonID BIGINT,
    @SettlementID BIGINT,
    @Description NVARCHAR(200),
    @Latitude FLOAT,
    @Longitude FLOAT,
    @Accuracy FLOAT,
    @Distance FLOAT,
    @Alignment FLOAT,
    @ForeignAddressString NVARCHAR(200),
    @GeoLocationSharedIndicator BIT = 0,
    @Elevation FLOAT = NULL,
    @AuditUserName NVARCHAR(100) = '',
    @DataAuditEventID BIGINT = NULL, 
    @EIDSSObjectID NVARCHAR(200) = NULL 
)
AS
DECLARE @ReturnCode INT = 0,
        @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
        @AddressString NVARCHAR(MAX),
        @LocationID BIGINT = COALESCE(@SettlementID, @RayonID, @RegionID, @CountryID),
        @AuditUserID BIGINT = NULL,
        @AuditSiteID BIGINT = NULL,
        @ObjectID BIGINT = @GeoLocationID,
        @ObjectTableID BIGINT = 75580000000; -- tlbGeoLocation
DECLARE @GeoLocationBeforeEdit TABLE
(
    GeoLocationID BIGINT,
    ResidentTypeID BIGINT,
    GroundTypeID BIGINT,
    GeoLocationTypeID BIGINT,
    LocationID BIGINT,
    PostalCode NVARCHAR(200),
    StreetName NVARCHAR(200),
    House NVARCHAR(200),
    Building NVARCHAR(200),
    Apartment NVARCHAR(200),
    AddressDescription NVARCHAR(200),
    Distance FLOAT,
    Latitude FLOAT,
    Longitude FLOAT,
    Accuracy FLOAT,
    Alignment FLOAT,
    ForeignAddressIndicator BIT,
    ForeignAddressString NVARCHAR(200),
    ShortAddressString NVARCHAR(2000)
);
DECLARE @GeoLocationAfterEdit TABLE
(
    GeoLocationID BIGINT,
    ResidentTypeID BIGINT,
    GroundTypeID BIGINT,
    GeoLocationTypeID BIGINT,
    LocationID BIGINT,
    PostalCode NVARCHAR(200),
    StreetName NVARCHAR(200),
    House NVARCHAR(200),
    Building NVARCHAR(200),
    Apartment NVARCHAR(200),
    AddressDescription NVARCHAR(200),
    Distance FLOAT,
    Latitude FLOAT,
    Longitude FLOAT,
    Accuracy FLOAT,
    Alignment FLOAT,
    ForeignAddressIndicator BIT,
    ForeignAddressString NVARCHAR(200),
    ShortAddressString NVARCHAR(2000)
);
BEGIN
    BEGIN TRY
        SET @AuditUserName = ISNULL(@AuditUserName, '');

        -- Data audit
        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = userInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo;
        -- End data audit

        IF EXISTS
        (
            SELECT *
            FROM dbo.tlbGeoLocation
            WHERE idfGeoLocation = @GeoLocationID
        )
        BEGIN
            -- Data audit
            INSERT INTO @GeoLocationBeforeEdit
            (
                GeoLocationID,
                ResidentTypeID,
                GroundTypeID,
                GeoLocationTypeID,
                LocationID,
                PostalCode,
                StreetName,
                House,
                Building,
                Apartment,
                AddressDescription,
                Distance,
                Latitude,
                Longitude,
                Accuracy,
                Alignment,
                ForeignAddressIndicator,
                ForeignAddressString,
                ShortAddressString
            )
            SELECT idfGeoLocation,
                   idfsResidentType,
                   idfsGroundType,
                   idfsGeoLocationType,
                   idfsLocation,
                   strPostCode,
                   strStreetName,
                   strHouse,
                   strBuilding,
                   strApartment,
                   strDescription,
                   dblDistance,
                   dblLatitude,
                   dblLongitude,
                   dblAccuracy,
                   dblAlignment,
                   blnForeignAddress,
                   strForeignAddress,
                   strShortAddressString
            FROM dbo.tlbGeoLocation
            WHERE idfGeoLocation = @GeoLocationID;
            -- End data audit

            UPDATE dbo.tlbGeoLocation
            SET idfsGroundType = @GroundTypeID,
                idfsGeoLocationType = @GeoLocationTypeID,
                idfsCountry = @CountryID,
                idfsRegion = @RegionID,
                idfsRayon = @RayonID,
                idfsSettlement = @SettlementID,
                idfsLocation = @LocationID,
                strDescription = @Description,
                dblDistance = @Distance,
                dblLatitude = @Latitude,
                dblLongitude = @Longitude,
                dblAccuracy = @Accuracy,
                dblAlignment = @Alignment,
                strForeignAddress = @ForeignAddressString,
                blnForeignAddress = CASE
                                        WHEN @GeoLocationTypeID = 10036001 THEN
                                            1
                                        ELSE
                                            0
                                    END,
                dblElevation = @Elevation,
                AuditUpdateUser = @AuditUserName, 
                AuditUpdateDTM = GETDATE() 
            WHERE idfGeoLocation = @GeoLocationID;

            -- Data audit
            INSERT INTO @GeoLocationAfterEdit
            (
                GeoLocationID,
                ResidentTypeID,
                GroundTypeID,
                GeoLocationTypeID,
                LocationID,
                PostalCode,
                StreetName,
                House,
                Building,
                Apartment,
                AddressDescription,
                Distance,
                Latitude,
                Longitude,
                Accuracy,
                Alignment,
                ForeignAddressIndicator,
                ForeignAddressString,
                ShortAddressString
            )
            SELECT idfGeoLocation,
                   idfsResidentType,
                   idfsGroundType,
                   idfsGeoLocationType,
                   idfsLocation,
                   strPostCode,
                   strStreetName,
                   strHouse,
                   strBuilding,
                   strApartment,
                   strDescription,
                   dblDistance,
                   dblLatitude,
                   dblLongitude,
                   dblAccuracy,
                   dblAlignment,
                   blnForeignAddress,
                   strForeignAddress,
                   strShortAddressString
            FROM dbo.tlbGeoLocation
            WHERE idfGeoLocation = @GeoLocationID;

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   79170000000,
                   a.GeoLocationID,
                   NULL,
                   b.GroundTypeID,
                   a.GroundTypeID,
                   @AuditUserName, 
                   @EIDSSObjectID
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.GroundTypeID <> b.GroundTypeID)
                  OR (
                         a.GroundTypeID IS NOT NULL
                         AND b.GroundTypeID IS NULL
                     )
                  OR (
                         a.GroundTypeID IS NULL
                         AND b.GroundTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   79160000000,
                   a.GeoLocationID,
                   NULL,
                   b.GeoLocationTypeID,
                   a.GeoLocationTypeID,
                   @AuditUserName, 
                   @EIDSSObjectID
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.GeoLocationTypeID <> b.GeoLocationTypeID)
                  OR (
                         a.GeoLocationTypeID IS NOT NULL
                         AND b.GeoLocationTypeID IS NULL
                     )
                  OR (
                         a.GeoLocationTypeID IS NULL
                         AND b.GeoLocationTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   51523690000000,
                   a.GeoLocationID,
                   NULL,
                   b.LocationID,
                   a.LocationID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.LocationID <> b.LocationID)
                  OR (
                         a.LocationID IS NOT NULL
                         AND b.LocationID IS NULL
                     )
                  OR (
                         a.LocationID IS NULL
                         AND b.LocationID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   79240000000,
                   a.GeoLocationID,
                   NULL,
                   b.AddressDescription,
                   a.AddressDescription,
                   @AuditUserName, 
                   @EIDSSObjectID
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.AddressDescription <> b.AddressDescription)
                  OR (
                         a.AddressDescription IS NOT NULL
                         AND b.AddressDescription IS NULL
                     )
                  OR (
                         a.AddressDescription IS NULL
                         AND b.AddressDescription IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   79110000000,
                   a.GeoLocationID,
                   NULL,
                   b.Distance,
                   a.Distance,
                   @AuditUserName, 
                   @EIDSSObjectID
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.Distance <> b.Distance)
                  OR (
                         a.Distance IS NOT NULL
                         AND b.Distance IS NULL
                     )
                  OR (
                         a.Distance IS NULL
                         AND b.Distance IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   79120000000,
                   a.GeoLocationID,
                   NULL,
                   b.Latitude,
                   a.Latitude,
                   @AuditUserName, 
                   @EIDSSObjectID
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.Latitude <> b.Latitude)
                  OR (
                         a.Latitude IS NOT NULL
                         AND b.Latitude IS NULL
                     )
                  OR (
                         a.Latitude IS NULL
                         AND b.Latitude IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   79130000000,
                   a.GeoLocationID,
                   NULL,
                   b.Longitude,
                   a.Longitude,
                   @AuditUserName, 
                   @EIDSSObjectID
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.Longitude <> b.Longitude)
                  OR (
                         a.Longitude IS NOT NULL
                         AND b.Longitude IS NULL
                     )
                  OR (
                         a.Longitude IS NULL
                         AND b.Longitude IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   79090000000,
                   a.GeoLocationID,
                   NULL,
                   b.Accuracy,
                   a.Accuracy,
                   @AuditUserName, 
                   @EIDSSObjectID
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.Accuracy <> b.Accuracy)
                  OR (
                         a.Accuracy IS NOT NULL
                         AND b.Accuracy IS NULL
                     )
                  OR (
                         a.Accuracy IS NULL
                         AND b.Accuracy IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   79100000000,
                   a.GeoLocationID,
                   NULL,
                   b.Alignment,
                   a.Alignment,
                   @AuditUserName, 
                   @EIDSSObjectID
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.Alignment <> b.Alignment)
                  OR (
                         a.Alignment IS NOT NULL
                         AND b.Alignment IS NULL
                     )
                  OR (
                         a.Alignment IS NULL
                         AND b.Alignment IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4578780000000,
                   a.GeoLocationID,
                   NULL,
                   b.ForeignAddressIndicator,
                   a.ForeignAddressIndicator,
                   @AuditUserName, 
                   @EIDSSObjectID
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.ForeignAddressIndicator <> b.ForeignAddressIndicator)
                  OR (
                         a.ForeignAddressIndicator IS NOT NULL
                         AND b.ForeignAddressIndicator IS NULL
                     )
                  OR (
                         a.ForeignAddressIndicator IS NULL
                         AND b.ForeignAddressIndicator IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4578790000000,
                   a.GeoLocationID,
                   NULL,
                   b.ForeignAddressString,
                   a.ForeignAddressString,
                   @AuditUserName, 
                   @EIDSSObjectID
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.ForeignAddressString <> b.ForeignAddressString)
                  OR (
                         a.ForeignAddressString IS NOT NULL
                         AND b.ForeignAddressString IS NULL
                     )
                  OR (
                         a.ForeignAddressString IS NULL
                         AND b.ForeignAddressString IS NOT NULL
                     );
            -- End data audit
        END
        ELSE
        BEGIN
            INSERT INTO dbo.tlbGeoLocation
            (
                idfGeoLocation,
                idfsGroundType,
                idfsGeoLocationType,
                idfsCountry,
                idfsRegion,
                idfsRayon,
                idfsSettlement,
                idfsLocation,
                strDescription,
                dblDistance,
                dblLatitude,
                dblLongitude,
                dblAccuracy,
                dblAlignment,
                strForeignAddress,
                blnForeignAddress,
                dblElevation,
                AuditCreateUser
            )
            VALUES
            (   @GeoLocationID,
                @GroundTypeID,
                @GeoLocationTypeID,
                @CountryID,
                @RegionID,
                @RayonID,
                @SettlementID,
                @LocationID,
                @Description,
                @Distance,
                @Latitude,
                @Longitude,
                @Accuracy,
                @Alignment,
                @ForeignAddressString,
                CASE
                    WHEN @GeoLocationTypeID = 10036001 THEN
                        1
                    ELSE
                        0
                END,
                @Elevation,
                @AuditUserName
            );

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailCreate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser, 
                strObject
            )
            VALUES
            (@DataAuditEventID,
             @ObjectTableID,
             @GeoLocationID,
             10519001,
             '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
             + CAST(@ObjectTableID AS NVARCHAR(300)) + '}]',
             @AuditUserName, 
             @EIDSSObjectID
            );
            -- End data audit
        END

        SELECT @ReturnCode,
               @ReturnMessage,
               @GeoLocationID;
    END TRY
    BEGIN CATCH
        SET @ReturnCode = ERROR_NUMBER();
        SET @ReturnMessage = ERROR_MESSAGE();

        SELECT @ReturnCode,
               @ReturnMessage,
               @GeoLocationID;
    END CATCH
END
GO

PRINT N'Altering Procedure [dbo].[USP_ADMIN_ACTOR_GETList]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_ACTOR_GETList
--
-- Description: Gets data for sites, site groups, users and user groups for use case SAUC62 and
-- configurable filtration user stories.
--          
-- Revision History:
-- Name               Date       Change Detail
-- ------------------ ---------- -----------------------------------------------------------------
-- Stephen Long       05/13/2020 Initial release.
-- Stephen Long       11/10/2020 Added object access ID to the query.
-- Stephen Long       11/20/2020 Added search capability for site groups, sites and employee 
--                               groups for configurable site filtration.
-- Stephen Long       11/23/2020 Added actor name.
-- Stephen Long       11/24/2020 Corrected organization name for employee group type.
-- Ann Xiong          01/27/2021 Modified to return a list of Employee/Employee Group records for 
--                               disease filtration.
-- Ann Xiong          02/10/2021 Modified to return records when search by Name, Organization, and 
--                               Description.
-- Stephen Long       04/10/2021 Added pagination and sort logic.
-- Stephen Long       05/28/2021 Added disease filtration search indicator.
-- Stephen Long       06/09/2021 Added site filtration to filter search results.
-- Stephen Long       10/29/2021 Changed actor name on search results table to be nullable.
-- Michael Brown	  05/19/2021 Changed to assign the Family Name for the Actor Name Changed 
--								 And's to Or's at/around line 339
-- Stephen Long       12/15/2022 Modified to only return users when bringing back employee records.
--                               Non-users don't use EIDSS, so don't need to be included for 
--                               adding/denying permissions.  Fix on actor name search.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_ACTOR_GETList] (
	@LanguageID AS NVARCHAR(50)
	,@PageNumber INT = 1
	,@PageSize INT = 10
	,@SortColumn NVARCHAR(30) = 'ActorName'
	,@SortOrder NVARCHAR(4) = 'ASC'
	,@ActorTypeID AS BIGINT = NULL -- Site, Site Group, User or User Group
	,@ActorName AS NVARCHAR(200) = NULL
	,@OrganizationName AS NVARCHAR(200) = NULL
	,@UserGroupDescription AS NVARCHAR(200) = NULL
	,@DiseaseID AS BIGINT = NULL
	,@DiseaseFiltrationSearchIndicator AS BIT = 0
	,@UserSiteID BIGINT
	,@UserOrganizationID BIGINT
	,@UserEmployeeID BIGINT
	,@ApplySiteFiltrationIndicator BIT = 0
	)
AS
BEGIN
	SET NOCOUNT ON;
			
	BEGIN TRY
		DECLARE @Results TABLE (
			ID BIGINT NOT NULL
			,ReadPermissionIndicator BIT NOT NULL
			,AccessToPersonalDataPermissionIndicator BIT NOT NULL
			,AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL
			,WritePermissionIndicator BIT NOT NULL
			,DeletePermissionIndicator BIT NOT NULL
			);
		DECLARE @SearchResults TABLE (
			ActorID BIGINT NOT NULL
			,ActorTypeID BIGINT NOT NULL
			,ActorTypeName NVARCHAR(MAX) NOT NULL
			,ActorName NVARCHAR(MAX) NULL
			,ActorNameFirstLast NVARCHAR(MAX) NULL
			,OrganizationName NVARCHAR(MAX) NULL
			,EmployeeUserID BIGINT NULL
			,EmployeeSiteID BIGINT NULL
			,EmployeeSiteName NVARCHAR(MAX) NULL
			,UserGroupSiteID BIGINT NULL
			,UserGroupSiteName NVARCHAR(MAX) NULL
			,UserGroupDescription NVARCHAR(MAX) NULL
			,ObjectAccessID BIGINT NULL
			);
		DECLARE @FinalSearchResults TABLE (
			ActorID BIGINT NOT NULL
			,ActorTypeID BIGINT NOT NULL
			,ActorTypeName NVARCHAR(MAX) NOT NULL
			,ActorName NVARCHAR(MAX) NULL
			,ActorNameFirstLast NVARCHAR(MAX) NULL
			,OrganizationName NVARCHAR(MAX) NULL
			,EmployeeUserID BIGINT NULL
			,EmployeeSiteID BIGINT NULL
			,EmployeeSiteName NVARCHAR(MAX) NULL
			,UserGroupSiteID BIGINT NULL
			,UserGroupSiteName NVARCHAR(MAX) NULL
			,UserGroupDescription NVARCHAR(MAX) NULL
			,ObjectAccessID BIGINT NULL
			);

		SET NOCOUNT ON;

		IF @ApplySiteFiltrationIndicator = 1
		BEGIN
			DECLARE @FilteredResults TABLE (
				ID BIGINT NOT NULL
				,ReadPermissionIndicator BIT NOT NULL
				,AccessToPersonalDataPermissionIndicator BIT NOT NULL
				,AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL
				,WritePermissionIndicator BIT NOT NULL
				,DeletePermissionIndicator BIT NOT NULL
				,INDEX IDX_ID(ID)
				);

			INSERT INTO @FilteredResults
			SELECT e.idfEmployee
				,1
				,1
				,1
				,1
				,1
			FROM dbo.tlbEmployee e
			WHERE e.intRowStatus = 0
				AND e.idfsSite = @UserSiteID;

			-- =======================================================================================
			-- CONFIGURABLE SITE FILTRATION RULES
			-- 
			-- Apply configurable site filtration rules for use case SAUC34.
			-- =======================================================================================
			--
			-- Apply at the user's site group level, granted by a site group.
			--
			INSERT INTO @FilteredResults
			SELECT e.idfEmployee
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbEmployee e
			INNER JOIN dbo.tflSiteToSiteGroup grantingSGS ON grantingSGS.idfsSite = e.idfsSite
			INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup ON userSiteGroup.idfsSite = @UserSiteID
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE e.intRowStatus = 0
				AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

			--
			-- Apply at the user's site level, granted by a site group.
			--
			INSERT INTO @FilteredResults
			SELECT e.idfEmployee
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbEmployee e
			INNER JOIN dbo.tflSiteToSiteGroup grantingSGS ON grantingSGS.idfsSite = e.idfsSite
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorSiteID = @UserSiteID
				AND ara.ActorEmployeeGroupID IS NULL
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE e.intRowStatus = 0
				AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

			-- 
			-- Apply at the user's employee group level, granted by a site group.
			--
			INSERT INTO @FilteredResults
			SELECT e.idfEmployee
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbEmployee e
			INNER JOIN dbo.tflSiteToSiteGroup grantingSGS ON grantingSGS.idfsSite = e.idfsSite
			INNER JOIN dbo.tlbEmployeeGroupMember egm ON egm.idfEmployee = @UserEmployeeID
				AND egm.intRowStatus = 0
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE e.intRowStatus = 0
				AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

			-- 
			-- Apply at the user's ID level, granted by a site group.
			--
			INSERT INTO @FilteredResults
			SELECT e.idfEmployee
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbEmployee e
			INNER JOIN dbo.tflSiteToSiteGroup grantingSGS ON grantingSGS.idfsSite = e.idfsSite
			INNER JOIN dbo.tstUserTable u ON u.idfPerson = @UserEmployeeID
				AND u.intRowStatus = 0
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorUserID = u.idfUserID
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE e.intRowStatus = 0
				AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

			--
			-- Apply at the user's site group level, granted by a site.
			--
			INSERT INTO @FilteredResults
			SELECT e.idfEmployee
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbEmployee e
			INNER JOIN dbo.tflSiteToSiteGroup sgs ON sgs.idfsSite = @UserSiteID
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorSiteGroupID = sgs.idfSiteGroup
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE e.intRowStatus = 0
				AND sgs.idfsSite = e.idfsSite;

			-- 
			-- Apply at the user's site level, granted by a site.
			--
			INSERT INTO @FilteredResults
			SELECT e.idfEmployee
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbEmployee e
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorSiteID = @UserSiteID
				AND ara.ActorEmployeeGroupID IS NULL
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE e.intRowStatus = 0
				AND a.GrantingActorSiteID = e.idfsSite;

			-- 
			-- Apply at the user's employee group level, granted by a site.
			--
			INSERT INTO @FilteredResults
			SELECT e.idfEmployee
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbEmployee e
			INNER JOIN dbo.tlbEmployeeGroupMember egm ON egm.idfEmployee = @UserEmployeeID
				AND egm.intRowStatus = 0
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE e.intRowStatus = 0
				AND a.GrantingActorSiteID = e.idfsSite;

			-- 
			-- Apply at the user's ID level, granted by a site.
			--
			INSERT INTO @FilteredResults
			SELECT e.idfEmployee
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbEmployee e
			INNER JOIN dbo.tstUserTable u ON u.idfPerson = @UserEmployeeID
				AND u.intRowStatus = 0
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorUserID = u.idfUserID
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE e.intRowStatus = 0
				AND a.GrantingActorSiteID = e.idfsSite;

			-- Copy filtered results to results and use search criteria
			INSERT INTO @Results
			SELECT ID
				,ReadPermissionIndicator
				,AccessToPersonalDataPermissionIndicator
				,AccessToGenderAndAgeDataPermissionIndicator
				,WritePermissionIndicator
				,DeletePermissionIndicator
			FROM @FilteredResults
			INNER JOIN dbo.tlbEmployee e ON e.idfEmployee = ID
			LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000023) actorType ON e.idfsEmployeeType = actorType.idfsReference
			LEFT JOIN dbo.tlbPerson p ON p.idfPerson = e.idfEmployee
				AND p.intRowStatus = 0
			LEFT JOIN dbo.FN_GBL_Institution(@LanguageID) organizationName ON p.idfInstitution = organizationName.idfOffice
			LEFT JOIN dbo.tlbEmployeeGroup eg ON e.idfEmployee = eg.idfEmployeeGroup
			LEFT JOIN dbo.tstSite employeeSite ON employeeSite.idfsSite = e.idfsSite
				AND employeeSite.intRowStatus = 0
			LEFT JOIN dbo.tstSite userGroupSite ON userGroupSite.idfsSite = eg.idfsSite
				AND userGroupSite.intRowStatus = 0
			LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000022) userGroupType ON eg.idfsEmployeeGroupName = userGroupType.idfsReference
			LEFT JOIN dbo.tstObjectAccess oa ON oa.idfActor = e.idfEmployee
				AND oa.intRowStatus = 0
				AND (
					oa.idfsObjectType = 10060001 -- Disease Record
					AND oa.idfsObjectOperation = 10059003 -- Read 
					AND @DiseaseID IS NOT NULL
					)
			WHERE (
					(
						-- User
						e.idfsEmployeeCategory = 10526001 -- User
						AND e.idfsEmployeeType = 10023002 -- User
						)
					OR (
						-- User Group
						e.idfsEmployeeCategory = 10526002 -- User
						AND e.idfsEmployeeType = 10023001 -- User Group
						AND eg.intRowStatus = 0
						)
					)
				AND (
					idfsEmployeeType = @ActorTypeID
					OR @ActorTypeID IS NULL
					)
				AND (
					oa.idfsObjectID = @DiseaseID
					OR @DiseaseID IS NULL
					)
				AND (
					organizationName.name LIKE '%' + @OrganizationName + '%'
					OR @OrganizationName IS NULL
					)
				AND (
					eg.strDescription LIKE '%' + @UserGroupDescription + '%'
					OR @UserGroupDescription IS NULL
					)
			GROUP BY ID
				,ReadPermissionIndicator
				,AccessToPersonalDataPermissionIndicator
				,AccessToGenderAndAgeDataPermissionIndicator
				,WritePermissionIndicator
				,DeletePermissionIndicator;
		END
		ELSE
		BEGIN
			INSERT INTO @Results
			SELECT DISTINCT e.idfEmployee
				,1
				,1
				,1
				,1
				,1
			FROM dbo.tlbEmployee e
			LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000023) actorType ON e.idfsEmployeeType = actorType.idfsReference
			LEFT JOIN dbo.tlbPerson p ON p.idfPerson = e.idfEmployee
				AND p.intRowStatus = 0
			LEFT JOIN dbo.FN_GBL_Institution(@LanguageID) organizationName ON p.idfInstitution = organizationName.idfOffice
			LEFT JOIN dbo.tlbEmployeeGroup eg ON e.idfEmployee = eg.idfEmployeeGroup
			LEFT JOIN dbo.tstSite employeeSite ON employeeSite.idfsSite = e.idfsSite
				AND employeeSite.intRowStatus = 0
			LEFT JOIN dbo.tstSite userGroupSite ON userGroupSite.idfsSite = eg.idfsSite
				AND userGroupSite.intRowStatus = 0
			LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000022) userGroupType ON eg.idfsEmployeeGroupName = userGroupType.idfsReference
			LEFT JOIN dbo.tstObjectAccess oa ON oa.idfActor = e.idfEmployee
				AND oa.intRowStatus = 0
				AND (
					oa.idfsObjectType = 10060001 -- Disease Record
					AND oa.idfsObjectOperation = 10059003 -- Read 
					AND @DiseaseID IS NOT NULL
					)
			WHERE e.intRowStatus = 0
				AND (
					(
						-- User
						e.idfsEmployeeCategory = 10526001 -- User
						AND e.idfsEmployeeType = 10023002 -- User
						)
					OR (
						-- User Group
						e.idfsEmployeeCategory = 10526002 -- User
						AND e.idfsEmployeeType = 10023001 -- User Group
						AND eg.intRowStatus = 0
						)
					)
				AND (
					idfsEmployeeType = @ActorTypeID
					OR @ActorTypeID IS NULL
					)
				AND (
					oa.idfsObjectID = @DiseaseID
					OR @DiseaseID IS NULL
					)
				AND (
					organizationName.name LIKE '%' + @OrganizationName + '%'
					OR @OrganizationName IS NULL
					)
				AND (
					eg.strDescription LIKE '%' + @UserGroupDescription + '%'
					OR @UserGroupDescription IS NULL
					);
		END;

		INSERT INTO @SearchResults (
			ActorID
			,ActorTypeID
			,ActorTypeName
			,ActorName
			,ActorNameFirstLast
			,OrganizationName
			,EmployeeUserID
			,EmployeeSiteID
			,EmployeeSiteName
			,UserGroupSiteID
			,UserGroupSiteName
			,UserGroupDescription
			,ObjectAccessID
			)
		SELECT DISTINCT e.idfEmployee AS ActorID
			,e.idfsEmployeeType AS ActorTypeID
			,actorType.name AS ActorTypeName
			,(
				CASE 
					WHEN e.idfsEmployeeType = 10023001 -- User Group
						THEN eg.strName
					ELSE dbo.FN_GBL_ConcatFullName(p.strFamilyName, p.strFirstName, p.strSecondName)
					END
				) AS ActorName
			,(
				CASE 
					WHEN e.idfsEmployeeType = 10023001 -- User Group
						THEN NULL
					ELSE p.strFirstName + ' ' + p.strFamilyName 
					END
				) AS ActorNameFirstLast
			,(
				CASE 
					WHEN e.idfsEmployeeType = 10023001 -- User Group
						THEN userGroupSite.strSiteName
					ELSE organizationName.name
					END
				) AS OrganizationName
			,u.idfUserID AS EmployeeUserID
			,employeeSite.idfsSite AS EmployeeSiteID
			,employeeSite.strSiteName AS EmployeeSiteName
			,userGroupSite.idfsSite AS UserGroupSiteID
			,userGroupSite.strSiteName AS UserGroupSiteName
			,eg.strDescription AS UserGroupDescription
			,oa.idfObjectAccess AS ObjectAccessID
		FROM @Results res
		INNER JOIN dbo.tlbEmployee e ON e.idfEmployee = res.ID
		LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000023) actorType ON e.idfsEmployeeType = actorType.idfsReference
		LEFT JOIN dbo.tlbPerson p ON p.idfPerson = e.idfEmployee
			AND p.intRowStatus = 0
		LEFT JOIN dbo.tstUserTable u ON u.idfPerson = p.idfPerson
			AND u.intRowStatus = 0
		LEFT JOIN dbo.FN_GBL_Institution(@LanguageID) organizationName ON p.idfInstitution = organizationName.idfOffice
		LEFT JOIN dbo.tlbEmployeeGroup eg ON e.idfEmployee = eg.idfEmployeeGroup
		LEFT JOIN dbo.tstSite employeeSite ON employeeSite.idfsSite = e.idfsSite
			AND employeeSite.intRowStatus = 0
		LEFT JOIN dbo.tstSite userGroupSite ON userGroupSite.idfsSite = eg.idfsSite
			AND userGroupSite.intRowStatus = 0
		LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000022) userGroupType ON eg.idfsEmployeeGroupName = userGroupType.idfsReference
		LEFT JOIN dbo.tstObjectAccess oa ON oa.idfActor = e.idfEmployee
			AND oa.idfsObjectID = @DiseaseID
			AND oa.intRowStatus = 0
			AND (
				oa.idfsObjectType = 10060001 -- Disease Record
				AND oa.idfsObjectOperation = 10059003 -- Read 
				AND @DiseaseID IS NOT NULL
				);

		IF @DiseaseFiltrationSearchIndicator = 0
		BEGIN
		    DECLARE @LanguageCode BIGINT = dbo.FN_GBL_LanguageCode_Get(@LanguageID);
			DECLARE @Site NVARCHAR(MAX) = (SELECT COALESCE(rt.strResourceString, r.strResourceName)
            FROM dbo.trtResource r
                LEFT JOIN dbo.trtResourceTranslation rt
                    ON rt.idfsResource = r.idfsResource
                       AND rt.idfsLanguage = @LanguageCode
                       AND rt.intRowStatus = 0
            WHERE r.idfsResource = 549), 
			    @SiteGroup NVARCHAR(MAX) = (SELECT COALESCE(rt.strResourceString, r.strResourceName)
            FROM dbo.trtResource r
                LEFT JOIN dbo.trtResourceTranslation rt
                    ON rt.idfsResource = r.idfsResource
                       AND rt.idfsLanguage = @LanguageCode
                       AND rt.intRowStatus = 0
            WHERE r.idfsResource = 550);

			INSERT INTO @SearchResults
			SELECT s.idfSiteGroup AS ActorID
				,4 AS ActorTypeID
				,@SiteGroup AS ActorTypeName
				,s.strSiteGroupName AS ActorName
				,NULL AS ActorNameFirstLast
				,NULL AS OrganizationName
				,NULL AS EmployeeUserID
				,NULL AS EmployeeSiteID
				,NULL AS EmployeeSiteName
				,NULL AS UserGroupSiteID
				,NULL AS UserGroupSiteName
				,NULL AS UserGroupDescription
				,NULL AS ObjectAccessID
			FROM dbo.tflSiteGroup s
			WHERE s.intRowStatus = 0
				AND (
					@ActorTypeID = 4
					OR @ActorTypeID IS NULL
					)
				AND (
					s.strSiteGroupName LIKE '%' + @ActorName + '%'
					OR @ActorName IS NULL
					);

			INSERT INTO @SearchResults
			SELECT s.idfsSite AS ActorID
				,3 AS ActorTypeID
				,@Site AS ActorTypeName
				,s.strSiteName AS ActorName
				,NULL AS ActorNameFirstLast
				,organization.name AS OrganizationName
				,NULL AS EmployeeUserID
				,NULL AS EmployeeSiteID
				,NULL AS EmployeeSiteName
				,NULL AS UserGroupSiteID
				,NULL AS UserGroupSiteName
				,NULL AS UserGroupDescription
				,NULL AS ObjectAccessID
			FROM dbo.tstSite s
			LEFT JOIN dbo.FN_GBL_INSTITUTION(@LanguageID) organization ON organization.idfOffice = s.idfOffice
				AND organization.intRowStatus = 0
			WHERE s.intRowStatus = 0
				AND (
					@ActorTypeID = 3 -- Site
					OR @ActorTypeID IS NULL
					)
				AND (
					s.strSiteName LIKE '%' + @ActorName + '%'
					OR @ActorName IS NULL
					);
		END;

		INSERT INTO @FinalSearchResults
		SELECT * FROM @SearchResults
		WHERE ActorName LIKE + '%' + @ActorName + '%'
		       OR ActorNameFirstLast LIKE + '%' + @ActorName + '%' 
				OR @ActorName IS NULL;

		WITH paging
		AS (
			SELECT ActorID
				,c = COUNT(*) OVER ()
			FROM @FinalSearchResults res
			ORDER BY CASE 
					WHEN @SortColumn = 'ActorTypeName'
						AND @SortOrder = 'ASC'
						THEN ActorTypeName
					END ASC
				,CASE 
					WHEN @SortColumn = 'ActorTypeName'
						AND @SortOrder = 'DESC'
						THEN ActorTypeName
					END DESC
				,CASE 
					WHEN @SortColumn = 'ActorName'
						AND @SortOrder = 'ASC'
						THEN ActorName
					END ASC
				,CASE 
					WHEN @SortColumn = 'ActorName'
						AND @SortOrder = 'DESC'
						THEN ActorName
					END DESC
				,CASE 
					WHEN @SortColumn = 'OrganizationName'
						AND @SortOrder = 'ASC'
						THEN OrganizationName
					END ASC
				,CASE 
					WHEN @SortColumn = 'OrganizationName'
						AND @SortOrder = 'DESC'
						THEN OrganizationName
					END DESC
				,CASE 
					WHEN @SortColumn = 'UserGroupDescription'
						AND @SortOrder = 'ASC'
						THEN UserGroupDescription
					END ASC
				,CASE 
					WHEN @SortColumn = 'UserGroupDescription'
						AND @SortOrder = 'DESC'
						THEN UserGroupDescription
					END DESC OFFSET @PageSize * (@PageNumber - 1) ROWS FETCH NEXT @PageSize ROWS ONLY
			)
		SELECT res.ActorID
			,ActorTypeID
			,ActorTypeName
			,ActorName
			,OrganizationName
			,EmployeeUserID
			,EmployeeSiteID
			,EmployeeSiteName
			,UserGroupSiteID
			,UserGroupSiteName
			,UserGroupDescription
			,ObjectAccessID
			,0 AS RowSelectionIndicator
			,c AS RecordCount
			,(
				(
					SELECT COUNT(*)
					FROM dbo.tlbEmployee
					WHERE intRowStatus = 0
					) + (
					SELECT COUNT(*)
					FROM dbo.tstSite
					WHERE intRowStatus = 0
						AND @DiseaseFiltrationSearchIndicator = 0
					) + (
					SELECT COUNT(*)
					FROM dbo.tflSiteGroup
					WHERE intRowStatus = 0
						AND @DiseaseFiltrationSearchIndicator = 0
					)
				) AS TotalRowCount
			,CurrentPage = @PageNumber
			,TotalPages = (c / @PageSize) + IIF(c % @PageSize > 0, 1, 0)
		FROM @FinalSearchResults res
		INNER JOIN paging ON paging.ActorID = res.ActorID;
	END TRY

	BEGIN CATCH
		THROW;
	END CATCH;
END
GO
--PRINT N'Altering Procedure [dbo].[USP_HUM_HUMAN_MASTER_GETDetail]...';


--GO
---- ================================================================================================
---- Name: USP_HUM_HUMAN_MASTER_GETDetail
----
---- Description:	Get a human actual record
----          
---- Revision History:
---- Name				Date		Change Detail
---- ---------------	----------	--------------------------------------------------------------------
---- Mandar Kulkarni				Initial release.
---- Vilma Thomas		05/25/2018	Update the ReferenceType key from 19000167 to 19000500 for 'Contact 
----								Phone Type'
---- Stephen Long		11/26/2018	Update for the new API; remove returnCode and returnMsg.
---- Ann Xiong		08/30/2019	Added script to select PersonalIDTypeName, OccupationTypeName, 
----								SchoolCountry, 
----								SchoolRegion, SchoolRayon, SchoolSettlement for Person Deduplication.
---- Ann Xiong		09/09/2019	return haai.SchoolAddressID instead of haai.AltAddressID as 
----								SchoolGeoLocationID
---- Mark Wilson		10/29/2019	added Settlement Type to return
---- Ann Xiong		02/17/2020	Added IsAnotherPhone and Age to select
---- Ann Xiong		05/08/2020	Added YNAnotherAddress, YNHumanForeignAddress, 
----								YNEmployerForeignAddress, YNHumanAltForeignAddress, 
----								YNSchoolForeignAddress, YNWorkSameAddress to select
---- Stephen Long		07/07/2020	Changed v6.1 function call for create address string to v7 version.
---- Mark Wilson		09/20/2021	reworked the locations to use gisLocation and hierarchy
---- Mark Wilson		10/04/2021	Updated to pull location data from correct table
---- Mark Wilson		10/05/2021	Updated to use correct location references and udpate test code
---- Mark Wilson		10/06/2021	Added Alt Address fields
---- Mark Wilson		10/07/2021	Lat/Long only needed for Current Address and Foreign Address not needed for Permanent
---- Mark Wilson		10/12/2021  Added YNPermanentSameAddress, updated YNAnotherAddress
---- Leo Tracchia		05/13/2022	Added joins for Location hierachy
---- Doug Albanese	 12/08/2022	 I have performed work to improve the speed of a record.

--/*Test Code

--EXEC dbo.USP_HUM_HUMAN_MASTER_GETDetail
--	@LangID = 'en-US',
--	@HumanMasterID = 422849750000916


--EXEC dbo.USP_HUM_HUMAN_MASTER_GETDetail
--	@LangID = 'az-Latn-AZ',
--	@HumanMasterID = 411420970000870


--EXEC dbo.USP_HUM_HUMAN_MASTER_GETDetail
--	@LangID = 'en-US',
--	@HumanMasterID = 413771740000870

--*/
---- ================================================================================================
--ALTER PROCEDURE [dbo].[USP_HUM_HUMAN_MASTER_GETDetail] (
--	@LangID NVARCHAR(20),
--	@HumanMasterID BIGINT
--	)
--AS
--BEGIN
--	DECLARE @HumanAltInfo AS TABLE (
--   HumanAltidfsLocation		  BIGINT,
--   HumanAltidfsCountry		  BIGINT,
--   HumanAltCountry			  NVARCHAR(200),
--   HumanAltidfsRegion		  BIGINT,
--   HumanAltRegion			  NVARCHAR(200),
--   HumanAltidfsRayon		  BIGINT,
--   HumanAltRayon			  NVARCHAR(200),
--   HumanAltidfsSettlement	  BIGINT,
--   HumanAltSettlement		  NVARCHAR(200),
--   HumanAltidfsSettlementType BIGINT
--)

--INSERT INTO @HumanAltInfo
--SELECT
--   haai.AltAddressID AS idfsLocation,
--   lhAlt.AdminLevel1ID AS HumanAltidfsCountry,
--   lhAlt.AdminLevel1Name AS HumanAltCountry,
--   lhAlt.AdminLevel2ID AS HumanAltidfsRegion,
--   lhAlt.AdminLevel2Name AS HumanAltRegion,
--   lhAlt.AdminLevel3ID AS HumanAltidfsRayon,
--   lhAlt.AdminLevel3Name AS HumanAltRayon,
--   lhAlt.AdminLevel4ID AS HumanAltidfsSettlement,
--   lhAlt.AdminLevel4Name AS HumanAltSettlement,
--   AltLocation.idfsType	AS HumanAltidfsSettlementType   
--FROM 
--   HumanActualAddlinfo haai
--INNER JOIN dbo.tlbGeoLocationShared AS tglAlt ON haai.AltAddressID = tglAlt.idfGeoLocationShared
--INNER JOIN dbo.gisLocation AltLocation ON AltLocation.idfsLocation = tglAlt.idfsLocation
--INNER JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LangID) lhAlt ON lhAlt.idfsLocation = tglAlt.idfsLocation	
--WHERE 
--   HumanActualAddlInfoUID = @HumanMasterID
   
--	SET NOCOUNT ON;

--	BEGIN TRY
--		SELECT ISNULL(ha.strFirstName, '') + ' ' + ISNULL(ha.strLastName, '') AS PatientFarmOwnerName,
--			haai.EIDSSPersonId AS EIDSSPersonID,
--			ha.idfsOccupationType AS OccupationTypeID,
--			ha.idfsNationality AS CitizenshipTypeID,
--			citizenshipType.name AS CitizenshipTypeName,
--			ha.idfsHumanGender AS GenderTypeID,
--			tb.name AS GenderTypeName,

--			-- Current Address
--			ha.idfCurrentResidenceAddress AS HumanGeoLocationID,
--			lhHuman.AdminLevel1ID AS HumanidfsCountry,
--			lhHuman.AdminLevel1Name AS HumanCountry,
--			lhHuman.AdminLevel2ID AS HumanidfsRegion,
--			lhHuman.AdminLevel2Name AS HumanRegion,
--			lhHuman.AdminLevel3ID AS HumanidfsRayon,
--			lhHuman.AdminLevel3Name AS HumanRayon,
--			lhHuman.AdminLevel4ID AS HumanidfsSettlement,
--			lhHuman.AdminLevel4Name AS HumanSettlement,			
--			HL.idfsType AS HumanidfsSettlementType,
--			humanSettlementType.[name] AS HumanSettlementType,
--			tglHuman.strPostCode AS HumanstrPostalCode,
--			tglHuman.strStreetName AS HumanstrStreetName,
--			tglHuman.strHouse AS HumanstrHouse,
--			tglHuman.strBuilding AS HumanstrBuilding,
--			tglHuman.strApartment AS HumanstrApartment,
--			tglHuman.strDescription AS HumanDescription,
--			tglHuman.dblLatitude AS HumanstrLatitude,
--			tglHuman.dblLongitude AS HumanstrLongitude,
--			tglHuman.blnForeignAddress AS HumanForeignAddressIndicator,
--			tglHuman.strForeignAddress AS HumanForeignAddressString,

--			-- Employer Address
--			ha.idfEmployerAddress AS EmployerGeoLocationID,
--			lhEmployer.AdminLevel1ID AS EmployeridfsCountry,
--			lhEmployer.AdminLevel1Name AS EmployerCountry,
--			lhEmployer.AdminLevel2ID AS EmployeridfsRegion,
--			lhEmployer.AdminLevel2Name AS EmployerRegion,
--			lhEmployer.AdminLevel3ID AS EmployeridfsRayon,
--			lhEmployer.AdminLevel3Name AS EmployerRayon,
--			lhEmployer.AdminLevel4ID AS EmployeridfsSettlement,
--			lhEmployer.AdminLevel4Name AS EmployerSettlement,
--			EA.idfsType AS EmployeridfsSettlementType,
--			EmpSettlementType.strDefault AS EmployerSettlementType,
--			tglEmployer.strPostCode AS EmployerstrPostalCode,
--			tglEmployer.strStreetName AS EmployerstrStreetName,
--			tglEmployer.strHouse AS EmployerstrHouse,
--			tglEmployer.strBuilding AS EmployerstrBuilding,
--			tglEmployer.strApartment AS EmployerstrApartment,
--			tglEmployer.strDescription AS EmployerDescription,
--			tglEmployer.blnForeignAddress AS EmployerForeignAddressIndicator,
--			tglEmployer.strForeignAddress AS EmployerForeignAddressString,

--			-- Permanent Address
--			ha.idfRegistrationAddress AS HumanPermGeoLocationID,
--			lhPerm.AdminLevel1ID AS HumanPermidfsCountry,
--			lhPerm.AdminLevel1Name AS HumanPermCountry,
--			lhPerm.AdminLevel2ID AS HumanPermidfsRegion,
--			lhPerm.AdminLevel2Name AS HumanPermRegion,
--			lhPerm.AdminLevel3ID AS HumanPermidfsRayon,
--			lhPerm.AdminLevel3Name AS HumanPermRayon,
--			lhPerm.AdminLevel4ID HumanPermidfsSettlement,
--			lhPerm.AdminLevel4Name AS HumanPermSettlement,
--			registrationLocation.idfsType AS HumanPermidfsSettlementType,
--			registrationSettlementType.[name] AS HumanPermSettlementType,
--			tglRegistrationAddress.strPostCode AS HumanPermstrPostalCode,
--			tglRegistrationAddress.strStreetName AS HumanPermstrStreetName,
--			tglRegistrationAddress.strHouse AS HumanPermstrHouse,
--			tglRegistrationAddress.strBuilding AS HumanPermstrBuilding,
--			tglRegistrationAddress.strApartment AS HumanPermstrApartment,
--			tglRegistrationAddress.strDescription AS HumanPermDescription,

--			-- Alternate Address
--			haai.AltAddressID AS HumanAltGeoLocationID,
--			lhAlt.HumanAltidfsCountry,
--			lhAlt.HumanAltCountry,
--			lhAlt.HumanAltidfsRegion,
--			lhAlt.HumanAltRegion,
--			lhAlt.HumanAltidfsRayon,
--			lhAlt.HumanAltRayon,
--			lhAlt.HumanAltidfsSettlement,
--			lhAlt.HumanAltSettlement,
--			lhAlt.HumanAltidfsSettlementType,
--			AltSettlementType.name AS HumanAltSettlementType,
--			tglAlt.strPostCode AS HumanAltstrPostalCode,
--			tglAlt.strStreetName AS HumanAltstrStreetName,
--			tglAlt.strHouse AS HumanAltstrHouse,
--			tglAlt.strBuilding AS HumanAltstrBuilding,
--			tglAlt.strApartment AS HumanAltstrApartment,
--			tglAlt.strDescription AS HumanAltDescription,
--			tglAlt.blnForeignAddress AS HumanAltForeignAddressIndicator,
--			tglAlt.strForeignAddress AS HumanAltForeignAddressString,

--			-- School Address
--			haai.SchoolAddressID AS SchoolGeoLocationID,
--			lhSchool.AdminLevel1ID AS SchoolidfsCountry,
--			lhSchool.AdminLevel1Name AS SchoolCountry,
--			lhSchool.AdminLevel2ID AS SchoolidfsRegion,
--			lhSchool.AdminLevel2Name AS SchoolRegion,
--			lhSchool.AdminLevel3ID AS SchoolidfsRayon,
--			lhSchool.AdminLevel3Name AS SchoolRayon,
--			lhSchool.AdminLevel4ID AS SchoolidfsSettlement,
--			lhSchool.AdminLevel4Name AS SchoolSettlement,
--			SchoolLocation.idfsType AS SchoolAltidfsSettlementType,
--			SchoolSettlementType.strDefault AS SchoolAltSettlementType,
--			tglSchool.strPostCode AS SchoolstrPostalCode,
--			tglSchool.strStreetName AS SchoolstrStreetName,
--			tglSchool.strHouse AS SchoolstrHouse,
--			tglSchool.strBuilding AS SchoolstrBuilding,
--			tglSchool.strApartment AS SchoolstrApartment,
--			tglSchool.blnForeignAddress AS SchoolForeignAddressIndicator,
--			tglSchool.strForeignAddress AS SchoolForeignAddressString,

--			dbo.FN_GBL_FormatDate(ha.datDateofBirth, 'mm/dd/yyyy') AS DateOfBirth,
--			dbo.FN_GBL_FormatDate(ha.datDateOfDeath, 'mm/dd/yyyy') AS DateOfDeath,
--			dbo.FN_GBL_FormatDate(ha.datEnteredDate, 'mm/dd/yyyy') AS EnteredDate,
--			dbo.FN_GBL_FormatDate(ha.datModificationDate, 'mm/dd/yyyy') AS ModificationDate,
--			ha.strFirstName AS FirstOrGivenName,
--			ha.strSecondName AS SecondName,
--			ha.strLastName AS LastOrSurname,
--			ha.strEmployerName AS EmployerName,
--			ha.strHomePhone AS HomePhone,
--			ha.strWorkPhone AS WorkPhone,
--			ha.idfsPersonIDType AS PersonalIDType,
--			ha.strPersonID AS PersonalID,
--			haai.ReportedAge,
--			haai.ReportedAgeUOMID,
--			haai.PassportNbr AS PassportNumber,
--			haai.IsEmployedID AS IsEmployedTypeID,
--			isEmployed.name AS IsEmployedTypeName,
--			haai.EmployerPhoneNbr AS EmployerPhone,
--			haai.EmployedDTM AS EmployedDateLastPresent,
--			haai.IsStudentID AS IsStudentTypeID,
--			isStudent.name AS IsStudentTypeName,
--			haai.SchoolName AS SchoolName,
--			haai.SchoolLastAttendDTM AS SchoolDateLastAttended,
--			haai.SchoolPhoneNbr AS SchoolPhone,
--			haai.ContactPhoneCountryCode,
--			haai.ContactPhoneNbr AS ContactPhone,
--			haai.ContactPhoneNbrTypeID AS ContactPhoneTypeID,
--			ContactPhoneNbrTypeID.name AS ContactPhoneTypeName,
--			haai.ContactPhone2CountryCode,
--			haai.ContactPhone2Nbr AS ContactPhone2,
--			haai.ContactPhone2NbrTypeID AS ContactPhone2TypeID,
--			ContactPhone2NbrTypeID.name AS ContactPhone2TypeName,
--			personalIDType.name AS PersonalIDTypeName,
--			occupationType.name AS OccupationTypeName,
--			CASE 
--				WHEN haai.ContactPhone2Nbr IS NULL
--					AND haai.ContactPhone2NbrTypeID IS NULL
--					THEN 'No'
--				ELSE 'Yes'
--				END AS IsAnotherPhone,
--			CAST(ISNULL(haai.ReportedAge, '') AS VARCHAR(3)) + ' ' + ISNULL(HumanAgeType.name, '') AS Age,
--			CASE 
--				WHEN ((ha.idfRegistrationAddress IS NOT NULL AND ha.idfRegistrationAddress > 0) OR (haai.AltAddressID IS NOT NULL AND haai.AltAddressID > 0))
--					THEN 'Yes'
--				ELSE 'No'
--				END AS YNAnotherAddress,
--			CASE 
--				WHEN tglHuman.blnForeignAddress IS NOT NULL
--					AND tglHuman.blnForeignAddress = 1
--					THEN 'Yes'
--				ELSE 'No'
--				END AS YNHumanForeignAddress,
--			CASE 
--				WHEN tglEmployer.blnForeignAddress IS NOT NULL
--					AND tglEmployer.blnForeignAddress = 1
--					THEN 'Yes'
--				ELSE 'No'
--				END AS YNEmployerForeignAddress,
--			CASE 
--				WHEN tglRegistrationAddress.blnForeignAddress IS NOT NULL
--					AND tglRegistrationAddress.blnForeignAddress = 1
--					THEN 'Yes'
--				ELSE 'No'
--				END AS YNHumPermForeignAddress,
--			CASE 
--				WHEN tglAlt.blnForeignAddress IS NOT NULL
--					AND tglAlt.blnForeignAddress = 1
--					THEN 'Yes'
--				ELSE 'No'
--				END AS YNHumanAltForeignAddress,
--			CASE 
--				WHEN tglSchool.blnForeignAddress IS NOT NULL
--					AND tglSchool.blnForeignAddress = 1
--					THEN 'Yes'
--				ELSE 'No'
--				END AS YNSchoolForeignAddress,
--			CASE 
--				WHEN dbo.FN_GBL_CreateAddressString(ISNULL(lhHuman.AdminLevel1Name, N''), ISNULL(lhHuman.AdminLevel2Name, N''), ISNULL(lhHuman.AdminLevel3Name, N''), ISNULL(tglHuman.strPostCode, N''), ISNULL(humanSettlementType.strDefault, N''), ISNULL(lhHuman.AdminLevel4Name, N''), ISNULL(tglHuman.strStreetName, N''), ISNULL(tglHuman.strHouse, N''), ISNULL(tglHuman.strBuilding, N''), ISNULL(tglHuman.strApartment, N''), ISNULL(tglHuman.blnForeignAddress, N''), ISNULL(tglHuman.strForeignAddress, N'')) = 
--						dbo.FN_GBL_CreateAddressString(ISNULL(lhEmployer.AdminLevel1Name, N''), ISNULL(lhEmployer.AdminLevel2Name, N''), ISNULL(lhEmployer.AdminLevel3Name, N''), ISNULL(tglEmployer.strPostCode, N''), ISNULL(EmpSettlementType.strDefault, N''), ISNULL(lhEmployer.AdminLevel4Name, N''), ISNULL(tglEmployer.strStreetName, N''), ISNULL(tglEmployer.strHouse, N''), ISNULL(tglEmployer.strBuilding, N''), ISNULL(tglEmployer.strApartment, N''), ISNULL(tglEmployer.blnForeignAddress, N''), ISNULL(tglEmployer.strForeignAddress, N''))
--					THEN 'Yes'
--				ELSE 'No'
--				END AS YNWorkSameAddress,
--			CASE 
--				WHEN dbo.FN_GBL_CreateAddressString(ISNULL(lhHuman.AdminLevel1Name, N''), ISNULL(lhHuman.AdminLevel2Name, N''), ISNULL(lhHuman.AdminLevel3Name, N''), ISNULL(tglHuman.strPostCode, N''), ISNULL(humanSettlementType.strDefault, N''), ISNULL(lhHuman.AdminLevel4Name, N''), ISNULL(tglHuman.strStreetName, N''), ISNULL(tglHuman.strHouse, N''), ISNULL(tglHuman.strBuilding, N''), ISNULL(tglHuman.strApartment, N''), ISNULL(tglHuman.blnForeignAddress, N''), ISNULL(tglHuman.strForeignAddress, N'')) = 
--						dbo.FN_GBL_CreateAddressString(ISNULL(lhPerm.AdminLevel1Name, N''), ISNULL(lhPerm.AdminLevel2Name, N''), ISNULL(lhPerm.AdminLevel3Name, N''), ISNULL(tglRegistrationAddress.strPostCode, N''), ISNULL(registrationSettlementType.strDefault, N''), ISNULL(lhPerm.AdminLevel4Name, N''), ISNULL(tglRegistrationAddress.strStreetName, N''), ISNULL(tglRegistrationAddress.strHouse, N''), ISNULL(tglRegistrationAddress.strBuilding, N''), ISNULL(tglRegistrationAddress.strApartment, N''), ISNULL(tglRegistrationAddress.blnForeignAddress, N''), ISNULL(tglRegistrationAddress.strForeignAddress, N''))
--					THEN 'Yes'
--				ELSE 'No'
--				END AS YNPermanentSameAddress 

--		FROM dbo.tlbHumanActual ha

--		LEFT JOIN dbo.HumanActualAddlinfo haai ON ha.idfHumanActual = haai.HumanActualAddlinfoUID
--		LEFT JOIN dbo.tlbGeoLocationShared AS tglHuman ON ha.idfCurrentResidenceAddress = tglHuman.idfGeoLocationShared
--		LEFT JOIN dbo.tlbGeoLocationShared AS tglEmployer ON ha.idfEmployerAddress = tglEmployer.idfGeoLocationShared
--		LEFT JOIN dbo.tlbGeoLocationShared AS tglRegistrationAddress ON ha.idfRegistrationAddress = tglRegistrationAddress.idfGeoLocationShared
--		LEFT JOIN dbo.tlbGeoLocationShared AS tglSchool ON haai.SchoolAddressID = tglSchool.idfGeoLocationShared
--		LEFT JOIN dbo.tlbGeoLocationShared AS tglAlt ON haai.AltAddressID = tglAlt.idfGeoLocationShared
--		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000043) tb ON tb.idfsReference = ha.idfsHumanGender

--		-- Current Address
--		LEFT JOIN dbo.gisLocation HL ON HL.idfsLocation = tglHuman.idfsLocation	
--		LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LangID) lhHuman ON lhHuman.idfsLocation = tglHuman.idfsLocation			
--		LEFT JOIN dbo.FN_GBL_GIS_Reference(@LangID, 19000005) AS humanSettlementType ON humanSettlementType.idfsReference = HL.idfsType

--		-- Employer address 
--		LEFT JOIN dbo.gisLocation EA ON EA.idfsLocation = tglEmployer.idfsLocation
--		LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LangID) lhEmployer ON lhEmployer.idfsLocation = tglEmployer.idfsLocation		
--		LEFT JOIN dbo.FN_GBL_GIS_Reference(@LangID, 19000005) AS EmpSettlementType ON EmpSettlementType.idfsReference = EA.idfsType

--		-- Permanent address 
--		LEFT JOIN dbo.gisLocation registrationLocation ON registrationLocation.idfsLocation = tglRegistrationAddress.idfsLocation
--		LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LangID) lhPerm ON lhPerm.idfsLocation = tglRegistrationAddress.idfsLocation		
--		LEFT JOIN dbo.FN_GBL_GIS_Reference(@LangID, 19000005) AS registrationSettlementType ON registrationSettlementType.idfsReference = registrationLocation.idfsType
		
--		-- Alternate address - new for EIDSS7
--		LEFT JOIN @HumanAltInfo lhAlt ON lhAlt.HumanAltidfsLocation = tglAlt.idfsLocation	
--		LEFT JOIN dbo.FN_GBL_GIS_Reference(@LangID, 19000005) AS AltSettlementType ON AltSettlementType.idfsReference = lhAlt.HumanAltidfsSettlementType

--		LEFT JOIN dbo.FN_GBL_Repair(@LangID, 19000100) isEmployed ON IsEmployed.idfsReference = haai.IsEmployedID
--		LEFT JOIN dbo.FN_GBL_Repair(@LangID, 19000100) isStudent ON isStudent.idfsReference = haai.IsStudentID
--		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000054) AS citizenshipType ON ha.idfsNationality = citizenshipType.idfsReference
--		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000500) AS contactPhoneNbrTypeID ON contactPhoneNbrTypeID.idfsReference = haai.ContactPhoneNbrTypeID
--		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000500) AS contactPhone2NbrTypeID ON contactPhone2NbrTypeID.idfsReference = haai.ContactPhone2NbrTypeID
--		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000148) AS personalIDType ON ha.idfsPersonIDType = personalIDType.idfsReference
--		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000061) AS occupationType ON ha.idfsOccupationType = occupationType.idfsReference

--		-- School address - E6 school address was originally stored in idfEmployerAddress with employment type = 'Student'
--		LEFT JOIN dbo.gisLocation SchoolLocation ON SchoolLocation.idfsLocation = tglSchool.idfsLocation
--		LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LangID) lhSchool ON lhSchool.idfsLocation = tglSchool.idfsLocation		
--		LEFT JOIN dbo.FN_GBL_GIS_Reference(@LangID, 19000005) AS schoolSettlementType ON schoolSettlementType.idfsReference = SchoolLocation.idfsType

--		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000042) AS HumanAgeType	ON haai.ReportedAgeUOMID = HumanAgeType.idfsReference

--		WHERE ha.idfHumanActual = @HumanMasterID;
--	END TRY

--	BEGIN CATCH
--		THROW;
--	END CATCH

--END
--GO
PRINT N'Altering Procedure [dbo].[USSP_ADMIN_ACCESS_RULE_ACTOR_SET]...';


GO

-- ================================================================================================
-- Name: USSP_ADMIN_ACCESS_RULE_ACTOR_SET
--
-- Description:	Inserts or updates access rule actors for configurable site filtration of the 
-- administration module.
--
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long		11/11/2020 Initial release.
-- Stephen Long     12/27/2020 Added granting actor indicator.
-- Stephen Long     04/19/2021 Removed language ID and audit user name as not needed.
-- Stephen Long     03/14/2022 Changed row action to an int.
-- Stephen Long     03/16/2022 Corrected row action check from 0 to 1.
-- Mark Wilson		06/03/2022 Added Audit fields
-- Stephen Long     12/16/2022 Changed user name from 100 to 200.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USSP_ADMIN_ACCESS_RULE_ACTOR_SET] 
(
	@AccessRuleActorID BIGINT OUTPUT,
	@AccessRuleID BIGINT,
	@GrantingActorIndicator BIT = 0,
	@ActorSiteGroupID BIGINT = NULL,
	@ActorSiteID BIGINT = NULL,
	@ActorEmployeeGroupID BIGINT = NULL,
	@ActorUserID BIGINT = NULL,
	@RowStatus INT,
	@RowAction INT,
	@AuditUser NVARCHAR(200)

)
AS
BEGIN
	SET NOCOUNT ON;

	BEGIN TRY
		IF @RowAction = 1 -- Insert
		BEGIN
			EXECUTE dbo.USP_GBL_NEXTKEYID_GET
				@tableName = N'AccessRuleActor',
				@idfsKey = @AccessRuleActorID OUTPUT;

			INSERT INTO dbo.AccessRuleActor 
			(
				AccessRuleActorID,
				AccessRuleID,
				GrantingActorIndicator,
				ActorSiteGroupID,
				ActorSiteID,
				ActorEmployeeGroupID,
				ActorUserID,
				intRowStatus,
				AuditCreateUser,
				AuditCreateDTM,
				SourceSystemNameID,
				SourceSystemKeyValue
			)
			VALUES 
			(
				@AccessRuleActorID,
				@AccessRuleID,
				@GrantingActorIndicator,
				@ActorSiteGroupID,
				@ActorSiteID,
				@ActorEmployeeGroupID,
				@ActorUserID,
				@RowStatus,
				@AuditUser,
				GETDATE(),
				10519001,
				'[{"AccessRuleID":' + CAST(@AccessRuleActorID AS NVARCHAR(24)) + '}]'
			)

		END
		ELSE
		BEGIN
			UPDATE dbo.AccessRuleActor
			SET AccessRuleID = @AccessRuleID,
				GrantingActorIndicator = @GrantingActorIndicator,
				ActorSiteGroupID = @ActorSiteGroupID,
				ActorSiteID = @ActorSiteID,
				ActorEmployeeGroupID = @ActorEmployeeGroupID,
				ActorUserID = @ActorUserID,
				intRowStatus = @RowStatus,
				AuditUpdateDTM = GETDATE(),
				AuditUpdateUser = @AuditUser

			WHERE AccessRuleActorID = @AccessRuleActorID;

		END;

	END TRY

	BEGIN CATCH
		THROW;
	END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USSP_HUM_REP_WHOEXPORT_GG]...';


GO
--*************************************************************************
-- Name 				: dbo.USSP_HUM_REP_WHOEXPORT_GG
--
-- Description			: SINT03 - WHO Export dbo ON Measles AND Rubella for GG.
-- 
-- Author               : Mandar Kulkarni
-- Revision History
--		Name			Date		Change Detail
--		Ann Xiong		12/02/2022	Replaced 'WHOrep_specific_gis_rayon' with 'WHOrep_specific_gis_region' to get the correct region data and added strImportationCountry and intInitialDiagnosis to the return list.
--		Ann Xiong		12/05/2022	 Generated new CaseID from WHOAreaID in table gisWHOMap
--		Ann Xiong		12/07/2022	Modified to return OutbreakID when the report is related to Outbreak Session and return data on EndDate
--		Ann Xiong		12/15/2022	Fixed a few issues Anatoliy found during test
--
-- Testing code:

--Example of a call of PROCEDURE:
--GG
--exec dbo.[USSP_HUM_REP_WHOEXPORT_GG] @LangID=N'en',@StartDate='20140101',@EndDate='20141231', @idfsDiagnosis = 9843460000000   
--*************************************************************************

ALTER  PROCEDURE [dbo].[USSP_HUM_REP_WHOEXPORT_GG]
 (
		@LangID		AS NVARCHAR(50), 
		@StartDate DATETIME,
		@EndDate DATETIME,
		@idfsDiagnosis BIGINT
 )
AS	

BEGIN


DECLARE	@cmd	NVARCHAR(4000)

-- Drop temporary tables
IF Object_ID('tempdb..#HumanCasesToExport') IS NOT NULL
BEGIN
	SET	@cmd = N'drop TABLE #HumanCasesToExport'
	EXEC sp_executesql @cmd
END

IF Object_ID('tempdb..#FFToExport') IS NOT NULL
BEGIN
	SET	@cmd = N'drop TABLE #FFToExport'
	EXEC sp_executesql @cmd
END

IF Object_ID('tempdb..#ResultTable') IS NOT NULL
BEGIN
	SET	@cmd = N'drop TABLE #ResultTable'
	EXEC sp_executesql @cmd
END

-- CREATE temporary tables
IF Object_ID('tempdb..#HumanCasesToExport') IS NULL
CREATE TABLE #HumanCasesToExport
(	idfHumanCase				BIGINT NOT NULL PRIMARY KEY,
	idfHuman					BIGINT NOT NULL,
	idfCRAddress				BIGINT NULL,
	idfsDiagnosis				BIGINT NOT NULL,
	idfCSObservation			BIGINT NULL,
	idfEpiObservation			BIGINT NULL,
	datDateOnset				DATETIME NOT NULL,
	idfOutbreak					BIGINT NULL,
	NumberOfReceivedDoses		NVARCHAR(50) collate Cyrillic_General_CI_AS NULL,
	DateOfLastVaccination		DATETIME NULL,
	Fever						BIGINT NULL,
	Cough						BIGINT NULL,
	Coryza						BIGINT NULL,  		
	Conjunctivitis				BIGINT NULL,  
	RashDuration				NVARCHAR(50) collate Cyrillic_General_CI_AS NULL,	
	SourceOfInfection			BIGINT NULL,   
	Complications				BIGINT NULL,    
	Encephalitis				BIGINT NULL,    
	Pneumonia					BIGINT NULL,    	
	Diarrhoea					BIGINT NULL,    
	Other						NVARCHAR(500) collate Cyrillic_General_CI_AS NULL,	
	datConcludedDate			DATETIME NULL,
	idfsSampleType				BIGINT NULL,
	datFieldCollectionDate		DATETIME NULL,
	idfsTestResult				BIGINT NULL,
	idfsTestStatus				BIGINT NULL,
	idfTesting					BIGINT NULL
)
DELETE FROM #HumanCasesToExport

IF Object_ID('tempdb..#FFToExport') IS NULL
CREATE TABLE #FFToExport
(	idfActivityParameters		BIGINT NOT NULL PRIMARY KEY,
	idfsParameter				BIGINT NOT NULL,
	idfObservation				BIGINT NOT NULL,
	idfRow						BIGINT NOT NULL,
	varValue					sql_variant NULL
)
DELETE FROM #FFToExport

IF Object_ID('tempdb..#ResultTable') IS NULL
CREATE TABLE	#ResultTable
(	  
	  idfCase					BIGINT NOT NULL PRIMARY KEY
	, strCaseID					NVARCHAR(300) collate database_default NOT NULL 
	, intAreaID					INT NOT NULL 
	, datDRash					date NULL
	, intGenderID				INT NOT NULL 
	, datDBirth					date NULL
	, intAgeAtRashOnset			INT NULL
	, intNumOfVaccines			INT NULL
	, datDvaccine				DATETIME NULL
	, datDNotification			DATETIME NULL
	, datDInvestigation			DATETIME NULL
	, intClinFever				INT NULL
	, intClinCCC				INT NULL
	, intClinRashDuration		INT NULL
	, intClinOutcome			INT NULL
	, intClinHospitalization	INT NULL
	, intSrcInf					INT NULL
	, intSrcOutbreakRelated		INT NULL
	, strSrcOutbreakID			NVARCHAR(50) collate database_default NULL default NULL
	, intCompComplications		INT NULL
	, intCompEncephalitis		INT NULL
	, intCompPneumonia			INT NULL
	, intCompMalnutrition		INT NULL
	, intCompDiarrhoea			INT NULL
	, intCompOther				INT NULL
	, intFinalClassification	INT NULL
	, datDSpecimen				DATETIME NULL
	, intSpecimen				INT NULL
	, datDLabResult				DATETIME NULL
	, intMeaslesIgm				INT NULL
	, intMeaslesVirusDetection	INT NULL		
	, intRubellaIgm				INT NULL
	, intRubellaVirusDetection	INT NULL
	, strCommentsEpi			NVARCHAR(500) collate database_default NULL 
)
DELETE FROM #ResultTable

DECLARE 
  
	@idfsSummaryReportType			BIGINT,
	
	
	@FFP_DateOfOnset_M				BIGINT,
	@FFP_DateOfOnset_R				BIGINT,  	
		
	@FFP_NumberOfReceivedDoses_M	BIGINT,
	@FFP_NumberOfReceivedDoses_R	BIGINT,  		
	
	@FFP_DateOfLastVaccination_M	BIGINT,
	@FFP_DateOfLastVaccination_R	BIGINT,  		
	
	@FFP_Fever_M					BIGINT,
	@FFP_Fever_R					BIGINT,  		
	
	@FFP_Cough_M					BIGINT,
	@FFP_Cough_R					BIGINT,  	
	
	@FFP_Coryza_M					BIGINT,
	@FFP_Coryza_R					BIGINT,  	  	
	
	@FFP_Conjunctivitis_M			BIGINT,
	@FFP_Conjunctivitis_R			BIGINT,  	   				
	
	@FFP_RashDuration_M				BIGINT,
	@FFP_RashDuration_R				BIGINT,  		
	
	@FFP_SourceOfInfection_M		BIGINT,
	@FFP_SourceOfInfection_R		BIGINT,  		
	
	@FFP_Complications_M			BIGINT,
	@FFP_Complications_R			BIGINT,  		

	@FFP_Encephalitis_M				BIGINT,
	@FFP_Encephalitis_R				BIGINT,  		
	  		
	@FFP_Pneumonia_M				BIGINT,
	@FFP_Pneumonia_R				BIGINT,  		
	  		  		
	@FFP_Diarrhoea_M				BIGINT,
	--@FFP_Diarrhoea_R				BIGINT,  		
	  		  		
	@FFP_Other_M					BIGINT,  		  		
	--@FFP_Other_R					BIGINT,  	 
	 		
	@idfsDiagnosis_Measles			BIGINT,
	@idfsDiagnosis_Rubella			BIGINT
	
			  	
SET @idfsSummaryReportType = 10290027 /*WHO dbo - AJ&GG*/

--HCS FF - Rash onset date. / HCS FF- Date of onset
SELECT @FFP_DateOfOnset_M = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_DateOfOnset_M'
AND intRowStatus = 0

SELECT @FFP_DateOfOnset_R = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_DateOfOnset_R'
AND intRowStatus = 0
  
--HEI - Number of received doses (any vaccine with measles component) / HEI - Number of Measles vaccine doses received
SELECT @FFP_NumberOfReceivedDoses_M = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_NumberOfReceivedDoses_M'
AND intRowStatus = 0

SELECT @FFP_NumberOfReceivedDoses_R = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_NumberOfReceivedDoses_R'
AND intRowStatus = 0  	

--HEI - Date of last vaccination/HEI - Date of last Measles vaccine
SELECT @FFP_DateOfLastVaccination_M = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_DateOfLastVaccination_M'
AND intRowStatus = 0	

SELECT @FFP_DateOfLastVaccination_R = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_DateOfLastVaccination_R'
AND intRowStatus = 0	  
	
--HCS - Fever/HCS - Fever
SELECT @FFP_Fever_M = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Fever_M'
AND intRowStatus = 0

SELECT @FFP_Fever_R = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Fever_R'
AND intRowStatus = 0  	
	
--HCS - Cough / Coryza / Conjunctivitis /HCS - Cough / Coryza / Conjunctivitis
SELECT @FFP_Cough_M = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Cough_M'
AND intRowStatus = 0	

SELECT @FFP_Cough_R = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Cough_R'
AND intRowStatus = 0	 


SELECT @FFP_Coryza_M = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Coryza_M'
AND intRowStatus = 0	

SELECT @FFP_Coryza_R = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Coryza_R'
AND intRowStatus = 0	  	


SELECT @FFP_Conjunctivitis_M = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Conjunctivitis_M'
AND intRowStatus = 0	

SELECT @FFP_Conjunctivitis_R = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Conjunctivitis_R'
AND intRowStatus = 0	  	


--HCS - Rash duration / HCS - Duration (days)
SELECT @FFP_RashDuration_M = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_RashDuration_M'
AND intRowStatus = 0

SELECT @FFP_RashDuration_R = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_RashDuration_R'
AND intRowStatus = 0  	
	
--EPI - Source of infection / EPI - Source of infection
SELECT @FFP_SourceOfInfection_M = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_SourceOfInfection_M'
AND intRowStatus = 0		

SELECT @FFP_SourceOfInfection_R = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_SourceOfInfection_R'
AND intRowStatus = 0	  	

--HCS - Complications / HCS - Complications
SELECT @FFP_Complications_M = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Complications_M'
AND intRowStatus = 0		

SELECT @FFP_Complications_R = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Complications_R'
AND intRowStatus = 0		  

--HCS - Encephalitis / HCS - Encephalitis
SELECT @FFP_Encephalitis_M = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Encephalitis_M'
AND intRowStatus = 0		

SELECT @FFP_Encephalitis_R = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Encephalitis_R'
AND intRowStatus = 0	  	

--HCS - Pneumonia / HCS - Pneumonia
SELECT @FFP_Pneumonia_M = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Pneumonia_M'
AND intRowStatus = 0	

SELECT @FFP_Pneumonia_R = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Pneumonia_R'
AND intRowStatus = 0	  	
	
--HCS - Diarrhoea / HCS - Diarrhoea
SELECT @FFP_Diarrhoea_M = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Diarrhoea_M'
AND intRowStatus = 0		

--SELECT @FFP_Diarrhoea_R = idfsFFObject FROM trtFFObjectForCustomReport
--WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Diarrhoea_R'
--AND intRowStatus = 0		  	

--HCS - Other (specify) / HCS - Other
SELECT @FFP_Other_M = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Other_M'
AND intRowStatus = 0	 

--SELECT @FFP_Other_R = idfsFFObject FROM trtFFObjectForCustomReport
--WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Other_R'
--AND intRowStatus = 0	   	

 	
--idfsDiagnosis for:
--Measles
SELECT top 1 @idfsDiagnosis_Measles = d.idfsDiagnosis
FROM trtDiagnosis d
  INNER JOIN dbo.trtDiagnosisToGroupForReportType dgrt
  ON dgrt.idfsDiagnosis = d.idfsDiagnosis
  AND dgrt.idfsCustomReportType = @idfsSummaryReportType
  
  INNER JOIN dbo.trtReportDiagnosisGroup dg
  ON dgrt.idfsReportDiagnosisGroup = dg.idfsReportDiagnosisGroup
  AND dg.intRowStatus = 0 AND dg.strDiagnosisGroupAlias = 'DG_Measles'
 WHERE d.intRowStatus = 0

--Rubella
SELECT top 1 @idfsDiagnosis_Rubella = d.idfsDiagnosis
FROM trtDiagnosis d
  INNER JOIN dbo.trtDiagnosisToGroupForReportType dgrt
  ON dgrt.idfsDiagnosis = d.idfsDiagnosis
  AND dgrt.idfsCustomReportType = @idfsSummaryReportType
  
  INNER JOIN dbo.trtReportDiagnosisGroup dg
  ON dgrt.idfsReportDiagnosisGroup = dg.idfsReportDiagnosisGroup
  AND dg.intRowStatus = 0 AND dg.strDiagnosisGroupAlias = 'DG_Rubella'
 WHERE d.intRowStatus = 0	


-- DECLARE @AreaIDs TABLE
-- (
-- intAreaID INT,
-- idfsRegion BIGINT
-- )

--INSERT INTO @AreaIDs (intAreaID, idfsRegion)
--SELECT		
--CAST(tgra.varValue AS INT), reg.idfsReference
--FROM trtGISBaseReferenceAttribute tgra
--	INNER JOIN trtAttributeType tat
--	ON tat.idfAttributeType = tgra.idfAttributeType
--	AND tat.strAttributeTypeName = 'WHOrep_specific_gis_region'
--  INNER JOIN report.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000003 /*Region*/) reg
--	  ON reg.idfsReference = tgra.idfsGISBaseReference AND reg.intRowStatus = 0 

DECLARE	@DateOnsetParameter BIGINT = -100
IF	@idfsDiagnosis = @idfsDiagnosis_Measles
	SET	@DateOnsetParameter = @FFP_DateOfOnset_M
ELSE IF	@idfsDiagnosis = @idfsDiagnosis_Rubella
	SET	@DateOnsetParameter = @FFP_DateOfOnset_R

INSERT INTO	#HumanCasesToExport
(	idfHumanCase,
	idfHuman,
	idfCRAddress,
	idfsDiagnosis,
	idfCSObservation,
	idfEpiObservation,
	datDateOnset,
	idfOutbreak
)
SELECT	hc.idfHumanCase,
		h.idfHuman,
		h.idfCurrentResidenceAddress,
		ISNULL(hc.idfsFinalDiagnosis, hc.idfsTentativeDiagnosis),
		hc.idfCSObservation,
		hc.idfEpiObservation,
		COALESCE(	
			CASE
				WHEN	(CAST(SQL_VARIANT_PROPERTY(ap_DateOfOnset.varValue, 'BaseType') AS NVARCHAR) like N'%date%') or
						(CAST(SQL_VARIANT_PROPERTY(ap_DateOfOnset.varValue, 'BaseType') AS NVARCHAR) like N'%char%' AND ISDATE(CAST(ap_DateOfOnset.varValue AS NVARCHAR)) = 1) 
					THEN dbo.fnDateCutTime(CAST(ap_DateOfOnset.varValue AS DATETIME))
					ELSE NULL
			END, hc.datOnSetDate, hc.datFinalDiagnosisDate, hc.datTentativeDiagnosisDate, hc.datNotificationDate, hc.datEnteredDate
			),
		hc.idfOutbreak
FROM tlbHumanCase hc

	INNER JOIN tlbHuman h
	ON hc.idfHuman = h.idfHuman AND  h.intRowStatus = 0	
	OUTER APPLY ( 
		SELECT top 1 
			ap.varValue
		FROM tlbActivityParameters ap
		WHERE	ap.idfObservation = hc.idfCSObservation
			AND	ap.idfsParameter = @DateOnsetParameter
			AND ap.intRowStatus = 0
		ORDER BY ap.idfRow ASC	
	) AS  ap_DateOfOnset

WHERE	
	hc.intRowStatus = 0
	AND 	
	ISNULL(hc.idfsFinalDiagnosis, hc.idfsTentativeDiagnosis) = @idfsDiagnosis 
	AND
	COALESCE(	
		CASE
			WHEN	(CAST(SQL_VARIANT_PROPERTY(ap_DateOfOnset.varValue, 'BaseType') AS NVARCHAR) like N'%date%') or
					(CAST(SQL_VARIANT_PROPERTY(ap_DateOfOnset.varValue, 'BaseType') AS NVARCHAR) like N'%char%' AND ISDATE(CAST(ap_DateOfOnset.varValue AS NVARCHAR)) = 1) 
				THEN dbo.fnDateCutTime(CAST(ap_DateOfOnset.varValue AS DATETIME))
				ELSE NULL
		END, hc.datOnSetDate, hc.datFinalDiagnosisDate, hc.datTentativeDiagnosisDate, hc.datNotificationDate, hc.datEnteredDate
			) >= @StartDate
	
	AND
	COALESCE(	
		CASE
			WHEN	(CAST(SQL_VARIANT_PROPERTY(ap_DateOfOnset.varValue, 'BaseType') AS NVARCHAR) like N'%date%') or
					(CAST(SQL_VARIANT_PROPERTY(ap_DateOfOnset.varValue, 'BaseType') AS NVARCHAR) like N'%char%' AND ISDATE(CAST(ap_DateOfOnset.varValue AS NVARCHAR)) = 1) 
				THEN dbo.fnDateCutTime(CAST(ap_DateOfOnset.varValue AS DATETIME))
				ELSE NULL
		END, hc.datOnSetDate, hc.datFinalDiagnosisDate, hc.datTentativeDiagnosisDate, hc.datNotificationDate, hc.datEnteredDate
			) <= @EndDate   			
		AND hc.idfHumanCase = (SELECT TOP 1 idfHumanCase FROM tlbHumanCase thc WHERE thc.idfCSObservation = hc.idfCSObservation and thc.idfsFinalDiagnosis = @idfsDiagnosis)

INSERT INTO	#FFToExport
(	idfActivityParameters,
	idfsParameter,
	idfObservation,
	idfRow,
	varValue
)
SELECT		ap.idfActivityParameters,
			ap.idfsParameter,
			ap.idfObservation,
			ap.idfRow,
			ap.varValue
FROM		tlbActivityParameters ap
INNER JOIN	#HumanCasesToExport hc_cs
ON			hc_cs.idfCSObservation = ap.idfObservation
WHERE		ap.intRowStatus = 0

INSERT INTO	#FFToExport
(	idfActivityParameters,
	idfsParameter,
	idfObservation,
	idfRow,
	varValue
)
SELECT		ap.idfActivityParameters,
			ap.idfsParameter,
			ap.idfObservation,
			ap.idfRow,
			ap.varValue
FROM		tlbActivityParameters ap
INNER JOIN	#HumanCasesToExport hc_epi
ON			hc_epi.idfEpiObservation = ap.idfObservation
left JOIN	#HumanCasesToExport hc_cs
ON			hc_cs.idfCSObservation = hc_epi.idfEpiObservation
WHERE		ap.intRowStatus = 0
			AND hc_cs.idfHumanCase IS NULL


DECLARE	@FFP_NumberOfReceivedDoses BIGINT = -100
IF	@idfsDiagnosis = @idfsDiagnosis_Measles
	SET	@FFP_NumberOfReceivedDoses = @FFP_NumberOfReceivedDoses_M
ELSE IF	@idfsDiagnosis = @idfsDiagnosis_Rubella
	SET	@FFP_NumberOfReceivedDoses = @FFP_NumberOfReceivedDoses_R

DECLARE	@FFP_DateOfLastVaccination BIGINT = -100
IF	@idfsDiagnosis = @idfsDiagnosis_Measles
	SET	@FFP_DateOfLastVaccination = @FFP_DateOfLastVaccination_M
ELSE IF	@idfsDiagnosis = @idfsDiagnosis_Rubella
	SET	@FFP_DateOfLastVaccination = @FFP_DateOfLastVaccination_R
	
DECLARE	@FFP_Fever BIGINT = -100
IF	@idfsDiagnosis = @idfsDiagnosis_Measles
	SET	@FFP_Fever = @FFP_Fever_M
ELSE IF	@idfsDiagnosis = @idfsDiagnosis_Rubella
	SET	@FFP_Fever = @FFP_Fever_R

DECLARE	@FFP_Cough BIGINT = -100
IF	@idfsDiagnosis = @idfsDiagnosis_Measles
	SET	@FFP_Cough = @FFP_Cough_M
ELSE IF	@idfsDiagnosis = @idfsDiagnosis_Rubella
	SET	@FFP_Cough = @FFP_Cough_R
	
DECLARE	@FFP_Coryza BIGINT = -100
IF	@idfsDiagnosis = @idfsDiagnosis_Measles
	SET	@FFP_Coryza = @FFP_Coryza_M
ELSE IF	@idfsDiagnosis = @idfsDiagnosis_Rubella
	SET	@FFP_Coryza = @FFP_Coryza_R
	
DECLARE	@FFP_Conjunctivitis BIGINT = -100
IF	@idfsDiagnosis = @idfsDiagnosis_Measles
	SET	@FFP_Conjunctivitis = @FFP_Conjunctivitis_M
ELSE IF	@idfsDiagnosis = @idfsDiagnosis_Rubella
	SET	@FFP_Conjunctivitis = @FFP_Conjunctivitis_R
	
DECLARE	@FFP_RashDuration BIGINT = -100
IF	@idfsDiagnosis = @idfsDiagnosis_Measles
	SET	@FFP_RashDuration = @FFP_RashDuration_M
ELSE IF	@idfsDiagnosis = @idfsDiagnosis_Rubella
	SET	@FFP_RashDuration = @FFP_RashDuration_R

DECLARE	@FFP_SourceOfInfection BIGINT = -100
IF	@idfsDiagnosis = @idfsDiagnosis_Measles
	SET	@FFP_SourceOfInfection = @FFP_SourceOfInfection_M
ELSE IF	@idfsDiagnosis = @idfsDiagnosis_Rubella
	SET	@FFP_SourceOfInfection = @FFP_SourceOfInfection_R

DECLARE	@FFP_Complications BIGINT = -100
IF	@idfsDiagnosis = @idfsDiagnosis_Measles
	SET	@FFP_Complications = @FFP_Complications_M
ELSE IF	@idfsDiagnosis = @idfsDiagnosis_Rubella
	SET	@FFP_Complications = @FFP_Complications_R

DECLARE	@FFP_Encephalitis BIGINT = -100
IF	@idfsDiagnosis = @idfsDiagnosis_Measles
	SET	@FFP_Encephalitis = @FFP_Encephalitis_M
ELSE IF	@idfsDiagnosis = @idfsDiagnosis_Rubella
	SET	@FFP_Encephalitis = @FFP_Encephalitis_R

DECLARE	@FFP_Pneumonia BIGINT = -100
IF	@idfsDiagnosis = @idfsDiagnosis_Measles
	SET	@FFP_Pneumonia = @FFP_Pneumonia_M
ELSE IF	@idfsDiagnosis = @idfsDiagnosis_Rubella
	SET	@FFP_Pneumonia = @FFP_Pneumonia_R

DECLARE	@FFP_Diarrhoea BIGINT = -100
IF	@idfsDiagnosis = @idfsDiagnosis_Measles
	SET	@FFP_Diarrhoea = @FFP_Diarrhoea_M

DECLARE	@FFP_Other BIGINT = -100
IF	@idfsDiagnosis = @idfsDiagnosis_Measles
	SET	@FFP_Other = @FFP_Other_M


UPDATE hc
SET	hc.NumberOfReceivedDoses = CAST(ap_NumberOfReceivedDoses.varValue AS NVARCHAR(50)),
	hc.DateOfLastVaccination = 
	CASE
		WHEN CAST(SQL_VARIANT_PROPERTY(ap_DateOfLastVaccination.varValue, 'BaseType') AS NVARCHAR) like N'%date%' or
				(CAST(SQL_VARIANT_PROPERTY(ap_DateOfLastVaccination.varValue, 'BaseType') AS NVARCHAR) like N'%char%' AND ISDATE(CAST(ap_DateOfLastVaccination.varValue AS NVARCHAR)) = 1 )	
			THEN dbo.FN_GBL_DATECUTTIME(CAST(ap_DateOfLastVaccination.varValue AS DATETIME))
		ELSE NULL
	END,
	hc.Fever = 
	CASE
		WHEN SQL_VARIANT_PROPERTY(ap_Fever.varValue, 'BaseType') in ('BIGINT','decimal','float','INT','numeric','real','smallint','tinyint')
			THEN CAST(ap_Fever.varValue AS BIGINT)
		ELSE NULL
	END,
	hc.Cough =
	CASE
		WHEN SQL_VARIANT_PROPERTY(ap_Cough.varValue, 'BaseType') in ('BIGINT','decimal','float','INT','numeric','real','smallint','tinyint')
			THEN CAST(ap_Cough.varValue AS BIGINT)
		ELSE NULL
	END,
	hc.Coryza =
	CASE
		WHEN SQL_VARIANT_PROPERTY(ap_Coryza.varValue, 'BaseType') in ('BIGINT','decimal','float','INT','numeric','real','smallint','tinyint')
			THEN CAST(ap_Coryza.varValue AS BIGINT)
		ELSE NULL
	END,  		
	hc.Conjunctivitis =
	CASE
		WHEN SQL_VARIANT_PROPERTY(ap_Conjunctivitis.varValue, 'BaseType') in ('BIGINT','decimal','float','INT','numeric','real','smallint','tinyint')
			THEN CAST(ap_Conjunctivitis.varValue AS BIGINT)
		ELSE NULL
	END,  
	hc.RashDuration = CAST(ap_RashDuration.varValue AS NVARCHAR(50)),	
	hc.SourceOfInfection =
	CASE
		WHEN SQL_VARIANT_PROPERTY(ap_SourceOfInfection.varValue, 'BaseType') in ('BIGINT','decimal','float','INT','numeric','real','smallint','tinyint')
			THEN CAST(ap_SourceOfInfection.varValue AS BIGINT)
		ELSE NULL
	END,   
	hc.Complications =
	CASE
		WHEN SQL_VARIANT_PROPERTY(ap_Complications.varValue, 'BaseType') in ('BIGINT','decimal','float','INT','numeric','real','smallint','tinyint')
			THEN CAST(ap_Complications.varValue AS BIGINT)
		ELSE NULL
	END,    
	hc.Encephalitis =
	CASE
		WHEN SQL_VARIANT_PROPERTY(ap_Encephalitis.varValue, 'BaseType') in ('BIGINT','decimal','float','INT','numeric','real','smallint','tinyint')
			THEN CAST(ap_Encephalitis.varValue AS BIGINT)
		ELSE NULL
	END,    
	hc.Pneumonia =
	CASE
		WHEN SQL_VARIANT_PROPERTY(ap_Pneumonia.varValue, 'BaseType') in ('BIGINT','decimal','float','INT','numeric','real','smallint','tinyint')
			THEN CAST(ap_Pneumonia.varValue AS BIGINT)
		ELSE NULL
	END,    	
	hc.Diarrhoea =
	CASE
		WHEN SQL_VARIANT_PROPERTY(ap_Diarrhoea.varValue, 'BaseType') in ('BIGINT','decimal','float','INT','numeric','real','smallint','tinyint')
			THEN CAST(ap_Diarrhoea.varValue AS BIGINT)
		ELSE NULL
	END,    
	hc.Other = CAST(ap_Other.varValue AS NVARCHAR(500))	  		  		  		  			

 FROM #HumanCasesToExport hc
			
	OUTER APPLY ( 
		SELECT top 1 
			ap.varValue
		FROM #FFToExport ap
		WHERE	ap.idfObservation = hc.idfEpiObservation
			AND	ap.idfsParameter = @FFP_NumberOfReceivedDoses
			--AND ap.intRowStatus = 0
		ORDER BY ap.idfRow ASC	
	) AS  ap_NumberOfReceivedDoses		
	 			
	OUTER APPLY ( 
		SELECT top 1 
			ap.varValue
		FROM #FFToExport ap
		WHERE	ap.idfObservation = hc.idfEpiObservation
			AND	ap.idfsParameter = @FFP_DateOfLastVaccination
			--AND ap.intRowStatus = 0
		ORDER BY ap.idfRow ASC	
	) AS  ap_DateOfLastVaccination 	
		
	OUTER APPLY ( 
		SELECT top 1 
			ap.varValue
		FROM #FFToExport ap
		WHERE	ap.idfObservation = hc.idfCSObservation
			AND	ap.idfsParameter = @FFP_Fever
			--AND ap.intRowStatus = 0
		ORDER BY ap.idfRow ASC	
	) AS  ap_Fever	
	
		
	OUTER APPLY ( 
		SELECT top 1 
			ap.varValue
		FROM #FFToExport ap
		WHERE	ap.idfObservation = hc.idfCSObservation
			AND	ap.idfsParameter = @FFP_Cough
			--AND ap.intRowStatus = 0
		ORDER BY ap.idfRow ASC	
	) AS  ap_Cough	
	
	OUTER APPLY ( 
		SELECT top 1 
			ap.varValue
		FROM #FFToExport ap
		WHERE	ap.idfObservation = hc.idfCSObservation
			AND	ap.idfsParameter = @FFP_Coryza
			--AND ap.intRowStatus = 0
		ORDER BY ap.idfRow ASC	
	) AS  ap_Coryza
	
	OUTER APPLY ( 
		SELECT top 1 
			ap.varValue
		FROM #FFToExport ap
		WHERE	ap.idfObservation = hc.idfCSObservation
			AND	ap.idfsParameter = @FFP_Conjunctivitis	
			--AND ap.intRowStatus = 0
		ORDER BY ap.idfRow ASC	
	) AS  ap_Conjunctivitis

	OUTER APPLY ( 
		SELECT top 1 
			ap.varValue
		FROM #FFToExport ap
		WHERE	ap.idfObservation = hc.idfCSObservation
			AND	ap.idfsParameter = @FFP_RashDuration	
			--AND ap.intRowStatus = 0
		ORDER BY ap.idfRow ASC	
	) AS  ap_RashDuration
	
	OUTER APPLY ( 
		SELECT top 1 
			ap.varValue
		FROM #FFToExport ap
		WHERE	ap.idfObservation = hc.idfEpiObservation
			AND	ap.idfsParameter = @FFP_SourceOfInfection	
			--AND ap.intRowStatus = 0
		ORDER BY ap.idfRow ASC	
	) AS  ap_SourceOfInfection
	
	OUTER APPLY ( 
		SELECT top 1 
			ap.varValue
		FROM #FFToExport ap
		WHERE	ap.idfObservation = hc.idfCSObservation
			AND	ap.idfsParameter = @FFP_Complications		
			--AND ap.intRowStatus = 0
		ORDER BY ap.idfRow ASC	
	) AS  ap_Complications
	
	OUTER APPLY ( 
		SELECT top 1 
			ap.varValue
		FROM #FFToExport ap
		WHERE	ap.idfObservation = hc.idfCSObservation
			AND	ap.idfsParameter = @FFP_Encephalitis				
			--AND ap.intRowStatus = 0
		ORDER BY ap.idfRow ASC	
	) AS  ap_Encephalitis

	OUTER APPLY ( 
		SELECT top 1 
			ap.varValue
		FROM #FFToExport ap
		WHERE	ap.idfObservation = hc.idfCSObservation
			AND	ap.idfsParameter = @FFP_Pneumonia				
			--AND ap.intRowStatus = 0
		ORDER BY ap.idfRow ASC	
	) AS  ap_Pneumonia
	
	OUTER APPLY ( 
		SELECT top 1 
			ap.varValue
		FROM #FFToExport ap
		WHERE	ap.idfObservation = hc.idfCSObservation
			AND	ap.idfsParameter = @FFP_Diarrhoea						
			--AND ap.intRowStatus = 0
		ORDER BY ap.idfRow ASC	
	) AS  ap_Diarrhoea


	OUTER APPLY ( 
		SELECT top 1 
			ap.varValue
		FROM #FFToExport ap
		WHERE	ap.idfObservation = hc.idfCSObservation
			AND	ap.idfsParameter = @FFP_Other							
			--AND ap.intRowStatus = 0
		ORDER BY ap.idfRow ASC	
	) AS  ap_Other


UPDATE	ct
SET		ct.datConcludedDate = material.datConcludedDate,
		ct.idfsSampleType = material.idfsSampleType,
		ct.datFieldCollectionDate = material.datFieldCollectionDate,
		ct.idfsTestResult = material.idfsTestResult,
		ct.idfsTestStatus = material.idfsTestStatus,
		ct.idfTesting = material.idfTesting
FROM	#HumanCasesToExport ct	
OUTER APPLY	(
	SELECT top 1 
		dbo.fnDateCutTime(tt.datConcludedDate) AS datConcludedDate,
		ISNULL(rm.idfsSampleType, m.idfsSampleType) AS idfsSampleType,
		m.datFieldCollectionDate,
		tt.idfsTestResult,
		tt.idfsTestStatus,
		tt.idfTesting
	FROM tlbMaterial m
		left JOIN tlbTesting tt
			INNER JOIN trtTestTypeForCustomReport ttcr
			ON ttcr.idfsTestName = tt.idfsTestName
			AND ttcr.intRowStatus = 0
			AND ttcr.idfsCustomReportType = @idfsSummaryReportType
		ON tt.idfMaterial = m.idfMaterial
		/*Added 2018-01-22 start*/
		AND tt.idfsDiagnosis = ct.idfsDiagnosis
		/*Added 2018-01-22 END*/
		AND tt.intRowStatus = 0
		AND tt.datConcludedDate IS NOT NULL
		
		left JOIN tlbMaterial rm
		ON rm.idfMaterial = m.idfParentMaterial
		AND rm.intRowStatus = 0						
		
   WHERE m.idfHumanCase = ct.idfHumanCase
			AND m.intRowStatus = 0
   ORDER BY ISNULL(tt.datConcludedDate, '19000101') DESC, m.datFieldCollectionDate DESC
   )	AS material	 

	SELECT
		ct.idfHumanCase AS idfCase,
		CAST(to1.idfOutbreak as varchar(20)) AS strReportID,
		CONCAT(gwm.WHOAreaID,YEAR(@StartDate), hc.strCaseID) AS strCaseID,
		gwm.AreaID AS strAreaID, 
		dbo.fnDateCutTime(ct.datDateOnset) AS datDRash, 
		CASE 
			WHEN h.idfsHumanGender = 10043001 THEN 2
			WHEN h.idfsHumanGender = 10043002 THEN 1
			ELSE 4
		END AS intGenderID, 
		--dbo.fnDateCutTime(h.datDateofBirth) AS datDBirth, 
		CAST(h.datDateofBirth AS DATE) AS datDBirth, 
		CASE
			WHEN	ISNULL(hc.idfsHumanAgeType, -1) = 10042003	-- Years 
					AND (ISNULL(hc.intPatientAge, -1) >= 0 AND ISNULL(hc.intPatientAge, -1) <= 200)
				THEN	hc.intPatientAge
			WHEN	ISNULL(hc.idfsHumanAgeType, -1) = 10042002	-- Months
					AND (ISNULL(hc.intPatientAge, -1) >= 0 AND ISNULL(hc.intPatientAge, -1) <= 60)
				THEN	CAST(hc.intPatientAge / 12 AS INT)
			WHEN	ISNULL(hc.idfsHumanAgeType, -1) = 10042001	-- Days
					AND (ISNULL(hc.intPatientAge, -1) >= 0)
				THEN	0
			ELSE	
				DATEDIFF(YEAR, h.datDateofBirth, ct.datDateOnset) + 
                         CASE 
                           WHEN MONTH(ct.datDateOnset) < MONTH(h.datDateofBirth) THEN -1 
                           WHEN MONTH(ct.datDateOnset) > MONTH(h.datDateofBirth) THEN 0 
                           ELSE 
                             CASE WHEN DAY(ct.datDateOnset) < DAY(h.datDateofBirth) THEN -1 ELSE 0 END 
                         END
		END	 AS intAgeAtRashOnset,     	
		
		ISNULL(CASE WHEN isnumeric(ct.NumberOfReceivedDoses) = 1  AND CAST(ct.NumberOfReceivedDoses AS varchar) NOT in ('.', ',', '-', '+', '$')
					THEN	
						CASE  CAST(ct.NumberOfReceivedDoses AS BIGINT)
							WHEN 9878670000000 THEN 0
							WHEN 9878680000000 THEN 1
							WHEN 9878690000000 THEN 2
							WHEN 9878700000000 THEN 3
							ELSE 9
						END	
					ELSE 9 END
			, 9)	 AS intNumOfVaccines, 
			
		CAST(ct.DateOfLastVaccination AS DATE) AS datDvaccine, 			
		CAST(hc.datNotificationDate AS DATE) AS datDNotification, 
		CAST(hc.datInvestigationStartDate AS DATE) AS datDInvestigation, 
 		
		CASE ct.Fever
			WHEN 25460000000 THEN 1
			WHEN 25640000000 THEN 2
			WHEN 25660000000 THEN 9
			ELSE NULL
		END	 AS intClinFever, 
		
		CASE 
			CASE 
				WHEN ct.Cough = 25460000000 or ct.Coryza = 25460000000 or ct.Conjunctivitis = 25460000000 THEN 25460000000
				WHEN ct.Cough = 25640000000 AND ct.Coryza = 25640000000 AND ct.Conjunctivitis = 25640000000 THEN 25640000000
				ELSE 25660000000
			END		
			WHEN 25460000000 THEN 1
			WHEN 25640000000 THEN 2
			ELSE 9
		END	 AS intClinCCC, 			    			
		CASE WHEN isnumeric(ct.RashDuration) = 1  AND CAST(ct.RashDuration AS varchar) NOT in ('.', ',', '-', '+', '$')
				THEN --CAST(ct.RashDuration AS INT) 
					 CAST(CAST(replace(ct.RashDuration,',','.') AS decimal) AS INT)
				ELSE 2222 END AS intClinRashDuration,
			
		CASE hc.idfsOutcome
			WHEN 10770000000 THEN 1
			WHEN 10760000000 THEN 2
			WHEN 10780000000 THEN 3
			ELSE 3
		END AS intClinOutcome, 
		
		CASE hc.idfsYNHospitalization   
			WHEN 10100001 THEN 1
			WHEN 10100002 THEN 2
			WHEN 10100003 THEN 9
			ELSE NULL
		END AS intClinHospitalization, 
		
		-- GG - FF parameter = 'Source of infection' -- idfsParameter = 9951440000000
		--9879590000000	Imported
		--9879600000000	Import-related
		--9879610000000	Indigenous
		--9879620000000	Unknown
		--Indigenous=Endemic, Imported=Imported, Import-related=Import-related, Unknown = Unknown, Blank = Blank

		CASE ct.SourceOfInfection 
			--GG
			WHEN 9879590000000 THEN 1 --Imported = Imported
			WHEN 9879610000000 THEN 2 --Indigenous = Endemic
			WHEN 9879600000000 THEN 3 -- Import-related=Import-related
			WHEN 9879620000000 THEN 9 --  Unknown = Unknown
			ELSE NULL --Blank = Blank
		END	 AS intSrcInf, 
		
		
		CASE hc.idfsYNRelatedToOutbreak
			WHEN 10100001 THEN 1
			WHEN 10100002 THEN 2
			WHEN 10100003 THEN 9
			ELSE 
				CASE WHEN (to1.strOutbreakID IS NOT NULL) THEN 1
					ELSE 2
				END
		END AS intSrcOutbreakRelated, 
  
		to1.strOutbreakID AS strSrcOutbreakID,
		
		CASE WHEN (to1.strOutbreakID IS NOT NULL) 
		  THEN
		  CASE 
			CASE 
				-- GG
				WHEN ct.Complications = 25460000000 AND ct.idfsDiagnosis = @idfsDiagnosis_Measles THEN 25460000000
				WHEN ct.Complications = 25640000000 AND ct.idfsDiagnosis = @idfsDiagnosis_Measles THEN 25640000000
				WHEN ct.Complications = 25660000000 AND ct.idfsDiagnosis = @idfsDiagnosis_Measles THEN 25660000000
				ELSE 25660000000
			END		
			WHEN 25460000000 THEN 1
			WHEN 25640000000 THEN 2
			WHEN 25660000000 THEN 9
			ELSE NULL
		END	 
		ELSE NULL
		END AS intCompComplications, 		 					
		
		CASE WHEN (to1.strOutbreakID IS NOT NULL) 
		  THEN
		CASE WHEN ct.Complications = 25460000000 /*Yes*/ AND ct.idfsDiagnosis = @idfsDiagnosis_Measles 
			THEN
				CASE ct.Encephalitis 
					WHEN 25460000000 THEN 1 
					WHEN 25640000000 THEN 2 
					WHEN 25660000000 THEN 9 		
					ELSE NULL
				END	 
			ELSE NULL
		END	 
		ELSE NULL
		END AS intCompEncephalitis, 				
	
		CASE WHEN (to1.strOutbreakID IS NOT NULL) 
		  THEN		
		CASE WHEN ct.Complications = 25460000000 /*Yes*/ AND ct.idfsDiagnosis = @idfsDiagnosis_Measles 
			THEN
				CASE ct.Pneumonia 
					WHEN 25460000000 THEN 1 
					WHEN 25640000000 THEN 2 
					WHEN 25660000000 THEN 9 		
					ELSE NULL
				END		 
			ELSE NULL
		END	 
		ELSE NULL
		END AS intCompPneumonia, 				
    
		NULL AS intCompMalnutrition, 
	
		CASE WHEN (to1.strOutbreakID IS NOT NULL) 
		  THEN		
		CASE WHEN ct.Complications = 25460000000 /*Yes*/ AND ct.idfsDiagnosis = @idfsDiagnosis_Measles 
			THEN
				CASE ct.Diarrhoea 
					WHEN 25460000000 THEN 1 
					WHEN 25640000000 THEN 2 
					WHEN 25660000000 THEN 9 		
					ELSE NULL
				END		 
			ELSE NULL
		END	 
		ELSE NULL
		END AS intCompDiarrhoea, 		

		CASE WHEN (to1.strOutbreakID IS NOT NULL) 
		  THEN		
		CASE WHEN ct.Complications = 25460000000 /*Yes*/ AND ct.idfsDiagnosis = @idfsDiagnosis_Measles 
			THEN
				CASE WHEN len(ct.Other) > 0 THEN 1 ELSE 2 END 
			ELSE NULL
		END	 
		ELSE NULL
		END AS intCompOther, 		
            
		CASE 
			WHEN hc.idfsFinalCaseStatus = 370000000  --NOT a CASE
					THEN 0
			WHEN hc.idfsFinalCaseStatus = 350000000 --Confirmed
				AND ct.idfsDiagnosis = @idfsDiagnosis_Measles
				AND hc.blnLabDiagBasis = 1
					THEN 1
			WHEN hc.idfsFinalCaseStatus = 350000000  --Confirmed
				AND ct.idfsDiagnosis = @idfsDiagnosis_Measles
				AND ISNULL(hc.blnLabDiagBasis, 0) = 0
				AND hc.blnEpiDiagBasis = 1
					THEN 2
			--WHEN hc.idfsFinalCaseStatus = 350000000  --Confirmed
			--	AND ISNULL(hc.blnLabDiagBasis, 0) = 0
			--	AND hc.blnClinicalDiagBasis = 1
			--		THEN 3
			WHEN hc.idfsFinalCaseStatus = 360000000 --Probable
				AND ct.idfsDiagnosis = @idfsDiagnosis_Measles
				AND (hc.blnLabDiagBasis = 1 or hc.blnEpiDiagBasis = 1 or hc.blnClinicalDiagBasis = 1)
					THEN 3
			WHEN hc.idfsFinalCaseStatus = 350000000 
				AND ct.idfsDiagnosis = @idfsDiagnosis_Rubella
				AND hc.blnLabDiagBasis = 1
					THEN 6
			WHEN hc.idfsFinalCaseStatus = 350000000 
				AND ct.idfsDiagnosis = @idfsDiagnosis_Rubella
				AND ISNULL(hc.blnLabDiagBasis, 0) = 0
				AND hc.blnEpiDiagBasis = 1
					THEN 7
			WHEN hc.idfsFinalCaseStatus = 360000000 --Probable
				AND ct.idfsDiagnosis = @idfsDiagnosis_Rubella
				AND  (hc.blnLabDiagBasis = 1 or hc.blnEpiDiagBasis = 1 or hc.blnClinicalDiagBasis = 1)
					THEN 8
			WHEN hc.idfsFinalCaseStatus = 380000000	--Suspect
				OR hc.idfsFinalCaseStatus = 12137920000000
				or hc.idfsFinalCaseStatus IS NULL
				or (hc.blnLabDiagBasis IS NULL AND hc.blnEpiDiagBasis IS NULL AND hc.blnClinicalDiagBasis IS NULL)
					THEN NULL
			ELSE NULL
		END intFinalClassification,        
    
    
		CASE 
		   WHEN hc.idfsYNSpecimenCollected = 10100001 THEN ct.datFieldCollectionDate
		   ELSE NULL
		END AS datDSpecimen,       
        
		--Type of sample associated with the test which result IS shown in #29/31. 
		--IF #29/31 IS blank THEN the sample with the latest date of sample collection should be taken. 
		--Blood = 1 Serum, 
		--Blood - serum=1 Serum, 
		--Saliva=2 Saliva/oral fluid, 
		--Swab - Rhinopharyngeal = 3 Nasopharyngeal swab, 
		--Urine=5 Urine, 
		--Blood - anticoagulated whole blood= 6 EDTA whole blood, 
		--in other CASE = 7 Other specimen. 
		--Which sample to send, it shall be defined BY tests (see 29/31) NB: Parent Sample Type should be tranferred to CISID in CASE Sample Derivative was created.
		CASE
			ISNULL(CASE 
			   WHEN hc.idfsYNSpecimenCollected = 10100001 THEN ct.idfsSampleType
			   ELSE NULL
			END, -1)
			--GG
			WHEN 9844440000000 /*Blood*/ THEN 1 --Serum
			WHEN 9844480000000/*Blood - serum*/  THEN 1 --Serum
			WHEN 9845550000000	/*Saliva*/ THEN 2 --Saliva/oral fluid
			WHEN 9845840000000	/*Swab - Rhinopharyngeal*/ THEN 3 --Nasopharyngeal swab
			WHEN 9846060000000	/*Urine*/ THEN 5 --Urine
			WHEN 9844450000000 /*Blood - anticoagulated whole blood*/ THEN 6 --EDTA whole blood
			WHEN -1 THEN NULL
			ELSE 7
		END AS intSpecimen,    

		CASE 
		   WHEN hc.idfsYNSpecimenCollected = 10100001 THEN ct.datConcludedDate
		   ELSE NULL
		END AS datDLabResult,    			            
       
		

		--Test Name: ELISA IgM, Antibody detection
		--The Result of the lastest "ELISA IgM, Antibody detection" 
		--Test Name shall be taken (BY Result Date). 
		--1 Positive = Positive AND Test Status = Final or Amended, 
		--2 Negative= Negative AND Test Status = Final or Amended, 
		--4 Inclonclusive = Cut off AND Test Status = Final or Amended, 
		--0 NOT Tested = IF sample data IS filled in #26/27 but no test data available, 
		--3 In Process = any test result (including blank) for assigned test AND Test Status = In Process or Preliminary      
		CASE
			ISNULL(
					CASE 
					   WHEN hc.idfsYNSpecimenCollected = 10100001 AND ct.idfsDiagnosis = @idfsDiagnosis_Measles AND ct.idfsTestStatus in (10001001, 10001006) --Final or Amended
							THEN ct.idfsTestResult
					   WHEN hc.idfsYNSpecimenCollected = 10100001 AND ct.idfsDiagnosis = @idfsDiagnosis_Measles AND ct.idfsTestStatus in( 10001003, 10001004)	--In Process or Preliminary   
							THEN 3
					   WHEN ct.idfsDiagnosis = @idfsDiagnosis_Measles AND ct.idfTesting IS NULL AND ct.idfsSampleType IS NOT NULL
							THEN 0
					   ELSE NULL
					END, -1)
			--GG
			WHEN 9848880000000 THEN 4--Indeterminate
			WHEN 9848980000000 THEN 2--Negative
			WHEN 9849050000000 THEN 1--Positive
			WHEN 3			   THEN 3--In Process
			WHEN 0			   THEN 0--Not Tested
			WHEN -1 THEN NULL
			ELSE NULL
		END AS intMeaslesIgm,    
		
		CASE
			ISNULL(
					CASE 
					   WHEN hc.idfsYNSpecimenCollected = 10100001 AND ct.idfsDiagnosis = @idfsDiagnosis_Measles AND ct.idfsTestStatus in (10001001, 10001006) --Final or Amended
							THEN ct.idfsTestResult
					   WHEN hc.idfsYNSpecimenCollected = 10100001 AND ct.idfsDiagnosis = @idfsDiagnosis_Measles AND ct.idfsTestStatus in( 10001003, 10001004)	--In Process or Preliminary   
							THEN 3
					   WHEN ct.idfsDiagnosis = @idfsDiagnosis_Measles AND ct.idfTesting IS NULL AND ct.idfsSampleType IS NOT NULL
							THEN 0
					   ELSE NULL
					END, -1)
			--GG
			--WHEN 9848880000000 THEN 4--Indeterminate
			WHEN 9848980000000 THEN 2--Negative
			WHEN 9849050000000 THEN 1--Positive
			WHEN 3			   THEN 3--In Process
			WHEN 0			   THEN 0--Not Tested
			WHEN -1 THEN NULL
			ELSE NULL
		END AS intMeaslesVirusDetection,
		
		CASE
			ISNULL(
				CASE 
					   WHEN hc.idfsYNSpecimenCollected = 10100001 AND ct.idfsDiagnosis = @idfsDiagnosis_Rubella AND ct.idfsTestStatus  in (10001001, 10001006) --Final or Amended
							THEN ct.idfsTestResult
					   WHEN hc.idfsYNSpecimenCollected = 10100001 AND ct.idfsDiagnosis = @idfsDiagnosis_Rubella AND ct.idfsTestStatus in( 10001003, 10001004)	--In Process or Preliminary   
							THEN 3
					   WHEN ct.idfsDiagnosis = @idfsDiagnosis_Rubella AND ct.idfTesting IS NULL	 AND ct.idfsSampleType IS NOT NULL
							THEN 0
					   ELSE NULL
			END, -1)
			WHEN 9848880000000 THEN 4--Indeterminate
			WHEN 9848980000000 THEN 2--Negative
			WHEN 9849050000000 THEN 1--Positive
			WHEN 3			   THEN 3--In Process
			WHEN 0			   THEN 0--Tested
			WHEN -1 THEN NULL
			ELSE NULL
		END AS intRubellaIgm,  
		NULL AS intRubellaVirusDetection,
		hc.strSummaryNotes AS strComments,
		CASE ct.SourceOfInfection 
			--GG
			WHEN 9879590000000 THEN 'GE' --Imported = Imported
			ELSE '' --Blank = Blank
		END strImportationCountry,
		CASE 
			WHEN CHARINDEX('Measles',NonNotifiableDiagnosisRef.[name]) > 0
					THEN 1
			WHEN CHARINDEX('Rubella',NonNotifiableDiagnosisRef.[name]) > 0
					THEN 2
			ELSE 3
		END intInitialDiagnosis
 			      			
 FROM	#HumanCasesToExport ct
	INNER JOIN tlbHumanCase hc
	ON hc.idfHumanCase = ct.idfHumanCase

	INNER JOIN tlbHuman h
	ON h.idfHuman = ct.idfHuman

	INNER JOIN	tlbGeoLocation gl
	ON gl.idfGeoLocation = ct.idfCRAddress

	left JOIN tlbOutbreak to1
	ON to1.idfOutbreak = hc.idfOutbreak
	AND to1.intRowStatus = 0   

	LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000149) AS NonNotifiableDiagnosisRef
			ON NonNotifiableDiagnosisRef.idfsReference = hc.idfsNonNotifiableDiagnosis

	INNER JOIN gisWHOMap gwm
			ON gwm.idfsLocation = ISNULL(gl.idfsRayon, gl.idfsRegion)
ORDER BY ct.datDateOnset, hc.strCaseID


--INSERT INTO	#ResultTable
-- (	
--	  idfCase
--	, strCaseID	
--	, intAreaID	
--	, datDRash	
--	, intGenderID
--	, datDBirth	
--	, intAgeAtRashOnset	
--	, intNumOfVaccines	
--	, datDvaccine	
--	, datDNotification	
--	, datDInvestigation	
--	, intClinFever		
--	, intClinCCC	
--	, intClinRashDuration	
--	, intClinOutcome		
--	, intClinHospitalization	
--	, intSrcInf				
--	, intSrcOutbreakRelated		
--	, strSrcOutbreakID		
--	, intCompComplications	
--	, intCompEncephalitis	
--	, intCompPneumonia		
--	, intCompMalnutrition	
--	, intCompDiarrhoea		
--	, intCompOther		
--	, intFinalClassification
--	, datDSpecimen			
--	, intSpecimen			
--	, datDLabResult			
--	, intMeaslesIgm			
--	, intMeaslesVirusDetection	
--	, intRubellaIgm		
--	, intRubellaVirusDetection		
--	, strCommentsEpi			
--)
--SELECT 
--	idfHumanCase
--	, strCaseID	
--	, intAreaID	
--	, datDRash	
--	, intGenderID
--	, datDBirth	
--	, intAgeAtRashOnset	
--	, intNumOfVaccines	
--	, datDvaccine	
--	, datDNotification	
--	, datDInvestigation	
--	, intClinFever		
--	, intClinCCC	
--	, intClinRashDuration	
--	, intClinOutcome		
--	, intClinHospitalization	
--	, intSrcInf				
--	, intSrcOutbreakRelated		
--	, strSrcOutbreakID		
--	, intCompComplications	
--	, intCompEncephalitis	
--	, intCompPneumonia		
--	, intCompMalnutrition	
--	, intCompDiarrhoea		
--	, intCompOther		
--	, intFinalClassification
--	, datDSpecimen			
--	, intSpecimen			
--	, datDLabResult			
--	, intMeaslesIgm			
--	, intMeaslesVirusDetection	
--	, intRubellaIgm				
--	, intRubellaVirusDetection
--	, strCommentsEpi	 


--FROM hc_table
 


--SELECT * FROM #ResultTable
--ORDER BY datDRash, strCaseID

-- Drop temporary tables
IF Object_ID('tempdb..#HumanCasesToExport') IS NOT NULL
BEGIN
SET	@cmd = N'drop TABLE #HumanCasesToExport'
EXEC sp_executesql @cmd
END

IF Object_ID('tempdb..#ResultTable') IS NOT NULL
BEGIN
SET	@cmd = N'drop TABLE #ResultTable'
EXEC sp_executesql @cmd
END

END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_ACCESS_RULE_SET]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_ACCESS_RULE_SET
--
-- Description:	Inserts or updates access rules for configurable site filtration.
--                      
-- Revision History:
-- Name            Date       Change Detail
-- --------------- ---------- -------------------------------------------------------------------
-- Stephen Long    11/11/2020 Initial release.
-- Stephen Long    11/23/2020 Correction on USSP_ADMIN_ACCESS_RULE_ACTOR_SET call.
-- Stephen Long    11/25/2020 Added permission indicator parameters and insert/updates.
-- Stephen Long    12/18/2020 Added bordering area rule indicator.
-- Stephen Long    12/27/2020 Added reciprocal rule indicator.
-- Stephen Long    03/18/2021 Added default rule and administrative level type ID parameters.
-- Stephen Long    06/17/2021 Changed to key ID and key name for API save response model.
-- Stephen Long    01/09/2022 Added create permission indicator.
-- Stephen Long    03/16/2022 Changed row action from char to int.
-- Stephen Long    03/18/2022 Changed size of access rule name from 200 to max.
-- Stephen Long    07/15/2022 Comment out access rule name field; need to add base reference 
--                            logic for the name.
-- Stephen Long    12/16/2022 Temp fix to call of USSP_ADMIN_ACCESS_RULE_ACTOR_SET.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_ACCESS_RULE_SET] (
	@AccessRuleID BIGINT = NULL
	,@AccessRuleName NVARCHAR(MAX)
	,@BorderingAreaRuleIndicator BIT = 0
	,@DefaultRuleIndicator BIT = 0
	,@ReciprocalRuleIndicator BIT = 0
	,@GrantingActorSiteGroupID BIGINT = NULL
	,@GrantingActorSiteID BIGINT = NULL
	,@AccessToPersonalDataPermissionIndicator BIT = 0
	,@AccessToGenderAndAgeDataPermissionIndicator BIT = 0
	,@CreatePermissionIndicator BIT = 0
	,@DeletePermissionIndicator BIT = 0
	,@ReadPermissionIndicator BIT = 0
	,@WritePermissionIndicator BIT = 0
	,@AdministrativeLevelTypeID BIGINT = NULL
	,@RowStatus INT = 0
	,@ReceivingActors NVARCHAR(MAX) = NULL
	)
AS
BEGIN
	SET NOCOUNT ON;

	BEGIN TRY
		DECLARE @ReturnCode INT = 0;
		DECLARE @ReturnMessage NVARCHAR(MAX) = 'SUCCESS';
		DECLARE @RowAction CHAR = NULL
			,@RowID BIGINT = NULL
			,@AccessRuleActorID BIGINT = NULL
			,@GrantingActorIndicator BIT = NULL
			,@ActorSiteGroupID BIGINT = NULL
			,@ActorSiteID BIGINT = NULL
			,@ActorEmployeeGroupID BIGINT = NULL
			,@ActorUserID BIGINT = NULL;
			DECLARE @SuppressSelect TABLE (
	ReturnCode INT
	,ReturnMessage VARCHAR(200)
	);
		DECLARE @ActorsTemp TABLE (
			AccessRuleActorID BIGINT NOT NULL
			,GrantingActorIndicator BIT NOT NULL
			,ActorSiteGroupID BIGINT NULL
			,ActorSiteID BIGINT NULL
			,ActorEmployeeGroupID BIGINT NULL
			,ActorUserID BIGINT NULL
			,RowStatus INT NOT NULL
			,RowAction INT NULL
			);

		BEGIN TRANSACTION;

		INSERT INTO @ActorsTemp
		SELECT *
		FROM OPENJSON(@ReceivingActors) WITH (
				AccessRuleActorID BIGINT
				,GrantingActorIndicator BIT
				,ActorSiteGroupID BIGINT
				,ActorSiteID BIGINT
				,ActorEmployeeGroupID BIGINT
				,ActorUserID BIGINT
				,RowStatus INT
				,RowAction INT
				);

		IF NOT EXISTS (
				SELECT *
				FROM dbo.AccessRule
				WHERE AccessRuleID = @AccessRuleID
					AND intRowStatus = 0
				)
		BEGIN
			INSERT INTO @SuppressSelect
			EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'AccessRule'
				,@AccessRuleID OUTPUT;

			INSERT INTO dbo.AccessRule (
				AccessRuleID
				--,AccessRuleName
				,DefaultRuleIndicator
				,BorderingAreaRuleIndicator
				,ReciprocalRuleIndicator
				,GrantingActorSiteGroupID
				,GrantingActorSiteID
				,ReadPermissionIndicator
				,AccessToPersonalDataPermissionIndicator
				,AccessToGenderAndAgeDataPermissionIndicator
				,CreatePermissionIndicator
				,WritePermissionIndicator
				,DeletePermissionIndicator
				,AdministrativeLevelTypeID
				,intRowStatus
				,AuditCreateDTM
				)
			VALUES (
				@AccessRuleID
				--,@AccessRuleName
				,@DefaultRuleIndicator
				,@BorderingAreaRuleIndicator
				,@ReciprocalRuleIndicator
				,@GrantingActorSiteGroupID
				,@GrantingActorSiteID
				,@ReadPermissionIndicator
				,@AccessToPersonalDataPermissionIndicator
				,@AccessToGenderAndAgeDataPermissionIndicator
				,@CreatePermissionIndicator 
				,@WritePermissionIndicator
				,@DeletePermissionIndicator
				,@AdministrativeLevelTypeID
				,@RowStatus
				,GETDATE()
				);
		END
		ELSE
		BEGIN
			UPDATE dbo.AccessRule
			SET --AccessRuleName = @AccessRuleName
				DefaultRuleIndicator = @DefaultRuleIndicator
				,BorderingAreaRuleIndicator = @BorderingAreaRuleIndicator
				,@ReciprocalRuleIndicator = @ReciprocalRuleIndicator
				,GrantingActorSiteGroupID = @GrantingActorSiteGroupID
				,GrantingActorSiteID = @GrantingActorSiteID
				,ReadPermissionIndicator = @ReadPermissionIndicator
				,AccessToPersonalDataPermissionIndicator = @AccessToPersonalDataPermissionIndicator
				,AccessToGenderAndAgeDataPermissionIndicator = @AccessToGenderAndAgeDataPermissionIndicator
				,CreatePermissionIndicator = @CreatePermissionIndicator
				,WritePermissionIndicator = @WritePermissionIndicator
				,DeletePermissionIndicator = @DeletePermissionIndicator
				,AdministrativeLevelTypeID = @AdministrativeLevelTypeID
				,intRowStatus = @RowStatus
			WHERE AccessRuleID = @AccessRuleID;
		END;

		WHILE EXISTS (
				SELECT *
				FROM @ActorsTemp
				)
		BEGIN
			SELECT TOP 1 @RowID = AccessRuleActorID
				,@AccessRuleActorID = AccessRuleActorID
				,@GrantingActorIndicator = GrantingActorIndicator
				,@ActorSiteGroupID = ActorSiteGroupID
				,@ActorSiteID = ActorSiteID
				,@ActorEmployeeGroupID = ActorEmployeeGroupID
				,@ActorUserID = ActorUserID
				,@RowStatus = RowStatus
				,@RowAction = RowAction
			FROM @ActorsTemp;

			INSERT INTO @SuppressSelect
			EXECUTE dbo.USSP_ADMIN_ACCESS_RULE_ACTOR_SET @AccessRuleActorID OUTPUT
				,@AccessRuleID
				,@GrantingActorIndicator
				,@ActorSiteGroupID
				,@ActorSiteID
				,@ActorEmployeeGroupID
				,@ActorUserID
				,@RowStatus
				,@RowAction,
				'System'; -- TODO - add audit user name to parameters.  Temp fix so will still save.

			DELETE
			FROM @ActorsTemp
			WHERE AccessRuleActorID = @RowID;
		END;

		IF @@TRANCOUNT > 0
			COMMIT TRANSACTION;

		SELECT @ReturnCode ReturnCode
			,@ReturnMessage ReturnMessage
			,@AccessRuleID KeyId
			,'AccessRuleID' KeyIdName;
	END TRY

	BEGIN CATCH
		IF @@Trancount > 0
			ROLLBACK TRANSACTION;

		SET @ReturnCode = ERROR_NUMBER();
		SET @ReturnMessage = ERROR_MESSAGE();

		SELECT @ReturnCode ReturnCode
			,@ReturnMessage ReturnMessage
			,@AccessRuleID KeyId
			,'AccessRuleID' KeyIdName;
		THROW;
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_SITE_SET]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_SITE_SET
--
-- Description:	Inserts or updates an EIDSS site.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     02/14/2022 Initial release.
-- Stephen Long     03/14/2022 Added additional columns to suppress select for employee group set.
-- Stephen Long     05/17/2022 Added insert for a new organization association to a site.
-- Stephen Long     07/15/2022 Comment out access rule name field; need to add base reference 
--                             logic for the name.
-- Stephen Long     12/15/2022 Added audit user name to call of USSP_ADMIN_ACCESS_RULE_ACTOR_SET.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_SITE_SET]
(
    @LanguageID NVARCHAR(50),
    @SiteID BIGINT = NULL,
    @CustomizationPackageID BIGINT = NULL,
    @EIDSSSiteID NVARCHAR(36) = NULL,
    @ParentSiteID BIGINT = NULL, 
    @SiteTypeID BIGINT = NULL,
    @SiteName NVARCHAR(200) = NULL,
    @SiteOrganizationID BIGINT = NULL,
    @HASCSiteID NVARCHAR(50) = NULL,
    @RowStatus INT,
    @Permissions NVARCHAR(MAX) = NULL,
    @Organizations NVARCHAR(MAX) = NULL,
    @UserName NVARCHAR(200)
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        DECLARE @ReturnCode INT = 0,
                @ReturnMessage NVARCHAR(MAX) = 'SUCCESS';
        DECLARE @RowAction CHAR = NULL,
                @RowID BIGINT = NULL,
                @AccessRuleActorID BIGINT = NULL,
                @AccessRuleID BIGINT = NULL,
                @GrantingActorIndicator BIT = NULL,
                @ExternalActorIndicator BIT = NULL,
                @ActorName NVARCHAR(200) = NULL,
                @ActorDefaultName NVARCHAR(200) = NULL,
                @ActorDescription NVARCHAR(200) = NULL,
                @ActorSiteGroupID BIGINT = NULL,
                @ActorSiteID BIGINT = NULL,
                @ActorEmployeeGroupID BIGINT = NULL,
                @ActorUserID BIGINT = NULL,
                @AccessToGenderAndAgeDataPermissionIndicator BIT = 0,
                @AccessToPersonalDataPermissionIndicator BIT = 0,
                @CreatePermissionIndicator BIT = 0,
                @DeletePermissionIndicator BIT = 0,
                @ReadPermissionIndicator BIT = 0,
                @WritePermissionIndicator BIT = 0,
                @OrganizationID BIGINT = NULL;
        DECLARE @SuppressSelect TABLE
        (
            ReturnCode INT,
            ReturnMessage NVARCHAR(MAX),
            EmployeeGroupID BIGINT NULL,
            EmployeeGroupNameID BIGINT NULL 
        );
        DECLARE @ActorsTemp TABLE
        (
            AccessRuleActorID BIGINT NOT NULL,
            AccessRuleID BIGINT NULL,
            GrantingActorIndicator BIT NOT NULL,
            ExternalActorIndicator BIT NULL, 
            ActorName NVARCHAR(200) NOT NULL,
            ActorDefaultName NVARCHAR(200) NULL,
            ActorDescription NVARCHAR(200) NULL, 
            ActorSiteGroupID BIGINT NULL,
            ActorSiteID BIGINT NULL,
            ActorEmployeeGroupID BIGINT NULL,
            ActorUserID BIGINT NULL,
            AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
            AccessToPersonalDataPermissionIndicator BIT NOT NULL,
            CreatePermissionIndicator BIT NOT NULL,
            DeletePermissionIndicator BIT NOT NULL,
            ReadPermissionIndicator BIT NOT NULL,
            WritePermissionIndicator BIT NOT NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @OrganizationsTemp TABLE
        (
            OrganizationID BIGINT NOT NULL,
            RowAction INT NOT NULL
        );

        BEGIN TRANSACTION;

        INSERT INTO @ActorsTemp
        SELECT *
        FROM
            OPENJSON(@Permissions)
            WITH
            (
                AccessRuleActorID BIGINT,
                AccessRuleID BIGINT,
                GrantingActorIndicator BIT,
                ExternalActorIndicator BIT,
                ActorName NVARCHAR(200),
                ActorDefaultName NVARCHAR(200),
                ActorDescription NVARCHAR(200),
                ActorSiteGroupID BIGINT,
                ActorSiteID BIGINT,
                ActorEmployeeGroupID BIGINT,
                ActorUserID BIGINT,
                AccessToGenderAndAgeDataPermissionIndicator BIT,
                AccessToPersonalDataPermissionIndicator BIT,
                CreatePermissionIndicator BIT,
                DeletePermissionIndicator BIT,
                ReadPermissionIndicator BIT,
                WritePermissionIndicator BIT,
                RowStatus INT,
                RowAction INT
            );

        INSERT INTO @OrganizationsTemp
        SELECT *
        FROM
            OPENJSON(@Organizations)
            WITH
            (
                OrganizationID BIGINT,
                RowAction INT
            );

        IF (
               ISNULL(@EIDSSSiteID, N'') <> N''
               AND EXISTS
        (
            SELECT strSiteID
            FROM dbo.tstSite
            WHERE strSiteID = @EIDSSSiteID
        )
               AND @SiteID IS NULL
           )
        BEGIN
            SELECT @ReturnMessage = 'SITE ID DOES EXIST';

            SELECT @ReturnCode = 1;
        END

        IF @ReturnCode = 0
           AND (
                   ISNULL(@HASCSiteID, N'') <> N''
                   AND EXISTS
        (
            SELECT strHASCsiteID
            FROM dbo.tstSite
            WHERE strHASCsiteID = @HASCSiteID
        )
                   AND @SiteID IS NULL
               )
        BEGIN
            SELECT @ReturnMessage = 'HASC SITE ID DOES EXIST';

            SELECT @ReturnCode = 2;
        END

        IF @ReturnCode = 0
        BEGIN
            IF NOT EXISTS
            (
                SELECT *
                FROM dbo.tstSite
                WHERE idfsSite = @SiteID
                      AND intRowStatus = 0
            )
            BEGIN
                INSERT INTO @SuppressSelect
                EXECUTE dbo.USP_GBL_NEXTKEYID_GET @tableName = N'tstSite',
                                                  @idfsKey = @SiteID OUTPUT;

                IF @CustomizationPackageID IS NULL
                BEGIN
                    SET @CustomizationPackageID = dbo.FN_GBL_CustomizationPackage_GET();
                END

                INSERT INTO dbo.tstSite
                (
                    idfsSite,
                    idfsParentSite,
                    idfsSiteType,
                    idfCustomizationPackage,
                    idfOffice,
                    strSiteName,
                    strHASCsiteID,
                    strSiteID,
                    blnIsWEB,
                    intRowStatus,
                    SourceSystemNameID,
                    SourceSystemKeyValue,
                    AuditCreateUser
                )
                VALUES
                (@SiteID,
                 @ParentSiteID,
                 @SiteTypeID,
                 @CustomizationPackageID,
                 @SiteOrganizationID,
                 @SiteName,
                 @HASCSiteID,
                 @EIDSSSiteID,
                 0  ,
                 0  ,
                 10519001,
                 '[{"idfsSite":' + CAST(@SiteID AS NVARCHAR(300)) + '}]',
                 @UserName
                );
            END
            ELSE
            BEGIN
                UPDATE dbo.tstSite
                SET idfsSiteType = @SiteTypeID,
                    idfsParentSite = @ParentSiteID,
                    idfCustomizationPackage = @CustomizationPackageID,
                    idfOffice = @SiteOrganizationID,
                    strSiteName = @SiteName,
                    strHASCsiteID = @HASCSiteID,
                    strSiteID = @SiteID,
                    intRowStatus = @RowStatus,
                    AuditUpdateUser = @UserName,
                    AuditUpdateDTM = GETDATE()
                WHERE idfsSite = @SiteID;
            END;

            WHILE EXISTS (SELECT * FROM @ActorsTemp)
            BEGIN
                SELECT TOP 1
                    @RowID = AccessRuleActorID,
                    @AccessRuleActorID = AccessRuleActorID,
                    @AccessRuleID = AccessRuleID,
                    @GrantingActorIndicator = GrantingActorIndicator,
                    @ExternalActorIndicator = ExternalActorIndicator,
                    @ActorName = ActorName,
                    @ActorDefaultName = ActorDefaultName,
                    @ActorDescription = ActorDescription, 
                    @ActorSiteGroupID = ActorSiteGroupID,
                    @ActorSiteID = ActorSiteID,
                    @ActorEmployeeGroupID = ActorEmployeeGroupID,
                    @ActorUserID = ActorUserID,
                    @AccessToGenderAndAgeDataPermissionIndicator = AccessToGenderAndAgeDataPermissionIndicator,
                    @AccessToPersonalDataPermissionIndicator = AccessToPersonalDataPermissionIndicator,
                    @CreatePermissionIndicator = CreatePermissionIndicator, 
                    @ReadPermissionIndicator = ReadPermissionIndicator,
                    @DeletePermissionIndicator = DeletePermissionIndicator,
                    @WritePermissionIndicator = WritePermissionIndicator,
                    @RowStatus = RowStatus,
                    @RowAction = RowAction
                FROM @ActorsTemp;

                IF @ExternalActorIndicator = 0
                BEGIN
                    INSERT INTO @SuppressSelect
                    EXEC dbo.USP_ADMIN_EMPLOYEEGROUP_SET @ActorEmployeeGroupID, @SiteID, @ActorDefaultName, @ActorName, @ActorDescription, @LanguageID, NULL;
                END
                ELSE
                BEGIN
                IF NOT EXISTS
                (
                    SELECT *
                    FROM dbo.AccessRule
                    WHERE AccessRuleID = @AccessRuleID
                          AND intRowStatus = 0
                )
                BEGIN
                    INSERT INTO @SuppressSelect
                    EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'AccessRule', @AccessRuleID OUTPUT;

                    INSERT INTO dbo.AccessRule
                    (
                        AccessRuleID,
                        --AccessRuleName,
                        DefaultRuleIndicator,
                        BorderingAreaRuleIndicator,
                        ReciprocalRuleIndicator,
                        GrantingActorSiteGroupID,
                        GrantingActorSiteID,
                        ReadPermissionIndicator,
                        AccessToPersonalDataPermissionIndicator,
                        AccessToGenderAndAgeDataPermissionIndicator,
                        CreatePermissionIndicator,
                        WritePermissionIndicator,
                        DeletePermissionIndicator,
                        AdministrativeLevelTypeID,
                        intRowStatus,
                        SourceSystemNameID,
                        SourceSystemKeyValue,
                        AuditCreateDTM
                    )
                    VALUES
                    (@AccessRuleID,
                     --@SiteName + ' - ' + @ActorName,
                     0  ,
                     0  ,
                     0  ,
                     NULL,
                     @SiteID,
                     @ReadPermissionIndicator,
                     @AccessToPersonalDataPermissionIndicator,
                     @AccessToGenderAndAgeDataPermissionIndicator,
                     @CreatePermissionIndicator,
                     @WritePermissionIndicator,
                     @DeletePermissionIndicator,
                     NULL,
                     @RowStatus,
                     10519001,
                     '[{"AccessRuleID":' + CAST(@AccessRuleID AS NVARCHAR(300)) + '}]',
                     GETDATE()
                    );
                END
                ELSE
                BEGIN
                    UPDATE dbo.AccessRule
                    SET --AccessRuleName = @SiteName + ' - ' + @ActorName,
                        DefaultRuleIndicator = 0,
                        BorderingAreaRuleIndicator = 0,
                        ReciprocalRuleIndicator = 0,
                        GrantingActorSiteGroupID = NULL,
                        GrantingActorSiteID = @SiteID,
                        ReadPermissionIndicator = @ReadPermissionIndicator,
                        AccessToPersonalDataPermissionIndicator = @AccessToPersonalDataPermissionIndicator,
                        AccessToGenderAndAgeDataPermissionIndicator = @AccessToGenderAndAgeDataPermissionIndicator,
                        CreatePermissionIndicator = @CreatePermissionIndicator,
                        WritePermissionIndicator = @WritePermissionIndicator,
                        DeletePermissionIndicator = @DeletePermissionIndicator,
                        AdministrativeLevelTypeID = NULL,
                        intRowStatus = @RowStatus
                    WHERE AccessRuleID = @AccessRuleID;
                END;

                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_ADMIN_ACCESS_RULE_ACTOR_SET @AccessRuleActorID OUTPUT,
                                                             @AccessRuleID,
                                                             @GrantingActorIndicator,
                                                             @ActorSiteGroupID,
                                                             @SiteID,
                                                             @ActorEmployeeGroupID,
                                                             @ActorUserID,
                                                             @RowStatus,
                                                             @RowAction,
                                                             @UserName;
                END;

                DELETE FROM @ActorsTemp
                WHERE AccessRuleActorID = @RowID;
            END;

            WHILE EXISTS (SELECT * FROM @OrganizationsTemp)
            BEGIN
                SELECT TOP 1
                    @RowID = OrganizationID,
                    @OrganizationID = OrganizationID,
                    @RowAction = RowAction
                FROM @OrganizationsTemp;

                IF @RowAction = 1 -- Insert
                   OR @RowAction = 2 -- Update
                BEGIN
                    UPDATE dbo.tlbOffice
                    SET idfsSite = @SiteID,
                        AuditUpdateDTM = GETDATE(),
                        AuditUpdateUser = @UserName
                    WHERE idfOffice = @OrganizationID;
                END
                ELSE
                BEGIN
                    UPDATE dbo.tlbOffice
                    SET idfsSite = NULL,
                        AuditUpdateDTM = GETDATE(),
                        AuditUpdateUser = @UserName
                    WHERE idfOffice = @OrganizationID;
                END;

                DELETE FROM @OrganizationsTemp
                WHERE @OrganizationID = @RowID;
            END
        END

        IF @@TRANCOUNT > 0
            COMMIT;

        SELECT @ReturnCode ReturnCode,
               @ReturnMessage ReturnMessage,
               @SiteID KeyId,
               'SiteID' KeyIdName,
               @CustomizationPackageID AdditionalKeyId,
               'CustomizationPackageID' AdditionalKeyName;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK;

        THROW;
    END CATCH
END
GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_AccessRule_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_AccessRule_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_HUM_REP_WHOEXPORT]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_HUM_REP_WHOEXPORT]';


GO
PRINT N'Update complete.';


GO
