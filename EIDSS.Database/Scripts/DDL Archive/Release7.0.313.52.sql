/*
Deployment script for EIDSS7_GG

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO

USE [$(DatabaseName)];


GO

PRINT N'Altering Trigger [dbo].[TR_gisLocation_UpdateDenormalizedHierarchy]...';


GO

-- =============================================
-- Author:		Steven Verner
-- Create date: 1/4/2021
-- Description:	Rebuilds gisLocationDenormalized when:
	-- 1.  When a new location is inserted.
	-- 2.  When a location is re-parented (moved)
	-- 3.  When the location is deleted (intRowStatus = 1)
-- History:
--	Date		Developer			Comments
--	03/17/2022	Steven Verner		Fixed the issue where the incorrect level type was specified.
--  10/27/2022  Mani Govindarajan   LevelType - to  ISNULL(lt.strTextString,[level]) - Temp Fix
--  10/31/2002 Mani Govindarajan    Update the idfsLocation based on location Node and Node.ToString(), Updated the Final Insert-Selct Condition.
-- =============================================
ALTER TRIGGER [dbo].[TR_gisLocation_UpdateDenormalizedHierarchy]
   ON  [dbo].[gisLocation] 
   AFTER INSERT,DELETE,UPDATE
AS 
BEGIN
	SET NOCOUNT ON;

		DECLARE 
			@current INT, 
			@max INT, 
			@languageId BIGINT, 
			@hi HIERARCHYID ,
			@hiString varchar(255);


		DECLARE @t TABLE(
			L1ID BIGINT, L2ID BIGINT, L3ID BIGINT, L4ID BIGINT, L5ID BIGINT, L6ID BIGINT, L7ID BIGINT,
			L1NAME NVARCHAR(255),L2NAME NVARCHAR(255),L3NAME NVARCHAR(255),L4NAME NVARCHAR(255),L5NAME NVARCHAR(255),L6NAME NVARCHAR(255),L7NAME NVARCHAR(255),
			Node HIERARCHYID, 
			[Level] INT,
			idfsLocation BIGINT,
			LanguageId BIGINT )
		
		DECLARE @Languages TABLE(id INT IDENTITY, idfsLanguage BIGINT)
		INSERT INTO @Languages(idfsLanguage)
		SELECT idfsLanguage
		FROM dbo.gisLocationDenormalized ld
		GROUP BY idfsLanguage 
		
		DECLARE @idfsLocation BIGINT = NULL,
			@newParent HIERARCHYID,
			@oldParent HIERARCHYID,
			@newDeleted BIT,
			@oldDeleted BIT

			-- The following use cases must be captured:
			-- 1.  When a new location is inserted.
			-- 2.  When a location is re-parented (moved)
			-- 3.  When the location is deleted (intRowStatus = 1)
			-- 4.  When the location name changes...  (This use case cannot be captured here; it must be captured on the trtBaseReference table trigger...

	IF EXISTS(SELECT * FROM inserted) AND EXISTS (SELECT * FROM deleted) -- This is an update
	BEGIN

		--	====================================================
		--  Test to see if the location moved...
		--	====================================================
		SELECT 
		 @idfsLocation = idfsLocation
		,@newDeleted = CASE WHEN intRowStatus=1 THEN 1 ELSE 0 END
		,@newParent = NODE.GetAncestor(1)
		FROM Inserted 

		SELECT @oldDeleted = intRowStatus,  @oldParent = Node.GetAncestor(1) 
		FROM DELETED

		-- We always remove all references of the location in the gislocationDenormalized table,
		-- then generate a new entry...
		-- This handles both when a record was deleted (intRowStatus=1) and the need to remove the existing recordsprior to generating a new one for reparenting...

		-- When the location has moved or the record is reactivated (intRowStatus = 0)...
		IF(@newParent != @oldParent) 
		BEGIN 
			DELETE FROM gisLocationDenormalized WHERE idfsLocation = @idfsLocation
			GOTO GenerateNewReference
		END ELSE IF( @newDeleted = 1 )
			DELETE FROM gisLocationDenormalized WHERE idfsLocation = @idfsLocation

		ELSE IF(@oldDeleted =1 and @newDeleted = 0 )
			BEGIN
				DELETE FROM gisLocationDenormalized WHERE idfsLocation = @idfsLocation
				GOTO GenerateNewReference
			END

		GOTO Fini
	END

	IF EXISTS (SELECT * FROM inserted) AND NOT EXISTS (SELECT * FROM deleted) -- This is an insert
	BEGIN
		-- New location was inserted...
		SELECT @idfsLocation = idfsLocation FROM inserted;
		GOTO GenerateNewReference
	END

	IF EXISTS (SELECT * FROM deleted) AND NOT EXISTS(SELECT * FROM inserted) -- this is a delete
	BEGIN
		-- Location was deleted...
		SELECT @idfsLocation = idfsLocation FROM deleted;
		DELETE FROM dbo.gisLocationDenormalized WHERE idfsLocation = @idfsLocation
	END

	GOTO Fini
	/*
	--	====================================================
	GenerateNewReference:
	--	====================================================
		SELECT @current = 1, @max= COUNT(*) FROM @Languages
		
		-- Select the node for the inserted/updated location...
		SELECT @hi = Node FROM gisLocation l WHERE l.idfsLocation = @idfsLocation

		-- iterate thru all the languages and insert the hierarchy record for each...
		WHILE (@current <= @max)
		BEGIN
			
			--	Select a language...
			SELECT @languageId = idfsLanguage FROM @Languages WHERE id = @current

			-- Perform the insert...
			-- 1st into table variable...
			INSERT INTO @t(
						 L1ID
						,L2ID
						,L3ID
						,L4ID
						,L5ID
						,L6ID
						,L7ID
						,L1NAME
						,L2NAME
						,L3NAME
						,L4NAME
						,L5NAME
						,L6NAME
						,L7NAME
						,Node
						,[Level]
						,idfsLocation
						,LanguageId)

			-- PIVOT!!!!!
			-- Flatten the hierarchy and insert into gisLocationDenormalized...
			SELECT 
				-- LevelIDs 1 thru 7...
				MAX(CASE WHEN [Level]=1 THEN idfsLocation END ),
				MAX(CASE WHEN [Level]=2 THEN idfsLocation END ),
				MAX(CASE WHEN [Level]=3 THEN idfsLocation END ),
				MAX(CASE WHEN [Level]=4 THEN idfsLocation END ),
				MAX(CASE WHEN [Level]=5 THEN idfsLocation END ),
				MAX(CASE WHEN [Level]=6 THEN idfsLocation END ),
				MAX(CASE WHEN [Level]=7 THEN idfsLocation END ),
				-- LevelNames 1 thru 7...
				MAX(CASE WHEN [Level]=1 THEN LevelName END ),
				MAX(CASE WHEN [Level]=2 THEN LevelName END ),
				MAX(CASE WHEN [Level]=3 THEN LevelName END ),
				MAX(CASE WHEN [Level]=4 THEN LevelName END ),
				MAX(CASE WHEN [Level]=5 THEN LevelName END ),
				MAX(CASE WHEN [Level]=6 THEN LevelName END ),
				MAX(CASE WHEN [Level]=7 THEN LevelName END ),
				-- Node...
				MAX(Node),
				MAX(level),
				MAX(idfsLocation),
				@languageId
			FROM 
				(
				SELECT 
					l.Node.GetLevel() [Level]
					,COALESCE(snt.strTextString, b.strDefault) [LevelName]
					,b.strDefault [LevelNameDefault]
					,idfsLocation
					,Node
					--,LevelType.strTextString
					 ,rn=ROW_NUMBER() OVER (PARTITION BY 0 ORDER BY node.GetLevel())
				FROM gisLocation l
				JOIN gisBaseReference b ON b.idfsGISBaseReference = l.idfsLocation
				LEFT JOIN dbo.gisStringNameTranslation snt ON snt.idfsGISBaseReference = l.idfsLocation AND 
					snt.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@languageId)
				WHERE @hi.IsDescendantOf(node) = 1
				) a

				-- Reset...
				SET @current = @current+1
				SELECT @languageId = NULL
		END
		
		-- Finally, insert into gis table...
		INSERT INTO dbo.gisLocationDenormalized
			(
				Level1ID, 
				Level2ID, 
				Level3ID, 
				Level4ID, 
				Level5ID, 
				Level6ID, 
				Level7ID,
				Level1Name,
				Level2Name, 
				Level3Name, 
				Level4Name, 
				Level5Name, 
				Level6Name, 
				Level7Name,
				Node,
				Level,
				idfsLocation,
				LevelType,
				idfsLanguage
			)
		SELECT  L1ID,L2ID,L3ID,L4ID,L5ID,L6ID,L7ID,
				L1NAME,L2NAME,L3NAME,L4NAME,L5NAME,L6NAME,L7NAME,
				node,[level],l.idfsLocation,lt.strTextString,l.LanguageId
		FROM @t l
		JOIN gisBaseReference b ON b.idfsGISBaseReference = l.idfsLocation
		JOIN gisReferenceType t ON t.idfsGISReferenceType = b.idfsGISReferenceType
		JOIN dbo.trtStringNameTranslation lt ON 
		lt.idfsLanguage = l.LanguageId AND lt.idfsBaseReference = 
		CASE l.Node.GetLevel() 
			WHEN 1 THEN 10003001 
			WHEN 2 THEN 10003003
			WHEN 3 THEN 10003002 
			WHEN 4 THEN 10003004 
			WHEN 5 THEN 0
			WHEN 6 THEN 0
			WHEN 7 THEN 0
		ELSE 0 END

		GOTO Fini
	*/
	--	====================================================
	GenerateNewReference:  
	--	====================================================


		SELECT @current = 1, @max= COUNT(*) FROM @Languages
		
		SELECT @hi = Node, @hiString=Node.ToString()  FROM gisLocation l WHERE l.idfsLocation = @idfsLocation


		-- iterate thru all the languages and insert the hierarchy record for each...
		WHILE (@current <= @max)
		BEGIN
			
			--	Select a language...
			SELECT @languageId = idfsLanguage FROM @Languages WHERE id = @current

			-- Perform the insert...
			-- 1st into table variable...
			INSERT INTO @t(
						 L1ID
						,L2ID
						,L3ID
						,L4ID
						,L5ID
						,L6ID
						,L7ID
						,L1NAME
						,L2NAME
						,L3NAME
						,L4NAME
						,L5NAME
						,L6NAME
						,L7NAME
						,Node
						,[Level]
						--,idfsLocation
						,LanguageId)

			-- PIVOT!!!!!
			-- Flatten the hierarchy and insert into gisLocationDenormalized...
			SELECT 
				-- LevelIDs 1 thru 7...
				MAX(CASE WHEN [Level]=1 THEN idfsLocation END ),
				MAX(CASE WHEN [Level]=2 THEN idfsLocation END ),
				MAX(CASE WHEN [Level]=3 THEN idfsLocation END ),
				MAX(CASE WHEN [Level]=4 THEN idfsLocation END ),
				MAX(CASE WHEN [Level]=5 THEN idfsLocation END ),
				MAX(CASE WHEN [Level]=6 THEN idfsLocation END ),
				MAX(CASE WHEN [Level]=7 THEN idfsLocation END ),
				-- LevelNames 1 thru 7...
				MAX(CASE WHEN [Level]=1 THEN LevelName END ),
				MAX(CASE WHEN [Level]=2 THEN LevelName END ),
				MAX(CASE WHEN [Level]=3 THEN LevelName END ),
				MAX(CASE WHEN [Level]=4 THEN LevelName END ),
				MAX(CASE WHEN [Level]=5 THEN LevelName END ),
				MAX(CASE WHEN [Level]=6 THEN LevelName END ),
				MAX(CASE WHEN [Level]=7 THEN LevelName END ),
				-- Node...
				MAX(Node),
				MAX(level),
				--MAX(idfsLocation),
				@languageId
			FROM 
				(
				SELECT 
					l.Node.GetLevel() [Level]
					,COALESCE(snt.strTextString, b.strDefault) [LevelName]
					,b.strDefault [LevelNameDefault]
					,idfsLocation
					,Node
					--,LevelType.strTextString
					 ,rn=ROW_NUMBER() OVER (PARTITION BY 0 ORDER BY node.GetLevel())
				FROM gisLocation l
				JOIN gisBaseReference b ON b.idfsGISBaseReference = l.idfsLocation
				JOIN dbo.gisStringNameTranslation snt ON snt.idfsGISBaseReference = l.idfsLocation AND 
					snt.idfsLanguage = @languageId
				WHERE @hi.IsDescendantOf(node) = 1
				) a

				-- Reset...
				SET @current = @current+1
				SELECT @languageId = NULL
		END

		-- Update the idfsLocation...
		UPDATE @t 
		SET idfsLocation = 
		CASE
			WHEN level =1 AND  Node =@hiString THEN L1ID
			WHEN level =2 AND  Node =@hiString THEN L2ID
			WHEN level =3 AND  Node =@hiString THEN L3ID
			WHEN level =4 AND  Node =@hiString THEN  L4ID
			WHEN level =5 AND  Node =@hiString THEN   L5ID 
			WHEN level =6 AND  Node =@hiString THEN   L6ID
			WHEN level =7 AND  Node =@hiString THEN   L7ID 
		END
		

		-- Finally, insert into gis table...
		INSERT INTO dbo.gisLocationDenormalized
			(
				Level1ID, 
				Level2ID, 
				Level3ID, 
				Level4ID, 
				Level5ID, 
				Level6ID, 
				Level7ID,
				Level1Name,
				Level2Name, 
				Level3Name, 
				Level4Name, 
				Level5Name, 
				Level6Name, 
				Level7Name,
				Node,
				Level,
				idfsLocation,
				LevelType,
				idfsLanguage
			)
		SELECT  L1ID,L2ID,L3ID,L4ID,L5ID,L6ID,L7ID,
				L1NAME,L2NAME,L3NAME,L4NAME,L5NAME,L6NAME,L7NAME,
				node,[level],l.idfsLocation,lt.strTextString,l.LanguageId
		FROM @t l
		JOIN gisBaseReference b ON b.idfsGISBaseReference = l.idfsLocation
		JOIN gisReferenceType t ON t.idfsGISReferenceType = b.idfsGISReferenceType
		JOIN dbo.trtStringNameTranslation lt ON 
		lt.idfsLanguage = l.LanguageId AND lt.idfsBaseReference = 
		case l.level
			WHEN 1 THEN 10003001 
			WHEN 2 THEN 10003003
			WHEN 3 THEN 10003002 
			WHEN 4 THEN 10003004 
			WHEN 5 THEN 0
			WHEN 6 THEN 0
			WHEN 7 THEN 0
		ELSE 0 END



	Fini:
		-- Bye!
		RETURN

END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_ADMINLEVEL_GETLIST]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_ADMINLEVEL_GETLIST
--
-- Description: Get the list of admin level units based on search criteria entered.
--          
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Mandar Kulkarni   11292021          Initial release.
-- Manickandan Govindarajan 03/16/2022   Fixed Rayan  National name and Default Name          
-- Manickandan Govindarajan 10/27/2022  Added strSettlementHASC as retrun type         
-- Testing Code:
/*

EXEC	[dbo].[USP_ADMIN_ADMINLEVEL_GETLIST]
N'en-US',10003005,NULL,NULL,NULL,NULL,N'BAKU',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,1,10,NULL,NULL

*/
-- ================================================================================================
ALTER       PROCEDURE [dbo].[USP_ADMIN_ADMINLEVEL_GETLIST] 
(
	@LangId NVARCHAR(20),
	@idfsAdminLevel BIGINT,
	@idfsCountry BIGINT,
	@idfsRegion BIGINT,
	@idfsRayon BIGINT,
	@idfsSettlement BIGINT,
	@strDefaultName NVARCHAR(100),
	@strNationalName NVARCHAR(100),
	@idfsSettlementType BIGINT,
	@LatFrom FLOAT,
	@LatTo FLOAT,
	@LongFrom FLOAT,
	@LongTo FLOAT,
	@ElevationFrom FLOAT,
	@ElevationTo FLOAT,
	@pageNo INT = 1,
	@pageSize INT = 10, 
	@sortColumn NVARCHAR(30) = '', 
	@sortOrder NVARCHAR(4) = 'asc',
	@strHASC NVARCHAR(30) = NULL
)
AS
BEGIN

	BEGIN TRY
		DECLARE @firstRec INT, @lastRec INT,@idfsLangId BIGINT 
		
		SELECT @idfsLangId = idfsBaseReference 
		FROM dbo.trtBaseReference a 
		WHERE a.strBaseReferenceCode = @LangId 
		AND a.idfsReferenceType = 19000049

		DECLARE @Results TABLE
		( 
			idfKey BIGINT PRIMARY KEY IDENTITY(1,1),
			idfsAdministrativeLevel BIGINT,
			idfsCountry BIGINT,
			strCountryHASC NVARCHAR(255),
			strDefaultCountryName NVARCHAR(200),
			strNationalCountryName NVARCHAR(200),
			idfsRegion BIGINT,
			strRegionHASC NVARCHAR(255),
			strDefaultRegionName NVARCHAR(200),
			strNationalRegionName NVARCHAR(200),
			idfsRayon BIGINT,
			strRayonHASC NVARCHAR(255),
			strDefaultRayonName NVARCHAR(200),
			strNationalRayonName NVARCHAR(200),
			idfsSettlement NVARCHAR(200),
			strSettlementHASC NVARCHAR(255),
			strSettlementCode NVARCHAR(255),
			strDefaultSettlementName NVARCHAR(200),
			strNationalSettlementName NVARCHAR(200),
			idfsSettlementType BIGINT,
			strSettlementTypeDefaultName NVARCHAR(200),
			strSettlementTypeNationalName NVARCHAR(200),
			Latitude FLOAT,
			Longitude FLOAT,
			Elevation FLOAT
		)
		IF @idfsAdminLevel = 10003001
			BEGIN
				SET @idfsRegion = NULL
				SET @idfsRayon = NULL
				SET @idfsSettlement = NULL
			END

		IF @idfsAdminLevel = 10003003
			BEGIN
				SET @idfsRayon = NULL
				SET @idfsSettlement = NULL
			END

		IF @idfsAdminLevel = 10003002
			BEGIN
				SET @idfsSettlement = NULL
			END

		-- Populate country names if Administrative Level is for the country
		IF (@idfsAdminLevel = 10003001 OR @idfsCountry IS NOT NULL OR @idfsAdminLevel IS NULL)
		AND (@idfsAdminLevel = 10003001  AND @idfsRegion IS NULL AND @idfsRayon IS NULL AND @idfsSettlement IS NULL)
			BEGIN
				INSERT INTO @Results
				(
					idfsAdministrativeLevel,
					idfsCountry,
					strCountryHASC,
					strNationalCountryName,
					strDefaultCountryName
				)
				SELECT @idfsAdminLevel, 
						a.idfsCountry,
						a.strHASC,
						c.strTextString,
						b.strDefault
				FROM dbo.gisCountry a
				INNER JOIN dbo.gisBaseReference b ON a.idfsCountry = b.idfsGISBaseReference AND b.intRowStatus = 0 
				INNER JOIN dbo.gisStringNameTranslation c ON b.idfsGISBaseReference = c.idfsGISBaseReference AND b.intRowStatus = 0  AND c.idfsLanguage = @idfsLangId
				WHERE ((@strDefaultName IS NOT NULL AND b.strDefault LIKE '%' + @strDefaultName  + '%')
					OR @strDefaultName IS NULL)
				AND ((@strNationalName IS NOT NULL AND c.strTextString LIKE '%' + @strNationalName + '%')
					OR @strNationalName IS NULL)
				AND (a.idfsCountry = @idfsCountry OR @idfsCountry IS NULL)
				AND (a.strHASC = @strHASC OR @strHASC IS NULL)
			END

		-- Populate region names if Administrative Level is for the region
		IF (@idfsAdminLevel = 10003003 OR @idfsRegion IS NOT NULL OR @idfsAdminLevel IS NULL)
		AND (@idfsAdminLevel = 10003003 AND @idfsRayon IS NULL AND @idfsSettlement IS NULL)
			BEGIN
				INSERT INTO @Results
				(
					idfsAdministrativeLevel,
					idfsCountry,
					strCountryHASC,
					strNationalCountryName,
					strDefaultCountryName,
					idfsRegion,
					strRegionHASC,
					strNationalRegionName,
					strDefaultRegionName,
					Longitude,
					Latitude,
					Elevation
				)
				SELECT	@idfsAdminLevel, 
						a.idfsCountry,
						f.strHASC,
						e.strTextString,
						d.strDefault,
						a.idfsRegion,
						a.strHASC,
						c.strTextString,
						b.strDefault,
						a.dbllongitude,
						a.dbllatitude,
						a.intelevation
				FROM dbo.gisRegion a
				INNER JOIN dbo.gisBaseReference b ON a.idfsRegion = b.idfsGISBaseReference AND b.intRowStatus =0
				INNER JOIN dbo.gisStringNameTranslation c ON b.idfsGISBaseReference = c.idfsGISBaseReference AND c.intRowStatus = 0 AND c.idfsLanguage = @idfsLangId
				INNER JOIN dbo.gisBaseReference d ON a.idfsCountry = d.idfsGISBaseReference AND d.intRowStatus = 0
				INNER JOIN dbo.gisStringNameTranslation e ON d.idfsGISBaseReference = e.idfsGISBaseReference AND e.intRowStatus = 0 AND e.idfsLanguage = @idfsLangId
				INNER JOIN dbo.gisCountry f ON a.idfsCountry = f.idfsCountry AND f.intRowStatus =0
				WHERE ((@strDefaultName IS NOT NULL AND b.strDefault LIKE '%' + @strDefaultName  + '%')
					OR @strDefaultName IS NULL)
				AND ((@strNationalName IS NOT NULL AND c.strTextString LIKE '%' + @strNationalName + '%')
					OR @strNationalName IS NULL)
				AND ((a.dblLatitude BETWEEN @LatFrom AND @LatTo) OR (@LatFrom IS NULL AND @LatTo IS NULL))
				AND ((a.dblLongitude BETWEEN @LongFrom AND @LongTo) OR (@LongFrom IS NULL AND @LongTo IS NULL))
				AND ((a.intElevation BETWEEN @ElevationFrom AND @ElevationTo) OR (@ElevationFrom IS NULL AND @ElevationTo IS NULL))
				AND (a.idfsRegion = @idfsRegion OR @idfsRegion IS NULL)
				AND (a.idfsCountry = @idfsCountry OR @idfsCountry IS NULL)
				AND (a.strHASC = @strHASC OR @strHASC IS NULL)
			END

		-- Populate Rayon names if Administrative Level is for the rayon
		IF (@idfsAdminLevel = 10003002 OR @idfsRayon IS NOT NULL OR @idfsAdminLevel IS NULL)
		AND (@idfsAdminLevel = 10003002  AND @idfsSettlement IS NULL)
			BEGIN
				INSERT INTO @Results
				(
					idfsAdministrativeLevel,
					idfsCountry,
					strCountryHASC,
					strNationalCountryName,
					strDefaultCountryName,
					idfsRegion,
					strRegionHASC,
					strNationalRegionName,
					strDefaultRegionName,
					idfsRayon,
					strRayonHASC,
					strNationalRayonName,
					strDefaultRayonName,
					Latitude,
					Longitude,
					Elevation
				)
				SELECT	@idfsAdminLevel, 
						a.idfsCountry,
						i.strHASC,
						e.strTextString,
						d.strDefault,
						a.idfsRegion,
						h.strHASC,
						g.strTextString,
						f.strDefault,
						a.idfsRayon,
						a.strHASC,
						c.strTextString,
						b.strDefault,
						a.dblLatitude,
						a.dblLongitude,
						a.intElevation
				FROM dbo.gisRayon a
				INNER JOIN dbo.gisBaseReference b ON a.idfsRayon = b.idfsGISBaseReference AND b.intRowStatus =0
				LEFT JOIN dbo.gisStringNameTranslation c ON b.idfsGISBaseReference = c.idfsGISBaseReference AND c.intRowStatus = 0 AND c.idfsLanguage = @idfsLangId
				INNER JOIN dbo.gisBaseReference d ON a.idfsCountry = d.idfsGISBaseReference AND d.intRowStatus = 0
				LEFT JOIN dbo.gisStringNameTranslation e ON d.idfsGISBaseReference = e.idfsGISBaseReference AND e.intRowStatus = 0 AND e.idfsLanguage = @idfsLangId
				INNER JOIN dbo.gisBaseReference f ON a.idfsRegion = f.idfsGISBaseReference AND f.intRowStatus = 0
				LEFT JOIN dbo.gisStringNameTranslation g ON f.idfsGISBaseReference = g.idfsGISBaseReference AND g.intRowStatus = 0 AND g.idfsLanguage = @idfsLangId
				INNER JOIN dbo.gisRegion h ON a.idfsRegion = h.idfsRegion AND h.intRowStatus = 0
				INNER JOIN dbo.gisCountry i ON a.idfsCountry = i.idfsCountry AND i.intRowStatus = 0
				WHERE ((@strDefaultName IS NOT NULL AND b.strDefault LIKE '%' + @strDefaultName  + '%') 
					OR @strDefaultName IS NULL)
				AND ((@strNationalName IS NOT NULL AND c.strTextString LIKE '%' + @strNationalName + '%')
					OR @strNationalName IS NULL)
				AND ((a.dblLatitude BETWEEN @LatFrom AND @LatTo) OR (@LatFrom IS NULL AND @LatTo IS NULL))
				AND ((a.dblLongitude BETWEEN @LongFrom AND @LongTo) OR (@LongFrom IS NULL AND @LongTo IS NULL))
				AND ((a.intElevation BETWEEN @ElevationFrom AND @ElevationTo) OR (@ElevationFrom IS NULL AND @ElevationTo IS NULL))
				AND ((a.idfsRayon = @idfsRayon OR @idfsRayon IS NULL)
					AND ((@idfsRegion IS NOT NULL AND a.idfsRegion= @idfsRegion) OR @idfsRegion IS NULL)
					AND ((@idfsCountry IS NOT NULL AND a.idfsCountry = @idfsCountry) OR @idfsCountry IS NULL)
					)
						AND (a.strHASC = @strHASC OR @strHASC IS NULL)
			END

		-- Populate Settlement names if Administrative Level is for the Settlement
		IF (@idfsAdminLevel = 10003004 OR @idfsSettlement IS NOT NULL OR @idfsAdminLevel IS NULL)
			BEGIN
				INSERT INTO @Results
				(
					idfsAdministrativeLevel,
					idfsCountry,
					strCountryHASC,
					strNationalCountryName,
					strDefaultCountryName,
					idfsRegion,
					strRegionHASC,
					strNationalRegionName,
					strDefaultRegionName,
					idfsRayon,
					strRayonHASC,
					strNationalRayonName,
					strDefaultRayonName,
					idfsSettlement,
					strSettlementHASC,
					strSettlementCode,
					strNationalSettlementName,
					strDefaultSettlementName,
					idfsSettlementType,
					strSettlementTypeNationalName,
					strSettlementTypeDefaultName,
					Latitude,
					Longitude,
					Elevation
				)
				SELECT	@idfsAdminLevel, 
						a.idfsCountry,
						n.strHASC,
						e.strTextString,
						d.strDefault,
						a.idfsRegion,
						m.strHASC,
						g.strTextString,
						f.strDefault,
						a.idfsRayon,
						l.strHASC,
						i.strTextString,
						h.strDefault,
						a.idfsSettlement,
						b.strBaseReferenceCode,
						a.strSettlementCode,
						c.strTextString,
						b.strDefault,
						a.idfsSettlementType,
						k.strTextString,
						j.strDefault,
						a.dblLatitude,
						a.dblLongitude,
						a.intElevation
				FROM dbo.gisSettlement a
				INNER JOIN dbo.gisBaseReference b ON a.idfsSettlement = b.idfsGISBaseReference AND b.intRowStatus =0
				LEFT JOIN dbo.gisStringNameTranslation c ON b.idfsGISBaseReference = c.idfsGISBaseReference AND c.intRowStatus = 0 AND c.idfsLanguage = @idfsLangId
				INNER JOIN dbo.gisBaseReference d ON a.idfsCountry = d.idfsGISBaseReference AND d.intRowStatus = 0
				LEFT JOIN dbo.gisStringNameTranslation e ON d.idfsGISBaseReference = e.idfsGISBaseReference AND e.intRowStatus = 0 AND e.idfsLanguage = @idfsLangId
				INNER JOIN dbo.gisBaseReference f ON a.idfsRegion = f.idfsGISBaseReference AND f.intRowStatus = 0
				LEFT JOIN dbo.gisStringNameTranslation g ON d.idfsGISBaseReference = g.idfsGISBaseReference AND e.intRowStatus = 0 AND g.idfsLanguage = @idfsLangId
				INNER JOIN dbo.gisBaseReference h ON a.idfsRayon = h.idfsGISBaseReference AND h.intRowStatus = 0
				LEFT JOIN dbo.gisStringNameTranslation i ON h.idfsGISBaseReference = i.idfsGISBaseReference AND i.intRowStatus = 0 AND i.idfsLanguage = @idfsLangId
				INNER JOIN dbo.gisBaseReference j ON a.idfsSettlementType = j.idfsGISBaseReference AND j.intRowStatus = 0
				LEFT JOIN dbo.gisStringNameTranslation k ON j.idfsGISBaseReference = k.idfsGISBaseReference AND k.intRowStatus = 0 AND k.idfsLanguage = @idfsLangId
				INNER JOIN dbo.gisRayon l ON a.idfsRayon = l.idfsRayon AND l.intRowStatus = 0
				INNER JOIN dbo.gisRegion m ON a.idfsRegion = m.idfsRegion AND m.intRowStatus = 0
				INNER JOIN dbo.gisCountry n ON a.idfsCountry = n.idfsCountry AND n.intRowStatus = 0
				WHERE ((@strDefaultName IS NOT NULL AND b.strDefault LIKE '%' + @strDefaultName  + '%') 
					OR @strDefaultName IS NULL)
				AND ((@strNationalName IS NOT NULL AND c.strTextString LIKE '%' + @strNationalName + '%')
					OR @strNationalName IS NULL)
				AND (a.idfsSettlementType = @idfsSettlementType OR @idfsSettlementType IS NULL)
				AND ((a.dblLatitude BETWEEN @LatFrom AND @LatTo) OR (@LatFrom IS NULL OR @LatTo IS NULL))
				AND ((a.dblLongitude BETWEEN @LongFrom AND @LongTo) OR (@LongFrom IS NULL OR @LongTo IS NULL))
				AND ((a.intElevation BETWEEN @ElevationFrom AND @ElevationTo) OR (@ElevationFrom IS NULL OR @ElevationTo IS NULL))
				AND ((a.idfsSettlement = @idfsSettlement OR @idfsSettlement IS NULL) 
					AND ((@idfsRayon IS NOT NULL AND a.idfsRayon = @idfsRayon) OR @idfsRayon IS NULL)
					AND ((@idfsRegion IS NOT NULL AND a.idfsRegion= @idfsRegion) OR @idfsRegion IS NULL)
					AND ((@idfsCountry IS NOT NULL AND a.idfsCountry = @idfsCountry) OR @idfsCountry IS NULL)
					)
				AND (b.strBaseReferenceCode = @strHASC OR @strHASC IS NULL)
			END

		SET @firstRec = (@pageNo-1)* @pagesize
		SET @lastRec = (@pageNo*@pageSize+1);
		
		WITH CTEResults AS
		(
			SELECT ROW_NUMBER() OVER ( ORDER BY 
			CASE WHEN @sortColumn = 'strNationalCountryName' AND @SortOrder = 'asc' THEN a.strNationalCountryName END ASC,
			CASE WHEN @sortColumn = 'strNationalCountryName' AND @SortOrder = 'desc' THEN a.strNationalCountryName END DESC,
			CASE WHEN @sortColumn = 'strDefaultCountryName' AND @SortOrder = 'asc' THEN a.strDefaultCountryName END ASC,	
			CASE WHEN @sortColumn = 'strDefaultCountryName' AND @SortOrder = 'desc' THEN a.strDefaultCountryName END DESC,
			CASE WHEN @sortColumn = 'strNationalRegionName' AND @SortOrder = 'asc' THEN a.strNationalRegionName END ASC,	
			CASE WHEN @sortColumn = 'strNationalRegionName' AND @SortOrder = 'desc' THEN a.strNationalRegionName END DESC,
			CASE WHEN @sortColumn = 'strDefaultRegionName' AND @SortOrder = 'asc' THEN a.strDefaultRegionName END ASC,	
			CASE WHEN @sortColumn = 'strDefaultRegionName' AND @SortOrder = 'desc' THEN a.strDefaultRegionName END DESC,
			CASE WHEN @sortColumn = 'strNationalRayonName' AND @SortOrder = 'asc' THEN a.strNationalRayonName END ASC,	
			CASE WHEN @sortColumn = 'strNationalRayonName' AND @SortOrder = 'desc' THEN a.strNationalRayonName END DESC,
			CASE WHEN @sortColumn = 'strDefaultRayonName' AND @SortOrder = 'asc' THEN a.strDefaultRayonName END ASC,	
			CASE WHEN @sortColumn = 'strDefaultRayonName' AND @SortOrder = 'desc' THEN a.strDefaultRayonName END DESC,
			CASE WHEN @sortColumn = 'strNationalSettlementName' AND @SortOrder = 'asc' THEN a.strNationalSettlementName END ASC,	
			CASE WHEN @sortColumn = 'strNationalSettlementName' AND @SortOrder = 'desc' THEN a.strNationalSettlementName END DESC,
			CASE WHEN @sortColumn = 'strDefaultSettlementName' AND @SortOrder = 'asc' THEN a.strDefaultSettlementName END ASC,	
			CASE WHEN @sortColumn = 'strDefaultSettlementName' AND @SortOrder = 'desc' THEN a.strDefaultSettlementName END DESC,
			CASE WHEN @sortColumn = 'strSettlementTypeDefaultName' AND @SortOrder = 'asc' THEN a.strSettlementTypeDefaultName END ASC,	
			CASE WHEN @sortColumn = 'strSettlementTypeDefaultName' AND @SortOrder = 'desc' THEN a.strSettlementTypeDefaultName END DESC,
			CASE WHEN @sortColumn = 'strSettlementTypeNationalName' AND @SortOrder = 'asc' THEN a.strSettlementTypeNationalName END ASC,	
			CASE WHEN @sortColumn = 'strSettlementTypeNationalName' AND @SortOrder = 'desc' THEN a.strSettlementTypeNationalName END DESC,
			CASE WHEN @sortColumn = 'Latitude' AND @SortOrder = 'asc' THEN a.Latitude END ASC,	
			CASE WHEN @sortColumn = 'Latitude' AND @SortOrder = 'desc' THEN a.Latitude END DESC,
			CASE WHEN @sortColumn = 'Longitude' AND @SortOrder = 'asc' THEN a.Longitude END ASC,	
			CASE WHEN @sortColumn = 'Longitude' AND @SortOrder = 'desc' THEN a.Longitude END DESC,
			CASE WHEN @sortColumn = 'Elevation' AND @SortOrder = 'asc' THEN a.elevation END ASC,	
			CASE WHEN @sortColumn = 'Elevation' AND @SortOrder = 'desc' THEN a.elevation END DESC
		) AS ROWNUM,
			COUNT(*) OVER () AS TotalRowCount,
			a.idfsCountry,
			a.strCountryHASC,
			a.strNationalCountryName,	
			a.strDefaultCountryName,	
			a.idfsRegion,
			a.strRegionHASC,
			a.strNationalRegionName,	
			a.strDefaultRegionName,	
			a.idfsRayon,
			a.strRayonHASC,
			a.strNationalRayonName,	
			a.strDefaultRayonName,	
			a.idfsSettlement,
			a.strSettlementHASC,
			a.strSettlementCode,
			a.strNationalSettlementName,	
			a.strDefaultSettlementName,	
			a.idfsSettlementType,
			a.strSettlementTypeDefaultName,	
			a.strSettlementTypeNationalName,	
			a.Latitude,	
			a.Longitude,	
			a.Elevation	
		FROM @Results a
		)

		SELECT 
				TotalRowCount,
				a.idfsCountry,
				a.strCountryHASC,
				a.strNationalCountryName,	
				a.strDefaultCountryName,	
				a.idfsRegion,
				a.strRegionHASC,
				a.strNationalRegionName,	
				a.strDefaultRegionName,	
				a.idfsRayon,
				a.strRayonHASC,
				a.strNationalRayonName,	
				a.strDefaultRayonName,	
				a.idfsSettlement,
				a.strSettlementHASC,
				a.strSettlementCode,
				a.strNationalSettlementName,	
				a.strDefaultSettlementName,	
				a.idfsSettlementType,
				a.strSettlementTypeDefaultName,	
				strSettlementTypeNationalName,	
				a.Latitude,	
				a.Longitude,	
				a.Elevation,	
				TotalPages = (TotalRowCount/@pageSize)+IIF(TotalRowCount%@pageSize>0,1,0),
				CurrentPage = @pageNo 
		FROM CTEResults A
		WHERE a.ROWNUM > @firstRec AND RowNum < @lastRec 	
	END TRY

	BEGIN CATCH
		THROW;
	END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_GISDATA_DEL]...';


GO

-- ================================================================================================
-- Name: USP_ADMIN_GISDATA_DEL
--
-- Description: DELETE GIS Admin Levels.
--          
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Mark WIlson		12/07/2021  Initial release.
-- Mani Govindarajan  11/01/2022 Added condtions to check  if the record is referenced in child table and reference tables         
--          
-- Testing Code:
/*

EXEC dbo.USP_ADMIN_GISDATA_DEL
	@idfsLocation = 3724160000000,
	@UserName = 'PowerUser'

*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_GISDATA_DEL] 
(
	@idfsLocation BIGINT = NULL, -- the location being added or updated
	@userName NVARCHAR(200) = NULL
)
AS

BEGIN

	DECLARE @ReturnCode INT = 0,
			@ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
			@SettlementCount  int =0,
			@RayonCount  int =0,
			@RegionCount  int =0,
			@GeoLocationRefCount  int=0,
			@GeoLocationSharedRefCount  int=0;

	BEGIN TRY

		BEGIN TRANSACTION 

		DECLARE @AdminLevelNode HIERARCHYID

		SELECT @AdminLevelNode = node FROM dbo.gisLocation WHERE idfsLocation = @idfsLocation

		DECLARE @AdminLevel3 TABLE
		(
			
			idfsLocation BIGINT
		)	

		
		DECLARE @AdminLevel4 TABLE
		(
			
			idfsLocation BIGINT
		)	

		-- additional levels will be needed as the database is expanded


-----------------------------------------------------------------------------------------------------------------------------------------
		IF @AdminLevelNode.GetLevel() = 2
		BEGIN

			INSERT INTO @AdminLevel3
			SELECT
				idfsLocation
			FROM dbo.gisLocationDenormalized WHERE Level = 3 AND Level2ID = @idfsLocation

			INSERT INTO @AdminLevel4
			SELECT
				idfsLocation
			FROM dbo.gisLocationDenormalized WHERE Level = 4 AND Level2ID = @idfsLocation
			SELECT @SettlementCount=  COUNT(*) FROM @AdminLevel4;
			SELECT @RayonCount=  COUNT(*) FROM @AdminLevel3;
			select @SettlementCount= count(idfsSettlement)  FROM dbo.gisSettlement WHERE idfsRegion = @idfsLocation and intRowStatus =0
			SELECT @GeoLocationRefCount =count(idfsLocation) FROM dbo.tlbGeoLocation where idfsLocation=@idfsLocation and intRowStatus =0
			SELECT @GeoLocationSharedRefCount =count(idfsLocation) FROM dbo.tlbGeoLocationShared where idfsRegion=@idfsLocation and intRowStatus =0

			if (@RayonCount =0 and @SettlementCount =0 AND @GeoLocationRefCount=0 AND @GeoLocationSharedRefCount=0)
			BEGIN

				DELETE FROM dbo.gisLocation WHERE idfsLocation IN (SELECT * FROM @AdminLevel4)

				DELETE FROM dbo.gisLocation WHERE idfsLocation IN (SELECT * FROM @AdminLevel3)

				DELETE FROM dbo.gisLocation WHERE idfsLocation = @idfsLocation

				DELETE FROM dbo.gisSettlement WHERE idfsRegion = @idfsLocation

				DELETE FROM dbo.gisRayon WHERE idfsRegion = @idfsLocation

				DELETE FROM dbo.gisRegion WHERE idfsRegion = @idfsLocation

				DELETE FROM dbo.gisStringNameTranslation WHERE idfsGISBaseReference = @idfsLocation

				DELETE FROM dbo.gisBaseReference WHERE idfsGISBaseReference IN (SELECT * FROM @AdminLevel4)

				DELETE FROM dbo.gisBaseReference WHERE idfsGISBaseReference IN (SELECT * FROM @AdminLevel3)

				DELETE FROM dbo.gisBaseReference WHERE idfsGISBaseReference = @idfsLocation
			END
			ELSE
			BEGIN
			 set @ReturnCode=-1;
			END

		END

-----------------------------------------------------------------------------------------------------------------------------------------
		IF @AdminLevelNode.GetLevel() = 3
		BEGIN

			INSERT INTO @AdminLevel4
			SELECT
				idfsLocation
			FROM dbo.gisLocationDenormalized WHERE Level = 4 AND Level3ID = @idfsLocation
			--select @SettlementCount= count(idfsSettlement)  FROM dbo.gisSettlement WHERE idfsRegion = @idfsLocation and intRowStatus =0
			SELECT @GeoLocationRefCount =count(idfsLocation) FROM dbo.tlbGeoLocation where idfsLocation=@idfsLocation and intRowStatus =0
			SELECT @GeoLocationSharedRefCount =count(idfsLocation) FROM dbo.tlbGeoLocationShared where idfsRayon=@idfsLocation and intRowStatus =0
			SELECT @SettlementCount=  COUNT(*) FROM @AdminLevel4;
			
			if (@SettlementCount =0 AND @GeoLocationRefCount=0 AND @GeoLocationSharedRefCount=0)
			BEGIN

				DELETE FROM dbo.gisLocation WHERE idfsLocation IN (SELECT * FROM @AdminLevel4)

				DELETE FROM dbo.gisLocation WHERE idfsLocation = @idfsLocation

				DELETE FROM dbo.gisSettlement WHERE idfsRegion = @idfsLocation

				DELETE FROM dbo.gisRayon WHERE idfsRegion = @idfsLocation

				DELETE FROM dbo.gisStringNameTranslation WHERE idfsGISBaseReference = @idfsLocation

				DELETE FROM dbo.gisBaseReference WHERE idfsGISBaseReference IN (SELECT * FROM @AdminLevel4)

				DELETE FROM dbo.gisBaseReference WHERE idfsGISBaseReference = @idfsLocation
			end
			ELSE
			BEGIN
			 set @ReturnCode=-1;
			END

		END

-----------------------------------------------------------------------------------------------------------------------------------------
		IF @AdminLevelNode.GetLevel() = 4
		BEGIN
			SELECT @GeoLocationRefCount =count(idfsLocation) FROM dbo.tlbGeoLocation where idfsLocation=@idfsLocation and intRowStatus =0
			SELECT @GeoLocationSharedRefCount =count(idfsLocation) FROM dbo.tlbGeoLocationShared where idfsSettlement=@idfsLocation and intRowStatus =0
			if ( @GeoLocationRefCount=0 AND @GeoLocationSharedRefCount=0)
			BEGIN

				DELETE FROM dbo.gisLocation WHERE idfsLocation = @idfsLocation

				DELETE FROM dbo.gisSettlement WHERE idfsRegion = @idfsLocation

				DELETE FROM dbo.gisStringNameTranslation WHERE idfsGISBaseReference = @idfsLocation

				DELETE FROM dbo.gisBaseReference WHERE idfsGISBaseReference = @idfsLocation
			END
			BEGIN
			 set @ReturnCode=-1;
			END


		END

		if (@SettlementCount =0 AND @GeoLocationRefCount=0 AND @GeoLocationSharedRefCount=0)
		BEGIN
			IF @@TRANCOUNT > 0
				COMMIT TRANSACTION;
		END
		ELSE
		BEGIN
			ROLLBACK TRANSACTION;
		END

		SELECT @ReturnCode ReturnCode
			,@ReturnMessage ReturnMessage
			,@idfsLocation IdfsLocation
			,@SettlementCount SettlementCount
			,@RayonCount RayonCount
			,@RegionCount RegionCount
			,@GeoLocationRefCount GeoLocationRefCount
			,@GeoLocationSharedRefCount GeoLocationSharedRefCount

	END TRY

	BEGIN CATCH

		IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION;

		SET @ReturnCode = ERROR_NUMBER();
		SET @ReturnMessage = ERROR_MESSAGE();

		--SELECT @ReturnCode,	@ReturnMessage, @idfsLocation

		THROW;

	END CATCH;

END
GO
PRINT N'Altering Procedure [dbo].[USP_HUM_DISEASE_REPORT_GETList]...';


GO
-- ================================================================================================
-- Name: USP_HUM_DISEASE_REPORT_GETList
--
-- Description: Get a list of human disease reports for the human module.
--          
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Mandar Kulkarni             Initial release.
-- Stephen Long     03/26/2018 Added the person reported by name for the farm use case.
-- JWJ	            04/17/2018 Added extra col to return:  tlbHuman.idfHumanActual. Added alias 
--                             for region rayon to make them unique in results added report status 
--                             to results 
-- Harold Pryor     10/22/2018 Added input search parameters SearchStrPersonFirstName, 
--                             SearchStrPersonMiddleName, and SearchStrPersonLastName
-- Harold Pryor     10/31/2018 Added input search parameters SearchLegacyCaseID and	
--                             added strLocation (region, rayon) field to list result set
-- Harold Pryor     11/12/2018 Changed @SearchLegacyCaseID parameter from BIGINT to NVARCHAR(200)
-- Stephen Long     12/19/2018 Added pagination logic.
-- Stephen Long     07/07/2019 Added monitoring session ID to parameters and where clause.
-- Stephen Long     07/10/2019 Changed address join from exposure location to patient's current 
--                             residence address.
-- Stephen Long     07/19/2019 Corrected patient name and person entered by name ', '.
-- Stephen Long     02/26/2020 Added non-configurable site filtration rules.
-- Lamont Mitchell  03/03/2020 Modified all joins on human case and human to join on human actual.
-- Stephen Long     04/01/2020 Added if/else for first-level and second-level site types to bypass 
--                             non-configurable rules.
-- Stephen Long     05/18/2020 Added disease filtration rules from use case SAUC62.
-- Stephen Long     06/18/2020 Corrected the join on the rayon of the report current residence 
--                             address (human ID to human ID instead of human ID to human actual 
--                             ID).
-- Stephen Long     06/18/2020 Added where criteria to the query when no site filtration is 
--                             required.
-- Stephen Long     07/07/2020 Added trim to EIDSS identifier like criteria.
-- Doug Albanese	11/16/2020 Added Outbreak Tied filtering
-- Stephen Long     11/18/2020 Added site ID to the query.
-- Stephen Long     11/28/2020 Added configurable site filtration rules.
-- Stephen Long     12/13/2020 Added apply configurable filtration indicator parameter.
-- Stephen Long     12/24/2020 Modified join on disease filtration default role rule.
-- Stephen Long     12/29/2020 Changed function call on reference data for inactive records.
-- Stephen Long     01/04/2020 Added option recompile due to number of optional parameters for 
--                             better execution plan.
-- Stephen Long     04/04/2021 Added updated pagination and location hierarchy.
-- Mike Kornegay	09/23/2021 Added HospitalizationStatus field
-- Stephen Long     11/03/2021 Added disease ID field.
-- Mike Kornegay	11/16/2021 Fix hospitalization field for translations
-- Mike Kornegay	12/07/2021 Added back EnteredByPersonName 
-- Mike Kornegay	12/08/2021 Swapped out FN_GBL_GIS_ReferenceRepair for new flat hierarchy
-- Mike Kornegay	12/23/2021 Fixed YN hospitalization where clause
-- Manickandan Govindarajan 03/21/2022  Rename Param PageNumber to Page
-- Stephen Long     03/29/2022 Fix to site filtration to pull back a user's own site records.
-- Stephen Long     06/03/2022 Updated to point default access rules to base reference.
-- Mike Kornegay    06/06/2022 Added parameter OutcomeID.
-- Mike Kornegay	06/13/2022 Changed inner joins to left joins in final query because result set 
--                             was incorrect.
-- Stephen Long     08/14/2022 Added additional criteria for outbreak cases for laboratory module.
--                             TODO: replace filter outbreak cases parameter, and just filter in 
--                             the initial query to avoid getting extra unneeded records; also just 
--                             make it a boolean value.
-- Mark Wilson      09/01/2022 update to use denormalized locations to work with site filtration.
-- Stephen Long     09/22/2022 Add check for "0" page size.  If "0", then set to 1.
-- Mike Kornegay	10/11/2022 Move order by back to CTE row partition for performance and add 
--                             LanguageID to default filtration rule joins.
-- Stephen Long     11/02/2022 Fixes for 4599 - site filtration returning the wrong results.
--
-- Testing code:
-- EXEC USP_HUM_DISEASE_REPORT_GETList 'en-US'
-- EXEC USP_HUM_DISEASE_REPORT_GETList 'en-US', @EIDSSReportID = 'H'
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_HUM_DISEASE_REPORT_GETList]
    @LanguageID NVARCHAR(50),
    @ReportKey BIGINT = NULL,
    @ReportID NVARCHAR(200) = NULL,
    @LegacyReportID NVARCHAR(200) = NULL,
    @SessionKey BIGINT = NULL,
    @PatientID BIGINT = NULL,
    @PersonID NVARCHAR(200) = NULL,
    @DiseaseID BIGINT = NULL,
    @ReportStatusTypeID BIGINT = NULL,
    @AdministrativeLevelID BIGINT = NULL,
    @DateEnteredFrom DATETIME = NULL,
    @DateEnteredTo DATETIME = NULL,
    @ClassificationTypeID BIGINT = NULL,
    @HospitalizationYNID BIGINT = NULL,
    @PatientFirstName NVARCHAR(200) = NULL,
    @PatientMiddleName NVARCHAR(200) = NULL,
    @PatientLastName NVARCHAR(200) = NULL,
    @SentByFacilityID BIGINT = NULL,
    @ReceivedByFacilityID BIGINT = NULL,
    @DiagnosisDateFrom DATETIME = NULL,
    @DiagnosisDateTo DATETIME = NULL,
    @LocalOrFieldSampleID NVARCHAR(200) = NULL,
    @DataEntrySiteID BIGINT = NULL,
    @DateOfSymptomsOnsetFrom DATETIME = NULL,
    @DateOfSymptomsOnsetTo DATETIME = NULL,
    @NotificationDateFrom DATETIME = NULL,
    @NotificationDateTo DATETIME = NULL,
    @DateOfFinalCaseClassificationFrom DATETIME = NULL,
    @DateOfFinalCaseClassificationTo DATETIME = NULL,
    @LocationOfExposureAdministrativeLevelID BIGINT = NULL,
    @OutcomeID BIGINT = NULL,
    @FilterOutbreakTiedReports INT = 0,
    @OutbreakCasesIndicator BIT = 0,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT,
    @UserEmployeeID BIGINT,
    @ApplySiteFiltrationIndicator BIT = 0,
    @SortColumn NVARCHAR(30) = 'ReportID',
    @SortOrder NVARCHAR(4) = 'DESC',
    @Page INT = 1,
    @PageSize INT = 10
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @firstRec INT,
            @lastRec INT,
            @FiltrationSiteAdministrativeLevelID AS BIGINT, 
            @LanguageCode AS BIGINT = dbo.FN_GBL_LanguageCode_GET(@LanguageID);
    SET @firstRec = (@Page - 1) * @PageSize
    SET @lastRec = (@Page * @PageSize + 1);

    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator BIT NOT NULL,
        AccessToPersonalDataPermissionIndicator BIT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
        WritePermissionIndicator BIT NOT NULL,
        DeletePermissionIndicator BIT NOT NULL, INDEX IDX_ID (ID
                                                             ));
    DECLARE @FinalResults TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator BIT NOT NULL,
        AccessToPersonalDataPermissionIndicator BIT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
        WritePermissionIndicator BIT NOT NULL,
        DeletePermissionIndicator BIT NOT NULL
    );

    BEGIN TRY
        IF @PageSize = 0
        BEGIN
            SET @PageSize = 1;
        END

        -- ========================================================================================
        -- NO SITE FILTRATION RULES APPLIED
        --
        -- For first and second level sites, do not apply any site filtration rules.
        -- ========================================================================================
        IF @ApplySiteFiltrationIndicator = 0
        BEGIN
            INSERT INTO @Results
            SELECT hc.idfHumanCase,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbHumanCase hc
                INNER JOIN dbo.tlbHuman h
                    ON h.idfHuman = hc.idfHuman
                       AND h.intRowStatus = 0
                INNER JOIN dbo.tlbGeoLocation currentAddress
                    ON currentAddress.idfGeoLocation = h.idfCurrentResidenceAddress
                LEFT JOIN dbo.gisLocationDenormalized g
                    ON g.idfsLocation = currentAddress.idfsLocation
                       AND g.idfsLanguage = @LanguageCode
                LEFT JOIN dbo.tlbMaterial m
                    ON m.idfHumanCase = hc.idfHumanCase
                       AND m.intRowStatus = 0
                LEFT JOIN dbo.tlbGeoLocation exposure
                    ON exposure.idfGeoLocation = hc.idfPointGeoLocation
                LEFT JOIN dbo.gisLocationDenormalized gExposure
                    ON gExposure.idfsLocation = exposure.idfsLocation
                       AND gExposure.idfsLanguage = @LanguageCode
            WHERE hc.intRowStatus = 0
                  AND hc.idfsFinalDiagnosis IS NOT NULL
                  AND (
                          hc.idfHumanCase = @ReportKey
                          OR @ReportKey IS NULL
                      )
                  AND (
                          hc.idfParentMonitoringSession = @SessionKey
                          OR @SessionKey IS NULL
                      )
                  AND (
                          h.idfHumanActual = @PatientID
                          OR @PatientID IS NULL
                      )
                  AND (
                          h.strPersonId = @PersonID
                          OR @PersonID IS NULL
                      )
                  AND (
                          idfsFinalDiagnosis = @DiseaseID
                          OR @DiseaseID IS NULL
                      )
                  AND (
                          idfsCaseProgressStatus = @ReportStatusTypeID
                          OR @ReportStatusTypeID IS NULL
                      )
                  AND (
                          g.Level1ID = @AdministrativeLevelID
                          OR g.Level2ID = @AdministrativeLevelID
                          OR g.Level3ID = @AdministrativeLevelID
                          OR g.Level4ID = @AdministrativeLevelID
                          OR g.Level5ID = @AdministrativeLevelID
                          OR g.Level6ID = @AdministrativeLevelID
                          OR g.Level7ID = @AdministrativeLevelID
                          OR @AdministrativeLevelID IS NULL
                      )
                  AND (
                          (CAST(hc.datEnteredDate AS DATE)
                  BETWEEN @DateEnteredFrom AND @DateEnteredTo
                          )
                          OR (
                                 @DateEnteredFrom IS NULL
                                 OR @DateEnteredTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datFinalDiagnosisDate AS DATE)
                  BETWEEN @DiagnosisDateFrom AND @DiagnosisDateTo
                          )
                          OR (
                                 @DiagnosisDateFrom IS NULL
                                 OR @DiagnosisDateTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datNotificationDate AS DATE)
                  BETWEEN @NotificationDateFrom AND @NotificationDateTo
                          )
                          OR (
                                 @NotificationDateFrom IS NULL
                                 OR @NotificationDateTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datOnSetDate AS DATE)
                  BETWEEN @DateOfSymptomsOnsetFrom AND @DateOfSymptomsOnsetTo
                          )
                          OR (
                                 @DateOfSymptomsOnsetFrom IS NULL
                                 OR @DateOfSymptomsOnsetTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datFinalCaseClassificationDate AS DATE)
                  BETWEEN @DateOfFinalCaseClassificationFrom AND @DateOfFinalCaseClassificationTo
                          )
                          OR (
                                 @DateOfFinalCaseClassificationFrom IS NULL
                                 OR @DateOfFinalCaseClassificationTo IS NULL
                             )
                      )
                  AND (
                          hc.idfReceivedByOffice = @ReceivedByFacilityID
                          OR @ReceivedByFacilityID IS NULL
                      )
                  AND (
                          hc.idfSentByOffice = @SentByFacilityID
                          OR @SentByFacilityID IS NULL
                      )
                  AND (
                          idfsFinalCaseStatus = @ClassificationTypeID
                          OR @ClassificationTypeID IS NULL
                      )
                  AND (
                          idfsYNHospitalization = @HospitalizationYNID
                          OR @HospitalizationYNID IS NULL
                      )
                  AND (
                          g.Level1ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level2ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level3ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level4ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level5ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level6ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level7ID = @LocationOfExposureAdministrativeLevelID
                          OR @LocationOfExposureAdministrativeLevelID IS NULL
                      )
                  AND (
                          (ISNULL(h.strFirstName, '') = CASE ISNULL(@PatientFirstName, '')
                                                            WHEN '' THEN
                                                                ISNULL(h.strFirstName, '')
                                                            ELSE
                                                                @PatientFirstName
                                                        END
                          )
                          OR (CHARINDEX(@PatientFirstName, ISNULL(h.strFirstName, '')) > 0)
                      )
                  AND (
                          (ISNULL(h.strSecondName, '') = CASE ISNULL(@PatientMiddleName, '')
                                                             WHEN '' THEN
                                                                 ISNULL(h.strSecondName, '')
                                                             ELSE
                                                                 @PatientMiddleName
                                                         END
                          )
                          OR (CHARINDEX(@PatientMiddleName, ISNULL(h.strSecondName, '')) > 0)
                      )
                  AND (
                          (ISNULL(h.strLastName, '') = CASE ISNULL(@PatientLastName, '')
                                                           WHEN '' THEN
                                                               ISNULL(h.strLastName, '')
                                                           ELSE
                                                               @PatientLastName
                                                       END
                          )
                          OR (CHARINDEX(@PatientLastName, ISNULL(h.strLastName, '')) > 0)
                      )
                  AND (
                          hc.idfsSite = @DataEntrySiteID
                          OR @DataEntrySiteID IS NULL
                      )
                  AND (
                          (
                              hc.idfOutbreak IS NULL
                              AND @OutbreakCasesIndicator = 0
                          )
                          OR (
                                 hc.idfOutbreak IS NOT NULL
                                 AND @OutbreakCasesIndicator = 1
                             )
                          OR (@OutbreakCasesIndicator IS NULL)
                      )
                  AND (
                          hc.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
                          OR @ReportID IS NULL
                      )
                  AND (
                          hc.LegacyCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
                          OR @LegacyReportID IS NULL
                      )
                  AND (
                          m.strFieldBarcode LIKE '%' + TRIM(@LocalOrFieldSampleID) + '%'
                          OR @LocalOrFieldSampleID IS NULL
                      )
                  AND (
                          hc.idfsOutcome = @OutcomeID
                          OR @OutcomeID IS NULL
                      )
            GROUP BY hc.idfHumanCase;
        END
        ELSE
        BEGIN -- Site Filtration
            DECLARE @InitialFilteredResults TABLE
            (
                ID BIGINT NOT NULL,
                ReadPermissionIndicator BIT NOT NULL,
                AccessToPersonalDataPermissionIndicator BIT NOT NULL,
                AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
                WritePermissionIndicator BIT NOT NULL,
                DeletePermissionIndicator BIT NOT NULL, INDEX IDX_ID (ID
                                                                     ));

            INSERT INTO @InitialFilteredResults
            SELECT hc.idfHumanCase,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbHumanCase hc
            WHERE hc.intRowStatus = 0
                  AND hc.idfsSite = @UserSiteID;

            INSERT INTO @Results
            SELECT hc.idfHumanCase,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM @InitialFilteredResults res
                INNER JOIN dbo.tlbHumanCase hc
                    ON hc.idfHumanCase = res.ID
                INNER JOIN dbo.tlbHuman h
                    ON h.idfHuman = hc.idfHuman
                       AND h.intRowStatus = 0
                INNER JOIN dbo.tlbGeoLocation currentAddress
                    ON currentAddress.idfGeoLocation = h.idfCurrentResidenceAddress
                LEFT JOIN dbo.gisLocationDenormalized g
                    ON g.idfsLocation = currentAddress.idfsLocation
                       AND g.idfsLanguage = @LanguageCode
                LEFT JOIN dbo.tlbMaterial m
                    ON m.idfHumanCase = hc.idfHumanCase
                       AND m.intRowStatus = 0
                LEFT JOIN dbo.tlbGeoLocation exposure
                    ON exposure.idfGeoLocation = hc.idfPointGeoLocation
                LEFT JOIN dbo.gisLocationDenormalized gExposure
                    ON gExposure.idfsLocation = exposure.idfsLocation
                       AND gExposure.idfsLanguage = @LanguageCode
            WHERE hc.idfsFinalDiagnosis IS NOT NULL
                  AND hc.idfHumanCase = @ReportKey
                  OR @ReportKey IS NULL
                     AND hc.idfParentMonitoringSession = @SessionKey
                  OR @SessionKey IS NULL
                     AND h.idfHumanActual = @PatientID
                  OR @PatientID IS NULL
                     AND h.strPersonId = @PersonID
                  OR @PersonID IS NULL
                     AND idfsFinalDiagnosis = @DiseaseID
                  OR @DiseaseID IS NULL
                     AND idfsCaseProgressStatus = @ReportStatusTypeID
                  OR @ReportStatusTypeID IS NULL
                     AND (
                             g.Level1ID = @AdministrativeLevelID
                             OR g.Level2ID = @AdministrativeLevelID
                             OR g.Level3ID = @AdministrativeLevelID
                             OR g.Level4ID = @AdministrativeLevelID
                             OR g.Level5ID = @AdministrativeLevelID
                             OR g.Level6ID = @AdministrativeLevelID
                             OR g.Level7ID = @AdministrativeLevelID
                             OR @AdministrativeLevelID IS NULL
                         )
                     AND (
                             (CAST(hc.datEnteredDate AS DATE)
                  BETWEEN @DateEnteredFrom AND @DateEnteredTo
                             )
                             OR (
                                    @DateEnteredFrom IS NULL
                                    OR @DateEnteredTo IS NULL
                                )
                         )
                     AND (
                             (CAST(hc.datFinalDiagnosisDate AS DATE)
                  BETWEEN @DiagnosisDateFrom AND @DiagnosisDateTo
                             )
                             OR (
                                    @DiagnosisDateFrom IS NULL
                                    OR @DiagnosisDateTo IS NULL
                                )
                         )
                     AND (
                             (CAST(hc.datNotificationDate AS DATE)
                  BETWEEN @NotificationDateFrom AND @NotificationDateTo
                             )
                             OR (
                                    @NotificationDateFrom IS NULL
                                    OR @NotificationDateTo IS NULL
                                )
                         )
                     AND (
                             (CAST(hc.datOnSetDate AS DATE)
                  BETWEEN @DateOfSymptomsOnsetFrom AND @DateOfSymptomsOnsetTo
                             )
                             OR (
                                    @DateOfSymptomsOnsetFrom IS NULL
                                    OR @DateOfSymptomsOnsetTo IS NULL
                                )
                         )
                     AND (
                             (CAST(hc.datFinalCaseClassificationDate AS DATE)
                  BETWEEN @DateOfFinalCaseClassificationFrom AND @DateOfFinalCaseClassificationTo
                             )
                             OR (
                                    @DateOfFinalCaseClassificationFrom IS NULL
                                    OR @DateOfFinalCaseClassificationTo IS NULL
                                )
                         )
                     AND (
                             hc.idfReceivedByOffice = @ReceivedByFacilityID
                             OR @ReceivedByFacilityID IS NULL
                         )
                     AND (
                             hc.idfSentByOffice = @SentByFacilityID
                             OR @SentByFacilityID IS NULL
                         )
                     AND (
                             idfsFinalCaseStatus = @ClassificationTypeID
                             OR @ClassificationTypeID IS NULL
                         )
                     AND (
                             idfsYNHospitalization = @HospitalizationYNID
                             OR @HospitalizationYNID IS NULL
                         )
                     AND (
                             g.Level1ID = @LocationOfExposureAdministrativeLevelID
                             OR g.Level2ID = @LocationOfExposureAdministrativeLevelID
                             OR g.Level3ID = @LocationOfExposureAdministrativeLevelID
                             OR g.Level4ID = @LocationOfExposureAdministrativeLevelID
                             OR g.Level5ID = @LocationOfExposureAdministrativeLevelID
                             OR g.Level6ID = @LocationOfExposureAdministrativeLevelID
                             OR g.Level7ID = @LocationOfExposureAdministrativeLevelID
                             OR @LocationOfExposureAdministrativeLevelID IS NULL
                         )
                     AND (
                             (ISNULL(h.strFirstName, '') = CASE ISNULL(@PatientFirstName, '')
                                                               WHEN '' THEN
                                                                   ISNULL(h.strFirstName, '')
                                                               ELSE
                                                                   @PatientFirstName
                                                           END
                             )
                             OR (CHARINDEX(@PatientFirstName, ISNULL(h.strFirstName, '')) > 0)
                         )
                     AND (
                             (ISNULL(h.strSecondName, '') = CASE ISNULL(@PatientMiddleName, '')
                                                                WHEN '' THEN
                                                                    ISNULL(h.strSecondName, '')
                                                                ELSE
                                                                    @PatientMiddleName
                                                            END
                             )
                             OR (CHARINDEX(@PatientMiddleName, ISNULL(h.strSecondName, '')) > 0)
                         )
                     AND (
                             (ISNULL(h.strLastName, '') = CASE ISNULL(@PatientLastName, '')
                                                              WHEN '' THEN
                                                                  ISNULL(h.strLastName, '')
                                                              ELSE
                                                                  @PatientLastName
                                                          END
                             )
                             OR (CHARINDEX(@PatientLastName, ISNULL(h.strLastName, '')) > 0)
                         )
                     AND (
                             hc.idfsSite = @DataEntrySiteID
                             OR @DataEntrySiteID IS NULL
                         )
                     AND (
                             (
                                 hc.idfOutbreak IS NULL
                                 AND @OutbreakCasesIndicator = 0
                             )
                             OR (
                                    hc.idfOutbreak IS NOT NULL
                                    AND @OutbreakCasesIndicator = 1
                                )
                             OR (@OutbreakCasesIndicator IS NULL)
                         )
                     AND (
                             hc.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
                             OR @ReportID IS NULL
                         )
                     AND (
                             hc.LegacyCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
                             OR @LegacyReportID IS NULL
                         )
                     AND (
                             m.strFieldBarcode LIKE '%' + TRIM(@LocalOrFieldSampleID) + '%'
                             OR @LocalOrFieldSampleID IS NULL
                         )
                     AND (
                             hc.idfsOutcome = @OutcomeID
                             OR @OutcomeID IS NULL
                         )
            GROUP BY hc.idfHumanCase;

            DECLARE @FilteredResults TABLE
            (
                ID BIGINT NOT NULL,
                ReadPermissionIndicator BIT NOT NULL,
                AccessToPersonalDataPermissionIndicator BIT NOT NULL,
                AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
                WritePermissionIndicator BIT NOT NULL,
                DeletePermissionIndicator BIT NOT NULL, INDEX IDX_ID (ID
                                                                     ));

            -- =======================================================================================
            -- DEFAULT SITE FILTRATION RULES
            --
            -- Apply active default site filtration rules for third level sites.
            -- =======================================================================================
            DECLARE @RuleActiveStatus INT = 0;
            DECLARE @AdministrativeLevelTypeID INT;
            DECLARE @DefaultAccessRules AS TABLE
            (
                AccessRuleID BIGINT NOT NULL,
                ActiveIndicator INT NOT NULL,
                ReadPermissionIndicator BIT NOT NULL,
                AccessToPersonalDataPermissionIndicator BIT NOT NULL,
                AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
                WritePermissionIndicator BIT NOT NULL,
                DeletePermissionIndicator BIT NOT NULL,
                AdministrativeLevelTypeID INT NULL
            );

            INSERT INTO @DefaultAccessRules
            SELECT AccessRuleID,
                   a.intRowStatus,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator,
                   a.AdministrativeLevelTypeID
            FROM dbo.AccessRule a
            WHERE DefaultRuleIndicator = 1;

            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
            WHERE AccessRuleID = 10537000;

            IF @RuleActiveStatus = 0
            BEGIN
                SELECT @AdministrativeLevelTypeID = AdministrativeLevelTypeID
                FROM @DefaultAccessRules
                WHERE AccessRuleID = 10537000;

                SELECT @FiltrationSiteAdministrativeLevelID = CASE
                                                                  WHEN @AdministrativeLevelTypeID = 1 THEN
                                                                      g.Level1ID
                                                                  WHEN @AdministrativeLevelTypeID = 2 THEN
                                                                      g.Level2ID
                                                                  WHEN @AdministrativeLevelTypeID = 3 THEN
                                                                      g.Level3ID
                                                                  WHEN @AdministrativeLevelTypeID = 4 THEN
                                                                      g.Level4ID
                                                                  WHEN @AdministrativeLevelTypeID = 5 THEN
                                                                      g.Level5ID
                                                                  WHEN @AdministrativeLevelTypeID = 6 THEN
                                                                      g.Level6ID
                                                                  WHEN @AdministrativeLevelTypeID = 7 THEN
                                                                      g.Level7ID
                                                              END
                FROM dbo.tlbOffice o
                    INNER JOIN dbo.tlbGeoLocationShared l
                        ON l.idfGeoLocationShared = o.idfLocation
                           AND l.intRowStatus = 0
                    INNER JOIN dbo.gisLocationDenormalized g
                        ON g.idfsLocation = l.idfsLocation
                           AND g.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
                WHERE o.intRowStatus = 0
                      AND o.idfOffice = @UserOrganizationID;

                -- Administrative level specified in the rule of the site where the report was created.
                INSERT INTO @FilteredResults
                SELECT h.idfHumanCase,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbHumanCase h
                    INNER JOIN dbo.tstSite s
                        ON h.idfsSite = s.idfsSite
                    INNER JOIN dbo.tlbOffice o
                        ON o.idfOffice = s.idfOffice
                           AND o.intRowStatus = 0
                    INNER JOIN dbo.tlbGeoLocationShared l
                        ON l.idfGeoLocationShared = o.idfLocation
                           AND l.intRowStatus = 0
                    INNER JOIN dbo.gisLocationDenormalized g
                        ON g.idfsLocation = l.idfsLocation
                           AND g.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537000
                WHERE h.intRowStatus = 0
                      AND (
                              g.Level1ID = @FiltrationSiteAdministrativeLevelID
                              AND @AdministrativeLevelTypeID = 1
                              OR g.Level2ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 2
                              OR g.Level3ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 3
                              OR g.Level4ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 4
                              OR g.Level5ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 5
                              OR g.Level6ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 6
                              OR g.Level7ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 7
                          )

                -- Administrative level specified in the rule of the report current residence address.
                INSERT INTO @FilteredResults
                SELECT h.idfHumanCase,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbHumanCase h
                    INNER JOIN dbo.tlbHuman hu
                        ON hu.idfHuman = h.idfHuman
                           AND hu.intRowStatus = 0
                    INNER JOIN dbo.tlbGeoLocation l
                        ON l.idfGeoLocation = hu.idfCurrentResidenceAddress
                           AND l.intRowStatus = 0
                    INNER JOIN dbo.gisLocationDenormalized g
                        ON g.idfsLocation = l.idfsLocation
                           AND g.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537000
                WHERE h.intRowStatus = 0
                      AND (
                              g.Level1ID = @FiltrationSiteAdministrativeLevelID
                              AND @AdministrativeLevelTypeID = 1
                              OR g.Level2ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 2
                              OR g.Level3ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 3
                              OR g.Level4ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 4
                              OR g.Level5ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 5
                              OR g.Level6ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 6
                              OR g.Level7ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 7
                          )

                -- Administrative level specified in the rule of the report location of exposure, 
                -- if corresponding field was filled in.
                INSERT INTO @FilteredResults
                SELECT h.idfHumanCase,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbHumanCase h
                    INNER JOIN dbo.tlbGeoLocation l
                        ON l.idfGeoLocation = h.idfPointGeoLocation
                           AND l.intRowStatus = 0
                    INNER JOIN dbo.gisLocationDenormalized g
                        ON g.idfsLocation = l.idfsLocation
                           AND g.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537000
                WHERE h.intRowStatus = 0
                      AND (
                              g.Level1ID = @FiltrationSiteAdministrativeLevelID
                              AND @AdministrativeLevelTypeID = 1
                              OR g.Level2ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 2
                              OR g.Level3ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 3
                              OR g.Level4ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 4
                              OR g.Level5ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 5
                              OR g.Level6ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 6
                              OR g.Level7ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 7
                          )
            END;

            -- Report data shall be available to all sites' organizations connected to the particular report.
            -- Notification sent by, notification received by, facility where the patient first sought 
            -- care, hospital, and the conducting investigation organizations.
            SELECT @RuleActiveStatus = intRowStatus
            FROM dbo.AccessRule
            WHERE AccessRuleID = 10537001;

            IF @RuleActiveStatus = 0
            BEGIN
                INSERT INTO @FilteredResults
                SELECT h.idfHumanCase,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbHumanCase h
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537001
                WHERE h.intRowStatus = 0
                      AND (
                              h.idfSentByOffice = @UserOrganizationID
                              OR h.idfReceivedByOffice = @UserOrganizationID
                              OR h.idfSoughtCareFacility = @UserOrganizationID
                              OR h.idfHospital = @UserOrganizationID
                              OR h.idfInvestigatedByOffice = @UserOrganizationID
                          )
                ORDER BY h.idfHumanCase;

                -- Sample collected by and sent to organizations
                INSERT INTO @FilteredResults
                SELECT MAX(m.idfHumanCase),
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbMaterial m
                    INNER JOIN dbo.tlbHumanCase h
                        ON h.idfHumanCase = m.idfHumanCase
                           AND h.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537001
                WHERE m.intRowStatus = 0
                      AND (
                              m.idfFieldCollectedByOffice = @UserOrganizationID
                              OR m.idfSendToOffice = @UserOrganizationID
                          )
                GROUP BY m.idfHumanCase,
                         a.ReadPermissionIndicator,
                         a.AccessToPersonalDataPermissionIndicator,
                         a.AccessToGenderAndAgeDataPermissionIndicator,
                         a.WritePermissionIndicator,
                         a.DeletePermissionIndicator;

                -- Sample transferred to organizations
                INSERT INTO @FilteredResults
                SELECT MAX(m.idfHumanCase),
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbMaterial m
                    INNER JOIN dbo.tlbHumanCase h
                        ON h.idfHumanCase = m.idfHumanCase
                           AND h.intRowStatus = 0
                    INNER JOIN dbo.tlbTransferOutMaterial tom
                        ON m.idfMaterial = tom.idfMaterial
                           AND tom.intRowStatus = 0
                    INNER JOIN dbo.tlbTransferOUT t
                        ON tom.idfTransferOut = t.idfTransferOut
                           AND t.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537001
                WHERE m.intRowStatus = 0
                      AND t.idfSendToOffice = @UserOrganizationID
                GROUP BY m.idfHumanCase,
                         a.ReadPermissionIndicator,
                         a.AccessToPersonalDataPermissionIndicator,
                         a.AccessToGenderAndAgeDataPermissionIndicator,
                         a.WritePermissionIndicator,
                         a.DeletePermissionIndicator;
            END;

            --
            -- Report data shall be available to the sites with the connected outbreak, if the report 
            -- is the primary report/session for an outbreak.
            --
            SELECT @RuleActiveStatus = intRowStatus
            FROM dbo.AccessRule
            WHERE AccessRuleID = 10537002;

            IF @RuleActiveStatus = 0
            BEGIN
                INSERT INTO @FilteredResults
                SELECT h.idfHumanCase,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbHumanCase h
                    INNER JOIN dbo.tlbOutbreak o
                        ON h.idfHumanCase = o.idfPrimaryCaseOrSession
                           AND o.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537002
                WHERE h.intRowStatus = 0
                      AND o.idfsSite = @UserSiteID;
            END;

            -- =======================================================================================
            -- CONFIGURABLE SITE FILTRATION RULES
            -- 
            -- Apply configurable site filtration rules for use case SAUC34. Some of these rules may 
            -- overlap the default rules.
            -- =======================================================================================
            --
            -- Apply at the user's site group level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = h.idfsSite
                INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                    ON userSiteGroup.idfsSite = @UserSiteID
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = h.idfsSite
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's employee group level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = h.idfsSite
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's ID level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = h.idfsSite
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site group level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tflSiteToSiteGroup sgs
                    ON sgs.idfsSite = @UserSiteID
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND sgs.idfsSite = h.idfsSite;

            -- 
            -- Apply at the user's site level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteID = h.idfsSite;

            -- 
            -- Apply at the user's employee group level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteID = h.idfsSite;

            -- 
            -- Apply at the user's ID level, granted by a site.
            ----
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteID = h.idfsSite;

            -- Copy filtered results to results and use search criteria
            INSERT INTO @Results
            SELECT ID,
                   ReadPermissionIndicator,
                   AccessToPersonalDataPermissionIndicator,
                   AccessToGenderAndAgeDataPermissionIndicator,
                   WritePermissionIndicator,
                   DeletePermissionIndicator
            FROM @FilteredResults
                INNER JOIN dbo.tlbHumanCase hc
                    ON hc.idfHumanCase = ID
                INNER JOIN dbo.tlbHuman h
                    ON h.idfHuman = hc.idfHuman
                       AND h.intRowStatus = 0
                INNER JOIN dbo.tlbHumanActual ha
                    ON ha.idfHumanActual = h.idfHumanActual
                       AND ha.intRowStatus = 0
                INNER JOIN dbo.tlbGeoLocation currentAddress
                    ON currentAddress.idfGeoLocation = h.idfCurrentResidenceAddress
                LEFT JOIN dbo.gisLocationDenormalized g
                    ON g.idfsLocation = currentAddress.idfsLocation
                       AND g.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
                LEFT JOIN dbo.tlbMaterial m
                    ON m.idfHumanCase = hc.idfHumanCase
                       AND m.intRowStatus = 0
                LEFT JOIN dbo.tlbGeoLocation exposure
                    ON exposure.idfGeoLocation = hc.idfPointGeoLocation
                LEFT JOIN dbo.gisLocationDenormalized gExposure
                    ON gExposure.idfsLocation = exposure.idfsLocation
                       AND gExposure.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
            WHERE hc.intRowStatus = 0
                  AND hc.idfsFinalDiagnosis IS NOT NULL
                  AND (
                          hc.idfHumanCase = @ReportKey
                          OR @ReportKey IS NULL
                      )
                  AND (
                          hc.idfParentMonitoringSession = @SessionKey
                          OR @SessionKey IS NULL
                      )
                  AND (
                          ha.idfHumanActual = @PatientID
                          OR @PatientID IS NULL
                      )
                  AND (
                          h.strPersonId = @PersonID
                          OR @PersonID IS NULL
                      )
                  AND (
                          idfsFinalDiagnosis = @DiseaseID
                          OR @DiseaseID IS NULL
                      )
                  AND (
                          idfsCaseProgressStatus = @ReportStatusTypeID
                          OR @ReportStatusTypeID IS NULL
                      )
                  AND (
                          g.Level1ID = @AdministrativeLevelID
                          OR g.Level2ID = @AdministrativeLevelID
                          OR g.Level3ID = @AdministrativeLevelID
                          OR g.Level4ID = @AdministrativeLevelID
                          OR g.Level5ID = @AdministrativeLevelID
                          OR g.Level6ID = @AdministrativeLevelID
                          OR g.Level7ID = @AdministrativeLevelID
                          OR @AdministrativeLevelID IS NULL
                      )
                  AND (
                          (CAST(hc.datEnteredDate AS DATE)
                  BETWEEN @DateEnteredFrom AND @DateEnteredTo
                          )
                          OR (
                                 @DateEnteredFrom IS NULL
                                 OR @DateEnteredTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datFinalDiagnosisDate AS DATE)
                  BETWEEN @DiagnosisDateFrom AND @DiagnosisDateTo
                          )
                          OR (
                                 @DiagnosisDateFrom IS NULL
                                 OR @DiagnosisDateTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datNotificationDate AS DATE)
                  BETWEEN @NotificationDateFrom AND @NotificationDateTo
                          )
                          OR (
                                 @NotificationDateFrom IS NULL
                                 OR @NotificationDateTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datOnSetDate AS DATE)
                  BETWEEN @DateOfSymptomsOnsetFrom AND @DateOfSymptomsOnsetTo
                          )
                          OR (
                                 @DateOfSymptomsOnsetFrom IS NULL
                                 OR @DateOfSymptomsOnsetTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datFinalCaseClassificationDate AS DATE)
                  BETWEEN @DateOfFinalCaseClassificationFrom AND @DateOfFinalCaseClassificationTo
                          )
                          OR (
                                 @DateOfFinalCaseClassificationFrom IS NULL
                                 OR @DateOfFinalCaseClassificationTo IS NULL
                             )
                      )
                  AND (
                          hc.idfReceivedByOffice = @ReceivedByFacilityID
                          OR @ReceivedByFacilityID IS NULL
                      )
                  AND (
                          hc.idfSentByOffice = @SentByFacilityID
                          OR @SentByFacilityID IS NULL
                      )
                  AND (
                          idfsFinalCaseStatus = @ClassificationTypeID
                          OR @ClassificationTypeID IS NULL
                      )
                  AND (
                          idfsYNHospitalization = @HospitalizationYNID
                          OR @HospitalizationYNID IS NULL
                      )
                  AND (
                          g.Level1ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level2ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level3ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level4ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level5ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level6ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level7ID = @LocationOfExposureAdministrativeLevelID
                          OR @LocationOfExposureAdministrativeLevelID IS NULL
                      )
                  AND (
                          (ISNULL(h.strFirstName, '') = CASE ISNULL(@PatientFirstName, '')
                                                            WHEN '' THEN
                                                                ISNULL(h.strFirstName, '')
                                                            ELSE
                                                                @PatientFirstName
                                                        END
                          )
                          OR (CHARINDEX(@PatientFirstName, ISNULL(h.strFirstName, '')) > 0)
                      )
                  AND (
                          (ISNULL(h.strSecondName, '') = CASE ISNULL(@PatientMiddleName, '')
                                                             WHEN '' THEN
                                                                 ISNULL(h.strSecondName, '')
                                                             ELSE
                                                                 @PatientMiddleName
                                                         END
                          )
                          OR (CHARINDEX(@PatientMiddleName, ISNULL(h.strSecondName, '')) > 0)
                      )
                  AND (
                          (ISNULL(h.strLastName, '') = CASE ISNULL(@PatientLastName, '')
                                                           WHEN '' THEN
                                                               ISNULL(h.strLastName, '')
                                                           ELSE
                                                               @PatientLastName
                                                       END
                          )
                          OR (CHARINDEX(@PatientLastName, ISNULL(h.strLastName, '')) > 0)
                      )
                  AND (
                          hc.idfsSite = @DataEntrySiteID
                          OR @DataEntrySiteID IS NULL
                      )
                  AND (
                          (
                              hc.idfOutbreak IS NULL
                              AND @OutbreakCasesIndicator = 0
                          )
                          OR (
                                 hc.idfOutbreak IS NOT NULL
                                 AND @OutbreakCasesIndicator = 1
                             )
                          OR (@OutbreakCasesIndicator IS NULL)
                      )
                  AND (
                          hc.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
                          OR @ReportID IS NULL
                      )
                  AND (
                          hc.LegacyCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
                          OR @LegacyReportID IS NULL
                      )
                  AND (
                          m.strFieldBarcode LIKE '%' + TRIM(@LocalOrFieldSampleID) + '%'
                          OR @LocalOrFieldSampleID IS NULL
                      )
                  AND (
                          hc.idfsOutcome = @OutcomeID
                          OR @OutcomeID IS NULL
                      )
            GROUP BY ID,
                     ReadPermissionIndicator,
                     AccessToPersonalDataPermissionIndicator,
                     AccessToGenderAndAgeDataPermissionIndicator,
                     WritePermissionIndicator,
                     DeletePermissionIndicator;
        END;

        -- =======================================================================================
        -- Remove "Outbreak" tied disease reports, if filtering is needed
        -- =======================================================================================
        IF @FilterOutbreakTiedReports = 1
        BEGIN
            DELETE I
            FROM @Results I
                INNER JOIN dbo.tlbHumanCase hc
                    ON hc.idfHumanCase = I.ID
            WHERE hc.idfOutbreak IS NOT NULL;
        END;

        -- =======================================================================================
        -- DISEASE FILTRATION RULES
        --
        -- Apply disease filtration rules from use case SAUC62.
        -- =======================================================================================
        -- 
        -- Apply level 0 disease filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --

        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT h.idfHumanCase
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = h.idfsFinalDiagnosis
                       AND oa.intRowStatus = 0
            WHERE oa.intPermission = 1
                  AND oa.idfsObjectType = 10060001 -- Disease
                  AND oa.idfActor = -506 -- Default role
        );

        --
        -- Apply level 1 disease filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        INSERT INTO @Results
        SELECT hc.idfHumanCase,
               1,
               1,
               1,
               1,
               1
        FROM dbo.tlbHumanCase hc
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = hc.idfsFinalDiagnosis
                   AND oa.intRowStatus = 0
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.tlbHuman h
                ON h.idfHuman = hc.idfHuman
                   AND h.intRowStatus = 0
            INNER JOIN dbo.tlbGeoLocation currentAddress
                ON currentAddress.idfGeoLocation = h.idfCurrentResidenceAddress
            LEFT JOIN dbo.gisLocationDenormalized g
                ON g.idfsLocation = currentAddress.idfsLocation
                   AND g.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
            LEFT JOIN dbo.tlbMaterial m
                ON m.idfHumanCase = hc.idfHumanCase
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbGeoLocation exposure
                ON exposure.idfGeoLocation = hc.idfPointGeoLocation
            LEFT JOIN dbo.gisLocationDenormalized gExposure
                ON gExposure.idfsLocation = exposure.idfsLocation
                   AND gExposure.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
        WHERE oa.intPermission = 2 -- Allow permission
              AND hc.intRowStatus = 0
              AND oa.idfsObjectType = 10060001 -- Disease
              AND oa.idfActor = egm.idfEmployeeGroup
              AND hc.idfsFinalDiagnosis IS NOT NULL
              AND (
                      hc.idfHumanCase = @ReportKey
                      OR @ReportKey IS NULL
                  )
              AND (
                      hc.idfParentMonitoringSession = @SessionKey
                      OR @SessionKey IS NULL
                  )
              AND (
                      h.idfHumanActual = @PatientID
                      OR @PatientID IS NULL
                  )
              AND (
                      h.strPersonId = @PersonID
                      OR @PersonID IS NULL
                  )
              AND (
                      idfsFinalDiagnosis = @DiseaseID
                      OR @DiseaseID IS NULL
                  )
              AND (
                      idfsCaseProgressStatus = @ReportStatusTypeID
                      OR @ReportStatusTypeID IS NULL
                  )
              AND (
                      g.Level1ID = @AdministrativeLevelID
                      OR g.Level2ID = @AdministrativeLevelID
                      OR g.Level3ID = @AdministrativeLevelID
                      OR g.Level4ID = @AdministrativeLevelID
                      OR g.Level5ID = @AdministrativeLevelID
                      OR g.Level6ID = @AdministrativeLevelID
                      OR g.Level7ID = @AdministrativeLevelID
                      OR @AdministrativeLevelID IS NULL
                  )
              AND (
                      (CAST(hc.datEnteredDate AS DATE)
              BETWEEN @DateEnteredFrom AND @DateEnteredTo
                      )
                      OR (
                             @DateEnteredFrom IS NULL
                             OR @DateEnteredTo IS NULL
                         )
                  )
              AND (
                      (CAST(hc.datFinalDiagnosisDate AS DATE)
              BETWEEN @DiagnosisDateFrom AND @DiagnosisDateTo
                      )
                      OR (
                             @DiagnosisDateFrom IS NULL
                             OR @DiagnosisDateTo IS NULL
                         )
                  )
              AND (
                      (CAST(hc.datNotificationDate AS DATE)
              BETWEEN @NotificationDateFrom AND @NotificationDateTo
                      )
                      OR (
                             @NotificationDateFrom IS NULL
                             OR @NotificationDateTo IS NULL
                         )
                  )
              AND (
                      (CAST(hc.datOnSetDate AS DATE)
              BETWEEN @DateOfSymptomsOnsetFrom AND @DateOfSymptomsOnsetTo
                      )
                      OR (
                             @DateOfSymptomsOnsetFrom IS NULL
                             OR @DateOfSymptomsOnsetTo IS NULL
                         )
                  )
              AND (
                      (CAST(hc.datFinalCaseClassificationDate AS DATE)
              BETWEEN @DateOfFinalCaseClassificationFrom AND @DateOfFinalCaseClassificationTo
                      )
                      OR (
                             @DateOfFinalCaseClassificationFrom IS NULL
                             OR @DateOfFinalCaseClassificationTo IS NULL
                         )
                  )
              AND (
                      hc.idfReceivedByOffice = @ReceivedByFacilityID
                      OR @ReceivedByFacilityID IS NULL
                  )
              AND (
                      hc.idfSentByOffice = @SentByFacilityID
                      OR @SentByFacilityID IS NULL
                  )
              AND (
                      idfsFinalCaseStatus = @ClassificationTypeID
                      OR @ClassificationTypeID IS NULL
                  )
              AND (
                      idfsYNHospitalization = @HospitalizationYNID
                      OR @HospitalizationYNID IS NULL
                  )
              AND (
                      g.Level1ID = @LocationOfExposureAdministrativeLevelID
                      OR g.Level2ID = @LocationOfExposureAdministrativeLevelID
                      OR g.Level3ID = @LocationOfExposureAdministrativeLevelID
                      OR g.Level4ID = @LocationOfExposureAdministrativeLevelID
                      OR g.Level5ID = @LocationOfExposureAdministrativeLevelID
                      OR g.Level6ID = @LocationOfExposureAdministrativeLevelID
                      OR g.Level7ID = @LocationOfExposureAdministrativeLevelID
                      OR @LocationOfExposureAdministrativeLevelID IS NULL
                  )
              AND (
                      (ISNULL(h.strFirstName, '') = CASE ISNULL(@PatientFirstName, '')
                                                        WHEN '' THEN
                                                            ISNULL(h.strFirstName, '')
                                                        ELSE
                                                            @PatientFirstName
                                                    END
                      )
                      OR (CHARINDEX(@PatientFirstName, ISNULL(h.strFirstName, '')) > 0)
                  )
              AND (
                      (ISNULL(h.strSecondName, '') = CASE ISNULL(@PatientMiddleName, '')
                                                         WHEN '' THEN
                                                             ISNULL(h.strSecondName, '')
                                                         ELSE
                                                             @PatientMiddleName
                                                     END
                      )
                      OR (CHARINDEX(@PatientMiddleName, ISNULL(h.strSecondName, '')) > 0)
                  )
              AND (
                      (ISNULL(h.strLastName, '') = CASE ISNULL(@PatientLastName, '')
                                                       WHEN '' THEN
                                                           ISNULL(h.strLastName, '')
                                                       ELSE
                                                           @PatientLastName
                                                   END
                      )
                      OR (CHARINDEX(@PatientLastName, ISNULL(h.strLastName, '')) > 0)
                  )
              AND (
                      hc.idfsSite = @DataEntrySiteID
                      OR @DataEntrySiteID IS NULL
                  )
              AND (
                      (
                          hc.idfOutbreak IS NULL
                          AND @OutbreakCasesIndicator = 0
                      )
                      OR (
                             hc.idfOutbreak IS NOT NULL
                             AND @OutbreakCasesIndicator = 1
                         )
                      OR (@OutbreakCasesIndicator IS NULL)
                  )
              AND (
                      hc.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
                      OR @ReportID IS NULL
                  )
              AND (
                      hc.LegacyCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
                      OR @LegacyReportID IS NULL
                  )
              AND (
                      m.strFieldBarcode LIKE '%' + TRIM(@LocalOrFieldSampleID) + '%'
                      OR @LocalOrFieldSampleID IS NULL
                  )
              AND (
                      hc.idfsOutcome = @OutcomeID
                      OR @OutcomeID IS NULL
                  )
        GROUP BY hc.idfHumanCase;

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbHumanCase hc
                ON hc.idfHumanCase = res.ID
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = hc.idfsFinalDiagnosis
                   AND oa.intRowStatus = 0
        WHERE oa.intPermission = 1
              AND oa.idfsObjectType = 10060001 -- Disease
              AND oa.idfActor = egm.idfEmployeeGroup;

        --
        -- Apply level 2 disease filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        INSERT INTO @Results
        SELECT hc.idfHumanCase,
               1,
               1,
               1,
               1,
               1
        FROM dbo.tlbHumanCase hc
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = hc.idfsFinalDiagnosis
                   AND oa.intRowStatus = 0
            INNER JOIN dbo.tlbHuman h
                ON h.idfHuman = hc.idfHuman
                   AND h.intRowStatus = 0
            INNER JOIN dbo.tlbGeoLocation currentAddress
                ON currentAddress.idfGeoLocation = h.idfCurrentResidenceAddress
            LEFT JOIN dbo.gisLocationDenormalized g
                ON g.idfsLocation = currentAddress.idfsLocation
                   AND g.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
            LEFT JOIN dbo.tlbMaterial m
                ON m.idfHumanCase = hc.idfHumanCase
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbGeoLocation exposure
                ON exposure.idfGeoLocation = hc.idfPointGeoLocation
            LEFT JOIN dbo.gisLocationDenormalized gExposure
                ON gExposure.idfsLocation = exposure.idfsLocation
                   AND gExposure.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
        WHERE oa.intPermission = 2 -- Allow permission
              AND hc.intRowStatus = 0
              AND oa.idfsObjectType = 10060001 -- Disease
              AND oa.idfActor = @UserEmployeeID
              AND hc.idfsFinalDiagnosis IS NOT NULL
              AND (
                      hc.idfHumanCase = @ReportKey
                      OR @ReportKey IS NULL
                  )
              AND (
                      hc.idfParentMonitoringSession = @SessionKey
                      OR @SessionKey IS NULL
                  )
              AND (
                      h.idfHumanActual = @PatientID
                      OR @PatientID IS NULL
                  )
              AND (
                      h.strPersonId = @PersonID
                      OR @PersonID IS NULL
                  )
              AND (
                      idfsFinalDiagnosis = @DiseaseID
                      OR @DiseaseID IS NULL
                  )
              AND (
                      idfsCaseProgressStatus = @ReportStatusTypeID
                      OR @ReportStatusTypeID IS NULL
                  )
              AND (
                      g.Level1ID = @AdministrativeLevelID
                      OR g.Level2ID = @AdministrativeLevelID
                      OR g.Level3ID = @AdministrativeLevelID
                      OR g.Level4ID = @AdministrativeLevelID
                      OR g.Level5ID = @AdministrativeLevelID
                      OR g.Level6ID = @AdministrativeLevelID
                      OR g.Level7ID = @AdministrativeLevelID
                      OR @AdministrativeLevelID IS NULL
                  )
              AND (
                      (CAST(hc.datEnteredDate AS DATE)
              BETWEEN @DateEnteredFrom AND @DateEnteredTo
                      )
                      OR (
                             @DateEnteredFrom IS NULL
                             OR @DateEnteredTo IS NULL
                         )
                  )
              AND (
                      (CAST(hc.datFinalDiagnosisDate AS DATE)
              BETWEEN @DiagnosisDateFrom AND @DiagnosisDateTo
                      )
                      OR (
                             @DiagnosisDateFrom IS NULL
                             OR @DiagnosisDateTo IS NULL
                         )
                  )
              AND (
                      (CAST(hc.datNotificationDate AS DATE)
              BETWEEN @NotificationDateFrom AND @NotificationDateTo
                      )
                      OR (
                             @NotificationDateFrom IS NULL
                             OR @NotificationDateTo IS NULL
                         )
                  )
              AND (
                      (CAST(hc.datOnSetDate AS DATE)
              BETWEEN @DateOfSymptomsOnsetFrom AND @DateOfSymptomsOnsetTo
                      )
                      OR (
                             @DateOfSymptomsOnsetFrom IS NULL
                             OR @DateOfSymptomsOnsetTo IS NULL
                         )
                  )
              AND (
                      (CAST(hc.datFinalCaseClassificationDate AS DATE)
              BETWEEN @DateOfFinalCaseClassificationFrom AND @DateOfFinalCaseClassificationTo
                      )
                      OR (
                             @DateOfFinalCaseClassificationFrom IS NULL
                             OR @DateOfFinalCaseClassificationTo IS NULL
                         )
                  )
              AND (
                      hc.idfReceivedByOffice = @ReceivedByFacilityID
                      OR @ReceivedByFacilityID IS NULL
                  )
              AND (
                      hc.idfSentByOffice = @SentByFacilityID
                      OR @SentByFacilityID IS NULL
                  )
              AND (
                      idfsFinalCaseStatus = @ClassificationTypeID
                      OR @ClassificationTypeID IS NULL
                  )
              AND (
                      idfsYNHospitalization = @HospitalizationYNID
                      OR @HospitalizationYNID IS NULL
                  )
              AND (
                      g.Level1ID = @LocationOfExposureAdministrativeLevelID
                      OR g.Level2ID = @LocationOfExposureAdministrativeLevelID
                      OR g.Level3ID = @LocationOfExposureAdministrativeLevelID
                      OR g.Level4ID = @LocationOfExposureAdministrativeLevelID
                      OR g.Level5ID = @LocationOfExposureAdministrativeLevelID
                      OR g.Level6ID = @LocationOfExposureAdministrativeLevelID
                      OR g.Level7ID = @LocationOfExposureAdministrativeLevelID
                      OR @LocationOfExposureAdministrativeLevelID IS NULL
                  )
              AND (
                      (ISNULL(h.strFirstName, '') = CASE ISNULL(@PatientFirstName, '')
                                                        WHEN '' THEN
                                                            ISNULL(h.strFirstName, '')
                                                        ELSE
                                                            @PatientFirstName
                                                    END
                      )
                      OR (CHARINDEX(@PatientFirstName, ISNULL(h.strFirstName, '')) > 0)
                  )
              AND (
                      (ISNULL(h.strSecondName, '') = CASE ISNULL(@PatientMiddleName, '')
                                                         WHEN '' THEN
                                                             ISNULL(h.strSecondName, '')
                                                         ELSE
                                                             @PatientMiddleName
                                                     END
                      )
                      OR (CHARINDEX(@PatientMiddleName, ISNULL(h.strSecondName, '')) > 0)
                  )
              AND (
                      (ISNULL(h.strLastName, '') = CASE ISNULL(@PatientLastName, '')
                                                       WHEN '' THEN
                                                           ISNULL(h.strLastName, '')
                                                       ELSE
                                                           @PatientLastName
                                                   END
                      )
                      OR (CHARINDEX(@PatientLastName, ISNULL(h.strLastName, '')) > 0)
                  )
              AND (
                      hc.idfsSite = @DataEntrySiteID
                      OR @DataEntrySiteID IS NULL
                  )
              AND (
                      (
                          hc.idfOutbreak IS NULL
                          AND @OutbreakCasesIndicator = 0
                      )
                      OR (
                             hc.idfOutbreak IS NOT NULL
                             AND @OutbreakCasesIndicator = 1
                         )
                      OR (@OutbreakCasesIndicator IS NULL)
                  )
              AND (
                      hc.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
                      OR @ReportID IS NULL
                  )
              AND (
                      hc.LegacyCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
                      OR @LegacyReportID IS NULL
                  )
              AND (
                      m.strFieldBarcode LIKE '%' + TRIM(@LocalOrFieldSampleID) + '%'
                      OR @LocalOrFieldSampleID IS NULL
                  )
              AND (
                      hc.idfsOutcome = @OutcomeID
                      OR @OutcomeID IS NULL
                  )
        GROUP BY hc.idfHumanCase;

        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT hc.idfHumanCase
            FROM dbo.tlbHumanCase hc
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = hc.idfsFinalDiagnosis
                       AND oa.intRowStatus = 0
            WHERE intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060001 -- Disease
                  AND idfActor = @UserEmployeeID
        );

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        INSERT INTO @FinalResults
        SELECT ID,
               ReadPermissionIndicator,
               AccessToPersonalDataPermissionIndicator,
               AccessToGenderAndAgeDataPermissionIndicator,
               WritePermissionIndicator,
               DeletePermissionIndicator
        FROM @Results res
        WHERE res.ReadPermissionIndicator = 1
        GROUP BY ID,
                 ReadPermissionIndicator,
                 AccessToPersonalDataPermissionIndicator,
                 AccessToGenderAndAgeDataPermissionIndicator,
                 WritePermissionIndicator,
                 DeletePermissionIndicator;


        WITH paging
        AS (SELECT ROW_NUMBER() OVER (ORDER BY CASE
                                                   WHEN @SortColumn = 'ReportID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       hc.strCaseID
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'ReportID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       hc.strCaseID
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'EnteredDate'
                                                        AND @SortOrder = 'ASC' THEN
                                                       hc.datEnteredDate
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EnteredDate'
                                                        AND @SortOrder = 'DESC' THEN
                                                       hc.datEnteredDate
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'DiseaseName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       disease.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'DiseaseName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       disease.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'PersonName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       ISNULL(h.strLastName, N'') + ISNULL(', ' + h.strFirstName, N'')
                                                       + ISNULL(' ' + h.strSecondName, N'')
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'PersonName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       ISNULL(h.strLastName, N'') + ISNULL(', ' + h.strFirstName, N'')
                                                       + ISNULL(' ' + h.strSecondName, N'')
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'PersonLocation'
                                                        AND @SortOrder = 'ASC' THEN
                                               (LH.AdminLevel1Name + ', ' + LH.AdminLevel2Name)
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'PersonLocation'
                                                        AND @SortOrder = 'DESC' THEN
                                               (LH.AdminLevel1Name + ', ' + LH.AdminLevel2Name)
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'ClassificationTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       finalClassification.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'ClassificationTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       finalClassification.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'ReportStatusTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       reportStatus.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'ReportStatusTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       reportStatus.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'LegacyReportID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       hc.LegacyCaseID
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'LegacyReportID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       hc.LegacyCaseID
                                               END DESC
                                     ) AS ROWNUM,
                   res.ID AS ReportKey,
                   hc.strCaseId AS ReportID,
                   hc.LegacyCaseID AS LegacyReportID,
                   reportStatus.name AS ReportStatusTypeName,
                   reportType.name AS ReportTypeName,
                   hc.datTentativeDiagnosisDate AS TentativeDiagnosisDate,
                   hc.datFinalDiagnosisDate AS FinalDiagnosisDate,
                   ISNULL(finalClassification.name, initialClassification.name) AS ClassificationTypeName,
                   finalClassification.name AS FinalClassificationTypeName,
                   hc.datOnSetDate AS DateOfOnset,
                   hc.idfsFinalDiagnosis AS DiseaseID,
                   disease.Name AS DiseaseName,
                   h.idfHumanActual AS PersonMasterID,
                   hc.idfHuman AS PersonKey,
                   haai.EIDSSPersonID AS PersonID,
                   h.strPersonID AS PersonalID,
                   dbo.FN_GBL_ConcatFullName(h.strLastName, h.strFirstName, h.strSecondName) AS PersonName,
                   ISNULL(LH.AdminLevel1Name, '') + IIF(LH.AdminLevel2Name IS NULL, '', ', ')
                   + ISNULL(LH.AdminLevel2Name, '') AS PersonLocation,
                   ha.strEmployerName AS EmployerName,
                   hc.datEnteredDate AS EnteredDate,
                   ISNULL(p.strFamilyName, N'') + ISNULL(', ' + p.strFirstName, N'')
                   + ISNULL(' ' + p.strSecondName, N'') AS EnteredByPersonName,
                   hc.datModificationDate AS ModificationDate,
                   ISNULL(hospitalization.name, hospitalization.strDefault) AS HospitalizationStatus,
                   hc.idfsSite AS SiteID,
                   res.ReadPermissionIndicator AS ReadPermissionIndicator,
                   res.AccessToPersonalDataPermissionIndicator AS AccessToPersonalDataPermissionIndicator,
                   res.AccessToGenderAndAgeDataPermissionIndicator AS AccessToGenderAndAgeDataPermissionIndicator,
                   res.WritePermissionIndicator AS WritePermissionIndicator,
                   res.DeletePermissionIndicator AS DeletePermissionIndicator,
                   COUNT(*) OVER () AS RecordCount,
                   (
                       SELECT COUNT(*) FROM dbo.tlbHumanCase hc WHERE hc.intRowStatus = 0
                   ) AS TotalCount,
                   LH.AdminLevel2Name AS Region,
                   LH.AdminLevel3Name AS Rayon
            FROM @FinalResults res
                INNER JOIN dbo.tlbHumanCase hc
                    ON hc.idfHumanCase = res.ID
                INNER JOIN dbo.tlbHuman h
                    ON h.idfHuman = hc.idfHuman
                       AND h.intRowStatus = 0
                INNER JOIN dbo.tlbHumanActual ha
                    ON ha.idfHumanActual = h.idfHumanActual
                       AND ha.intRowStatus = 0
                LEFT JOIN dbo.tlbGeoLocation gl
                    ON gl.idfGeoLocation = h.idfCurrentResidenceAddress
                LEFT JOIN dbo.gisLocation g
                    ON g.idfsLocation = gl.idfsLocation
                LEFT JOIN FN_GBL_LocationHierarchy_Flattened(@LanguageID) LH
                    ON LH.idfsLocation = gl.idfsLocation
                LEFT JOIN dbo.HumanActualAddlInfo haai
                    ON haai.HumanActualAddlInfoUID = ha.idfHumanActual
                       AND haai.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000019) disease
                    ON disease.idfsReference = hc.idfsFinalDiagnosis
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000011) initialClassification
                    ON initialClassification.idfsReference = hc.idfsInitialCaseStatus
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000011) finalClassification
                    ON finalClassification.idfsReference = hc.idfsFinalCaseStatus
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000111) reportStatus
                    ON reportStatus.idfsReference = hc.idfsCaseProgressStatus
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000144) reportType
                    ON reportType.idfsReference = hc.DiseaseReportTypeID
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000041) hospitalization
                    ON hospitalization.idfsReference = idfsHospitalizationStatus
                LEFT JOIN dbo.tlbPerson p
                    ON p.idfPerson = hc.idfPersonEnteredBy
                       AND p.intRowStatus = 0
           )
        SELECT ReportKey,
               ReportID,
               LegacyReportID,
               ReportStatusTypeName,
               ReportTypeName,
               TentativeDiagnosisDate,
               FinalDiagnosisDate,
               ClassificationTypeName,
               FinalClassificationTypeName,
               DateOfOnset,
               DiseaseID,
               DiseaseName,
               PersonMasterID,
               PersonKey,
               PersonID,
               PersonalID,
               PersonName,
               PersonLocation,
               EmployerName,
               EnteredDate,
               EnteredByPersonName,
               ModificationDate,
               HospitalizationStatus,
               SiteID,
               ReadPermissionIndicator,
               AccessToPersonalDataPermissionIndicator,
               AccessToGenderAndAgeDataPermissionIndicator,
               WritePermissionIndicator,
               DeletePermissionIndicator,
               RecordCount,
               TotalCount,
               TotalPages = (RecordCount / @PageSize) + IIF(RecordCount % @PageSize > 0, 1, 0),
               CurrentPage = @Page,
               Region,
               Rayon
        FROM paging
        WHERE RowNum > @firstRec
              AND RowNum < @lastRec;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USP_HUM_HUMAN_DISEASE_DEL]...';


GO
--*************************************************************
-- Name 				:	USP_HUM_HUMAN_DISEASE_DEL
-- Description			:	delete human disease record
--          
-- Author               :	Jeff Johnson
-- Revision History
--	Name			Date			Change Detail
--	JWJ				20180508		created
--	Mark Wilson		20220526		updated the logic to support multiple testing records
--   Ann Xiong       11/01/2022		Updated to display message and not delete the disease report when the disease report is associated with an Outbreak Session 
--    								or when the disease report is associated with at least one child object (Test or Sample)
--
---exec USP_HUM_HUMAN_DISEASE_DEL yourTlbHumanCaseId
--*************************************************************
ALTER PROCEDURE [dbo].[USP_HUM_HUMAN_DISEASE_DEL]
(
	@idfHumanCase	BIGINT  -- tlbHumanCase.idfHumanCase Primary Key
	,@DeduplicationIndicator BIT = 0
)
AS
DECLARE @returnCode					INT = 0 
DECLARE	@returnMsg					NVARCHAR(MAX) = 'SUCCESS' 
BEGIN

	BEGIN TRY

		BEGIN TRANSACTION

		DECLARE @NonLaboratoryTestIndicator INT = 1

		DECLARE @SampleCount AS INT = 0
			,@TestCount AS INT = 0
			,@OutbreakSessionCount AS INT = 0;

		SELECT @SampleCount = COUNT(*)
		FROM dbo.tlbMaterial
		WHERE idfHumanCase = @idfHumanCase
			AND intRowStatus = 0;

		SELECT @TestCount = COUNT(*)
		FROM dbo.tlbTesting t
		INNER JOIN dbo.tlbMaterial m ON m.idfMaterial = t.idfMaterial
			AND m.intRowStatus = 0
		WHERE m.idfHumanCase = @idfHumanCase
			AND t.intRowStatus = 0;

		SELECT @OutbreakSessionCount = COUNT(*)
		FROM dbo.tlbHumanCase v
		INNER JOIN dbo.tlbOutbreak o ON o.idfOutbreak = v.idfOutbreak
			AND o.intRowStatus = 0
		WHERE v.idfHumanCase = @idfHumanCase
			AND v.idfOutbreak IS NOT NULL

		IF @DeduplicationIndicator = 0
		BEGIN
			IF @SampleCount = 0
				AND @TestCount = 0
				AND @OutbreakSessionCount = 0
			BEGIN
				UPDATE dbo.tlbHumanCase
				SET intRowStatus = 1						
				WHERE	idfHumanCase = @idfHumanCase
				AND		intRowStatus = 0
			
				-- Continue deleting the child records

				-- Delete Location of Exposure
				UPDATE tg
				SET tg.intRowStatus = 1
				FROM dbo.tlbGeoLocation tg
				INNER JOIN dbo.tlbHumanCase thc ON thc.idfPointGeoLocation = tg.idfGeoLocation
				WHERE thc.idfHumanCase = @idfHumanCase

				--Delete from HumanDiseaseReportRelationship
				UPDATE hrr
				SET hrr.intRowStatus = 0
				FROM dbo.HumanDiseaseReportRelationship hrr 
				WHERE hrr.HumanDiseaseReportID = @idfHumanCase

				-- Delete from Antiviral Therapy
				UPDATE tat
				SET tat.intRowStatus = 1
				FROM dbo.tlbAntimicrobialTherapy tat
				WHERE tat.idfHumanCase = @idfHumanCase

				-- Delete from Human Disease Report Vaccination
				UPDATE hrv
				SET hrv.intRowStatus = 1
				FROM dbo.HumanDiseaseReportVaccination hrv
				WHERE hrv.idfHumanCase = @idfHumanCase

				-- Delete from Contacted Case Person
				UPDATE tccp
				SET tccp.intRowStatus = 1
				FROM dbo.tlbContactedCasePerson tccp
				WHERE tccp.idfHumanCase = @idfHumanCase

				--If record is being soft-deleted, then check if the test record was originally created 
				--in the laboaratory module.  If it was, then disassociate the test record from the 
				--human disease Report, so that the test record remains in the laboratory module 
				--for further action.
---------------------------------------------------------------------------------------------------------------
				-- updated the logic to support multiple testing records
				SET @NonLaboratoryTestIndicator = 1
				IF EXISTS 
				(
					SELECT tt.blnNonLaboratoryTest 
					FROM dbo.tlbTesting tt
					INNER JOIN dbo.tlbMaterial tm ON tt.idfMaterial = tm.idfMaterial AND tm.idfHumanCase = @idfHumanCase
					WHERE tt.blnNonLaboratoryTest = 0
				)
				SET @NonLaboratoryTestIndicator = 0

				IF @NonLaboratoryTestIndicator = 1 -- Okay to delete
				BEGIN
						-- Delete samples
						UPDATE tm
						SET tm.intRowStatus = 1
						FROM dbo.tlbMaterial tm WHERE tm.idfHumanCase = @idfHumanCase

						-- Delete tests
						UPDATE tt
						SET tt.intRowStatus = 1
						FROM dbo.tlbTesting tt
						INNER JOIN dbo.tlbMaterial tm ON tt.idfMaterial = tm.idfMaterial
						WHERE tm.idfHumanCase = @idfHumanCase

						-- Delete test valiation
						UPDATE tv
						SET tv.intRowStatus = 1
						FROM dbo.tlbTestValidation tv
						INNER JOIN dbo.tlbTesting tt ON tt.idfTesting = tv.idfTesting
						INNER JOIN dbo.tlbMaterial tm ON tt.idfMaterial = tm.idfMaterial
						WHERE tm.idfHumanCase = @idfHumanCase
				END
				ELSE -- Disassociate Samples from Human Case
				BEGIN
						UPDATE dbo.tlbMaterial
						SET idfHumanCase = NULL
						WHERE idfHumanCase= @idfHumanCase
				END
			END
			ELSE
			BEGIN
				IF @OutbreakSessionCount > 0
				BEGIN
					SET @ReturnCode = 2;
					SET @ReturnMsg = 'Unable to delete this record as it is associated with an Outbreak Session.';
				END;
				ELSE
				BEGIN
					SET @ReturnCode = 1;
					SET @ReturnMsg = 'Unable to delete this record as it contains dependent child objects.';
				END;
			END;
		END
		ELSE
		BEGIN
			UPDATE dbo.tlbHumanCase
			SET intRowStatus = 1						
			WHERE	idfHumanCase = @idfHumanCase
			AND		intRowStatus = 0
			
			-- Continue deleting the child records

			-- Delete Location of Exposure
			UPDATE tg
			SET tg.intRowStatus = 1
			FROM dbo.tlbGeoLocation tg
			INNER JOIN dbo.tlbHumanCase thc ON thc.idfPointGeoLocation = tg.idfGeoLocation
			WHERE thc.idfHumanCase = @idfHumanCase

			--Delete from HumanDiseaseReportRelationship
			UPDATE hrr
			SET hrr.intRowStatus = 0
			FROM dbo.HumanDiseaseReportRelationship hrr 
			WHERE hrr.HumanDiseaseReportID = @idfHumanCase

			-- Delete from Antiviral Therapy
			UPDATE tat
			SET tat.intRowStatus = 1
			FROM dbo.tlbAntimicrobialTherapy tat
			WHERE tat.idfHumanCase = @idfHumanCase

			-- Delete from Human Disease Report Vaccination
			UPDATE hrv
			SET hrv.intRowStatus = 1
			FROM dbo.HumanDiseaseReportVaccination hrv
			WHERE hrv.idfHumanCase = @idfHumanCase

			-- Delete from Contacted Case Person
			UPDATE tccp
			SET tccp.intRowStatus = 1
			FROM dbo.tlbContactedCasePerson tccp
			WHERE tccp.idfHumanCase = @idfHumanCase

			--If record is being soft-deleted, then check if the test record was originally created 
			--in the laboaratory module.  If it was, then disassociate the test record from the 
			--human disease Report, so that the test record remains in the laboratory module 
			--for further action.
---------------------------------------------------------------------------------------------------------------
-- updated the logic to support multiple testing records
			SET @NonLaboratoryTestIndicator = 1
			IF EXISTS 
			(
				SELECT tt.blnNonLaboratoryTest 
				FROM dbo.tlbTesting tt
				INNER JOIN dbo.tlbMaterial tm ON tt.idfMaterial = tm.idfMaterial AND tm.idfHumanCase = @idfHumanCase
				WHERE tt.blnNonLaboratoryTest = 0
			)
			SET @NonLaboratoryTestIndicator = 0

			IF @NonLaboratoryTestIndicator = 1 -- Okay to delete
				BEGIN
					-- Delete samples
					UPDATE tm
					SET tm.intRowStatus = 1
					FROM dbo.tlbMaterial tm WHERE tm.idfHumanCase = @idfHumanCase

					-- Delete tests
					UPDATE tt
					SET tt.intRowStatus = 1
					FROM dbo.tlbTesting tt
					INNER JOIN dbo.tlbMaterial tm ON tt.idfMaterial = tm.idfMaterial
					WHERE tm.idfHumanCase = @idfHumanCase

					-- Delete test valiation
					UPDATE tv
					SET tv.intRowStatus = 1
					FROM dbo.tlbTestValidation tv
					INNER JOIN dbo.tlbTesting tt ON tt.idfTesting = tv.idfTesting
					INNER JOIN dbo.tlbMaterial tm ON tt.idfMaterial = tm.idfMaterial
					WHERE tm.idfHumanCase = @idfHumanCase
				END
			ELSE -- Disassociate Samples from Human Case
				BEGIN
					UPDATE dbo.tlbMaterial
					SET idfHumanCase = NULL
					WHERE idfHumanCase= @idfHumanCase
                		END

		END
			
			IF @@TRANCOUNT > 0 
				COMMIT
			
			SELECT 
				@returnCode 'ReturnCode',
				@returnMsg 'ReturnMessage'
	END TRY
	BEGIN CATCH
			IF @@Trancount = 1 
				THROW;
				
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_REF_AGEGROUP_DEL]...';


GO
-- ================================================================================================
-- Name: USP_REF_AGEGROUP_DEL
-- Description:	Removes the Age Group from the active reference listings.
--                      
-- Author: Ricky Moss
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Ricky Moss		10/03/2018 Initial release.
-- Ricky Moss		12/12/2018 Removed return codes
-- Ricky Moss		01/02/2019 Added deleteAnyway parameters and added return codes
-- Ricky Moss		01/03/2019 Refactor to determine if record is in use
-- Stephen Long     10/27/2022 Added site alert logic.
--
-- exec USP_REF_AGEGROUP_DEL 55615180000031, 0
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_REF_AGEGROUP_DEL]
(
    @idfsAgeGroup BIGINT,
    @deleteAnyway BIT,
    @EventTypeId BIGINT,
    @SiteId BIGINT,
    @UserId BIGINT,
    @LocationId BIGINT,
    @AuditUserName NVARCHAR(200)
)
AS
BEGIN
    BEGIN TRY
        DECLARE @ReturnCode INT = 0,
                @ReturnMessage NVARCHAR(MAX) = 'SUCCESS';
        DECLARE @SuppressSelect TABLE
        (
            ReturnCode INT,
            ReturnMessage NVARCHAR(MAX)
        );

        IF (
               NOT EXISTS
        (
            SELECT idfsDiagnosis
            FROM dbo.trtDiagnosisAgeGroupToDiagnosis
            WHERE idfsDiagnosisAgeGroup = @idfsAgeGroup
        )
               AND NOT EXISTS
        (
            SELECT idfsStatisticalAgeGroup
            FROM dbo.trtDiagnosisAgeGroupToStatisticalAgeGroup
            WHERE idfsDiagnosisAgeGroup = @idfsAgeGroup
        )
           )
           OR @deleteAnyway = 1
        BEGIN
            UPDATE dbo.trtDiagnosisAgeGroup
            SET intRowStatus = 1,
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUserName
            WHERE idfsDiagnosisAgeGroup = @idfsAgeGroup
                  AND intRowStatus = 0

            UPDATE dbo.trtBaseReference
            SET intRowStatus = 1,
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUserName
            WHERE idfsBaseReference = @idfsAgeGroup
                  AND intRowStatus = 0;

            UPDATE dbo.trtStringNameTranslation
            SET intRowStatus = 1,
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUserName
            WHERE idfsBaseReference = @idfsAgeGroup;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_ADMIN_EVENT_SET-1,
                                           @EventTypeId,
                                           @UserId,
                                           @idfsAgeGroup,
                                           NULL,
                                           @SiteId,
                                           NULL,
                                           @SiteId,
                                           @LocationId,
                                           @AuditUserName;
        END
        ELSE IF (
                    EXISTS
             (
                 SELECT idfsDiagnosis
                 FROM dbo.trtDiagnosisAgeGroupToDiagnosis
                 WHERE idfsDiagnosisAgeGroup = @idfsAgeGroup
             )
                    OR EXISTS
             (
                 SELECT idfsStatisticalAgeGroup
                 FROM dbo.trtDiagnosisAgeGroupToStatisticalAgeGroup
                 WHERE idfsDiagnosisAgeGroup = @idfsAgeGroup
             )
                )
        BEGIN
            SELECT @ReturnCode = -1;
            SELECT @ReturnMessage = 'IN USE';
        END

        SELECT @ReturnCode AS ReturnCode,
               @ReturnMessage AS ReturnMessage;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_REF_CASECLASSIFICATION_DEL]...';


GO
-- ============================================================================
-- Name: USP_REF_CASECLASSIFICATION_DEL
--
-- Description:	Removes a case classification from the active list.
--                      
-- Author: Ricky Moss
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -----------------------------------------------
-- Ricky Moss		10/03/2018	Initial release.
-- Ricky Moss		12/12/2018	Removed return code
-- Ricky Moss		12/19/2018	Merge CANDEL and DEL stored procedures
-- Ricky Moss		01/02/2019	Added deleteAnyway paramater
-- Stephen Long     10/31/2022 Added site alert logic.
--
-- exec USP_REF_CASECLASSIFICATION_DEL 12137920000000, 0
-- ============================================================================
ALTER PROCEDURE [dbo].[USP_REF_CASECLASSIFICATION_DEL]
(
    @IdfsCaseClassification BIGINT,
    @DeleteAnyway BIT,
    @EventTypeId BIGINT,
    @SiteId BIGINT,
    @UserId BIGINT,
    @LocationId BIGINT,
    @AuditUserName NVARCHAR(200)
)
AS
BEGIN
    BEGIN TRY
        DECLARE @ReturnCode INT = 0,
                @ReturnMessage NVARCHAR(MAX) = 'SUCCESS';
        DECLARE @SuppressSelect TABLE
        (
            ReturnCode INT,
            ReturnMessage NVARCHAR(MAX)
        );

        IF NOT EXISTS
        (
            SELECT idfVetCase
            FROM dbo.tlbVetCase
            WHERE idfsCaseClassification = @IdfsCaseClassification
        )
           OR @DeleteAnyway = 1
        BEGIN
            UPDATE dbo.trtCaseClassification
            SET intRowStatus = 1
            WHERE idfsCaseClassification = @IdfsCaseClassification
                  and intRowStatus = 0

            UPDATE dbo.trtBaseReference
            SET intRowStatus = 1
            WHERE idfsBaseReference = @IdfsCaseClassification
                  AND intRowStatus = 0

            UPDATE dbo.trtStringNameTranslation
            SET intRowStatus = 1
            WHERE idfsBaseReference = @IdfsCaseClassification

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_ADMIN_EVENT_SET-1,
                                           @EventTypeId,
                                           @UserId,
                                           @idfsCaseClassification,
                                           NULL,
                                           @SiteId,
                                           NULL,
                                           @SiteId,
                                           @LocationId,
                                           @AuditUserName;

        END
        ELSE
        BEGIN
            SELECT @ReturnCode = -1;
            SELECT @ReturnMessage = 'IN USE';
        END

        SELECT @ReturnCode AS ReturnCode,
               @ReturnMessage AS ReturnMessage;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_REF_DIAGNOSISREFERENCE_DEL]...';


GO
--=================================================================================================
-- Name: USP_REF_DIAGNOSISREFERENCE_DEL
--
-- Description: Removes disease reference from active list of diseases
--							
-- Author:		Ricky Moss
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Ricky Moss		09/26/2018 Initial Release
-- Ricky Moss		12/12/2018 Removed return codes
-- Ricky Moss		02/09/2019 Added removal of tests, sample type and penside tests from disease
-- Ricky Moss		03/31/2019 Remove delete Anyway parameter
-- Leo Tracchia		11/25/2020 Added @forceDelete parameter as optional
-- Doug Albanese	08/03/2021 Added the deletion routine to deactivate the record tied to the 
--                             base reference
-- Stephen Long     10/31/2022 Added site alert logic.
--
-- Test Code:
-- exec USP_REF_DIAGNOSISREFERENCE_DEL 6618200000000, 0
--=================================================================================================
ALTER PROCEDURE [dbo].[USP_REF_DIAGNOSISREFERENCE_DEL]
(
    @IdfsDiagnosis BIGINT,
    @ForceDelete bit = 0,
    @EventTypeId BIGINT,
    @SiteId BIGINT,
    @UserId BIGINT,
    @LocationId BIGINT,
    @AuditUserName NVARCHAR(200)
)
AS
BEGIN
    BEGIN TRY
        DECLARE @ReturnCode INT = 0,
                @ReturnMessage NVARCHAR(MAX) = 'SUCCESS';
        DECLARE @SuppressSelect TABLE
        (
            ReturnCode INT,
            ReturnMessage NVARCHAR(MAX)
        );

        IF (
               (
                   NOT EXISTS
        (
            SELECT idfAggrDiagnosticActionMTX
            FROM dbo.tlbAggrDiagnosticActionMTX
            WHERE idfsDiagnosis = @IdfsDiagnosis
                  AND intRowStatus = 0
        )
                   AND NOT EXISTS
        (
            SELECT idfAggrHumanCaseMTX
            FROM dbo.tlbAggrHumanCaseMTX
            WHERE idfsDiagnosis = @IdfsDiagnosis
                  AND intRowStatus = 0
        )
                   AND NOT EXISTS
        (
            SELECT idfAggrDiagnosticActionMTX
            FROM dbo.tlbAggrDiagnosticActionMTX
            WHERE idfsDiagnosis = @IdfsDiagnosis
                  AND intRowStatus = 0
        )
                   AND NOT EXISTS
        (
            SELECT idfAggrProphylacticActionMTX
            FROM dbo.tlbAggrProphylacticActionMTX
            WHERE idfsDiagnosis = @IdfsDiagnosis
                  AND intRowStatus = 0
        )
                   AND NOT EXISTS
        (
            SELECT idfAggrVetCaseMTX
            FROM dbo.tlbAggrVetCaseMTX
            WHERE idfsSpeciesType = @IdfsDiagnosis
                  AND intRowStatus = 0
        )
                   AND NOT EXISTS
        (
            SELECT idfCampaign
            FROM dbo.tlbCampaignToDiagnosis
            WHERE idfsDiagnosis = @IdfsDiagnosis
                  AND intRowStatus = 0
        )
                   AND NOT EXISTS
        (
            SELECT idfCampaignToDiagnosis
            FROM dbo.tlbCampaignToDiagnosis
            WHERE idfsSpeciesType = @IdfsDiagnosis
                  AND intRowStatus = 0
        )
                   AND NOT EXISTS
        (
            SELECT idfMonitoringSession
            FROM dbo.tlbMonitoringSessionToDiagnosis
            WHERE idfsDiagnosis = @IdfsDiagnosis
                  AND intRowStatus = 0
        )
                   AND NOT EXISTS
        (
            SELECT idfMonitoringSessionToDiagnosis
            FROM dbo.tlbMonitoringSessionToDiagnosis
            WHERE idfsSpeciesType = @IdfsDiagnosis
                  AND intRowStatus = 0
        )
                   AND NOT EXISTS
        (
            SELECT idfMonitoringSessionSummary
            FROM dbo.tlbMonitoringSessionSummaryDiagnosis
            WHERE idfsDiagnosis = @IdfsDiagnosis
                  AND intRowStatus = 0
        )
                   AND NOT EXISTS
        (
            SELECT idfPensideTest
            FROM dbo.tlbPensideTest
            WHERE idfsDiagnosis = @IdfsDiagnosis
                  AND intRowStatus = 0
        )
                   AND NOT EXISTS
        (
            SELECT idfTesting
            FROM dbo.tlbTesting
            WHERE idfsDiagnosis = @IdfsDiagnosis
                  AND intRowStatus = 0
        )
                   AND NOT EXISTS
        (
            SELECT idfTestValidation
            FROM dbo.tlbTestValidation
            WHERE idfsDiagnosis = @IdfsDiagnosis
                  AND intRowStatus = 0
        )
                   AND NOT EXISTS
        (
            SELECT idfVaccination
            FROM dbo.tlbVaccination
            WHERE idfsDiagnosis = @IdfsDiagnosis
                  AND intRowStatus = 0
        )
                   AND NOT EXISTS
        (
            SELECT idfsVSSessionSummaryDiagnosis
            FROM dbo.tlbVectorSurveillanceSessionSummaryDiagnosis
            WHERE idfsDiagnosis = @IdfsDiagnosis
                  AND intRowStatus = 0
        )
                   AND NOT EXISTS
        (
            SELECT idfDiagnosisAgeGroupToDiagnosis
            FROM dbo.trtDiagnosisAgeGroupToDiagnosis
            WHERE idfsDiagnosis = @IdfsDiagnosis
                  AND intRowStatus = 0
        )
                   AND NOT EXISTS
        (
            SELECT idfDiagnosisToGroupForReportType
            FROM dbo.trtDiagnosisToGroupForReportType
            WHERE idfsDiagnosis = @IdfsDiagnosis
        )
                   AND NOT EXISTS
        (
            SELECT idfFFObjectToDiagnosisForCustomReport
            FROM dbo.trtFFObjectToDiagnosisForCustomReport
            WHERE idfsDiagnosis = @IdfsDiagnosis
                  AND intRowStatus = 0
        )
               )
               or @ForceDelete = 1
           )
        BEGIN
            UPDATE dbo.trtDiagnosis
            SET intRowStatus = 1
            WHERE idfsDiagnosis = @IdfsDiagnosis
                  AND intRowStatus = 0

            UPDATE dbo.trtBaseReference
            SET intRowStatus = 1,
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUserName
            WHERE idfsBaseReference = @IdfsDiagnosis
                  AND intRowStatus = 0

            UPDATE dbo.trtStringNameTranslation
            SET intRowStatus = 1,
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUserName
            WHERE idfsBaseReference = @IdfsDiagnosis

            UPDATE dbo.trtBaseReference
            SET intRowStatus = 1,
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUserName
            WHERE idfsBaseReference = @IdfsDiagnosis

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_ADMIN_EVENT_SET-1,
                                           @EventTypeId,
                                           @UserId,
                                           @IdfsDiagnosis,
                                           NULL,
                                           @SiteId,
                                           NULL,
                                           @SiteId,
                                           @LocationId,
                                           @AuditUserName;
        END
        ELSE
        BEGIN
            SELECT @ReturnCode = -1;
            SELECT @ReturnMessage = 'IN USE';
        END

        SELECT @ReturnCode AS ReturnCode,
               @ReturnMessage AS ReturnMessage;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_REF_MEASUREREFEFENCE_DEL]...';


GO
-- ================================================================================================
-- Name: USP_REF_MEASUREREFEFENCE_DEL
-- 
-- Description:	Removes the measure type from the active measure type reference listing.
--                      
-- Author: Ricky Moss
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Ricky Moss       10/26/2018 Initial release.
-- Stephen Long     10/31/2022 Added site alert logic.
--
-- exec USP_REF_MEASUREREFEFENCE_DEL 952180000000, 19000074, 0
-- exec USP_REF_MEASUREREFEFENCE_DEL 952250000000, 19000079, 1
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_REF_MEASUREREFEFENCE_DEL]
(
    @IdfsAction BIGINT,
    @IdfsMeasureList BIGINT,
    @DeleteAnyway BIT,
    @EventTypeId BIGINT,
    @SiteId BIGINT,
    @UserId BIGINT,
    @LocationId BIGINT,
    @AuditUserName NVARCHAR(200)
)
AS
BEGIN
    BEGIN TRY
        DECLARE @ReturnCode INT = 0,
                @ReturnMessage NVARCHAR(MAX) = 'SUCCESS';
        DECLARE @SuppressSelect TABLE
        (
            ReturnCode INT,
            ReturnMessage NVARCHAR(MAX)
        );

        IF @IdfsMeasureList = 19000074
        BEGIN
            IF NOT EXISTS
            (
                SELECT idfAggrProphylacticActionMTX
                FROM dbo.tlbAggrProphylacticActionMTX
                WHERE idfsProphilacticAction = @IdfsAction
            )
               OR @DeleteAnyway = 1
            BEGIN
                UPDATE dbo.trtProphilacticAction
                SET intRowStatus = 1,
                    AuditUpdateDTM = GETDATE(),
                    AuditUpdateUser = @AuditUserName
                WHERE idfsProphilacticAction = @IdfsAction
                      AND intRowStatus = 0;

                UPDATE dbo.trtBaseReference
                SET intRowStatus = 1,
                    AuditUpdateDTM = GETDATE(),
                    AuditUpdateUser = @AuditUserName
                WHERE idfsBaseReference = @IdfsAction
                      AND intRowStatus = 0;

                UPDATE dbo.trtStringNameTranslation
                SET intRowStatus = 1,
                    AuditUpdateDTM = GETDATE(),
                    AuditUpdateUser = @AuditUserName
                WHERE idfsBaseReference = @IdfsAction
                      AND intRowStatus = 0;

                INSERT INTO @SuppressSelect
                EXECUTE dbo.USP_ADMIN_EVENT_SET-1,
                                               @EventTypeId,
                                               @UserId,
                                               @IdfsAction,
                                               NULL,
                                               @SiteId,
                                               NULL,
                                               @SiteId,
                                               @LocationId,
                                               @AuditUserName;
            END
            ELSE IF EXISTS
            (
                SELECT idfAggrProphylacticActionMTX
                FROM dbo.tlbAggrProphylacticActionMTX
                WHERE idfsProphilacticAction = @IdfsAction
            )
            BEGIN
                SELECT @ReturnCode = -1;
                SELECT @ReturnMessage = 'IN USE';
            END
        END
        ELSE
        BEGIN
            IF NOT EXISTS
            (
                SELECT idfAggrSanitaryActionMTX
                FROM dbo.tlbAggrSanitaryActionMTX
                WHERE idfsSanitaryAction = @IdfsAction
            )
               OR @DeleteAnyway = 1
            BEGIN
                UPDATE dbo.trtSanitaryAction
                SET intRowStatus = 1,
                    AuditUpdateDTM = GETDATE(),
                    AuditUpdateUser = @AuditUserName
                WHERE idfsSanitaryAction = @IdfsAction
                      AND intRowStatus = 0;

                UPDATE dbo.trtBaseReference
                SET intRowStatus = 1,
                    AuditUpdateDTM = GETDATE(),
                    AuditUpdateUser = @AuditUserName
                WHERE idfsBaseReference = @IdfsAction
                      AND intRowStatus = 0;

                UPDATE dbo.trtStringNameTranslation
                SET intRowStatus = 1,
                    AuditUpdateDTM = GETDATE(),
                    AuditUpdateUser = @AuditUserName
                WHERE idfsBaseReference = @IdfsAction
                      AND intRowStatus = 0;

                INSERT INTO @SuppressSelect
                EXECUTE dbo.USP_ADMIN_EVENT_SET-1,
                                               @EventTypeId,
                                               @UserId,
                                               @IdfsAction,
                                               NULL,
                                               @SiteId,
                                               NULL,
                                               @SiteId,
                                               @LocationId,
                                               @AuditUserName;
            END
            ELSE IF EXISTS
            (
                SELECT idfAggrSanitaryActionMTX
                FROM dbo.tlbAggrSanitaryActionMTX
                WHERE idfsSanitaryAction = @IdfsAction
            )
            BEGIN
                SELECT @ReturnCode = -1;
                SELECT @ReturnMessage = 'IN USE';
            END
        END

        SELECT @ReturnCode AS ReturnCode,
               @ReturnMessage AS ReturnMessage;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_REF_REPORTDIAGNOSISGROUP_DEL]...';


GO
-- ================================================================================================
-- Name: USP_REF_REPORTDIAGNOSISGROUP_DEL
--
-- Description:	Deletes the report disease group record from the list of active records.
--                      
-- Author: Ricky Moss
--
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Ricky Moss		09/25/2018 Initial release.
-- Ricky Moss		01/16/2019 Merged with USP_REF_REPORTDIAGNOSISGROUP_CANDEL stored procedure
-- Stephen Long     11/01/2022 Added site alert logic.
--
-- exec USP_REF_REPORTDIAGNOSISGROUP_DEL 55615180000016
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_REF_REPORTDIAGNOSISGROUP_DEL]
(
	@idfsReportDiagnosisGroup BIGINT,
    @DeleteAnyway BIT,
    @EventTypeId BIGINT,
    @SiteId BIGINT,
    @UserId BIGINT,
    @LocationId BIGINT,
    @AuditUserName NVARCHAR(200)
) AS

Begin
 BEGIN TRY
        DECLARE @ReturnCode INT = 0,
                @ReturnMessage NVARCHAR(MAX) = 'SUCCESS';
        DECLARE @SuppressSelect TABLE
        (
            ReturnCode INT,
            ReturnMessage NVARCHAR(MAX)
        );

	IF NOT EXISTS(SELECT idfDiagnosisToGroupForReportType FROM dbo.trtDiagnosisToGroupForReportType WHERE idfsReportDiagnosisGroup = @idfsReportDiagnosisGroup) OR @deleteAnyway = 1
	BEGIN
	UPDATE dbo.trtReportDiagnosisGroup 
            SET intRowStatus = 1,
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUserName
		WHERE idfsReportDiagnosisGroup = @idfsReportDiagnosisGroup
		and intRowStatus = 0;

	UPDATE dbo.trtBaseReference 
            SET intRowStatus = 1,
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUserName
		WHERE idfsBaseReference = @idfsReportDiagnosisGroup
		AND intRowStatus = 0;

	UPDATE dbo.trtStringNameTranslation 
            SET intRowStatus = 1,
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUserName
		WHERE idfsBaseReference = @idfsReportDiagnosisGroup;

                    INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_ADMIN_EVENT_SET-1,
                                           @EventTypeId,
                                           @UserId,
                                           @idfsReportDiagnosisGroup,
                                           NULL,
                                           @SiteId,
                                           NULL,
                                           @SiteId,
                                           @LocationId,
                                           @AuditUserName;
	END
	ELSE IF EXISTS(SELECT idfDiagnosisToGroupForReportType FROM dbo.trtDiagnosisToGroupForReportType WHERE idfsReportDiagnosisGroup = @idfsReportDiagnosisGroup)
	BEGIN
            SELECT @ReturnCode = -1;
            SELECT @ReturnMessage = 'IN USE';
	END

            SELECT @ReturnCode AS ReturnCode,
               @ReturnMessage AS ReturnMessage;
END TRY
BEGIN CATCH
	THROW;
END CATCH
end
GO
PRINT N'Altering Procedure [dbo].[USP_REF_SAMPLETYPEREFERENCE_DEL]...';


GO
--=================================================================================================
-- Author: Ricky Moss
--
-- Description:	Removes a sample type reference record from the active list.
--							
-- Revision History:
-- Name             Date		Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Ricky Moss		09/26/2018 Initial Release
-- Ricky Moss		12/12/2018 Removed return code and reference id variables
-- Ricky Moss		01/03/2018 Added the deleteAnyway parameter
-- Mandar Kulkarni	08/09/2021 Added coded to delete LOINC NUMBER record as a child.
-- Stephen Long     11/01/2022 Added site alert logic.
--
-- Test Code:
-- exec USP_REF_SAMPLETYPEREFERENCE_DEL 55615180000085, 0
--=================================================================================================
ALTER PROCEDURE [dbo].[USP_REF_SAMPLETYPEREFERENCE_DEL]
(
    @IdfsSampleType BIGINT,
    @DeleteAnyway BIT,
    @EventTypeId BIGINT,
    @SiteId BIGINT,
    @UserId BIGINT,
    @LocationId BIGINT,
    @AuditUserName NVARCHAR(200)
)
AS
BEGIN
    BEGIN TRY
        DECLARE @ReturnCode INT = 0,
                @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
                @inUse BIT = 0;
        DECLARE @SuppressSelect TABLE
        (
            ReturnCode INT,
            ReturnMessage NVARCHAR(MAX)
        );

        IF (
               NOT EXISTS
        (
            SELECT idfMonitoringSession
            FROM dbo.MonitoringSessionToSampleType
            WHERE idfsSampleType = @IdfsSampleType
                  AND intRowStatus = 0
        )
               AND NOT EXISTS
        (
            SELECT idfSampleTypeForVectorType
            FROM dbo.trtSampleTypeForVectorType
            WHERE idfsSampleType = @IdfsSampleType
                  AND intRowStatus = 0
        )
               AND NOT EXISTS
        (
            SELECT idfCampaignToDiagnosis
            FROM dbo.tlbCampaignToDiagnosis
            WHERE idfsSampleType = @IdfsSampleType
                  AND intRowStatus = 0
        )
               AND NOT EXISTS
        (
            SELECT idfMonitoringSessionSummary
            FROM dbo.tlbMonitoringSessionSummarySample
            WHERE idfsSampleType = @IdfsSampleType
                  AND intRowStatus = 0
        )
               AND NOT EXISTS
        (
            SELECT idfMonitoringSessionToDiagnosis
            FROM dbo.tlbMonitoringSessionToDiagnosis
            WHERE idfsSampleType = @IdfsSampleType
                  AND intRowStatus = 0
        )
               AND NOT EXISTS
        (
            SELECT idfMaterialForDisease
            FROM dbo.trtMaterialForDisease
            WHERE idfsSampleType = @IdfsSampleType
                  AND intRowStatus = 0
        )
               AND NOT EXISTS
        (
            SELECT idfSampleTypeForVectorType
            FROM dbo.trtSampleTypeForVectorType
            WHERE idfsSampleType = @IdfsSampleType
                  AND intRowStatus = 0
        )
               AND NOT EXISTS
        (
            SELECT idfTestForDisease
            FROM dbo.trtTestForDisease
            WHERE idfsSampleType = @IdfsSampleType
                  and intRowStatus = 0
        )
               AND NOT EXISTS
        (
            SELECT idfMaterial
            FROM dbo.tlbMaterial
            WHERE idfsSampleType = @IdfsSampleType
                  AND intRowStatus = 0
        )
           )
            SELECT @inUse = 0;
        ELSE
            SELECT @inUse = 1;

        IF @inUse = 0
           OR @DeleteAnyway = 1
        BEGIN
            UPDATE dbo.trtSampleType
            SET intRowStatus = 1,
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUserName
            WHERE idfsSampleType = @IdfsSampleType
                  AND intRowStatus = 0;

            UPDATE dbo.trtBaseReference
            SET intRowStatus = 1,
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUserName
            WHERE idfsBaseReference = @IdfsSampleType
                  AND intRowStatus = 0;

            UPDATE dbo.trtStringNameTranslation
            SET intRowStatus = 1,
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUserName
            WHERE idfsBaseReference = @idfsSampleType;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_ADMIN_EVENT_SET-1,
                                           @EventTypeId,
                                           @UserId,
                                           @IdfsSampleType,
                                           NULL,
                                           @SiteId,
                                           NULL,
                                           @SiteId,
                                           @LocationId,
                                           @AuditUserName;

            -- Delete after checking if child record exists, 
            IF EXISTS
            (
                SELECT TOP 1
                    idfsBaseReference
                FROM dbo.LOINCEidssMapping
                WHERE idfsBaseReference = @idfsSampleType
            )
                UPDATE dbo.LOINCEidssMapping
                SET intRowStatus = 1,
                    AuditUpdateDTM = GETDATE(),
                    AuditUpdateUser = @AuditUserName
                WHERE idfsBaseReference = @idfsSampleType;
        END
        ELSE
        BEGIN
            SELECT @ReturnCode = -1;
            SELECT @ReturnMessage = 'IN USE';
        END

        SELECT @ReturnCode AS ReturnCode,
               @ReturnMessage AS ReturnMessage;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_REF_SAMPLETYPEREFERENCE_SET]...';


GO
-- ================================================================================================
-- Name: dbo.USP_REF_SAMPLETYPEREFERENCE_SET
-- Description:	Add and Update a sample type
--                      
-- Author: Ricky Moss
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Ricky Moss		10/01/2018 Initial release.
-- Ricky Moss		12/13/2018 Removed return code
-- Ricky Moss		01/02/2019 Replaced fnGetLanguageCode with FN_GBL_LanguageCode_GET function
-- Ricky Moss		02/10/2019hecks to see when updating a sample type that the name does not 
--                             exists in another reference and updates English value
-- Ricky Moss		06/18/2019 Correct duplicate prevention issue (Bug #3447) and Reactivate 
--                             inactive sample types if trying to re-add
-- Ricky Moss		06/22/2019 Added customization and string translation
-- Steven Verner	03/26/2019 Added transaction
-- Ann Xiong		04/12/2021 Refactored to make use of USSP_GBL_BaseReference_SET, and to change 
--                             the branch decisions for insert/update.
-- Mark Wilson		08/03/2021 Refactored to make use of USP_GBL_BaseReference_SET
-- Mandar Kulkarni  08/09/2021 Added a new parameter to accept and set LOINC Number.
-- Stephen Long     07/18/2022 Added site alert logic.
-- Stephen Long     11/01/2022 Changed parameter name @idfsSampleType to @IdfsSampleType.
--
/*  Test code

exec USP_REF_SAMPLETYPEREFERENCE_SET NULL, 'Test Again 44','Test Again 64',  '100.0',  NULL, 224, 0, 'en-US'
exec USP_REF_SAMPLETYPEREFERENCE_SET 389445040003864, 'Test Again 48', 'Test Again 4', '99.0', null, 98, 0, 'en-US'

*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_REF_SAMPLETYPEREFERENCE_SET]
(
    @IdfsSampleType BIGINT = NULL,
    @strDefault VARCHAR(200),
    @strName NVARCHAR(200),
    @strSampleCode NVARCHAR(50),
    @LOINC_NUM NVARCHAR(255),
    @intHACode INT,
    @intOrder INT,
    @LangID NVARCHAR(50),
    @EventTypeId BIGINT,
    @SiteId BIGINT,
    @UserId BIGINT,
    @LocationId BIGINT,
    @AuditUserName NVARCHAR(200)
)
AS
BEGIN
    DECLARE @ReturnMessage NVARCHAR(max) = N'SUCCESS',
            @ReturnCode INT = 0,
            @existingDefault BIGINT,
            @existingName BIGINT,
            @DuplicateDefault INT = 0; -- updated to capture 0 or 1. 1 indicates a duplicate and will not execute the set.
    DECLARE @SuppressSelect TABLE
    (
        ReturnCode INT,
        ReturnMessage NVARCHAR(MAX)
    );
    BEGIN TRY
        BEGIN TRANSACTION

        IF @IdfsSampleType IS NULL
        BEGIN -- this is an insert.  check if the strDefault is a duplicate
            IF EXISTS
            (
                SELECT *
                FROM dbo.trtBaseReference
                WHERE strDefault = @strDefault
                      AND idfsReferenceType = 19000087
                      AND intRowStatus = 0
            )
            BEGIN
                SET @DuplicateDefault = 1;
            END
        END
        ELSE
        BEGIN -- this is an update.  check if the strDefault is a duplicate
            IF EXISTS
            (
                SELECT *
                FROM dbo.trtBaseReference
                WHERE idfsBaseReference <> @IdfsSampleType
                      AND strDefault = @strDefault
                      AND idfsReferenceType = 19000087
                      AND intRowStatus = 0
            )
            BEGIN
                SET @DuplicateDefault = 1;
            END
        END

        IF @DuplicateDefault = 1 -- No need to go any further, as the strDefault is a duplicate
        BEGIN
            SELECT @ReturnMessage = 'DOES EXIST';
        END
        ELSE -- there is no duplicate, so continue
        BEGIN
            INSERT INTO @SuppressSelect
            EXEC dbo.USP_GBL_BaseReference_SET @ReferenceID = @IdfsSampleType OUTPUT,
                                               @ReferenceType = 19000087,
                                               @LangID = @LangID,
                                               @DefaultName = @strDefault,
                                               @NationalName = @strName,
                                               @HACode = @intHACode,
                                               @Order = @intOrder,
                                               @System = 0,
                                               @User = @AuditUserName;

            IF EXISTS
            (
                SELECT *
                FROM dbo.trtSampleType
                WHERE idfsSampleType = @IdfsSampleType
            )
            BEGIN
                UPDATE dbo.trtSampleType
                SET strSampleCode = @strSampleCode,
                    AuditUpdateDTM = GETDATE(),
                    AuditUpdateUser = @AuditUserName,
                    intRowStatus = 0,
                    SourceSystemKeyValue = N'[{"idfsSampleType":' + CAST(@IdfsSampleType AS NVARCHAR(300)) + '}]'
                WHERE idfsSampleType = @IdfsSampleType;

                INSERT INTO @SuppressSelect
                EXECUTE dbo.USP_ADMIN_EVENT_SET-1,
                                               @EventTypeId,
                                               @UserId,
                                               @IdfsSampleType,
                                               NULL,
                                               @SiteId,
                                               NULL,
                                               @SiteId,
                                               @LocationId,
                                               @AuditUserName;
            END
            ELSE
            BEGIN
                INSERT INTO dbo.trtSampleType
                (
                    idfsSampleType,
                    strSampleCode,
                    intRowStatus,
                    rowguid,
                    strMaintenanceFlag,
                    strReservedAttribute,
                    SourceSystemNameID,
                    SourceSystemKeyValue,
                    AuditCreateUser,
                    AuditCreateDTM
                )
                VALUES
                (@IdfsSampleType,
                 @strSampleCode,
                 0  ,
                 NEWID(),
                 N'EIDSS7 Sample Type',
                 N'ADD',
                 10519001,
                 N'[{"idfsSampleType":' + CAST(@IdfsSampleType AS NVARCHAR(300)) + '}]',
                 @AuditUserName,
                 GETDATE()
                );

                INSERT INTO @SuppressSelect
                EXECUTE dbo.USP_ADMIN_EVENT_SET-1,
                                               @EventTypeId,
                                               @UserId,
                                               @IdfsSampleType,
                                               NULL,
                                               @SiteId,
                                               NULL,
                                               @SiteId,
                                               @LocationId,
                                               @AuditUserName;
            END

            -- Insert/Updated for LOINC Number
            IF EXISTS
            (
                SELECT *
                FROM dbo.LOINCEidssMapping
                WHERE idfsBaseReference = @IdfsSampleType
            )
            BEGIN
                UPDATE dbo.LOINCEidssMapping
                SET LOINC_NUM = @LOINC_NUM,
                    AuditUpdateDTM = GETDATE(),
                    AuditUpdateUser = @AuditUserName,
                    intRowStatus = 0,
                    SourceSystemKeyValue = N'[{"idfsBaseReference":' + CAST(@IdfsSampleType AS NVARCHAR(300)) + '}]'
                WHERE idfsBaseReference = @IdfsSampleType;
            END
            ELSE
            BEGIN
                INSERT INTO dbo.LOINCEidssMapping
                (
                    idfsBaseReference,
                    idfsReferenceType,
                    LOINC_NUM,
                    intRowStatus,
                    rowguid,
                    SourceSystemNameID,
                    SourceSystemKeyValue,
                    AuditCreateUser,
                    AuditCreateDTM
                )
                VALUES
                (   @IdfsSampleType,                                                           -- idfsBaseReference - bigint
                    19000087,                                                                  -- idfsReferenceType - bigint
                    @LOINC_NUM,                                                                -- LOINC_NUM - nvarchar(255)
                    0,                                                                         -- intRowStatus - int
                    NEWID(),                                                                   -- rowguid - uniqueidentifier
                    10519001,                                                                  -- SourceSystemNameID - bigint
                    N'[{"idfsBaseReference":' + CAST(@IdfsSampleType AS NVARCHAR(300)) + '}]', -- SourceSystemKeyValue - nvarchar(max)
                    @AuditUserName,
                    GETDATE()                                                                  -- AuditCreateDTM - datetime
                );
            END
        END

        SELECT @ReturnCode AS ReturnCode,
               @ReturnMessage AS ReturnMessage,
               @idfsSampleType AS idfsSampleType;

        COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        -- Transaction uncommittable
        IF (XACT_STATE()) = -1
            ROLLBACK TRANSACTION;

        -- Transaction committable
        IF (XACT_STATE()) = 1
            COMMIT TRANSACTION;
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_REF_SPECIESTYPE_DEL]...';


GO
--=================================================================================================
-- Name: USP_REF_SPECIESTYPE_DEL
--
-- Description:	Removes species type from active list of species types.
--
-- Author:		Ricky Moss
--							
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Ricky Moss		09/26/2018 Initial Release
-- Ricky Moss		01/03/2019 Added deleteAnyway parameter
-- Doug Albanese	08/03/2021 Added the deletion routine to deactivate the record tied to the 
--                             base reference
-- Stephen Long     11/01/2022 Added site alert logic.
--
-- Test Code:
-- exec USP_REF_SPECIESTYPE_DEL 55615180000088, 0
--=================================================================================================
ALTER PROCEDURE [dbo].[USP_REF_SPECIESTYPE_DEL]
(
    @IdfsSpeciesType BIGINT,
    @DeleteAnyway BIT,
    @EventTypeId BIGINT,
    @SiteId BIGINT,
    @UserId BIGINT,
    @LocationId BIGINT,
    @AuditUserName NVARCHAR(200)
)
AS
BEGIN
    BEGIN TRY
        DECLARE @ReturnCode INT = 0,
                @ReturnMessage NVARCHAR(MAX) = 'SUCCESS';
        DECLARE @SuppressSelect TABLE
        (
            ReturnCode INT,
            ReturnMessage NVARCHAR(MAX)
        );

        IF (
               NOT EXISTS
        (
            SELECT idfAggrDiagnosticActionMTX
            FROM dbo.tlbAggrDiagnosticActionMTX
            WHERE idfsSpeciesType = @IdfsSpeciesType
                  AND intRowStatus = 0
        )
               AND NOT EXISTS
        (
            SELECT idfAggrProphylacticActionMTX
            FROM dbo.tlbAggrProphylacticActionMTX
            WHERE idfsSpeciesType = @IdfsSpeciesType
                  AND intRowStatus = 0
        )
               AND NOT EXISTS
        (
            SELECT idfAggrVetCaseMTX
            FROM dbo.tlbAggrVetCaseMTX
            WHERE idfsSpeciesType = @IdfsSpeciesType
                  AND intRowStatus = 0
        )
               AND NOT EXISTS
        (
            SELECT idfCampaignToDiagnosis
            FROM dbo.tlbCampaignToDiagnosis
            WHERE idfsSpeciesType = @IdfsSpeciesType
                  AND intRowStatus = 0
        )
               AND NOT EXISTS
        (
            SELECT idfMonitoringSessionToDiagnosis
            FROM dbo.tlbMonitoringSessionToDiagnosis
            WHERE @IdfsSpeciesType = @idfsSpeciesType
                  AND intRowStatus = 0
        )
               AND NOT EXISTS
        (
            SELECT idfCampaignToDiagnosis
            FROM dbo.tlbCampaignToDiagnosis
            WHERE idfsSpeciesType = @IdfsSpeciesType
                  AND intRowStatus = 0
        )
               AND NOT EXISTS
        (
            SELECT idfSpecies
            FROM dbo.tlbSpecies
            WHERE idfsSpeciesType = @IdfsSpeciesType
                  AND intRowStatus = 0
        )
               AND NOT EXISTS
        (
            SELECT MonitoringSessionToSampleType
            FROM dbo.MonitoringSessionToSampleType
            WHERE idfsSpeciesType = @IdfsSpeciesType
                  AND intRowStatus = 0
        )
               AND NOT EXISTS
        (
            SELECT idfSpeciesActual
            FROM dbo.tlbSpeciesActual
            WHERE idfsSpeciesType = @IdfsSpeciesType
                  AND intRowStatus = 0
        )
               AND NOT EXISTS
        (
            SELECT idfSpeciesToGroupForCustomReport
            FROM dbo.trtSpeciesToGroupForCustomReport
            WHERE idfsSpeciesType = @IdfsSpeciesType
                  AND intRowStatus = 0
        )
               AND NOT EXISTS
        (
            SELECT idfSpeciesTypeToAnimalAge
            FROM dbo.trtSpeciesTypeToAnimalAge
            WHERE idfsSpeciesType = @IdfsSpeciesType
                  AND intRowStatus = 0
        )
           )
           OR @DeleteAnyway = 1
        BEGIN
            UPDATE trtSpeciesType
            SET intRowStatus = 1,
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUserName
            WHERE idfsSpeciesType = @IdfsSpeciesType
                  AND intRowStatus = 0;

            UPDATE trtBaseReference
            SET intRowStatus = 1,
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUserName
            WHERE idfsBaseReference = @IdfsSpeciesType
                  AND intRowStatus = 0;

            UPDATE trtStringNameTranslation
            SET intRowStatus = 1,
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUserName
            WHERE idfsBaseReference = @IdfsSpeciesType;

            UPDATE trtBaseReference
            SET intRowStatus = 1,
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUserName
            WHERE idfsBaseReference = @IdfsSpeciesType;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_ADMIN_EVENT_SET-1,
                                           @EventTypeId,
                                           @UserId,
                                           @IdfsSpeciesType,
                                           NULL,
                                           @SiteId,
                                           NULL,
                                           @SiteId,
                                           @LocationId,
                                           @AuditUserName;
        END
        ELSE IF (
                    EXISTS
             (
                 SELECT idfAggrDiagnosticActionMTX
                 FROM dbo.tlbAggrDiagnosticActionMTX
                 WHERE idfsSpeciesType = @IdfsSpeciesType
                       AND intRowStatus = 0
             )
                    OR EXISTS
             (
                 SELECT idfAggrProphylacticActionMTX
                 FROM dbo.tlbAggrProphylacticActionMTX
                 WHERE idfsSpeciesType = @IdfsSpeciesType
                       AND intRowStatus = 0
             )
                    OR EXISTS
             (
                 SELECT idfAggrVetCaseMTX
                 FROM dbo.tlbAggrVetCaseMTX
                 WHERE idfsSpeciesType = @IdfsSpeciesType
                       AND intRowStatus = 0
             )
                    OR EXISTS
             (
                 SELECT idfCampaignToDiagnosis
                 FROM dbo.tlbCampaignToDiagnosis
                 WHERE idfsSpeciesType = @IdfsSpeciesType
                       AND intRowStatus = 0
             )
                    OR EXISTS
             (
                 SELECT idfMonitoringSessionToDiagnosis
                 FROM dbo.tlbMonitoringSessionToDiagnosis
                 WHERE idfsSpeciesType = @IdfsSpeciesType
                       AND intRowStatus = 0
             )
                    OR EXISTS
             (
                 SELECT idfCampaignToDiagnosis
                 FROM dbo.tlbCampaignToDiagnosis
                 WHERE idfsSpeciesType = @IdfsSpeciesType
                       AND intRowStatus = 0
             )
                    OR EXISTS
             (
                 SELECT idfSpecies
                 FROM dbo.tlbSpecies
                 WHERE idfsSpeciesType = @IdfsSpeciesType
                       AND intRowStatus = 0
             )
                    OR EXISTS
             (
                 SELECT MonitoringSessionToSampleType
                 FROM dbo.MonitoringSessionToSampleType
                 WHERE idfsSpeciesType = @IdfsSpeciesType
                       AND intRowStatus = 0
             )
                    OR EXISTS
             (
                 SELECT idfSpeciesActual
                 FROM dbo.tlbSpeciesActual
                 WHERE idfsSpeciesType = @IdfsSpeciesType
                       AND intRowStatus = 0
             )
                    OR EXISTS
             (
                 SELECT idfSpeciesToGroupForCustomReport
                 FROM dbo.trtSpeciesToGroupForCustomReport
                 WHERE idfsSpeciesType = @IdfsSpeciesType
                       AND intRowStatus = 0
             )
                    OR EXISTS
             (
                 SELECT idfSpeciesTypeToAnimalAge
                 FROM dbo.trtSpeciesTypeToAnimalAge
                 WHERE idfsSpeciesType = @IdfsSpeciesType
                       AND intRowStatus = 0
             )
                )
        BEGIN
            SELECT @ReturnCode = -1;
            SELECT @ReturnMessage = 'IN USE';
        END

        SELECT @ReturnCode AS ReturnCode,
               @ReturnMessage AS ReturnMessage;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_REF_SPECIESTYPE_SET]...';


GO
-- ================================================================================================
-- Name: USP_REF_SPECIESTYPE_SET
-- 
-- Description:	Adds or updates a species type reference
--                      
-- Author: Ricky Moss
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Ricky Moss       10/02/2018 Initial release.
-- Ricky Moss		10/04/2018 Updated the update piece of the stored procedure
-- Ricky Moss		12/13/2018 Removed the return codes and reference id
-- Lamont Mitchell	01/02/2019 Aliased Columns in Final Output
-- Ricky Moss		01/02/2019 Replace fnGetLanguageCode with FN_GBL_LanguageCode_GET function
-- Ricky Moss		02/10/2019 Checks to see when updating a species type that the name does not 
--                             exists in another reference and updates English value
-- Ricky Moss		06/18/2019 Correct duplicate prevention issue and Reactivate inactive species 
--                             types if trying to re-add
-- Ricky Moss		07/22/2019 Refactoring to check for duplicates and added customization to base 
--                             reference
-- Ricky Moss		09/23/2019 Refactoring to check for duplicates and added customization to base 
--                             reference
-- Ricky Moss		02/18/2020 Refactoring to check for duplicates and added customization to base 
--                             reference
-- Doug Albanese	04/09/2021 Refactored to make use of USSP_GBL_BaseReference_SET, and to change 
--                             the branch decisions for insert/update.
-- Doug Albanese	04/09/2021 Added use of IntHACode and IntOrder to call for 
--                             USSP_GBL_BaseReference_SET
-- Doug Albanese	08/02/2021 Added duplication detection
-- Doug Albanese	08/03/2021 Modified duplication detection to handle the existence of previously 
--                             deleted items
-- Doug Albanese	08/09/2021 Refactored against changes, provided by Mark Wilson, to complete the 
--                             work on this
-- Doug Albanese	10/22/2021 intOrder was notbeing used by USP_GBL_BaseReference_SET
-- Stephen Long     07/18/2022 Added site alert logic.
-- Stephen Long     11/01/2022 Changed parameter name @idfsSpeciesType to @IdfsSpeciesType.
--
-- exec USP_REF_SPECIESTYPE_SET null, 'Aardvark', 'Aardvark', '', 32, 1, 'en'
-- exec USP_REF_SPECIESTYPE_SET 837790000000, 'Buffalo', 'Buffalo', '', 32, 0, 'en'
-- exec USP_REF_SPECIESTYPE_SET 9719060001176, 'Other', 'Other', '', 98, 700, 'en'
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_REF_SPECIESTYPE_SET]
(
    @IdfsSpeciesType BIGINT = NULL,
    @strDefault VARCHAR(200),
    @strName NVARCHAR(200),
    @strCode NVARCHAR(50),
    @intHACode INT,
    @intOrder INT,
    @LangID NVARCHAR(50),
    @EventTypeId BIGINT,
    @SiteId BIGINT,
    @UserId BIGINT,
    @LocationId BIGINT,
    @AuditUserName NVARCHAR(200)
)
AS
BEGIN
    DECLARE @ReturnMessage NVARCHAR(MAX) = N'SUCCESS',
            @ReturnCode INT = 0,
            @existingDefault BIGINT,
            @existingName BIGINT,
            @DuplicateDefault INT = 0; -- updated to capture 0 or 1. 1 indicates a duplicate and will not execute the set.

    DECLARE @SuppressSelect TABLE
    (
        ReturnCode INT,
        ReturnMessage NVARCHAR(MAX)
    );
    BEGIN TRY
        DECLARE @bNewRecord BIT = 0;

        IF @IdfsSpeciesType IS NULL
        BEGIN -- this is an insert.  check if the strDefault is a duplicate
            IF EXISTS
            (
                SELECT *
                FROM dbo.trtBaseReference
                WHERE strDefault = @strDefault
                      AND idfsReferenceType = 19000086
                      AND trtBaseReference.intRowStatus = 0
            )
            BEGIN
                SET @DuplicateDefault = 1;
            END
        END
        ELSE
        BEGIN -- this is an update.  check if the strDefault is a duplicate
            IF EXISTS
            (
                SELECT *
                FROM dbo.trtBaseReference
                WHERE idfsBaseReference <> @IdfsSpeciesType
                      AND strDefault = @strDefault
                      AND idfsReferenceType = 19000086
                      AND trtBaseReference.intRowStatus = 0
            )
            BEGIN
                SET @DuplicateDefault = 1;
            END
        END

        IF @DuplicateDefault = 1 -- No need to go any further, as the strDefault is a duplicate
        BEGIN
            SET @ReturnMessage = 'DOES EXIST'
        END
        ELSE -- there is no duplicate, so continue
        BEGIN

            INSERT INTO @SuppressSelect
            EXEC dbo.USP_GBL_BaseReference_SET @ReferenceID = @IdfsSpeciesType OUTPUT,
                                               @ReferenceType = 19000086,
                                               @LangID = @LangID,
                                               @DefaultName = @strDefault,
                                               @NationalName = @strName,
                                               @HACode = @intHACode,
                                               @Order = @intOrder,
                                               @System = 0, 
                                               @User = @AuditUserName;

            IF NOT EXISTS
            (
                SELECT *
                FROM dbo.trtSpeciesType
                WHERE idfsSpeciesType = @IdfsSpeciesType
            )
            BEGIN
                INSERT INTO dbo.trtSpeciesType
                (
                    idfsSpeciesType,
                    strCode,
                    intRowStatus,
                    rowguid,
                    strMaintenanceFlag,
                    strReservedAttribute,
                    SourceSystemNameID,
                    SourceSystemKeyValue,
                    AuditCreateUser,
                    AuditCreateDTM
                )
                VALUES
                (@IdfsSpeciesType,
                 @strCode,
                 0  ,
                 NEWID(),
                 NULL,
                 NULL,
                 10519002,
                 '[{"idfsSpeciesType":' + CAST(@IdfsSpeciesType AS NVARCHAR(300)) + '}]',
                 @AuditUserName,
                 GETDATE()
                );

                INSERT INTO @SuppressSelect
                EXECUTE dbo.USP_ADMIN_EVENT_SET-1,
                                               @EventTypeId,
                                               @UserId,
                                               @IdfsSpeciesType,
                                               NULL,
                                               @SiteId,
                                               NULL,
                                               @SiteId,
                                               @LocationId,
                                               @AuditUserName;
            END
            ELSE
            BEGIN
                UPDATE dbo.trtSpeciesType
                SET strCode = @strCode,
                    rowguid = ISNULL(rowguid, NEWID()),
                    AuditUpdateUser = @AuditUserName,
                    AuditUpdateDTM = GETDATE()
                WHERE idfsSpeciesType = @IdfsSpeciesType;

                INSERT INTO @SuppressSelect
                EXECUTE dbo.USP_ADMIN_EVENT_SET-1,
                                               @EventTypeId,
                                               @UserId,
                                               @IdfsSpeciesType,
                                               NULL,
                                               @SiteId,
                                               NULL,
                                               @SiteId,
                                               @LocationId,
                                               @AuditUserName;
            END
        END

        SELECT @ReturnMessage AS ReturnMessage,
               @ReturnCode AS ReturnCode,
               @IdfsSpeciesType AS IdfSpeciesType;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_REF_STATISTICDATATYPE_DEL]...';


GO
--=====================================================================================================
-- Name: USP_REF_STATISTICDATATYPE_DEL
-- Description:	Removes a statistic data type from the active list
--							
-- Author:		Ricky Moss
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -----------------------------------------------
-- Ricky Moss		2018/10/12 Initial Release
-- Ricky Moss		12/13/2018	Removed the return code
-- Doug Albanese	08/03/2021	Added the deletion routine to deactivate the record tied to the 
--                             base reference.
-- Stephen Long     11/01/2022 Added site alert logic.
-- 
-- Test Code:
-- exec USP_REF_STATISTICDATATYPE_DEL 55615180000061
-- 
--=====================================================================================================
ALTER PROCEDURE [dbo].[USP_REF_STATISTICDATATYPE_DEL]
(
    @idfsStatisticDataType BIGINT,
    @DeleteAnyway BIT,
    @EventTypeId BIGINT,
    @SiteId BIGINT,
    @UserId BIGINT,
    @LocationId BIGINT,
    @AuditUserName NVARCHAR(200)
)
AS
BEGIN
    BEGIN TRY
        DECLARE @ReturnCode INT = 0,
                @ReturnMessage NVARCHAR(MAX) = 'SUCCESS';
        DECLARE @SuppressSelect TABLE
        (
            ReturnCode INT,
            ReturnMessage NVARCHAR(MAX)
        );

        IF NOT EXISTS
        (
            SELECT idfsStatisticDataType
            FROM dbo.tlbStatistic
            WHERE idfsStatisticDataType = @idfsStatisticDataType
                  AND intRowStatus = 0
        )
           OR @DeleteAnyway = 1
        BEGIN
            UPDATE dbo.trtStatisticDataType
            SET intRowStatus = 1,
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUserName
            WHERE idfsStatisticDataType = @idfsStatisticDataType
                  AND intRowStatus = 0;

            UPDATE dbo.trtBaseReference
            SET intRowStatus = 1,
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUserName
            WHERE idfsBaseReference = @idfsStatisticDataType
                  AND intRowStatus = 0;

            UPDATE dbo.trtStringNameTranslation
            SET intRowStatus = 1,
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUserName
            WHERE idfsBaseReference = @idfsStatisticDataType;

            UPDATE dbo.trtBaseReference
            SET intRowStatus = 1,
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUserName
            WHERE idfsBaseReference = @idfsStatisticDataType;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_ADMIN_EVENT_SET-1,
                                           @EventTypeId,
                                           @UserId,
                                           @idfsStatisticDataType,
                                           NULL,
                                           @SiteId,
                                           NULL,
                                           @SiteId,
                                           @LocationId,
                                           @AuditUserName;
        END
        ELSE IF EXISTS
        (
            SELECT idfsStatisticDataType
            FROM dbo.tlbStatistic
            WHERE idfsStatisticDataType = @idfsStatisticDataType
                  and intRowStatus = 0
        )
        BEGIN
            SELECT @ReturnCode = -1;
            SELECT @ReturnMessage = 'IN USE';
        END

        SELECT @ReturnCode AS ReturnCode,
               @ReturnMessage AS ReturnMessage;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_REF_VectorSubType_DEL]...';


GO
-- ================================================================================================
-- Name: USP_REF_VectorSubType_DEL
-- Description:	Remove an active Vector Sub Type.
--                      
-- Author: Ricky Moss
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Ricky Moss		10/18/2018 Initial release.
-- Stephen Long     11/01/2022 Added site alert logic.
--
-- exec USP_REF_VectorSubType_DEL 6619330000000, 0
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_REF_VectorSubType_DEL]
(
    @idfsVectorSubType BIGINT,
    @DeleteAnyway BIT,
    @EventTypeId BIGINT,
    @SiteId BIGINT,
    @UserId BIGINT,
    @LocationId BIGINT,
    @AuditUserName NVARCHAR(200)
)
AS
BEGIN
    BEGIN TRY
        DECLARE @ReturnCode INT = 0,
                @ReturnMessage NVARCHAR(MAX) = 'SUCCESS';
        DECLARE @SuppressSelect TABLE
        (
            ReturnCode INT,
            ReturnMessage NVARCHAR(MAX)
        );

        IF NOT EXISTS
        (
            SELECT idfVectorSurveillanceSession
            FROM dbo.tlbVectorSurveillanceSessionSummary
            WHERE idfsVectorSubType = @idfsVectorSubType
                  and intRowStatus = 0
        )
           OR @deleteAnyway = 1
        BEGIN
            UPDATE dbo.trtVectorSubType
            SET intRowStatus = 1,
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUserName
            WHERE idfsVectorSubType = @idfsVectorSubType
                  and intRowStatus = 0;

            UPDATE dbo.trtBaseReference
            SET intRowStatus = 1,
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUserName
            WHERE idfsBaseReference = @idfsVectorSubType
                  AND intRowStatus = 0;

            UPDATE dbo.trtStringNameTranslation
            SET intRowStatus = 1,
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUserName
            WHERE idfsBaseReference = @idfsVectorSubType;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_ADMIN_EVENT_SET-1,
                                           @EventTypeId,
                                           @UserId,
                                           @idfsVectorSubType,
                                           NULL,
                                           @SiteId,
                                           NULL,
                                           @SiteId,
                                           @LocationId,
                                           @AuditUserName;
        END
        ELSE IF EXISTS
        (
            SELECT idfVectorSurveillanceSession
            FROM dbo.tlbVectorSurveillanceSessionSummary
            WHERE idfsVectorSubType = @idfsVectorSubType
                  and intRowStatus = 0
        )
        BEGIN
            SELECT @ReturnCode = -1;
            SELECT @ReturnMessage = 'IN USE';
        END

        SELECT @ReturnCode AS ReturnCode,
               @ReturnMessage AS ReturnMessage;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
end
GO
PRINT N'Altering Procedure [dbo].[USP_REF_VECTORTYPEREFERENCE_DEL]...';


GO
--=================================================================================================
-- Name: USP_REF_VECTORTYPEREFERENCE_DEL
--
-- Description:	Removes vector type from active list of vector types.
--							
-- Author: Ricky Moss.
--
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Ricky Moss		2018/09/26 Initial Release
-- Ricky Moss		12/13/2018 Removed return code
-- Stephen Long     11/01/2022 Added site alert logic.
-- 
-- Test Code:
-- exec USP_REF_VECTORTYPEREFERENCE_DEL 55615180000050, 0
--=================================================================================================
ALTER PROCEDURE [dbo].[USP_REF_VECTORTYPEREFERENCE_DEL]
(
    @idfsVectorType BIGINT,
    @DeleteAnyway BIT,
    @EventTypeId BIGINT,
    @SiteId BIGINT,
    @UserId BIGINT,
    @LocationId BIGINT,
    @AuditUserName NVARCHAR(200)
)
AS
BEGIN
    BEGIN TRY
        DECLARE @ReturnCode INT = 0,
                @ReturnMessage NVARCHAR(MAX) = 'SUCCESS';
        DECLARE @SuppressSelect TABLE
        (
            ReturnCode INT,
            ReturnMessage NVARCHAR(MAX)
        );

        IF (
               NOT EXISTS
        (
            SELECT idfCollectionMethodForVectorType
            FROM dbo.trtCollectionMethodForVectorType
            WHERE idfsVectorType = @idfsVectorType
                  AND intRowStatus = 0
        )
               AND NOT EXISTS
        (
            SELECT idfPensideTestTypeForVectorType
            FROM dbo.trtPensideTestTypeForVectorType
            WHERE idfsVectorType = @idfsVectorType
                  AND intRowStatus = 0
        )
               AND NOT EXISTS
        (
            SELECT idfSampleTypeForVectorType
            FROM dbo.trtSampleTypeForVectorType
            WHERE idfsVectorType = @idfsVectorType
                  AND intRowStatus = 0
        )
               AND NOT EXISTS
        (
            SELECT idfsVectorSubType
            FROM dbo.trtVectorSubType
            WHERE idfsVectorType = @idfsVectorType
                  AND intRowStatus = 0
        )
           )
           OR @deleteAnyway = 1
        BEGIN
            UPDATE dbo.trtVectorType
            SET intRowStatus = 1,
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUserName
            WHERE idfsVectorType = @idfsVectorType
                  and intRowStatus = 0;

            UPDATE dbo.trtBaseReference
            SET intRowStatus = 1,
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUserName
            WHERE idfsBaseReference = @idfsVectorType
                  AND intRowStatus = 0;

            UPDATE dbo.trtStringNameTranslation
            SET intRowStatus = 1,
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUserName
            WHERE idfsBaseReference = @idfsVectorType;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_ADMIN_EVENT_SET-1,
                                           @EventTypeId,
                                           @UserId,
                                           @idfsVectorType,
                                           NULL,
                                           @SiteId,
                                           NULL,
                                           @SiteId,
                                           @LocationId,
                                           @AuditUserName;
        END
        ELSE IF EXISTS
             (
                 SELECT idfCollectionMethodForVectorType
                 FROM dbo.trtCollectionMethodForVectorType
                 WHERE idfsVectorType = @idfsVectorType
                       AND intRowStatus = 0
             )
                OR EXISTS
             (
                 SELECT idfPensideTestTypeForVectorType
                 FROM dbo.trtPensideTestTypeForVectorType
                 WHERE idfsVectorType = @idfsVectorType
                       AND intRowStatus = 0
             )
                OR EXISTS
             (
                 SELECT idfSampleTypeForVectorType
                 FROM dbo.trtSampleTypeForVectorType
                 WHERE idfsVectorType = @idfsVectorType
                       AND intRowStatus = 0
             )
                OR EXISTS
             (
                 SELECT idfsVectorSubType
                 FROM dbo.trtVectorSubType
                 WHERE idfsVectorType = @idfsVectorType
                       AND intRowStatus = 0
             )
        BEGIN
            SELECT @ReturnCode = -1;
            SELECT @ReturnMessage = 'IN USE';
        END

        SELECT @ReturnCode AS ReturnCode,
               @ReturnMessage AS ReturnMessage;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_VAS_MONITORING_SESSION_SAMPLE_GETList]...';


GO
-- ================================================================================================
-- Name: USP_VAS_MONITORING_SESSION_SAMPLE_GETList
--
-- Description:	Gets sample records for veterinary surveillance session report use cases.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Mike	Kornegay 01/17/2022 Initial release (copied from USP_VET_SAMPLE_GETList)
-- Mike	Kornegay 09/30/2022 Correct species type to look at HACode instead of idfsBaseReference.
-- Mike Kornegay 10/10/2022 Add disease name to group by.
-- Mike Kornegay 10/16/2022 Correct test count to show 1 when tests exist.
-- Mike Kornegay 10/31/2022 Add comma separated disease name list.
--
-- EXEC	@return_value = [dbo].[USP_VCT_MONITORING_SESSION_SAMPLE_GETList]
		--@LanguageID = N'en-US',
		--@PageNumber = 1,
		--@PageSize = 10,
		--@SortColumn = NULL,
		--@SortOrder = NULL,
		--@MonitoringSessionID = 10,
		--@ParentSampleID = NULL,
		--@RootSampleID = NULL 
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_VAS_MONITORING_SESSION_SAMPLE_GETList] (
	@LanguageID NVARCHAR(50)
	,@PageNumber INT = 1
	,@PageSize INT = 10
	,@SortColumn NVARCHAR(30) = 'SampleTypeName'
	,@SortOrder NVARCHAR(4) = 'ASC'
	,@MonitoringSessionID BIGINT = NULL
	,@ParentSampleID BIGINT = NULL
	,@RootSampleID BIGINT = NULL
	)
AS
BEGIN
	DECLARE @firstRec INT
		,@lastRec INT
		,@TotalRowCount INT = 0;
	DECLARE @Results TABLE (
		SampleID BIGINT NOT NULL
	);

	SET @firstRec = (@PageNumber - 1) * @PageSize;
	SET @lastRec = (@PageNumber * @PageSize + 1);
	SET NOCOUNT ON;

	BEGIN TRY
		INSERT INTO @Results
		SELECT
			m.idfMaterial 
		FROM dbo.tlbMaterial m
		WHERE m.intRowStatus = 0
			AND m.idfMonitoringSession IS NOT NULL 
			AND (m.idfMonitoringSession = @MonitoringSessionID OR @MonitoringSessionID IS NULL)
			AND (
				(
					m.idfParentMaterial = @ParentSampleID
					AND m.idfsSampleKind IS NOT NULL --Get any samples aliquoted or derived once.
					)
				OR (@ParentSampleID IS NULL)
				)
			AND (
				(
					m.idfRootMaterial = @RootSampleID
					AND m.idfsSampleKind IS NOT NULL
					AND m.idfParentMaterial IS NOT NULL
					) --Get any aliquots or derivatives for the root sample.
				OR (@RootSampleID IS NULL)
				);

		SELECT SampleID
			,SampleTypeID
			,SampleTypeName
			,RootSampleID
			,OriginalSampleID
			,HumanID
			,SpeciesID
			,SpeciesTypeID
			,SpeciesTypeName
			,AnimalID
			,EIDSSAnimalID
			,AnimalGenderTypeID
			,AnimalGenderTypeName
			,AnimalAgeTypeID
			,AnimalAgeTypeName
			,AnimalColor
			,AnimalName
			,MonitoringSessionID
			,CollectedByPersonID
			,CollectedByPersonName
			,CollectedByOrganizationID
			,CollectedByOrganizationName
			,MainTestID
			,CollectionDate
			,SentDate
			,EIDSSLocalOrFieldSampleID
			,EIDSSReportSessionID
			,PatientFarmOwnerName
			,VectorSessionID
			,VectorID
			,FreezerID
			,SampleStatusTypeID
			,SampleStatusTypeName
			,FunctionalAreaID
			,FunctionalAreaName
			,DestroyedByPersonID
			,EnteredDate
			,DestructionDate
			,EIDSSLaboratorySampleID
			,Comments
			,SiteID
			,SentToOrganizationID
			,SentToOrganizationName
			,ReadOnlyIndicator
			,BirdStatusTypeID
			,BirdStatusTypeName
			,HumanDiseaseReportID
			,VeterinaryDiseaseReportID
			,AccessionDate
			,AccessionConditionTypeID
			,AccessionConditionTypeName
			,AccessionComment
			,AccessionByPersonID
			,DestructionMethodTypeID
			,CurrentSiteID
			,SampleKindTypeID
			,SampleKindTypeName
			,AccessionedIndicator
			,ShowInReportSessionListIndicator
			,ShowInLaboratoryListIndicator
			,ShowInDispositionListIndicator
			,ShowInAccessionListIndicator
			,MarkedForDispositionByPersonID
			,OutOfRepositoryDate
			,SampleStatusDate
			,DiseaseID
			,DiseaseNames
			,TestsCount
			,FarmID
			,FarmMasterID
			,EIDSSFarmID
			,Species
			,EIDSSLaboratoryOrLocalFieldSampleID
			,LabModuleSourceIndicator
			,RowStatus 
			,RowAction
			,TotalRowCount
			,CurrentPage
			,TotalPages
		FROM (
			SELECT ROW_NUMBER() OVER (
					ORDER BY CASE 
							WHEN @SortColumn = 'EIDSSLocalOrFieldSampleID'
								AND @SortOrder = 'ASC'
								THEN m.strFieldBarcode
							END ASC
						,CASE 
							WHEN @SortColumn = 'EIDSSLocalOrFieldSampleID'
								AND @SortOrder = 'DESC'
								THEN m.strFieldBarcode
							END DESC
						,CASE 
							WHEN @SortColumn = 'SampleTypeName'
								AND @SortOrder = 'ASC'
								THEN sampleType.name
							END ASC
						,CASE 
							WHEN @SortColumn = 'SampleTypeName'
								AND @SortOrder = 'DESC'
								THEN sampleType.name
							END DESC
					) AS RowNum
			,m.idfMaterial AS SampleID
			,m.idfsSampleType AS SampleTypeID
			,sampleType.name AS SampleTypeName
			,m.idfRootMaterial AS RootSampleID
			,m.idfParentMaterial AS OriginalSampleID
			,m.idfHuman AS HumanID
			,m.idfSpecies AS SpeciesID
			,speciesType.idfsReference AS SpeciesTypeID
			,speciesType.name AS SpeciesTypeName
			,m.idfAnimal AS AnimalID
			,a.strAnimalCode AS EIDSSAnimalID
			,a.idfsAnimalGender AS AnimalGenderTypeID
			,animalSexType.name AS AnimalGenderTypeName
			,a.idfsAnimalAge AS AnimalAgeTypeID
			,animalAgeType.name AS AnimalAgeTypeName
			,a.strColor AS AnimalColor
			,a.strName AS AnimalName
			,m.idfMonitoringSession AS MonitoringSessionID
			,m.idfFieldCollectedByPerson AS CollectedByPersonID
			,ISNULL(collectedByPerson.strFamilyName, N'') + ISNULL(', ' + collectedByPerson.strFirstName, '') + ISNULL(' ' + collectedByPerson.strSecondName, '') AS CollectedByPersonName
			,m.idfFieldCollectedByOffice AS CollectedByOrganizationID
			,collectedByOrganization.name AS CollectedByOrganizationName
			,m.idfMainTest AS MainTestID
			,m.datFieldCollectionDate AS CollectionDate
			,m.datFieldSentDate AS SentDate
			,m.strFieldBarcode AS EIDSSLocalOrFieldSampleID
			,m.strCalculatedCaseID AS EIDSSReportSessionID
			,m.strCalculatedHumanName AS PatientFarmOwnerName
			,m.idfVectorSurveillanceSession AS VectorSessionID
			,m.idfVector AS VectorID
			,m.idfSubdivision AS FreezerID
			,m.idfsSampleStatus AS SampleStatusTypeID
			,sampleStatusType.name AS SampleStatusTypeName
			,m.idfInDepartment AS FunctionalAreaID
			,functionalArea.name AS FunctionalAreaName
			,m.idfDestroyedByPerson AS DestroyedByPersonID
			,m.datEnteringDate AS EnteredDate
			,m.datDestructionDate AS DestructionDate
			,m.strBarcode AS EIDSSLaboratorySampleID
			,m.strNote AS Comments
			,m.idfsSite AS SiteID
			,m.idfSendToOffice AS SentToOrganizationID
			,sentToOrganization.name AS SentToOrganizationName
			,m.blnReadOnly AS ReadOnlyIndicator
			,m.idfsBirdStatus AS BirdStatusTypeID
			,birdStatusType.name AS BirdStatusTypeName
			,m.idfHumanCase AS HumanDiseaseReportID
			,m.idfVetCase AS VeterinaryDiseaseReportID
			,m.datAccession AS AccessionDate
			,m.idfsAccessionCondition AS AccessionConditionTypeID
			,accessionConditionType.name AS AccessionConditionTypeName
			,m.strCondition AS AccessionComment
			,m.idfAccesionByPerson AS AccessionByPersonID
			,m.idfsDestructionMethod AS DestructionMethodTypeID
			,m.idfsCurrentSite AS CurrentSiteID
			,m.idfsSampleKind AS SampleKindTypeID
			,sampleKindType.name AS SampleKindTypeName
			,m.blnAccessioned AS AccessionedIndicator
			,m.blnShowInCaseOrSession AS ShowInReportSessionListIndicator
			,m.blnShowInLabList AS ShowInLaboratoryListIndicator
			,m.blnShowInDispositionList AS ShowInDispositionListIndicator
			,m.blnShowInAccessionInForm AS ShowInAccessionListIndicator
			,m.idfMarkedForDispositionByPerson AS MarkedForDispositionByPersonID
			,m.datOutOfRepositoryDate AS OutOfRepositoryDate
			,m.datSampleStatusDate AS SampleStatusDate
			,m.DiseaseID
			,diseases AS DiseaseNames
			,CASE WHEN (SELECT Count(*) FROM dbo.tlbTesting t WHERE t.idfMaterial = m.idfMaterial) = 0 THEN 0 ELSE 1 END AS TestsCount
			,f.idfFarm AS FarmID
			,f.idfFarmActual AS FarmMasterID
			,f.strFarmCode AS EIDSSFarmID
			,(
				CASE 
					WHEN ms.idfsMonitoringSessionSpeciesType = 129909620007070
						THEN 'Herd ' + hd.strHerdCode + ' - ' + speciesType.name
					ELSE 'Flock ' + hd.strHerdCode + ' - ' + speciesType.name
					END
				) AS Species
			,CASE 
				WHEN m.strBarcode IS NULL
					THEN m.strFieldBarcode
				ELSE m.strBarcode
				END AS EIDSSLaboratoryOrLocalFieldSampleID
			,m.LabModuleSourceIndicator
			,m.intRowStatus AS RowStatus
			,0 AS RowAction
			,COUNT(*) OVER () AS TotalRowCount
			,CurrentPage = @PageNumber
			,TotalPages = (@TotalRowCount / @PageSize) + IIF(COUNT(*) % @PageSize > 0, 1, 0)
		FROM @Results res
		INNER JOIN dbo.tlbMaterial m ON m.idfMaterial = res.SampleID 
		INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000087) sampleType ON sampleType.idfsReference = m.idfsSampleType
		INNER JOIN dbo.tlbMonitoringSession ms ON ms.idfMonitoringSession = m.idfMonitoringSession
			AND ms.intRowStatus = 0
		LEFT JOIN dbo.FN_GBL_Institution(@LanguageID) collectedByOrganization ON collectedByOrganization.idfOffice = m.idfFieldCollectedByOffice
		LEFT JOIN dbo.tlbDepartment d ON d.idfDepartment = m.idfInDepartment
			AND d.intRowStatus = 0
		LEFT JOIN dbo.tlbOffice departmentOffice ON departmentOffice.idfOffice = d.idfOrganization
			AND departmentOffice.intRowStatus = 0
		LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000164) functionalArea ON functionalArea.idfsReference = d.idfsDepartmentName
		LEFT JOIN dbo.FN_GBL_Institution(@LanguageID) sentToOrganization ON sentToOrganization.idfOffice = m.idfSendToOffice
		LEFT JOIN dbo.tlbPerson collectedByPerson ON collectedByPerson.idfPerson = m.idfFieldCollectedByPerson
			AND collectedByPerson.intRowStatus = 0
		LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000015) sampleStatusType ON sampleStatusType.idfsReference = m.idfsSampleStatus
		LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000006) birdStatusType ON birdStatusType.idfsReference = m.idfsBirdStatus
		LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000110) accessionConditionType ON accessionConditionType.idfsReference = m.idfsAccessionCondition
		LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000158) sampleKindType ON sampleKindType.idfsReference = m.idfsSampleKind
		LEFT JOIN dbo.tlbAnimal a ON a.idfAnimal = m.idfAnimal
			AND a.intRowStatus = 0
		LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000005) animalAgeType ON animalAgeType.idfsReference = a.idfsAnimalAge
		LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000007) animalSexType ON animalSexType.idfsReference = a.idfsAnimalGender
		CROSS APPLY (SELECT dbo.FN_VAS_SESSION_SAMPLE_DIAGNOSESNAMES_GET(ms.idfMonitoringSession, @LanguageID, m.idfMaterial) diseases) diseaseNames
		LEFT JOIN dbo.tlbSpecies s ON s.idfSpecies = CASE 
				WHEN m.idfAnimal IS NULL
					THEN m.idfSpecies
				ELSE a.idfSpecies
				END
			AND s.intRowStatus = 0
		LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000086) speciesType ON speciesType.idfsReference = s.idfsSpeciesType
		LEFT JOIN dbo.tlbHerd hd ON hd.idfHerd = s.idfHerd
			AND hd.intRowStatus = 0
		LEFT JOIN dbo.tlbFarm f ON f.idfFarm = hd.idfFarm
			AND f.intRowStatus = 0
		GROUP BY m.idfMaterial
			,m.idfsSampleType
			,sampleType.name
			,m.idfRootMaterial
			,m.idfParentMaterial
			,m.idfHuman
			,m.idfSpecies
			,speciesType.idfsReference
			,speciesType.name
			,m.idfAnimal
			,a.strAnimalCode
			,a.idfsAnimalGender
			,animalSexType.name
			,a.idfsAnimalAge
			,animalAgeType.name
			,a.strColor
			,a.strName
			,m.idfMonitoringSession
			,m.idfFieldCollectedByPerson
			,collectedByPerson.strFamilyName
			,collectedByPerson.strFirstName
			,collectedByPerson.strSecondName
			,m.idfFieldCollectedByOffice
			,collectedByOrganization.name
			,m.idfMainTest
			,m.datFieldCollectionDate
			,m.datFieldSentDate
			,m.strFieldBarcode
			,m.strCalculatedCaseID
			,m.strCalculatedHumanName
			,m.idfVectorSurveillanceSession
			,m.idfVector
			,m.idfSubdivision
			,m.idfsSampleStatus
			,sampleStatusType.name
			,m.idfInDepartment
			,functionalArea.name 
			,m.idfDestroyedByPerson
			,m.datEnteringDate
			,m.datDestructionDate
			,m.strBarcode
			,m.strNote
			,m.idfsSite
			,m.intRowStatus
			,m.idfSendToOffice
			,sentToOrganization.name
			,m.blnReadOnly
			,m.idfsBirdStatus
			,birdStatusType.name
			,m.idfHumanCase
			,m.idfVetCase
			,m.datAccession
			,m.idfsAccessionCondition
			,accessionConditionType.name
			,m.strCondition
			,m.idfAccesionByPerson
			,m.idfsDestructionMethod
			,m.idfsCurrentSite
			,m.idfsSampleKind
			,sampleKindType.name 
			,m.blnAccessioned 
			,m.blnShowInCaseOrSession 
			,m.blnShowInLabList 
			,m.blnShowInDispositionList 
			,m.blnShowInAccessionInForm 
			,m.idfMarkedForDispositionByPerson 
			,m.datOutOfRepositoryDate 
			,m.datSampleStatusDate 
			,m.DiseaseID
			,diseases
			,hd.strHerdCode
			,f.idfFarm 
			,f.idfFarmActual 
			,f.strFarmCode
			,ms.idfsMonitoringSessionSpeciesType
			,m.LabModuleSourceIndicator
		) AS x
		WHERE RowNum > @firstRec
			AND RowNum < @lastRec
		ORDER BY RowNum;
	END TRY

	BEGIN CATCH
		THROW;
	END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USP_VAS_MONITORING_SESSION_SAMPLE_TO_DISEASE_GETList]...';


GO
-- ================================================================================================
-- Name: USP_VAS_MONITORING_SESSION_SAMPLE_TO_DISEASE_GETList
--
-- Description:	Gets the diseases associated with a sample record for veterinary surveillance session \
-- report use cases.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Mike Kornegay	08/12/2022 Initial release 
-- Mike Kornegay	08/17/2022 Modified comments
-- Mike Kornegay	08/18/2022 Corrected where condition for SampleID.
-- Mike Kornegay	08/29/2022 Remove extra parenthesis from where clause.
-- Mike Kornegay	11/01/2022 Correct where clause to return only specified session.
--
-- EXEC	@return_value = [dbo].[USP_VAS_MONITORING_SESSION_SAMPLE_TO_DISEASE_GETList]
		--@LanguageID = N'en-US',
		--@MonitoringSessionID = 155415660001435,
		--@SampleID = 155575800003466
		
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_VAS_MONITORING_SESSION_SAMPLE_TO_DISEASE_GETList] (
	@LanguageID NVARCHAR(50),
	@MonitoringSessionID BIGINT,
	@SampleID BIGINT = NULL
	)
AS
BEGIN
	SET NOCOUNT ON;

	BEGIN TRY
		SELECT
			msm.idfMonitoringSessionToMaterial AS MonitoringSessionToMaterialID,
			msm.idfMonitoringSession AS MonitoringSessionID,
			msm.idfMaterial AS SampleID,
			msm.idfsSampleType AS SampleTypeID,
			msm.idfsDisease AS DiseaseID,
			disease.name AS DiseaseName
		FROM dbo.tlbMonitoringSessionToMaterial msm
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) AS disease
			ON disease.idfsReference = msm.idfsDisease
		WHERE msm.intRowStatus = 0
			AND msm.idfMonitoringSession = @MonitoringSessionID
			AND (msm.idfMaterial = @SampleID OR @SampleID IS NULL);
		
	END TRY

	BEGIN CATCH
		THROW;
	END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USP_VAS_MONITORING_SESSION_SET]...';


GO
-- ================================================================================================
-- Name: USP_VAS_MONITORING_SESSION_SET
--
-- Description:	Inserts or updates veterinary surveillance session for the veterinary active surveillance 
-- session use cases.
--                      
-- Revision History:
-- Name					Date       Change Detail
-- ---------------		---------- -------------------------------------------------------------------
-- Mike Kornegay		02/02/2022 Initial release. (Copied from USP_VET_DISEASE_REPORT_SET).
-- Mike Kornegay		02/14/2022 Correct problem with saving actions - retrieve monitoring session id first.
-- Mike Kornegay		02/15/2022 Removed @SpeciesTypeID because this was the same as @ReportTypeID
-- Mike Kornegay		02/16/2022 Added back the animals temp to add or update animals 
--							  before samples are written.
-- Mike Kornegay		02/26/2022 Fixed FlockOrHerd section not passing the FarmID.
-- Mike Kornegay		03/08/2022 Removed MonitoringSessionID from samples - should come from new or update key
--							  and added @LocationID
-- Mike Kornegay		03/11/2022 Refactored Aggregate Info sections.
-- Mike Kornegay		03/18/2022 Corrected parameters for USSP_VCT_MONITORING_SESSION_SUMMARY_SET.
-- Mike Kornegay		03/19/2022 Corrected issue with farm copy for aggregate farms and saving of aggregate diseases.
-- Mike Kornegay		03/21/2022 Corrected defect in reading aggregate summary temp table.
-- Mani Govindarajan	05/26/2022 Disassociate MonitoringSession with Farm in tlbFarm Table  search for comment -- disassociate farm with session
-- Mike Kornegay		06/02/2022 Add notifications save routine.
-- Mike Kornegay		06/13/2022 Changed references for @ReportTypeID to point to the new SessionCategoryID fields.
-- Stephen Long         07/06/2022 Updates for site alerts to call new stored procedure.
-- Mike Kornegay		07/08/2022 Correct logic for removing aggregate farms from monitoring session.
-- Mike Kornegay		08/18/2022 Added logic for storing multiple diseases per sample.
-- Mike Kornegay        08/19/2022 Correct error on SampleToDisease temp table.
-- Mike Kornegay		09/05/2022 Fixed error where MonitoringSessionToDiagnosisID was not set correctly.
-- Mike Kornegay		09/30/2022 Add saving of idfsMonitoringSessionSpeciesType and correct farm save for new type.
-- Mike Kornegay		10/07/2022 Defect #5140 - EIDSSLocalOrFieldSampleID not generating correctly.
-- Mike Kornegay		11/01/2022 Correct iteration on EIDSSLocalOrFieldSampleID.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_VAS_MONITORING_SESSION_SET]
(
    @MonitoringSessionID BIGINT = NULL,
    @SessionID NVARCHAR(200) = NULL,
    @SessionStartDate DATETIME = NULL,
    @SessionEndDate DATETIME = NULL,
    @SessionStatusTypeID BIGINT = NULL,
    @SessionCategoryID BIGINT = NULL,
    @SiteID BIGINT = NULL,
    @LegacySessionID NVARCHAR(200) = NULL,
    @CountryID BIGINT = NULL,
    @RegionID BIGINT = NULL,
    @RayonID BIGINT = NULL,
    @SettlementID BIGINT = NULL,
    @CampaignKey BIGINT = NULL,
    @CampaignID NVARCHAR(200) = NULL,
    @DateEntered DATETIME = NULL,
    @EnteredByPersonID BIGINT = NULL,
    @RowStatus INT,
    @ReportTypeID BIGINT = NULL,
    @AuditUserName NVARCHAR(200),
    @FlocksOrHerds NVARCHAR(MAX) = NULL,
    @DiseaseSpeciesSamples NVARCHAR(MAX) = NULL,
    @Species NVARCHAR(MAX) = NULL,
    @Animals NVARCHAR(MAX) = NULL,
    @Farms NVARCHAR(MAX) = NULL,
    @Samples NVARCHAR(MAX) = NULL,
	@SamplesToDiseases NVARCHAR(MAX) = NULL,
    @LaboratoryTests NVARCHAR(MAX) = NULL,
    @LaboratoryTestInterpretations NVARCHAR(MAX) = NULL,
    @Actions NVARCHAR(MAX) = NULL,
    @AggregateSummaryInfo NVARCHAR(MAX) = NULL,
    @AggregateSummaryDiseases NVARCHAR(MAX) = NULL,
    @FarmsAggregate NVARCHAR(MAX) = NULL,
    @FlocksOrHerdsAggregate NVARCHAR(MAX) = NULL,
    @SpeciesAggregate NVARCHAR(MAX) = NULL,
    @DiseaseReports NVARCHAR(MAX) = NULL,
    @Events NVARCHAR(MAX) = NULL,
    @UserID BIGINT,
    @LocationID BIGINT = NULL,
	@LinkLocalOrFieldSampleIDToReportID BIT = 0
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        DECLARE @ReturnCode INT = 0;
        DECLARE @ReturnMessage NVARCHAR(MAX) = N'SUCCESS';
        DECLARE @SuppressSelect TABLE
        (
            ReturnCode INT,
            ReturnMessage NVARCHAR(MAX)
        );
        DECLARE @RowAction INT = NULL,
                @RowID BIGINT,
				@ChildRowID BIGINT,
				@Iteration INT = 0,
                @NewFarmOwnerID BIGINT = NULL,
                @FarmID BIGINT = NULL,
                @FarmMasterID BIGINT = NULL,
                @FarmOwnerID BIGINT = NULL,
                @Latitude FLOAT = NULL,
                @Longitude FLOAT = NULL,
                @FlockOrHerdID BIGINT = NULL,
                @FlockOrHerdMasterID BIGINT = NULL,
                @EIDSSFlockOrHerdID NVARCHAR(200) = NULL,
                @SickAnimalQuantity INT = NULL,
                @TotalAnimalQuantity INT = NULL,
                @DeadAnimalQuantity INT = NULL,
                @Comments NVARCHAR(2000) = NULL,
                @SpeciesID BIGINT = NULL,
                @SpeciesMasterID BIGINT = NULL,
                @InternalSpeciesTypeID BIGINT = NULL,
                @StartOfSignsDate DATETIME = NULL,
                @AverageAge NVARCHAR(200) = NULL,
                @ObservationID BIGINT = NULL,
                @AnimalID BIGINT = NULL,
                @SexTypeID BIGINT = NULL,
                @DiseaseID BIGINT = NULL,
                @ConditionTypeID BIGINT = NULL,
                @AgeTypeID BIGINT = NULL,
                @EIDSSAnimalID NVARCHAR(200) = NULL,
                @AnimalName NVARCHAR(200) = NULL,
                @Color NVARCHAR(200) = NULL,
                @AnimalDescription NVARCHAR(200) = NULL,
                @ClinicalSignsIndicator BIGINT = NULL,
                @VaccinationID BIGINT,
                @VaccinationTypeID BIGINT = NULL,
                @RouteTypeID BIGINT = NULL,
                @VaccinationDate DATETIME = NULL,
                @Manufacturer NVARCHAR(200) = NULL,
                @LotNumber NVARCHAR(200) = NULL,
                @NumberVaccinated INT = NULL,
                @SampleID BIGINT,
                @SampleTypeID BIGINT = NULL,
                @RootSampleID BIGINT = NULL,
                @ParentSampleID BIGINT = NULL,
                @CollectedByPersonID BIGINT = NULL,
                @CollectedByOrganizationID BIGINT = NULL,
                @CollectionDate DATETIME = NULL,
                @SentDate DATETIME = NULL,
                @EIDSSLocalOrFieldSampleID NVARCHAR(200) = NULL,
                @SampleStatusTypeID BIGINT = NULL,
                @SpeciesTypeID BIGINT = NULL,
                @EIDSSLaboratorySampleID NVARCHAR(200) = NULL,
                @SentToOrganizationID BIGINT = NULL,
                @ReadOnlyIndicator BIT = NULL,
                @CurrentSiteID BIGINT = NULL,
                @BirdStatusTypeID BIGINT = NULL,
                @PensideTestID BIGINT = NULL,
                @PensideTestResultTypeID BIGINT = NULL,
                @PensideTestNameTypeID BIGINT = NULL,
                @TestedByPersonID BIGINT = NULL,
                @TestedByOrganizationID BIGINT = NULL,
                @TestDate DATETIME = NULL,
                @PensideTestCategoryTypeID BIGINT = NULL,
                @TestID BIGINT = NULL,
                @TestNameTypeID BIGINT = NULL,
                @TestCategoryTypeID BIGINT = NULL,
                @TestResultTypeID BIGINT = NULL,
                @TestStatusTypeID BIGINT,
                @BatchTestID BIGINT = NULL,
                @StartedDate DATETIME = NULL,
                @ResultDate DATETIME = NULL,
                @ResultEnteredByOrganizationID BIGINT = NULL,
                @ResultEnteredByPersonID BIGINT = NULL,
                @ValidatedByOrganizationID BIGINT = NULL,
                @ValidatedByPersonID BIGINT = NULL,
                @NonLaboratoryTestIndicator BIT,
                @ExternalTestIndicator BIT = NULL,
                @PerformedByOrganizationID BIGINT = NULL,
                @ReceivedDate DATETIME = NULL,
                @ContactPersonName NVARCHAR(200) = NULL,
                @TestMonitoringSesssionID BIGINT = NULL,
                @TestInterpretationID BIGINT,
                @InterpretedStatusTypeID BIGINT = NULL,
                @InterpretedByOrganizationID BIGINT = NULL,
                @InterpretedByPersonID BIGINT = NULL,
                @TestingInterpretations BIGINT,
                @ValidatedStatusIndicator BIT = NULL,
                @ReportSessionCreatedIndicator BIT = NULL,
                @ValidatedComment NVARCHAR(200) = NULL,
                @InterpretedComment NVARCHAR(200) = NULL,
                @ValidatedDate DATETIME = NULL,
                @InterpretedDate DATETIME = NULL,
                @CaseLogID BIGINT,
                @LogStatusTypeID BIGINT = NULL,
                @LoggedByPersonID BIGINT = NULL,
                @LogDate DATETIME = NULL,
                @ActionRequired NVARCHAR(200) = NULL,
                @VeterinaryDiseaseReportRelationshipID BIGINT = NULL,
                @RelatedToSpeciesID BIGINT = NULL,
                @RelatedToAnimalID BIGINT = NULL,
                @RelatedToObservationID BIGINT = NULL,
                @FormTemplateID BIGINT,
                @ObservationSiteID BIGINT,
                @ActivityID BIGINT = NULL,
                @ActivityIDNew BIGINT = NULL,
                @ParameterID BIGINT = NULL,
                @ParameterValue SQL_VARIANT = NULL,
                @ParameterRowID BIGINT = NULL,
                @EventId BIGINT,
                @EventTypeId BIGINT = NULL,
                @EventSiteId BIGINT = NULL,
                @EventObjectId BIGINT = NULL,
                @EventUserId BIGINT = NULL,
                @EventDiseaseId BIGINT = NULL,
                @EventLocationId BIGINT = NULL,
                @EventInformationString NVARCHAR(MAX) = NULL,
                @EventLoginSiteId BIGINT = NULL,
                @MonitoringSessionActionID BIGINT = NULL,
                @MonitoringSessionActionStatusTypeID BIGINT = NULL,
                @MonitoringSessionActionTypeID BIGINT = NULL,
                @MonitoringSessionToDiagnosis BIGINT = NULL,
                @MonitoringSessionSummaryID BIGINT = NULL,
				@MonitoringSessionToMaterialID BIGINT = NULL,
                @ActionDate DATETIME = NULL,
                @SampledAnimalsQuantity INT = NULL,
                @SamplesQuantity INT = NULL,
                @PositiveAnimalsQuantity INT = NULL,
                @Order INT = NULL;


        DECLARE @DiseaseSpeciesSampleTemp TABLE
        (
            MonitoringSessionToDiagnosisID BIGINT NOT NULL,
            DiseaseID BIGINT NOT NULL,
            [Order] INT NOT NULL,
            SpeciesTypeID BIGINT NULL,
            SampleTypeID BIGINT NULL,
            RowStatus INT NULL,
            RowAction INT NULL
        );
        DECLARE @FarmsTemp TABLE
        (
            FarmMasterID BIGINT NOT NULL,
            FarmID BIGINT NULL,
            TotalAnimalQuantity INT NULL,
            Latitude FLOAT NULL,
            Longitude FLOAT NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @FlocksOrHerdsTemp TABLE
        (
            FlockOrHerdID BIGINT NOT NULL,
            FarmID BIGINT NULL,
            FarmMasterID BIGINT NULL,
            FlockOrHerdMasterID BIGINT NULL,
            EIDSSFlockOrHerdID NVARCHAR(200) NULL,
            SickAnimalQuantity INT NULL,
            TotalAnimalQuantity INT NULL,
            DeadAnimalQuantity INT NULL,
            RowStatus INT NULL,
            RowAction INT NULL
        );
        DECLARE @SpeciesTemp TABLE
        (
            SpeciesID BIGINT NOT NULL,
            SpeciesMasterID BIGINT NULL,
            FlockOrHerdID BIGINT NOT NULL,
            SpeciesTypeID BIGINT NOT NULL,
            SickAnimalQuantity INT NULL,
            TotalAnimalQuantity INT NULL,
            DeadAnimalQuantity INT NULL,
            StartOfSignsDate DATETIME NULL,
            AverageAge NVARCHAR(200) NULL,
            ObservationID BIGINT NULL,
            Comments NVARCHAR(2000) NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL,
            RelatedToSpeciesID BIGINT NULL,
            RelatedToObservationID BIGINT NULL
        );
        DECLARE @AnimalsTemp TABLE
        (
            AnimalID BIGINT NOT NULL,
            SexTypeID BIGINT NULL,
            ConditionTypeID BIGINT NULL,
            AgeTypeID BIGINT NULL,
            SpeciesID BIGINT NULL,
            ObservationID BIGINT NULL,
            EIDSSAnimalID NVARCHAR(200) NULL,
            AnimalName NVARCHAR(200) NULL,
            Color NVARCHAR(200) NULL,
            AnimalDescription NVARCHAR(200) NULL,
            ClinicalSignsIndicator BIGINT NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL,
            RelatedToAnimalID BIGINT NULL,
            RelatedToObservationID BIGINT NULL
        );
        DECLARE @SamplesTemp TABLE
        (
            SampleID BIGINT NOT NULL,
            SampleTypeID BIGINT NULL,
            RootSampleID BIGINT NULL,
            ParentSampleID BIGINT NULL,
            SpeciesID BIGINT NULL,
            AnimalID BIGINT NULL,
            MonitoringSessionID BIGINT NULL,
            SampleStatusTypeID BIGINT NULL,
            CollectionDate DATETIME NULL,
            CollectedByOrganizationID BIGINT NULL,
            CollectedByPersonID BIGINT NULL,
            SentDate DATETIME NULL,
            SentToOrganizationID BIGINT NULL,
            EIDSSLocalOrFieldSampleID NVARCHAR(200) NULL,
            Comments NVARCHAR(200) NULL,
            SiteID BIGINT NOT NULL,
            CurrentSiteID BIGINT NULL,
            EnteredDate DATETIME NULL,
            DiseaseID BIGINT NULL,
            BirdStatusTypeID BIGINT NULL,
            ReadOnlyIndicator BIT NULL,
            FarmID BIGINT NULL,
            FarmMasterID BIGINT NULL,
            FarmOwnerID BIGINT NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
		DECLARE @SamplesToDiseasesTemp TABLE
        (
            MonitoringSessionToMaterialID BIGINT NOT NULL,
            MonitoringSessionID BIGINT NOT NULL,
			SampleID BIGINT NOT NULL,
			SampleTypeID BIGINT NULL,
            DiseaseID BIGINT NOT NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @LaboratoryTestsTemp TABLE
        (
            TestID BIGINT NOT NULL,
            TestNameTypeID BIGINT NULL,
            TestCategoryTypeID BIGINT NULL,
            TestResultTypeID BIGINT NULL,
            TestStatusTypeID BIGINT NOT NULL,
            DiseaseID BIGINT NOT NULL,
            SampleID BIGINT NULL,
            BatchTestID BIGINT NULL,
            ObservationID BIGINT NULL,
            TestNumber INT NULL,
            Comments NVARCHAR NULL,
            StartedDate DATETIME NULL,
            ResultDate DATETIME NULL,
            TestedByOrganizationID BIGINT NULL,
            TestedByPersonID BIGINT NULL,
            ResultEnteredByOrganizationID BIGINT NULL,
            ResultEnteredByPersonID BIGINT NULL,
            ValidatedByOrganizationID BIGINT NULL,
            ValidatedByPersonID BIGINT NULL,
            ReadOnlyIndicator BIT NOT NULL,
            NonLaboratoryTestIndicator BIT NOT NULL,
            ExternalTestIndicator BIT NULL,
            PerformedByOrganizationID BIGINT NULL,
            ReceivedDate DATETIME NULL,
            ContactPersonName NVARCHAR(200) NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @LaboratoryTestInterpretationsTemp TABLE
        (
            TestInterpretationID BIGINT NOT NULL,
            DiseaseID BIGINT NULL,
            InterpretedStatusTypeID BIGINT NULL,
            ValidatedByOrganizationID BIGINT NULL,
            ValidatedByPersonID BIGINT NULL,
            InterpretedByOrganizationID BIGINT NULL,
            InterpretedByPersonID BIGINT NULL,
            TestID BIGINT NOT NULL,
            ValidatedStatusIndicator BIT NULL,
            ReportSessionCreatedIndicator BIT NULL,
            ValidatedComment NVARCHAR(200) NULL,
            InterpretedComment NVARCHAR(200) NULL,
            ValidatedDate DATETIME NULL,
            InterpretedDate DATETIME NULL,
            ReadOnlyIndicator BIT NOT NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @ActionsTemp TABLE
        (
            MonitoringSessionActionID BIGINT NOT NULL,
            MonitoringSessionActionStatusTypeID BIGINT NULL,
            MonitoringSessionActionTypeID BIGINT NULL,
            EnteredByPersonID BIGINT NULL,
            ActionDate DATETIME NULL,
            Comments NVARCHAR(1000) NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @AggregateSummaryInfoTemp TABLE
        (
            MonitoringSessionSummaryID BIGINT NOT NULL,
            FarmID BIGINT NULL,
            FarmMasterID BIGINT NULL,
            SpeciesID BIGINT NULL,
            AnimalSexID BIGINT NULL,
            SampleAnimalsQty INT NULL,
            SamplesQty INT NULL,
            CollectionDate DATETIME NULL,
            CollectedByPersonID BIGINT NULL,
            PositiveAnimalsQty INT NULL,
            DiseaseID BIGINT NULL,
            SampleTypeID BIGINT NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @AggregateSummaryDiseasesTemp TABLE
        (
            MonitoringSessionSummaryID BIGINT NULL,
            DiseaseID BIGINT NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @FarmsAggregateTemp TABLE
        (
            FarmMasterID BIGINT NOT NULL,
            FarmID BIGINT NULL,
            TotalAnimalQuantity INT NULL,
            Latitude FLOAT NULL,
            Longitude FLOAT NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @FlocksOrHerdsAggregateTemp TABLE
        (
            FlockOrHerdID BIGINT NOT NULL,
            FarmID BIGINT NULL,
            FarmMasterID BIGINT NULL,
            FlockOrHerdMasterID BIGINT NULL,
            EIDSSFlockOrHerdID NVARCHAR(200) NULL,
            SickAnimalQuantity INT NULL,
            TotalAnimalQuantity INT NULL,
            DeadAnimalQuantity INT NULL,
            RowStatus INT NULL,
            RowAction INT NULL
        );
        DECLARE @SpeciesAggregateTemp TABLE
        (
            SpeciesID BIGINT NOT NULL,
            SpeciesMasterID BIGINT NULL,
            FlockOrHerdID BIGINT NOT NULL,
            SpeciesTypeID BIGINT NOT NULL,
            SickAnimalQuantity INT NULL,
            TotalAnimalQuantity INT NULL,
            DeadAnimalQuantity INT NULL,
            StartOfSignsDate DATETIME NULL,
            AverageAge NVARCHAR(200) NULL,
            ObservationID BIGINT NULL,
            Comments NVARCHAR(2000) NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL,
            RelatedToSpeciesID BIGINT NULL,
            RelatedToObservationID BIGINT NULL
        );
        DECLARE @EventsTemp TABLE
        (
            EventId BIGINT NOT NULL,
            EventTypeId BIGINT NULL,
            UserId BIGINT NULL,
            SiteId BIGINT NULL,
            LoginSiteId BIGINT NULL,
            ObjectId BIGINT NULL,
            DiseaseId BIGINT NULL,
            LocationId BIGINT NULL,
            InformationString NVARCHAR(MAX) NULL
        );

        BEGIN TRANSACTION;

        INSERT INTO @DiseaseSpeciesSampleTemp
        SELECT *
        FROM
            OPENJSON(@DiseaseSpeciesSamples)
            WITH
            (
                MonitoringSessionToDiagnosisID BIGINT,
                DiseaseID BIGINT,
                [Order] INT,
                SpeciesTypeID BIGINT,
                SampleTypeID BIGINT,
                RowStatus INT,
                RowAction INT
            );
        INSERT INTO @FarmsTemp
        SELECT *
        FROM
            OPENJSON(@Farms)
            WITH
            (
                FarmMasterID BIGINT,
                FarmID BIGINT,
                TotalAnimalQuantity INT,
                Latitude FLOAT,
                Longitude FLOAT,
                RowStatus INT,
                RowAction INT
            );
        INSERT INTO @FlocksOrHerdsTemp
        SELECT *
        FROM
            OPENJSON(@FlocksOrHerds)
            WITH
            (
                FlockOrHerdID BIGINT,
                FarmID BIGINT,
                FarmMasterID BIGINT,
                FlockOrHerdMasterID BIGINT,
                EIDSSFlockOrHerdID NVARCHAR(200),
                SickAnimalQuantity INT,
                TotalAnimalQuantity INT,
                DeadAnimalQuantity INT,
                RowStatus INT,
                RowAction INT
            );
        INSERT INTO @SpeciesTemp
        SELECT *
        FROM
            OPENJSON(@Species)
            WITH
            (
                SpeciesID BIGINT,
                SpeciesMasterID BIGINT,
                FlockOrHerdID BIGINT,
                SpeciesTypeID BIGINT,
                SickAnimalQuantity INT,
                TotalAnimalQuantity INT,
                DeadAnimalQuantity INT,
                StartOfSignsDate DATETIME,
                AverageAge NVARCHAR(200),
                ObservationID BIGINT,
                Comments NVARCHAR(2000),
                RowStatus INT,
                RowAction INT,
                RelatedToSpeciesID BIGINT,
                RelatedToObservationID BIGINT
            );
        INSERT INTO @AnimalsTemp
        SELECT *
        FROM
            OPENJSON(@Animals)
            WITH
            (
                AnimalID BIGINT,
                SexTypeID BIGINT,
                ConditionTypeID BIGINT,
                AgeTypeID BIGINT,
                SpeciesID BIGINT,
                ObservationID BIGINT,
                EIDSSAnimalID NVARCHAR(200),
                AnimalName NVARCHAR(200),
                Color NVARCHAR(200),
                AnimalDescription NVARCHAR(200),
                ClinicalSignsIndicator BIGINT,
                RowStatus INT,
                RowAction INT,
                RelatedToAnimalID BIGINT,
                RelatedToObservationID BIGINT
            );
        INSERT INTO @SamplesTemp
        SELECT *
        FROM
            OPENJSON(@Samples)
            WITH
            (
                SampleID BIGINT,
                SampleTypeID BIGINT,
                RootSampleID BIGINT,
                ParentSampleID BIGINT,
                SpeciesID BIGINT,
                AnimalID BIGINT,
                MonitoringSessionID BIGINT,
                SampleStatusTypeID BIGINT,
                CollectionDate DATETIME2,
                CollectedByOrganizationID BIGINT,
                CollectedByPersonID BIGINT,
                SentDate DATETIME2,
                SentToOrganizationID BIGINT,
                EIDSSLocalOrFieldSampleID NVARCHAR(200),
                Comments NVARCHAR(200),
                SiteID BIGINT,
                CurrentSiteID BIGINT,
                EnteredDate DATETIME2,
                DiseaseID BIGINT,
                BirdStatusTypeID BIGINT,
                ReadOnlyIndicator BIT,
                FarmID BIGINT,
                FarmMasterID BIGINT,
                FarmOwnerID BIGINT,
                RowStatus INT,
                RowAction INT
            );

		SET @Iteration = (SELECT COUNT(*) FROM dbo.tlbMaterial WHERE idfMonitoringSession = @MonitoringSessionID);

		INSERT INTO @SamplesToDiseasesTemp
		SELECT *
		FROM
			OPENJSON(@SamplesToDiseases)
			WITH
			(
				MonitoringSessionToMaterialID BIGINT,
				MonitoringSessionID BIGINT,
				SampleID BIGINT,
				SampleTypeID BIGINT,
				DiseaseID BIGINT,
				RowStatus INT,
				RowAction INT
			);
        INSERT INTO @LaboratoryTestsTemp
        SELECT *
        FROM
            OPENJSON(@LaboratoryTests)
            WITH
            (
                TestID BIGINT,
                TestNameTypeID BIGINT,
                TestCategoryTypeID BIGINT,
                TestResultTypeID BIGINT,
                TestStatusTypeID BIGINT,
                DiseaseID BIGINT,
                SampleID BIGINT,
                BatchTestID BIGINT,
                ObservationID BIGINT,
                TestNumber INT,
                Comments NVARCHAR(500),
                StartedDate DATETIME2,
                ResultDate DATETIME2,
                TestedByOrganizationID BIGINT,
                TestedByPersonID BIGINT,
                ResultEnteredByOrganizationID BIGINT,
                ResultEnteredByPersonID BIGINT,
                ValidatedByOrganizationID BIGINT,
                ValidatedByPersonID BIGINT,
                ReadOnlyIndicator BIT,
                NonLaboratoryTestIndicator BIT,
                ExternalTestIndicator BIT,
                PerformedByOrganizationID BIGINT,
                ReceivedDate DATETIME2,
                ContactPersonName NVARCHAR(200),
                RowStatus INT,
                RowAction INT
            );
        INSERT INTO @LaboratoryTestInterpretationsTemp
        SELECT *
        FROM
            OPENJSON(@LaboratoryTestInterpretations)
            WITH
            (
                TestInterpretationID BIGINT,
                DiseaseID BIGINT,
                InterpretedStatusTypeID BIGINT,
                ValidatedByOrganizationID BIGINT,
                ValidatedByPersonID BIGINT,
                InterpretedByOrganizationID BIGINT,
                InterpretedByPersonID BIGINT,
                TestID BIGINT,
                ValidatedStatusIndicator BIT,
                ReportSessionCreatedIndicator BIT,
                ValidatedComment NVARCHAR(200),
                InterpretedComment NVARCHAR(200),
                ValidatedDate DATETIME2,
                InterpretedDate DATETIME2,
                ReadOnlyIndicator BIT,
                RowStatus INT,
                RowAction INT
            );
        INSERT INTO @ActionsTemp
        SELECT *
        FROM
            OPENJSON(@Actions)
            WITH
            (
                MonitoringSessionActionID BIGINT,
                MonitoringSessionActionStatusTypeID BIGINT,
                MonitoringSessionActionTypeID BIGINT,
                EnteredByPersonID BIGINT,
                ActionDate DATETIME,
                Comments NVARCHAR(1000),
                RowStatus INT,
                RowAction INT
            );
        INSERT INTO @AggregateSummaryInfoTemp
        SELECT *
        FROM
            OPENJSON(@AggregateSummaryInfo)
            WITH
            (
                MonitoringSessionSummaryID BIGINT,
                FarmID BIGINT,
                FarmMasterID BIGINT,
                SpeciesID BIGINT,
                AnimalSexID BIGINT,
                SampleAnimalsQty INT,
                SamplesQty INT,
                CollectionDate DATETIME,
                CollectedByPersonID BIGINT,
                PositiveAnimalsQty INT,
                DiseaseID BIGINT,
                SampleTypeID BIGINT,
                RowStatus INT,
                RowAction INT
            );
        INSERT INTO @AggregateSummaryDiseasesTemp
        SELECT *
        FROM
            OPENJSON(@AggregateSummaryDiseases)
            WITH
            (
                MonitoringSessionSummaryID BIGINT,
                DiseaseID BIGINT,
                RowStatus INT,
                RowAction INT
            );
        INSERT INTO @FarmsAggregateTemp
        SELECT *
        FROM
            OPENJSON(@FarmsAggregate)
            WITH
            (
                FarmMasterID BIGINT,
                FarmID BIGINT,
                TotalAnimalQuantity INT,
                Latitude FLOAT,
                Longitude FLOAT,
                RowStatus INT,
                RowAction INT
            );
        INSERT INTO @FlocksOrHerdsAggregateTemp
        SELECT *
        FROM
            OPENJSON(@FlocksOrHerdsAggregate)
            WITH
            (
                FlockOrHerdID BIGINT,
                FarmID BIGINT,
                FarmMasterID BIGINT,
                FlockOrHerdMasterID BIGINT,
                EIDSSFlockOrHerdID NVARCHAR(200),
                SickAnimalQuantity INT,
                TotalAnimalQuantity INT,
                DeadAnimalQuantity INT,
                RowStatus INT,
                RowAction INT
            );
        INSERT INTO @SpeciesAggregateTemp
        SELECT *
        FROM
            OPENJSON(@SpeciesAggregate)
            WITH
            (
                SpeciesID BIGINT,
                SpeciesMasterID BIGINT,
                FlockOrHerdID BIGINT,
                SpeciesTypeID BIGINT,
                SickAnimalQuantity INT,
                TotalAnimalQuantity INT,
                DeadAnimalQuantity INT,
                StartOfSignsDate DATETIME,
                AverageAge NVARCHAR(200),
                ObservationID BIGINT,
                Comments NVARCHAR(2000),
                RowStatus INT,
                RowAction INT,
                RelatedToSpeciesID BIGINT,
                RelatedToObservationID BIGINT
            );

        INSERT INTO @EventsTemp
        SELECT *
        FROM
            OPENJSON(@Events)
            WITH
            (
                EventId BIGINT,
                EventTypeId BIGINT,
                UserId BIGINT,
                SiteId BIGINT,
                LoginSiteId BIGINT,
                ObjectId BIGINT,
                DiseaseId BIGINT,
                LocationId BIGINT,
                InformationString NVARCHAR(MAX)
            );

        IF NOT EXISTS
        (
            SELECT *
            FROM dbo.tlbMonitoringSession
            WHERE idfMonitoringSession = @MonitoringSessionID
                  AND intRowStatus = 0
        )
        BEGIN

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tlbMonitoringSession',
                                              @MonitoringSessionID OUTPUT;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_GBL_NextNumber_GET 'Vet Active Surveillance Session',
                                               @SessionID OUTPUT,
                                               NULL;

            INSERT INTO dbo.tlbMonitoringSession
            (
                [idfMonitoringSession],
                [idfsMonitoringSessionStatus],
                [idfsCountry],
                [idfsRegion],
                [idfsRayon],
                [idfsSettlement],
                [idfPersonEnteredBy],
                [idfCampaign],
                [idfsSite],
                [datEnteredDate],
                [strMonitoringSessionID],
                [intRowStatus],
                [datStartDate],
                [datEndDate],
                [SessionCategoryID],
                [LegacySessionID],
                [AuditCreateUser],
                [SourceSystemNameID],
                [SourceSystemKeyValue],
                [idfsLocation],
				[idfsMonitoringSessionSpeciesType]
            )
            VALUES
            (@MonitoringSessionID,
             @SessionStatusTypeID,
             @CountryID,
             @RegionID,
             @RayonID,
             @SettlementID,
             @EnteredByPersonID,
             @CampaignKey,
             @SiteID,
             @DateEntered,
             @SessionID,
             0  ,
             @SessionStartDate,
             @SessionEndDate,
             @SessionCategoryID,
             @LegacySessionID,
             @AuditUserName,
             10519001,
             '[{"idfMonitoringSessionID":' + CAST(@MonitoringSessionID AS NVARCHAR(300)) + '}]',
             @LocationID,
			 @ReportTypeID
            );

            UPDATE @EventsTemp
            SET ObjectId = @MonitoringSessionID
            WHERE ObjectId = 0;
        END
        ELSE
        BEGIN
            UPDATE [dbo].[tlbMonitoringSession]
            SET [idfsMonitoringSessionStatus] = @SessionStatusTypeID,
                [idfsCountry] = @CountryID,
                [idfsRegion] = @RegionID,
                [idfsRayon] = @RayonID,
                [idfsSettlement] = @SettlementID,
                [idfPersonEnteredBy] = @EnteredByPersonID,
                [idfCampaign] = @CampaignKey,
                [idfsSite] = @SiteID,
                [datEnteredDate] = @DateEntered,
                [strMonitoringSessionID] = @SessionID,
                [intRowStatus] = 0,
                [datStartDate] = @SessionStartDate,
                [datEndDate] = @SessionEndDate,
                [SessionCategoryID] = @SessionCategoryID,
                [LegacySessionID] = @LegacySessionID,
                [AuditUpdateUser] = @AuditUserName,
                [idfsLocation] = @LocationID,
				[idfsMonitoringSessionSpeciesType] = @ReportTypeID
            WHERE idfMonitoringSession = @MonitoringSessionID
        END;

        WHILE EXISTS (SELECT * FROM @DiseaseSpeciesSampleTemp)
        BEGIN
            SELECT TOP 1
                @RowID = MonitoringSessionToDiagnosisID,
				@MonitoringSessionToDiagnosis = MonitoringSessionToDiagnosisID,
                @DiseaseID = DiseaseID,
                @SpeciesTypeID = SpeciesTypeID,
                @SampleTypeID = SampleTypeID,
                @Order = [Order],
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @DiseaseSpeciesSampleTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VAS_MONITORING_SESSION_TO_DIAGNOSIS_SPECIES_SAMPLE_SET @MonitoringSessionToDiagnosis OUTPUT,
                                                                                    @MonitoringSessionID,
                                                                                    @DiseaseID,
                                                                                    @SpeciesTypeID,
                                                                                    @SampleTypeID,
                                                                                    @Order,
                                                                                    @RowStatus,
                                                                                    @RowAction,
                                                                                    @AuditUserName;

            DELETE FROM @DiseaseSpeciesSampleTemp
            WHERE MonitoringSessionToDiagnosisID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @FarmsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = FarmMasterID,
                @FarmMasterID = FarmMasterID,
                @FarmID = FarmID,
                @TotalAnimalQuantity = TotalAnimalQuantity,
                @Latitude = Latitude,
                @Longitude = Longitude,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @FarmsTemp;



            IF @ReportTypeID = 129909620007069 --Avian
            BEGIN
                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_VET_FARM_COPY @AuditUserName,
                                               @RowID,
                                               @TotalAnimalQuantity,
                                               NULL,
                                               NULL,
                                               NULL,
                                               NULL,
                                               NULL,
                                               @Latitude,
                                               @Longitude,
                                               @MonitoringSessionID,
                                               NULL,
                                               @FarmOwnerID,
                                               @FarmID OUTPUT,
                                               @NewFarmOwnerID OUTPUT;

                IF @NewFarmOwnerID IS NOT NULL
                BEGIN
                    SET @FarmOwnerID = @NewFarmOwnerID;
                END;

                UPDATE @FlocksOrHerdsTemp
                SET FarmID = @FarmID
                WHERE FarmMasterID = @RowID;

                UPDATE @SamplesTemp
                SET FarmID = @FarmID
                WHERE FarmMasterID = @RowID;

            END
            ELSE --Livestock
            BEGIN
                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_VET_FARM_COPY @AuditUserName,
                                               @RowID,
                                               NULL,
                                               NULL,
                                               NULL,
                                               @TotalAnimalQuantity,
                                               NULL,
                                               NULL,
                                               @Latitude,
                                               @Longitude,
                                               @MonitoringSessionID,
                                               NULL,
                                               @FarmOwnerID,
                                               @FarmID OUTPUT,
                                               @NewFarmOwnerID OUTPUT;

                IF @NewFarmOwnerID IS NOT NULL
                BEGIN
                    SET @FarmOwnerID = @NewFarmOwnerID;
                END;

                UPDATE @FlocksOrHerdsTemp
                SET FarmID = @FarmID
                WHERE FarmMasterID = @RowID;

                UPDATE @SamplesTemp
                SET FarmID = @FarmID
                WHERE FarmMasterID = @RowID;
            END

            -- disassociate farm with session 
            if ((@MonitoringSessionID IS NOT NULL) AND (@RowStatus = 1))
            BEGIN
                UPDATE dbo.tlbFarm
                set idfMonitoringSession = null
                where idfFarm = @FarmID
                      and idfMonitoringSession = @MonitoringSessionID;
            END;


            DELETE FROM @FarmsTemp
            WHERE FarmMasterID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @FlocksOrHerdsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = FlockOrHerdID,
                @FlockOrHerdID = FlockOrHerdID,
                @FarmID = FarmID,
                @FarmMasterID = FarmMasterID,
                @FlockOrHerdMasterID = FlockOrHerdMasterID,
                @EIDSSFlockOrHerdID = EIDSSFlockOrHerdID,
                @SickAnimalQuantity = SickAnimalQuantity,
                @TotalAnimalQuantity = TotalAnimalQuantity,
                @DeadAnimalQuantity = DeadAnimalQuantity,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @FlocksOrHerdsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VET_HERD_SET @AuditUserName,
                                          @FlockOrHerdID OUTPUT,
                                          @FlockOrHerdMasterID,
                                          @FarmID,
                                          @EIDSSFlockOrHerdID,
                                          @SickAnimalQuantity,
                                          @TotalAnimalQuantity,
                                          @DeadAnimalQuantity,
                                          NULL,
                                          @RowStatus,
                                          @RowAction;

            UPDATE @SpeciesTemp
            SET FlockOrHerdID = @FlockOrHerdID
            WHERE FlockOrHerdID = @RowID;

            DELETE FROM @FlocksOrHerdsTemp
            WHERE FLockOrHerdID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @SpeciesTemp)
        BEGIN
            SELECT TOP 1
                @RowID = SpeciesID,
                @SpeciesID = SpeciesID,
                @SpeciesMasterID = SpeciesMasterID,
                @SpeciesTypeID = SpeciesTypeID,
                @FlockOrHerdID = FlockOrHerdID,
                @StartOfSignsDate = StartOfSignsDate,
                @AverageAge = AverageAge,
                @SickAnimalQuantity = SickAnimalQuantity,
                @TotalAnimalQuantity = TotalAnimalQuantity,
                @DeadAnimalQuantity = DeadAnimalQuantity,
                @Comments = Comments,
                @ObservationID = ObservationID,
                @RowStatus = RowStatus,
                @RowAction = RowAction,
                @RelatedToSpeciesID = RelatedToSpeciesID,
                @RelatedToObservationID = RelatedToObservationID
            FROM @SpeciesTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VET_SPECIES_SET @AuditUserName,
                                             @SpeciesID OUTPUT,
                                             @SpeciesMasterID,
                                             @SpeciesTypeID,
                                             @FlockOrHerdID,
                                             @ObservationID,
                                             @StartOfSignsDate,
                                             @AverageAge,
                                             @SickAnimalQuantity,
                                             @TotalAnimalQuantity,
                                             @DeadAnimalQuantity,
                                             @Comments,
                                             @RowStatus,
                                             @RowAction;

            UPDATE @AnimalsTemp
            SET SpeciesID = @SpeciesID
            WHERE SpeciesID = @RowID;

            UPDATE @SamplesTemp
            SET SpeciesID = @SpeciesID
            WHERE SpeciesID = @RowID;

            DELETE FROM @SpeciesTemp
            WHERE SpeciesID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @AnimalsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = AnimalID,
                @AnimalID = AnimalID,
                @SexTypeID = SexTypeID,
                @ConditionTypeID = ConditionTypeID,
                @AgeTypeID = AgeTypeID,
                @SpeciesID = SpeciesID,
                @ObservationID = ObservationID,
                @AnimalDescription = AnimalDescription,
                @EIDSSAnimalID = EIDSSAnimalID,
                @AnimalName = AnimalName,
                @Color = Color,
                @ClinicalSignsIndicator = ClinicalSignsIndicator,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @AnimalsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VET_ANIMAL_SET @AuditUserName,
                                            @AnimalID OUTPUT,
                                            @SexTypeID,
                                            @ConditionTypeID,
                                            @AgeTypeID,
                                            @SpeciesID,
                                            @ObservationID,
                                            @AnimalDescription,
                                            @EIDSSAnimalID,
                                            @AnimalName,
                                            @Color,
                                            @ClinicalSignsIndicator,
                                            @RowStatus,
                                            @RowAction;

            UPDATE @SamplesTemp
            SET AnimalID = @AnimalID
            WHERE AnimalID = @RowID;

            DELETE FROM @AnimalsTemp
            WHERE AnimalID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @SamplesTemp)
        BEGIN
            SELECT TOP 1
                @RowID = SampleID,
                @SampleID = SampleID,
                @SampleTypeID = SampleTypeID,
                @RootSampleID = RootSampleID,
                @ParentSampleID = ParentSampleID,
                @SpeciesID = SpeciesID,
                @AnimalID = AnimalID,
                @CollectedByPersonID = CollectedByPersonID,
                @CollectedByOrganizationID = CollectedByOrganizationID,
                @CollectionDate = CollectionDate,
                @SentDate = SentDate,
                @EIDSSLocalOrFieldSampleID = EIDSSLocalOrFieldSampleID,
                @SampleStatusTypeID = SampleStatusTypeID,
                @FarmID = FarmID,
                @FarmMasterID = FarmMasterID,
                @DiseaseID = DiseaseID,
                @DateEntered = EnteredDate,
                @Comments = Comments,
                @SiteID = SiteID,
                @CurrentSiteID = CurrentSiteID,
                @RowStatus = RowStatus,
                @SentToOrganizationID = SentToOrganizationID,
                @BirdStatusTypeID = BirdStatusTypeID,
                @ReadOnlyIndicator = ReadOnlyIndicator,
                @RowAction = RowAction
            FROM @SamplesTemp;

			--Format the EIDSSLocalOrFieldSampleID according to system preferences.
			IF (
				@EIDSSLocalOrFieldSampleID IS NULL
				OR @EIDSSLocalOrFieldSampleID = ''
               )
               AND @LinkLocalOrFieldSampleIDToReportID = 1
            BEGIN
                SET @Iteration = @Iteration + 1;
                IF @Iteration < 10
                BEGIN
                    SET @EIDSSLocalOrFieldSampleID = @SessionID + '-0' + CONVERT(NVARCHAR(4), @Iteration);
                END
                ELSE
                BEGIN
                    SET @EIDSSLocalOrFieldSampleID = @SessionID + '-' + CONVERT(NVARCHAR(4), @Iteration);
                END;
            END;

			INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_GBL_SAMPLE_SET @AuditUserName,
                                            @SampleID OUTPUT,
                                            @SampleTypeID,
                                            @RootSampleID,
                                            @ParentSampleID,
                                            @FarmOwnerID,
                                            @SpeciesID,
                                            @AnimalID,
                                            NULL,
                                            @MonitoringSessionID,
                                            NULL,
                                            NULL,
                                            NULL,
                                            @CollectionDate,
                                            @CollectedByPersonID,
                                            @CollectedByOrganizationID,
                                            @SentDate,
                                            @SentToOrganizationID,
                                            @EIDSSLocalOrFieldSampleID,
                                            @SiteID,
                                            @DateEntered,
                                            @ReadOnlyIndicator,
                                            @SampleStatusTypeID,
                                            @Comments,
                                            @CurrentSiteID,
                                            @DiseaseID,
                                            @BirdStatusTypeID,
                                            @RowStatus,
                                            @RowAction;

		
       	   		 
            UPDATE @LaboratoryTestsTemp
            SET SampleID = @SampleID
            WHERE SampleID = @RowID;

			UPDATE @SamplesToDiseasesTemp
            SET SampleID = @SampleID
            WHERE SampleID = @RowID;

            DELETE FROM @SamplesTemp
            WHERE SampleID = @RowID;
        END;

		WHILE EXISTS (SELECT * FROM @SamplesToDiseasesTemp)
		BEGIN
			SELECT TOP 1
				@RowID = MonitoringSessionToMaterialID,
				@MonitoringSessionToMaterialID = MonitoringSessionToMaterialID,
				@MonitoringSessionID = @MonitoringSessionID,
				@SampleID = SampleID,
				@SampleTypeID = SampleTypeID,
				@DiseaseID = DiseaseID,
				@RowAction = RowAction,
				@RowStatus = RowStatus
			FROM @SamplesToDiseasesTemp;

			--insert or update the diseases for this sample
			INSERT INTO @SuppressSelect
			EXECUTE dbo.USSP_VAS_SAMPLE_TO_DISEASE_SET
										@AuditUserName,
                                        @MonitoringSessionToMaterialID,
										@MonitoringSessionID,
										@SampleID,
										@DiseaseID,
                                        @SampleTypeID,
                                        @RowStatus,
                                        @RowAction;

			DELETE FROM @SamplesToDiseasesTemp
			WHERE MonitoringSessionToMaterialID = @RowID;
		END;

        WHILE EXISTS (SELECT * FROM @LaboratoryTestsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = TestID,
                @TestID = TestID,
                @TestNameTypeID = TestNameTypeID,
                @TestCategoryTypeID = TestCategoryTypeID,
                @TestResultTypeID = TestResultTypeID,
                @TestStatusTypeID = TestStatusTypeID,
                @DiseaseID = DiseaseID,
                @SampleID = SampleID,
                @Comments = Comments,
                @RowStatus = RowStatus,
                @StartedDate = StartedDate,
                @ResultDate = ResultDate,
                @TestedByOrganizationID = TestedByOrganizationID,
                @TestedByPersonID = TestedByPersonID,
                @ResultEnteredByOrganizationID = ResultEnteredByOrganizationID,
                @ResultEnteredByPersonID = ResultEnteredByPersonID,
                @ValidatedByOrganizationID = ValidatedByOrganizationID,
                @ValidatedByPersonID = ValidatedByPersonID,
                @ReadOnlyIndicator = ReadOnlyIndicator,
                @NonLaboratoryTestIndicator = NonLaboratoryTestIndicator,
                @ExternalTestIndicator = ExternalTestIndicator,
                @PerformedByOrganizationID = PerformedByOrganizationID,
                @ReceivedDate = ReceivedDate,
                @ContactPersonName = ContactPersonName,
                @RowAction = RowAction
            FROM @LaboratoryTestsTemp;

            --If record is being soft-deleted, then check if the test record was originally created 
            --in the laboaratory module.  If it was, then disassociate the test record from the 
            --veterinary surveillance session, so that the test record remains in the laboratory module 
            --for further action.
            IF @RowStatus = 1
               AND @NonLaboratoryTestIndicator = 0
            BEGIN
                SET @RowStatus = 0;
                SET @TestMonitoringSesssionID = NULL;
            END
            ELSE
            BEGIN
                SET @TestMonitoringSesssionID = @MonitoringSessionID;
            END;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_GBL_TEST_SET @AuditUserName,
                                          @TestID OUTPUT,
                                          @TestNameTypeID,
                                          @TestCategoryTypeID,
                                          @TestResultTypeID,
                                          @TestStatusTypeID,
                                          @DiseaseID,
                                          @SampleID,
                                          NULL,
                                          NULL,
                                          NULL,
                                          @Comments,
                                          @RowStatus,
                                          @StartedDate,
                                          @ResultDate,
                                          @TestedByOrganizationID,
                                          @TestedByPersonID,
                                          @ResultEnteredByOrganizationID,
                                          @ResultEnteredByPersonID,
                                          @ValidatedByOrganizationID,
                                          @ValidatedByPersonID,
                                          @ReadOnlyIndicator,
                                          @NonLaboratoryTestIndicator,
                                          @ExternalTestIndicator,
                                          @PerformedByOrganizationID,
                                          @ReceivedDate,
                                          @ContactPersonName,
                                          @MonitoringSessionID,
                                          NULL,
                                          NULL,
                                          NULL,
                                          @AuditUserName,
                                          @RowAction;

            UPDATE @LaboratoryTestInterpretationsTemp
            SET TestID = @TestID
            WHERE TestID = @RowID;

            DELETE FROM @LaboratoryTestsTemp
            WHERE TestID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @LaboratoryTestInterpretationsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = TestInterpretationID,
                @TestInterpretationID = TestInterpretationID,
                @DiseaseID = DiseaseID,
                @InterpretedStatusTypeID = InterpretedStatusTypeID,
                @ValidatedByOrganizationID = ValidatedByOrganizationID,
                @ValidatedByPersonID = ValidatedByPersonID,
                @InterpretedByOrganizationID = InterpretedByOrganizationID,
                @InterpretedByPersonID = InterpretedByPersonID,
                @TestID = TestID,
                @ValidatedStatusIndicator = ValidatedStatusIndicator,
                @ReportSessionCreatedIndicator = ReportSessionCreatedIndicator,
                @ValidatedComment = ValidatedComment,
                @InterpretedComment = InterpretedComment,
                @ValidatedDate = ValidatedDate,
                @InterpretedDate = InterpretedDate,
                @RowStatus = RowStatus,
                @ReadOnlyIndicator = ReadOnlyIndicator,
                @RowAction = RowAction
            FROM @LaboratoryTestInterpretationsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_GBL_TEST_INTERPRETATION_SET @AuditUserName,
                                                         @TestInterpretationID OUTPUT,
                                                         @DiseaseID,
                                                         @InterpretedStatusTypeID,
                                                         @ValidatedByOrganizationID,
                                                         @ValidatedByPersonID,
                                                         @InterpretedByOrganizationID,
                                                         @InterpretedByPersonID,
                                                         @TestID,
                                                         @ValidatedStatusIndicator,
                                                         @ReportSessionCreatedIndicator,
                                                         @ValidatedComment,
                                                         @InterpretedComment,
                                                         @ValidatedDate,
                                                         @InterpretedDate,
                                                         @RowStatus,
                                                         @ReadOnlyIndicator,
                                                         @RowAction;

            DELETE FROM @LaboratoryTestInterpretationsTemp
            WHERE TestInterpretationID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @ActionsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = MonitoringSessionActionID,
                @MonitoringSessionActionTypeID = MonitoringSessionActionTypeID,
                @MonitoringSessionActionStatusTypeID = MonitoringSessionActionStatusTypeID,
                @EnteredByPersonID = EnteredByPersonID,
                @ActionDate = ActionDate,
                @Comments = Comments,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @ActionsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VAS_MONITORING_SESSION_ACTION_SET @MonitoringSessionActionID,
                                                               @MonitoringSessionID,
                                                               @EnteredByPersonID,
                                                               @MonitoringSessionActionTypeID,
                                                               @MonitoringSessionActionStatusTypeID,
                                                               @ActionDate,
                                                               @Comments,
                                                               @RowStatus,
                                                               @RowAction,
                                                               @AuditUserName;

            DELETE FROM @ActionsTemp
            WHERE MonitoringSessionActionID = @RowID;
        END;

        /* Aggregate Information Section */

        WHILE EXISTS (SELECT * FROM @FarmsAggregateTemp)
        BEGIN
            SELECT TOP 1
                @RowID = FarmMasterID,
                @FarmMasterID = FarmMasterID,
                @FarmID = FarmID,
                @TotalAnimalQuantity = TotalAnimalQuantity,
                @Latitude = Latitude,
                @Longitude = Longitude,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @FarmsAggregateTemp;

            IF @ReportTypeID = 129909620007069 --Avian
            BEGIN
                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_VET_FARM_COPY @AuditUserName,
                                               @RowID,
                                               @TotalAnimalQuantity,
                                               NULL,
                                               NULL,
                                               NULL,
                                               NULL,
                                               NULL,
                                               @Latitude,
                                               @Longitude,
                                               NULL,
                                               NULL,
                                               @FarmOwnerID,
                                               @FarmID OUTPUT,
                                               @NewFarmOwnerID OUTPUT;

                IF @NewFarmOwnerID IS NOT NULL
                BEGIN
                    SET @FarmOwnerID = @NewFarmOwnerID;
                END;

            END
            ELSE --Livestock
            BEGIN
                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_VET_FARM_COPY @AuditUserName,
                                               @RowID,
                                               NULL,
                                               NULL,
                                               NULL,
                                               @TotalAnimalQuantity,
                                               NULL,
                                               NULL,
                                               @Latitude,
                                               @Longitude,
                                               NULL,
                                               NULL,
                                               @FarmOwnerID,
                                               @FarmID OUTPUT,
                                               @NewFarmOwnerID OUTPUT;

                IF @NewFarmOwnerID IS NOT NULL
                BEGIN
                    SET @FarmOwnerID = @NewFarmOwnerID;
                END;

            END

            UPDATE @FlocksOrHerdsAggregateTemp
            SET FarmID = @FarmID
            WHERE FarmMasterID = @RowID;

            UPDATE @AggregateSummaryInfoTemp
            SET FarmID = @FarmID
            WHERE FarmMasterID = @RowID;

			/*farm is being removed from aggregate monitoring session*/
			IF ((@MonitoringSessionID IS NOT NULL) AND (@RowStatus = 1))
			BEGIN
				UPDATE dbo.tlbFarm 
				SET  idfMonitoringSession = null
					,intRowStatus = @RowStatus
				WHERE idfFarm = @FarmID;
			END;

            DELETE FROM @FarmsAggregateTemp
            WHERE FarmMasterID = @RowID;

        END;

        WHILE EXISTS (SELECT * FROM @FlocksOrHerdsAggregateTemp)
        BEGIN
            SELECT TOP 1
                @RowID = FlockOrHerdID,
                @FlockOrHerdID = FlockOrHerdID,
                @FarmID = FarmID,
                @FarmMasterID = FarmMasterID,
                @FlockOrHerdMasterID = FlockOrHerdMasterID,
                @EIDSSFlockOrHerdID = EIDSSFlockOrHerdID,
                @SickAnimalQuantity = SickAnimalQuantity,
                @TotalAnimalQuantity = TotalAnimalQuantity,
                @DeadAnimalQuantity = DeadAnimalQuantity,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @FlocksOrHerdsAggregateTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VET_HERD_SET @AuditUserName,
                                          @FlockOrHerdID OUTPUT,
                                          @FlockOrHerdMasterID,
                                          @FarmID,
                                          @EIDSSFlockOrHerdID,
                                          @SickAnimalQuantity,
                                          @TotalAnimalQuantity,
                                          @DeadAnimalQuantity,
                                          NULL,
                                          @RowStatus,
                                          @RowAction;

            UPDATE @SpeciesAggregateTemp
            SET FlockOrHerdID = @FlockOrHerdID
            WHERE FlockOrHerdID = @RowID;

            DELETE FROM @FlocksOrHerdsAggregateTemp
            WHERE FLockOrHerdID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @SpeciesAggregateTemp)
        BEGIN
            SELECT TOP 1
                @RowID = SpeciesID,
                @SpeciesID = SpeciesID,
                @SpeciesMasterID = SpeciesMasterID,
                @SpeciesTypeID = SpeciesTypeID,
                @FlockOrHerdID = FlockOrHerdID,
                @StartOfSignsDate = StartOfSignsDate,
                @AverageAge = AverageAge,
                @SickAnimalQuantity = SickAnimalQuantity,
                @TotalAnimalQuantity = TotalAnimalQuantity,
                @DeadAnimalQuantity = DeadAnimalQuantity,
                @Comments = Comments,
                @ObservationID = ObservationID,
                @RowStatus = RowStatus,
                @RowAction = RowAction,
                @RelatedToSpeciesID = RelatedToSpeciesID,
                @RelatedToObservationID = RelatedToObservationID
            FROM @SpeciesAggregateTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VET_SPECIES_SET @AuditUserName,
                                             @SpeciesID OUTPUT,
                                             @SpeciesMasterID,
                                             @SpeciesTypeID,
                                             @FlockOrHerdID,
                                             @ObservationID,
                                             @StartOfSignsDate,
                                             @AverageAge,
                                             @SickAnimalQuantity,
                                             @TotalAnimalQuantity,
                                             @DeadAnimalQuantity,
                                             @Comments,
                                             @RowStatus,
                                             @RowAction;

            UPDATE @AggregateSummaryInfoTemp
            SET SpeciesID = @SpeciesID
            WHERE SpeciesID = @RowID;

            DELETE FROM @SpeciesAggregateTemp
            WHERE SpeciesID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @AggregateSummaryInfoTemp)
        BEGIN
            SELECT TOP 1
                @RowID = MonitoringSessionSummaryID,
                @MonitoringSessionSummaryID = MonitoringSessionSummaryID,
                @SpeciesID = SpeciesID,
                @SampledAnimalsQuantity = SampleAnimalsQty,
                @SamplesQuantity = SamplesQty,
                @CollectionDate = CollectionDate,
                @CollectedByPersonID = CollectedByPersonID,
                @PositiveAnimalsQuantity = PositiveAnimalsQty,
                @SexTypeID = AnimalSexID,
                @FarmID = FarmID,
                @FarmMasterID = FarmMasterID,
                @DiseaseID = DiseaseID,
                @SampleTypeID = SampleTypeID,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @AggregateSummaryInfoTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VCT_MONITORING_SESSION_SUMMARY_SET @MonitoringSessionSummaryID OUTPUT,
                                                                @MonitoringSessionID,
                                                                @FarmID,
                                                                @SpeciesID,
                                                                @SexTypeID,
                                                                @SampledAnimalsQuantity,
                                                                @SamplesQuantity,
                                                                @CollectionDate,
                                                                @PositiveAnimalsQuantity,
                                                                @RowStatus,
                                                                @DiseaseID,
                                                                @SampleTypeID,
                                                                @RowAction,
                                                                @AuditUserName;

            UPDATE @AggregateSummaryDiseasesTemp
            SET MonitoringSessionSummaryID = @MonitoringSessionSummaryID
            WHERE MonitoringSessionSummaryID = @RowID

            DELETE FROM @AggregateSummaryInfoTemp
            WHERE MonitoringSessionSummaryID = @RowID;

            PRINT @RowID
        END;

        WHILE EXISTS (SELECT * FROM @AggregateSummaryDiseasesTemp)
        BEGIN
            SELECT TOP 1
                @RowID = MonitoringSessionSummaryID,
                @MonitoringSessionSummaryID = MonitoringSessionSummaryID,
                @DiseaseID = DiseaseID,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @AggregateSummaryDiseasesTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VCT_MONITORING_SESSION_SUMMARY_DIAGNOSIS_SET @MonitoringSessionSummaryID,
                                                                          @RowStatus,
                                                                          @DiseaseID,
                                                                          @RowAction,
                                                                          @AuditUserName;


            DELETE FROM @AggregateSummaryDiseasesTemp
            WHERE @MonitoringSessionSummaryID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @EventsTemp)
        BEGIN
            SELECT TOP 1
                @EventId = EventId,
                @EventTypeId = EventTypeId,
                @EventUserId = UserId,
                @EventObjectId = ObjectId,
                @EventSiteId = SiteId,
                @EventDiseaseId = DiseaseId,
                @EventLocationId = LocationId,
                @EventInformationString = InformationString,
                @EventLoginSiteId = LoginSiteId
            FROM @EventsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_ADMIN_EVENT_SET @EventId,
                                            @EventTypeId,
                                            @EventUserId,
                                            @EventObjectId,
                                            @EventDiseaseId,
                                            @EventSiteId,
                                            @EventInformationString,
                                            @EventLoginSiteId,
                                            @EventLocationId,
                                            @AuditUserName;

            DELETE FROM @EventsTemp
            WHERE EventId = @EventId;
        END;

        IF @@TRANCOUNT > 0
            COMMIT TRANSACTION;

        SELECT @ReturnCode ReturnCode,
               @ReturnMessage ReturnMessage,
               @MonitoringSessionID SessionKey,
               @SessionID SessionID;
    END TRY
    BEGIN CATCH
        IF @@Trancount > 0
            ROLLBACK TRANSACTION;

        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_VAS_MONITORING_SESSION_SUMMARY_GETList]...';


GO
-- ================================================================================================
-- Name: USP_VAS_MONITORING_SESSION_SUMMARY_GETList
--
-- Description:	Get monitoring session aggregate info list for the veterinary module monitoring 
-- session edit/enter use cases.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     05/07/2018 Initial release
-- Stephen Long     05/03/2019 Modified for API; removed maintenance flag.
-- Mike Kornegay	03/03/2022 Changed RowAction type to INT.
-- Mike Kornegay	06/28/2022 Added FarmMasterID
-- Mike Kornegay	11/02/2022 Added SpeciesTypeID
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_VAS_MONITORING_SESSION_SUMMARY_GETList] (
	@LanguageID NVARCHAR(50),
	@MonitoringSessionID BIGINT = NULL
	)
AS
BEGIN
	SET NOCOUNT ON;

	BEGIN TRY
		SELECT mss.idfMonitoringSessionSummary AS MonitoringSessionSummaryID,
			mss.idfMonitoringSession AS MonitoringSessionID,
			mss.idfFarm AS FarmID,
			f.idfFarmActual AS FarmMasterID,
			f.strFarmCode AS EIDSSFarmID,
			mss.idfSpecies AS SpeciesID,
			speciesType.idfsReference AS SpeciesTypeID,
			speciesType.name AS SpeciesTypeName,
			mss.idfsAnimalSex AS AnimalGenderTypeID,
			animalGenderType.name AS AnimalGenderTypeName,
			mss.intSampledAnimalsQty AS SampledAnimalsQuantity,
			mss.intSamplesQty AS SamplesQuantity,
			mss.datCollectionDate AS CollectionDate,
			mss.intPositiveAnimalsQty AS PositiveAnimalsQuantity,
			msss.idfsSampleType AS SampleTypeID,
			sampleType.name AS SampleTypeName,
			msss.blnChecked AS SampleCheckedIndicator,
			mssd.idfsDiagnosis AS DiseaseID,
			diseaseBaseReference.name AS DiseaseName,
			mssd.blnChecked AS DiseaseCheckedIndicator,
			mss.intRowStatus AS RowStatus,
			0 AS RowAction
		FROM dbo.tlbMonitoringSessionSummary mss
		LEFT JOIN dbo.tlbMonitoringSessionSummarySample msss
			ON msss.idfMonitoringSessionSummary = mss.idfMonitoringSessionSummary
				AND msss.intRowStatus = 0
		LEFT JOIN dbo.tlbMonitoringSessionSummaryDiagnosis mssd
			ON msss.idfMonitoringSessionSummary = mssd.idfMonitoringSessionSummary
				AND mssd.intRowStatus = 0
		LEFT JOIN dbo.tlbSpecies AS s
			ON s.idfSpecies = mss.idfSpecies
				AND s.intRowStatus = 0
		LEFT JOIN dbo.tlbFarm AS f
			ON f.idfFarm = mss.idfFarm
				AND f.intRowStatus = 0
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000086) AS speciesType
			ON speciesType.idfsReference = s.idfsSpeciesType
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000007) AS animalGenderType
			ON animalGenderType.idfsReference = mss.idfsAnimalSex
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) AS sampleType
			ON sampleType.idfsReference = msss.idfsSampleType
		LEFT JOIN dbo.trtDiagnosis AS diagnosisReference
			ON diagnosisReference.idfsDiagnosis = mssd.idfsDiagnosis
				AND diagnosisReference.intRowStatus = 0
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) AS diseaseBaseReference
			ON diseaseBaseReference.idfsReference = mssd.idfsDiagnosis
		WHERE (
				(mss.idfMonitoringSession = @MonitoringSessionID)
				OR (@MonitoringSessionID IS NULL)
				)
			AND mss.intRowStatus = 0;
	END TRY

	BEGIN CATCH
		THROW;
	END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USP_VCTS_FIELDTEST_GetList]...';


GO
--*************************************************************
-- Name 				: USP_VCTS_FIELDTEST_GetList
-- Description			: Selects list of field tests related with specific Vector
-- Author               : Harold Pryor
-- Revision History
-- Name				Date		Change Detail
-- Harold Pryor		5/5/2018	Modified to retreive data from tlbTesting table
-- Harold Pryor		5/17/2018	Updated joins to FN_GBL_Reference_List_GET to get proper Vector data
-- Harold Pryor		5/18/2018	Updated to return strFieldBarcode from tlbMaterial table
-- Harold Pryor		5/24/2018	Modified to retrieve TestedByPerson
-- Doug Albanese	1/4/2021	Added parameter to denote Field Tests
-- Doug Albanese	01/29/2021	Changed to return non lab tests
-- Mike Kornegay	05/06/2022	Changed returned column names to match common field test model
-- Mike Kornegay	05/19/2022	Added TotalRowCount for populating grids
-- Mike Kornegay	07/22/2022	Added collection date
-- Doug Albanese	 10/272022	 Added blnNonLaboratoryTest to remove any lab created tests
-- Testing code:
--USP_VCTS_FIELDTEST_GetList @idfVector,'en'
--*************************************************************
ALTER  PROCEDURE [dbo].[USP_VCTS_FIELDTEST_GetList]
(
	@idfVector	BIGINT , --##PARAM
	@LangID		AS NVARCHAR(50) --##PARAM @LangID - language ID
)
AS
BEGIN
	DECLARE @returnMsg VARCHAR(MAX) = 'Success'
	DECLARE @returnCode BIGINT = 0

	BEGIN TRY  	
			SELECT		Test.idfTesting AS TestID,
			            M.strFieldBarcode AS EIDSSLocalOrFieldSampleID,
						m.idfMaterial AS SampleID,
						m.idfsSampleType AS SampleTypeID,
						SampleType.name AS SampleTypeName,
						Test.idfsTestName AS TestNameTypeID,
						TestType.name AS TestNameTypeName,	
						Test.idfsTestCategory AS TestCategoryTypeID, 
						TestCategory.name AS TestCategoryTypeName,
						Test.idfTestedByOffice AS TestedByOrganizationID,
						Office.[Name] AS TestedByOrganizationName,
						Test.idfsTestResult AS TestResultTypeID,  
						TestResult.name AS TestResultTypeName,   
						Test.idfTestedByPerson AS TestedByPersonID, 
						ISNULL(TestedByPerson.strFamilyName, N'') + ISNULL(' ' + TestedByPerson.strFirstName, '') + ISNULL(' ' +TestedByPerson.strSecondName, '') AS TestedByPersonName,
						Test.idfsDiagnosis AS DiseaseID,
						Diagnosis.name AS DiseaseName,
						'' AS RecordAction,
						Test.datConcludedDate AS ConcludedDate,
						Test.datReceivedDate AS ReceivedDate,
						M.datFieldCollectionDate AS CollectionDate,
						Test.idfVector AS VectorID,
						Test.intRowStatus AS RowStatus,
						Test.blnNonLaboratoryTest AS NonLaboratoryTestIndicator,
						Test.blnExternalTest AS ExternalTestIndicator,
						TotalRowCount = COUNT(*) OVER(PARTITION BY 1)
		FROM			[dbo].[tlbTesting] Test
		LEFT JOIN		[dbo].[tlbMaterial] M on M.idfMaterial = Test.IdfMaterial 
		LEFT JOIN		dbo.FN_GBL_Reference_List_GET(@LangID,19000105) TestResult ON TestResult.idfsReference = Test.idfsTestResult     
		LEFT  JOIN		dbo.FN_GBL_Reference_List_GET(@LangID,19000104)  TestType ON TestType.idfsReference = Test.idfsTestName --Vector Type Test
		LEFT JOIN		dbo.FN_GBL_Reference_List_GET(@LangID,19000019) Diagnosis ON Diagnosis.idfsReference = Test.idfsDiagnosis 
		LEFT JOIN		dbo.FN_GBL_Reference_List_GET(@LangID,19000095) TestCategory ON TestCategory.idfsReference = Test.idfsTestCategory
		LEFT  JOIN		dbo.FN_GBL_Reference_List_GET(@LangID,19000087) SampleType ON m.idfsSampleType = SampleType.idfsReference
		LEFT JOIN	    FN_PERSON_SELECTLIST(@LangID) TestedByPerson ON TestedByPerson.idfEmployee = Test.idfTestedByPerson
		LEFT JOIN		dbo.FN_GBL_INSTITUTION(@LangID) Office ON Office.idfOffice = Test.idfTestedByOffice and Office.intRowStatus = 0
		LEFT JOIN		dbo.FN_GBL_Reference_List_GET(@LangID,19000045) CollectedByOffice	ON CollectedByOffice.idfsReference = Office.idfsOfficeName	

		WHERE Test.intRowStatus = 0
		--and M.idfVector = @idfVector
		and Test.idfVector = @idfVector
		--and M.idfMaterial is not null 
		--and M.intRowStatus = 0
		and Test.blnNonLaboratoryTest = 1
		
	END TRY  

	BEGIN CATCH 
	Throw;
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_VCTS_LABTEST_GetList]...';


GO
--*************************************************************
-- Name 				: USP_VCTS_LABTEST_GetList
-- Description			: Get Vector Lab Tests List
--          
-- Author               : Harold Pryor
-- Revision History
--		Name       Date			Change Detail
--  Harold Pryor  08/20/2018	Creation
--	Mike Kornegay 05/08/2022	Added TotalRowCount and EIDSSLaboratorySampleID and removed selects for return code
-- Doug Albanese  10/27/2022	 Refactored to eliminate the extra content that is not needed, and to fix the problem where the joins eliminate the records we are seeking
-- Testing code:
/*
--Example of a call of procedure:
declare	@idfVector	bigint = 51
declare @idfVectorSurveillanceSession BIGINT = null
Declare @LangID AS VARCHAR(10) = 'en'

--select @idfVector = MAX(idfVector) from dbo.tlbVector

execute	USP_VCTS_LABTEST_GetList @idfVector, @idfVectorSurveillanceSession, @LangID
*/
--*************************************************************
ALTER PROCEDURE[dbo].[USP_VCTS_LABTEST_GetList]
(		
	@idfVector BIGINT,--##PARAM @idfVector - AS vector ID
	@idfVectorSurveillanceSession BIGINT,--##PARAM @idfVectorSurveillanceSession - AS session ID
	@LangID AS nvarchar(10)--##PARAM @LangID - language ID
)
AS
BEGIN
	DECLARE @returnMsg VARCHAR(MAX) = 'Success'
	DECLARE @returnCode BIGINT = 0

	BEGIN TRY  	

	  SELECT
		 t.idfTesting,
		 m.strBarcode	  AS EIDSSLaboratorySampleID,
		 m.strFieldBarcode as strFieldSampleID,
		 sampleType.name AS strSampleTypeName,
		 SpeciesName.name AS strSpeciesName,
		 testName.name AS strTestName,
		 testResult.name AS strTestResultName,
		 t.datConcludedDate,
		 disease.name AS strDiseaseName,
		 TotalRowCount = COUNT(*) OVER(PARTITION BY 1)
	  FROM
		 tlbTesting T
	  INNER JOIN tlbMaterial M
	  ON M.idfMaterial = T.idfMaterial AND M.intRowStatus = 0
	  LEFT JOIN FN_GBL_ReferenceRepair(@LangID, 19000087) AS sampleType
	  ON sampleType.idfsReference = m.idfsSampleType
	  LEFT JOIN FN_GBL_REFERENCEREPAIR(@LangID,19000086) SpeciesName 
	  ON SpeciesName.idfsReference=m.idfSpecies
	  LEFT JOIN FN_GBL_ReferenceRepair(@LangID, 19000097) AS testName
	  ON testName.idfsReference = t.idfsTestName 
	  LEFT JOIN FN_GBL_ReferenceRepair(@LangID, 19000096) AS testResult
	  ON testResult.idfsReference = t.idfsTestResult
	  LEFT JOIN FN_GBL_ReferenceRepair(@LangID, 19000019) AS disease
	  ON disease.idfsReference = m.DiseaseID
	  --WHERE
		 --T.idfVector = @idfVector AND
		 --T.blnNonLaboratoryTest = 0 AND
		 --T.intRowStatus = 0
	  WHERE
		 M.idfVector = @idfVector
		AND ((M.idfVectorSurveillanceSession = @idfVectorSurveillanceSession) OR (@idfVectorSurveillanceSession IS NULL)) 
		AND T.intRowStatus = 0
		AND M.intRowStatus = 0
		AND (M.idfVectorSurveillanceSession IS NOT NULL AND T.blnNonLaboratoryTest = 0) 

	END TRY  

	BEGIN CATCH 
		THROW;
	END CATCH; 
		
END
GO
PRINT N'Creating Procedure [dbo].[USP_DataAudit_AuditEvents_GetList]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[USP_DataAudit_AuditEvents_GetList]
AS
SELECT 
	 t.idfTable AuditTable
	,t.strName TableName
	,RTRIM(CAST(t.idfTable AS NVARCHAR(20))) + '_' + RTRIM(CAST(c.idfColumn  AS NVARCHAR(20))) AuditColumn
	,c.strName ColumnName
	,c.strDescription Description 
FROM tauTable t
JOIN tauColumn c ON c.idfTable = T.idfTable
ORDER BY T.strName, c.strName

RETURN 0
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating Procedure [dbo].[USP_GBL_GIS_LocationAncestry_GETList]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO


-- ===========================================================================
-- Author:		Steven Verner
-- Create date: 10/27/2022
-- Description:	Returns the complete location Ancestry for the given location 
-- ===========================================================================

CREATE PROCEDURE [dbo].[USP_GBL_GIS_LocationAncestry_GETList]
	 @languageId nvarchar(10)
	,@locationId bigint
AS
	SELECT 
		 idfsLocation
		,AdminLevel1ID
		,AdminLevel2ID
		,AdminLevel3ID
		,AdminLevel4ID
		,AdminLevel5ID
		,AdminLevel6ID
		,AdminLevel7ID
		,AdminLevel1Name
		,AdminLevel2Name
		,AdminLevel3Name
		,AdminLevel4Name
		,AdminLevel5Name
		,AdminLevel6Name
		,AdminLevel7Name
		,Level
		,LevelType

	FROM FN_GBL_LocationHierarchy_Flattened(@languageId) f
	WHERE idfsLocation = @locationId 
RETURN 0
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_DEDUPLICATION_HUMAN_DISEASE_Report_SET]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_DEDUPLICATION_HUMAN_DISEASE_Report_SET
--
-- Description:	Deduplication for Livestock and Avian disease report record.
-- 
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Mark Wilson		25May2022	Initial release
-- Mark Wilson		10Jun2022	update to 
-- Stephen Long     07/06/2022 Updates for site alerts to call new stored procedure.
-- Ann Xiong		11/01/2022	Updated to call USP_HUM_HUMAN_DISEASE_DEL with updated parameters
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_DEDUPLICATION_HUMAN_DISEASE_Report_SET]
(
    @SupersededDiseaseReportID BIGINT,
    @LanguageID NVARCHAR(50),
    @SurvivorDiseaseReportID BIGINT,
    @idfHumanCaseRelatedTo BIGINT = NULL,
    @idfHuman BIGINT = NULL,                              -- tlbHumanCase.idfHuman
    @idfHumanActual BIGINT,                               -- tlbHumanActual.idfHumanActual
    @strHumanCaseId NVARCHAR(200) = '(new)',
    @idfsFinalDiagnosis BIGINT,                           -- tlbhumancase.idfsTentativeDiagnosis/idfsFinalDiagnosis
    @datDateOfDiagnosis DATETIME = NULL,                  --tlbHumanCase.datTentativeDiagnosisDate/datFinalDiagnosisDate
    @datNotificationDate DATETIME = NULL,                 --tlbHumanCase.DatNotIFicationDate
    @idfsFinalState BIGINT = NULL,                        --tlbHumanCase.idfsFinalState
    @strLocalIdentifier NVARCHAR(200) = NULL,
    @idfSentByOffice BIGINT = NULL,                       -- tlbHumanCase.idfSentByOffice
    @strSentByFirstName NVARCHAR(200) = NULL,             --tlbHumanCase.strSentByFirstName
    @strSentByPatronymicName NVARCHAR(200) = NULL,        --tlbHumancase.strSentByPatronymicName
    @strSentByLastName NVARCHAR(200) = NULL,              --tlbHumanCase.strSentByLastName
    @idfSentByPerson BIGINT = NULL,                       --tlbHumcanCase.idfSentByPerson
    @idfReceivedByOffice BIGINT = NULL,                   -- tlbHumanCase.idfReceivedByOffice
    @strReceivedByFirstName NVARCHAR(200) = NULL,         --tlbHumanCase.strReceivedByFirstName
    @strReceivedByPatronymicName NVARCHAR(200) = NULL,    --tlbHumanCase.strReceivedByPatronymicName
    @strReceivedByLastName NVARCHAR(200) = NULL,          --tlbHuanCase.strReceivedByLastName
    @idfReceivedByPerson BIGINT = NULL,                   -- tlbHumanCase.idfReceivedByPerson
    @idfsHospitalizationStatus BIGINT = NULL,             -- tlbHumanCase.idfsHospitalizationStatus
    @idfHospital BIGINT = NULL,                           -- tlbHumanCase.idfHospital
    @strCurrentLocation NVARCHAR(200) = NULL,             -- tlbHumanCase.strCurrentLocation
    @datOnSetDate DATETIME = NULL,                        -- tlbHumanCase.datOnSetDate
    @idfsInitialCaseStatus BIGINT = NULL,                 -- tlbHumanCase.idfsInitialCaseStatus
    @idfsYNPreviouslySoughtCare BIGINT = NULL,            --idfsYNPreviouslySoughtCare
    @datFirstSoughtCareDate DATETIME = NULL,              --tlbHumanCase.datFirstSoughtCareDate
    @idfSoughtCareFacility BIGINT = NULL,                 --tlbHumanCase.idfSoughtCareFacility
    @idfsNonNotIFiableDiagnosis BIGINT = NULL,            --tlbHumanCase.idfsNonNotIFiableDiagnosis
    @idfsYNHospitalization BIGINT = NULL,                 -- tlbHumanCase.idfsYNHospitalization
    @datHospitalizationDate DATETIME = NULL,              --tlbHumanCase.datHospitalizationDate 
    @datDischargeDate DATETIME = NULL,                    -- tlbHumanCase.datDischargeDate
    @strHospitalName NVARCHAR(200) = NULL,                --tlbHumanCase.strHospitalizationPlace  
    @idfsYNAntimicrobialTherapy BIGINT = NULL,            --  tlbHumanCase.idfsYNAntimicrobialTherapy 
    @strAntibioticName NVARCHAR(200) = NULL,              -- tlbHumanCase.strAntimicrobialTherapyName
    @strDosage NVARCHAR(200) = NULL,                      --tlbHumanCase.strDosage
    @datFirstAdministeredDate DATETIME = NULL,            -- tlbHumanCase.datFirstAdministeredDate
    @strAntibioticComments NVARCHAR(MAX) = NULL,          -- tlbHumanCase.strClinicalNotes , or strSummaryNotes
    @idfsYNSpecificVaccinationAdministered BIGINT = NULL, --  tlbHumanCase.idfsYNSpecIFicVaccinationAdministered
    @idfInvestigatedByOffice BIGINT = NULL,               -- tlbHumanCase.idfInvestigatedByOffice 
    @StartDateofInvestigation DATETIME = NULL,            -- tlbHumanCase.datInvestigationStartDate
    @idfsYNRelatedToOutbreak BIGINT = NULL,               -- tlbHumanCase.idfsYNRelatedToOutbreak
    @idfOutbreak BIGINT = NULL,                           --idfOutbreak  
    @idfsYNExposureLocationKnown BIGINT = NULL,           --tlbHumanCase.idfsYNExposureLocationKnown
    @idfPointGeoLocation BIGINT = NULL,                   --tlbHumanCase.idfPointGeoLocation
    @datExposureDate DATETIME = NULL,                     -- tlbHumanCase.datExposureDate 
    @idfsGeoLocationType BIGINT = NULL,                   --tlbGeolocation.idfsGeoLocationType
    @strLocationDescription NVARCHAR(MAX) = NULL,         --tlbGeolocation.Description
    @idfsLocationCountry BIGINT = NULL,                   --tlbGeolocation.idfsCountry 
    @idfsLocationRegion BIGINT = NULL,                    --tlbGeolocation.idfsRegion
    @idfsLocationRayon BIGINT = NULL,                     --tlbGeolocation.idfsRayon
    @idfsLocationSettlement BIGINT = NULL,                --tlbGeolocation.idfsSettlement
    @intLocationLatitude FLOAT = NULL,                    --tlbGeolocation.Latittude
    @intLocationLongitude FLOAT = NULL,                   --tlbGeolocation.Longitude
    @intElevation BIGINT = NULL,                          --GISSettlement.intElevation
    @idfsLocationGroundType BIGINT = NULL,                --tlbGeolocation.GroundType
    @intLocationDistance FLOAT = NULL,                    --tlbGeolocation.Distance
    @intLocationDirection FLOAT = NULL,                   --tlbGeolocation.Alignment	
    @strForeignAddress NVARCHAR(MAX) = NULL,              --tlbGeolocation.strForeignAddress 
    @strNote NVARCHAR(MAX) = NULL,                        --tlbhumancase.strNote
    @idfsFinalCaseStatus BIGINT = NULL,                   --tlbHuanCase.idfsFinalCaseStatus 
    @idfsOutcome BIGINT = NULL,                           -- --tlbHumanCase.idfsOutcome 
    @datDateofDeath DATETIME = NULL,                      -- tlbHumanCase.datDateOfDeath 
    @idfsCaseProgressStatus BIGINT = 10109001,            --	tlbHumanCase.reportStatus, default = In-process
    @idfPersonEnteredBy BIGINT = NULL,
    @strClinicalNotes NVARCHAR(2000) = NULL,
    @idfsYNSpecimenCollected BIGINT = NULL,
    @idfsYNTestsConducted BIGINT = NULL,
    @DiseaseReportTypeID BIGINT = NULL,
    @blnClinicalDiagBasis BIT = NULL,
    @blnLabDiagBasis BIT = NULL,
    @blnEpiDiagBasis BIT = NULL,
    @DateofClassification DATETIME = NULL,
    @strSummaryNotes NVARCHAR(MAX) = NULL,
    @idfEpiObservation BIGINT = NULL,
    @idfCSObservation BIGINT = NULL,
    @idfInvestigatedByPerson BIGINT = NULL,
    @strEpidemiologistsName NVARCHAR(MAX) = NULL,
    @idfsNotCollectedReason BIGINT = NULL,
    @strNotCollectedReason NVARCHAR(200) = NULL,
    @SamplesParameters NVARCHAR(MAX) = NULL,
    @TestsParameters NVARCHAR(MAX) = NULL,
    @TestsInterpretationParameters NVARCHAR(MAX) = NULL,
    @AntiviralTherapiesParameters NVARCHAR(MAX) = NULL,
    @VaccinationsParameters NVARCHAR(MAX) = NULL,
    @ContactsParameters NVARCHAR(MAX) = NULL,
    @Events NVARCHAR(MAX) = NULL,
    @idfsHumanAgeType BIGINT = NULL,
    @intPatientAge INT = NULL,
    @datCompletionPaperFormDate DATETIME = NULL,
    @RowStatus INT,
    @idfsSite BIGINT = NULL,
    @AuditUser NVARCHAR(100) = '',
    @idfParentMonitoringSession BIGINT = NULL
)
AS
DECLARE @returnCode INT = 0
DECLARE @returnMsg NVARCHAR(MAX) = 'SUCCESS'
DECLARE @RowID BIGINT = NULL,
        @RowAction NCHAR = NULL,
        @OrderNumber INT,
        @SampleID BIGINT,
        @SampleTypeID BIGINT = NULL,
        @HumanID BIGINT,
        @HumanMasterID BIGINT = NULL,
        @CollectedByPersonID BIGINT = NULL,
        @CollectedByOrganizationID BIGINT = NULL,
        @CollectionDate DATETIME = NULL,
        @SentDate DATETIME = NULL,
        @EIDSSLocalOrFieldSampleID NVARCHAR(200) = NULL,
        @SampleStatusTypeID BIGINT = NULL,
        @EIDSSLaboratorySampleID NVARCHAR(200) = NULL,
        @SentToOrganizationID BIGINT = NULL,
        @ReadOnlyIndicator BIT = NULL,
        @AccessionDate DATETIME = NULL,
        @AccessionConditionTypeID BIGINT = NULL,
        @AccessionComment NVARCHAR(200) = NULL,
        @AccessionByPersonID BIGINT = NULL,
        @CurrentSiteID BIGINT = NULL,
        @TestID BIGINT,
        @TestNameTypeID BIGINT = NULL,
        @TestCategoryTypeID BIGINT = NULL,
        @TestResultTypeID BIGINT = NULL,
        @TestStatusTypeID BIGINT,
        @BatchTestID BIGINT = NULL,
        @TestNumber INT = NULL,
        @StartedDate DATETIME2 = NULL,
        @ResultDate DATETIME2 = NULL,
        @TestedByPersonID BIGINT = NULL,
        @TestedByOrganizationID BIGINT = NULL,
        @ResultEnteredByOrganizationID BIGINT = NULL,
        @ResultEnteredByPersonID BIGINT = NULL,
        @ValidatedByOrganizationID BIGINT = NULL,
        @ValidatedByPersonID BIGINT = NULL,
        @NonLaboratoryTestIndicator BIT,
        @ExternalTestIndicator BIT = NULL,
        @PerformedByOrganizationID BIGINT = NULL,
        @ReceivedDate DATETIME2 = NULL,
        @ContactPersonName NVARCHAR(200) = NULL,
        @TestHumanCaseID BIGINT = NULL,
        @TestInterpretationID BIGINT,
        @InterpretedStatusTypeID BIGINT = NULL,
        @InterpretedByOrganizationID BIGINT = NULL,
        @InterpretedByPersonID BIGINT = NULL,
        @TestingInterpretations BIGINT,
        @ValidatedStatusIndicator BIT = NULL,
        @ReportSessionCreatedIndicator BIT = NULL,
        @ValidatedComment NVARCHAR(200) = NULL,
        @InterpretedComment NVARCHAR(200) = NULL,
        @ValidatedDate DATETIME = NULL,
        @InterpretedDate DATETIME = NULL,
        @EventId BIGINT,
        @EventTypeId BIGINT = NULL,
        @EventSiteId BIGINT = NULL,
        @EventObjectId BIGINT = NULL,
        @EventUserId BIGINT = NULL,
        @EventDiseaseId BIGINT = NULL,
        @EventLocationId BIGINT = NULL,
        @EventInformationString NVARCHAR(MAX) = NULL,
        @EventLoginSiteId BIGINT = NULL,
        @MonitoringSessionActionID BIGINT,
        @ActionTypeID BIGINT,
        @ActionStatusTypeID BIGINT,
        @ActionDate DATETIME = NULL,
        @Comments NVARCHAR(500) = NULL,
        @DiseaseID BIGINT,
        @idfMonitoringSessionToDiagnosis BIGINT,
        @DateEntered DATETIME = GETDATE(),
        @DeleteID BIGINT = @SupersededDiseaseReportID,
        @SaveID BIGINT = @SurvivorDiseaseReportID


SET @AuditUser = ISNULL(@AuditUser, '')

DECLARE @SamplesTemp TABLE
(
    SampleID BIGINT NOT NULL,
    SampleTypeID BIGINT NULL,
    SampleStatusTypeID BIGINT NULL,
    CollectionDate DATETIME2 NULL,
    CollectedByOrganizationID BIGINT NULL,
    CollectedByPersonID BIGINT NULL,
    SentDate DATETIME2 NULL,
    SentToOrganizationID BIGINT NULL,
    EIDSSLocalOrFieldSampleID NVARCHAR(200) NULL,
    Comments NVARCHAR(200) NULL,
    SiteID BIGINT NOT NULL,
    CurrentSiteID BIGINT NULL,
    DiseaseID BIGINT NULL,
    ReadOnlyIndicator BIT NULL,
    HumanID BIGINT NULL,
    HumanMasterID BIGINT NULL,
    RowStatus INT NOT NULL,
    RowAction CHAR(1) NULL
);

DECLARE @SamplesTemp2 TABLE (SampleID BIGINT NOT NULL);

DECLARE @TestsTemp TABLE
(
    TestID BIGINT NOT NULL,
    TestNameTypeID BIGINT NULL,
    TestCategoryTypeID BIGINT NULL,
    TestResultTypeID BIGINT NULL,
    TestStatusTypeID BIGINT NOT NULL,
    DiseaseID BIGINT NULL,
    SampleID BIGINT NULL,
    BatchTestID BIGINT NULL,
    ObservationID BIGINT NULL,
    TestNumber INT NULL,
    Comments NVARCHAR NULL,
    StartedDate DATETIME2 NULL,
    ResultDate DATETIME2 NULL,
    TestedByOrganizationID BIGINT NULL,
    TestedByPersonID BIGINT NULL,
    ResultEnteredByOrganizationID BIGINT NULL,
    ResultEnteredByPersonID BIGINT NULL,
    ValidatedByOrganizationID BIGINT NULL,
    ValidatedByPersonID BIGINT NULL,
    ReadOnlyIndicator BIT NOT NULL,
    NonLaboratoryTestIndicator BIT NOT NULL,
    ExternalTestIndicator BIT NULL,
    PerformedByOrganizationID BIGINT NULL,
    ReceivedDate DATETIME2 NULL,
    ContactPersonName NVARCHAR(200) NULL,
    RowStatus INT NOT NULL,
    RowAction CHAR(1) NULL
);

DECLARE @TestsInterpretationParametersTemp TABLE
(
    TestInterpretationID BIGINT NOT NULL,
    DiseaseID BIGINT NULL,
    InterpretedStatusTypeID BIGINT NULL,
    ValidatedByOrganizationID BIGINT NULL,
    ValidatedByPersonID BIGINT NULL,
    InterpretedByOrganizationID BIGINT NULL,
    InterpretedByPersonID BIGINT NULL,
    TestID BIGINT NOT NULL,
    ValidatedStatusIndicator BIT NULL,
    ReportSessionCreatedIndicator BIT NULL,
    ValidatedComment NVARCHAR(200) NULL,
    InterpretedComment NVARCHAR(200) NULL,
    ValidatedDate DATETIME NULL,
    InterpretedDate DATETIME NULL,
    ReadOnlyIndicator BIT NOT NULL,
    RowStatus INT NOT NULL,
    RowAction INT NULL
);
DECLARE @EventsTemp TABLE
(
    EventId BIGINT NOT NULL,
    EventTypeId BIGINT NULL,
    UserId BIGINT NULL,
    SiteId BIGINT NULL,
    LoginSiteId BIGINT NULL,
    ObjectId BIGINT NULL,
    DiseaseId BIGINT NULL,
    LocationId BIGINT NULL,
    InformationString NVARCHAR(MAX) NULL
);

DECLARE @AntiViralTemp TABLE (idfAntimicrobialTherapy BIGINT);

INSERT INTO @AntiViralTemp
(
    idfAntimicrobialTherapy
)
SELECT idfAntimicrobialTherapy
FROM
    OPENJSON(@AntiviralTherapiesParameters)
    WITH
    (
        idfAntimicrobialTherapy BIGINT
    );

DECLARE @ContactsTemp TABLE (ContactedCasePersonId BIGINT NOT NULL);

INSERT INTO @ContactsTemp
(
    ContactedCasePersonId
)
SELECT ContactedCasePersonId
FROM
    OPENJSON(@ContactsParameters)
    WITH
    (
        ContactedCasePersonId BIGINT
    );


DECLARE @EventsTemp2 TABLE (EventId BIGINT NOT NULL);

DECLARE @SuppressSelect TABLE
(
    ReturnCode INT,
    ReturnMessage VARCHAR(200)
);

BEGIN
    BEGIN TRY
        SET @SamplesParameters = REPLACE(@SamplesParameters, '"0001-01-01T00:00:00"', 'null')

        INSERT INTO @SamplesTemp
        SELECT *
        FROM
            OPENJSON(@SamplesParameters)
            WITH
            (
                SampleID BIGINT,
                SampleTypeID BIGINT,
                SampleStatusTypeID BIGINT,
                CollectionDate DATETIME2,
                CollectedByOrganizationID BIGINT,
                CollectedByPersonID BIGINT,
                SentDate DATETIME2,
                SentToOrganizationID BIGINT,
                EIDSSLocalOrFieldSampleID NVARCHAR(200),
                Comments NVARCHAR(200),
                SiteID BIGINT,
                CurrentSiteID BIGINT,
                DiseaseID BIGINT,
                ReadOnlyIndicator BIT,
                HumanID BIGINT,
                HumanMasterID BIGINT,
                RowStatus INT,
                RowAction CHAR(1)
            );

        INSERT INTO @SamplesTemp2
        SELECT SampleID
        FROM
            OPENJSON(@SamplesParameters)
            WITH
            (
                SampleID BIGINT,
                SampleTypeID BIGINT,
                SampleStatusTypeID BIGINT,
                CollectionDate DATETIME2,
                CollectedByOrganizationID BIGINT,
                CollectedByPersonID BIGINT,
                SentDate DATETIME2,
                SentToOrganizationID BIGINT,
                EIDSSLocalOrFieldSampleID NVARCHAR(200),
                Comments NVARCHAR(200),
                SiteID BIGINT,
                CurrentSiteID BIGINT,
                DiseaseID BIGINT,
                ReadOnlyIndicator BIT,
                HumanID BIGINT,
                HumanMasterID BIGINT,
                RowStatus INT,
                RowAction CHAR(1)
            );


        SET @TestsParameters = REPLACE(@TestsParameters, '"0001-01-01T00:00:00"', 'null')

        INSERT INTO @TestsTemp
        SELECT *
        FROM
            OPENJSON(@TestsParameters)
            WITH
            (
                TestID BIGINT,
                TestNameTypeID BIGINT,
                TestCategoryTypeID BIGINT,
                TestResultTypeID BIGINT,
                TestStatusTypeID BIGINT,
                DiseaseID BIGINT,
                SampleID BIGINT,
                BatchTestID BIGINT,
                ObservationID BIGINT,
                TestNumber INT,
                Comments NVARCHAR(500),
                StartedDate DATETIME2,
                ResultDate DATETIME2,
                TestedByOrganizationID BIGINT,
                TestedByPersonID BIGINT,
                ResultEnteredByOrganizationID BIGINT,
                ResultEnteredByPersonID BIGINT,
                ValidatedByOrganizationID BIGINT,
                ValidatedByPersonID BIGINT,
                ReadOnlyIndicator BIT,
                NonLaboratoryTestIndicator BIT,
                ExternalTestIndicator BIT,
                PerformedByOrganizationID BIGINT,
                ReceivedDate DATETIME2,
                ContactPersonName NVARCHAR(200),
                RowStatus INT,
                RowAction CHAR(1)
            );



        INSERT INTO @TestsInterpretationParametersTemp
        SELECT *
        FROM
            OPENJSON(@TestsInterpretationParameters)
            WITH
            (
                TestInterpretationID BIGINT,
                DiseaseID BIGINT,
                InterpretedStatusTypeID BIGINT,
                ValidatedByOrganizationID BIGINT,
                ValidatedByPersonID BIGINT,
                InterpretedByOrganizationID BIGINT,
                InterpretedByPersonID BIGINT,
                TestID BIGINT,
                ValidatedStatusIndicator BIT,
                ReportSessionCreatedIndicator BIT,
                ValidatedComment NVARCHAR(200),
                InterpretedComment NVARCHAR(200),
                ValidatedDate DATETIME2,
                InterpretedDate DATETIME2,
                ReadOnlyIndicator BIT,
                RowStatus INT,
                RowAction INT
            );

        INSERT INTO @EventsTemp
        SELECT *
        FROM
            OPENJSON(@Events)
            WITH
            (
                EventId BIGINT,
                EventTypeId BIGINT,
                UserId BIGINT,
                SiteId BIGINT,
                LoginSiteId BIGINT,
                ObjectId BIGINT,
                DiseaseId BIGINT,
                LocationId BIGINT,
                InformationString NVARCHAR(MAX)
            );

        INSERT INTO @EventsTemp2
        SELECT EventId
        FROM
            OPENJSON(@Events)
            WITH
            (
                EventId BIGINT,
                EventTypeId BIGINT,
                UserId BIGINT,
                SiteId BIGINT,
                LoginSiteId BIGINT,
                ObjectId BIGINT,
                DiseaseId BIGINT,
                LocationId BIGINT,
                InformationString NVARCHAR(MAX)
            );

        DECLARE @VaccinationsTemp TABLE (humanDiseaseReportVaccinationUID BIGINT NOT NULL);

        INSERT INTO @VaccinationsTemp
        SELECT *
        FROM
            OPENJSON(@VaccinationsParameters)
            WITH
            (
                humanDiseaseReportVaccinationUID BIGINT
            )


        BEGIN TRANSACTION

        DECLARE @SupressSELECT TABLE
        (
            retrunCode INT,
            returnMessage VARCHAR(200)
        )
        DECLARE @SupressSELECTHumanCase TABLE
        (
            retrunCode INT,
            returnMessage VARCHAR(200) --,
        -- idfHumanCase BIGINT
        )
        DECLARE @SupressSELECTHuman TABLE
        (
            retrunCode INT,
            returnMessage VARCHAR(200),
            idfHuman BIGINT
        )

        DECLARE @SupressSELECTGeoLocation TABLE
        (
            returnCode INT,
            returnMsg VARCHAR(200),
            idfGeoLocation BIGINT
        )


        SET @DiseaseID = @idfsFinalDiagnosis

        DECLARE @HumanDiseasereportRelnUID BIGINT

        DECLARE @COPYHUMANACTUALTOHUMAN_ReturnCode INT = 0

        -- Create a human record FROM Human Actual if not already present
        IF @idfHumanActual IS NOT NULL -- AND @idfHumanCase IS  NULL
        BEGIN
            INSERT INTO @SupressSELECTHumanCase
            EXEC dbo.USP_HUM_COPYHUMANACTUALTOHUMAN @idfHumanActual,
                                                    @idfHuman OUTPUT,
                                                    @returnCode OUTPUT,
                                                    @returnMsg OUTPUT
            IF @returnCode <> 0
            BEGIN
                RETURN
            END
        END

        --TODO: Needs to be refactored to use Hierarchy
        -- Insert or update geolocation record if any of the information is provided
        IF @idfsLocationGroundType IS NOT NULL
           OR @idfsGeoLocationType IS NOT NULL
           OR @idfsLocationCountry IS NOT NULL
           OR @idfsLocationRegion IS NOT NULL
           OR @idfsLocationRayon IS NOT NULL
           OR @idfsLocationSettlement IS NOT NULL
           OR @strLocationDescription IS NOT NULL
           OR @intLocationLatitude IS NOT NULL
           OR @intLocationLongitude IS NOT NULL
           OR @intLocationDistance IS NOT NULL
           OR @intLocationDirection IS NOT NULL
           OR @strForeignAddress IS NOT NULL
           OR @intElevation IS NOT NULL
        BEGIN
            -- Set geo location 
            IF @idfPointGeoLocation IS NULL
            BEGIN
                INSERT INTO @SupressSELECT
                EXEC dbo.USP_GBL_NEXTKEYID_GET @tableName = 'tlbGeoLocation',
                                               @idfsKey = @idfPointGeoLocation OUTPUT
            END

            BEGIN
                INSERT INTO @SupressSELECTGeoLocation
                EXECUTE [dbo].[USP_HUMAN_DISEASE_GEOLOCATION_SET] @idfPointGeoLocation,
                                                                  @idfsLocationGroundType,
                                                                  @idfsGeoLocationType,
                                                                  @idfsLocationCountry,
                                                                  @idfsLocationRegion,
                                                                  @idfsLocationRayon,
                                                                  @idfsLocationSettlement,
                                                                  @strLocationDescription,
                                                                  @intLocationLatitude,
                                                                  @intLocationLongitude,
                                                                  NULL,
                                                                  @intLocationDistance,
                                                                  @intLocationDirection,
                                                                  @strForeignAddress,
                                                                  1,
                                                                  @intElevation,
                                                                  @AuditUser
            END
        END

        BEGIN
            UPDATE dbo.tlbHumanCase
            SET strCaseId = @strHumanCaseId,
                idfsTentativeDiagnosis = @idfsFinalDiagnosis,
                idfsFinalDiagnosis = @idfsFinalDiagnosis,
                datTentativeDiagnosisDate = @datDateOfDiagnosis,
                datFinalDiagnosisDate = @datDateOfDiagnosis,
                datNotIFicationDate = @datNotificationDate,
                idfsFinalState = @idfsFinalState,
                idfSentByOffice = @idfSentByOffice,
                strSentByFirstName = @strSentByFirstName,
                strSentByPatronymicName = @strSentByPatronymicName,
                strSentByLastName = @strSentByLastName,
                idfSentByPerson = @idfSentByPerson,
                idfReceivedByOffice = @idfReceivedByOffice,
                strReceivedByFirstName = @strReceivedByFirstName,
                strReceivedByPatronymicName = @strReceivedByPatronymicName,
                strReceivedByLastName = @strReceivedByLastName,
                idfReceivedByPerson = @idfReceivedByPerson,
                strLocalIdentifier = @strLocalIdentifier,
                idfsHospitalizationStatus = @idfsHospitalizationStatus,
                idfHospital = @idfHospital,
                strCurrentLocation = @strCurrentLocation,
                datOnSetDate = @datOnSetDate,
                idfsInitialCaseStatus = @idfsInitialCaseStatus,
                idfsYNPreviouslySoughtCare = @idfsYNPreviouslySoughtCare,
                datFirstSoughtCareDate = @datFirstSoughtCareDate,
                idfSoughtCareFacility = @idfSoughtCareFacility,
                idfsNonNotIFiableDiagnosis = @idfsNonNotIFiableDiagnosis,
                idfsYNHospitalization = @idfsYNHospitalization,
                datHospitalizationDate = @datHospitalizationDate,
                datDischargeDate = @datDischargeDate,
                strHospitalizationPlace = @strHospitalName,
                idfsYNAntimicrobialTherapy = @idfsYNAntimicrobialTherapy,
                strClinicalNotes = @strClinicalNotes,
                idfsYNSpecificVaccinationAdministered = @idfsYNSpecificVaccinationAdministered,
                idfInvestigatedByOffice = @idfInvestigatedByOffice,
                datInvestigationStartDate = @StartDateofInvestigation,
                idfsYNRelatedToOutbreak = @idfsYNRelatedToOutbreak,
                idfOutbreak = @idfOutbreak,
                idfsYNExposureLocationKnown = @idfsYNExposureLocationKnown,
                idfPointGeoLocation = @idfPointGeoLocation,
                datExposureDate = @datExposureDate,
                strNote = @strNote,
                idfsFinalCaseStatus = @idfsFinalCaseStatus,
                idfsOutcome = @idfsOutcome,
                idfsCaseProgressStatus = @idfsCaseProgressStatus,
                datModificationDate = GETDATE(),
                idfsYNSpecimenCollected = @idfsYNSpecimenCollected,
                idfsYNTestsConducted = @idfsYNTestsConducted,
                DiseaseReportTypeID = @DiseaseReportTypeID,
                blnClinicalDiagBasis = @blnClinicalDiagBasis,
                blnLabDiagBasis = @blnLabDiagBasis,
                blnEpiDiagBasis = @blnEpiDiagBasis,
                datFinalCaseClassificationDate = @DateofClassification,
                strsummarynotes = @strSummaryNotes,
                idfEpiObservation = @idfEpiObservation,
                idfCSObservation = @idfCSObservation,
                strEpidemiologistsName = @strEpidemiologistsName,
                idfsNotCollectedReason = @idfsNotCollectedReason,
                strNotCollectedReason = @strNotCollectedReason,
                idfsHumanAgeType = @idfsHumanAgeType,
                intPatientAge = @intPatientAge,
                datCompletionPaperFormDate = @datCompletionPaperFormDate,
                idfInvestigatedByPerson = @idfInvestigatedByPerson,
                idfPersonEnteredBy = @idfPersonEnteredBy,
                idfsSite = @idfsSite,
                AuditUpdateUser = @AuditUser,
                AuditUpdateDTM = GETDATE(),
                idfParentMonitoringSession = @idfParentMonitoringSession
            WHERE idfHumanCase = @SaveID
                  AND intRowStatus = 0

        END

        ----set Samples for this idfHumanCase	
        IF @SamplesParameters IS NOT NULL
        BEGIN

            WHILE EXISTS (SELECT * FROM @SamplesTemp)
            BEGIN
                SELECT TOP 1
                    @RowID = SampleID,
                    @SampleID = SampleID,
                    @SampleTypeID = SampleTypeID,
                    @CollectedByPersonID = CollectedByPersonID,
                    @CollectedByOrganizationID = CollectedByOrganizationID,
                    @CollectionDate = CAST(CollectionDate AS DATETIME),
                    @SentDate = CAST(SentDate AS DATETIME),
                    @EIDSSLocalOrFieldSampleID = EIDSSLocalOrFieldSampleID,
                    @SampleStatusTypeID = SampleStatusTypeID,
                    @Comments = Comments,
                    @idfsSite = SiteID,
                    @CurrentSiteID = CurrentSiteID,
                    @RowStatus = RowStatus,
                    @SentToOrganizationID = SentToOrganizationID,
                    @DiseaseID = DiseaseID,
                    @ReadOnlyIndicator = ReadOnlyIndicator,
                    @HumanID = HumanID,
                    @HumanMasterID = HumanMasterID,
                    @RowAction = RowAction
                FROM @SamplesTemp;

                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_GBL_SAMPLE_SET @AuditUserName = @AuditUser,
                                                @SampleID = @SampleID OUTPUT,
                                                @SampleTypeID = @SampleTypeID,
                                                @RootSampleID = NULL,
                                                @ParentSampleID = NULL,
                                                @HumanID = @idfHuman,
                                                @SpeciesID = NULL,
                                                @AnimalID = NULL,
                                                @VectorID = NULL,
                                                @MonitoringSessionID = NULL,
                                                @VectorSessionID = NULL,
                                                @HumanDiseaseReportID = @SaveID,
                                                @VeterinaryDiseaseReportID = NULL,
                                                @CollectionDate = @CollectionDate,
                                                @CollectedByPersonID = @CollectedByPersonID,
                                                @CollectedByOrganizationID = @CollectedByOrganizationID,
                                                @SentDate = @SentDate,
                                                @SentToOrganizationID = @SentToOrganizationID,
                                                @EIDSSLocalFieldSampleID = @EIDSSLocalOrFieldSampleID,
                                                @SiteID = @idfsSite,
                                                @EnteredDate = @DateEntered,
                                                @ReadOnlyIndicator = @ReadOnlyIndicator,
                                                @SampleStatusTypeID = @SampleStatusTypeID,
                                                @Comments = @Comments,
                                                @CurrentSiteID = @CurrentSiteID,
                                                @DiseaseID = @DiseaseID,
                                                @BirdStatusTypeID = NULL,
                                                @RowStatus = @RowStatus,
                                                @RowAction = @RowAction

                UPDATE @TestsTemp
                SET SampleID = @SampleID
                WHERE SampleID = @RowID

                DELETE FROM @SamplesTemp
                WHERE SampleID = @RowID
            END
        END
        IF @TestsParameters IS NOT NULL
        BEGIN
            WHILE EXISTS (SELECT * FROM @TestsTemp)
            BEGIN
                SELECT TOP 1
                    @RowID = TestID,
                    @TestID = TestID,
                    @TestNameTypeID = TestNameTypeID,
                    @TestCategoryTypeID = TestCategoryTypeID,
                    @TestResultTypeID = TestResultTypeID,
                    @TestStatusTypeID = TestStatusTypeID,
                    @DiseaseID = DiseaseID,
                    @SampleID = SampleID,
                    @Comments = Comments,
                    @RowStatus = RowStatus,
                    @StartedDate = StartedDate,
                    @ResultDate = ResultDate,
                    @TestedByOrganizationID = TestedByOrganizationID,
                    @TestedByPersonID = TestedByPersonID,
                    @ResultEnteredByOrganizationID = ResultEnteredByOrganizationID,
                    @ResultEnteredByPersonID = ResultEnteredByPersonID,
                    @ValidatedByOrganizationID = ValidatedByOrganizationID,
                    @ValidatedByPersonID = ValidatedByPersonID,
                    @ReadOnlyIndicator = ReadOnlyIndicator,
                    @NonLaboratoryTestIndicator = NonLaboratoryTestIndicator,
                    @ExternalTestIndicator = ExternalTestIndicator,
                    @PerformedByOrganizationID = PerformedByOrganizationID,
                    @ReceivedDate = ReceivedDate,
                    @ContactPersonName = ContactPersonName,
                    @RowAction = RowAction
                FROM @TestsTemp;


                --If record is being soft-deleted, then check if the test record was originally created 
                --in the laboaratory module.  If it was, then disassociate the test record from the 
                --human monitoring session, so that the test record remains in the laboratory module 
                --for further action.
                IF @RowStatus = 1
                   AND @NonLaboratoryTestIndicator = 0
                BEGIN
                    SET @RowStatus = 0;
                END
                ELSE
                BEGIN
                    SET @TestHumanCaseID = @TestHumanCaseId
                END;

                ------set Tests for this idfHumanCase
                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_GBL_TEST_SET @LanguageID = @LanguageID,
                                              @TestID = @TestID OUTPUT,
                                              @TestNameTypeID = @TestNameTypeID,
                                              @TestCategoryTypeID = @TestCategoryTypeID,
                                              @TestResultTypeID = @TestResultTypeID,
                                              @TestStatusTypeID = @TestStatusTypeID,
                                              @DiseaseID = @DiseaseID,
                                              @SampleID = @SampleID,
                                              @BatchTestID = NULL,
                                              @ObservationID = NULL,
                                              @TestNumber = NULL,
                                              @Comments = @Comments,
                                              @RowStatus = @RowStatus,
                                              @StartedDate = @StartedDate,
                                              @ResultDate = @ResultDate,
                                              @TestedByOrganizationID = @TestedByOrganizationID,
                                              @TestedByPersonID = @TestedByPersonID,
                                              @ResultEnteredByOrganizationID = @ResultEnteredByOrganizationID,
                                              @ResultEnteredByPersonID = @ResultEnteredByPersonID,
                                              @ValidatedByOrganizationID = @ValidatedByOrganizationID,
                                              @ValidatedByPersonID = @ValidatedByPersonID,
                                              @ReadOnlyIndicator = @ReadOnlyIndicator,
                                              @NonLaboratoryTestIndicator = @NonLaboratoryTestIndicator,
                                              @ExternalTestIndicator = @ExternalTestIndicator,
                                              @PerformedByOrganizationID = @PerformedByOrganizationID,
                                              @ReceivedDate = @ReceivedDate,
                                              @ContactPerson = @ContactPersonName,
                                              @MonitoringSessionID = NULL,
                                              @VectorSessionID = NULL,
                                              @HumanDiseaseReportID = @SaveID,
                                              @VeterinaryDiseaseReportID = NULL,
                                              @AuditUserName = @AuditUser,
                                              @RowAction = @RowAction;

                UPDATE @TestsInterpretationParametersTemp
                SET TestID = @TestID
                WHERE TestID = @RowID

                DELETE FROM @TestsTemp
                WHERE TestID = @RowID;
            END;
        END


        Declare @sampleCount int
        Set @sampleCount =
        (
            SELECT Count(*)
            FROM dbo.tlbMaterial
            WHERE intRowStatus = 0
                  and idfHumanCase = @SurvivorDiseaseReportID
        )

        IF EXISTS
        (
            SELECT *
            FROM dbo.tlbHumanCase
            WHERE idfHumanCase = @SaveID
                  AND idfsYNSpecimenCollected = 10100002
        )
        Begin
            UPDATE dbo.tlbMaterial
            SET intRowStatus = 1,
                AuditUpdateUser = @AuditUser
            WHERE idfHumanCase = @SaveID
        END
        ELSE IF EXISTS
        (
            SELECT *
            FROM dbo.tlbHumanCase
            WHERE idfHumanCase = @SaveID
                  AND idfsYNSpecimenCollected = 10100003
        )
        BEGIN
            UPDATE dbo.tlbHumanCase
            SET idfsNotCollectedReason = NULL,
                AuditUpdateUser = @AuditUser
            WHERE idfHumanCase = @SaveID;

            UPDATE dbo.tlbMaterial
            SET intRowStatus = 1,
                AuditUpdateUser = @AuditUser
            WHERE idfHumanCase = @SaveID;

        END
        ELSE IF EXISTS
        (
            SELECT *
            FROM dbo.tlbHumanCase
            WHERE idfHumanCase = @SaveID
                  AND idfsYNSpecimenCollected = 10100001
        )
        BEGIN
            UPDATE dbo.tlbHumanCase
            SET idfsNotCollectedReason = NULL,
                AuditUpdateUser = @AuditUser
            WHERE idfHumanCase = @SaveID
            IF (@sampleCount = 0)
            BEGIN
                UPDATE dbo.tlbHumanCase
                SET idfsYNSpecimenCollected = NULL,
                    AuditUpdateUser = @AuditUser
                WHERE idfHumanCase = @SaveID
            END

        END

        IF @TestsInterpretationParameters IS NOT NULL
        BEGIN
            WHILE EXISTS (SELECT * FROM @TestsInterpretationParametersTemp)
            BEGIN
                SELECT TOP 1
                    @RowID = TestInterpretationID,
                    @TestInterpretationID = TestInterpretationID,
                    @DiseaseID = DiseaseID,
                    @InterpretedStatusTypeID = InterpretedStatusTypeID,
                    @ValidatedByOrganizationID = ValidatedByOrganizationID,
                    @ValidatedByPersonID = ValidatedByPersonID,
                    @InterpretedByOrganizationID = InterpretedByOrganizationID,
                    @InterpretedByPersonID = InterpretedByPersonID,
                    @TestID = TestID,
                    @ValidatedStatusIndicator = ValidatedStatusIndicator,
                    @ReportSessionCreatedIndicator = ReportSessionCreatedIndicator,
                    @ValidatedComment = ValidatedComment,
                    @InterpretedComment = InterpretedComment,
                    @ValidatedDate = ValidatedDate,
                    @InterpretedDate = InterpretedDate,
                    @RowStatus = RowStatus,
                    @ReadOnlyIndicator = ReadOnlyIndicator,
                    @RowAction = RowAction
                FROM @TestsInterpretationParametersTemp;

                INSERT INTO @SuppressSelect
                EXEC dbo.USSP_GBL_TEST_INTERPRETATION_SET @AuditUserName = @AuditUser,
                                                          @TestInterpretationID = @TestInterpretationID OUTPUT,
                                                          @DiseaseID = @DiseaseID,
                                                          @InterpretedStatusTypeID = @InterpretedStatusTypeID,
                                                          @ValidatedByOrganizationID = @ValidatedByOrganizationID,
                                                          @ValidatedByPersonID = @ValidatedByPersonID,
                                                          @InterpretedByOrganizationID = @InterpretedByOrganizationID,
                                                          @InterpretedByPersonID = @InterpretedByPersonID,
                                                          @TestID = @TestID,
                                                          @ValidateStatusIndicator = @ValidatedStatusIndicator,
                                                          @ReportSessionCreatedIndicator = @ReportSessionCreatedIndicator,
                                                          @ValidationComment = @ValidatedComment,
                                                          @InterpretationComment = @InterpretedComment,
                                                          @ValidationDate = @ValidatedDate,
                                                          @InterpretationDate = @InterpretedDate,
                                                          @RowStatus = @RowStatus,
                                                          @ReadOnlyIndicator = @ReadOnlyIndicator,
                                                          @RowAction = @RowAction;

                DELETE FROM @TestsInterpretationParametersTemp
                WHERE TestInterpretationID = @RowID;
            END;
        END

        WHILE EXISTS (SELECT * FROM @EventsTemp)
        BEGIN
            SELECT TOP 1
                @EventId = EventId,
                @EventTypeId = EventTypeId,
                @EventUserId = UserId,
                @EventObjectId = ObjectId,
                @EventSiteId = SiteId,
                @EventDiseaseId = DiseaseId,
                @EventLocationId = LocationId,
                @EventInformationString = InformationString,
                @EventLoginSiteId = LoginSiteId
            FROM @EventsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_ADMIN_EVENT_SET @EventId,
                                            @EventTypeId,
                                            @EventUserId,
                                            @EventObjectId,
                                            @EventDiseaseId,
                                            @EventSiteId,
                                            @EventInformationString,
                                            @EventLoginSiteId,
                                            @EventLocationId,
                                            @AuditUser;

            DELETE FROM @EventsTemp
            WHERE EventId = @EventId;
        END;

        --------set AntiviralTherapies for this idfHumanCase
        IF @AntiviralTherapiesParameters IS NOT NULL
        BEGIN

            EXEC dbo.USSP_HUMAN_DISEASE_ANTIVIRALTHERAPIES_SET @idfHumanCase = @SaveID,
                                                               @AntiviralTherapiesParameters = @AntiviralTherapiesParameters,
                                                               @outbreakCall = 0,
                                                               @User = @AuditUser
        END
        --------set Vaccinations for this idfHumanCase
        IF @VaccinationsParameters IS NOT NULL
        BEGIN
            EXEC dbo.USSP_HUMAN_DISEASE_VACCINATIONS_DEDUP_SET @idfHumanCase = @SaveID,
                                                               @VaccinationsParameters = @VaccinationsParameters,
                                                               @outbreakCall = 0,
                                                               @User = @AuditUser
        END

        IF @ContactsParameters IS NOT NULL
        BEGIN
            EXEC dbo.USSP_GBL_CONTACT_DEDUP_SET @Contacts = @ContactsParameters,
                                                @SiteID = @CurrentSiteID,
                                                @AuditUSerName = @AuditUser,
                                                @idfHumanCase = @SaveID
        END

        ------ UPDATE tlbHuman IF datDateofDeath is provided.
        IF @datDateofDeath IS NOT NULL
        BEGIN
            UPDATE dbo.tlbHuman
            SET datDateofDeath = @datDateofDeath,
                AuditUpdateUser = @AuditUser
            WHERE idfHuman = @idfHuman
        END

        ----------------------------------------------------------------------------------------------------------------
        -- delete the Superseded disease report
        BEGIN
            PRINT 'Delete superseded record'

            INSERT INTO @SuppressSelect
            (
                ReturnCode,
                ReturnMessage
            )
            EXEC dbo.USP_HUM_HUMAN_DISEASE_DEL 
				@idfHumanCase = @SupersededDiseaseReportID,
				@DeduplicationIndicator = 1 -- deduplication

        END;

        ----------------------------------------------------------------------------------------------------------------
        -- remove tests associated with samples that aren't associated with survivor disease report
        UPDATE dbo.tlbTesting
        SET intRowStatus = 1,
            AuditUpdateUser = @AuditUser,
            AuditUpdateDTM = GETDATE()
        WHERE idfMaterial IN (
                                 SELECT idfMaterial
                                 FROM dbo.tlbMaterial
                                 WHERE (
                                           idfHumanCase = @SaveID
                                           OR idfHumanCase = @DeleteID
                                       )
                                       AND idfMaterial NOT IN (
                                                                  SELECT SampleID FROM @SamplesTemp2
                                                              )
                             )

        ----------------------------------------------------------------------------------------------------------------
        -- remove test interpretations associated with samples that aren't associated with survivor disease report
        UPDATE dbo.tlbTestValidation
        SET intRowStatus = 1,
            AuditUpdateUser = @AuditUser,
            AuditUpdateDTM = GETDATE()
        WHERE idfTesting IN (
                                SELECT idfTesting
                                FROM dbo.tlbTesting
                                WHERE idfMaterial IN (
                                                         SELECT idfMaterial
                                                         FROM dbo.tlbMaterial
                                                         WHERE (
                                                                   idfHumanCase = @SaveID
                                                                   OR idfHumanCase = @DeleteID
                                                               )
                                                               AND idfMaterial NOT IN (
                                                                                          SELECT SampleID FROM @SamplesTemp2
                                                                                      )
                                                     )
                            )

        ----------------------------------------------------------------------------------------------------------------
        -- remove penside tests associated with samples that aren't associated with survivor disease report
        UPDATE dbo.tlbPensideTest
        SET intRowStatus = 1,
            AuditUpdateUser = @AuditUser,
            AuditUpdateDTM = GETDATE()
        WHERE idfMaterial IN (
                                 SELECT idfMaterial
                                 FROM dbo.tlbMaterial
                                 WHERE (
                                           idfHumanCase = @SaveID
                                           OR idfHumanCase = @DeleteID
                                       )
                                       AND idfMaterial NOT IN (
                                                                  SELECT SampleID FROM @SamplesTemp2
                                                              )
                             )

        -- disease report samples that are no longer needed
        UPDATE dbo.tlbMaterial
        SET idfHumanCase = NULL,
            AuditUpdateUser = @AuditUser,
            AuditUpdateDTM = GETDATE()
        WHERE (
                  idfHumanCase = @SaveID
                  OR idfHumanCase = @DeleteID
              )
              AND idfMaterial NOT IN (
                                         SELECT SampleID FROM @SamplesTemp2
                                     )


        -- remove AntiMicrobialTherapy records from superseded report
        UPDATE dbo.tlbAntimicrobialTherapy
        SET intRowStatus = 1,
            AuditUpdateUser = @AuditUser,
            AuditUpdateDTM = GETDATE()
        WHERE (
                  idfHumanCase = @SaveID
                  OR idfHumanCase = @DeleteID
              )
              AND idfAntimicrobialTherapy NOT IN (
                                                     SELECT idfAntimicrobialTherapy FROM @AntiViralTemp
                                                 )

        ------- remove vaccination records from superseded report
        UPDATE dbo.HumanDiseaseReportVaccination
        SET intRowStatus = 1,
            AuditUpdateUser = @AuditUser,
            AuditUpdateDTM = GETDATE()
        WHERE (
                  idfHumanCase = @SaveID
                  OR idfHumanCase = @DeleteID
              )
              AND humanDiseaseReportVaccinationUID NOT IN (
                                                              SELECT humanDiseaseReportVaccinationUID FROM @VaccinationsTemp
                                                          )

        -- remove vaccination records from superseded report
        UPDATE dbo.tlbContactedCasePerson
        SET intRowStatus = 1,
            AuditUpdateUser = @AuditUser,
            AuditUpdateDTM = GETDATE()
        WHERE (
                  idfHumanCase = @SaveID
                  OR idfHumanCase = @DeleteID
              )
              AND idfContactedCasePerson NOT IN (
                                                    SELECT ContactedCasePersonId FROM @ContactsTemp
                                                )

        IF @@TRANCOUNT > 0
            COMMIT TRAN

        SELECT @ReturnCode AS ReturnCode,
               @ReturnMsg AS ReturnMessage,
               @SurvivorDiseaseReportID AS SurvivorDiseaseReportID,
               @strHumanCaseId AS strHumanCaseID,
               @HumanID AS idfHuman

    END TRY
    BEGIN CATCH
        SELECT @ReturnCode AS ReturnCode,
               @ReturnMsg AS ReturnMessage,
               @SurvivorDiseaseReportID AS SurvivorDiseaseReportID,
               @strHumanCaseId AS strHumanCaseID,
               @HumanID AS idfHuman
        IF @@Trancount > 0
            ROLLBACK TRAN;

        THROW;

    END CATCH

END
GO
PRINT N'Update complete.';


GO
