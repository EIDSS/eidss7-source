/*
Deployment script for EIDSS7_GG

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
--*************************************************************
-- Name 				: USP_ADMIN_FF_ParameterTypeEditorMapping_GetList
-- Description			: For generating mapping information between Parameter Types and Editors for the Flex Form Designer
--          
-- Author               : Doug Albanese
-- Revision History:
-- Name			  Date			 Change Detail
-- Doug Albanese  11/02/2022	 Initial Release
-- Doug Albanese  12/15/2022	 New mapping for numeric type
-- Doug Albanese  01/27/2023	 Added a new mapping for Total/Summing fields to use "Numeric" types
-- Testing code:
--
--EXEC	USP_ADMIN_FF_ParameterTypeEditorMapping_GetList @LanguageID = 'en-us', @idfsParameterType = 10067008
--
--*************************************************************
ALTER PROCEDURE[dbo].[USP_ADMIN_FF_ParameterTypeEditorMapping_GetList]
(		
	  @LanguageID		   NVARCHAR(50),
	  @idfsParameterType   BIGINT
)
AS
BEGIN
   BEGIN TRY


	  DECLARE @Mapping TABLE (
		 idfsBaseReference BIGINT,
		 idfsEditor NVARCHAR(200),
		 Editor NVARCHAR(MAX)
	  )

	  INSERT INTO @Mapping (idfsBaseReference, idfsEditor)
	  SELECT
		 BR.idfsBaseReference,
		 COALESCE(BR.strBaseReferenceCode, 'editCombo') AS idfsEditor
	  FROM
		 trtBaseReference BR
	  LEFT JOIN ffParameterType PT
	  ON PT.idfsParameterType = BR.idfsBaseReference
	  WHERE
		 BR.idfsReferenceType in (19000071,19000067) AND
		 (PT.idfsReferenceType IS NOT NULL OR BR.strBaseReferenceCode IS NOT NULL) AND
		 BR.idfsBaseReference = @idfsParameterType

	  UPDATE @Mapping
	  SET
		 idfsEditor = '10067001', 
		 Editor = dbo.FN_GBL_GetBaseReferenceTranslation(@LanguageID,10067001)
	  WHERE 
		 idfsEditor in ('parBoolean','editCheck')

	  UPDATE @Mapping
	  SET
		 idfsEditor = '10067002',
		 Editor = dbo.FN_GBL_GetBaseReferenceTranslation(@LanguageID,10067002)
	  WHERE 
		 idfsEditor in ('editCombo','parDiseaseList','parInvType','parProphAction','parSanAction','parSpecies')

	  UPDATE @Mapping
	  SET 
		 idfsEditor = '10067008,10067006',
		 Editor = dbo.FN_GBL_GetBaseReferenceTranslation(@LanguageID,10067008) + ',' +
				  dbo.FN_GBL_GetBaseReferenceTranslation(@LanguageID,10067006)
	  WHERE idfsEditor IN ('editText','parString')

	  UPDATE @Mapping
	  SET	  
		 idfsEditor = '10067003',
		 Editor = dbo.FN_GBL_GetBaseReferenceTranslation(@LanguageID,10067003)
	  WHERE 
		 idfsEditor in ('editDate','parDate')

	  UPDATE @Mapping
	  SET
		 idfsEditor = '10067004',
		 Editor = dbo.FN_GBL_GetBaseReferenceTranslation(@LanguageID,10067004)
	  WHERE idfsEditor in ('editDateTime','parDatetime')

	  UPDATE @Mapping
	  SET
		 idfsEditor = '217190000000',
		 Editor = dbo.FN_GBL_GetBaseReferenceTranslation(@LanguageID,217190000000)
	  WHERE idfsEditor in ('editEmpty')

	  UPDATE @Mapping
	  SET
		 idfsEditor = '217210000000',
		 Editor = dbo.FN_GBL_GetBaseReferenceTranslation(@LanguageID,217210000000)
	  WHERE idfsEditor in ('editRadio','fpt')

	  UPDATE @Mapping
	  SET
		 idfsEditor = '10067006',
		 Editor = dbo.FN_GBL_GetBaseReferenceTranslation(@LanguageID,10067006)
	  WHERE idfsEditor in ('editMemo')

	  UPDATE @Mapping
	  SET
		 idfsEditor = '10067009,10071061',
		 Editor = dbo.FN_GBL_GetBaseReferenceTranslation(@LanguageID,10067009) + ',' +
				  dbo.FN_GBL_GetBaseReferenceTranslation(@LanguageID,10071061)
	  WHERE idfsEditor in ('editUpDown')

	  	  UPDATE @Mapping
	  SET
		 idfsEditor = '10067010,10067010,10067011',
		 Editor = dbo.FN_GBL_GetBaseReferenceTranslation(@LanguageID,10067009) + ',' +
				  dbo.FN_GBL_GetBaseReferenceTranslation(@LanguageID,10067010) + ',' +
				  dbo.FN_GBL_GetBaseReferenceTranslation(@LanguageID,10067011)
	  WHERE idfsEditor in ('parNumeric','parNumericPositive','parNumericInteger')

	  SELECT 
		 idfsBaseReference,
		 idfsEditor,
		 Editor
	  FROM 
		 @Mapping 

	END TRY  

	BEGIN CATCH 
		THROW;
	END CATCH; 
		
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering Procedure [dbo].[USP_REF_DIAGNOSISREFERENCE_GETList]...';


GO
--=================================================================================================
-- Name: USP_REF_DIAGNOSISREFERENCE_GETList
--
-- Description:	Returns list of diagnosis/disease references
--							
-- Author:  Philip Shaffer
--
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Philip Shaffer	09/25/2018 Initial Release
-- Ricky Moss		12/12/2018 Removes return codes and reference id variable
-- Ricky Moss		02/01/2019 Added Penside Test, Lab Test, Sample Type, and Syndrome fields
-- Ricky Moss		04/06/2020 Added the search parameter
-- Stephen Long     04/23/2020 Added accessory code parameter and where clause for proper
--                             filtration.
-- Lamont Mitchell	09/30/2020 Added diagnosis  to be a filter in the Or clause
-- Doug Albanese	06/07/2021 Corrected the default sort column to be intOrder
-- Doug Albanese	08/03/2021 Removed unneccesarry ording, and added a CTE expression to cover 
--                             for a second column of sorting on intOrder
-- Mark Wilson		08/26/2021 Updated to do a bitwise compare for haCode
-- Doug Albanese	12/11/2021 Corrected an "Empty" search issue that pulled all HA Codes, instead 
--                             of a particular requested one
-- Stephen Long     01/26/2023 Added disease filtration rules.
--
-- Test Code:
-- exec USP_REF_DIAGNOSISREFERENCE_GETList 'en-us', NULL, NULL
-- exec USP_REF_DIAGNOSISREFERENCE_GETList 'en-us', 'Hu', NULL
-- exec USP_REF_DIAGNOSISREFERENCE_GETList 'en-us', NULL, 32
--=================================================================================================
ALTER PROCEDURE [dbo].[USP_REF_DIAGNOSISREFERENCE_GETList]
    @LangID NVARCHAR(50),
    @search NVARCHAR(50),
    @AccessoryCode BIGINT = NULL,
    @pageNo INT = 1,
    @pageSize INT = 10,
    @sortColumn NVARCHAR(30) = 'intOrder',
    @sortOrder NVARCHAR(4) = 'ASC',
    @advancedSearch NVARCHAR(100) = NULL,
    @UserEmployeeID BIGINT
AS
BEGIN
    DECLARE @firstRec INT = (@pageNo - 1) * @pagesize,
            @lastRec INT = (@pageNo * @pageSize + 1),
            @returnMsg NVARCHAR(MAX) = 'SUCCESS',
            @returnCode BIGINT = 0;
    DECLARE @T TABLE
    (
        idfsDiagnosis bigint,
        strDefault nvarchar(2000),
        strName nvarchar(2000),
        strIDC10 nvarchar(200),
        strOIECode nvarchar(2000),
        strSampleType nvarchar(4000),
        strSampleTypeNames nvarchar(4000),
        strLabTest nvarchar(4000),
        strLabTestNames nvarchar(4000),
        strPensideTest nvarchar(4000),
        strPensideTestNames nvarchar(4000),
        strHACode nvarchar(4000),
        strHACodeNames nvarchar(4000),
        idfsUsingType bigint,
        strUsingType nvarchar(2000),
        intHACode int,
        intRowStatus int,
        blnZoonotic bit,
        blnSyndrome bit,
        intOrder int
    );
    DECLARE @FilteredResults TABLE
    (
        idfsDiagnosis bigint,
        strDefault nvarchar(2000),
        strName nvarchar(2000),
        strIDC10 nvarchar(200),
        strOIECode nvarchar(2000),
        strSampleType nvarchar(4000),
        strSampleTypeNames nvarchar(4000),
        strLabTest nvarchar(4000),
        strLabTestNames nvarchar(4000),
        strPensideTest nvarchar(4000),
        strPensideTestNames nvarchar(4000),
        strHACode nvarchar(4000),
        strHACodeNames nvarchar(4000),
        idfsUsingType bigint,
        strUsingType nvarchar(2000),
        intHACode int,
        intRowStatus int,
        blnZoonotic bit,
        blnSyndrome bit,
        intOrder int
    );

    IF @search = ''
        SET @search = NULL;

    BEGIN TRY
        IF (@advancedSearch IS NOT NULL)
        BEGIN
            INSERT INTO @T
            SELECT *
            FROM
            (
                SELECT d.idfsDiagnosis,
                       dbr.strDefault,
                       dbr.[name] AS strName,
                       d.strIDC10,
                       d.strOIECode,
                       dbo.FN_REF_SAMPLETYPETODISEASE_GET(@LangID, d.idfsDiagnosis) AS strSampleType,
                       dbo.FN_REF_SAMPLETYPENAMETODISEASE_GET(@LangID, d.idfsDiagnosis) AS strSampleTypeNames,
                       dbo.FN_REF_LABTESTTODISEASE_GET(@LangID, d.idfsDiagnosis) AS strLabTest,
                       dbo.FN_REF_LABTESTNAMETODISEASE_GET(@LangID, d.idfsDiagnosis) AS strLabTestNames,
                       dbo.FN_REF_PENSIDETESTTODISEASE_GET(@LangID, d.idfsDiagnosis) AS strPensideTest,
                       dbo.FN_REF_PENSIDETESTNAMETODISEASE_GET(@LangID, d.idfsDiagnosis) AS strPensideTestNames,
                       dbo.FN_GBL_HACode_ToCSV(@LangID, dbr.intHACode) AS strHACode,
                       dbo.FN_GBL_HACodeNames_ToCSV(@LangID, dbr.intHACode) AS strHACodeNames,
                       d.idfsUsingType,
                       ut.[name] AS strUsingType,
                       dbr.intHACode,
                       dbr.intRowStatus,
                       blnZoonotic,
                       d.blnSyndrome,
                       dbr.intOrder
                FROM dbo.FN_GBL_ReferenceRepair(@LangID, 19000019) AS dbr
                    INNER JOIN dbo.trtDiagnosis d
                        ON d.idfsDiagnosis = dbr.idfsReference
                    LEFT JOIN dbo.FN_GBL_Reference_GETList(@LangID, 19000020) AS ut
                        ON d.idfsUsingType = ut.idfsReference
                    OUTER APPLY
                (
                    SELECT TOP 1
                        d_to_dg.idfsDiagnosisGroup,
                        dg.[name] AS strDiagnosesGroupName
                    FROM dbo.trtDiagnosisToDiagnosisGroup AS d_to_dg
                        INNER JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000156) AS dg
                            ON d_to_dg.idfsDiagnosisGroup = dg.idfsReference
                    WHERE d_to_dg.intRowStatus = 0
                          AND d_to_dg.idfsDiagnosis = d.idfsDiagnosis
                ) AS diagnosesGroup
                WHERE (
                          dbr.intHACode IS NULL
                          OR dbr.intHACode > 0
                      )
                      AND d.intRowStatus = 0
                      AND dbr.intRowStatus = 0
            ) AS disease
            WHERE CAST(disease.idfsDiagnosis AS VARCHAR(20)) LIKE '%' + @advancedSearch + '%'
                  OR disease.strDefault LIKE '%' + @advancedSearch + '%'
                  OR disease.strName LIKE '%' + @advancedSearch + '%'
                  OR disease.strIDC10 LIKE '%' + @advancedSearch + '%'
                  OR disease.strOIECode LIKE '%' + @advancedSearch + '%'
                  OR disease.strSampleType LIKE '%' + @advancedSearch + '%'
                  OR disease.strSampleTypeNames LIKE '%' + @advancedSearch + '%'
                  OR disease.strLabTest LIKE '%' + @advancedSearch + '%'
                  OR disease.strLabTestNames LIKE '%' + @advancedSearch + '%'
                  OR disease.strPensideTest LIKE '%' + @advancedSearch + '%'
                  OR disease.strPensideTestNames LIKE '%' + @advancedSearch + '%'
                  OR disease.strHACode LIKE '%' + @advancedSearch + '%'
                  OR disease.strHACodeNames LIKE '%' + @advancedSearch + '%'
                  OR CAST(disease.idfsUsingType AS VARCHAR(20)) LIKE '%' + @advancedSearch + '%'
                  OR CAST(disease.intHACode AS VARCHAR(20)) LIKE '%' + @advancedSearch + '%'
                  OR disease.strUsingType LIKE '%' + @advancedSearch + '%'
                  OR disease.idfsDiagnosis LIKE '%' + @advancedSearch + '%';

            -- =======================================================================================
            -- DISEASE FILTRATION RULES
            --
            -- Apply disease filtration rules from use case SAUC62.
            -- =======================================================================================
            -- 
            -- Apply level 0 disease filtration rules for the employee default user group - Denies ONLY
            -- as all records have been pulled above with or without disease filtration rules applied.
            --
            DELETE FROM @T
            WHERE EXISTS
            (
                SELECT idfsObjectID
                FROM dbo.tstObjectAccess oa
                    INNER JOIN dbo.tlbEmployee e
                        ON e.idfEmployee = @UserEmployeeID
                           AND e.intRowStatus = 0
                    INNER JOIN dbo.tlbEmployeeGroup eg
                        ON eg.idfsSite = e.idfsSite
                           AND eg.intRowStatus = 0
                    INNER JOIN dbo.trtBaseReference br
                        ON br.idfsBaseReference = eg.idfEmployeeGroup
                           AND br.intRowStatus = 0
                           AND br.blnSystem = 1
                WHERE oa.idfsObjectID = idfsDiagnosis
                      AND oa.intRowStatus = 0
                      AND oa.intPermission = 1 -- Deny permission
                      AND oa.idfsObjectType = 10060001 -- Disease
                      AND oa.idfActor = eg.idfEmployeeGroup
            );

            --
            -- Apply level 1 disease filtration rules for an employee's associated user group(s).  
            -- Allows and denies will supersede level 0.
            --
            INSERT INTO @T
            SELECT disease.*
            FROM
            (
                SELECT d.idfsDiagnosis,
                       dbr.strDefault,
                       dbr.[name] AS strName,
                       d.strIDC10,
                       d.strOIECode,
                       dbo.FN_REF_SAMPLETYPETODISEASE_GET(@LangID, d.idfsDiagnosis) AS strSampleType,
                       dbo.FN_REF_SAMPLETYPENAMETODISEASE_GET(@LangID, d.idfsDiagnosis) AS strSampleTypeNames,
                       dbo.FN_REF_LABTESTTODISEASE_GET(@LangID, d.idfsDiagnosis) AS strLabTest,
                       dbo.FN_REF_LABTESTNAMETODISEASE_GET(@LangID, d.idfsDiagnosis) AS strLabTestNames,
                       dbo.FN_REF_PENSIDETESTTODISEASE_GET(@LangID, d.idfsDiagnosis) AS strPensideTest,
                       dbo.FN_REF_PENSIDETESTNAMETODISEASE_GET(@LangID, d.idfsDiagnosis) AS strPensideTestNames,
                       dbo.FN_GBL_HACode_ToCSV(@LangID, dbr.intHACode) AS strHACode,
                       dbo.FN_GBL_HACodeNames_ToCSV(@LangID, dbr.intHACode) AS strHACodeNames,
                       d.idfsUsingType,
                       ut.[name] AS strUsingType,
                       dbr.intHACode,
                       dbr.intRowStatus,
                       blnZoonotic,
                       d.blnSyndrome,
                       dbr.intOrder
                FROM dbo.FN_GBL_ReferenceRepair(@LangID, 19000019) AS dbr
                    INNER JOIN dbo.trtDiagnosis d
                        ON d.idfsDiagnosis = dbr.idfsReference
                    LEFT JOIN dbo.FN_GBL_Reference_GETList(@LangID, 19000020) AS ut
                        ON d.idfsUsingType = ut.idfsReference
                    OUTER APPLY
                (
                    SELECT TOP 1
                        d_to_dg.idfsDiagnosisGroup,
                        dg.[name] AS strDiagnosesGroupName
                    FROM dbo.trtDiagnosisToDiagnosisGroup AS d_to_dg
                        INNER JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000156) AS dg
                            ON d_to_dg.idfsDiagnosisGroup = dg.idfsReference
                    WHERE d_to_dg.intRowStatus = 0
                          AND d_to_dg.idfsDiagnosis = d.idfsDiagnosis
                ) AS diagnosesGroup
            ) AS disease
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = disease.idfsDiagnosis
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
            WHERE oa.intPermission = 2 -- Allow permission
                  AND oa.idfsObjectType = 10060001 -- Disease
                  AND oa.idfActor = egm.idfEmployeeGroup
                  AND CAST(disease.idfsDiagnosis AS VARCHAR(20)) LIKE '%' + @advancedSearch + '%'
                  OR disease.strDefault LIKE '%' + @advancedSearch + '%'
                  OR disease.strName LIKE '%' + @advancedSearch + '%'
                  OR disease.strIDC10 LIKE '%' + @advancedSearch + '%'
                  OR disease.strOIECode LIKE '%' + @advancedSearch + '%'
                  OR disease.strSampleType LIKE '%' + @advancedSearch + '%'
                  OR disease.strSampleTypeNames LIKE '%' + @advancedSearch + '%'
                  OR disease.strLabTest LIKE '%' + @advancedSearch + '%'
                  OR disease.strLabTestNames LIKE '%' + @advancedSearch + '%'
                  OR disease.strPensideTest LIKE '%' + @advancedSearch + '%'
                  OR disease.strPensideTestNames LIKE '%' + @advancedSearch + '%'
                  OR disease.strHACode LIKE '%' + @advancedSearch + '%'
                  OR disease.strHACodeNames LIKE '%' + @advancedSearch + '%'
                  OR CAST(disease.idfsUsingType AS VARCHAR(20)) LIKE '%' + @advancedSearch + '%'
                  OR CAST(disease.intHACode AS VARCHAR(20)) LIKE '%' + @advancedSearch + '%'
                  OR disease.strUsingType LIKE '%' + @advancedSearch + '%'
                  OR disease.idfsDiagnosis LIKE '%' + @advancedSearch + '%';

            DELETE res
            FROM @T res
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = res.idfsDiagnosis
                       AND oa.intRowStatus = 0
            WHERE oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060001 -- Disease
                  AND oa.idfActor = egm.idfEmployeeGroup;

            --
            -- Apply level 2 disease filtration rules for the employee's identity.  Allows and denies 
            -- will supersede level 1.
            --
            INSERT INTO @T
            SELECT disease.*
            FROM
            (
                SELECT d.idfsDiagnosis,
                       dbr.strDefault,
                       dbr.[name] AS strName,
                       d.strIDC10,
                       d.strOIECode,
                       dbo.FN_REF_SAMPLETYPETODISEASE_GET(@LangID, d.idfsDiagnosis) AS strSampleType,
                       dbo.FN_REF_SAMPLETYPENAMETODISEASE_GET(@LangID, d.idfsDiagnosis) AS strSampleTypeNames,
                       dbo.FN_REF_LABTESTTODISEASE_GET(@LangID, d.idfsDiagnosis) AS strLabTest,
                       dbo.FN_REF_LABTESTNAMETODISEASE_GET(@LangID, d.idfsDiagnosis) AS strLabTestNames,
                       dbo.FN_REF_PENSIDETESTTODISEASE_GET(@LangID, d.idfsDiagnosis) AS strPensideTest,
                       dbo.FN_REF_PENSIDETESTNAMETODISEASE_GET(@LangID, d.idfsDiagnosis) AS strPensideTestNames,
                       dbo.FN_GBL_HACode_ToCSV(@LangID, dbr.intHACode) AS strHACode,
                       dbo.FN_GBL_HACodeNames_ToCSV(@LangID, dbr.intHACode) AS strHACodeNames,
                       d.idfsUsingType,
                       ut.[name] AS strUsingType,
                       dbr.intHACode,
                       dbr.intRowStatus,
                       blnZoonotic,
                       d.blnSyndrome,
                       dbr.intOrder
                FROM dbo.FN_GBL_ReferenceRepair(@LangID, 19000019) AS dbr
                    INNER JOIN dbo.trtDiagnosis d
                        ON d.idfsDiagnosis = dbr.idfsReference
                    LEFT JOIN dbo.FN_GBL_Reference_GETList(@LangID, 19000020) AS ut
                        ON d.idfsUsingType = ut.idfsReference
                    OUTER APPLY
                (
                    SELECT TOP 1
                        d_to_dg.idfsDiagnosisGroup,
                        dg.[name] AS strDiagnosesGroupName
                    FROM dbo.trtDiagnosisToDiagnosisGroup AS d_to_dg
                        INNER JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000156) AS dg
                            ON d_to_dg.idfsDiagnosisGroup = dg.idfsReference
                    WHERE d_to_dg.intRowStatus = 0
                          AND d_to_dg.idfsDiagnosis = d.idfsDiagnosis
                ) AS diagnosesGroup
            ) AS disease
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = disease.idfsDiagnosis
                       AND oa.intRowStatus = 0
            WHERE oa.intPermission = 2 -- Allow permission
                  AND oa.idfsObjectType = 10060001 -- Disease
                  AND oa.idfActor = @UserEmployeeID
                  AND CAST(disease.idfsDiagnosis AS VARCHAR(20)) LIKE '%' + @advancedSearch + '%'
                  OR disease.strDefault LIKE '%' + @advancedSearch + '%'
                  OR disease.strName LIKE '%' + @advancedSearch + '%'
                  OR disease.strIDC10 LIKE '%' + @advancedSearch + '%'
                  OR disease.strOIECode LIKE '%' + @advancedSearch + '%'
                  OR disease.strSampleType LIKE '%' + @advancedSearch + '%'
                  OR disease.strSampleTypeNames LIKE '%' + @advancedSearch + '%'
                  OR disease.strLabTest LIKE '%' + @advancedSearch + '%'
                  OR disease.strLabTestNames LIKE '%' + @advancedSearch + '%'
                  OR disease.strPensideTest LIKE '%' + @advancedSearch + '%'
                  OR disease.strPensideTestNames LIKE '%' + @advancedSearch + '%'
                  OR disease.strHACode LIKE '%' + @advancedSearch + '%'
                  OR disease.strHACodeNames LIKE '%' + @advancedSearch + '%'
                  OR CAST(disease.idfsUsingType AS VARCHAR(20)) LIKE '%' + @advancedSearch + '%'
                  OR CAST(disease.intHACode AS VARCHAR(20)) LIKE '%' + @advancedSearch + '%'
                  OR disease.strUsingType LIKE '%' + @advancedSearch + '%'
                  OR disease.idfsDiagnosis LIKE '%' + @advancedSearch + '%';

            DELETE FROM @T
            WHERE EXISTS
            (
                SELECT idfsObjectID
                FROM dbo.tstObjectAccess oa
                WHERE oa.idfsObjectID = idfsDiagnosis
                      AND oa.intRowStatus = 0
                      AND oa.intPermission = 1 -- Deny permission
                      AND oa.idfsObjectType = 10060001 -- Disease
                      AND oa.idfActor = @UserEmployeeID
            );
        END
        ELSE IF (@search IS NOT NULL)
        BEGIN
            INSERT INTO @T
            SELECT *
            FROM
            (
                SELECT d.idfsDiagnosis,
                       dbr.strDefault,
                       dbr.[name] AS strName,
                       d.strIDC10,
                       d.strOIECode,
                       dbo.FN_REF_SAMPLETYPETODISEASE_GET(@LangID, d.idfsDiagnosis) AS strSampleType,
                       dbo.FN_REF_SAMPLETYPENAMETODISEASE_GET(@LangID, d.idfsDiagnosis) AS strSampleTypeNames,
                       dbo.FN_REF_LABTESTTODISEASE_GET(@LangID, d.idfsDiagnosis) AS strLabTest,
                       dbo.FN_REF_LABTESTNAMETODISEASE_GET(@LangID, d.idfsDiagnosis) AS strLabTestNames,
                       dbo.FN_REF_PENSIDETESTTODISEASE_GET(@LangID, d.idfsDiagnosis) AS strPensideTest,
                       dbo.FN_REF_PENSIDETESTNAMETODISEASE_GET(@LangID, d.idfsDiagnosis) AS strPensideTestNames,
                       dbo.FN_GBL_HACode_ToCSV(@LangID, dbr.intHACode) AS strHACode,
                       dbo.FN_GBL_HACodeNames_ToCSV(@LangID, dbr.intHACode) AS strHACodeNames,
                       d.idfsUsingType,
                       ut.[name] AS strUsingType,
                       dbr.intHACode,
                       dbr.intRowStatus,
                       blnZoonotic,
                       d.blnSyndrome,
                       dbr.intOrder
                FROM dbo.FN_GBL_ReferenceRepair(@LangID, 19000019) AS dbr
                    INNER JOIN dbo.trtDiagnosis d
                        ON d.idfsDiagnosis = dbr.idfsReference
                    LEFT JOIN dbo.FN_GBL_Reference_GETList(@LangID, 19000020) AS ut
                        ON d.idfsUsingType = ut.idfsReference
                    OUTER APPLY
                (
                    SELECT TOP 1
                        d_to_dg.idfsDiagnosisGroup,
                        dg.[name] AS strDiagnosesGroupName
                    FROM dbo.trtDiagnosisToDiagnosisGroup AS d_to_dg
                        INNER JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000156) AS dg
                            ON d_to_dg.idfsDiagnosisGroup = dg.idfsReference
                    WHERE d_to_dg.intRowStatus = 0
                          AND d_to_dg.idfsDiagnosis = d.idfsDiagnosis
                ) AS diagnosesGroup
                WHERE (
                          dbr.intHACode IS NULL
                          OR dbr.intHACode > 0
                      )
                      AND d.intRowStatus = 0
                      AND dbr.intRowStatus = 0
            ) AS disease
            WHERE disease.strDefault LIKE '%' + @search + '%'
                  OR disease.strName LIKE '%' + @search + '%'
                  OR disease.strIDC10 LIKE '%' + @search + '%'
                  OR disease.strOIECode LIKE '%' + @search + '%'
                  OR disease.strHACodeNames LIKE '%' + @search + '%'
                  OR disease.strLabTestNames LIKE '%' + @search + '%'
                  OR disease.strPensideTestNames LIKE '%' + @search + '%'
                  OR disease.strSampleTypeNames LIKE '%' + @search + '%'
                  OR disease.strUsingType LIKE '%' + @search + '%'
                  OR disease.idfsDiagnosis LIKE '%' + @search + '%';

            -- =======================================================================================
            -- DISEASE FILTRATION RULES
            --
            -- Apply disease filtration rules from use case SAUC62.
            -- =======================================================================================
            -- 
            -- Apply level 0 disease filtration rules for the employee default user group - Denies ONLY
            -- as all records have been pulled above with or without disease filtration rules applied.
            --
            DELETE FROM @T
            WHERE EXISTS
            (
                SELECT idfsObjectID
                FROM dbo.tstObjectAccess oa
                    INNER JOIN dbo.tlbEmployee e
                        ON e.idfEmployee = @UserEmployeeID
                           AND e.intRowStatus = 0
                    INNER JOIN dbo.tlbEmployeeGroup eg
                        ON eg.idfsSite = e.idfsSite
                           AND eg.intRowStatus = 0
                    INNER JOIN dbo.trtBaseReference br
                        ON br.idfsBaseReference = eg.idfEmployeeGroup
                           AND br.intRowStatus = 0
                           AND br.blnSystem = 1
                WHERE oa.idfsObjectID = idfsDiagnosis
                      AND oa.intRowStatus = 0
                      AND oa.intPermission = 1 -- Deny permission
                      AND oa.idfsObjectType = 10060001 -- Disease
                      AND oa.idfActor = eg.idfEmployeeGroup
            );

            --
            -- Apply level 1 disease filtration rules for an employee's associated user group(s).  
            -- Allows and denies will supersede level 0.
            --
            INSERT INTO @T
            SELECT disease.*
            FROM
            (
                SELECT d.idfsDiagnosis,
                       dbr.strDefault,
                       dbr.[name] AS strName,
                       d.strIDC10,
                       d.strOIECode,
                       dbo.FN_REF_SAMPLETYPETODISEASE_GET(@LangID, d.idfsDiagnosis) AS strSampleType,
                       dbo.FN_REF_SAMPLETYPENAMETODISEASE_GET(@LangID, d.idfsDiagnosis) AS strSampleTypeNames,
                       dbo.FN_REF_LABTESTTODISEASE_GET(@LangID, d.idfsDiagnosis) AS strLabTest,
                       dbo.FN_REF_LABTESTNAMETODISEASE_GET(@LangID, d.idfsDiagnosis) AS strLabTestNames,
                       dbo.FN_REF_PENSIDETESTTODISEASE_GET(@LangID, d.idfsDiagnosis) AS strPensideTest,
                       dbo.FN_REF_PENSIDETESTNAMETODISEASE_GET(@LangID, d.idfsDiagnosis) AS strPensideTestNames,
                       dbo.FN_GBL_HACode_ToCSV(@LangID, dbr.intHACode) AS strHACode,
                       dbo.FN_GBL_HACodeNames_ToCSV(@LangID, dbr.intHACode) AS strHACodeNames,
                       d.idfsUsingType,
                       ut.[name] AS strUsingType,
                       dbr.intHACode,
                       dbr.intRowStatus,
                       blnZoonotic,
                       d.blnSyndrome,
                       dbr.intOrder
                FROM dbo.FN_GBL_ReferenceRepair(@LangID, 19000019) AS dbr
                    INNER JOIN dbo.trtDiagnosis d
                        ON d.idfsDiagnosis = dbr.idfsReference
                    LEFT JOIN dbo.FN_GBL_Reference_GETList(@LangID, 19000020) AS ut
                        ON d.idfsUsingType = ut.idfsReference
                    OUTER APPLY
                (
                    SELECT TOP 1
                        d_to_dg.idfsDiagnosisGroup,
                        dg.[name] AS strDiagnosesGroupName
                    FROM dbo.trtDiagnosisToDiagnosisGroup AS d_to_dg
                        INNER JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000156) AS dg
                            ON d_to_dg.idfsDiagnosisGroup = dg.idfsReference
                    WHERE d_to_dg.intRowStatus = 0
                          AND d_to_dg.idfsDiagnosis = d.idfsDiagnosis
                ) AS diagnosesGroup
            ) AS disease
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = disease.idfsDiagnosis
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
            WHERE oa.intPermission = 2 -- Allow permission
                  AND oa.idfsObjectType = 10060001 -- Disease
                  AND oa.idfActor = egm.idfEmployeeGroup
                  AND disease.strDefault LIKE '%' + @search + '%'
                  OR disease.strName LIKE '%' + @search + '%'
                  OR disease.strIDC10 LIKE '%' + @search + '%'
                  OR disease.strOIECode LIKE '%' + @search + '%'
                  OR disease.strHACodeNames LIKE '%' + @search + '%'
                  OR disease.strLabTestNames LIKE '%' + @search + '%'
                  OR disease.strPensideTestNames LIKE '%' + @search + '%'
                  OR disease.strSampleTypeNames LIKE '%' + @search + '%'
                  OR disease.strUsingType LIKE '%' + @search + '%'
                  OR disease.idfsDiagnosis LIKE '%' + @search + '%';

            DELETE res
            FROM @T res
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = res.idfsDiagnosis
                       AND oa.intRowStatus = 0
            WHERE oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060001 -- Disease
                  AND oa.idfActor = egm.idfEmployeeGroup;

            --
            -- Apply level 2 disease filtration rules for the employee's identity.  Allows and denies 
            -- will supersede level 1.
            --
            INSERT INTO @T
            SELECT disease.*
            FROM
            (
                SELECT d.idfsDiagnosis,
                       dbr.strDefault,
                       dbr.[name] AS strName,
                       d.strIDC10,
                       d.strOIECode,
                       dbo.FN_REF_SAMPLETYPETODISEASE_GET(@LangID, d.idfsDiagnosis) AS strSampleType,
                       dbo.FN_REF_SAMPLETYPENAMETODISEASE_GET(@LangID, d.idfsDiagnosis) AS strSampleTypeNames,
                       dbo.FN_REF_LABTESTTODISEASE_GET(@LangID, d.idfsDiagnosis) AS strLabTest,
                       dbo.FN_REF_LABTESTNAMETODISEASE_GET(@LangID, d.idfsDiagnosis) AS strLabTestNames,
                       dbo.FN_REF_PENSIDETESTTODISEASE_GET(@LangID, d.idfsDiagnosis) AS strPensideTest,
                       dbo.FN_REF_PENSIDETESTNAMETODISEASE_GET(@LangID, d.idfsDiagnosis) AS strPensideTestNames,
                       dbo.FN_GBL_HACode_ToCSV(@LangID, dbr.intHACode) AS strHACode,
                       dbo.FN_GBL_HACodeNames_ToCSV(@LangID, dbr.intHACode) AS strHACodeNames,
                       d.idfsUsingType,
                       ut.[name] AS strUsingType,
                       dbr.intHACode,
                       dbr.intRowStatus,
                       blnZoonotic,
                       d.blnSyndrome,
                       dbr.intOrder
                FROM dbo.FN_GBL_ReferenceRepair(@LangID, 19000019) AS dbr
                    INNER JOIN dbo.trtDiagnosis d
                        ON d.idfsDiagnosis = dbr.idfsReference
                    LEFT JOIN dbo.FN_GBL_Reference_GETList(@LangID, 19000020) AS ut
                        ON d.idfsUsingType = ut.idfsReference
                    OUTER APPLY
                (
                    SELECT TOP 1
                        d_to_dg.idfsDiagnosisGroup,
                        dg.[name] AS strDiagnosesGroupName
                    FROM dbo.trtDiagnosisToDiagnosisGroup AS d_to_dg
                        INNER JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000156) AS dg
                            ON d_to_dg.idfsDiagnosisGroup = dg.idfsReference
                    WHERE d_to_dg.intRowStatus = 0
                          AND d_to_dg.idfsDiagnosis = d.idfsDiagnosis
                ) AS diagnosesGroup
            ) AS disease
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = disease.idfsDiagnosis
                       AND oa.intRowStatus = 0
            WHERE oa.intPermission = 2 -- Allow permission
                  AND oa.idfsObjectType = 10060001 -- Disease
                  AND oa.idfActor = @UserEmployeeID
                  AND disease.strDefault LIKE '%' + @search + '%'
                  OR disease.strName LIKE '%' + @search + '%'
                  OR disease.strIDC10 LIKE '%' + @search + '%'
                  OR disease.strOIECode LIKE '%' + @search + '%'
                  OR disease.strHACodeNames LIKE '%' + @search + '%'
                  OR disease.strLabTestNames LIKE '%' + @search + '%'
                  OR disease.strPensideTestNames LIKE '%' + @search + '%'
                  OR disease.strSampleTypeNames LIKE '%' + @search + '%'
                  OR disease.strUsingType LIKE '%' + @search + '%'
                  OR disease.idfsDiagnosis LIKE '%' + @search + '%';

            DELETE FROM @T
            WHERE EXISTS
            (
                SELECT idfsObjectID
                FROM dbo.tstObjectAccess oa
                WHERE oa.idfsObjectID = idfsDiagnosis
                      AND oa.intRowStatus = 0
                      AND oa.intPermission = 1 -- Deny permission
                      AND oa.idfsObjectType = 10060001 -- Disease
                      AND oa.idfActor = @UserEmployeeID
            );
        END
        ELSE
        BEGIN
            INSERT INTO @T
            SELECT d.idfsDiagnosis,
                   dbr.strDefault,
                   dbr.[name] AS strName,
                   d.strIDC10,
                   d.strOIECode,
                   dbo.FN_REF_SAMPLETYPETODISEASE_GET(@LangID, d.idfsDiagnosis) AS strSampleType,
                   dbo.FN_REF_SAMPLETYPENAMETODISEASE_GET(@LangID, d.idfsDiagnosis) AS strSampleTypeNames,
                   dbo.FN_REF_LABTESTTODISEASE_GET(@LangID, d.idfsDiagnosis) AS strLabTest,
                   dbo.FN_REF_LABTESTNAMETODISEASE_GET(@LangID, d.idfsDiagnosis) AS strLabTestNames,
                   dbo.FN_REF_PENSIDETESTTODISEASE_GET(@LangID, d.idfsDiagnosis) AS strPensideTest,
                   dbo.FN_REF_PENSIDETESTNAMETODISEASE_GET(@LangID, d.idfsDiagnosis) AS strPensideTestNames,
                   dbo.FN_GBL_HACode_ToCSV(@LangID, dbr.intHACode) AS strHACode,
                   dbo.FN_GBL_HACodeNames_ToCSV(@LangID, dbr.intHACode) AS strHACodeNames,
                   d.idfsUsingType,
                   ut.[name] AS strUsingType,
                   dbr.intHACode,
                   dbr.intRowStatus,
                   blnZoonotic,
                   d.blnSyndrome,
                   dbr.intOrder
            FROM dbo.FN_GBL_ReferenceRepair(@LangID, 19000019) AS dbr
                INNER JOIN dbo.trtDiagnosis d
                    ON d.idfsDiagnosis = dbr.idfsReference
                LEFT JOIN dbo.FN_GBL_Reference_GETList(@LangID, 19000020) AS ut
                    ON d.idfsUsingType = ut.idfsReference
                OUTER APPLY
            (
                SELECT TOP 1
                    d_to_dg.idfsDiagnosisGroup,
                    dg.[name] AS strDiagnosesGroupName
                FROM dbo.trtDiagnosisToDiagnosisGroup AS d_to_dg
                    INNER JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000156) AS dg
                        ON d_to_dg.idfsDiagnosisGroup = dg.idfsReference
                WHERE d_to_dg.intRowStatus = 0
                      AND d_to_dg.idfsDiagnosis = d.idfsDiagnosis
            ) AS diagnosesGroup
            WHERE (
                      dbr.intHACode IS NULL
                      OR dbr.intHACode > 0
                  )
                  AND d.intRowStatus = 0
                  AND dbr.intRowStatus = 0
                  AND (
                          ((@AccessoryCode & dbr.intHACode) > 0)
                          OR (@AccessoryCode IS NULL)
                      );

            -- =======================================================================================
            -- DISEASE FILTRATION RULES
            --
            -- Apply disease filtration rules from use case SAUC62.
            -- =======================================================================================
            -- 
            -- Apply level 0 disease filtration rules for the employee default user group - Denies ONLY
            -- as all records have been pulled above with or without disease filtration rules applied.
            --
            DELETE FROM @T
            WHERE EXISTS
            (
                SELECT idfsObjectID
                FROM dbo.tstObjectAccess oa
                    INNER JOIN dbo.tlbEmployee e
                        ON e.idfEmployee = @UserEmployeeID
                           AND e.intRowStatus = 0
                    INNER JOIN dbo.tlbEmployeeGroup eg
                        ON eg.idfsSite = e.idfsSite
                           AND eg.intRowStatus = 0
                    INNER JOIN dbo.trtBaseReference br
                        ON br.idfsBaseReference = eg.idfEmployeeGroup
                           AND br.intRowStatus = 0
                           AND br.blnSystem = 1
                WHERE oa.idfsObjectID = idfsDiagnosis
                      AND oa.intRowStatus = 0
                      AND oa.intPermission = 1 -- Deny permission
                      AND oa.idfsObjectType = 10060001 -- Disease
                      AND oa.idfActor = eg.idfEmployeeGroup
            );

            --
            -- Apply level 1 disease filtration rules for an employee's associated user group(s).  
            -- Allows and denies will supersede level 0.
            --
            INSERT INTO @T
            SELECT d.idfsDiagnosis,
                   dbr.strDefault,
                   dbr.[name] AS strName,
                   d.strIDC10,
                   d.strOIECode,
                   dbo.FN_REF_SAMPLETYPETODISEASE_GET(@LangID, d.idfsDiagnosis) AS strSampleType,
                   dbo.FN_REF_SAMPLETYPENAMETODISEASE_GET(@LangID, d.idfsDiagnosis) AS strSampleTypeNames,
                   dbo.FN_REF_LABTESTTODISEASE_GET(@LangID, d.idfsDiagnosis) AS strLabTest,
                   dbo.FN_REF_LABTESTNAMETODISEASE_GET(@LangID, d.idfsDiagnosis) AS strLabTestNames,
                   dbo.FN_REF_PENSIDETESTTODISEASE_GET(@LangID, d.idfsDiagnosis) AS strPensideTest,
                   dbo.FN_REF_PENSIDETESTNAMETODISEASE_GET(@LangID, d.idfsDiagnosis) AS strPensideTestNames,
                   dbo.FN_GBL_HACode_ToCSV(@LangID, dbr.intHACode) AS strHACode,
                   dbo.FN_GBL_HACodeNames_ToCSV(@LangID, dbr.intHACode) AS strHACodeNames,
                   d.idfsUsingType,
                   ut.[name] AS strUsingType,
                   dbr.intHACode,
                   dbr.intRowStatus,
                   blnZoonotic,
                   d.blnSyndrome,
                   dbr.intOrder
            FROM dbo.FN_GBL_ReferenceRepair(@LangID, 19000019) AS dbr
                INNER JOIN dbo.trtDiagnosis d
                    ON d.idfsDiagnosis = dbr.idfsReference
                LEFT JOIN dbo.FN_GBL_Reference_GETList(@LangID, 19000020) AS ut
                    ON d.idfsUsingType = ut.idfsReference
                OUTER APPLY
            (
                SELECT TOP 1
                    d_to_dg.idfsDiagnosisGroup,
                    dg.[name] AS strDiagnosesGroupName
                FROM dbo.trtDiagnosisToDiagnosisGroup AS d_to_dg
                    INNER JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000156) AS dg
                        ON d_to_dg.idfsDiagnosisGroup = dg.idfsReference
                WHERE d_to_dg.intRowStatus = 0
                      AND d_to_dg.idfsDiagnosis = d.idfsDiagnosis
            ) AS diagnosesGroup
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = dbr.idfsReference
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
            WHERE oa.intPermission = 2 -- Allow permission
                  AND oa.idfsObjectType = 10060001 -- Disease
                  AND oa.idfActor = egm.idfEmployeeGroup
                  AND (
                          dbr.intHACode IS NULL
                          OR dbr.intHACode > 0
                      )
                  AND d.intRowStatus = 0
                  AND dbr.intRowStatus = 0
                  AND (
                          ((@AccessoryCode & dbr.intHACode) > 0)
                          OR (@AccessoryCode IS NULL)
                      );

            DELETE res
            FROM @T res
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = res.idfsDiagnosis
                       AND oa.intRowStatus = 0
            WHERE oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060001 -- Disease
                  AND oa.idfActor = egm.idfEmployeeGroup;

            --
            -- Apply level 2 disease filtration rules for the employee's identity.  Allows and denies 
            -- will supersede level 1.
            --
            INSERT INTO @T
            SELECT d.idfsDiagnosis,
                   dbr.strDefault,
                   dbr.[name] AS strName,
                   d.strIDC10,
                   d.strOIECode,
                   dbo.FN_REF_SAMPLETYPETODISEASE_GET(@LangID, d.idfsDiagnosis) AS strSampleType,
                   dbo.FN_REF_SAMPLETYPENAMETODISEASE_GET(@LangID, d.idfsDiagnosis) AS strSampleTypeNames,
                   dbo.FN_REF_LABTESTTODISEASE_GET(@LangID, d.idfsDiagnosis) AS strLabTest,
                   dbo.FN_REF_LABTESTNAMETODISEASE_GET(@LangID, d.idfsDiagnosis) AS strLabTestNames,
                   dbo.FN_REF_PENSIDETESTTODISEASE_GET(@LangID, d.idfsDiagnosis) AS strPensideTest,
                   dbo.FN_REF_PENSIDETESTNAMETODISEASE_GET(@LangID, d.idfsDiagnosis) AS strPensideTestNames,
                   dbo.FN_GBL_HACode_ToCSV(@LangID, dbr.intHACode) AS strHACode,
                   dbo.FN_GBL_HACodeNames_ToCSV(@LangID, dbr.intHACode) AS strHACodeNames,
                   d.idfsUsingType,
                   ut.[name] AS strUsingType,
                   dbr.intHACode,
                   dbr.intRowStatus,
                   blnZoonotic,
                   d.blnSyndrome,
                   dbr.intOrder
            FROM dbo.FN_GBL_ReferenceRepair(@LangID, 19000019) AS dbr
                INNER JOIN dbo.trtDiagnosis d
                    ON d.idfsDiagnosis = dbr.idfsReference
                LEFT JOIN dbo.FN_GBL_Reference_GETList(@LangID, 19000020) AS ut
                    ON d.idfsUsingType = ut.idfsReference
                OUTER APPLY
            (
                SELECT TOP 1
                    d_to_dg.idfsDiagnosisGroup,
                    dg.[name] AS strDiagnosesGroupName
                FROM dbo.trtDiagnosisToDiagnosisGroup AS d_to_dg
                    INNER JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000156) AS dg
                        ON d_to_dg.idfsDiagnosisGroup = dg.idfsReference
                WHERE d_to_dg.intRowStatus = 0
                      AND d_to_dg.idfsDiagnosis = d.idfsDiagnosis
            ) AS diagnosesGroup
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = dbr.idfsReference
                       AND oa.intRowStatus = 0
            WHERE oa.intPermission = 2 -- Allow permission
                  AND oa.idfsObjectType = 10060001 -- Disease
                  AND oa.idfActor = @UserEmployeeID
                  AND (
                          dbr.intHACode IS NULL
                          OR dbr.intHACode > 0
                      )
                  AND d.intRowStatus = 0
                  AND dbr.intRowStatus = 0
                  AND (
                          ((@AccessoryCode & dbr.intHACode) > 0)
                          OR (@AccessoryCode IS NULL)
                      );

            DELETE FROM @T
            WHERE EXISTS
            (
                SELECT idfsObjectID
                FROM dbo.tstObjectAccess oa
                WHERE oa.idfsObjectID = idfsDiagnosis
                      AND oa.intRowStatus = 0
                      AND oa.intPermission = 1 -- Deny permission
                      AND oa.idfsObjectType = 10060001 -- Disease
                      AND oa.idfActor = @UserEmployeeID
            );
        END;

        INSERT INTO @FilteredResults
        SELECT *
        FROM @T
        GROUP BY idfsDiagnosis,
                 strDefault,
                 strName,
                 strIDC10,
                 strOIECode,
                 strSampleType,
                 strSampleTypeNames,
                 strLabTest,
                 strLabTestNames,
                 strPensideTest,
                 strPensideTestNames,
                 strHACode,
                 strHACodeNames,
                 idfsUsingType,
                 strUsingType,
                 intHACode,
                 intRowStatus,
                 blnZoonotic,
                 blnSyndrome,
                 intOrder;

        WITH CTEResults
        AS (SELECT ROW_NUMBER() OVER (ORDER BY CASE
                                                   WHEN @sortColumn = 'idfsDiagnosis'
                                                        AND @SortOrder = 'asc' THEN
                                                       idfsDiagnosis
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'idfsDiagnosis'
                                                        AND @SortOrder = 'desc' THEN
                                                       idfsDiagnosis
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'strdefault'
                                                        AND @SortOrder = 'asc' THEN
                                                       strdefault
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'strdefault'
                                                        AND @SortOrder = 'desc' THEN
                                                       strdefault
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'strName'
                                                        AND @SortOrder = 'asc' THEN
                                                       strName
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'strName'
                                                        AND @SortOrder = 'desc' THEN
                                                       strName
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'strIDC10'
                                                        AND @SortOrder = 'asc' THEN
                                                       strIDC10
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'strIDC10'
                                                        AND @SortOrder = 'desc' THEN
                                                       strIDC10
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'strOIECode'
                                                        AND @SortOrder = 'asc' THEN
                                                       strOIECode
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'strOIECode'
                                                        AND @SortOrder = 'desc' THEN
                                                       strOIECode
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'strSampleType'
                                                        AND @SortOrder = 'asc' THEN
                                                       strSampleType
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'strSampleType'
                                                        AND @SortOrder = 'desc' THEN
                                                       strSampleType
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'strSampleTypeNames'
                                                        AND @SortOrder = 'asc' THEN
                                                       strSampleTypeNames
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'strSampleTypeNames'
                                                        AND @SortOrder = 'desc' THEN
                                                       strSampleTypeNames
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'strLabTest'
                                                        AND @SortOrder = 'asc' THEN
                                                       strLabTest
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'strLabTest'
                                                        AND @SortOrder = 'desc' THEN
                                                       strLabTest
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'strLabTestNames'
                                                        AND @SortOrder = 'asc' THEN
                                                       strLabTestNames
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'strLabTestNames'
                                                        AND @SortOrder = 'desc' THEN
                                                       strLabTestNames
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'strPensideTest'
                                                        AND @SortOrder = 'asc' THEN
                                                       strPensideTest
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'strPensideTest'
                                                        AND @SortOrder = 'desc' THEN
                                                       strPensideTest
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'strPensideTestNames'
                                                        AND @SortOrder = 'asc' THEN
                                                       strPensideTestNames
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'strPensideTestNames'
                                                        AND @SortOrder = 'desc' THEN
                                                       strPensideTestNames
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'strHACode'
                                                        AND @SortOrder = 'asc' THEN
                                                       strHACode
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'strHACode'
                                                        AND @SortOrder = 'desc' THEN
                                                       strHACode
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'strHACodeNames'
                                                        AND @SortOrder = 'asc' THEN
                                                       strHACodeNames
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'strHACodeNames'
                                                        AND @SortOrder = 'desc' THEN
                                                       strHACodeNames
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'idfsUsingType'
                                                        AND @SortOrder = 'asc' THEN
                                                       idfsUsingType
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'idfsUsingType'
                                                        AND @SortOrder = 'desc' THEN
                                                       idfsUsingType
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'strUsingType'
                                                        AND @SortOrder = 'asc' THEN
                                                       strUsingType
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'strUsingType'
                                                        AND @SortOrder = 'desc' THEN
                                                       strUsingType
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'intHACode'
                                                        AND @SortOrder = 'asc' THEN
                                                       intHACode
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'intHACode'
                                                        AND @SortOrder = 'desc' THEN
                                                       intHACode
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'intRowStatus'
                                                        AND @SortOrder = 'asc' THEN
                                                       intRowStatus
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'intRowStatus'
                                                        AND @SortOrder = 'desc' THEN
                                                       intRowStatus
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'blnZoonotic'
                                                        AND @SortOrder = 'asc' THEN
                                                       blnZoonotic
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'blnZoonotic'
                                                        AND @SortOrder = 'desc' THEN
                                                       blnZoonotic
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'blnSyndrome'
                                                        AND @SortOrder = 'asc' THEN
                                                       blnSyndrome
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'blnSyndrome'
                                                        AND @SortOrder = 'desc' THEN
                                                       blnSyndrome
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'intOrder'
                                                        AND @SortOrder = 'asc' THEN
                                                       intOrder
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'intOrder'
                                                        AND @SortOrder = 'desc' THEN
                                                       intOrder
                                               END DESC,
                                               IIF(@sortColumn = 'intOrder', strName, NULL) ASC
                                     ) AS ROWNUM,
                   COUNT(*) OVER () AS TotalRowCount,
                   idfsDiagnosis,
                   strDefault,
                   strName,
                   strIDC10,
                   strOIECode,
                   strSampleType,
                   strSampleTypeNames,
                   strLabTest,
                   strLabTestNames,
                   strPensideTest,
                   strPensideTestNames,
                   strHACode,
                   strHACodeNames,
                   idfsUsingType,
                   strUsingType,
                   intHACode,
                   intRowStatus,
                   blnZoonotic,
                   blnSyndrome,
                   intOrder
            FROM @FilteredResults
           )
        SELECT TotalRowCount,
               idfsDiagnosis,
               strDefault,
               strName,
               strIDC10,
               strOIECode,
               strSampleType,
               strSampleTypeNames,
               strLabTest,
               strLabTestNames,
               strPensideTest,
               strPensideTestNames,
               strHACode,
               strHACodeNames,
               idfsUsingType,
               strUsingType,
               intHACode,
               intRowStatus,
               blnZoonotic,
               blnSyndrome,
               intOrder,
               TotalPages = (TotalRowCount / @pageSize) + IIF(TotalRowCount % @pageSize > 0, 1, 0),
               CurrentPage = @pageNo
        FROM CTEResults
        WHERE RowNum > @firstRec
              AND RowNum < @lastRec;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_VAS_MONITORING_SESSION_SUMMARY_GETList]...';


GO
-- ================================================================================================
-- Name: USP_VAS_MONITORING_SESSION_SUMMARY_GETList
--
-- Description:	Get monitoring session aggregate info list for the veterinary module monitoring 
-- session edit/enter use cases.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     05/07/2018 Initial release
-- Stephen Long     05/03/2019 Modified for API; removed maintenance flag.
-- Mike Kornegay	03/03/2022 Changed RowAction type to INT.
-- Mike Kornegay	06/28/2022 Added FarmMasterID
-- Mike Kornegay	11/02/2022 Added SpeciesTypeID
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_VAS_MONITORING_SESSION_SUMMARY_GETList] (
	@LanguageID NVARCHAR(50),
	@MonitoringSessionID BIGINT = NULL
	)
AS
BEGIN
	SET NOCOUNT ON;

	BEGIN TRY
		SELECT mss.idfMonitoringSessionSummary AS MonitoringSessionSummaryID,
			mss.idfMonitoringSession AS MonitoringSessionID,
			mss.idfFarm AS FarmID,
			f.idfFarmActual AS FarmMasterID,
			f.strFarmCode AS EIDSSFarmID,
			mss.idfSpecies AS SpeciesID,
			speciesType.idfsReference AS SpeciesTypeID,
			speciesType.name AS SpeciesTypeName,
			mss.idfsAnimalSex AS AnimalGenderTypeID,
			animalGenderType.name AS AnimalGenderTypeName,
			mss.intSampledAnimalsQty AS SampledAnimalsQuantity,
			mss.intSamplesQty AS SamplesQuantity,
			mss.datCollectionDate AS CollectionDate,
			mss.intPositiveAnimalsQty AS PositiveAnimalsQuantity,
			msss.idfsSampleType AS SampleTypeID,
			sampleType.name AS SampleTypeName,
			msss.blnChecked AS SampleCheckedIndicator,
			mssd.idfsDiagnosis AS DiseaseID,
			diseaseBaseReference.name AS DiseaseName,
			mssd.blnChecked AS DiseaseCheckedIndicator,
			mss.intRowStatus AS RowStatus,
			0 AS RowAction
		FROM dbo.tlbMonitoringSessionSummary mss
		LEFT JOIN dbo.tlbMonitoringSessionSummarySample msss
			ON msss.idfMonitoringSessionSummary = mss.idfMonitoringSessionSummary
				AND msss.intRowStatus = 0
		LEFT JOIN dbo.tlbMonitoringSessionSummaryDiagnosis mssd
			ON msss.idfMonitoringSessionSummary = mssd.idfMonitoringSessionSummary
				AND mssd.intRowStatus = 0
		LEFT JOIN dbo.tlbSpecies AS s
			ON s.idfSpecies = mss.idfSpecies
				AND s.intRowStatus = 0
		LEFT JOIN dbo.tlbFarm AS f
			ON f.idfFarm = mss.idfFarm
				AND f.intRowStatus = 0
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000086) AS speciesType
			ON speciesType.idfsReference = s.idfsSpeciesType
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000007) AS animalGenderType
			ON animalGenderType.idfsReference = mss.idfsAnimalSex
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) AS sampleType
			ON sampleType.idfsReference = msss.idfsSampleType
		LEFT JOIN dbo.trtDiagnosis AS diagnosisReference
			ON diagnosisReference.idfsDiagnosis = mssd.idfsDiagnosis
				AND diagnosisReference.intRowStatus = 0
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) AS diseaseBaseReference
			ON diseaseBaseReference.idfsReference = mssd.idfsDiagnosis
		WHERE (
				(mss.idfMonitoringSession = @MonitoringSessionID)
				OR (@MonitoringSessionID IS NULL)
				)
			--AND mss.intRowStatus = 0;
	END TRY

	BEGIN CATCH
		THROW;
	END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USP_VCTS_DetailedCollections_Copy]...';


GO
--*************************************************************
-- Name 				: USP_VCTS_DetailedCollections_Copy
-- Description			: Create replicas of the given idfVector ids
--          
-- Author               : Doug Albanese
-- Revision History
--	Name			Date			Change Detail
--  Doug Albanese	01/21/2020		Initial Creation
-- Doug Albanese	11/5/2020		Re-worked to get the copy to associate samples and tests for the new vector.
-- Doug Albanese	 10/20/2022		Create parameters to denote which parts of a vector, needs to be copyied.
--									Also changed the SP name to conform to standards
-- Mike Kornegay	01/26/2023		Correct return type to match APIPostReturn
--*************************************************************

ALTER PROCEDURE [dbo].[USP_VCTS_DetailedCollections_Copy]
(
    @idfVector							  BIGINT,
	@VectorData							  BIT = 0,
	@Samples							  BIT = 0,
	@Tests								  BIT = 0
)

AS 

BEGIN
	DECLARE @returnCode						INT = 0
	DECLARE	@returnMsg						NVARCHAR(max) = 'SUCCESS' 
	DECLARE @idfVectorNew					BIGINT

	DECLARE @SupressSelect TABLE
	( retrunCode INT,
		returnMsg NVARCHAR(200)
	)

	DECLARE @idfMaterials TABLE (
		idfMaterial BIGINT
	);

	DECLARE @idfTestings TABLE (
		idfTesting BIGINT,
		idfMaterial BIGINT
	);

	IF @Samples = 1
	  BEGIN
		 INSERT INTO @idfMaterials
			SELECT
			   DISTINCT idfMaterial
			FROM
			   tlbMaterial
			WHERE
			   idfVector = @idfVector
	  
		 IF @Tests = 1
			BEGIN
			   INSERT INTO @idfTestings
				  SELECT
					 DISTINCT idfTesting, idfMaterial
				  FROM
					 tlbTesting
				  WHERE
					 idfMaterial IN (
						   SELECT
							  idfMaterial
						   FROM
							  @idfMaterials
					 )
			END
	  END

	DECLARE @rowId							BIGINT
	DECLARE @idfMaterial					BIGINT
	DECLARE @idfMaterialNew					BIGINT
	DECLARE @idfVectorSurveillanceSession	BIGINT
	DECLARE @idfHostVector					BIGINT = NULL
	DECLARE @strVectorID					NVARCHAR(50)
	DECLARE @strFieldVectorID				NVARCHAR(50) = NULL
	DECLARE @idfLocation					BIGINT = NULL
	DECLARE @intElevation					BIGINT = NULL
	DECLARE @idfsSurrounding				BIGINT = NULL
	DECLARE @strGEOReferenceSources			NVARCHAR(500) = NULL
	DECLARE @idfCollectedByOffice			BIGINT
	DECLARE @idfCollectedByPerson			BIGINT = NULL
	DECLARE @datCollectionDateTime			DATETIME
	DECLARE @idfsCollectionMethod			BIGINT = NULL
	DECLARE @idfsBasisOfRecord				BIGINT = NULL
	DECLARE @idfsVectorType					BIGINT
	DECLARE @idfsVectorSubType				BIGINT
	DECLARE @intQuantity					INT
	DECLARE @idfsSex						BIGINT = NULL
	DECLARE @idfIdentIFiedByOffice			BIGINT = NULL
	DECLARE @idfIdentIFiedByPerson			BIGINT = NULL
	DECLARE @datIdentIFiedDateTime			DATETIME = NULL
	DECLARE @idfsIdentIFicationMethod		BIGINT = NULL
	DECLARE @idfObservation					BIGINT = NULL
	DECLARE @idfsDayPeriod					BIGINT = NULL
	DECLARE @strComment						NVARCHAR(500) = NULL
	DECLARE @idfsEctoparASitesCollected		BIGINT = NULL

	DECLARE @idfsSampleType 				BIGINT
	DECLARE @idfRootMaterial 				BIGINT = NULL
	DECLARE @idfParentMaterial 				BIGINT = NULL
	DECLARE @idfHuman 						BIGINT = NULL
	DECLARE @idfSpecies 					BIGINT = NULL
	DECLARE @idfAnimal 						BIGINT = NULL
	DECLARE @idfMonitoringSession 			BIGINT = NULL
	DECLARE @idfFieldCollectedByPerson 		BIGINT = NULL
	DECLARE @idfFieldCollectedByOffice 		BIGINT = NULL
	DECLARE @idfMainTest 					BIGINT = NULL
	DECLARE @datFieldCollectionDate 		DATETIME = NULL
	DECLARE @datFieldSentDate 				DATETIME = NULL
	DECLARE @strFieldBarcode 				NVARCHAR(200) = NULL
	DECLARE @strCalculatedCaseID 			NVARCHAR(200) = NULL
	DECLARE @strCalculatedHumanName 		NVARCHAR(700) = NULL
	DECLARE @idfSubdivision 				BIGINT = NULL	
	DECLARE @idfsSampleStatus 				BIGINT = NULL
	DECLARE @idfInDepartment 				BIGINT = NULL
	DECLARE @idfDestroyedByPerson 			BIGINT = NULL
	DECLARE @datEnteringDate 				DATETIME = NULL
	DECLARE @datDestructionDate 			DATETIME = NULL
	DECLARE @strBarcode 					NVARCHAR(200) = NULL
	DECLARE @strNote 						NVARCHAR(500) = NULL
	DECLARE @idfsSite 						BIGINT
	DECLARE @intRowStatus 					INT = 0
	DECLARE @idfSendToOffice 				BIGINT = NULL
	DECLARE @blnReadOnly 					BIT
	DECLARE @idfsBirdStatus 				BIGINT = NULL
	DECLARE @idfHumanCase 					BIGINT = NULL
	DECLARE @idfVetCase 					BIGINT = NULL
	DECLARE @datAccession 					DATETIME = NULL
	DECLARE @idfsAccessionCondition 		BIGINT = NULL
	DECLARE @strCondition 					NVARCHAR(200) = NULL
	DECLARE @idfAccesionByPerson 			BIGINT = NULL
	DECLARE @idfsDestructionMethod 			BIGINT = NULL
	DECLARE @idfsCurrentSite 				BIGINT = NULL
	DECLARE @idfsSampleKind 				BIGINT = NULL
	DECLARE @idfMarkedForDispositionByPerson BIGINT = NULL
	DECLARE @datOutOfRepositoryDate 		DATETIME = NULL
	DECLARE @strMaintenanceFlag 			NVARCHAR(20) = NULL

	DECLARE @idfTesting						BIGINT
	DECLARE @idfTestingNew					BIGINT
	DECLARE @idfsTestName					BIGINT = NULL
	DECLARE @idfsTestCategory				BIGINT = NULL
	DECLARE @idfsTestResult					BIGINT = NULL
	DECLARE @idfsTestStatus					BIGINT
	DECLARE @idfsDiagnosis					BIGINT
	DECLARE @idfBatchTest					BIGINT = NULL
	DECLARE @intTestNumber					INT = NULL
	DECLARE @datStartedDate					DATETIME = NULL
	DECLARE @datConcludedDate				DATETIME = NULL
	DECLARE @idfTestedByOffice				BIGINT = NULL
	DECLARE @idfTestedByPerson				BIGINT = NULL
	DECLARE @idfResultEnteredByOffice		BIGINT = NULL
	DECLARE @idfResultEnteredByPerson		BIGINT = NULL
	DECLARE @idfValidatedByOffice			BIGINT = NULL
	DECLARE @idfValidatedByPerson			BIGINT = NULL
	DECLARE @blnNonLaboratoryTest			BIT
	DECLARE @blnExternalTest				BIT = NULL
	DECLARE @idfPerformedByOffice			BIGINT = NULL
	DECLARE @datReceivedDate				DATETIME = NULL
	DECLARE @strContactPerson				NVARCHAR(200) = NULL

	BEGIN TRY
		 BEGIN
			   SELECT
					 @idfVectorSurveillanceSession = idfVectorSurveillanceSession, 
					 @idfHostVector = idfHostVector, 
					 @strFieldVectorID = strFieldVectorID, 
					 @idfLocation = idfLocation, 
					 @intElevation = intElevation, 
					 @idfsSurrounding = idfsSurrounding, 
					 @strGEOReferenceSources = strGEOReferenceSources, 
					 @idfCollectedByOffice = idfCollectedByOffice, 
					 @idfCollectedByPerson = idfCollectedByPerson, 
					 @datCollectionDateTime = datCollectionDateTime, 
					 @idfsCollectionMethod = idfsCollectionMethod, 
					 @idfsBASisOfRecord = idfsBASisOfRecord, 
					 @idfsVectorType = idfsVectorType, 
					 @idfsVectorSubType = idfsVectorSubType, 
					 @intQuantity = intQuantity, 
					 @idfsSex = idfsSex, 
					 @idfIdentIFiedByOffice = idfIdentIFiedByOffice, 
					 @idfIdentIFiedByPerson = idfIdentIFiedByPerson, 
					 @datIdentIFiedDateTime = datIdentIFiedDateTime, 
					 @idfsIdentIFicationMethod = idfsIdentIFicationMethod, 
					 @idfObservation = idfObservation,
					 @idfsDayPeriod = idfsDayPeriod,
					 @strComment = strComment,
					 @idfsEctoparASitesCollected = idfsEctoparASitesCollected
			   FROM
				  tlbVector
			   WHERE
					 idfVector = @idfVector

			   INSERT INTO @SupressSelect
			   EXEC dbo.USP_GBL_NEXTKEYID_GET 'tlbVector', @idfVectorNew OUTPUT

			   INSERT INTO @SupressSelect
			   EXEC dbo.USP_GBL_NextNumber_GET 'Vector Surveillance Vector', @strVectorID OUTPUT , NULL --N'AS Session'

			   INSERT INTO dbo.tlbVector
				  (
						idfVector, 
						idfVectorSurveillanceSession, 
						idfHostVector, 
						strVectorID, 
						strFieldVectorID, 
						idfLocation, 
						intElevation, 
						idfsSurrounding, 
						strGEOReferenceSources, 
						idfCollectedByOffice, 
						idfCollectedByPerson, 
						datCollectionDateTime, 
						idfsCollectionMethod, 
						idfsBasisOfRecord, 
						idfsVectorType, 
						idfsVectorSubType, 
						intQuantity, 
						idfsSex, 
						idfIdentIFiedByOffice, 
						idfIdentIFiedByPerson, 
						datIdentIFiedDateTime, 
						idfsIdentIFicationMethod, 
						idfObservation
						,idfsDayPeriod
						,strComment
						,idfsEctoparASitesCollected
				  )
			   VALUES
				  (
						@idfVectorNew, 
						@idfVectorSurveillanceSession, 
						@idfHostVector, 
						@strVectorID, 
						@strFieldVectorID, 
						@idfLocation, 
						@intElevation, 
						@idfsSurrounding, 
						@strGEOReferenceSources, 
						@idfCollectedByOffice, 
						@idfCollectedByPerson, 
						@datCollectionDateTime, 
						@idfsCollectionMethod, 
						@idfsBasisOfRecord, 
						@idfsVectorType, 
						@idfsVectorSubType, 
						@intQuantity, 
						@idfsSex, 
						@idfIdentifiedByOffice, 
						@idfIdentIFiedByPerson, 
						@datIdentIFiedDateTime, 
						@idfsIdentIFicationMethod, 
						@idfObservation,
						@idfsDayPeriod,
						@strComment,
						@idfsEctoparASitesCollected
			   )
		 END;
		
		 IF @Samples = 1
			BEGIN
			   WHILE EXISTS ( SELECT * FROM @idfMaterials )
				  BEGIN
					 SELECT
						TOP 1
						@rowId = idfMaterial
					 FROM 
						@idfMaterials

					 SELECT
						@idfsSampleType = idfsSampleType, 
						@idfRootMaterial = idfRootMaterial, 
						@idfParentMaterial = idfParentMaterial, 
						@idfHuman = idfHuman, 
						@idfSpecies = idfSpecies, 
						@idfAnimal = idfAnimal, 
						@idfMonitoringSession = idfMonitoringSession, 
						@idfFieldCollectedByPerson = idfFieldCollectedByPerson, 
						@idfFieldCollectedByOffice = idfFieldCollectedByOffice, 
						@idfMainTest = idfMainTest, 
						@datFieldCollectionDate = datFieldCollectionDate, 
						@datFieldSentDate = datFieldSentDate, 
						@strFieldBarcode = strFieldBarcode, 
						@strCalculatedCaseID = strCalculatedCaseID, 
						@strCalculatedHumanName = strCalculatedHumanName, 
						@idfVectorSurveillanceSession = idfVectorSurveillanceSession, 
						@idfVector = @idfVectorNew, 
						@idfSubdivision = idfSubdivision, 
						@idfsSampleStatus = idfsSampleStatus, 
						@idfInDepartment = idfInDepartment, 
						@idfDestroyedByPerson = idfDestroyedByPerson, 
						@datEnteringDate = datEnteringDate, 
						@datDestructionDate = datDestructionDate, 
						@strBarcode = strBarcode, 
						@strNote = strNote, 
						@idfsSite = idfsSite, 
						@intRowStatus = intRowStatus, 
						@idfSendToOffice = idfSendToOffice, 
						@blnReadOnly = blnReadOnly, 
						@idfsBirdStatus = idfsBirdStatus, 
						@idfHumanCase = idfHumanCase, 
						@idfVetCase = idfVetCase, 
						@datAccession = datAccession, 
						@idfsAccessionCondition = idfsAccessionCondition, 
						@strCondition = strCondition, 
						@idfAccesionByPerson = idfAccesionByPerson, 
						@idfsDestructionMethod = idfsDestructionMethod, 
						@idfsCurrentSite = idfsCurrentSite, 
						@idfsSampleKind = idfsSampleKind, 
						@idfMarkedForDispositionByPerson = idfMarkedForDispositionByPerson, 
						@datOutOfRepositoryDate = datOutOfRepositoryDate, 
						@strMaintenanceFlag = strMaintenanceFlag 
					 FROM
						tlbMaterial
					 WHERE
						idfMaterial = @rowId

					 INSERT INTO @SupressSelect
					 EXEC	dbo.USP_GBL_NEXTKEYID_GET 'tlbMaterial', @idfMaterialNew OUTPUT;

					 INSERT INTO @SupressSelect
					 EXEC	dbo.USP_GBL_NextNumber_GET 'Sample Field Barcode', @strBarcode OUTPUT, NULL 

					 --Update the temp table so that we will have the association between the new material and tests
					 UPDATE @idfTestings
					 SET idfMaterial = @idfMaterialNew
					 WHERE 
						idfMaterial = @rowid

					 INSERT INTO	dbo.tlbMaterial
						(						
								 idfMaterial, 
								 idfsSampleType, 
								 idfRootMaterial, 
								 idfParentMaterial, 
								 idfHuman, 
								 idfSpecies, 
								 idfAnimal, 
								 idfMonitoringSession, 
								 idfFieldCollectedByPerson, 
								 idfFieldCollectedByOffice, 
								 idfMainTest, 
								 datFieldCollectionDate, 
								 datFieldSentDate, 
								 strFieldBarcode, 
								 strCalculatedCaseID, 
								 strCalculatedHumanName, 
								 idfVectorSurveillanceSession, 
								 idfVector, 
								 idfSubdivision, 
								 idfsSampleStatus, 
								 idfInDepartment, 
								 idfDestroyedByPerson, 
								 datEnteringDate, 
								 datDestructionDate, 
								 strBarcode, 
								 strNote, 
								 idfsSite, 
								 intRowStatus, 
								 idfSendToOffice, 
								 blnReadOnly, 
								 idfsBirdStatus, 
								 idfHumanCase, 
								 idfVetCase, 
								 datAccession, 
								 idfsAccessionCondition, 
								 strCondition, 
								 idfAccesionByPerson, 
								 idfsDestructionMethod, 
								 idfsCurrentSite, 
								 idfsSampleKind, 
								 idfMarkedForDispositionByPerson, 
								 datOutOfRepositoryDate, 
								 strMaintenanceFlag 
						)
						VALUES
						(
								 @idfMaterialNew, 
								 @idfsSampleType, 
								 @idfRootMaterial, 
								 @idfParentMaterial, 
								 @idfHuman, 
								 @idfSpecies, 
								 @idfAnimal, 
								 @idfMonitoringSession, 
								 @idfFieldCollectedByPerson, 
								 @idfFieldCollectedByOffice, 
								 @idfMainTest, 
								 @datFieldCollectionDate, 
								 @datFieldSentDate, 
								 @strFieldBarcode, 
								 @strCalculatedCaseID, 
								 @strCalculatedHumanName, 
								 @idfVectorSurveillanceSession, 
								 @idfVectorNew, 
								 @idfSubdivision, 
								 @idfsSampleStatus, 
								 @idfInDepartment, 
								 @idfDestroyedByPerson, 
								 @datEnteringDate, 
								 @datDestructionDate, 
								 @strBarcode, 
								 @strNote, 
								 @idfsSite, 
								 @intRowStatus, 
								 @idfSendToOffice, 
								 @blnReadOnly, 
								 @idfsBirdStatus, 
								 @idfHumanCase, 
								 @idfVetCase, 
								 @datAccession, 
								 @idfsAccessionCondition, 
								 @strCondition, 
								 @idfAccesionByPerson, 
								 @idfsDestructionMethod, 
								 @idfsCurrentSite, 
								 @idfsSampleKind, 
								 @idfMarkedForDispositionByPerson, 
								 @datOutOfRepositoryDate, 
								 @strMaintenanceFlag 
						);
					
					 DELETE FROM @idfMaterials
					 WHERE idfMaterial = @rowId
				  END;
				  IF @Tests = 1
					 BEGIN
						WHILE EXISTS ( SELECT * FROM @idfTestings )
						   BEGIN
								 SELECT
									TOP 1
									@rowId = idfTesting
								 FROM 
									@idfTestings

								 SELECT
									@idfsTestName = idfsTestName, 
									@idfsTestCategory = idfsTestCategory, 
									@idfsTestResult = idfsTestResult, 
									@idfsTestStatus = idfsTestStatus, 
									@idfsDiagnosis = idfsDiagnosis, 
									@idfBatchTest = idfBatchTest, 
									@idfObservation = idfObservation, 
									@intTestNumber = intTestNumber, 
									@strNote = strNote, 
									@intRowStatus = intRowStatus, 
									@datStartedDate = datStartedDate, 
									@datConcludedDate = datConcludedDate, 
									@idfTestedByOffice = idfTestedByOffice, 
									@idfTestedByPerson = idfTestedByPerson, 
									@idfResultEnteredByOffice = idfResultEnteredByOffice, 
									@idfResultEnteredByPerson = idfResultEnteredByPerson, 
									@idfValidatedByOffice = idfValidatedByOffice, 
									@idfValidatedByPerson = idfValidatedByPerson, 
									@blnReadOnly = blnReadOnly, 
									@blnNonLaboratoryTest = blnNonLaboratoryTest, 
									@blnExternalTest = blnExternalTest, 
									@idfPerformedByOffice = idfPerformedByOffice, 
									@datReceivedDate = datReceivedDate, 
									@strContactPerson = strContactPerson, 
									@strMaintenanceFlag = strMaintenanceFlag
								 FROM
									tlbTesting
								 WHERE
									idfTesting = @rowId

								 INSERT INTO @SupressSelect
								 EXEC	dbo.USP_GBL_NEXTKEYID_GET 'tlbTesting', @idfTestingNew OUTPUT;

								 SELECT
									@idfMaterialNew = idfMaterial
								 FROM
									@idfTestings
								 WHERE
									idfTesting = @rowId

								 INSERT INTO	dbo.tlbTesting
								 (						
									   idfTesting, 
									   idfsTestName, 
									   idfsTestCategory, 
									   idfsTestResult, 
									   idfsTestStatus, 
									   idfsDiagnosis, 
									   idfMaterial, 
									   idfBatchTest, 
									   idfObservation, 
									   intTestNumber, 
									   strNote, 
									   intRowStatus, 
									   datStartedDate, 
									   datConcludedDate, 
									   idfTestedByOffice, 
									   idfTestedByPerson, 
									   idfResultEnteredByOffice, 
									   idfResultEnteredByPerson, 
									   idfValidatedByOffice, 
									   idfValidatedByPerson, 
									   blnReadOnly, 
									   blnNonLaboratoryTest, 
									   blnExternalTest, 
									   idfPerformedByOffice, 
									   datReceivedDate, 
									   strContactPerson, 
									   strMaintenanceFlag
								 )
								 VALUES
								 (
									   @idfTestingNew, 
									   @idfsTestName, 
									   @idfsTestCategory, 
									   @idfsTestResult, 
									   @idfsTestStatus, 
									   @idfsDiagnosis, 
									   @idfMaterialNew, 
									   @idfBatchTest, 
									   @idfObservation, 
									   @intTestNumber, 
									   @strNote, 
									   @intRowStatus, 
									   @datStartedDate, 
									   @datConcludedDate, 
									   @idfTestedByOffice, 
									   @idfTestedByPerson, 
									   @idfResultEnteredByOffice, 
									   @idfResultEnteredByPerson, 
									   @idfValidatedByOffice, 
									   @idfValidatedByPerson, 
									   @blnReadOnly, 
									   @blnNonLaboratoryTest, 
									   @blnExternalTest, 
									   @idfPerformedByOffice, 
									   @datReceivedDate, 
									   @strContactPerson, 
									   @strMaintenanceFlag
								 );
				
								 DELETE FROM @idfTestings
								 WHERE idfTesting = @rowId
						   END;
					 END
		 END
											
		IF @@TRANCOUNT > 0 AND @returnCode =0
			COMMIT
	END TRY

	BEGIN CATCH
			IF @@Trancount > 0
				ROLLBACK
				SET @returnCode = ERROR_NUMBER()
				SET @returnMsg = 
			   'ErrorNumber: ' + convert(varchar, ERROR_NUMBER() ) 
			   + ' ErrorSeverity: ' + convert(varchar, ERROR_SEVERITY() )
			   + ' ErrorState: ' + convert(varchar,ERROR_STATE())
			   + ' ErrorProcedure: ' + isnull(ERROR_PROCEDURE() ,'')
			   + ' ErrorLine: ' +  convert(varchar,isnull(ERROR_LINE() ,''))
			   + ' ErrorMessage: '+ ERROR_MESSAGE();
			   THROW;

	END CATCH

	SELECT 
		@returnCode AS ReturnCode
		,@returnMsg AS ReturnMessage

END
GO
PRINT N'Altering Procedure [Report].[USP_REP_HUM_MonthlyMorbidityMortality]...';


GO

-- This stored proc is to be used for the report:
--
--	Human Monthly Morbidity and Mortality
--
--  Mark Wilson updated for EIDSS7 standards
--  Srini Goli: renamed to maintain similarity object names.
--  Mark Wilson updated to sort diseases by intOrder 21July2020
--  Mark Wilson updated to update counts for labtested 12Jan2023
--  Stephen Long - added additional dates for 5455 - 30Jan2023

/*
--Example of a call of procedure:
EXEC report.USP_REP_HUM_MonthlyMorbidityMortality @LangID=N'en-US', @Year=2021,@Month=5,@IsDeceased=NULL --Morbidity
EXEC report.USP_REP_HUM_MonthlyMorbidityMortality @LangID=N'en', @Year=2017,@Month=2,@IsDeceased=1 --Mortality

*/

ALTER PROCEDURE [Report].[USP_REP_HUM_MonthlyMorbidityMortality]
(
    @LangID AS NVARCHAR(50),
    @Year AS INT,
    @Month AS INT = NULL,
    @IsDeceased AS BIT = NULL,
    @UseArchiveData AS BIT = 0 --if User selected Use Archive Data then 1
)
AS
DECLARE @FinalState AS BIGINT
IF (@IsDeceased = 1)
    SET @FinalState = 10035001 /*fstDeceased*/

DECLARE @StartDate AS DATETIME
DECLARE @EndDate AS DATETIME

IF @Month IS NULL
BEGIN
    SET @StartDate = CAST(CAST(@Year AS VARCHAR(4)) + '0101' AS DATETIME)
    SET @EndDate = DATEADD(ms, -2, DATEADD(YEAR, 1, @StartDate))
END
ELSE
BEGIN
    SET @StartDate = DATEADD(MONTH, @Month - 1, CAST(CAST(@Year AS VARCHAR(4)) + '0101' AS DATETIME))
    SET @EndDate = DATEADD(ms, -2, DATEADD(MONTH, 1, @StartDate))
END

SELECT tDiagnosisList.idfsDiagnosis AS DiagnosisID,
       tDiagnosisList.strIDC10 AS ICD10,
       tDiagnosisList.strDiseaseName AS Disease,
       Age0_1.intCount AS Age_1,
       Age1_4.intCount AS Age1_4,
       Age5_14.intCount AS Age5_14,
       Age15_19.intCount AS Age15_19,
       Age20_29.intCount AS Age20_29,
       Age30_54.intCount AS Age30_54,
       Age55_.intCount AS Age55_,
       fnTotal.intCount AS TotalCases,
       --tLabConfirmed.intCount AS TotalLabTested,
       tLabTested.intCount AS TotalLabTested,
       tTotalConfirmed.intCount AS TotalConfirmed
FROM
(
    SELECT tDiagnosis.idfsDiagnosis,
           tDiagnosis.strIDC10,
           rfDiagnosis.name AS strDiseaseName,
           rfDiagnosis.intOrder
    FROM dbo.trtDiagnosis AS tDiagnosis
        INNER JOIN report.FN_GBL_ReferenceRepair_GET(@LangID, 19000019 /*'rftDiagnosis' */) AS rfDiagnosis
            ON rfDiagnosis.idfsReference = tDiagnosis.idfsDiagnosis
               AND rfDiagnosis.intHACode & 2 > 0
               AND idfsUsingType = 10020001 /*Human */
) AS tDiagnosisList
    -- Get age statistics
    LEFT JOIN report.FN_REP_HumanCaseForAge_Get(@StartDate, @EndDate, 0, 1, @FinalState) AS Age0_1
        ON tDiagnosisList.idfsDiagnosis = Age0_1.idfsDiagnosis
    LEFT JOIN report.FN_REP_HumanCaseForAge_Get(@StartDate, @EndDate, 1, 4, @FinalState) AS Age1_4
        ON tDiagnosisList.idfsDiagnosis = Age1_4.idfsDiagnosis
    LEFT JOIN report.FN_REP_HumanCaseForAge_Get(@StartDate, @EndDate, 5, 14, @FinalState) AS Age5_14
        ON tDiagnosisList.idfsDiagnosis = Age5_14.idfsDiagnosis
    LEFT JOIN report.FN_REP_HumanCaseForAge_Get(@StartDate, @EndDate, 15, 19, @FinalState) AS Age15_19
        ON tDiagnosisList.idfsDiagnosis = Age15_19.idfsDiagnosis
    LEFT JOIN report.FN_REP_HumanCaseForAge_Get(@StartDate, @EndDate, 20, 29, @FinalState) AS Age20_29
        ON tDiagnosisList.idfsDiagnosis = Age20_29.idfsDiagnosis
    LEFT JOIN report.FN_REP_HumanCaseForAge_Get(@StartDate, @EndDate, 30, 54, @FinalState) AS Age30_54
        ON tDiagnosisList.idfsDiagnosis = Age30_54.idfsDiagnosis
    LEFT JOIN report.FN_REP_HumanCaseForAge_Get(@StartDate, @EndDate, 55, 2147483647, @FinalState) AS Age55_
        ON tDiagnosisList.idfsDiagnosis = Age55_.idfsDiagnosis
    LEFT JOIN report.FN_REP_HumanCaseForAge_Get(@StartDate, @EndDate, 0, 0, @FinalState) AS fnTotal
        ON tDiagnosisList.idfsDiagnosis = fnTotal.idfsDiagnosis
    LEFT JOIN
    (
        SELECT tHumanCase.idfsFinalDiagnosis AS idfsDiagnosis,
               COUNT(tHumanCase.idfHumanCase) AS intCount
        FROM dbo.tlbHumanCase AS tHumanCase
            INNER JOIN dbo.tlbHuman h
                LEFT OUTER JOIN dbo.tlbGeoLocation gl
                    ON h.idfCurrentResidenceAddress = gl.idfGeoLocation
                       AND gl.intRowStatus = 0
                ON tHumanCase.idfHuman = h.idfHuman
                   AND h.intRowStatus = 0 -- Added by MCW
            LEFT JOIN dbo.tlbGeoLocation cgl
                ON tHumanCase.idfPointGeoLocation = cgl.idfGeoLocation
                   AND cgl.intRowStatus = 0 -- added by MCW to ensure non-foreign address
        -- MCW changed to BETWEEN instead of >= and <
        -- SHL added additional dates for bug 5455.
        WHERE COALESCE(tHumanCase.datOnsetDate, tHumanCase.datFinalDiagnosisDate, tHumanCase.datFinalDiagnosisDate, tHumanCase.datNotificationDate, tHumanCase.datEnteredDate)
              BETWEEN @StartDate AND @EndDate
              AND tHumanCase.intRowStatus = 0
              AND ISNULL(tHumanCase.idfsFinalCaseStatus, tHumanCase.idfsInitialCaseStatus) = 350000000 /* Confirmed*/
              AND (
                      @FinalState IS NULL
                      OR tHumanCase.idfsFinalState = @FinalState
                  )
              AND (
                      ISNULL(cgl.idfsGeoLocationType, -1) <> 10036001 --Foreign Address
                      OR cgl.idfsCountry IS NULL
                      OR cgl.idfsCountry = 780000000
                  )
              AND (
                      @IsDeceased IS NULL
                      OR @IsDeceased = 0
                      OR (
                             @IsDeceased = 1
                             AND (
                                     tHumanCase.idfsFinalState = 10035001
                                     OR (tHumanCase.idfsOutcome = 10770000000 /*Died*/ * @IsDeceased)
                                 )
                         )
                  )
        GROUP BY tHumanCase.idfsFinalDiagnosis
    ) AS tTotalConfirmed
        ON tDiagnosisList.idfsDiagnosis = tTotalConfirmed.idfsDiagnosis
    --LEFT JOIN (			
    --			SELECT
    --				COALESCE(tHumanCase.idfsFinalDiagnosis, tHumanCase.idfsTentativeDiagnosis) AS idfsDiagnosis,
    --				COUNT(tHumanCase.idfHumanCase) AS intCount
    --			FROM dbo.tlbHumanCase AS tHumanCase
    --			WHERE COALESCE(tHumanCase.datTentativeDiagnosisDate, tHumanCase.datNotificationDate, tHumanCase.datEnteredDate) BETWEEN @StartDate AND @EndDate
    --			AND tHumanCase.intRowStatus = 0
    --			AND tHumanCase.blnLabDiagBasis = 1
    --			AND (@FinalState IS NULL OR tHumanCase.idfsFinalState = @FinalState)
    --			GROUP BY COALESCE(tHumanCase.idfsFinalDiagnosis, tHumanCase.idfsTentativeDiagnosis)
    --		  ) AS tLabConfirmed ON tDiagnosisList.idfsDiagnosis = tLabConfirmed.idfsDiagnosis				
    LEFT JOIN
    (
        SELECT COALESCE(tHumanCase.idfsFinalDiagnosis, tHumanCase.idfsTentativeDiagnosis) AS idfsDiagnosis,
               COUNT(tHumanCase.idfHumanCase) AS intCount
        FROM dbo.tlbHumanCase AS tHumanCase
            INNER JOIN tlbHuman h
                LEFT OUTER JOIN tlbGeoLocation gl
                    ON h.idfCurrentResidenceAddress = gl.idfGeoLocation
                       AND gl.intRowStatus = 0
                ON tHumanCase.idfHuman = h.idfHuman
                   AND h.intRowStatus = 0 -- Added by MCW
            LEFT JOIN dbo.tlbGeoLocation cgl
                ON tHumanCase.idfPointGeoLocation = cgl.idfGeoLocation
                   AND cgl.intRowStatus = 0 -- added by MCW to ensure non-foreign address

        WHERE (
                  DATEPART(
                              MONTH,
                              COALESCE(ISNULL(tHumanCase.datOnsetDate, tHumanCase.datFinalDiagnosisDate), ISNULL(
                                                                                                                    tHumanCase.datFinalDiagnosisDate,
                                                                                                                    tHumanCase.datTentativeDiagnosisDate
                                                                                                                ), ISNULL(
                                                                                                                             tHumanCase.datTentativeDiagnosisDate,
                                                                                                                             tHumanCase.datNotificationDate
                                                                                                                         ), ISNULL(
                                                                                                                                      tHumanCase.datNotificationDate,
                                                                                                                                      tHumanCase.datEnteredDate
                                                                                                                                  ))
                          ) = @Month
                  OR @Month IS NULL
              )
              AND DATEPART(
                              YEAR,
                              COALESCE(ISNULL(tHumanCase.datOnsetDate, tHumanCase.datFinalDiagnosisDate), ISNULL(
                                                                                                                    tHumanCase.datFinalDiagnosisDate,
                                                                                                                    tHumanCase.datTentativeDiagnosisDate
                                                                                                                ), ISNULL(
                                                                                                                             tHumanCase.datTentativeDiagnosisDate,
                                                                                                                             tHumanCase.datNotificationDate
                                                                                                                         ), ISNULL(
                                                                                                                                      tHumanCase.datNotificationDate,
                                                                                                                                      tHumanCase.datEnteredDate
                                                                                                                                  ))
                          ) = @Year
              AND tHumanCase.intRowStatus = 0
              AND (
                      ISNULL(cgl.idfsGeoLocationType, -1) <> 10036001 --Foreign Address
                      OR cgl.idfsCountry IS NULL
                      OR cgl.idfsCountry = 780000000
                  )
              AND tHumanCase.idfsYNTestsConducted = 10100001 -- Added by MCW to check that tests were conducted.
              AND (
                      @IsDeceased IS NULL
                      OR @IsDeceased = 0
                      OR ( --TODO: comment if necessary - start
                             @IsDeceased = 1
                             AND
                             --TODO: comment if necessary - end
                             (
                                 tHumanCase.idfsFinalState = 10035001 /*Dead*/ --TODO: uncomment if necessary--* @IsDeceased + 10035002 /*Alive*/ * (1 - @IsDeceased)
                                 OR ( -- TODO: uncomment if not necessary - start
                                 --(	tHumanCase.idfsFinalState is null 
                                 --	or tHumanCase.idfsFinalState <> 10035001 /*Dead*/ --TODO: uncomment if necessary--* @IsDeceased + 10035002 /*Alive*/ * (1 - @IsDeceased)
                                 --)
                                 -- and 
                                 -- TODO: uncomment if not necessary - end
                                 tHumanCase.idfsOutcome = 10770000000 /*Died*/ * @IsDeceased --TODO: uncomment if necessary-- + 10760000000 /*Recovered*/ * (1 - @IsDeceased)
                                    )
                             )
                         )
                  )
              AND COALESCE(tHumanCase.idfsFinalCaseStatus, tHumanCase.idfsInitialCaseStatus, 370000000) IN ( 350000000, /*Confirmed*/
                                                                                                             360000000, /*Probable*/
                                                                                                             380000000  /*Suspect*/
                                                                                                           )
        GROUP BY COALESCE(tHumanCase.idfsFinalDiagnosis, tHumanCase.idfsTentativeDiagnosis)
    ) AS tLabTested
        ON tDiagnosisList.idfsDiagnosis = tLabTested.idfsDiagnosis
ORDER BY tDiagnosisList.strDiseaseName
OPTION (RECOMPILE)
GO
PRINT N'Creating Procedure [dbo].[USP_ADMIN_DEPARTMENTS_SET]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
-- ================================================================================================
-- Name: USP_ADMIN_DEPARTMENTS_SET
--
-- Description: Adds or updates a department in an organization.
--
-- Author: Ricky Moss
-- 
-- Change Log:
-- Name 				Date       Description
-- -------------------- ---------- ---------------------------------------------------------------
-- Stephen Long		    12/13/2022 Initial release for data auditing for SAUC30 and 31.
--
-- Testing Code:
/*
DECLARE	@return_value int

EXEC	@return_value = [dbo].[USP_ADMIN_DEPARTMENTS_SET]
		@LanguageID = N'en-US',
		@DepartmentID = NULL,
		@OrganizationID = 48120000000,
		@DefaultName = N'DEP199',
		@NationalName = N'DEP1100',
		@DepartmentNameTypeID = NULL,
		@AuditUserName = N'rykermase',
		@DataAuditEventID = NULL, 
		@EIDSSObjectID = NULL, 
		@RowAction = NULL - values are R for read, I for insert, U for update and D for delete.

SELECT	'Return Value' = @return_value
*/
-- ================================================================================================
CREATE PROCEDURE [dbo].[USP_ADMIN_DEPARTMENTS_SET]
(
    @LanguageID NVARCHAR(50),
    @DepartmentID BIGINT = NULL,
    @DefaultName NVARCHAR(200),
    @NationalName NVARCHAR(200),
    @OrganizationID BIGINT,
    @DepartmentNameTypeID BIGINT,
    @Order INT = 0,
    @AuditUserName NVARCHAR(200) = NULL,
    @DataAuditEventID BIGINT = NULL,
    @EIDSSObjectID NVARCHAR(200),
    @RowStatus INT = 0
)
AS
BEGIN
    DECLARE @ReturnMessage VARCHAR(MAX) = 'SUCCESS',
            @ReturnCode INT = 0,
                                                                      -- Data audit
            @AuditUserID BIGINT = NULL,
            @AuditSiteID BIGINT = NULL,
            @CustomizationPackageID BIGINT,
            @ObjectTypeID BIGINT = 10017016,                          -- Department
            @ObjectID BIGINT = @DepartmentID,
            @ObjectTableID BIGINT = 50815890000000,                   -- tlbDepartment
            @ObjectBaseReferenceTableID BIGINT = 75820000000,         -- trtBaseReference
            @ObjectStringNameTranslationTableID BIGINT = 75990000000; -- trtStringNameTranslation

    DECLARE @DepartmentAfterEdit TABLE
    (
        DepartmentID BIGINT,
        DepartmentNameBaseReferenceID BIGINT,
        OrganizationID BIGINT
    );
    DECLARE @DepartmentBeforeEdit TABLE
    (
        DepartmentID BIGINT,
        DepartmentNameBaseReferenceID BIGINT,
        OrganizationID BIGINT
    );

    BEGIN TRY
        SET @AuditUserName = ISNULL(@AuditUserName, '');

        -- Data audit
        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = userInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo;
        -- End data audit

        IF @RowStatus = 1 -- Soft Delete
        BEGIN
            IF @DepartmentNameTypeID IS NULL
            BEGIN
                SELECT @DepartmentNameTypeID = idfsDepartmentName
                FROM dbo.tlbDepartment
                WHERE idfDepartment = @DepartmentID;
            END

            UPDATE dbo.tlbDepartment
            SET intRowStatus = @RowStatus,
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUserName
            WHERE idfDepartment = @DepartmentID;

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailDelete
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   @DepartmentID,
                   @AuditUserName,
                   @EIDSSObjectID;
            -- End data audit

            UPDATE dbo.trtBaseReference
            SET intRowStatus = @RowStatus,
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUserName
            WHERE idfsBaseReference = @DepartmentNameTypeID
                  AND intRowStatus = 0;

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailDelete
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   @DepartmentID,
                   @AuditUserName,
                   @EIDSSObjectID;
            -- End data audit

            UPDATE dbo.trtStringNameTranslation
            SET intRowStatus = @RowStatus,
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUserName
            WHERE idfsBaseReference = @DepartmentNameTypeID;

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailDelete
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectStringNameTranslationTableID,
                   @DepartmentID,
                   @AuditUserName,
                   @EIDSSObjectID;
        -- End data audit
        END
        ELSE
        BEGIN
            IF
            (
                SELECT COUNT(b.idfsReference)
                FROM dbo.FN_GBL_ReferenceRepair_GET(@LanguageID, 19000164) b
                    INNER JOIN dbo.tlbDepartment d
                        ON d.idfsDepartmentName = b.idfsReference
                WHERE b.strDefault = @DefaultName
                      AND d.intRowStatus = 0
                      AND d.idfOrganization = @OrganizationID
                      AND (
                              (
                                  d.idfDepartment <> @DepartmentID
                                  AND @DepartmentID IS NOT NULL
                                  AND @DepartmentID > 0
                              ) -- Update
                              OR (
                                     @DepartmentID IS NULL
                                     OR @DepartmentID < 0
                                 )
                          ) -- Insert
            ) > 0
            BEGIN
                SELECT @ReturnMessage = 'DOES EXIST';
            END

            IF @ReturnMessage <> 'DOES EXIST'
            BEGIN
                IF @DepartmentID IS NULL
                   OR @DepartmentID < 0
                BEGIN
                    IF (UPPER(@LanguageID) = 'EN-US' AND ISNULL(@DefaultName, N'') = N'')
                    BEGIN
                        SET @DefaultName = @NationalName;
                    END

                    EXECUTE dbo.USSP_GBL_BASEREFERENCE_SET @DepartmentNameTypeID OUTPUT,
                                                            19000164,
                                                            @LanguageID,
                                                            @DefaultName,
                                                            @NationalName,
                                                            0,
                                                            @Order,
                                                            0,
                                                            @AuditUserName,
                                                            @DataAuditEventID,
                                                            @EIDSSObjectID;

                    EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tlbDepartment', @DepartmentID OUTPUT;

                    INSERT INTO dbo.tlbDepartment
                    (
                        idfDepartment,
                        idfsDepartmentName,
                        idfOrganization,
                        strReservedAttribute,
                        intRowStatus,
                        rowguid,
                        SourceSystemNameID,
                        SourceSystemKeyValue,
                        AuditCreateUser,
                        AuditCreateDTM
                    )
                    VALUES
                    (@DepartmentID,
                     @DepartmentNameTypeID,
                     @OrganizationID,
                     dbo.FN_GBL_DATACHANGE_INFO(@AuditUserName),
                     0  ,
                     NEWID(),
                     10519001,
                     N'[{"idfDepartment":' + CAST(@DepartmentID AS NVARCHAR(300)) + '}]',
                     @AuditUserName,
                     GETDATE()
                    );

                    -- Data audit
                    INSERT INTO dbo.tauDataAuditDetailCreate
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfObject,
                        SourceSystemNameID,
                        SourceSystemKeyValue,
                        AuditCreateUser,
                        strObject
                    )
                    VALUES
                    (@DataAuditEventID,
                     @ObjectTableID,
                     @DepartmentID,
                     10519001,
                     '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
                     + CAST(@ObjectTableID AS NVARCHAR(300)) + '}]',
                     @AuditUserName,
                     @EIDSSObjectID
                    );
                -- End data audit
                END
                ELSE
                BEGIN
                    SELECT @DepartmentNameTypeID =
                    (
                        SELECT idfsDepartmentName
                        FROM dbo.tlbDepartment
                        WHERE idfDepartment = @DepartmentID
                    );

                    EXECUTE dbo.USSP_GBL_BASEREFERENCE_SET @DepartmentNameTypeID,
                                                            19000164,
                                                            @LanguageID,
                                                            @DefaultName,
                                                            @NationalName,
                                                            0,
                                                            @Order,
                                                            0,
                                                            @AuditUserName,
                                                            @DataAuditEventID,
                                                            @EIDSSObjectID;

                    -- Data audit
                    INSERT INTO @DepartmentBeforeEdit
                    (
                        DepartmentID,
                        DepartmentNameBaseReferenceID,
                        OrganizationID
                    )
                    SELECT idfDepartment,
                           idfsDepartmentName,
                           idfOrganization
                    FROM dbo.tlbDepartment
                    WHERE idfDepartment = @DepartmentID;
                    -- End data audit

                    UPDATE dbo.tlbDepartment
                    SET idfsDepartmentName = @DepartmentNameTypeID,
                        strReservedAttribute = dbo.FN_GBL_DATACHANGE_INFO(@AuditUserName),
                        AuditUpdateUser = @AuditUserName,
                        AuditUpdateDTM = GETDATE()
                    WHERE idfDepartment = @DepartmentID;

                    -- Data audit
                    INSERT INTO @DepartmentAfterEdit
                    (
                        DepartmentID,
                        DepartmentNameBaseReferenceID,
                        OrganizationID
                    )
                    SELECT idfDepartment,
                           idfsDepartmentName,
                           idfOrganization
                    FROM dbo.tlbDepartment
                    WHERE idfDepartment = @DepartmentID;

                    INSERT INTO dbo.tauDataAuditDetailUpdate
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfColumn,
                        idfObject,
                        idfObjectDetail,
                        strOldValue,
                        strNewValue,
                        AuditCreateUser,
                        strObject
                    )
                    SELECT @DataAuditEventID,
                           @ObjectTableID,
                           50815910000000,
                           a.DepartmentID,
                           NULL,
                           b.DepartmentNameBaseReferenceID,
                           a.DepartmentNameBaseReferenceID,
                           @AuditUserName,
                           @EIDSSObjectID
                    FROM @DepartmentAfterEdit AS a
                        FULL JOIN @DepartmentBeforeEdit AS b
                            ON a.DepartmentID = b.DepartmentID
                    WHERE (a.DepartmentNameBaseReferenceID <> b.DepartmentNameBaseReferenceID)
                          OR (
                                 a.DepartmentNameBaseReferenceID IS NOT NULL
                                 AND b.DepartmentNameBaseReferenceID IS NULL
                             )
                          OR (
                                 a.DepartmentNameBaseReferenceID IS NULL
                                 AND b.DepartmentNameBaseReferenceID IS NOT NULL
                             );
                    -- End data audit
                END
            END
        END;

        SELECT @ReturnCode ReturnCode,
               @ReturnMessage ReturnMessage,
               @DepartmentID KeyId,
               'DepartmentID' KeyName;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK;

        THROW;
    END CATCH
END
GO

PRINT N'Altering procedure USP_ADMIN_FF_Templates_Get'
GO

-- ================================================================================================
-- Name: USP_ADMIN_FF_Templates_GET
-- Description: Return list of Templates
--          
-- Revision History:
-- Name            Date			Change
-- --------------- ----------	--------------------------------------------------------------------
-- Kishore Kodru    11/28/2018	Initial release for new API.
-- Stephen Long     10/02/2019	Removed commit transaction.
-- Doug Albanese	09/21/2021	Added Disease Id for filtering by Outbreak/FFD connection
-- Doug Albanese	09/29/2021	Corrected the joins to return query by idfsFormType
-- Mark Wilson		09/30/2021	Updated to use FN_GBL_ReferenceRepair_GET
-- Doug Albanese	10/28/2021	Removed disease query
-- Doug Albanese	01/20/2023	Added the determinate value on return
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_FF_Templates_GET]
(
	@LangID								NVARCHAR(50)
	,@idfsFormTemplate					BIGINT = NULL
	,@idfsFormType						BIGINT = NULL
	,@idfOUtbreak					    BIGINT = NULL
)	
AS
BEGIN	
	SET NOCOUNT ON;

	BEGIN TRY
	  
	  IF @idfOUtbreak IS NULL
		 BEGIN
			   SELECT
				  DISTINCT
				  FT.idfsFormTemplate,
				  FT.idfsFormType,
				  FT.blnUNI,
				  FT.rowguid,
				  FT.intRowStatus,
				  FT.strNote,
				  RF.strDefault AS DefaultName,
				  RF.[name] AS NationalName,
				  RF.[LongName] AS NationalLongName,
				  NULL AS idfsDiagnosisOrDiagnosisGroup
		
			  FROM [dbo].[ffFormTemplate] FT
			  INNER JOIN dbo.FN_GBL_ReferenceRepair_GET(@LangID, 19000033) RF ON FT.idfsFormTemplate = RF.idfsReference
			  --LEFT JOIN dbo.ffDeterminantValue DV ON DV.idfsFormTemplate = FT.idfsFormTemplate
			  WHERE ((FT.idfsFormTemplate = @idfsFormTemplate ) OR (@idfsFormTemplate IS NULL))
			  AND ((FT.idfsFormType  = @idfsFormType) OR (@idfsFormType  IS NULL))	  
			  AND (FT.intRowStatus = 0)
			  ORDER BY NationalName;
		 END
	  ELSE
		 BEGIN
			  SELECT 
				  DISTINCT
				  FT.idfsFormTemplate,
				  FT.idfsFormType,
				  FT.blnUNI,
				  FT.rowguid,
				  FT.intRowStatus,
				  FT.strNote,
				  RF.strDefault AS DefaultName,
				  RF.[name] AS NationalName,
				  RF.[LongName] AS NationalLongName,
				  DV.idfsBaseReference AS idfsDiagnosisOrDiagnosisGroup
		
			  FROM [dbo].[ffFormTemplate] FT
			  LEFT JOIN dbo.FN_GBL_ReferenceRepair_GET(@LangID, 19000033) RF ON FT.idfsFormTemplate = RF.idfsReference
			  LEFT JOIN dbo.ffDeterminantValue DV ON DV.idfsFormTemplate = FT.idfsFormTemplate
			  WHERE ((FT.idfsFormTemplate = @idfsFormTemplate ) OR (@idfsFormTemplate IS NULL))
			  AND ((FT.idfsFormType  = @idfsFormType) OR (@idfsFormType  IS NULL))	  
			  AND (FT.intRowStatus = 0)
			  ORDER BY NationalName;
		 END

	END TRY 
	BEGIN CATCH
		THROW;
	END CATCH;
END
GO

PRINT N'Updating USP_VCTS_SURVEILLANCE_SESSION_GETList'
GO

-- ================================================================================================
-- Name: USP_VCTS_SURVEILLANCE_SESSION_GetList
--
-- Description: Gets a list of vector surveillance sessions filtered by various criteria.
--          
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     12/31/2018 Added additional search parameters
-- Maheshwar Deo	03/08/2019 Fixed filter for @DiseaseID
-- Stephen Long     07/19/2019 Added summary disease ID and join.
-- Stephen Long     01/22/2020 Converted site ID to site list for site filtration.
-- Stephen Long     02/19/2020 Added non-configurable site filtration rules.
-- Stephen Long     02/26/2020 Corrected all criteria where clauses; returned incorrect results.
-- Stephen Long     03/25/2020 Added if/else for first-level and second-level site types to bypass 
--                             non-configurable rules.
-- Stephen Long     05/18/2020 Added disease filtration rules from use case SAUC62.
-- Stephen Long     06/18/2020 Added where criteria to the query when no site filtration is 
--                             required.
-- Stephen Long     07/07/2020 Added trim to EIDSS identifier like criteria.
-- Doug Albanese	10/16/2020 Added Outbreak's EIDSS ID
-- Doug Albanese	10/16/2020 Added Outbreak's Session Start Date
-- Doug Albanese	11/11/2020 Modified secondary filtering
-- Doug Albanese	11/20/2020 Added dblAlignment (Direction)
-- Stephen Long     11/27/2020 Added configurable site filtration rules.
-- Stephen Long     12/13/2020 Added apply configurable filtration indicator parameter.
-- Stephen Long     12/24/2020 Modified join on disease filtration default role rule.
-- Stephen Long     12/29/2020 Added intRowStatus check on disease filtration insert rules.
-- Doug Albanese	01/21/2021 Change the WHERE claus to detect shared vector types so that it is 
--                             no so strict on records being returned.
-- Stephen Long     04/02/2021 Added updated pagination and location hierarchy.
-- Mike Kornegay	11/05/2021 Added group by surveillance session id to filtration 
--							   intermediate results so final cte join is correct.
-- Stephen Long     11/05/2021 Added vector type ID's and disease ID's to the query.
-- Stephen Long     06/03/2022 Updated to point default access rules to base reference.
-- Mike Kornegay	07/04/2022 Fixed sorting by pointing to correct location tables in final query.
-- Mike Kornegay	07/05/2022 Fixed search by disease and vector type.
-- Mike Kornegay	08/03/2022 Add order by in final select and change location tables back to 
--                             inner join.
-- Stephen Long     09/22/2022 Add check for "0" page size.  If "0", then set to 1.
-- Mike Kornegay	10/06/2022 Move order by back to CTE row number partition for performance and 
--                             correct date clauses.
-- Stephen Long     01/09/2023 Updated for site filtration queries.
-- Mike Kornegay	01/31/2023 Correct joins in final result query.
--
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_VCTS_SURVEILLANCE_SESSION_GetList]
(
    @LanguageID NVARCHAR(50),
    @SessionID NVARCHAR(200) = NULL,
    @FieldSessionID NVARCHAR(200) = NULL,
    @StatusTypeID BIGINT = NULL,
    @VectorTypeID NVARCHAR(MAX) = NULL,
    @SpeciesTypeID BIGINT = NULL,
    @DiseaseID BIGINT = NULL,
    @DiseaseGroupID NVARCHAR(MAX) = NULL,
    @AdministrativeLevelID BIGINT = NULL,
    @StartDateFrom DATETIME = NULL,
    @StartDateTo DATETIME = NULL,
    @EndDateFrom DATETIME = NULL,
    @EndDateTo DATETIME = NULL,
    @OutbreakKey BIGINT = NULL,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT,
    @UserEmployeeID BIGINT,
    @ApplySiteFiltrationIndicator BIT = 0,
    @SortColumn NVARCHAR(30) = 'SessionID',
    @SortOrder NVARCHAR(4) = 'DESC',
    @PageNumber INT = 1,
    @PageSize INT = 10
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @firstRec INT;
    DECLARE @lastRec INT;
    SET @firstRec = (@PageNumber - 1) * @PageSize
    SET @lastRec = (@PageNumber * @PageSize + 1);

    DECLARE @AdministrativeLevelNode AS HIERARCHYID;

    DECLARE @FinalResults TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );

    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL, INDEX IDX_ID (ID
                                                             ));
    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );

    BEGIN TRY
        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        IF @PageSize = 0
        BEGIN
            SET @PageSize = 1;
        END

        IF @AdministrativeLevelID IS NOT NULL
        BEGIN
            SELECT @AdministrativeLevelNode = node
            FROM dbo.gisLocation
            WHERE idfsLocation = @AdministrativeLevelID;
        END;

        -- ========================================================================================
        -- NO CONFIGURABLE FILTRATION RULES APPLIED
        --
        -- For first and second level sites, do not apply any configurable filtration rules.
        -- ========================================================================================
        IF @ApplySiteFiltrationIndicator = 0
        BEGIN
            INSERT INTO @Results
            SELECT vss.idfVectorSurveillanceSession,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbVectorSurveillanceSession vss
                LEFT JOIN tlbGeoLocation gl
                    ON gl.idfGeoLocation = vss.idfLocation
                       AND gl.intRowStatus = 0
                LEFT JOIN dbo.gisLocation g
                    ON g.idfsLocation = gl.idfsLocation
                CROSS APPLY
            (
                SELECT dbo.FN_VCTS_VSSESSION_VECTORTYPEIDS_GET(vss.idfVectorSurveillanceSession) vectorTypeIDs
            ) vectorTypeIDs
                LEFT JOIN dbo.tlbVector v
                    ON v.idfVectorSurveillanceSession = vss.idfVectorSurveillanceSession
                       AND v.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000141) vectorSubType
                    ON vectorSubType.idfsReference = v.idfsVectorSubType
                CROSS APPLY
            (
                SELECT dbo.FN_VCTS_VSSESSION_DIAGNOSESIDS_GET(vss.idfVectorSurveillanceSession, @LanguageID) diseaseIDs
            ) diseaseIDs
            WHERE vss.intRowStatus = 0
                  AND (
                          vss.idfsVectorSurveillanceStatus = @StatusTypeID
                          OR @StatusTypeID IS NULL
                      )
                  AND (
                          CHARINDEX(@VectorTypeID, vectorTypeIDs) > 0
                          OR @VectorTypeID IS NULL
                      )
                  AND (
                          vectorSubType.idfsReference = @SpeciesTypeID
                          OR @SpeciesTypeID IS NULL
                      )
                  AND (
                          g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                          OR @AdministrativeLevelID IS NULL
                      )
                  AND (
                          vss.idfOUtBreak = @OutbreakKey
                          OR @OutbreakKey IS NULL
                      )
                  AND (
                          (
                              (
                                  CAST(vss.datStartDate AS DATE) >= @StartDateFrom
                                  AND @StartDateTo IS NULL
                              )
                              OR (
                                     CAST(vss.datStartDate AS DATE) <= @StartDateTo
                                     AND @StartDateFrom IS NULL
                                 )
                              OR (CAST(vss.datStartDate AS DATE)
                  BETWEEN @StartDateFrom AND @StartDateTo
                                 )
                          )
                          OR (
                                 @StartDateFrom IS NULL
                                 AND @StartDateTo IS NULL
                             )
                      )
                  AND (
                          (
                              (
                                  CAST(vss.datCloseDate AS DATE) >= @EndDateFrom
                                  AND @EndDateTo IS NULL
                              )
                              OR (
                                     CAST(vss.datCloseDate AS DATE) <= @EndDateTo
                                     AND @EndDateFrom IS NULL
                                 )
                              OR (CAST(vss.datCloseDate AS DATE)
                  BETWEEN @EndDateFrom AND @EndDateTo
                                 )
                          )
                          OR (
                                 @EndDateFrom IS NULL
                                 AND @EndDateTo IS NULL
                             )
                      )
                  AND (
                          vss.strSessionID LIKE '%' + TRIM(@SessionID) + '%'
                          OR @SessionID IS NULL
                      )
                  AND (
                          vss.strFieldSessionID LIKE '%' + TRIM(@FieldSessionID) + '%'
                          OR @FieldSessionID IS NULL
                      )
                  AND (
                          CHARINDEX(CAST(@DiseaseID AS NVARCHAR(2000)), diseaseIDs) > 0
                          OR @DiseaseID IS NULL
                      )
            GROUP BY vss.idfVectorSurveillanceSession;
        END
        ELSE
        BEGIN
            DECLARE @FilteredResults TABLE
            (
                ID BIGINT NOT NULL,
                ReadPermissionIndicator BIT NOT NULL,
                AccessToPersonalDataPermissionIndicator BIT NOT NULL,
                AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
                WritePermissionIndicator BIT NOT NULL,
                DeletePermissionIndicator BIT NOT NULL, INDEX IDX_ID (ID
                                                                     ));
            -- =======================================================================================
            -- DEFAULT CONFIGURABLE FILTRATION RULES
            --
            -- Apply non-configurable filtration rules for third level sites.
            -- =======================================================================================
            DECLARE @RuleActiveStatus INT = 0;
            DECLARE @AdministrativeLevelTypeID INT;
            DECLARE @OrganizationAdministrativeLevelNode HIERARCHYID;
            DECLARE @DefaultAccessRules AS TABLE
            (
                AccessRuleID BIGINT NOT NULL,
                ActiveIndicator INT NOT NULL,
                ReadPermissionIndicator BIT NOT NULL,
                AccessToPersonalDataPermissionIndicator BIT NOT NULL,
                AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
                WritePermissionIndicator BIT NOT NULL,
                DeletePermissionIndicator BIT NOT NULL,
                AdministrativeLevelTypeID INT NULL
            );

            INSERT INTO @DefaultAccessRules
            SELECT AccessRuleID,
                   a.intRowStatus,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator,
                   a.AdministrativeLevelTypeID
            FROM dbo.AccessRule a
            WHERE DefaultRuleIndicator = 1;

            --
            -- Session data shall be available to all sites' organizations connected to the particular 
            -- session.
            --
            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
            WHERE AccessRuleID = 10537019;

            IF @RuleActiveStatus = 0
            BEGIN
                -- Collected and identified by organizations for any vectors/pools
                INSERT INTO @FilteredResults
                SELECT vss.idfVectorSurveillanceSession,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbVectorSurveillanceSession vss
                    INNER JOIN dbo.tlbVector v
                        ON v.idfVectorSurveillanceSession = vss.idfVectorSurveillanceSession
                           AND v.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537019
                WHERE vss.intRowStatus = 0
                      AND (
                              v.idfCollectedByOffice = @UserOrganizationID
                              OR v.idfIdentifiedByOffice = @UserOrganizationID
                          );

                -- Collected by and sent to organizations for any samples
                INSERT INTO @FilteredResults
                SELECT MAX(m.idfVectorSurveillanceSession),
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbMaterial m
                    INNER JOIN dbo.tlbVectorSurveillanceSession vss
                        ON vss.idfVectorSurveillanceSession = m.idfVectorSurveillanceSession
                           AND vss.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537019
                WHERE m.intRowStatus = 0
                      AND (
                              m.idfFieldCollectedByOffice = @UserOrganizationID
                              OR m.idfSendToOffice = @UserOrganizationID
                          )
                GROUP BY m.idfVectorSurveillanceSession,
                         a.ReadPermissionIndicator,
                         a.AccessToPersonalDataPermissionIndicator,
                         a.AccessToGenderAndAgeDataPermissionIndicator,
                         a.WritePermissionIndicator,
                         a.DeletePermissionIndicator;

                -- Tested by organization for any laboratory test
                INSERT INTO @FilteredResults
                SELECT MAX(m.idfVectorSurveillanceSession),
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbMaterial m
                    INNER JOIN dbo.tlbVectorSurveillanceSession vss
                        ON vss.idfVectorSurveillanceSession = m.idfVectorSurveillanceSession
                           AND vss.intRowStatus = 0
                    INNER JOIN dbo.tlbTesting t
                        ON t.idfMaterial = m.idfMaterial
                           AND t.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537019
                WHERE m.intRowStatus = 0
                      AND t.idfTestedByOffice = @UserOrganizationID
                GROUP BY m.idfVectorSurveillanceSession,
                         a.ReadPermissionIndicator,
                         a.AccessToPersonalDataPermissionIndicator,
                         a.AccessToGenderAndAgeDataPermissionIndicator,
                         a.WritePermissionIndicator,
                         a.DeletePermissionIndicator;

                -- Tested by organization for any field test
                INSERT INTO @FilteredResults
                SELECT MAX(m.idfVectorSurveillanceSession),
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbMaterial m
                    INNER JOIN dbo.tlbVectorSurveillanceSession vss
                        ON vss.idfVectorSurveillanceSession = m.idfVectorSurveillanceSession
                           AND vss.intRowStatus = 0
                    INNER JOIN dbo.tlbPensideTest p
                        ON p.idfMaterial = m.idfMaterial
                           AND p.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537019
                WHERE m.intRowStatus = 0
                      AND p.idfTestedByOffice = @UserOrganizationID
                GROUP BY m.idfVectorSurveillanceSession,
                         a.ReadPermissionIndicator,
                         a.AccessToPersonalDataPermissionIndicator,
                         a.AccessToGenderAndAgeDataPermissionIndicator,
                         a.WritePermissionIndicator,
                         a.DeletePermissionIndicator;
            END;

            --
            -- Sent to organizations for any sample transfers
            --
            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
            WHERE AccessRuleID = 10537021;

            IF @RuleActiveStatus = 0
            BEGIN
                INSERT INTO @FilteredResults
                SELECT MAX(vss.idfVectorSurveillanceSession),
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbVectorSurveillanceSession vss
                    INNER JOIN dbo.tlbMaterial m
                        ON vss.idfVectorSurveillanceSession = m.idfVectorSurveillanceSession
                           AND m.intRowStatus = 0
                    INNER JOIN dbo.tlbTransferOutMaterial toutm
                        ON m.idfMaterial = toutm.idfMaterial
                           AND toutm.intRowStatus = 0
                    INNER JOIN dbo.tlbTransferOUT tout
                        ON toutm.idfTransferOut = tout.idfTransferOut
                           AND tout.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537021
                WHERE vss.intRowStatus = 0
                      AND tout.idfSendToOffice = @UserOrganizationID
                GROUP BY vss.idfVectorSurveillanceSession,
                         a.ReadPermissionIndicator,
                         a.AccessToPersonalDataPermissionIndicator,
                         a.AccessToGenderAndAgeDataPermissionIndicator,
                         a.WritePermissionIndicator,
                         a.DeletePermissionIndicator;
            END;

            --
            -- Session data shall be available to all sites of the same administrative level.
            --
            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
            WHERE AccessRuleID = 10537018;

            IF @RuleActiveStatus = 0
            BEGIN
                SELECT @AdministrativeLevelTypeID = AdministrativeLevelTypeID
                FROM @DefaultAccessRules
                WHERE AccessRuleID = 10537018;

                SELECT @OrganizationAdministrativeLevelNode
                    = g.node.GetAncestor(g.node.GetLevel() - @AdministrativeLevelTypeID)
                FROM dbo.tlbOffice o
                    INNER JOIN dbo.tlbGeoLocationShared l
                        ON l.idfGeoLocationShared = o.idfLocation
                    INNER JOIN dbo.gisLocation g
                        ON g.idfsLocation = l.idfsLocation
                WHERE o.idfOffice = @UserOrganizationID
                      AND g.node.GetLevel() >= @AdministrativeLevelTypeID;

                -- Administrative level specified in the rule of the site where the session was created.
                INSERT INTO @FilteredResults
                SELECT vss.idfVectorSurveillanceSession,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbVectorSurveillanceSession vss
                    INNER JOIN dbo.tstSite s
                        ON vss.idfsSite = s.idfsSite
                    INNER JOIN dbo.tlbOffice o
                        ON o.idfOffice = s.idfOffice
                    INNER JOIN dbo.tlbGeoLocationShared l
                        ON l.idfGeoLocationShared = o.idfLocation
                    INNER JOIN dbo.gisLocation g
                        ON g.idfsLocation = l.idfsLocation
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537018
                WHERE vss.intRowStatus = 0
                      AND g.node.IsDescendantOf(@OrganizationAdministrativeLevelNode) = 1;

                -- Administrative level specified in the rule of the session location, if completed
                INSERT INTO @FilteredResults
                SELECT vss.idfVectorSurveillanceSession,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbVectorSurveillanceSession vss
                    INNER JOIN dbo.tlbGeoLocation l
                        ON l.idfGeoLocation = vss.idfLocation
                    INNER JOIN dbo.gisLocation g
                        ON g.idfsLocation = l.idfsLocation
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537018
                WHERE vss.intRowStatus = 0
                      AND g.node.IsDescendantOf(@OrganizationAdministrativeLevelNode) = 1;

                -- Administrative level specified in the rule of any vector location, if completed.
                INSERT INTO @FilteredResults
                SELECT vss.idfVectorSurveillanceSession,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbVectorSurveillanceSession vss
                    INNER JOIN dbo.tlbVector v
                        ON v.idfVectorSurveillanceSession = vss.idfVectorSurveillanceSession
                           AND v.intRowStatus = 0
                    INNER JOIN dbo.tlbGeoLocation l
                        ON l.idfGeoLocation = v.idfLocation
                    INNER JOIN dbo.gisLocation g
                        ON g.idfsLocation = l.idfsLocation
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537018
                WHERE vss.intRowStatus = 0
                      AND g.node.IsDescendantOf(@OrganizationAdministrativeLevelNode) = 1;

                -- Administration level specified in the rule of the location of any session summary record, if completed.
                INSERT INTO @FilteredResults
                SELECT vss.idfVectorSurveillanceSession,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbVectorSurveillanceSession vss
                    INNER JOIN dbo.tlbVectorSurveillanceSessionSummary vsss
                        ON vsss.idfVectorSurveillanceSession = vss.idfVectorSurveillanceSession
                           AND vsss.intRowStatus = 0
                    INNER JOIN dbo.tlbGeoLocation AS l
                        ON l.idfGeoLocation = vsss.idfGeoLocation
                    INNER JOIN dbo.gisLocation AS g
                        ON g.idfsLocation = l.idfsLocation
                    INNER JOIN @DefaultAccessRules AS a
                        ON a.AccessRuleID = 10537018
                WHERE vss.intRowStatus = 0
                      AND g.node.IsDescendantOf(@OrganizationAdministrativeLevelNode) = 1;
            END;

            -- =======================================================================================
            -- CONFIGURABLE FILTRATION RULES
            -- 
            -- Apply configurable filtration rules for use case SAUC34. Some of these rules may 
            -- overlap the non-configurable rules.
            -- =======================================================================================
            --
            -- Apply at the user's site group level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT vss.idfVectorSurveillanceSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbVectorSurveillanceSession vss
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = vss.idfsSite
                INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                    ON userSiteGroup.idfsSite = @UserSiteID
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE vss.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT vss.idfVectorSurveillanceSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbVectorSurveillanceSession vss
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = vss.idfsSite
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE vss.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's employee group level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT vss.idfVectorSurveillanceSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbVectorSurveillanceSession vss
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = vss.idfsSite
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE vss.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's ID level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT vss.idfVectorSurveillanceSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbVectorSurveillanceSession vss
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = vss.idfsSite
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE vss.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site group level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT vss.idfVectorSurveillanceSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbVectorSurveillanceSession vss
                INNER JOIN dbo.tflSiteToSiteGroup sgs
                    ON sgs.idfsSite = @UserSiteID
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE vss.intRowStatus = 0
                  AND sgs.idfsSite = vss.idfsSite;

            -- 
            -- Apply at the user's site level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT vss.idfVectorSurveillanceSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbVectorSurveillanceSession vss
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE vss.intRowStatus = 0
                  AND a.GrantingActorSiteID = vss.idfsSite;

            -- 
            -- Apply at the user's employee group level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT vss.idfVectorSurveillanceSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbVectorSurveillanceSession vss
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE vss.intRowStatus = 0
                  AND a.GrantingActorSiteID = vss.idfsSite;

            -- 
            -- Apply at the user's ID level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT vss.idfVectorSurveillanceSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbVectorSurveillanceSession vss
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE vss.intRowStatus = 0
                  AND a.GrantingActorSiteID = vss.idfsSite;

            -- Copy filtered results to results and use search criteria
            INSERT INTO @Results
            SELECT ID,
                   ReadPermissionIndicator,
                   AccessToPersonalDataPermissionIndicator,
                   AccessToGenderAndAgeDataPermissionIndicator,
                   WritePermissionIndicator,
                   DeletePermissionIndicator
            FROM @FilteredResults
                INNER JOIN dbo.tlbVectorSurveillanceSession vss
                    ON vss.idfVectorSurveillanceSession = ID
                LEFT JOIN tlbGeoLocation gl
                    ON gl.idfGeoLocation = vss.idfLocation
                       AND gl.intRowStatus = 0
                LEFT JOIN dbo.gisLocation g
                    ON g.idfsLocation = gl.idfsLocation
                CROSS APPLY
            (
                SELECT dbo.FN_VCTS_VSSESSION_VECTORTYPEIDS_GET(vss.idfVectorSurveillanceSession) vectorTypeIds
            ) vectorTypeIds
                LEFT JOIN dbo.tlbVector v
                    ON v.idfVectorSurveillanceSession = vss.idfVectorSurveillanceSession
                       AND v.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000141) vectorSubType
                    ON vectorSubType.idfsReference = v.idfsVectorSubType
                CROSS APPLY
            (
                SELECT dbo.FN_VCTS_VSSESSION_DIAGNOSESIDS_GET(vss.idfVectorSurveillanceSession, @LanguageID) diseaseIDs
            ) diseaseIDs
            WHERE (
                      vss.idfsVectorSurveillanceStatus = @StatusTypeID
                      OR @StatusTypeID IS NULL
                  )
                  AND (
                          CHARINDEX(@VectorTypeID, vectorTypeIds) > 0
                          OR @VectorTypeID IS NULL
                      )
                  AND (
                          vectorSubType.idfsReference = @SpeciesTypeID
                          OR @SpeciesTypeID IS NULL
                      )
                  AND (
                          g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                          OR @AdministrativeLevelID IS NULL
                      )
                  AND (
                          vss.idfOUtBreak = @OutbreakKey
                          OR @OutbreakKey IS NULL
                      )
                  AND (
                          (
                              (
                                  CAST(vss.datStartDate AS DATE) >= @StartDateFrom
                                  AND @StartDateTo IS NULL
                              )
                              OR (
                                     CAST(vss.datStartDate AS DATE) <= @StartDateTo
                                     AND @StartDateFrom IS NULL
                                 )
                              OR (CAST(vss.datStartDate AS DATE)
                  BETWEEN @StartDateFrom AND @StartDateTo
                                 )
                          )
                          OR (
                                 @StartDateFrom IS NULL
                                 AND @StartDateTo IS NULL
                             )
                      )
                  AND (
                          (
                              (
                                  CAST(vss.datCloseDate AS DATE) >= @EndDateFrom
                                  AND @EndDateTo IS NULL
                              )
                              OR (
                                     CAST(vss.datCloseDate AS DATE) <= @EndDateTo
                                     AND @EndDateFrom IS NULL
                                 )
                              OR (CAST(vss.datCloseDate AS DATE)
                  BETWEEN @EndDateFrom AND @EndDateTo
                                 )
                          )
                          OR (
                                 @EndDateFrom IS NULL
                                 AND @EndDateTo IS NULL
                             )
                      )
                  AND (
                          vss.strSessionID LIKE '%' + TRIM(@SessionID) + '%'
                          OR @SessionID IS NULL
                      )
                  AND (
                          vss.strFieldSessionID LIKE '%' + TRIM(@FieldSessionID) + '%'
                          OR @FieldSessionID IS NULL
                      )
                  AND (
                          CHARINDEX(CAST(@DiseaseID AS NVARCHAR(2000)), diseaseIDs) > 0
                          OR @DiseaseID IS NULL
                      )
            GROUP BY ID,
                     ReadPermissionIndicator,
                     AccessToPersonalDataPermissionIndicator,
                     AccessToGenderAndAgeDataPermissionIndicator,
                     WritePermissionIndicator,
                     DeletePermissionIndicator;
        END;

        -- =======================================================================================
        -- DISEASE FILTRATION RULES
        --
        -- Apply disease filtration rules from use case SAUC62.
        -- =======================================================================================
        -- 
        -- Apply level 0 disease filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE ID IN (
                        SELECT vss.idfVectorSurveillanceSession
                        FROM dbo.tlbVectorSurveillanceSession vss
                            INNER JOIN dbo.tlbVectorSurveillanceSessionSummary vsss
                                ON vsss.idfVectorSurveillanceSession = vss.idfVectorSurveillanceSession
                                   AND vsss.intRowStatus = 0
                            INNER JOIN dbo.tlbVectorSurveillanceSessionSummaryDiagnosis vssd
                                ON vsss.idfsVSSessionSummary = vssd.idfsVSSessionSummary
                                   AND vssd.intRowStatus = 0
                            INNER JOIN dbo.tstObjectAccess oa
                                ON oa.idfsObjectID = vssd.idfsDiagnosis
                                   AND oa.intRowStatus = 0
                        WHERE vss.intRowStatus = 0
                              AND oa.intPermission = 1 -- Deny permission
                              AND oa.idfsObjectType = 10060001 -- Disease
                              AND oa.idfActor = -506 -- Default role
                    );

        --
        -- Apply level 1 disease filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        INSERT INTO @Results
        SELECT vss.idfVectorSurveillanceSession,
               1,
               1,
               1,
               1,
               1
        FROM dbo.tlbVectorSurveillanceSession vss
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.tlbVectorSurveillanceSessionSummary vsss
                ON vsss.idfVectorSurveillanceSession = vss.idfVectorSurveillanceSession
                   AND vsss.intRowStatus = 0
            INNER JOIN dbo.tlbVectorSurveillanceSessionSummaryDiagnosis vssd
                ON vsss.idfsVSSessionSummary = vssd.idfsVSSessionSummary
                   AND vssd.intRowStatus = 0
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = vssd.idfsDiagnosis
                   AND oa.intRowStatus = 0
        WHERE oa.intPermission = 2 -- Allow permission
              AND oa.idfsObjectType = 10060001 -- Disease
              AND vss.intRowStatus = 0
              AND oa.idfActor = egm.idfEmployeeGroup;

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbVectorSurveillanceSession vss
                ON vss.idfVectorSurveillanceSession = ID
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.tlbVectorSurveillanceSessionSummary vsss
                ON vsss.idfVectorSurveillanceSession = vss.idfVectorSurveillanceSession
                   AND vsss.intRowStatus = 0
            INNER JOIN dbo.tlbVectorSurveillanceSessionSummaryDiagnosis vssd
                ON vsss.idfsVSSessionSummary = vssd.idfsVSSessionSummary
                   AND vssd.intRowStatus = 0
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = vssd.idfsDiagnosis
                   AND oa.intRowStatus = 0
        WHERE oa.intPermission = 1 -- Deny permission
              AND oa.idfsObjectType = 10060001 -- Disease
              AND oa.idfActor = egm.idfEmployeeGroup;

        --
        -- Apply level 2 disease filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        INSERT INTO @Results
        SELECT vss.idfVectorSurveillanceSession,
               1,
               1,
               1,
               1,
               1
        FROM dbo.tlbVectorSurveillanceSession vss
            INNER JOIN dbo.tlbVectorSurveillanceSessionSummary vsss
                ON vsss.idfVectorSurveillanceSession = vss.idfVectorSurveillanceSession
                   AND vsss.intRowStatus = 0
            INNER JOIN dbo.tlbVectorSurveillanceSessionSummaryDiagnosis vssd
                ON vsss.idfsVSSessionSummary = vssd.idfsVSSessionSummary
                   AND vssd.intRowStatus = 0
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = vssd.idfsDiagnosis
                   AND oa.intRowStatus = 0
        WHERE oa.intPermission = 2 -- Allow permission
              AND oa.idfsObjectType = 10060001 -- Disease
              AND vss.intRowStatus = 0
              AND oa.idfActor = @UserEmployeeID;

        DELETE FROM @Results
        WHERE ID IN (
                        SELECT vss.idfVectorSurveillanceSession
                        FROM dbo.tlbVectorSurveillanceSession vss
                            INNER JOIN dbo.tlbVectorSurveillanceSessionSummary vsss
                                ON vsss.idfVectorSurveillanceSession = vss.idfVectorSurveillanceSession
                                   AND vsss.intRowStatus = 0
                            INNER JOIN dbo.tlbVectorSurveillanceSessionSummaryDiagnosis vssd
                                ON vsss.idfsVSSessionSummary = vssd.idfsVSSessionSummary
                                   AND vssd.intRowStatus = 0
                            INNER JOIN dbo.tstObjectAccess oa
                                ON oa.idfsObjectID = vssd.idfsDiagnosis
                                   AND oa.intRowStatus = 0
                        WHERE vss.intRowStatus = 0
                              AND oa.intPermission = 1 -- Deny permission
                              AND oa.idfsObjectType = 10060001 -- Disease
                              AND oa.idfActor = @UserEmployeeID
                    );

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT vss.idfVectorSurveillanceSession
            FROM dbo.tlbVectorSurveillanceSession vss
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = vss.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE vss.intRowStatus = 0
                  AND oa.idfsObjectOperation = 10059003 -- Read permission
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        INSERT INTO @Results
        SELECT vss.idfVectorSurveillanceSession,
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = vss.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = vss.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = vss.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = vss.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = vss.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbVectorSurveillanceSession vss
        WHERE vss.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserGroupSitePermissions WHERE SiteID = vss.idfsSite
        );

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbVectorSurveillanceSession vss
                ON vss.idfVectorSurveillanceSession = ID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = vss.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003; -- Read permission

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        INSERT INTO @Results
        SELECT vss.idfVectorSurveillanceSession,
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = vss.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = vss.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = vss.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = vss.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = vss.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbVectorSurveillanceSession vss
        WHERE vss.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserSitePermissions WHERE SiteID = vss.idfsSite
        );

        DELETE FROM @Results
        WHERE ID IN (
                        SELECT vss.idfVectorSurveillanceSession
                        FROM dbo.tlbVectorSurveillanceSession vss
                            INNER JOIN @UserSitePermissions usp
                                ON usp.SiteID = vss.idfsSite
                        WHERE usp.Permission = 4 -- Deny permission
                              AND usp.PermissionTypeID = 10059003 -- Read permission
                    );

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        INSERT INTO @FinalResults
        SELECT ID,
               MAX(res.ReadPermissionIndicator),
               MAX(res.AccessToPersonalDataPermissionIndicator),
               MAX(res.AccessToGenderAndAgeDataPermissionIndicator),
               MAX(res.WritePermissionIndicator),
               MAX(res.DeletePermissionIndicator)
        FROM @Results res
            INNER JOIN dbo.tlbVectorSurveillanceSession vss
                ON vss.idfVectorSurveillanceSession = res.ID
            LEFT JOIN dbo.tlbVectorSurveillanceSessionSummary vsss
                ON vsss.idfVectorSurveillanceSession = vss.idfVectorSurveillanceSession
                   AND vsss.intRowStatus = 0
            LEFT JOIN dbo.tlbVectorSurveillanceSessionSummaryDiagnosis vssd
                ON vsss.idfsVSSessionSummary = vssd.idfsVSSessionSummary
                   AND vssd.intRowStatus = 0
            LEFT JOIN tlbGeoLocation gl
                ON gl.idfGeoLocation = vss.idfLocation
            LEFT JOIN dbo.gisLocation g
                ON g.idfsLocation = gl.idfsLocation
            CROSS APPLY
        (
            SELECT dbo.FN_VCTS_VSSESSION_VECTORTYPEIDS_GET(vss.idfVectorSurveillanceSession) vectorTypeIDs
        ) vectorTypeIDs
            LEFT JOIN dbo.tlbVector v
                ON v.idfVectorSurveillanceSession = vss.idfVectorSurveillanceSession
                   AND v.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000141) vectorSubType
                ON vectorSubType.idfsReference = v.idfsVectorSubType
            CROSS APPLY
        (
            SELECT dbo.FN_VCTS_VSSESSION_DIAGNOSESIDS_GET(vss.idfVectorSurveillanceSession, @LanguageID) diseaseIDs
        ) diseaseIDs
        WHERE res.ReadPermissionIndicator IN ( 1, 3, 5 )
              AND (
                      vss.idfsVectorSurveillanceStatus = @StatusTypeID
                      OR @StatusTypeID IS NULL
                  )
              AND (
                      CHARINDEX(@VectorTypeID, vectorTypeIDs) > 0
                      OR @VectorTypeID IS NULL
                  )
              AND (
                      vectorSubType.idfsReference = @SpeciesTypeID
                      OR @SpeciesTypeID IS NULL
                  )
              AND (
                      g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                      OR @AdministrativeLevelID IS NULL
                  )
              AND (
                      vss.idfOUtBreak = @OutbreakKey
                      OR @OutbreakKey IS NULL
                  )
              AND (
                      (
                          (
                              CAST(vss.datStartDate AS DATE) >= @StartDateFrom
                              AND @StartDateTo IS NULL
                          )
                          OR (
                                 CAST(vss.datStartDate AS DATE) <= @StartDateTo
                                 AND @StartDateFrom IS NULL
                             )
                          OR (CAST(vss.datStartDate AS DATE)
              BETWEEN @StartDateFrom AND @StartDateTo
                             )
                      )
                      OR (
                             @StartDateFrom IS NULL
                             AND @StartDateTo IS NULL
                         )
                  )
              AND (
                      (
                          (
                              CAST(vss.datCloseDate AS DATE) >= @EndDateFrom
                              AND @EndDateTo IS NULL
                          )
                          OR (
                                 CAST(vss.datCloseDate AS DATE) <= @EndDateTo
                                 AND @EndDateFrom IS NULL
                             )
                          OR (CAST(vss.datCloseDate AS DATE)
              BETWEEN @EndDateFrom AND @EndDateTo
                             )
                      )
                      OR (
                             @EndDateFrom IS NULL
                             AND @EndDateTo IS NULL
                         )
                  )
              AND (
                      vss.strSessionID LIKE '%' + TRIM(@SessionID) + '%'
                      OR @SessionID IS NULL
                  )
              AND (
                      vss.strFieldSessionID LIKE '%' + TRIM(@FieldSessionID) + '%'
                      OR @FieldSessionID IS NULL
                  )
              AND (
                      CHARINDEX(CAST(@DiseaseID AS NVARCHAR(2000)), diseaseIDs) > 0
                      OR @DiseaseID IS NULL
                  )
        GROUP BY ID;

        WITH paging
        AS (SELECT ROW_NUMBER() OVER (ORDER BY CASE
                                                   WHEN @SortColumn = 'SessionID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       vss.strSessionID
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'SessionID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       vss.strSessionID
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'SessionStatusTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       sessionStatusType.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'SessionStatusTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       sessionStatusType.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'StartDate'
                                                        AND @SortOrder = 'ASC' THEN
                                                       vss.datStartDate
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'StartDate'
                                                        AND @SortOrder = 'DESC' THEN
                                                       vss.datStartDate
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'CloseDate'
                                                        AND @SortOrder = 'ASC' THEN
                                                       vss.datCloseDate
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'CloseDate'
                                                        AND @SortOrder = 'DESC' THEN
                                                       vss.datCloseDate
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel1Name'
                                                        AND @SortOrder = 'ASC' THEN
                                                       lh.AdminLevel2Name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel1Name'
                                                        AND @SortOrder = 'DESC' THEN
                                                       lh.AdminLevel2Name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel2Name'
                                                        AND @SortOrder = 'ASC' THEN
                                                       lh.AdminLevel3Name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel2Name'
                                                        AND @SortOrder = 'DESC' THEN
                                                       lh.AdminLevel3Name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'VectorType'
                                                        AND @SortOrder = 'ASC' THEN
                                                       vectorTypes.vectorTypes
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'VectorType'
                                                        AND @SortOrder = 'DESC' THEN
                                                       vectorTypes.vectorTypes
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'Disease'
                                                        AND @SortOrder = 'ASC' THEN
                                                       diseases.diseases
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'Disease'
                                                        AND @SortOrder = 'DESC' THEN
                                                       diseases.diseases
                                               END DESC
                                     ) AS ROWNUM,
                   idfVectorSurveillanceSession AS SessionKey,
                   strSessionID AS SessionID,
                   vss.strFieldSessionID AS FieldSessionID,
                   vss.idfOUtBreak AS OutbreakKey,
                   o.strOutbreakID AS OutbreakID,
                   o.datStartDate AS OutbreakStartDate,
                   vectorTypeIDs.vectorTypeIDs AS VectorTypeIDs,
                   vectorTypes.vectorTypes AS Vectors,
                   diseaseIDs.diseaseIDs AS DiseaseIDs,
                   diseases.diseases AS Diseases,
                   statusType.name AS StatusTypeName,
                   lh.AdminLevel2Name AS AdministrativeLevel1Name,
                   lh.AdminLevel3Name AS AdministrativeLevel2Name,
                   lh.AdminLevel4Name AS SettlementName,
                   gl.dblLatitude AS Latitude,
                   gl.dblLongitude AS Longitude,
                   vss.datStartDate AS StartDate,
                   vss.datCloseDate AS CloseDate,
                   vss.idfsSite AS SiteID,
                   CASE
                       WHEN res.ReadPermissionIndicator = 5 THEN
                           CONVERT(BIT, 1)
                       WHEN res.ReadPermissionIndicator = 4 THEN
                           CONVERT(BIT, 0)
                       WHEN res.ReadPermissionIndicator = 3 THEN
                           CONVERT(BIT, 1)
                       WHEN res.ReadPermissionIndicator = 2 THEN
                           CONVERT(BIT, 0)
                       ELSE
                           CONVERT(BIT, res.ReadPermissionIndicator)
                   END AS ReadPermissionindicator,
                   CASE
                       WHEN res.AccessToPersonalDataPermissionIndicator = 5 THEN
                           CONVERT(BIT, 1)
                       WHEN res.AccessToPersonalDataPermissionIndicator = 4 THEN
                           CONVERT(BIT, 0)
                       WHEN res.AccessToPersonalDataPermissionIndicator = 3 THEN
                           CONVERT(BIT, 1)
                       WHEN res.AccessToPersonalDataPermissionIndicator = 2 THEN
                           CONVERT(BIT, 0)
                       ELSE
                           CONVERT(BIT, res.AccessToPersonalDataPermissionIndicator)
                   END AS AccessToPersonalDataPermissionIndicator,
                   CASE
                       WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 5 THEN
                           CONVERT(BIT, 1)
                       WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 4 THEN
                           CONVERT(BIT, 0)
                       WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 3 THEN
                           CONVERT(BIT, 1)
                       WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 2 THEN
                           CONVERT(BIT, 0)
                       ELSE
                           CONVERT(BIT, res.AccessToGenderAndAgeDataPermissionIndicator)
                   END AS AccessToGenderAndAgeDataPermissionIndicator,
                   CASE
                       WHEN res.WritePermissionIndicator = 5 THEN
                           CONVERT(BIT, 1)
                       WHEN res.WritePermissionIndicator = 4 THEN
                           CONVERT(BIT, 0)
                       WHEN res.WritePermissionIndicator = 3 THEN
                           CONVERT(BIT, 1)
                       WHEN res.WritePermissionIndicator = 2 THEN
                           CONVERT(BIT, 0)
                       ELSE
                           CONVERT(BIT, res.WritePermissionIndicator)
                   END AS WritePermissionIndicator,
                   CASE
                       WHEN res.DeletePermissionIndicator = 5 THEN
                           CONVERT(BIT, 1)
                       WHEN res.DeletePermissionIndicator = 4 THEN
                           CONVERT(BIT, 0)
                       WHEN res.DeletePermissionIndicator = 3 THEN
                           CONVERT(BIT, 1)
                       WHEN res.DeletePermissionIndicator = 2 THEN
                           CONVERT(BIT, 0)
                       ELSE
                           CONVERT(BIT, res.DeletePermissionIndicator)
                   END AS DeletePermissionIndicator,
                   COUNT(*) OVER () AS RecordCount,
                   (
                       SELECT COUNT(*)
                       FROM dbo.tlbVectorSurveillanceSession
                       WHERE intRowStatus = 0
                   ) AS TotalCount
            FROM @FinalResults res
                INNER JOIN dbo.tlbVectorSurveillanceSession vss
                    ON vss.idfVectorSurveillanceSession = res.ID
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000133) sessionStatusType
                    ON sessionStatusType.idfsReference = vss.idfsVectorSurveillanceStatus
                LEFT JOIN dbo.tlbGeoLocation gl
                    ON gl.idfGeoLocation = vss.idfLocation
                INNER JOIN dbo.gisLocation g
                    ON g.idfsLocation = gl.idfsLocation
                INNER JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                    ON lh.idfsLocation = g.idfsLocation
                CROSS APPLY
            (
                SELECT dbo.FN_VCTS_VSSESSION_DIAGNOSESNAMES_GET(vss.idfVectorSurveillanceSession, @LanguageID) diseases
            ) diseases
                CROSS APPLY
            (
                SELECT dbo.FN_VCTS_VSSESSION_VECTORTYPENAMES_GET(vss.idfVectorSurveillanceSession, @LanguageID) vectorTypes
            ) vectorTypes
                CROSS APPLY
            (
                SELECT dbo.FN_VCTS_VSSESSION_DIAGNOSESIDS_GET(vss.idfVectorSurveillanceSession, @LanguageID) diseaseIDs
            ) diseaseIDs
                CROSS APPLY
            (
                SELECT dbo.FN_VCTS_VSSESSION_VECTORTYPEIDS_GET(vss.idfVectorSurveillanceSession) vectorTypeIDs
            ) vectorTypeIDs
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000133) statusType
                    ON statusType.idfsReference = vss.idfsVectorSurveillanceStatus
                LEFT JOIN dbo.tlbOutbreak o
                    ON o.idfOutbreak = vss.idfOutbreak
                       AND o.intRowStatus = 0
           )
        SELECT SessionKey,
               SessionID,
               FieldSessionID,
               OutbreakKey,
               OutbreakID,
               OutbreakStartDate,
               VectorTypeIDs,
               Vectors,
               DiseaseIDs,
               Diseases,
               StatusTypeName,
               AdministrativeLevel1Name,
               AdministrativeLevel2Name,
               SettlementName,
               Latitude,
               Longitude,
               StartDate,
               CloseDate,
               SiteID,
               ReadPermissionIndicator,
               AccessToPersonalDataPermissionIndicator,
               AccessToGenderAndAgeDataPermissionIndicator,
               WritePermissionIndicator,
               DeletePermissionIndicator,
               RecordCount,
               TotalCount,
               CurrentPage = @PageNumber,
               TotalPages = (RecordCount / @PageSize) + IIF(RecordCount % @PageSize > 0, 1, 0)
        FROM paging
        WHERE RowNum > @firstRec
              AND RowNum < @lastRec
        ORDER BY CASE
                     WHEN @SortColumn = 'SessionID'
                          AND @SortOrder = 'ASC' THEN
                         SessionID
                 END ASC,
                 CASE
                     WHEN @SortColumn = 'SessionID'
                          AND @SortOrder = 'DESC' THEN
                         SessionID
                 END DESC,
                 CASE
                     WHEN @SortColumn = 'SessionStatusTypeName'
                          AND @SortOrder = 'ASC' THEN
                         StatusTypeName
                 END ASC,
                 CASE
                     WHEN @SortColumn = 'SessionStatusTypeName'
                          AND @SortOrder = 'DESC' THEN
                         StatusTypeName
                 END DESC,
                 CASE
                     WHEN @SortColumn = 'StartDate'
                          AND @SortOrder = 'ASC' THEN
                         StartDate
                 END ASC,
                 CASE
                     WHEN @SortColumn = 'StartDate'
                          AND @SortOrder = 'DESC' THEN
                         StartDate
                 END DESC,
                 CASE
                     WHEN @SortColumn = 'CloseDate'
                          AND @SortOrder = 'ASC' THEN
                         CloseDate
                 END ASC,
                 CASE
                     WHEN @SortColumn = 'CloseDate'
                          AND @SortOrder = 'DESC' THEN
                         CloseDate
                 END DESC,
                 CASE
                     WHEN @SortColumn = 'AdministrativeLevel1Name'
                          AND @SortOrder = 'ASC' THEN
                         AdministrativeLevel2Name
                 END ASC,
                 CASE
                     WHEN @SortColumn = 'AdministrativeLevel1Name'
                          AND @SortOrder = 'DESC' THEN
                         AdministrativeLevel2Name
                 END DESC,
                 CASE
                     WHEN @SortColumn = 'AdministrativeLevel2Name'
                          AND @SortOrder = 'ASC' THEN
                         SettlementName
                 END ASC,
                 CASE
                     WHEN @SortColumn = 'AdministrativeLevel2Name'
                          AND @SortOrder = 'DESC' THEN
                         SettlementName
                 END DESC,
                 CASE
                     WHEN @SortColumn = 'VectorType'
                          AND @SortOrder = 'ASC' THEN
                         Vectors
                 END ASC,
                 CASE
                     WHEN @SortColumn = 'VectorType'
                          AND @SortOrder = 'DESC' THEN
                         Vectors
                 END DESC,
                 CASE
                     WHEN @SortColumn = 'Disease'
                          AND @SortOrder = 'ASC' THEN
                         Diseases
                 END ASC,
                 CASE
                     WHEN @SortColumn = 'Disease'
                          AND @SortOrder = 'DESC' THEN
                         Diseases
                 END DESC;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO

SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Update complete.';


GO
