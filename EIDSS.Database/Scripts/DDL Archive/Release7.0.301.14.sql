/*
Deployment script for EIDSS7_GG

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO

USE [$(DatabaseName)];


GO

PRINT N'Creating Function [dbo].[FN_LAB_MONITORING_SESSION_TO_SAMPLE_DISEASES_GET]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- ================================================================================================
-- Name: FN_LAB_MONITORING_SESSION_DISEASES_GET
--
-- Description: Returns the delimited list of disease identifiers and names for a surveillance 
-- session.
--          
-- Author: Stephen Long
--
-- Revision History:
--		Name       Date       Change Detail
-- ------------------ ---------- -----------------------------------------------------------------
-- Stephen Long       10/14/2022 Initial release
-- ================================================================================================
CREATE FUNCTION [dbo].[FN_LAB_MONITORING_SESSION_TO_SAMPLE_DISEASES_GET] (@LanguageID NVARCHAR(50))
RETURNS TABLE
AS
RETURN
(
    SELECT msm.idfMaterial AS SampleID,
           STRING_AGG(msm.idfsDisease, ',') AS DiseaseID,
           STRING_AGG(name, '|') AS DiseaseName
    FROM
    (
        SELECT msm.idfMaterial,
            msm.idfsDisease,
            diseaseName.name
        FROM dbo.tlbMonitoringSessionToMaterial msm
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) diseaseName
                ON diseaseName.idfsReference = msm.idfsDisease
        WHERE msm.intRowStatus = 0
    ) msm
    GROUP BY msm.idfMaterial
);
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering Procedure [dbo].[USP_CONF_TESTTOTESTRESULTMATRIX_SET]...';


GO
-- ================================================================================================
-- Name: USP_CONF_TESTTOTESTRESULTMATRIX_SET
--
-- Description:	Creates a test to test result matrix
--                      
-- Author: Ricky Moss
--
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Ricky Moss		03/11/2018 Initial release.
-- Stephen Long     07/13/2022 Added site alert logic.
--
-- exec USP_CONF_TESTTOTESTRESULTMATRIX_SET 803960000000, '807830000000, 807990000000, 808040000000', 0
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_CONF_TESTTOTESTRESULTMATRIX_SET]
(
    @idfsTestResultRelation BIGINT,
    @idfsTestName BIGINT,
    @idfsTestResult BIGINT,
    @blnIndicative BIT,
    @EventTypeId BIGINT,
    @SiteId BIGINT,
    @UserId BIGINT,
    @LocationId BIGINT,
    @AuditUserName NVARCHAR(200)
)
AS
DECLARE @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
        @ReturnCode BIGINT = 0,
        @EventId BIGINT = -1,
        @EventSiteId BIGINT = @SiteId,
        @EventUserId BIGINT = @UserId,
        @EventDiseaseId BIGINT = NULL,
        @EventLocationId BIGINT = @LocationId,
        @EventInformationString NVARCHAR(MAX) = NULL,
        @EventLoginSiteId BIGINT = @SiteId;
DECLARE @SuppressSelect TABLE
(
    ReturnCode INT,
    ReturnMessage NVARCHAR(MAX)
);
BEGIN
    BEGIN TRY
        IF @idfsTestResultRelation = 19000097
        BEGIN
            IF NOT EXISTS
            (
                SELECT idfsTestResult
                FROM dbo.trtTestTypeToTestResult
                WHERE idfsTestResult = @idfsTestResult
                      AND idfsTestName = @idfsTestName
            )
            BEGIN
                INSERT INTO dbo.trtTestTypeToTestResult
                (
                    idfsTestName,
                    idfsTestResult,
                    blnIndicative,
                    intRowStatus,
                    AuditCreateDTM,
                    AuditCreateUser
                )
                VALUES
                (@idfsTestName, @idfsTestResult, @blnIndicative, 0, GETDATE(), @AuditUserName);
            END
            ELSE IF EXISTS
            (
                SELECT idfsTestResult
                FROM dbo.trtTestTypeToTestResult
                WHERE idfsTestResult = @idfsTestResult
                      AND idfsTestName = @idfsTestName
            )
            BEGIN
                UPDATE dbo.trtTestTypeToTestResult
                SET intRowStatus = 0,
                    blnIndicative = @blnIndicative,
                    AuditUpdateDTM = GETDATE(), 
                    AuditUpdateUser = @AuditUserName
                WHERE idfsTestResult = @idfsTestResult
                      AND idfsTestName = @idfsTestName;
				set @ReturnCode = 6
				set @ReturnMessage = 'EXISTS'
            END
        END
        ELSE
        BEGIN
            --creates new test for disease
            IF NOT EXISTS
            (
                SELECT idfsPensideTestResult
                FROM dbo.trtPensideTestTypeToTestResult
                WHERE idfsPensideTestResult = @idfsTestResult
                      AND idfsPensideTestName = @idfsTestName
            )
            BEGIN
                INSERT INTO dbo.trtPensideTestTypeToTestResult
                (
                    idfsPensideTestName,
                    idfsPensideTestResult,
                    blnIndicative,
                    intRowStatus,
                    AuditCreateDTM,
                    AuditCreateUser
                )
                VALUES
                (@idfsTestName, @idfsTestResult, @blnIndicative, 0, GETDATE(), @AuditUserName);
            END
            ELSE IF EXISTS
            (
                SELECT idfsTestResult
                FROM dbo.trtTestTypeToTestResult
                WHERE idfsTestResult = @idfsTestResult
                      AND idfsTestName = @idfsTestName
            )
            BEGIN
                UPDATE dbo.trtTestTypeToTestResult
                SET intRowStatus = 0,
                    blnIndicative = @blnIndicative, 
                    AuditUpdateDTM = GETDATE(), 
                    AuditUpdateUser = @AuditUserName 
                WHERE idfsTestResult = @idfsTestResult
                      AND idfsTestName = @idfsTestName;
				set @ReturnCode = 6
				set @ReturnMessage = 'EXISTS'

            END
        END

        INSERT INTO @SuppressSelect 
        EXECUTE dbo.USP_ADMIN_EVENT_SET @EventId,
                                        @EventTypeId,
                                        @EventUserId,
                                        @idfsTestName,
                                        @EventDiseaseId,
                                        @EventSiteId,
                                        @EventInformationString,
                                        @EventLoginSiteId,
                                        @EventLocationId,
                                        @AuditUserName;

        SELECT @ReturnCode AS 'ReturnCode',
               @ReturnMessage AS 'ReturnMessage',
               @idfsTestName AS 'idfsTestName';
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_GBL_LoginContext_SET]...';


GO

-- =============================================
-- Author:		Steven Verner
-- History:
-- Create date: 12/21/2021
-- 02/28/2022	Ensured that eventid is nulled out when called.  This SP is called during the logon process.

-- Description:	Sets the user's login context by adding a row into the tstLocalConnectionContext table.
-- =============================================
ALTER PROCEDURE [dbo].[USP_GBL_LoginContext_SET]
	 @UserID as bigint 
	,@userSite bigint 
	,@blnDiagnosisDenied  bit
	,@blnSiteDenied  bit
AS
	DECLARE @idfsDataAuditEvent BIGINT
	DECLARE @SupressSELECT TABLE
    (
		retrunCode INT,
		returnMessage VARCHAR(200)
    )

	IF Exists(SELECT * FROM tstLocalConnectionContext WHERE idfUserID = @UserID)
		UPDATE tstLocalConnectionContext      
		SET  
		  idfsSite=@userSite,      
		  datLastUsed=GETUTCDATE(),
		  blnDiagnosisDenied =  @blnDiagnosisDenied,
		  blnSiteDenied = @blnSiteDenied,
		  idfDataAuditEvent = NULL,
		  idfEventID = NULL
		WHERE idfUserID = @UserID
	ELSE
		INSERT INTO tstLocalConnectionContext(
			strConnectionContext,
			idfUserID,
			idfsSite,
			datLastUsed,
			blnDiagnosisDenied,
			blnSiteDenied
			)
		VALUES(
			NEWID(),
			@UserID,
			@userSite,
			GETUTCDATE(),
			@blnDiagnosisDenied,
			@blnSiteDenied
			)


RETURN 0
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_TRANSFER_ADVANCED_SEARCH_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_TRANSFER_ADVANCED_SEARCH_GETList
--
-- Description:	Get transferred advanced search list for the laboratory module use case LUC13.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     02/18/2019 Initial relase.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     10/07/2019 Removed @CampaignID variable; just use EIDSSReportCampaignSessionID.
-- Stephen Long     10/21/2019 Added accession indicator and test status type ID to the list of 
--                             fields.
-- Stephen Long     01/22/2020 Converted site ID to site list for site filtration.
-- Stephen Long     03/11/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     04/07/2020 Added test name type ID to the model.
-- Stephen Long     04/15/2020 Changed select from table to tlbTransferOUT instead of tlbMaterial.
-- Stephen Long     04/23/2020 Correction on disease ID and disease name; add vector surveillance 
--                             session.
-- Stephen Long     04/26/2020 Added sent to organization ID to the model.
-- Stephen Long     05/06/2020 Added test started date and test category type name to the model.
-- Stephen Long     06/24/2020 Added external test check to the test left join.
-- Stephen Long     08/25/2020 Added criteria to ignore time on date betweens.
-- Stephen Long     09/02/2020 Changed accessioned indicator from int to varchar to handle searches
--                             with un-accessioned and accessioned samples in the same query.
-- Stephen Long     10/30/2020 Remove unneeded joins.
-- Stephen Long     11/28/2020 Added configurable site filtration rules.
-- Stephen Long     12/16/2020 Changed join for vector surveillance session diseases to the sample
--                             table.
-- Stephen Long     12/23/2020 Correction on accession indicator list where criteria.
-- Stephen Long     12/31/2020 Change function on reference data to handle inactive records.
-- Stephen Long     01/03/2020 Added option recompile to select queries.
-- Stephen Long     01/21/2021 Changed counts to use group by in sub-query instead of count 
--                             distinct and added with recompile to handle number of nullable 
--                             parameters.
-- Stephen Long     01/24/2021 Correct where criteria on accession indicator list.
-- Mark Wilson		08/16/2021 Join tlbMonitoringSessionToDiagnosis to get diagnosis
-- Stephen Long     09/25/2021 Added new pagination and order by.
-- Stephen Long     10/14/2021 Changed report or session type ID to bigint.
-- Stephen Long     12/08/2021 Changed pagination logic and removed option recompile.
-- Stephen Long     12/15/2021 Added configurable filtration rules.
-- Stephen Long     02/10/2022 Replaced joins for monitoring session and vector session
--                             disease references to improve performance.
-- Stephen Long     03/24/2022 Removed primary key from final results table variable.
-- Stephen Long     05/17/2022 Removed primary key from monitoring and vector session disease 
--                             table variables.
-- Stephen Long     05/20/2022 Added string agg to session diseases.
-- Mike Kornegay	06/14/2022 Added new additional SessionCategoryID for Vet Avian / Vet Livestock 
--                             breakout.
-- Stephen Long     07/26/2022 Updated case statement on disease id and name.
-- Stephen Long     08/11/2022 Changed monitoring session disease join from inner to left.
-- Stephen Long     08/24/2022 Added test name type name parameter and where criteria against test 
--                             requested.
-- Stephen Long     08/26/2022 Added additional checks on accession and entered date range checks.
-- Stephen Long     10/14/2022 Changed monitoring session disease function to monitoring session
--                             to sample disease function.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_TRANSFER_ADVANCED_SEARCH_GETList]
(
    @LanguageID NVARCHAR(50),
    @ReportOrSessionTypeID BIGINT = NULL,
    @SurveillanceTypeID BIGINT = NULL,
    @SampleStatusTypeList VARCHAR(MAX) = NULL,
    @AccessionedIndicatorList VARCHAR(3) = NULL,
    @EIDSSLocalOrFieldSampleID NVARCHAR(200) = NULL,
    @EIDSSReportCampaignOrSessionID NVARCHAR(200) = NULL,
    @SentToOrganizationID BIGINT = NULL,
    @TransferredToOrganizationID BIGINT = NULL,
    @EIDSSTransferID NVARCHAR(200) = NULL,
    @ResultsReceivedFromID BIGINT = NULL,
    @DateFrom DATETIME = NULL,
    @DateTo DATETIME = NULL,
    @EIDSSLaboratorySampleID NVARCHAR(200) = NULL,
    @SampleTypeID BIGINT = NULL,
    @TestNameTypeID BIGINT = NULL,
    @TestNameTypeName NVARCHAR(200) = NULL, 
    @DiseaseID BIGINT = NULL,
    @TestStatusTypeID BIGINT = NULL,
    @TestResultTypeID BIGINT = NULL,
    @TestResultDateFrom DATETIME = NULL,
    @TestResultDateTo DATETIME = NULL,
    @PatientName NVARCHAR(200) = NULL,
    @FarmOwnerName NVARCHAR(200) = NULL,
    @SpeciesTypeID BIGINT = NULL,
    @TransferList VARCHAR(MAX) = NULL,
    @UserID BIGINT,
    @UserEmployeeID BIGINT,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT = NULL,
    @UserSiteGroupID BIGINT = NULL,
    @Page INT = 1,
    @PageSize INT = 10,
    @SortColumn VARCHAR(200) = 'EIDSSTransferID',
    @SortOrder VARCHAR(4) = 'DESC'
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @MonitoringSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @VectorSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL,
        SampleID BIGINT NOT NULL, 
        ReadPermissionIndicator BIT NOT NULL,
        AccessToPersonalDataPermissionIndicator BIT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
        WritePermissionIndicator BIT NOT NULL,
        DeletePermissionIndicator BIT NOT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID BIGINT NOT NULL,
        SampleID BIGINT NOT NULL, 
        ReadPermissionIndicator BIT NOT NULL,
        AccessToPersonalDataPermissionIndicator BIT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
        WritePermissionIndicator BIT NOT NULL,
        DeletePermissionIndicator BIT NOT NULL
    );
    DECLARE @Favorites XML,
            @FirstRecord INT = (@Page - 1) * @PageSize,
            @LastRecord INT = (@Page * @PageSize + 1);

    BEGIN TRY
        SET @Favorites =
        (
            SELECT PreferenceDetail
            FROM dbo.UserPreference Laboratory
            WHERE idfUserID = @UserID
                  AND ModuleConstantID = 10508006
                  AND intRowStatus = 0
        );

        INSERT INTO @MonitoringSessionDiseases
        SELECT SampleID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames
        FROM dbo.FN_LAB_MONITORING_SESSION_TO_SAMPLE_DISEASES_GET(@LanguageID)
        GROUP BY SampleID;

        INSERT INTO @VectorSessionDiseases
        SELECT VectorSurveillanceSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, ';') AS DiseaseNames
        FROM dbo.FN_LAB_VECTOR_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY VectorSurveillanceSessionID;

        INSERT INTO @Results
        SELECT tr.idfTransferOut,
               m.idfMaterial,
               1,
               1,
               1,
               1,
               1
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = tom.idfMaterial
                   AND m.intRowStatus = 0
        WHERE tr.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (tr.idfSendFromOffice = @UserOrganizationID OR tr.idfSendToOffice = @UserOrganizationID)
                      OR @UserOrganizationID IS NULL
                  )
              AND (
                      (m.datAccession IS NOT NULL AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (m.datAccession IS NULL AND m.blnAccessioned = 0 AND m.datEnteringDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  );

        -- =======================================================================================
        -- CONFIGURABLE SITE FILTRATION RULES
        -- 
        -- Apply configurable site filtration rules for use case SAUC34. Some of these rules may 
        -- overlap the default rules.
        -- =======================================================================================
        --
        -- Apply at the user's site group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut,
               m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = tom.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = tr.idfsSite
            INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                ON userSiteGroup.idfsSite = @UserSiteID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE tr.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (m.datAccession IS NOT NULL AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (m.datAccession IS NULL AND m.blnAccessioned = 0 AND m.datEnteringDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut,
               m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = tom.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = tr.idfsSite
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE tr.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (m.datAccession IS NOT NULL AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (m.datAccession IS NULL AND m.blnAccessioned = 0 AND m.datEnteringDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's employee group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut,
               m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = tom.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = tr.idfsSite
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE tr.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (m.datAccession IS NOT NULL AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (m.datAccession IS NULL AND m.blnAccessioned = 0 AND m.datEnteringDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's ID level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut,
               m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = tom.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = tr.idfsSite
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE tr.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (m.datAccession IS NOT NULL AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (m.datAccession IS NULL AND m.blnAccessioned = 0 AND m.datEnteringDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut,
               m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = tom.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup sgs
                ON sgs.idfsSite = @UserSiteID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE tr.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (m.datAccession IS NOT NULL AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (m.datAccession IS NULL AND m.blnAccessioned = 0 AND m.datEnteringDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND sgs.idfsSite = tr.idfsSite;

        -- 
        -- Apply at the user's site level, granted by a site.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut,
               m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = tom.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE tr.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (m.datAccession IS NOT NULL AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (m.datAccession IS NULL AND m.blnAccessioned = 0 AND m.datEnteringDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND a.GrantingActorSiteID = tr.idfsSite;

        -- 
        -- Apply at the user's employee group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut,
               m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = tom.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE tr.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (m.datAccession IS NOT NULL AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (m.datAccession IS NULL AND m.blnAccessioned = 0 AND m.datEnteringDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND a.GrantingActorSiteID = tr.idfsSite;

        -- 
        -- Apply at the user's ID level, granted by a site.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut,
               m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = tom.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE tr.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (m.datAccession IS NOT NULL AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (m.datAccession IS NULL AND m.blnAccessioned = 0 AND m.datEnteringDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND a.GrantingActorSiteID = tr.idfsSite;

        INSERT INTO @FinalResults
        SELECT tr.idfTransferOut,
               m.idfMaterial,
               res.ReadPermissionIndicator,
               res.AccessToPersonalDataPermissionIndicator,
               res.AccessToGenderAndAgeDataPermissionIndicator,
               res.WritePermissionIndicator,
               res.DeletePermissionIndicator
        FROM @Results res
            INNER JOIN dbo.tlbTransferOUT tr
                ON tr.idfTransferOut = res.ID
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = tom.idfMaterial
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnExternalTest = 1
            LEFT JOIN dbo.tlbHumanCase hc
                ON hc.idfHumanCase = m.idfHumanCase
                   AND hc.intRowStatus = 0
            LEFT JOIN dbo.tlbVetCase vc
                ON vc.idfVetCase = m.idfVetCase
                   AND vc.intRowStatus = 0
            LEFT JOIN dbo.tlbMonitoringSession ms
                ON ms.idfMonitoringSession = m.idfMonitoringSession
                   AND ms.intRowStatus = 0
            LEFT JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                ON msd.idfMonitoringSession = ms.idfMonitoringSession
                   AND msd.intRowStatus = 0
            LEFT JOIN @VectorSessionDiseases vsDiseases
                ON vsDiseases.ID = m.idfVectorSurveillanceSession
            LEFT JOIN dbo.tlbCampaign c
                ON c.idfCampaign = ms.idfCampaign
                   AND c.intRowStatus = 0
            LEFT JOIN dbo.tlbSpecies species
                ON species.idfSpecies = m.idfSpecies
                   AND species.intRowStatus = 0
        WHERE res.ReadPermissionIndicator = 1
              AND (
                      (tr.idfTransferOut IN (
                                                SELECT CAST([Value] AS BIGINT)
                                                FROM dbo.FN_GBL_SYS_SplitList(@TransferList, NULL, ',')
                                            )
                      )
                      OR (@TransferList IS NULL)
                  )
              AND (
                      (
                          @ReportOrSessionTypeID = 10012001 --Human Disease Report
                          AND (
                                  (m.idfHumanCase IS NOT NULL)
                                  OR (
                                         m.idfMonitoringSession IS NOT NULL
                                         AND ms.SessionCategoryID = 10502001 --Human Active Surveillance Session
                                     )
                              )
                      )
                      OR (
                             @ReportOrSessionTypeID = 10012006 --Vector Surveillance Session
                             AND m.idfVectorSurveillanceSession IS NOT NULL
                         )
                      OR (
                             @ReportOrSessionTypeID = 10012005 --Veterinary Disease Report
                             AND (
                                     (m.idfVetCase IS NOT NULL)
                                     OR (
                                            m.idfMonitoringSession IS NOT NULL
                                            AND ms.SessionCategoryID IN (10502002, 10502009) --Veterinary Active Surveillance Session (Avian and Livestock)
                                        )
                                 )
                         )
                      OR (@ReportOrSessionTypeID IS NULL)
                  )
              AND (
                      (
                          @SurveillanceTypeID = 4578940000001 --Active
                          AND (
                                  m.idfMonitoringSession IS NOT NULL
                                  OR m.idfVectorSurveillanceSession IS NOT NULL
                              )
                      )
                      OR (
                             @SurveillanceTypeID = 4578940000002 --Passive
                             AND (
                                     m.idfHumanCase IS NOT NULL
                                     OR m.idfVetCase IS NOT NULL
                                 )
                         )
                      OR (@SurveillanceTypeID IS NULL)
                  )
              AND (
                      (
                          (
                              m.blnAccessioned = @AccessionedIndicatorList
                              AND m.idfsAccessionCondition IS NULL
                          )
                          OR (
                                 @AccessionedIndicatorList IS NULL
                                 AND @SampleStatusTypeList IS NULL
                             )
                      )
                      OR (
                             (
                                 (m.idfsSampleStatus IN (
                                                            SELECT CAST([Value] AS BIGINT)
                                                            FROM dbo.FN_GBL_SYS_SplitList(
                                                                                             @SampleStatusTypeList,
                                                                                             NULL,
                                                                                             ','
                                                                                         )
                                                        )
                                 )
                                 OR (
                                        m.idfsAccessionCondition IN (
                                                                        SELECT CAST([Value] AS BIGINT)
                                                                        FROM dbo.FN_GBL_SYS_SplitList(
                                                                                                         @SampleStatusTypeList,
                                                                                                         NULL,
                                                                                                         ','
                                                                                                     )
                                                                    )
                                        AND (
                                                m.idfsSampleStatus IS NULL
                                                OR m.idfsSampleStatus = 10015007 --In Repository
                                            )
                                    )
                             )
                             OR (
                                    @SampleStatusTypeList IS NULL
                                    AND @AccessionedIndicatorList IS NULL
                                )
                         )
                  )
              AND (
                      m.idfSendToOffice = @SentToOrganizationID
                      OR @SentToOrganizationID IS NULL
                  )
              AND (
                      tr.idfSendToOffice = @TransferredToOrganizationID
                      OR @TransferredToOrganizationID IS NULL
                  )
              AND (
                      t.idfTestedByOffice = @ResultsReceivedFromID
                      OR @ResultsReceivedFromID IS NULL
                  )
              AND (
                      m.idfsSampleType = @SampleTypeID
                      OR @SampleTypeID IS NULL
                  )
              AND (
                      t.idfsTestName = @TestNameTypeID
                      OR @TestNameTypeID IS NULL
                      OR tr.TestRequested LIKE '%' + @TestNameTypeName + '%' 
                      OR @TestNameTypeName IS NULL 
                  )
              AND (
                      msd.idfsDiagnosis = @DiseaseID
                      OR @DiseaseID IN (
                                SELECT CAST([Value] AS BIGINT)
                                FROM dbo.FN_GBL_SYS_SplitList(vsDiseases.DiseaseIdentifiers, NULL, ',')
                            )
                      OR m.DiseaseID = @DiseaseID
                      OR @DiseaseID IS NULL
                  )
              AND (
                      t.idfsTestStatus = @TestStatusTypeID
                      OR @TestStatusTypeID IS NULL
                  )
              AND (
                      t.idfsTestResult = @TestResultTypeID
                      OR @TestResultTypeID IS NULL
                  )
              AND (
                      species.idfsSpeciesType = @SpeciesTypeID
                      OR @SpeciesTypeID IS NULL
                  )
              AND (
                      (t.datConcludedDate
              BETWEEN @TestResultDateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @TestResultDateTo)))
                      )
                      OR (
                             @TestResultDateFrom IS NULL
                             OR @TestResultDateTo IS NULL
                         )
                  )
              AND (
                      (
                          m.strCalculatedCaseID LIKE '%' + @EIDSSReportCampaignOrSessionID + '%'
                          OR c.strCampaignID LIKE '%' + @EIDSSReportCampaignOrSessionID + '%'
                      )
                      OR (@EIDSSReportCampaignOrSessionID IS NULL)
                  )
              AND (
                      (m.strCalculatedHumanName LIKE '%' + @PatientName + '%')
                      OR (@PatientName IS NULL)
                  )
              AND (
                      m.strCalculatedHumanName LIKE '%' + @FarmOwnerName + '%'
                      OR @FarmOwnerName IS NULL
                  )
              AND (
                      m.strFieldBarcode LIKE '%' + @EIDSSLocalOrFieldSampleID + '%'
                      OR @EIDSSLocalOrFieldSampleID IS NULL
                  )
              AND (
                      tr.strBarcode LIKE '%' + @EIDSSTransferID + '%'
                      OR @EIDSSTransferID IS NULL
                  )
              AND (
                      m.strBarcode LIKE '%' + @EIDSSLaboratorySampleID + '%'
                      OR @EIDSSLaboratorySampleID IS NULL
                  )
        GROUP BY tr.idfTransferOut,
               m.idfMaterial,
               res.ReadPermissionIndicator,
               res.AccessToPersonalDataPermissionIndicator,
               res.AccessToGenderAndAgeDataPermissionIndicator,
               res.WritePermissionIndicator,
               res.DeletePermissionIndicator;

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        DECLARE @InProgressCount INT = (SELECT COUNT(res.ID)
        FROM @FinalResults res
        INNER JOIN dbo.tlbTransferOUT tr ON tr.idfTransferOut = res.ID
        WHERE tr.idfsTransferStatus IN (   10001003, --In Progress
                                                10001006 --Amended
                                            ));

        SELECT TransferID,
               EIDSSTransferID,
               TransferredOutSampleID,
               TransferredInSampleID,
               FavoriteIndicator,
               EIDSSReportOrSessionID,
               PatientOrFarmOwnerName,
               EIDSSLaboratorySampleID,
               TransferredToOrganizationID,
               TransferredToOrganizationName,
               TransferredFromOrganizationID,
               TransferDate,
               TestRequested,
               TestID,
               TestNameTypeID,
               TestNameTypeName,
               TestResultTypeID,
               TestResultTypeName,
               TestStatusTypeID,
               TestStatusTypeName,
               TestCategoryTypeID,
               StartedDate,
               ResultDate,
               ContactPersonName,
               EIDSSLocalOrFieldSampleID,
               SampleTypeName,
               DiseaseID,
               DiseaseName,
               AccessionDate,
               FunctionalAreaID,
               FunctionalAreaName,
               AccessionIndicator,
               AccessionConditionTypeID,
               SampleStatusTypeID,
               AccessionConditionOrSampleStatusTypeName,
               AccessionComment,
               PurposeOfTransfer,
               TransferredFromOrganizationSiteID,
               SentToOrganizationID,
               SentByPersonID,
               TransferStatusTypeID,
               RowStatus,
               EIDSSAnimalID,
               TestAssignedIndicator,
               NonEIDSSLaboratoryIndicator,
               ReadPermissionIndicator,
               AccessToPersonalDataPermissionIndicator,
               AccessToGenderAndAgeDataPermissionIndicator,
               WritePermissionIndicator,
               DeletePermissionIndicator,
               RowAction,
               RowSelectionIndicator,
               CurrentPage,
               InProgressCount, 
               TotalRowCount
        FROM
        (
            SELECT ROW_NUMBER() OVER (ORDER BY CASE
                                                   WHEN @SortColumn = 'EIDSSReportOrSessionID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.strCalculatedCaseID
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSReportOrSessionID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.strCalculatedCaseID
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'PatientOrFarmOwnerName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.strCalculatedHumanName
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'PatientOrFarmOwnerName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.strCalculatedHumanName
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSLaboratorySampleID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.strBarcode
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSLaboratorySampleID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.strBarcode
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSTransferID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       tr.strBarcode
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSTransferID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       tr.strBarcode
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'TransferredToOrganizationName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       transferredToOrganization.FullName
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'TransferredToOrganizationName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       transferredToOrganization.FullName
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'TransferDate'
                                                        AND @SortOrder = 'ASC' THEN
                                                       tr.datSendDate
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'TransferDate'
                                                        AND @SortOrder = 'DESC' THEN
                                                       tr.datSendDate
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'TestRequested'
                                                        AND @SortOrder = 'ASC' THEN
                                                       tr.TestRequested
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'TestRequested'
                                                        AND @SortOrder = 'DESC' THEN
                                                       tr.TestRequested
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'TestNameTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       testNameType.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'TestNameTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       testNameType.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'TestResultTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       testResultType.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'TestResultTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       testResultType.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'ResultDate'
                                                        AND @SortOrder = 'ASC' THEN
                                                       t.datConcludedDate
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'ResultDate'
                                                        AND @SortOrder = 'DESC' THEN
                                                       t.datConcludedDate
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'PointOfContact'
                                                        AND @SortOrder = 'ASC' THEN
                                                       t.strContactPerson
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'PointOfContact'
                                                        AND @SortOrder = 'DESC' THEN
                                                       t.strContactPerson
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSLocalOrFieldSampleID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.strFieldBarcode
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSLocalOrFieldSampleID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.strFieldBarcode
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'SampleTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       sampleType.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'SampleTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       sampleType.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'DiseaseName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       CASE
                                                           WHEN m.DiseaseID IS NOT NULL THEN 
                                                               diseaseName.name
                                                           WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                                                               msDiseases.DiseaseNames
                                                           WHEN (m.DiseaseID IS NULL AND ISNULL(m.idfVectorSurveillanceSession, '') = '') THEN
                                                               vsDiseases.DiseaseNames
                                                           ELSE
                                                               ''
                                                       END
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'DiseaseName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       CASE
                                                           WHEN m.DiseaseID IS NOT NULL THEN 
                                                               diseaseName.name
                                                           WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                                                               msDiseases.DiseaseNames
                                                           WHEN (m.DiseaseID IS NULL AND ISNULL(m.idfVectorSurveillanceSession, '') = '') THEN
                                                               vsDiseases.DiseaseNames
                                                           ELSE
                                                               ''
                                                       END
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AccessionDate'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.datAccession
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AccessionDate'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.datAccession
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AccessionConditionOrSampleStatusTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       CASE
                                                           WHEN m.blnAccessioned = 0
                                                                AND m.idfsAccessionCondition IS NULL THEN
                                                               'Un-accessioned'
                                                           WHEN m.idfsSampleStatus IS NULL THEN
                                                               accessionConditionType.name
                                                           WHEN m.idfsSampleStatus = 10015007 --In Repository
                                               THEN
                                                               accessionConditionType.name
                                                           ELSE
                                                               sampleStatusType.name
                                                       END
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AccessionConditionOrSampleStatusTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       CASE
                                                           WHEN m.blnAccessioned = 0
                                                                AND m.idfsAccessionCondition IS NULL THEN
                                                               'Un-accessioned'
                                                           WHEN m.idfsSampleStatus IS NULL THEN
                                                               accessionConditionType.name
                                                           WHEN m.idfsSampleStatus = 10015007 --In Repository
                                               THEN
                                                               accessionConditionType.name
                                                           ELSE
                                                               sampleStatusType.name
                                                       END
                                               END DESC
                                     ) AS RowNum,
                   tr.idfTransferOut AS TransferID,
                   tr.strBarcode AS EIDSSTransferID,
                   m.idfMaterial AS TransferredOutSampleID,
                   (
                       SELECT TOP 1
                           idfMaterial
                       FROM dbo.tlbMaterial
                       WHERE idfRootMaterial = m.idfMaterial
                             AND intRowStatus = 0
                             AND idfsSampleKind = 12675430000000 --Transferred in
                   ) AS TransferredInSampleID,
                   CASE
                       WHEN f.SampleID IS NULL THEN
                           0
                       ELSE
                           1
                   END AS FavoriteIndicator,
                   m.strCalculatedCaseID AS EIDSSReportOrSessionID,
                   CASE
                       WHEN res.AccessToPersonalDataPermissionIndicator = 0 THEN
                           '********'
                       ELSE
                           m.strCalculatedHumanName
                   END AS PatientOrFarmOwnerName,
                   m.strBarcode AS EIDSSLaboratorySampleID,
                   tr.idfSendToOffice AS TransferredToOrganizationID,
                   transferredToOrganization.[FullName] AS TransferredToOrganizationName,
                   tr.idfSendFromOffice AS TransferredFromOrganizationID,
                   tr.datSendDate AS TransferDate,
                   tr.TestRequested,
                   t.idfTesting AS TestID,
                   t.idfsTestName AS TestNameTypeID,
                   testNameType.name AS TestNameTypeName,
                   t.idfsTestResult AS TestResultTypeID,
                   testResultType.name AS TestResultTypeName,
                   t.idfsTestStatus AS TestStatusTypeID,
                   testStatusType.name AS TestStatusTypeName,
                   t.idfsTestCategory AS TestCategoryTypeID,
                   t.datStartedDate AS StartedDate,
                   t.datConcludedDate AS ResultDate,
                   t.strContactPerson AS ContactPersonName,
                   m.strFieldBarcode AS EIDSSLocalOrFieldSampleID,
                   sampleType.name AS SampleTypeName,
                   CASE
                       WHEN m.DiseaseID IS NOT NULL THEN
                           CAST(m.DiseaseID AS NVARCHAR(MAX))
                       WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                           msDiseases.DiseaseIdentifiers
                       WHEN (m.DiseaseID IS NULL AND ISNULL(m.idfVectorSurveillanceSession, '') = '') THEN
                           vsDiseases.DiseaseIdentifiers
                       ELSE
                           '' 
                   END AS DiseaseID,
                   CASE
                       WHEN m.DiseaseID IS NOT NULL THEN 
                           diseaseName.name
                       WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                           msDiseases.DiseaseNames
                       WHEN (m.DiseaseID IS NULL AND ISNULL(m.idfVectorSurveillanceSession, '') = '') THEN
                           vsDiseases.DiseaseNames
                       ELSE
                           ''
                   END AS DiseaseName,
                   m.datAccession AS AccessionDate,
                   m.idfInDepartment AS FunctionalAreaID,
                   functionalArea.name AS FunctionalAreaName,
                   m.blnAccessioned AS AccessionIndicator,
                   m.idfsAccessionCondition AS AccessionConditionTypeID,
                   m.idfsSampleStatus AS SampleStatusTypeID,
                   (CASE
                        WHEN m.blnAccessioned = 0
                             AND m.idfsAccessionCondition IS NULL THEN
                            'Un-accessioned'
                        WHEN m.idfsSampleStatus IS NULL THEN
                            accessionConditionType.name
                        WHEN m.idfsSampleStatus = 10015007 --In Repository
                   THEN
                            accessionConditionType.name
                        ELSE
                            sampleStatusType.name
                    END
                   ) AS AccessionConditionOrSampleStatusTypeName,
                   m.strCondition AS AccessionComment,
                   tr.strNote AS PurposeOfTransfer,
                   tr.idfsSite AS TransferredFromOrganizationSiteID,
                   m.idfSendToOffice AS SentToOrganizationID,
                   tr.idfSendByPerson AS SentByPersonID,
                   tr.idfsTransferStatus AS TransferStatusTypeID,
                   tr.intRowStatus AS RowStatus,
                   a.strAnimalCode AS EIDSSAnimalID,
                   IIF(
                      (
                          SELECT COUNT(t2.idfTesting)
                          FROM dbo.tlbTesting t2
                          WHERE t2.idfsTestStatus IN (   10001003,
                                                                  --In Progress
                                                         10001004,
                                                                  --Preliminary
                                                         10001005 --Not Started
                                                     )
                                AND t2.idfMaterial = m.idfMaterial
                      ) > 0,
                      1,
                      0) AS TestAssignedIndicator,
                   (CASE
                        WHEN transferredToOrganization.idfsSite IS NULL THEN
                            1
                        ELSE
                            0
                    END
                   ) AS NonEIDSSLaboratoryIndicator,
                   res.ReadPermissionIndicator,
                   res.AccessToPersonalDataPermissionIndicator,
                   res.AccessToGenderAndAgeDataPermissionIndicator,
                   res.WritePermissionIndicator,
                   res.DeletePermissionIndicator,
                   0 AS RowAction,
                   0 AS RowSelectionIndicator,
                   @Page AS CurrentPage,
                   @InProgressCount AS InProgressCount, 
                   COUNT(*) OVER () AS TotalRowCount
            FROM @FinalResults res
                INNER JOIN dbo.tlbTransferOUT tr
                    ON tr.idfTransferOut = res.ID
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = res.SampleID
                       AND m.intRowStatus = 0
                LEFT JOIN dbo.tlbTesting t
                    ON t.idfMaterial = m.idfMaterial
                       AND t.intRowStatus = 0
                       AND t.blnExternalTest = 1
                LEFT JOIN
                (
                    SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                    FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
                ) f
                    ON m.idfMaterial = f.SampleID
                LEFT JOIN dbo.tlbAnimal a
                    ON a.idfAnimal = m.idfAnimal
                       AND a.intRowStatus = 0
                LEFT JOIN @MonitoringSessionDiseases msDiseases
                    ON msDiseases.ID = m.idfMaterial
                       AND m.idfMonitoringSession IS NOT NULL
                LEFT JOIN @VectorSessionDiseases vsDiseases
                    ON vsDiseases.ID = m.idfVectorSurveillanceSession
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) diseaseName
                    ON diseaseName.idfsReference = m.DiseaseID
                LEFT JOIN dbo.FN_GBL_Institution(@LanguageID) transferredToOrganization
                    ON transferredToOrganization.idfOffice = tr.idfSendToOffice
                       AND transferredToOrganization.intRowStatus = 0
                LEFT JOIN dbo.tlbDepartment d
                    ON d.idfDepartment = m.idfInDepartment
                       AND d.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000164) functionalArea
                    ON functionalArea.idfsReference = d.idfsDepartmentName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                    ON sampleType.idfsReference = m.idfsSampleType
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                    ON testNameType.idfsReference = t.idfsTestName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                    ON testResultType.idfsReference = t.idfsTestResult
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                    ON testStatusType.idfsReference = t.idfsTestStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                    ON accessionConditionType.idfsReference = m.idfsAccessionCondition
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                    ON sampleStatusType.idfsReference = m.idfsSampleStatus
        ) AS x
        WHERE RowNum > @FirstRecord
              AND RowNum < @LastRecord
        ORDER BY RowNum;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_TRANSFER_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_TRANSFER_GETList
--
-- Description:	Get laboratory transfer list for the various laboratory use cases.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     10/18/2018 Initial release.
-- Stephen Long     12/19/2018 Added pagination logic.
-- Stephen Long     01/25/2019 Added row selection indicator and corrected intRowStatus in where 
--                             clause to use sample table instead of testing table.
-- Stephen Long     01/30/2019 Added sample disease reference join, and removed the vector 
--                             surveillance session joins as they are no longer needed.
-- Stephen Long     02/09/2019 Added sample ID parameter.
-- Stephen Long     02/19/2019 Added test requested, disease ID and functional area to the select 
--                             list.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     08/19/2019 Added comma to sent by person name (last name ', ' first name).
-- Stephen Long     09/14/2019 Added pagination set 0 to bring back "all" records.
-- Stephen Long     10/21/2019 Added accession indicator and test status type ID to the list of 
--                             fields.
-- Stephen Long     01/22/2020 Added site list for site filtration.
-- Stephen Long     03/11/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     03/17/2020 Removed declined transfer status from inclusion in the list.
-- Stephen Long     03/30/2020 Changed criteria on transferred in sample left join.
-- Stephen Long     04/07/2020 Added test name type ID to model, and corrected test assigned 
--                             indicator.
-- Stephen Long     04/23/2020 Correction on disease ID and disease name; add vector surveillance 
--                             session.
-- Stephen Long     04/26/2020 Added sent to organization ID to the model.
-- Stephen Long     05/06/2020 Added test started date and test category type name to the model.
-- Stephen Long     06/09/2020 Added intRowStatus check on transferred from organization.
-- Stephen Long     06/24/2020 Added external test check to the test left join.
-- Jason Li			09/24/2020 Remove blnExternalTest --AND t.blnExternalTest = 1 at line 224
-- Stephen Long     11/28/2020 Added configurable site filtration rules.
-- Stephen Long     12/16/2020 Changed join for vector surveillance session diseases to the sample
--                             table.
-- Stephen Long     12/31/2020 Change function on reference data to handle inactive records.
-- Mark Wilson		08/17/2021 Join tlbMonitoringSessionToDiagnosis to get diagnosis
-- Stephen Long     09/25/2021 Added new pagination and order by.
-- Stephen Long     11/18/2021 Added test status type name to the query.
-- Stephen Long     12/08/2021 Changed pagination logic and removed option recompile.
-- Stephen Long     02/03/2022 Corrected monitoring session to diagnosis join.
-- Stephen Long     02/10/2022 Replaced joins for monitoring session and vector session
--                             disease references to improve performance.
-- Stephen Long     03/24/2022 Added final results table variable to account for duplicates that 
--                             may return from filtration rules.
-- Stephen Long     05/17/2022 Removed primary key from monitoring and vector session disease 
--                             table variables.
-- Stephen Long     05/20/2022 Added string agg to session diseases.
-- Stephen Long     07/26/2022 Updated case statement on disease id and name.
-- Stephen Long     08/12/2022 Changed default sort column to EIDSSTransferID.
-- Stephen Long     10/14/2022 Changed monitoring session disease function to monitoring session
--                             to sample disease function.
--
-- Testing Code:
/*
DECLARE	@return_value int

EXEC	@return_value = [dbo].[USP_LAB_TRANSFER_GETList]
		@LanguageID = N'en-US',
		@UserID = 161287150000872, --rykermase
		@UserEmployeeID = 420664190000872,
		@UserSiteID = 864,
		@UserOrganizationID = 758210000000,
		@UserSiteGroupID = NULL,
		@Page = 1,
		@PageSize = 10,
		@SortColumn = N'EIDSSLaboratorySampleID',
		@SortOrder = N'DESC'

SELECT	'Return Value' = @return_value

GO
*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_TRANSFER_GETList]
(
    @LanguageID NVARCHAR(50),
    @SampleID BIGINT = NULL,
    @UserID BIGINT,
    @UserEmployeeID BIGINT,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT = NULL,
    @UserSiteGroupID BIGINT = NULL,
    @Page INT = 1,
    @PageSize INT = 10,
    @SortColumn VARCHAR(200) = 'EIDSSTransferID',
    @SortOrder VARCHAR(4) = 'DESC'
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @MonitoringSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @VectorSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL,
        SampleID BIGINT NOT NULL,
        ReadPermissionIndicator BIT NOT NULL,
        AccessToPersonalDataPermissionIndicator BIT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
        WritePermissionIndicator BIT NOT NULL,
        DeletePermissionIndicator BIT NOT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID BIGINT NOT NULL,
        SampleID BIGINT NOT NULL,
        ReadPermissionIndicator BIT NOT NULL,
        AccessToPersonalDataPermissionIndicator BIT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
        WritePermissionIndicator BIT NOT NULL,
        DeletePermissionIndicator BIT NOT NULL
    );
    DECLARE @Favorites XML,
            @FirstRecord INT = (@Page - 1) * @PageSize,
            @LastRecord INT = (@Page * @PageSize + 1);

    BEGIN TRY
        SET @Favorites =
        (
            SELECT PreferenceDetail
            FROM dbo.UserPreference Laboratory
            WHERE idfUserID = @UserID
                  AND ModuleConstantID = 10508006
                  AND intRowStatus = 0
        );

        INSERT INTO @MonitoringSessionDiseases
        SELECT SampleID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames
        FROM dbo.FN_LAB_MONITORING_SESSION_TO_SAMPLE_DISEASES_GET(@LanguageID)
        GROUP BY SampleID;

        INSERT INTO @VectorSessionDiseases
        SELECT VectorSurveillanceSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, ';') AS DiseaseNames
        FROM dbo.FN_LAB_VECTOR_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY VectorSurveillanceSessionID;

        IF @SampleID IS NULL
        BEGIN
            INSERT INTO @Results
            SELECT tr.idfTransferOut,
                   tom.idfMaterial,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbTransferOUT tr
                INNER JOIN dbo.tlbTransferOutMaterial tom
                    ON tom.idfTransferOut = tr.idfTransferOut
                       AND tom.intRowStatus = 0
            WHERE (
                      tr.idfSendFromOffice = @UserOrganizationID
                      OR tr.idfSendToOffice = @UserOrganizationID
                  )
                  AND (tr.idfsTransferStatus IN (   10001003,
                                                             --In Progress
                                                    10001006 --Amended
                                                )
                      )
                  AND tr.intRowStatus = 0;

            -- =======================================================================================
            -- CONFIGURABLE SITE FILTRATION RULES
            -- 
            -- Apply configurable site filtration rules for use case SAUC34. Some of these rules may 
            -- overlap the non-configurable rules.
            -- =======================================================================================
            --
            -- Apply at the user's site group level, granted by a site group.
            --
            INSERT INTO @Results
            SELECT tr.idfTransferOut,
                   tom.idfMaterial,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.tlbTransferOUT tr
                INNER JOIN dbo.tlbTransferOutMaterial tom
                    ON tom.idfTransferOut = tr.idfTransferOut
                       AND tom.intRowStatus = 0
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = tr.idfsSite
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = @UserSiteGroupID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
            WHERE tr.intRowStatus = 0
                  AND @UserSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site level, granted by a site group.
            --
            INSERT INTO @Results
            SELECT tr.idfTransferOut,
                   tom.idfMaterial,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.tlbTransferOUT tr
                INNER JOIN dbo.tlbTransferOutMaterial tom
                    ON tom.idfTransferOut = tr.idfTransferOut
                       AND tom.intRowStatus = 0
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = tr.idfsSite
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
            WHERE tr.intRowStatus = 0
                  AND ar.GrantingActorSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's employee group level, granted by a site group.
            --
            INSERT INTO @Results
            SELECT tr.idfTransferOut,
                   tom.idfMaterial,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.tlbTransferOUT tr
                INNER JOIN dbo.tlbTransferOutMaterial tom
                    ON tom.idfTransferOut = tr.idfTransferOut
                       AND tom.intRowStatus = 0
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = tr.idfsSite
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
            WHERE tr.intRowStatus = 0
                  AND ar.GrantingActorSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's ID level, granted by a site group.
            --
            INSERT INTO @Results
            SELECT tr.idfTransferOut,
                   tom.idfMaterial,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.tlbTransferOUT tr
                INNER JOIN dbo.tlbTransferOutMaterial tom
                    ON tom.idfTransferOut = tr.idfTransferOut
                       AND tom.intRowStatus = 0
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = tr.idfsSite
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
            WHERE tr.intRowStatus = 0
                  AND ar.GrantingActorSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site group level, granted by a site.
            --
            INSERT INTO @Results
            SELECT tr.idfTransferOut,
                   tom.idfMaterial,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.tlbTransferOUT tr
                INNER JOIN dbo.tlbTransferOutMaterial tom
                    ON tom.idfTransferOut = tr.idfTransferOut
                       AND tom.intRowStatus = 0
                INNER JOIN dbo.tflSiteToSiteGroup sgs
                    ON sgs.idfSiteGroup = @UserSiteGroupID
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
            WHERE tr.intRowStatus = 0
                  AND @UserSiteGroupID IS NOT NULL
                  AND sgs.idfsSite = tr.idfsSite;

            -- 
            -- Apply at the user's site level, granted by a site.
            --
            INSERT INTO @Results
            SELECT tr.idfTransferOut,
                   tom.idfMaterial,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.AccessRule ar
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.tlbTransferOUT tr
                    ON tr.intRowStatus = 0
                INNER JOIN dbo.tlbTransferOutMaterial tom
                    ON tom.idfTransferOut = tr.idfTransferOut
                       AND tom.intRowStatus = 0
            WHERE ar.GrantingActorSiteID IS NOT NULL
                  AND tr.idfsSite = ar.GrantingActorSiteID;

            -- 
            -- Apply at the user's employee group level, granted by a site.
            --
            INSERT INTO @Results
            SELECT tr.idfTransferOut,
                   tom.idfMaterial,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.AccessRule ar
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.tlbTransferOUT tr
                    ON tr.intRowStatus = 0
                INNER JOIN dbo.tlbTransferOutMaterial tom
                    ON tom.idfTransferOut = tr.idfTransferOut
                       AND tom.intRowStatus = 0
            WHERE ar.GrantingActorSiteID IS NOT NULL
                  AND tr.idfsSite = ar.GrantingActorSiteID;

            -- 
            -- Apply at the user's ID level, granted by a site.
            --
            INSERT INTO @Results
            SELECT tr.idfTransferOut,
                   tom.idfMaterial,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.AccessRule ar
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.tlbTransferOUT tr
                    ON tr.intRowStatus = 0
                INNER JOIN dbo.tlbTransferOutMaterial tom
                    ON tom.idfTransferOut = tr.idfTransferOut
                       AND tom.intRowStatus = 0
            WHERE ar.GrantingActorSiteID IS NOT NULL
                  AND tr.idfsSite = ar.GrantingActorSiteID;

            INSERT INTO @FinalResults
            SELECT res.ID,
                   res.SampleID,
                   CASE
                       WHEN EXISTS
        (
            SELECT ReadPermissionIndicator FROM @Results WHERE ID = ID
        )          THEN
                           1
                       ELSE
                           0
                   END,
                   CASE
                       WHEN EXISTS
        (
            SELECT AccessToPersonalDataPermissionIndicator FROM @Results WHERE ID = ID
        )          THEN
                           1
                       ELSE
                           0
                   END,
                   CASE
                       WHEN EXISTS
        (
            SELECT AccessToGenderAndAgeDataPermissionIndicator
            FROM @Results
            WHERE ID = ID
        )          THEN
                           1
                       ELSE
                           0
                   END,
                   CASE
                       WHEN EXISTS
        (
            SELECT WritePermissionIndicator FROM @Results WHERE ID = ID
        )          THEN
                           1
                       ELSE
                           0
                   END,
                   CASE
                       WHEN EXISTS
        (
            SELECT DeletePermissionIndicator FROM @Results WHERE ID = ID
        )          THEN
                           1
                       ELSE
                           0
                   END
            FROM @Results res
                INNER JOIN dbo.tlbTransferOUT tr
                    ON tr.idfTransferOut = res.ID
                INNER JOIN dbo.tlbTransferOutMaterial tom
                    ON tom.idfTransferOut = tr.idfTransferOut
                       AND tom.intRowStatus = 0
            WHERE (
                      tr.idfSendFromOffice = @UserOrganizationID
                      OR tr.idfSendToOffice = @UserOrganizationID
                  )
                  AND (
                          tom.idfMaterial = @SampleID
                          OR @SampleID IS NULL
                      )
                  AND (tr.idfsTransferStatus IN (   10001003,
                                                             --In Progress
                                                    10001006 --Amended
                                                )
                      )
                  AND tr.intRowStatus = 0
            GROUP BY ID,
                     SampleID;
        END
        ELSE
        BEGIN
            INSERT INTO @FinalResults
            SELECT tr.idfTransferOut,
                   tom.idfMaterial,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbTransferOUT tr
                INNER JOIN dbo.tlbTransferOutMaterial tom
                    ON tom.idfTransferOut = tr.idfTransferOut
                       AND tom.intRowStatus = 0
            WHERE tom.idfMaterial = @SampleID
                  AND tr.intRowStatus = 0;
        END

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        DECLARE @InProgressCount INT = (SELECT COUNT(DISTINCT res.ID)
        FROM @FinalResults res
        INNER JOIN dbo.tlbTransferOUT tr ON tr.idfTransferOut = res.ID
        WHERE tr.idfsTransferStatus IN (   10001003, --In Progress
                                                10001006 --Amended
                                            ));

        SELECT TransferID,
               EIDSSTransferID,
               TransferredOutSampleID,
               TransferredInSampleID,
               FavoriteIndicator,
               EIDSSReportOrSessionID,
               PatientOrFarmOwnerName,
               EIDSSLaboratorySampleID,
               TransferredToOrganizationID,
               TransferredToOrganizationName,
               TransferredFromOrganizationID,
               TransferDate,
               TestRequested,
               TestID,
               TestNameTypeID,
               TestNameTypeName,
               TestResultTypeID,
               TestResultTypeName,
               TestStatusTypeID,
               TestStatusTypeName,
               TestCategoryTypeID,
               StartedDate,
               ResultDate,
               ContactPersonName,
               EIDSSLocalOrFieldSampleID,
               SampleTypeName,
               DiseaseID,
               DiseaseName,
               AccessionDate,
               FunctionalAreaID,
               FunctionalAreaName,
               AccessionIndicator,
               AccessionConditionTypeID,
               SampleStatusTypeID,
               AccessionConditionOrSampleStatusTypeName,
               AccessionComment,
               PurposeOfTransfer,
               TransferredFromOrganizationSiteID,
               TransferredToOrganizationSiteID,
               SentToOrganizationID,
               SentByPersonID,
               TransferStatusTypeID,
               RowStatus,
               EIDSSAnimalID,
               TestAssignedIndicator,
               NonEIDSSLaboratoryIndicator,
               ReadPermissionIndicator,
               AccessToPersonalDataPermissionIndicator,
               AccessToGenderAndAgeDataPermissionIndicator,
               WritePermissionIndicator,
               DeletePermissionIndicator,
               RowAction,
               RowSelectionIndicator,
               CurrentPage,
               InProgressCount, 
               TotalRowCount
        FROM
        (
            SELECT ROW_NUMBER() OVER (ORDER BY CASE
                                                   WHEN @SortColumn = 'EIDSSReportOrSessionID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.strCalculatedCaseID
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSReportOrSessionID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.strCalculatedCaseID
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'PatientOrFarmOwnerName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.strCalculatedHumanName
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'PatientOrFarmOwnerName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.strCalculatedHumanName
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSLaboratorySampleID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.strBarcode
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSLaboratorySampleID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.strBarcode
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSTransferID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       tr.strBarcode
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSTransferID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       tr.strBarcode
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'TransferredToOrganizationName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       transferredToOrganization.AbbreviatedName
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'TransferredToOrganizationName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       transferredToOrganization.AbbreviatedName
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'TransferDate'
                                                        AND @SortOrder = 'ASC' THEN
                                                       tr.datSendDate
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'TransferDate'
                                                        AND @SortOrder = 'DESC' THEN
                                                       tr.datSendDate
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'TestRequested'
                                                        AND @SortOrder = 'ASC' THEN
                                                       tr.TestRequested
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'TestRequested'
                                                        AND @SortOrder = 'DESC' THEN
                                                       tr.TestRequested
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'TestNameTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       testNameType.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'TestNameTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       testNameType.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'TestResultTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       testResultType.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'TestResultTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       testResultType.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'ResultDate'
                                                        AND @SortOrder = 'ASC' THEN
                                                       t.datConcludedDate
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'ResultDate'
                                                        AND @SortOrder = 'DESC' THEN
                                                       t.datConcludedDate
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'PointOfContact'
                                                        AND @SortOrder = 'ASC' THEN
                                                       t.strContactPerson
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'PointOfContact'
                                                        AND @SortOrder = 'DESC' THEN
                                                       t.strContactPerson
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSLocalOrFieldSampleID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.strFieldBarcode
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSLocalOrFieldSampleID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.strFieldBarcode
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'SampleTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       sampleType.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'SampleTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       sampleType.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'DiseaseName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       CASE
                                                           WHEN m.DiseaseID IS NOT NULL THEN
                                                               diseaseName.name
                                                           WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                                                               msDiseases.DiseaseNames
                                                           WHEN
                                                           (
                                                               m.DiseaseID IS NULL
                                                               AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                                                           ) THEN
                                                               vsDiseases.DiseaseNames
                                                           ELSE
                                                               ''
                                                       END
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'DiseaseName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       CASE
                                                           WHEN m.DiseaseID IS NOT NULL THEN
                                                               diseaseName.name
                                                           WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                                                               msDiseases.DiseaseNames
                                                           WHEN
                                                           (
                                                               m.DiseaseID IS NULL
                                                               AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                                                           ) THEN
                                                               vsDiseases.DiseaseNames
                                                           ELSE
                                                               ''
                                                       END
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AccessionDate'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.datAccession
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AccessionDate'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.datAccession
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AccessionConditionOrSampleStatusTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       CASE
                                                           WHEN m.blnAccessioned = 0
                                                                AND m.idfsAccessionCondition IS NULL THEN
                                                               'Un-accessioned'
                                                           WHEN m.idfsSampleStatus IS NULL THEN
                                                               accessionConditionType.name
                                                           WHEN m.idfsSampleStatus = 10015007 --In Repository
                                               THEN
                                                               accessionConditionType.name
                                                           ELSE
                                                               sampleStatusType.name
                                                       END
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AccessionConditionOrSampleStatusTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       CASE
                                                           WHEN m.blnAccessioned = 0
                                                                AND m.idfsAccessionCondition IS NULL THEN
                                                               'Un-accessioned'
                                                           WHEN m.idfsSampleStatus IS NULL THEN
                                                               accessionConditionType.name
                                                           WHEN m.idfsSampleStatus = 10015007 --In Repository
                                               THEN
                                                               accessionConditionType.name
                                                           ELSE
                                                               sampleStatusType.name
                                                       END
                                               END DESC
                                     ) AS RowNum,
                   tr.idfTransferOut AS TransferID,
                   tr.strBarcode AS EIDSSTransferID,
                   m.idfMaterial AS TransferredOutSampleID,
                   (
                       SELECT TOP 1
                           idfMaterial
                       FROM dbo.tlbMaterial
                       WHERE idfRootMaterial = m.idfMaterial
                             AND intRowStatus = 0
                             AND idfsSampleKind = 12675430000000 --Transferred in
                   ) AS TransferredInSampleID,
                   CASE
                       WHEN f.SampleID IS NULL THEN
                           0
                       ELSE
                           1
                   END AS FavoriteIndicator,
                   m.strCalculatedCaseID AS EIDSSReportOrSessionID,
                   m.strCalculatedHumanName AS PatientOrFarmOwnerName,
                   m.strBarcode AS EIDSSLaboratorySampleID,
                   tr.idfSendToOffice AS TransferredToOrganizationID,
                   transferredToOrganization.AbbreviatedName AS TransferredToOrganizationName,
                   tr.idfSendFromOffice AS TransferredFromOrganizationID,
                   tr.datSendDate AS TransferDate,
                   tr.TestRequested,
                   t.idfTesting AS TestID,
                   t.idfsTestName AS TestNameTypeID,
                   testNameType.name AS TestNameTypeName,
                   t.idfsTestResult AS TestResultTypeID,
                   testResultType.name AS TestResultTypeName,
                   t.idfsTestStatus AS TestStatusTypeID,
                   testStatusType.name AS TestStatusTypeName,
                   t.idfsTestCategory AS TestCategoryTypeID,
                   t.datStartedDate AS StartedDate,
                   t.datConcludedDate AS ResultDate,
                   t.strContactPerson AS ContactPersonName,
                   m.strFieldBarcode AS EIDSSLocalOrFieldSampleID,
                   sampleType.name AS SampleTypeName,
                   CASE
                       WHEN m.DiseaseID IS NOT NULL THEN
                           CAST(m.DiseaseID AS NVARCHAR(MAX))
                       WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                           msDiseases.DiseaseIdentifiers
                       WHEN
                       (
                           m.DiseaseID IS NULL
                           AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                       ) THEN
                           vsDiseases.DiseaseIdentifiers
                       ELSE
                           ''
                   END AS DiseaseID,
                   CASE
                       WHEN m.DiseaseID IS NOT NULL THEN
                           diseaseName.name
                       WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                           msDiseases.DiseaseNames
                       WHEN
                       (
                           m.DiseaseID IS NULL
                           AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                       ) THEN
                           vsDiseases.DiseaseNames
                       ELSE
                           ''
                   END AS DiseaseName,
                   m.datAccession AS AccessionDate,
                   m.idfInDepartment AS FunctionalAreaID,
                   functionalArea.name AS FunctionalAreaName,
                   m.blnAccessioned AS AccessionIndicator,
                   m.idfsAccessionCondition AS AccessionConditionTypeID,
                   m.idfsSampleStatus AS SampleStatusTypeID,
                   CASE
                       WHEN m.blnAccessioned = 0
                            AND m.idfsAccessionCondition IS NULL THEN
                           'Un-accessioned'
                       WHEN m.idfsSampleStatus IS NULL THEN
                           accessionConditionType.name
                       WHEN m.idfsSampleStatus = 10015007 --In Repository
                   THEN
                           accessionConditionType.name
                       ELSE
                           sampleStatusType.name
                   END AS AccessionConditionOrSampleStatusTypeName,
                   m.strCondition AS AccessionComment,
                   tr.strNote AS PurposeOfTransfer,
                   tr.idfsSite AS TransferredFromOrganizationSiteID,
                   transferredToOrganization.idfsSite AS TransferredToOrganizationSiteID,
                   m.idfSendToOffice AS SentToOrganizationID,
                   tr.idfSendByPerson AS SentByPersonID,
                   tr.idfsTransferStatus AS TransferStatusTypeID,
                   tr.intRowStatus AS RowStatus,
                   a.strAnimalCode AS EIDSSAnimalID,
                   CASE
                       WHEN m.TestUnassignedIndicator = 1 THEN
                           0
                       ELSE
                           1
                   END AS TestAssignedIndicator,
                   CASE
                       WHEN transferredToOrganization.idfsSite IS NULL THEN
                           1
                       ELSE
                           0
                   END AS NonEIDSSLaboratoryIndicator,
                   ReadPermissionIndicator,
                   AccessToPersonalDataPermissionIndicator,
                   AccessToGenderAndAgeDataPermissionIndicator,
                   WritePermissionIndicator,
                   DeletePermissionIndicator,
                   0 AS RowAction,
                   0 AS RowSelectionIndicator,
                   @Page AS CurrentPage,
                   @InProgressCount AS InProgressCount, 
                   COUNT(*) OVER () AS TotalRowCount
            FROM @FinalResults res
                INNER JOIN dbo.tlbTransferOUT tr
                    ON tr.idfTransferOut = res.ID
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = res.SampleID
                       AND m.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                    ON sampleType.idfsReference = m.idfsSampleType
                INNER JOIN dbo.FN_GBL_Institution_Min(@LanguageID) transferredToOrganization
                    ON transferredToOrganization.idfOffice = tr.idfSendToOffice
                LEFT JOIN dbo.tlbTesting t
                    ON t.idfMaterial = m.idfMaterial
                       AND t.intRowStatus = 0
                       AND t.blnExternalTest = 1
                LEFT JOIN
                (
                    SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                    FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
                ) f
                    ON m.idfMaterial = f.SampleID
                LEFT JOIN dbo.tlbAnimal a
                    ON a.idfAnimal = m.idfAnimal
                       AND a.intRowStatus = 0
                LEFT JOIN @MonitoringSessionDiseases msDiseases
                    ON msDiseases.ID = m.idfMaterial
                       AND m.idfMonitoringSession IS NOT NULL
                LEFT JOIN @VectorSessionDiseases vsDiseases
                    ON vsDiseases.ID = m.idfVectorSurveillanceSession
                       AND m.idfVectorSurveillanceSession IS NOT NULL
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000019) diseaseName
                    ON diseaseName.idfsReference = m.DiseaseID
                LEFT JOIN dbo.tlbDepartment d
                    ON d.idfDepartment = m.idfInDepartment
                       AND d.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000164) functionalArea
                    ON functionalArea.idfsReference = d.idfsDepartmentName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                    ON testNameType.idfsReference = t.idfsTestName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                    ON testResultType.idfsReference = t.idfsTestResult
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                    ON testStatusType.idfsReference = t.idfsTestStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                    ON accessionConditionType.idfsReference = m.idfsAccessionCondition
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                    ON sampleStatusType.idfsReference = m.idfsSampleStatus
        ) AS x
        WHERE RowNum > @FirstRecord
              AND RowNum < @LastRecord
        ORDER BY RowNum;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_TRANSFER_SEARCH_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_TRANSFER_SEARCH_GETList
--
-- Description:	Get laboratory transfer list for the various laboratory use cases.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     02/21/2019 Initial release.
-- Stephen Long     07/09/2019 Added disease to wildcard search.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     10/21/2019 Added accession indicator and test status type ID to the list of 
--                             fields.
-- Stephen Long     01/22/2020 Added site list for site filtration.
-- Stephen Long     03/11/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     04/07/2020 Added test name type ID to the model.
-- Stephen Long     04/23/2020 Correction on disease ID and disease name; add vector surveillance 
--                             session.
-- Stephen Long     04/26/2020 Added sent to organization ID to the model.
-- Stephen Long     05/06/2020 Added test started date and test category type name to the model.
-- Stephen Long     06/07/2020 Added additional search fields to the where clause.
-- Stephen Long     06/24/2020 Added external test check to the test left join.
-- Stephen Long     11/29/2020 Added configurable site filtration rules.
-- Stephen Long     12/16/2020 Changed join for vector surveillance session diseases to the sample
--                             table.
-- Stephen Long     12/31/2020 Change function on reference data to handle inactive records.
-- Stephen Long     01/03/2021 Moved pagination to table variable insert.
-- Stephen Long     01/05/2021 Removed sent to organization where criteria.
-- Stephen Long     01/07/2021 Removed leading wildcard (%) as full table scans are performed even 
--                             with indices resulting in long query run times.  Recommend NOT 
--                             putting those back in.
-- Mark Wilson		08/17/2021 Join tlbMonitoringSessionToDiagnosis to get diagnosis
-- Stephen Long     09/23/2021 Removed unneeded fields and joins to improve performance.
-- Stephen Long     12/08/2021 Changed pagination logic and removed option recompile.
-- Stephen Long     02/10/2022 Replaced joins for monitoring session and vector session
--                             disease references to improve performance.
-- Stephen Long     05/17/2022 Removed primary key from monitoring and vector session disease 
--                             table variables.
-- Stephen Long     05/20/2022 Added string agg to session diseases.
-- Stephen Long     07/26/2022 Updated case statement on disease id and name.
-- Stephen Long     08/04/2022 Add where criteria from the default sample listing, so only
--                             records for the simple search are filtered from the default set.
-- Stephen Long     09/28/2022 Bug fix on item 5111.
-- Stephen Long     10/14/2022 Changed monitoring session disease function to monitoring session
--                             to sample disease function.
--
-- Testing Code:
/*
DECLARE	@return_value int

EXEC	@return_value = [dbo].[USP_LAB_TRANSFER_SEARCH_GETList]
		@LanguageID = N'en-US',
		@SearchString = N'COVID', -- Use 'Gnhnscvxb', 'Brucellosis', 'XWEB00' as other tests.
		@UserID = 161287150000872, -- rykermase
		@UserOrganizationID = 758210000000,
		@Page = 1,
		@PageSize = 10,
		@SortColumn = N'EIDSSLaboratorySampleID',
		@SortOrder = N'DESC'

SELECT	'Return Value' = @return_value

GO
*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_TRANSFER_SEARCH_GETList]
(
    @LanguageID NVARCHAR(50),
    @SearchString NVARCHAR(2000),
    @AccessionedIndicator BIT = NULL, 
    @UserID BIGINT,
    @UserOrganizationID BIGINT,
    @Page INT = 1,
    @PageSize INT = 10,
    @SortColumn VARCHAR(200) = 'EIDSSLaboratorySampleID',
    @SortOrder VARCHAR(4) = 'DESC'
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @InitialResults TABLE
    (
        ID BIGINT NOT NULL,
        SampleID BIGINT NOT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID BIGINT NOT NULL,
        SampleID BIGINT NOT NULL
    );
    DECLARE @SampleTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @SampleStatusTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @AccessionConditionTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @TestNameTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @TestResultTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @TestCategoryTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @TestStatusTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @Diseases TABLE (ID BIGINT NOT NULL);
    DECLARE @FunctionalAreas TABLE (ID BIGINT NOT NULL);
    DECLARE @MonitoringSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @VectorSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @Favorites XML,
            @FirstRecord INT = (@Page - 1) * @PageSize,
            @LastRecord INT = (@Page * @PageSize + 1),
            @LanguageCode BIGINT;

    BEGIN TRY
        SET @LanguageCode = dbo.FN_GBL_LanguageCode_Get(@LanguageID);
        SET @Favorites =
        (
            SELECT PreferenceDetail
            FROM dbo.UserPreference Laboratory
            WHERE idfUserID = @UserID
                  AND ModuleConstantID = 10508006
                  AND intRowStatus = 0
        );

        INSERT INTO @MonitoringSessionDiseases
        SELECT SampleID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames
        FROM dbo.FN_LAB_MONITORING_SESSION_TO_SAMPLE_DISEASES_GET(@LanguageID)
        GROUP BY SampleID;

        INSERT INTO @VectorSessionDiseases
        SELECT VectorSurveillanceSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, ';') AS DiseaseNames
        FROM dbo.FN_LAB_VECTOR_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY VectorSurveillanceSessionID;

        INSERT INTO @InitialResults
        SELECT tr.idfTransferOut,
               tom.idfMaterial
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
        WHERE (
                      tr.idfSendFromOffice = @UserOrganizationID
                      OR tr.idfSendToOffice = @UserOrganizationID
                  )
                  AND (tr.idfsTransferStatus IN (   10001003,
                                                             --In Progress
                                                    10001006 --Amended
                                                )
                      )
                  AND tr.intRowStatus = 0;

        INSERT INTO @SampleTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000087
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @SampleStatusTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000015
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @AccessionConditionTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000110
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @Diseases
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000019
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @TestNameTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000097
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @TestResultTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000096
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @FunctionalAreas
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000164
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @FinalResults
        SELECT ID,
               SampleID
        FROM @InitialResults
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = SampleID
                   AND m.intRowStatus = 0
        WHERE (m.blnAccessioned = @AccessionedIndicator AND m.idfsAccessionCondition IS NULL AND m.idfsSampleStatus IS NULL AND @AccessionedIndicator IS NOT NULL) -- Un-accessioned samples
        OR (
                  CONVERT(VARCHAR(25), m.datAccession, 126) LIKE '%' + @SearchString + '%'
                  OR (
                         m.strBarcode IS NOT NULL
                         AND m.strBarcode <> ''
                         AND m.strBarcode LIKE '%' + @SearchString + '%'
                     )
                  OR (
                         m.strFieldBarcode IS NOT NULL
                         AND m.strFieldBarcode <> ''
                         AND m.strFieldBarcode LIKE '%' + @SearchString + '%'
                     )
                  OR (
                         m.strCondition IS NOT NULL
                         AND m.strCondition <> ''
                         AND m.strCondition LIKE '%' + @SearchString + '%'
                     )
                  OR (
                         m.strCalculatedCaseID IS NOT NULL
                         AND m.strCalculatedCaseID <> ''
                         AND m.strCalculatedCaseID LIKE '%' + @SearchString + '%'
                     )
                  OR (
                         m.strCalculatedHumanName IS NOT NULL
                         AND m.strCalculatedHumanName <> ''
                         AND m.strCalculatedHumanName LIKE '%' + @SearchString + '%'
                     )
              );

        INSERT INTO @FinalResults
        SELECT ID,
               SampleID
        FROM @InitialResults
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = SampleID
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnExternalTest = 1
        WHERE CONVERT(VARCHAR(25), t.datConcludedDate, 126) LIKE @SearchString + '%';

        INSERT INTO @FinalResults
        SELECT ID,
               SampleID
        FROM @InitialResults
            INNER JOIN dbo.tlbTransferOUT tr
                ON tr.idfTransferOut = ID
        WHERE CONVERT(VARCHAR(25), tr.datSendDate, 126) LIKE @SearchString + '%';

        IF
        (
            SELECT COUNT(*) FROM @SampleTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID,
                   SampleID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                       AND m.intRowStatus = 0
            WHERE EXISTS
            (
                SELECT ID FROM @SampleTypes WHERE m.idfsSampleType = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @SampleStatusTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID,
                   SampleID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                       AND m.intRowStatus = 0
            WHERE (m.idfsSampleStatus IS NULL OR m.idfsSampleStatus = 10015007) --In Repository
            AND EXISTS
            (
                SELECT ID FROM @SampleStatusTypes WHERE m.idfsSampleStatus = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @AccessionConditionTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID,
                   SampleID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                       AND m.intRowStatus = 0
            WHERE EXISTS
            (
                SELECT ID
                FROM @AccessionConditionTypes
                WHERE m.idfsAccessionCondition = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @TestNameTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID,
                   SampleID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                       AND m.intRowStatus = 0
                INNER JOIN dbo.tlbTesting t
                    ON t.idfMaterial = m.idfMaterial
                       AND t.intRowStatus = 0
                       AND t.blnExternalTest = 1
            WHERE EXISTS
            (
                SELECT ID FROM @TestNameTypes WHERE t.idfsTestName = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @TestResultTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID,
                   SampleID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                       AND m.intRowStatus = 0
                INNER JOIN dbo.tlbTesting t
                    ON t.idfMaterial = m.idfMaterial
                       AND t.intRowStatus = 0
                       AND t.blnExternalTest = 1
            WHERE EXISTS
            (
                SELECT ID FROM @TestResultTypes WHERE t.idfsTestResult = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @FunctionalAreas
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID,
                   SampleID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                       AND m.intRowStatus = 0
                INNER JOIN dbo.tlbDepartment d
                    ON d.idfDepartment = m.idfInDepartment
                       AND d.intRowStatus = 0
            WHERE m.idfInDepartment IS NOT NULL
                  AND EXISTS
            (
                SELECT ID FROM @FunctionalAreas WHERE d.idfsDepartmentName = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @Diseases
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID,
                   SampleID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                       AND m.intRowStatus = 0
            WHERE m.DiseaseID IS NOT NULL
                  AND EXISTS
            (
                SELECT ID FROM @Diseases WHERE m.DiseaseID = ID
            );

            INSERT INTO @FinalResults
            SELECT ir.ID,
                   ir.SampleID
            FROM @InitialResults ir
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = ir.SampleID
                INNER JOIN @VectorSessionDiseases vsDiseases
                    ON vsDiseases.ID = m.idfVectorSurveillanceSession
            WHERE m.idfVectorSurveillanceSession IS NOT NULL
                  AND EXISTS
            (
                SELECT ID
                FROM @Diseases
                WHERE ID IN (
                                SELECT CAST([Value] AS BIGINT)
                                FROM dbo.FN_GBL_SYS_SplitList(vsDiseases.DiseaseIdentifiers, NULL, ',')
                            )
            );

            INSERT INTO @FinalResults
            SELECT ID,
                   SampleID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                INNER JOIN dbo.tlbMonitoringSession ms
                    ON ms.idfMonitoringSession = m.idfMonitoringSession
                       AND ms.intRowStatus = 0
                INNER JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                    ON msd.idfMonitoringSession = ms.idfMonitoringSession
                       AND msd.intRowStatus = 0
            WHERE EXISTS
            (
                SELECT ID FROM @Diseases WHERE msd.idfsDiagnosis = ID
            );
        END

        INSERT INTO @FinalResults
        SELECT ID,
               SampleID
        FROM @InitialResults
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = SampleID
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tlbAnimal a
                ON a.idfAnimal = m.idfAnimal
                   AND a.intRowStatus = 0
        WHERE m.idfAnimal IS NOT NULL
              AND a.strAnimalCode LIKE '%' + @SearchString + '%';

        INSERT INTO @FinalResults
        SELECT ID,
               SampleID
        FROM @InitialResults
            INNER JOIN dbo.tlbTransferOUT tr
                ON tr.idfTransferOut = ID
        WHERE tr.strBarcode LIKE '%' + @SearchString + '%';

        INSERT INTO @FinalResults
        SELECT ID,
               SampleID
        FROM @InitialResults
            INNER JOIN dbo.tlbTransferOUT tr
                ON tr.idfTransferOut = ID
        WHERE tr.TestRequested LIKE '%' + @SearchString + '%';

        INSERT INTO @FinalResults
        SELECT ID,
               SampleID
        FROM @InitialResults
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = SampleID
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnExternalTest = 1
        WHERE t.strContactPerson LIKE '%' + @SearchString + '%';

        INSERT INTO @FinalResults
        SELECT ID,
               SampleID
        FROM @InitialResults
            INNER JOIN dbo.tlbTransferOUT tr
                ON tr.idfTransferOut = ID
            INNER JOIN dbo.FN_GBL_Institution_Min(@LanguageID) transferredFromOrganization
                ON transferredFromOrganization.idfOffice = tr.idfSendFromOffice
        WHERE transferredFromOrganization.AbbreviatedName LIKE '%' + @SearchString + '%';

        INSERT INTO @FinalResults
        SELECT ID,
               SampleID
        FROM @InitialResults
            INNER JOIN dbo.tlbTransferOUT tr
                ON tr.idfTransferOut = ID
            INNER JOIN dbo.FN_GBL_Institution_Min(@LanguageID) transferredToOrganization
                ON transferredToOrganization.idfOffice = tr.idfSendToOffice
        WHERE transferredToOrganization.AbbreviatedName LIKE '%' + @SearchString + '%';

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        DECLARE @InProgressCount INT = (SELECT COUNT(DISTINCT res.ID)
        FROM @FinalResults res
        INNER JOIN dbo.tlbTransferOUT tr ON tr.idfTransferOut = res.ID
        WHERE tr.idfsTransferStatus IN (   10001003, --In Progress
                                                10001006 --Amended
                                            ));

        SELECT TransferID,
               EIDSSTransferID,
               TransferredOutSampleID,
               TransferredInSampleID,
               FavoriteIndicator,
               EIDSSReportOrSessionID,
               PatientOrFarmOwnerName,
               EIDSSLaboratorySampleID,
               TransferredToOrganizationID,
               TransferredToOrganizationName,
               TransferredFromOrganizationID,
               TransferDate,
               TestRequested,
               TestID,
               TestNameTypeID,
               TestNameTypeName,
               TestResultTypeID,
               TestResultTypeName,
               TestStatusTypeID,
               TestStatusTypeName,
               TestCategoryTypeID,
               StartedDate,
               ResultDate,
               ContactPersonName,
               EIDSSLocalOrFieldSampleID,
               SampleTypeName,
               DiseaseID,
               DiseaseName,
               AccessionDate,
               FunctionalAreaID,
               FunctionalAreaName,
               AccessionIndicator,
               AccessionConditionTypeID,
               SampleStatusTypeID,
               AccessionConditionOrSampleStatusTypeName,
               AccessionComment,
               PurposeOfTransfer,
               TransferredFromOrganizationSiteID,
               SentToOrganizationID,
               SentByPersonID,
               TransferStatusTypeID,
               RowStatus,
               EIDSSAnimalID,
               TestAssignedIndicator,
               NonEIDSSLaboratoryIndicator,
               ReadPermissionIndicator,
               AccessToPersonalDataPermissionIndicator,
               AccessToGenderAndAgeDataPermissionIndicator,
               WritePermissionIndicator,
               DeletePermissionIndicator,
               RowAction,
               RowSelectionIndicator,
               CurrentPage,
               InProgressCount, 
               TotalRowCount
        FROM
        (
            SELECT ROW_NUMBER() OVER (ORDER BY CASE
                                                   WHEN @SortColumn = 'EIDSSReportOrSessionID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.strCalculatedCaseID
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSReportOrSessionID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.strCalculatedCaseID
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'PatientOrFarmOwnerName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.strCalculatedHumanName
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'PatientOrFarmOwnerName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.strCalculatedHumanName
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSLaboratorySampleID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.strBarcode
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSLaboratorySampleID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.strBarcode
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSTransferID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       tr.strBarcode
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSTransferID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       tr.strBarcode
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'TransferredToOrganizationName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       transferredToOrganization.FullName
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'TransferredToOrganizationName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       transferredToOrganization.FullName
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'TransferDate'
                                                        AND @SortOrder = 'ASC' THEN
                                                       tr.datSendDate
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'TransferDate'
                                                        AND @SortOrder = 'DESC' THEN
                                                       tr.datSendDate
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'TestRequested'
                                                        AND @SortOrder = 'ASC' THEN
                                                       tr.TestRequested
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'TestRequested'
                                                        AND @SortOrder = 'DESC' THEN
                                                       tr.TestRequested
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'TestNameTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       testNameType.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'TestNameTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       testNameType.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'TestResultTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       testResultType.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'TestResultTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       testResultType.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'ResultDate'
                                                        AND @SortOrder = 'ASC' THEN
                                                       t.datConcludedDate
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'ResultDate'
                                                        AND @SortOrder = 'DESC' THEN
                                                       t.datConcludedDate
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'PointOfContact'
                                                        AND @SortOrder = 'ASC' THEN
                                                       t.strContactPerson
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'PointOfContact'
                                                        AND @SortOrder = 'DESC' THEN
                                                       t.strContactPerson
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSLocalOrFieldSampleID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.strFieldBarcode
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSLocalOrFieldSampleID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.strFieldBarcode
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'SampleTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       sampleType.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'SampleTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       sampleType.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'DiseaseName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       CASE
                                                           WHEN m.DiseaseID IS NOT NULL THEN 
                                                               diseaseName.name
                                                           WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                                                               msDiseases.DiseaseNames
                                                           WHEN (m.DiseaseID IS NULL AND ISNULL(m.idfVectorSurveillanceSession, '') = '') THEN
                                                               vsDiseases.DiseaseNames
                                                           ELSE
                                                               ''
                                                       END
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'DiseaseName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       CASE
                                                           WHEN m.DiseaseID IS NOT NULL THEN 
                                                               diseaseName.name
                                                           WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                                                               msDiseases.DiseaseNames
                                                           WHEN (m.DiseaseID IS NULL AND ISNULL(m.idfVectorSurveillanceSession, '') = '') THEN
                                                               vsDiseases.DiseaseNames
                                                           ELSE
                                                               ''
                                                       END
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AccessionDate'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.datAccession
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AccessionDate'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.datAccession
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AccessionConditionOrSampleStatusTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       CASE
                                                           WHEN m.blnAccessioned = 0
                                                                AND m.idfsAccessionCondition IS NULL THEN
                                                               'Un-accessioned'
                                                           WHEN m.idfsSampleStatus IS NULL THEN
                                                               accessionConditionType.name
                                                           WHEN m.idfsSampleStatus = 10015007 --In Repository
                                               THEN
                                                               accessionConditionType.name
                                                           ELSE
                                                               sampleStatusType.name
                                                       END
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AccessionConditionOrSampleStatusTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       CASE
                                                           WHEN m.blnAccessioned = 0
                                                                AND m.idfsAccessionCondition IS NULL THEN
                                                               'Un-accessioned'
                                                           WHEN m.idfsSampleStatus IS NULL THEN
                                                               accessionConditionType.name
                                                           WHEN m.idfsSampleStatus = 10015007 --In Repository
                                               THEN
                                                               accessionConditionType.name
                                                           ELSE
                                                               sampleStatusType.name
                                                       END
                                               END DESC
                                     ) AS RowNum,
                   tr.idfTransferOut AS TransferID,
                   tr.strBarcode AS EIDSSTransferID,
                   m.idfMaterial AS TransferredOutSampleID,
                   (
                       SELECT TOP 1
                           idfMaterial
                       FROM dbo.tlbMaterial
                       WHERE idfRootMaterial = m.idfMaterial
                             AND intRowStatus = 0
                             AND idfsSampleKind = 12675430000000 --Transferred in
                   ) AS TransferredInSampleID,
                   CASE
                       WHEN f.SampleID IS NULL THEN
                           0
                       ELSE
                           1
                   END AS FavoriteIndicator,
                   m.strCalculatedCaseID AS EIDSSReportOrSessionID,
                   m.strCalculatedHumanName AS PatientOrFarmOwnerName,
                   m.strBarcode AS EIDSSLaboratorySampleID,
                   tr.idfSendToOffice AS TransferredToOrganizationID,
                   transferredToOrganization.[FullName] AS TransferredToOrganizationName,
                   tr.idfSendFromOffice AS TransferredFromOrganizationID,
                   tr.datSendDate AS TransferDate,
                   tr.TestRequested,
                   t.idfTesting AS TestID,
                   t.idfsTestName AS TestNameTypeID,
                   testNameType.name AS TestNameTypeName,
                   t.idfsTestResult AS TestResultTypeID,
                   testResultType.name AS TestResultTypeName,
                   t.idfsTestStatus AS TestStatusTypeID,
                   testStatusType.name AS TestStatusTypeName,
                   t.idfsTestCategory AS TestCategoryTypeID,
                   t.datStartedDate AS StartedDate,
                   t.datConcludedDate AS ResultDate,
                   t.strContactPerson AS ContactPersonName,
                   m.strFieldBarcode AS EIDSSLocalOrFieldSampleID,
                   sampleType.name AS SampleTypeName,
                   CASE
                       WHEN m.DiseaseID IS NOT NULL THEN
                           CAST(m.DiseaseID AS NVARCHAR(MAX))
                       WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                           msDiseases.DiseaseIdentifiers
                       WHEN (m.DiseaseID IS NULL AND ISNULL(m.idfVectorSurveillanceSession, '') = '') THEN
                           vsDiseases.DiseaseIdentifiers
                       ELSE
                           '' 
                   END AS DiseaseID,
                   CASE
                       WHEN m.DiseaseID IS NOT NULL THEN 
                           diseaseName.name
                       WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                           msDiseases.DiseaseNames
                       WHEN (m.DiseaseID IS NULL AND ISNULL(m.idfVectorSurveillanceSession, '') = '') THEN
                           vsDiseases.DiseaseNames
                       ELSE
                           ''
                   END AS DiseaseName,
                   m.datAccession AS AccessionDate,
                   m.idfInDepartment AS FunctionalAreaID,
                   functionalArea.name AS FunctionalAreaName,
                   m.blnAccessioned AS AccessionIndicator,
                   m.idfsAccessionCondition AS AccessionConditionTypeID,
                   m.idfsSampleStatus AS SampleStatusTypeID,
                   (CASE
                        WHEN m.blnAccessioned = 0
                             AND m.idfsAccessionCondition IS NULL THEN
                            'Un-accessioned'
                        WHEN m.idfsSampleStatus IS NULL THEN
                            accessionConditionType.name
                        WHEN m.idfsSampleStatus = 10015007 --In Repository
                   THEN
                            accessionConditionType.name
                        ELSE
                            sampleStatusType.name
                    END
                   ) AS AccessionConditionOrSampleStatusTypeName,
                   m.strCondition AS AccessionComment,
                   tr.strNote AS PurposeOfTransfer,
                   tr.idfsSite AS TransferredFromOrganizationSiteID,
                   m.idfSendToOffice AS SentToOrganizationID,
                   tr.idfSendByPerson AS SentByPersonID,
                   tr.idfsTransferStatus AS TransferStatusTypeID,
                   tr.intRowStatus AS RowStatus,
                   a.strAnimalCode AS EIDSSAnimalID,
                   IIF(
                      (
                          SELECT COUNT(t2.idfTesting)
                          FROM dbo.tlbTesting t2
                          WHERE t2.idfsTestStatus IN (   10001003,
                                                                  --In Progress
                                                         10001004,
                                                                  --Preliminary
                                                         10001005 --Not Started
                                                     )
                                AND t2.idfMaterial = m.idfMaterial
                      ) > 0,
                      1,
                      0) AS TestAssignedIndicator,
                   (CASE
                        WHEN transferredToOrganization.idfsSite IS NULL THEN
                            1
                        ELSE
                            0
                    END
                   ) AS NonEIDSSLaboratoryIndicator,
                   1 AS ReadPermissionIndicator,
                   1 AS AccessToPersonalDataPermissionIndicator,
                   1 AS AccessToGenderAndAgeDataPermissionIndicator,
                   1 AS WritePermissionIndicator,
                   1 AS DeletePermissionIndicator,
                   0 AS RowAction,
                   0 AS RowSelectionIndicator,
                   @Page AS CurrentPage,
                   @InProgressCount AS InProgressCount, 
                   COUNT(*) OVER () AS TotalRowCount
            FROM @FinalResults res
                INNER JOIN dbo.tlbTransferOUT tr
                    ON tr.idfTransferOut = res.ID
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = res.SampleID
                       AND m.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                    ON sampleType.idfsReference = m.idfsSampleType
                INNER JOIN dbo.FN_GBL_Institution(@LanguageID) transferredToOrganization
                    ON transferredToOrganization.idfOffice = tr.idfSendToOffice
                       AND transferredToOrganization.intRowStatus = 0
                LEFT JOIN dbo.tlbTesting t
                    ON t.idfMaterial = m.idfMaterial
                       AND t.intRowStatus = 0
                       AND t.blnExternalTest = 1
                LEFT JOIN
                (
                    SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                    FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
                ) f
                    ON m.idfMaterial = f.SampleID
                LEFT JOIN dbo.tlbAnimal a
                    ON a.idfAnimal = m.idfAnimal
                       AND a.intRowStatus = 0
                LEFT JOIN @MonitoringSessionDiseases msDiseases
                    ON msDiseases.ID = m.idfMaterial
                       AND m.idfMonitoringSession IS NOT NULL
                LEFT JOIN @VectorSessionDiseases vsDiseases
                    ON vsDiseases.ID = m.idfVectorSurveillanceSession
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) diseaseName
                    ON diseaseName.idfsReference = m.DiseaseID
                LEFT JOIN dbo.tlbDepartment d
                    ON d.idfDepartment = m.idfInDepartment
                       AND d.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000164) functionalArea
                    ON functionalArea.idfsReference = d.idfsDepartmentName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                    ON testNameType.idfsReference = t.idfsTestName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                    ON testResultType.idfsReference = t.idfsTestResult
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                    ON testStatusType.idfsReference = t.idfsTestStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                    ON accessionConditionType.idfsReference = m.idfsAccessionCondition
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                    ON sampleStatusType.idfsReference = m.idfsSampleStatus
        ) AS x
        WHERE RowNum > @FirstRecord
              AND RowNum < @LastRecord
        ORDER BY RowNum;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USSP_GBL_DataAuditEvent_GET]...';


GO
-- =============================================
-- Author:		Steven Verner
-- Create date: 2.2.2022
-- Description:	Gets the audit event for the given user
-- =============================================
ALTER PROCEDURE [dbo].[USSP_GBL_DataAuditEvent_GET] 
	-- Add the parameters for the stored procedure here
	@idfUserId BIGINT = NULL, 
	@event BIGINT OUTPUT

AS
BEGIN

	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @officeid BIGINT
	DECLARE @siteid BIGINT 
	DECLARE @aspnetUserId UNIQUEIDENTIFIER

	-- Get the user's siteid...
	SELECT @aspnetUserId = ID FROM aspnetUsers WHERE idfUserID = @idfUserId
	SELECT @officeid = idfInstitution FROM EmployeeToInstitution eti WHERE eti.aspNetUserId = @aspnetUserId AND eti.IsDefault = 1
	SELECT @siteid = idfsSite FROM tstsite WHERE idfOffice = @officeid

	SELECT @event = idfDataAuditEvent 
	FROM tstLocalConnectionContext lcc 
	WHERE @idfUserId = @idfUserId

	IF @event is null
	BEGIN
		EXEC USP_GBL_NEXTKEYID_GET 'tauDataAuditEvent', @event OUTPUT

		INSERT INTO [tauDataAuditEvent] (
			[idfDataAuditEvent],
			[idfsDataAuditObjectType],
			[idfsDataAuditEventType],
			[idfMainObject],
			[idfMainObjectTable],
			[idfUserID],
			[idfsSite],
			[datEnteringDate]
		) 
		values
			(@event,
			NULL,
			10016004, 
			null,
			null,
			@idfUserId,
			@siteid,
			GETDATE()
			)

			UPDATE tstLocalConnectionContext
			SET idfDataAuditEvent = @event
			WHERE idfUserID = @idfUserId
	END 
END
GO
PRINT N'Altering Procedure [Report].[USP_REP_Veterinary_Aggregate_DiagnosticAction_Summary_Report_Detail]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- ================================================================================================
-- Name: USP_REP_Veterinary_Aggregate_DiagnosticAction_Summary_Report_Detail
-- Description: PrintedForm Veterinary Aggregate Report
--          
-- Revision History:
-- Name				Date			Change
-- ---------------	----------	--------------------------------------------------------------------
-- Mark Wilson		10/11/2022  initial cut.
/*

EXEC    [Report].[USP_REP_Veterinary_Aggregate_DiagnosticAction_Summary_Report_Detail]
        @LangID = N'en-US',
        @idfAggrCaseList = 155564770001982

*/
-- ================================================================================================
ALTER PROCEDURE [Report].[USP_REP_Veterinary_Aggregate_DiagnosticAction_Summary_Report_Detail] 
(
	@LangID AS NVARCHAR(50),
	@idfAggrCaseList AS  NVARCHAR(MAX)= NULL
)
AS
BEGIN
	DROP TABLE IF EXISTS #tmpDetails;

	DECLARE @idfsCountry AS BIGINT,
			@idfsLanguage BIGINT = dbo.FN_GBL_LanguageCode_GET(@LangID);

	DECLARE @returnCode INT = 0;
	DECLARE @returnMsg NVARCHAR(MAX) = 'SUCCESS';

	DECLARE @AggrCaseTable TABLE (
		[idfAggrCase] BIGINT,
		[intRowNumber] INT
		)

	--Get Selected Agg Cases
	INSERT INTO @AggrCaseTable (
			[idfAggrCase],
			[intRowNumber]
			)
	SELECT CAST([Value] AS BIGINT),
		ROW_NUMBER() OVER (
			ORDER BY [Value]
			)
	FROM [dbo].[FN_GBL_SYS_SplitList](@idfAggrCaseList, NULL, NULL)

	DECLARE @tmpMatrix AS TABLE (
		intNumRow INT
		,idfAggrVetCaseMTX BIGINT
		,idfsDiagnosis BIGINT
		,idfsSpeciesType BIGINT
		,strDefault NVARCHAR(2000)
		,strOIECode NVARCHAR(100)
		,strAction NVARCHAR(300)
		)

   DECLARE @tempFlexForm TABLE (
		idfsParentSection BIGINT
		,idfsSection BIGINT
		,idfsParameter BIGINT
		,SectionName NVARCHAR(2000)
		,ParameterName NVARCHAR(500)
		,parameterType NVARCHAR(100)
		,idfsParameterType BIGINT
		,idfsReferenceType BIGINT
		,idfsEditor BIGINT
		,SectionOrder INT
		,ParameterOrder INT
		,blnGrid BIT
		,blnFixedRowSet BIT
		,idfsEditMode BIGINT
		,idfsFormTemplate BIGINT
		)

	DECLARE @observationsTable TABLE (
		[idfDiagnosticObservation] BIGINT,
		[idfDiagnosticVersion] BIGINT,
		[idfsCaseFormTemplate] BIGINT,
		[intRowNumber] INT
		)

	DECLARE @tmpActivityParameters TABLE (
		[idfActivityParameters] BIGINT,
		[idfObservation] BIGINT,
		[idfsFormTemplate] BIGINT,
		[idfsParameter] BIGINT,
		[idfsSection] BIGINT,
		[idfRow] BIGINT,
		--[intNumRow] INT,
		[Type] BIGINT,
		[varValue] sql_variant, --NVARCHAR(MAX),
		[numRow] INT,
		[ParameterType]  BIGINT
		)

	DECLARE @tmpSpeciesList TABLE (
		[idfBaseReference] BIGINT,
		strDefault NVARCHAR(2000),
		strSpecies NVARCHAR(100),
		[intRowNumber] INT
		--idfsReferenceType BIGINT
		)


	BEGIN TRY

			BEGIN


				--Get this SQl from [dbo].[USP_AGG_CASE_GETDETAIL]
				SELECT 
					a.idfDiagnosticObservation
					,CaseObs.idfsFormTemplate AS idfsCaseFormTemplate
					,a.idfDiagnosticVersion
				INTO #tmpDetails
				FROM dbo.tlbAggrCase a	
				LEFT JOIN dbo.tlbObservation CaseObs ON a.idfDiagnosticObservation = CaseObs.idfObservation
				WHERE a.intRowStatus = 0
				AND a.idfAggrCase IN (SELECT idfAggrCase FROM @AggrCaseTable)

				DECLARE @idfsFormTemplate BIGINT,
						@idfVersion BIGINT

				INSERT INTO @observationsTable (
					[idfDiagnosticObservation],
					[idfDiagnosticVersion],
					[idfsCaseFormTemplate],
					[intRowNumber]
					)
				SELECT [idfDiagnosticObservation],
					idfDiagnosticVersion,
					idfsCaseFormTemplate,
					ROW_NUMBER() OVER (
						ORDER BY [idfDiagnosticObservation]
						)
				FROM #tmpDetails

				SELECT @idfsFormTemplate=idfsCaseFormTemplate, 
						@idfVersion= idfDiagnosticVersion
				FROM @observationsTable
				--SELECT * FROM @observationsTable

				--Get this SQL from USP_CONF_ADMIN_AggregateVetCaseMatrixReport_GET -- dbo.USP_CONF_ADMIN_AggregateHumanCaseMatrixReport_GET
				INSERT INTO @tmpMatrix
				SELECT	 
					mtx.intNumRow as intNumRow,
					mtx.idfAggrDiagnosticActionMTX,
					mtx.idfsDiagnosis,
					mtx.idfsSpeciesType,
					D.name AS strDefault,
					D.strOIECode,
					DA.name AS strAction

				FROM dbo.tlbAggrDiagnosticActionMTX mtx
				INNER JOIN dbo.FN_GBL_ReferenceRepair_GET(@LangID, 19000021) DA ON DA.idfsReference = mtx.idfsDiagnosticAction
				INNER JOIN dbo.FN_GBL_DiagnosisRepair(@LangID, 96, 10020002) D ON D.idfsDiagnosis = mtx.idfsDiagnosis  -- 2 = Human, use 10020002 for Aggregate cases

				WHERE mtx.intRowStatus = 0 AND  mtx.idfVersion = @idfVersion
				--ORDER BY mtx.intNumRow ASC

--------------------------------------------------------------------------------------------------------------------------------
				--SpicesList
				INSERT INTO @tmpSpeciesList
				EXEC dbo.USP_CONF_GetSpeciesList_GET 
						@idfsBaseReference= 19000086,
						@intHACode=96,
						@strLanguageID=@LangID --@idfVersion=19000086
				
				--Get Flex Form for Diagnostic Actions details
				INSERT INTO @tempFlexForm
				SELECT 
					s.idfsParentSection
					,COALESCE(p.idfsSection,0) AS idfsSection
					,p.idfsParameter
					,RF.Name AS SectionName
					,PN.Name AS ParameterName
					,PTR.Name AS parameterType
					,p.idfsParameterType
					,pt.idfsReferenceType
					,p.idfsEditor
					,sdo.intOrder	AS SectionOrder
					,PDO.intOrder	AS ParameterOrder
					,s.blnGrid
					,s.blnFixedRowSet
					,PFT.idfsEditMode
					,pft.idfsFormTemplate
				FROM dbo.ffParameter p
				LEFT JOIN dbo.ffParameterForTemplate PFT ON PFT.idfsParameter = p.idfsParameter AND PFT.intRowStatus = 0
				LEFT JOIN dbo.ffSection s ON s.idfsSection = p.idfsSection
				LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000101) RF ON S.idfsSection = RF.idfsReference
				LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000071) PTR ON PTR.idfsReference = P.idfsParameterType
				LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000066) PN ON PN.idfsReference = P.idfsParameter
				LEFT JOIN dbo.ffParameterDesignOption PDO ON PFT.idfsParameter = PDO.idfsParameter
					AND PFT.idfsFormTemplate = PDO.idfsFormTemplate
					AND PDO.idfsLanguage = @idfsLanguage
					AND PDO.intRowStatus = 0
				LEFT JOIN dbo.ffSectionDesignOption sdo ON sdo.idfsSection = s.idfsSection 
					AND sdo.idfsFormTemplate = @idfsFormTemplate 
					AND sdo.idfsLanguage = @idfsLanguage
					AND sdo.intRowStatus = 0
				LEFT JOIN dbo.ffParameterType PT
					ON pt.idfsParameterType = p.idfsParameterType
				WHERE PFT.idfsFormTemplate = @idfsFormTemplate


				--EXEC [dbo].[USP_ADMIN_FF_FlexForm_Get] 
				--		@LangID =@LangID, 
				--		@idfsDiagnosis= NULL, 
				--		@idfsFormType = 10034023, 
				--		@idfsFormTemplate=@idfsFormTemplate

--				SELECT * FROM @tempFlexForm

				--Get Activity Parameters
				--INSERT INTO @tmpActivityParameters
				--EXEC dbo.USP_ADMIN_FF_ActivityParameters_GET
				--		@observationList = @observationList, 
				--		@LangID = @LangID
				INSERT INTO @tmpActivityParameters  (
						[idfActivityParameters],
						[idfObservation],
						[idfsFormTemplate],
						[idfsParameter],
						[idfsSection],
						[idfRow],
						[varValue],
						[Type],
						[numRow],
						[ParameterType]  
				)
				SELECT 
					AP.idfActivityParameters,
					AP.idfObservation,
					O.idfsFormTemplate,
					AP.idfsParameter,
					P.idfsSection,
					AP.idfRow,
					AP.varValue,
					--CAST(AP.varValue AS NVARCHAR(MAX)),
					dbo.FN_ADMIN_FF_TypeActivityParameters_GET(AP.idfsParameter),
					ROW_NUMBER() OVER (
						PARTITION BY AP.idfObservation ORDER BY AP.idfRow
						), 
					P.idfsParameterType
				FROM dbo.tlbActivityParameters AP
				LEFT JOIN dbo.ffParameter P	ON P.idfsParameter = AP.idfsParameter AND P.intRowStatus = 0
				INNER JOIN dbo.tlbObservation O ON AP.idfObservation = O.idfObservation
		
				WHERE AP.idfObservation IN (SELECT idfDiagnosticObservation FROM @observationsTable)
				AND AP.intRowStatus = 0
				AND O.intRowStatus = 0
				ORDER BY 
					AP.idfObservation,
					P.idfsSection,
					AP.idfRow


				--Report
				SELECT	ff.ParameterName
						,sl.strSpecies
						,ff.idfsParameter
						,ff.ParameterOrder
						,m.idfsDiagnosis
						,m.strDefault
						,m.strOIECode
						,m.strAction
						,m.intNumRow
						,SUM(CAST(ap.varValue AS INT)) AS varValue--ap.idfRow,m.idfAggrHumanCaseMTX as idfRow
						,SQL_VARIANT_PROPERTY(ap.varValue, 'BaseType')

				FROM @tempFlexForm ff 
				CROSS JOIN @tmpMatrix m 
				LEFT JOIN @tmpActivityParameters ap ON ff.idfsParameter=ap.idfsParameter AND m.idfAggrVetCaseMTX=ap.idfRow
				LEFT JOIN @tmpSpeciesList sl ON sl.idfBaseReference=m.idfsSpeciesType
				GROUP BY
					ff.ParameterName
					,sl.strSpecies
					,ff.idfsParameter
					,ff.ParameterOrder
					,m.idfsDiagnosis
					,m.strDefault
					,m.strOIECode
					,m.strAction
					,m.intNumRow
					,SQL_VARIANT_PROPERTY(ap.varValue, 'BaseType')
				ORDER BY intNumRow

			END

		DROP TABLE IF EXISTS #tmpDetails;

	END TRY

	BEGIN CATCH
		IF @@TRANCOUNT = 1
			ROLLBACK;

		SET @returnCode = ERROR_NUMBER();
		SET @returnMsg = 'ErrorNumber: ' + CONVERT(VARCHAR, ERROR_NUMBER()) + ' ErrorSeverity: ' + CONVERT(VARCHAR, ERROR_SEVERITY()) + ' ErrorState: ' + CONVERT(VARCHAR, ERROR_STATE()) + ' ErrorProcedure: ' + ISNULL(ERROR_PROCEDURE(), '') + ' ErrorLine: ' + CONVERT(VARCHAR, ISNULL(ERROR_LINE(), '')) + ' ErrorMessage: ' + ERROR_MESSAGE();;

		THROW;
	END CATCH
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering Procedure [Report].[USP_REP_Veterinary_Aggregate_Disease_Summary_Report_Detail]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- ================================================================================================
-- Name: USP_REP_Veterinary_Aggregate_Disease_Summary_Report_Detail
-- Description: PrintedForm Veterinary Aggregate Report
--          
-- Revision History:
-- Name				Date			Change
-- ---------------	----------	--------------------------------------------------------------------
-- Srini Goli		08/10/2022	Initial release for Veterinary Aggregate Report.
-- Srini Goli		10/07/2022  used Sql Veriant data type.
-- Srini Goli		10/12/2022  Without Templete also have to display Report.
/*

EXEC    [Report].[USP_REP_Veterinary_Aggregate_Disease_Summary_Report_Detail]
        @LangID = N'en-US',
        @idfsAggrCaseType = 10102002,
        @idfAggrCaseList = '155564770002071'

*/
-- ================================================================================================
ALTER PROCEDURE [Report].USP_REP_Veterinary_Aggregate_Disease_Summary_Report_Detail (
	@LangID AS NVARCHAR(50)
	,@idfsAggrCaseType AS  BIGINT= NULL
	,@idfAggrCaseList AS  NVARCHAR(MAX)= NULL
	)
AS
BEGIN
	DECLARE @returnCode INT = 0;
	DECLARE @returnMsg NVARCHAR(MAX) = 'SUCCESS';

	DECLARE @AggrCaseTable TABLE (
		[idfAggrCase] BIGINT,
		[intRowNumber] INT
		)

	DECLARE @tmpMatrix AS TABLE (
		intNumRow INT
		,idfAggrVetCaseMTX BIGINT
		,idfsDiagnosis BIGINT
		,idfsSpeciesType BIGINT
		,strDefault NVARCHAR(2000)
		,strOIECode NVARCHAR(100)
		)

   DECLARE @tempFlexForm TABLE (
		idfsParentSection BIGINT
		,idfsSection BIGINT
		,idfsParameter BIGINT
		,SectionName NVARCHAR(2000)
		,ParameterName NVARCHAR(500)
		,parameterType NVARCHAR(100)
		,idfsParameterType BIGINT
		,idfsReferenceType BIGINT
		,idfsEditor BIGINT
		,SectionOrder INT
		,ParameterOrder INT
		,blnGrid BIT
		,blnFixedRowSet BIT
		,idfsEditMode BIGINT
		,idfsFormTemplate BIGINT
		)

	DECLARE @observationsTable TABLE (
		[idfObservation] BIGINT,
		[idfVersion] BIGINT,
		[idfsCaseFormTemplate] BIGINT,
		[intRowNumber] INT
		)

	DECLARE @tmpActivityParameters TABLE (
		[idfActivityParameters] BIGINT,
		[idfObservation] BIGINT,
		[idfsFormTemplate] BIGINT,
		[idfsParameter] BIGINT,
		[idfsSection] BIGINT,
		[idfRow] BIGINT,
		--[intNumRow] INT,
		[Type] BIGINT,
		[varValue] sql_variant, --NVARCHAR(MAX),
		[numRow] INT,
		[ParameterType]  BIGINT
		)

	DECLARE @tmpSpeciesList TABLE (
		[idfBaseReference] BIGINT,
		strDefault NVARCHAR(2000),
		strSpecies NVARCHAR(100),
		[intRowNumber] INT
		--idfsReferenceType BIGINT
		)

	BEGIN TRY
			BEGIN

			--Get Selected Agg Cases
			INSERT INTO @AggrCaseTable (
					[idfAggrCase],
					[intRowNumber]
					)
				SELECT CAST([Value] AS BIGINT),
					ROW_NUMBER() OVER (
						ORDER BY [Value]
						)
				FROM [dbo].[FN_GBL_SYS_SplitList](@idfAggrCaseList, NULL, NULL)

				--Get this SQl from [dbo].[USP_AGG_CASE_GETDETAIL]
				SELECT 
					a.idfCaseObservation
					,CaseObs.idfsFormTemplate AS idfsCaseFormTemplate
					,a.idfVersion
				INTO #tmpDetails
				FROM dbo.tlbAggrCase a	
				LEFT JOIN dbo.tlbObservation CaseObs ON idfCaseObservation = CaseObs.idfObservation
				WHERE a.intRowStatus = 0
				AND a.idfAggrCase IN (SELECT idfAggrCase FROM @AggrCaseTable)
				--AND (@idfAggrCase IS NULL OR a.idfAggrCase = @idfAggrCase)
				--	AND (
				--		CASE 
				--			WHEN @idfsAggrCaseType IS NULL
				--				THEN 1
				--			WHEN ISNULL(a.idfsAggrCaseType, '') = @idfsAggrCaseType
				--				THEN 1
				--			ELSE 0
				--			END = 1
				--		)
				--	AND (
				--		CASE 
				--			WHEN @idfAggrCase IS NULL
				--				THEN 1
				--			WHEN ISNULL(a.idfAggrCase, '') = @idfAggrCase
				--				THEN 1
				--			ELSE 0
				--			END = 1
				--		);
				
				DECLARE @idfsFormTemplate BIGINT,
						@idfVersion BIGINT

				INSERT INTO @observationsTable (
					[idfObservation],
					[idfVersion],
					[idfsCaseFormTemplate],
					[intRowNumber]
					)
				SELECT [idfCaseObservation],
					[idfVersion],
					[idfsCaseFormTemplate],
					ROW_NUMBER() OVER (
						ORDER BY [idfCaseObservation]
						)
				FROM #tmpDetails

				SELECT @idfsFormTemplate=idfsCaseFormTemplate, 
						@idfVersion= idfVersion
				FROM @observationsTable
				--SELECT * FROM @observationsTable

				--Get this SQL from USP_CONF_ADMIN_AggregateVetCaseMatrixReport_GET -- dbo.USP_CONF_ADMIN_AggregateHumanCaseMatrixReport_GET
				INSERT INTO @tmpMatrix
				SELECT	 
					mtx.intNumRow as intNumRow,
					mtx.idfAggrVetCaseMTX,
					mtx.idfsDiagnosis,
					mtx.idfsSpeciesType,
					D.name AS strDefault,
					D.strOIECode

				FROM dbo.tlbAggrVetCaseMTX mtx
				INNER JOIN dbo.FN_GBL_DiagnosisRepair(@LangID, 96, 10020002) D ON D.idfsDiagnosis = mtx.idfsDiagnosis  -- 2 = Human, use 10020002 for Aggregate cases

				WHERE mtx.intRowStatus = 0 AND  mtx.idfVersion = @idfVersion
				--ORDER BY mtx.intNumRow ASC

				--SpicesList
				INSERT INTO @tmpSpeciesList
				EXEC dbo.USP_CONF_GetSpeciesList_GET 
						@idfsBaseReference= 19000086,
						@intHACode=96,
						@strLanguageID=@LangID --@idfVersion=19000086
				
				--Get Flex Form header details
				IF @idfsFormTemplate IS NOT NULL 
				BEGIN
					INSERT INTO @tempFlexForm
					EXEC [dbo].[USP_ADMIN_FF_FlexForm_Get] 
							@LangID =@LangID, 
							@idfsDiagnosis= NULL, 
							@idfsFormType = 10034012, 
							@idfsFormTemplate=@idfsFormTemplate
				END 
				--Get Activity Parameters
				--INSERT INTO @tmpActivityParameters
				--EXEC dbo.USP_ADMIN_FF_ActivityParameters_GET
				--		@observationList = @observationList, 
				--		@LangID = @LangID
				INSERT INTO @tmpActivityParameters  (
						[idfActivityParameters],
						[idfObservation],
						[idfsFormTemplate],
						[idfsParameter],
						[idfsSection],
						[idfRow],
						[varValue],
						[Type],
						[numRow],
						[ParameterType]  
				)
				SELECT 
					AP.idfActivityParameters,
					AP.idfObservation,
					O.idfsFormTemplate,
					AP.idfsParameter,
					P.idfsSection,
					AP.idfRow,
					AP.varValue,
					--CAST(AP.varValue AS NVARCHAR(MAX)),
					dbo.FN_ADMIN_FF_TypeActivityParameters_GET(AP.idfsParameter),
					ROW_NUMBER() OVER (
						PARTITION BY AP.idfObservation ORDER BY AP.idfRow
						), 
					P.idfsParameterType
				FROM dbo.tlbActivityParameters AP
				LEFT JOIN dbo.ffParameter P	ON P.idfsParameter = AP.idfsParameter AND P.intRowStatus = 0
				INNER JOIN dbo.tlbObservation O ON AP.idfObservation = O.idfObservation
		
				WHERE AP.idfObservation IN (SELECT idfObservation FROM @observationsTable)
				AND AP.intRowStatus = 0
				AND O.intRowStatus = 0
				ORDER BY 
					AP.idfObservation,
					P.idfsSection,
					AP.idfRow

				--Report
				IF (SELECT COUNT(*) FROM @tempFlexForm)>1
					SELECT	ff.ParameterName
							,sl.strSpecies
							,ff.idfsParameter
							,ff.ParameterOrder
							,m.idfsDiagnosis
							,m.strDefault
							,m.strOIECode
							,m.intNumRow
							,ap.varValue as varValue--ap.idfRow,m.idfAggrHumanCaseMTX as idfRow
					FROM @tempFlexForm ff 
					CROSS JOIN @tmpMatrix m 
					LEFT JOIN @tmpActivityParameters ap ON ff.idfsParameter=ap.idfsParameter and m.idfAggrVetCaseMTX=ap.idfRow
					LEFT JOIN @tmpSpeciesList sl ON sl.idfBaseReference=m.idfsSpeciesType
					ORDER BY intNumRow
				 ELSE
				 	SELECT	'' as ParameterName
							,sl.strSpecies
							,'' as idfsParameter
							,'' as ParameterOrder
							,m.idfsDiagnosis
							,m.strDefault
							,m.strOIECode
							,m.intNumRow
							,ap.varValue as varValue--ap.idfRow,m.idfAggrHumanCaseMTX as idfRow
					FROM @tmpMatrix m 
					LEFT JOIN @tmpActivityParameters ap ON  m.idfAggrVetCaseMTX=ap.idfRow
					LEFT JOIN @tmpSpeciesList sl ON sl.idfBaseReference=m.idfsSpeciesType
					ORDER BY intNumRow
				--Test
				--Dynamic Pivot
				--DECLARE @ColumnToPivot  NVARCHAR(255),
				--		@ListToPivot    NVARCHAR(255),
				--		@SqlStatement NVARCHAR(MAX)
				--SET @ColumnToPivot='ParameterName'
				--SELECT @ListToPivot= COALESCE(@ListToPivot + ',','') +  N'[' + CAST(ff.ParameterName AS varchar(100)) + ']'
				--FROM @tempFlexForm ff
				--ORDER BY ParameterOrder

				----SELECT @ListToPivot
				----EXEC dbo.USP_ADMIN_DynamicPivotTableInSql @ColumnToPivot,@ListToPivot

				--  SET @SqlStatement = N'
				--	SELECT * FROM (
				--	  SELECT
				--	    [intNumRow],
				--		[strDefault],
				--		[strIDC10],
				--		[ParameterName],
				--		[varValue]
				--	  FROM #tempReport
				--	) Results
				--	PIVOT (
				--	  MAX([varValue])
				--	  FOR ['+@ColumnToPivot+']
				--	  IN (
				--		'+@ListToPivot+'
				--	  )
				--	) AS PivotTable
				--	ORDER BY intNumRow
				--  ';

			END

		DROP TABLE IF EXISTS #tmpDetails;

	END TRY

	BEGIN CATCH
		IF @@TRANCOUNT = 1
			ROLLBACK;

		SET @returnCode = ERROR_NUMBER();
		SET @returnMsg = 'ErrorNumber: ' + CONVERT(VARCHAR, ERROR_NUMBER()) + ' ErrorSeverity: ' + CONVERT(VARCHAR, ERROR_SEVERITY()) + ' ErrorState: ' + CONVERT(VARCHAR, ERROR_STATE()) + ' ErrorProcedure: ' + ISNULL(ERROR_PROCEDURE(), '') + ' ErrorLine: ' + CONVERT(VARCHAR, ISNULL(ERROR_LINE(), '')) + ' ErrorMessage: ' + ERROR_MESSAGE();;

		THROW;
	END CATCH
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering Procedure [Report].[USP_REP_Veterinary_Aggregate_ProphylacticAction_Summary_Report_Detail]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- ================================================================================================
-- Name: USP_REP_Veterinary_Aggregate_ProphylacticAction_Summary_Report_Detail
-- Description: PrintedForm Veterinary Aggregate Report
--          
-- Revision History:
-- Name				Date			Change
-- ---------------	----------	--------------------------------------------------------------------
-- Mark Wilson		10/11/2022  initial cut.
/*

EXEC    [Report].[USP_REP_Veterinary_Aggregate_ProphylacticAction_Summary_Report_Detail]
        @LangID = N'en-US',
        @idfAggrCaseList = '155564770001940'

*/
-- ================================================================================================
ALTER PROCEDURE [Report].[USP_REP_Veterinary_Aggregate_ProphylacticAction_Summary_Report_Detail] 
(
	@LangID AS NVARCHAR(50),
	@idfAggrCaseList AS  NVARCHAR(MAX)= NULL
)
AS
BEGIN
	DROP TABLE IF EXISTS #tmpDetails;

	DECLARE @idfsCountry AS BIGINT,
			@idfsLanguage BIGINT = dbo.FN_GBL_LanguageCode_GET(@LangID);

	DECLARE @returnCode INT = 0;
	DECLARE @returnMsg NVARCHAR(MAX) = 'SUCCESS';

	DECLARE @AggrCaseTable TABLE (
		[idfAggrCase] BIGINT,
		[intRowNumber] INT
		)

	--Get Selected Agg Cases
	INSERT INTO @AggrCaseTable (
			[idfAggrCase],
			[intRowNumber]
			)
	SELECT CAST([Value] AS BIGINT),
		ROW_NUMBER() OVER (
			ORDER BY [Value]
			)
	FROM [dbo].[FN_GBL_SYS_SplitList](@idfAggrCaseList, NULL, NULL)

	DECLARE @tmpMatrix AS TABLE (
		intNumRow INT
		,idfAggrVetCaseMTX BIGINT
		,idfsDiagnosis BIGINT
		,idfsSpeciesType BIGINT
		,strDefault NVARCHAR(2000)
		,strOIECode NVARCHAR(100)
		,strActionCode NVARCHAR(200)
		,strAction NVARCHAR(300)
		)

   DECLARE @tempFlexForm TABLE (
		idfsParentSection BIGINT
		,idfsSection BIGINT
		,idfsParameter BIGINT
		,SectionName NVARCHAR(2000)
		,ParameterName NVARCHAR(500)
		,parameterType NVARCHAR(100)
		,idfsParameterType BIGINT
		,idfsReferenceType BIGINT
		,idfsEditor BIGINT
		,SectionOrder INT
		,ParameterOrder INT
		,blnGrid BIT
		,blnFixedRowSet BIT
		,idfsEditMode BIGINT
		,idfsFormTemplate BIGINT
		)

	DECLARE @observationsTable TABLE (
		[idfProphylacticObservation] BIGINT,
		[idfProphylacticVersion] BIGINT,
		[idfsCaseFormTemplate] BIGINT,
		[intRowNumber] INT
		)

	DECLARE @tmpActivityParameters TABLE (
		[idfActivityParameters] BIGINT,
		[idfObservation] BIGINT,
		[idfsFormTemplate] BIGINT,
		[idfsParameter] BIGINT,
		[idfsSection] BIGINT,
		[idfRow] BIGINT,
		[Type] BIGINT,
		[varValue] sql_variant, --NVARCHAR(MAX),
		[numRow] INT,
		[ParameterType]  BIGINT
		)

	DECLARE @tmpSpeciesList TABLE (
		[idfBaseReference] BIGINT,
		strDefault NVARCHAR(2000),
		strSpecies NVARCHAR(100),
		[intRowNumber] INT
		)


	BEGIN TRY

			BEGIN


				--Get this SQl from [dbo].[USP_AGG_CASE_GETDETAIL]
				SELECT 
					a.idfProphylacticObservation
					,CaseObs.idfsFormTemplate AS idfsCaseFormTemplate
					,a.idfProphylacticVersion
				INTO #tmpDetails
				FROM dbo.tlbAggrCase a	
				LEFT JOIN dbo.tlbObservation CaseObs ON a.idfProphylacticObservation = CaseObs.idfObservation
				WHERE a.intRowStatus = 0
				AND a.idfAggrCase IN (SELECT idfAggrCase FROM @AggrCaseTable)

				DECLARE @idfsFormTemplate BIGINT,
						@idfVersion BIGINT

				INSERT INTO @observationsTable (
					[idfProphylacticObservation],
					[idfProphylacticVersion],
					[idfsCaseFormTemplate],
					[intRowNumber]
					)
				SELECT [idfProphylacticObservation],
					idfProphylacticVersion,
					idfsCaseFormTemplate,
					ROW_NUMBER() OVER (
						ORDER BY [idfProphylacticObservation]
						)
				FROM #tmpDetails

				SELECT @idfsFormTemplate=idfsCaseFormTemplate, 
						@idfVersion= idfProphylacticVersion
				FROM @observationsTable
				--SELECT * FROM @observationsTable

				--Get this SQL from USP_CONF_ADMIN_AggregateVetCaseMatrixReport_GET -- dbo.USP_CONF_ADMIN_AggregateHumanCaseMatrixReport_GET
				INSERT INTO @tmpMatrix
				SELECT	 
					mtx.intNumRow as intNumRow,
					mtx.idfAggrProphylacticActionMTX,
					mtx.idfsDiagnosis,
					mtx.idfsSpeciesType,
					D.name AS strDefault,
					D.strOIECode,
					PAC.strActionCode,
					PA.name AS strAction

				FROM dbo.tlbAggrProphylacticActionMTX mtx
				INNER JOIN dbo.FN_GBL_ReferenceRepair_GET(@LangID, 19000074) PA ON PA.idfsReference = mtx.idfsProphilacticAction
				INNER JOIN dbo.trtProphilacticAction PAC ON PAC.idfsProphilacticAction = PA.idfsReference
				INNER JOIN dbo.FN_GBL_DiagnosisRepair(@LangID, 96, 10020002) D ON D.idfsDiagnosis = mtx.idfsDiagnosis  -- 2 = Human, use 10020002 for Aggregate cases

				WHERE mtx.intRowStatus = 0 AND  mtx.idfVersion = @idfVersion
				ORDER BY mtx.intNumRow ASC

--------------------------------------------------------------------------------------------------------------------------------
				--SpicesList
				INSERT INTO @tmpSpeciesList
				EXEC dbo.USP_CONF_GetSpeciesList_GET 
						@idfsBaseReference= 19000086,
						@intHACode=96,
						@strLanguageID=@LangID --@idfVersion=19000086
				
				--Get Flex Form for Prophylactic Actions details
				INSERT INTO @tempFlexForm
				SELECT 
					s.idfsParentSection
					,COALESCE(p.idfsSection,0) AS idfsSection
					,p.idfsParameter
					,RF.Name AS SectionName
					,PN.Name AS ParameterName
					,PTR.Name AS parameterType
					,p.idfsParameterType
					,pt.idfsReferenceType
					,p.idfsEditor
					,sdo.intOrder	AS SectionOrder
					,PDO.intOrder	AS ParameterOrder
					,s.blnGrid
					,s.blnFixedRowSet
					,PFT.idfsEditMode
					,pft.idfsFormTemplate
				FROM dbo.ffParameter p
				LEFT JOIN dbo.ffParameterForTemplate PFT ON PFT.idfsParameter = p.idfsParameter AND PFT.intRowStatus = 0
				LEFT JOIN dbo.ffSection s ON s.idfsSection = p.idfsSection
				LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000101) RF ON S.idfsSection = RF.idfsReference
				LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000071) PTR ON PTR.idfsReference = P.idfsParameterType
				LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000066) PN ON PN.idfsReference = P.idfsParameter
				LEFT JOIN dbo.ffParameterDesignOption PDO ON PFT.idfsParameter = PDO.idfsParameter
					AND PFT.idfsFormTemplate = PDO.idfsFormTemplate
					AND PDO.idfsLanguage = @idfsLanguage
					AND PDO.intRowStatus = 0
				LEFT JOIN dbo.ffSectionDesignOption sdo ON sdo.idfsSection = s.idfsSection 
					AND sdo.idfsFormTemplate = @idfsFormTemplate 
					AND sdo.idfsLanguage = @idfsLanguage
					AND sdo.intRowStatus = 0
				LEFT JOIN dbo.ffParameterType PT
					ON pt.idfsParameterType = p.idfsParameterType
				WHERE PFT.idfsFormTemplate = @idfsFormTemplate


				--EXEC [dbo].[USP_ADMIN_FF_FlexForm_Get] 
				--		@LangID =@LangID, 
				--		@idfsDiagnosis= NULL, 
				--		@idfsFormType = 10034023, 
				--		@idfsFormTemplate=@idfsFormTemplate

--				SELECT * FROM @tempFlexForm

				--Get Activity Parameters
				--INSERT INTO @tmpActivityParameters
				--EXEC dbo.USP_ADMIN_FF_ActivityParameters_GET
				--		@observationList = @observationList, 
				--		@LangID = @LangID
				INSERT INTO @tmpActivityParameters  (
						[idfActivityParameters],
						[idfObservation],
						[idfsFormTemplate],
						[idfsParameter],
						[idfsSection],
						[idfRow],
						[varValue],
						[Type],
						[numRow],
						[ParameterType]  
				)
				SELECT 
					AP.idfActivityParameters,
					AP.idfObservation,
					O.idfsFormTemplate,
					AP.idfsParameter,
					P.idfsSection,
					AP.idfRow,
					AP.varValue,
					--CAST(AP.varValue AS NVARCHAR(MAX)),
					dbo.FN_ADMIN_FF_TypeActivityParameters_GET(AP.idfsParameter),
					ROW_NUMBER() OVER (
						PARTITION BY AP.idfObservation ORDER BY AP.idfRow
						), 
					P.idfsParameterType
				FROM dbo.tlbActivityParameters AP
				LEFT JOIN dbo.ffParameter P	ON P.idfsParameter = AP.idfsParameter AND P.intRowStatus = 0
				INNER JOIN dbo.tlbObservation O ON AP.idfObservation = O.idfObservation
		
				WHERE AP.idfObservation IN (SELECT idfProphylacticObservation FROM @observationsTable)
				AND AP.intRowStatus = 0
				AND O.intRowStatus = 0
				ORDER BY 
					AP.idfObservation,
					P.idfsSection,
					AP.idfRow


				--Report
				SELECT	ff.ParameterName
						,sl.strSpecies
						,ff.idfsParameter
						,ff.ParameterOrder
						,m.idfsDiagnosis
						,m.strDefault
						,m.strOIECode
						,m.intNumRow
						,m.strActionCode
						,m.strAction
						,SUM(CAST(ap.varValue AS INT)) AS varValue--ap.idfRow,m.idfAggrHumanCaseMTX as idfRow
						,SQL_VARIANT_PROPERTY(ap.varValue, 'BaseType')

				FROM @tempFlexForm ff 
				CROSS JOIN @tmpMatrix m 
				LEFT JOIN @tmpActivityParameters ap ON ff.idfsParameter=ap.idfsParameter AND m.idfAggrVetCaseMTX=ap.idfRow
				LEFT JOIN @tmpSpeciesList sl ON sl.idfBaseReference=m.idfsSpeciesType
				GROUP BY
					ff.ParameterName
					,sl.strSpecies
					,ff.idfsParameter
					,ff.ParameterOrder
					,m.idfsDiagnosis
					,m.strDefault
					,m.strOIECode
					,m.intNumRow
					,m.strActionCode
					,m.strAction
					,SQL_VARIANT_PROPERTY(ap.varValue, 'BaseType')
				ORDER BY intNumRow

			END

		DROP TABLE IF EXISTS #tmpDetails;

	END TRY

	BEGIN CATCH
		IF @@TRANCOUNT = 1
			ROLLBACK;

		SET @returnCode = ERROR_NUMBER();
		SET @returnMsg = 'ErrorNumber: ' + CONVERT(VARCHAR, ERROR_NUMBER()) + ' ErrorSeverity: ' + CONVERT(VARCHAR, ERROR_SEVERITY()) + ' ErrorState: ' + CONVERT(VARCHAR, ERROR_STATE()) + ' ErrorProcedure: ' + ISNULL(ERROR_PROCEDURE(), '') + ' ErrorLine: ' + CONVERT(VARCHAR, ISNULL(ERROR_LINE(), '')) + ' ErrorMessage: ' + ERROR_MESSAGE();;

		THROW;
	END CATCH
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering Procedure [Report].[USP_REP_Veterinary_Aggregate_SanitaryAction_Summary_Report_Detail]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- ================================================================================================
-- Name: USP_REP_Veterinary_Aggregate_SanitaryAction_Summary_Report_Detail
-- Description: PrintedForm Veterinary Aggregate Report
--          
-- Revision History:
-- Name				Date			Change
-- ---------------	----------	--------------------------------------------------------------------
-- Mark Wilson		10/11/2022  initial cut.
/*

EXEC    [Report].[USP_REP_Veterinary_Aggregate_SanitaryAction_Summary_Report_Detail]
        @LangID = N'en-US',
        @idfAggrCaseList = '128822070001294;127398630001294;121195250001294'

*/
-- ================================================================================================
ALTER PROCEDURE [Report].[USP_REP_Veterinary_Aggregate_SanitaryAction_Summary_Report_Detail] 
(
	@LangID AS NVARCHAR(50),
	@idfAggrCaseList AS  NVARCHAR(MAX)= NULL
)
AS
BEGIN
	DROP TABLE IF EXISTS #tmpDetails;

	DECLARE @idfsCountry AS BIGINT,
			@idfsLanguage BIGINT = dbo.FN_GBL_LanguageCode_GET(@LangID);

	DECLARE @returnCode INT = 0;
	DECLARE @returnMsg NVARCHAR(MAX) = 'SUCCESS';

	DECLARE @AggrCaseTable TABLE (
		[idfAggrCase] BIGINT,
		[intRowNumber] INT
		)

	--Get Selected Agg Cases
	INSERT INTO @AggrCaseTable (
			[idfAggrCase],
			[intRowNumber]
			)
	SELECT CAST([Value] AS BIGINT),
		ROW_NUMBER() OVER (
			ORDER BY [Value]
			)
	FROM [dbo].[FN_GBL_SYS_SplitList](@idfAggrCaseList, NULL, NULL)

	DECLARE @tmpMatrix AS TABLE (
		intNumRow INT
		,idfAggrVetCaseMTX BIGINT
		,strActionCode NVARCHAR(200)
		,strAction NVARCHAR(300)
		)

   DECLARE @tempFlexForm TABLE (
		idfsParentSection BIGINT
		,idfsSection BIGINT
		,idfsParameter BIGINT
		,SectionName NVARCHAR(2000)
		,ParameterName NVARCHAR(500)
		,parameterType NVARCHAR(100)
		,idfsParameterType BIGINT
		,idfsReferenceType BIGINT
		,idfsEditor BIGINT
		,SectionOrder INT
		,ParameterOrder INT
		,blnGrid BIT
		,blnFixedRowSet BIT
		,idfsEditMode BIGINT
		,idfsFormTemplate BIGINT
		)

	DECLARE @observationsTable TABLE (
		[idfSanitaryObservation] BIGINT,
		[idfSanitaryVersion] BIGINT,
		[idfsCaseFormTemplate] BIGINT,
		[intRowNumber] INT
		)

	DECLARE @tmpActivityParameters TABLE (
		[idfActivityParameters] BIGINT,
		[idfObservation] BIGINT,
		[idfsFormTemplate] BIGINT,
		[idfsParameter] BIGINT,
		[idfsSection] BIGINT,
		[idfRow] BIGINT,
		[Type] BIGINT,
		[varValue] sql_variant, --NVARCHAR(MAX),
		[numRow] INT,
		[ParameterType]  BIGINT
		)


	BEGIN TRY

			BEGIN


				--Get this SQl from [dbo].[USP_AGG_CASE_GETDETAIL]
				SELECT 
					a.idfSanitaryObservation
					,CaseObs.idfsFormTemplate AS idfsCaseFormTemplate
					,a.idfSanitaryVersion
				INTO #tmpDetails
				FROM dbo.tlbAggrCase a	
				LEFT JOIN dbo.tlbObservation CaseObs ON a.idfSanitaryObservation = CaseObs.idfObservation
				WHERE a.intRowStatus = 0
				AND a.idfAggrCase IN (SELECT idfAggrCase FROM @AggrCaseTable)

				DECLARE @idfsFormTemplate BIGINT,
						@idfVersion BIGINT

				INSERT INTO @observationsTable (
					[idfSanitaryObservation],
					[idfSanitaryVersion],
					[idfsCaseFormTemplate],
					[intRowNumber]
					)
				SELECT [idfSanitaryObservation],
					idfSanitaryVersion,
					idfsCaseFormTemplate,
					ROW_NUMBER() OVER (
						ORDER BY [idfSanitaryObservation]
						)
				FROM #tmpDetails

				SELECT @idfsFormTemplate=idfsCaseFormTemplate, 
						@idfVersion= idfSanitaryVersion
				FROM @observationsTable
				--SELECT * FROM @observationsTable

				--Get this SQL from USP_CONF_ADMIN_AggregateVetCaseMatrixReport_GET -- dbo.USP_CONF_ADMIN_AggregateHumanCaseMatrixReport_GET
				INSERT INTO @tmpMatrix
				SELECT	 
					mtx.intNumRow as intNumRow,
					mtx.idfAggrSanitaryActionMTX,
					SAC.strActionCode,
					SA.name AS strAction

				FROM dbo.tlbAggrSanitaryActionMTX mtx
				INNER JOIN dbo.FN_GBL_ReferenceRepair_GET(@LangID, 19000079) SA ON SA.idfsReference = mtx.idfsSanitaryAction
				INNER JOIN dbo.trtSanitaryAction SAC ON SAC.idfsSanitaryAction = SA.idfsReference

				WHERE mtx.intRowStatus = 0 AND  mtx.idfVersion = @idfVersion
				--ORDER BY mtx.intNumRow ASC

--------------------------------------------------------------------------------------------------------------------------------		
				--Get Flex Form for Sanitary Actions details
				INSERT INTO @tempFlexForm
				SELECT 
					s.idfsParentSection
					,COALESCE(p.idfsSection,0) AS idfsSection
					,p.idfsParameter
					,RF.Name AS SectionName
					,PN.Name AS ParameterName
					,PTR.Name AS parameterType
					,p.idfsParameterType
					,pt.idfsReferenceType
					,p.idfsEditor
					,sdo.intOrder	AS SectionOrder
					,PDO.intOrder	AS ParameterOrder
					,s.blnGrid
					,s.blnFixedRowSet
					,PFT.idfsEditMode
					,pft.idfsFormTemplate
				FROM dbo.ffParameter p
				LEFT JOIN dbo.ffParameterForTemplate PFT ON PFT.idfsParameter = p.idfsParameter AND PFT.intRowStatus = 0
				LEFT JOIN dbo.ffSection s ON s.idfsSection = p.idfsSection
				LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000101) RF ON S.idfsSection = RF.idfsReference
				LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000071) PTR ON PTR.idfsReference = P.idfsParameterType
				LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000066) PN ON PN.idfsReference = P.idfsParameter
				LEFT JOIN dbo.ffParameterDesignOption PDO ON PFT.idfsParameter = PDO.idfsParameter
					AND PFT.idfsFormTemplate = PDO.idfsFormTemplate
					AND PDO.idfsLanguage = @idfsLanguage
					AND PDO.intRowStatus = 0
				LEFT JOIN dbo.ffSectionDesignOption sdo ON sdo.idfsSection = s.idfsSection 
					AND sdo.idfsFormTemplate = @idfsFormTemplate 
					AND sdo.idfsLanguage = @idfsLanguage
					AND sdo.intRowStatus = 0
				LEFT JOIN dbo.ffParameterType PT
					ON pt.idfsParameterType = p.idfsParameterType
				WHERE PFT.idfsFormTemplate = @idfsFormTemplate

				INSERT INTO @tmpActivityParameters  (
						[idfActivityParameters],
						[idfObservation],
						[idfsFormTemplate],
						[idfsParameter],
						[idfsSection],
						[idfRow],
						[varValue],
						[Type],
						[numRow],
						[ParameterType]  
				)
				SELECT 
					AP.idfActivityParameters,
					AP.idfObservation,
					O.idfsFormTemplate,
					AP.idfsParameter,
					P.idfsSection,
					AP.idfRow,
					AP.varValue,
					--CAST(AP.varValue AS NVARCHAR(MAX)),
					dbo.FN_ADMIN_FF_TypeActivityParameters_GET(AP.idfsParameter),
					ROW_NUMBER() OVER (
						PARTITION BY AP.idfObservation ORDER BY AP.idfRow
						), 
					P.idfsParameterType
				FROM dbo.tlbActivityParameters AP
				LEFT JOIN dbo.ffParameter P	ON P.idfsParameter = AP.idfsParameter AND P.intRowStatus = 0
				INNER JOIN dbo.tlbObservation O ON AP.idfObservation = O.idfObservation
		
				WHERE AP.idfObservation IN (SELECT idfSanitaryObservation FROM @observationsTable)
				AND AP.intRowStatus = 0
				AND O.intRowStatus = 0
				ORDER BY 
					AP.idfObservation,
					P.idfsSection,
					AP.idfRow


				--Report
				SELECT	ff.ParameterName
						,ff.idfsParameter
						,ff.ParameterOrder
						,m.intNumRow
						,m.strActionCode
						,m.strAction
						,SUM(CAST(ap.varValue AS INT)) AS varValue--ap.idfRow,m.idfAggrHumanCaseMTX as idfRow
						,SQL_VARIANT_PROPERTY(ap.varValue, 'BaseType')

				FROM @tempFlexForm ff 
				CROSS JOIN @tmpMatrix m 
				LEFT JOIN @tmpActivityParameters ap ON ff.idfsParameter=ap.idfsParameter AND m.idfAggrVetCaseMTX=ap.idfRow

				GROUP BY
				ff.ParameterName
						,ff.idfsParameter
						,ff.ParameterOrder
						,m.intNumRow
						,m.strActionCode
						,m.strAction
						,SQL_VARIANT_PROPERTY(ap.varValue, 'BaseType')
				ORDER BY intNumRow

			END

		DROP TABLE IF EXISTS #tmpDetails;

	END TRY

	BEGIN CATCH
		IF @@TRANCOUNT = 1
			ROLLBACK;

		SET @returnCode = ERROR_NUMBER();
		SET @returnMsg = 'ErrorNumber: ' + CONVERT(VARCHAR, ERROR_NUMBER()) + ' ErrorSeverity: ' + CONVERT(VARCHAR, ERROR_SEVERITY()) + ' ErrorState: ' + CONVERT(VARCHAR, ERROR_STATE()) + ' ErrorProcedure: ' + ISNULL(ERROR_PROCEDURE(), '') + ' ErrorLine: ' + CONVERT(VARCHAR, ISNULL(ERROR_LINE(), '')) + ' ErrorMessage: ' + ERROR_MESSAGE();;

		THROW;
	END CATCH
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering Procedure [dbo].[USP_GBL_DataAuditEvent_SET]...';


GO
-- =============================================
-- Author:		Steven Verner
-- Create date: 02/28/2022
-- Description:	
-- Create an entry into the tauDataAuditDetailCreate table if one doesn't exist or updates an audit 
-- event in the tauDataAuditDetailUpdate table.
-- =============================================
ALTER PROCEDURE [dbo].[USP_GBL_DataAuditEvent_SET]
	-- Add the parameters for the stored procedure here
	 @userName nvarchar(2576)
	,@JSONUpdates NVARCHAR(MAX)
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @idfDataAuditEvent BIGINT 
	DECLARE @returnMsg	VARCHAR(MAX) = 'SUCCESS';
	DECLARE @returnCode	BIGINT = 0;
	DECLARE @idfUserID BIGINT
	DECLARE @idfSiteID BIGINT 
	DECLARE @strValue SQL_VARIANT
	DECLARE @strOldValue SQL_VARIANT
	DECLARE @ID INT 
	DECLARE @max INT
	DECLARE @idfsObjectType BIGINT
	DECLARE @idfsDataAuditEventType BIGINT
	DECLARE @idfObject BIGINT
	DECLARE @idfObjectTable BIGINT
	DECLARE @idfColumn BIGINT


	DECLARE @Input TABLE( 
		 ID INT IDENTITY(1,1)
		,idfsObjectType BIGINT	
		,idfsDataAuditEventType BIGINT
		,idfsObjectTable BIGINT
		,idfColumn BIGINT
		,idfObject BIGINT
		,idfObjectDetail BIGINT
		,strValue nvarchar(4000))

	BEGIN TRY

		SELECT @idfUserID = a.idfUserId, @idfSiteID = lcc.idfsSite --, @event = lcc.idfDataAuditEvent
		FROM aspnetusers a 
		LEFT JOIN tstLocalConnectionContext lcc ON lcc.idfUserID = a.idfUserID
		WHERE a.username = @username

		-- If the json object is null, there's nothing to do...
		IF(@JSONUpdates IS NULL ) RETURN 0

		-- Get the current event id for this user from the local context table...
		EXEC USSP_GBL_DataAuditEvent_GET @idfUserID, @idfDataAuditEvent OUTPUT

		-- insert json
		INSERT INTO @input
		SELECT idfsObjectType, idfEventType, idfsObjectTable,idfColumn,idfObject,idfObjectDetail, AuditValue
		FROM OPENJSON(@JSONUpdates)
		WITH(
			idfsObjectType BIGINT,
			idfEventType BIGINT,
			idfsObjectTable BIGINT,
			idfColumn BIGINT,
			idfObject BIGINT,
			idfObjectDetail BIGINT,
			AuditValue NVARCHAR(4000) )
		
		SET @ID = 1	
		SELECT @Max = COUNT(*) FROM @Input

		WHILE ( @ID <= @Max )
		BEGIN
			SELECT 
				 @idfsObjectType = idfsObjectType
				,@idfsDataAuditEventType = idfsDataAuditEventType
				,@idfObject = idfObject
				,@idfObjectTable = idfsObjectTable
				,@strValue = strValue
			FROM @Input
			WHERE ID =@ID
			
				-- Create the audit create record if it isn't already there...
				IF( NOT EXISTS(
					SELECT idfDataAuditEvent 
					FROM tauDataAuditDetailCreate ac
					WHERE ac.idfDataAuditEvent = @idfDataAuditEvent AND ac.idfObjectTable = @idfObjectTable AND ac.idfObject = @idfObject))

					INSERT INTO dbo.tauDataAuditDetailCreate( idfDataAuditEvent, idfObjectTable, idfObject, idfObjectDetail)
					SELECT @idfDataAuditEvent, i.idfsObjectTable, i.idfObject, i.idfObjectDetail
					FROM @Input i 
		
				-- Old value...
				SELECT TOP 1 @strOldValue = strNewValue
				FROM tauDataAuditDetailUpdate 
				WHERE idfObjectTable = @idfObjectTable AND idfObject = @idfObject AND IdfColumn = @idfColumn
				ORDER BY AuditCreateDTM DESC

				-- Create the update record...
				INSERT INTO tauDataAuditDetailUpdate(idfDataAuditEvent,idfObjectTable, idfColumn,idfObject,strOldValue, strNewValue )
				VALUES(@idfDataAuditEvent,@idfObjectTable, @idfColumn, @idfObject, @strOldValue, @strValue)

			SELECT @ID = @ID+1

		END

		SELECT @returnCode 'ReturnCode', @returnMsg 'ReturnMessage';
	END TRY
	BEGIN CATCH
		SET @returnCode = ERROR_NUMBER()
		SET @returnMsg = 
		'ErrorNumber: ' + CONVERT(VARCHAR, ERROR_NUMBER()) 
		+ ' ErrorSeverity: ' + CONVERT(VARCHAR, ERROR_SEVERITY())
		+ ' ErrorState: ' + CONVERT(VARCHAR, ERROR_STATE())
		+ ' ErrorProcedure: ' + ISNULL(ERROR_PROCEDURE(), '')
		+ ' ErrorLine: ' +  CONVERT(VARCHAR, ISNULL(ERROR_LINE(), ''))
		+ ' ErrorMessage: '+ ERROR_MESSAGE()

		SELECT @returnCode 'ReturnCode', @returnMsg 'ReturnMessage'
	END CATCH
END
GO
PRINT N'Refreshing Procedure [dbo].[USP_ASPNetUserSetSessionContext]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ASPNetUserSetSessionContext]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_GBL_DataAuditEvent_Delete]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_GBL_DataAuditEvent_Delete]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_GBL_DataAuditEvent_Update]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_GBL_DataAuditEvent_Update]';


GO
PRINT N'Update complete.';


GO
