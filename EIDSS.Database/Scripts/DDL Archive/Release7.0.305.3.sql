/*
Deployment script for EIDSS7_GG

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO

USE [$(DatabaseName)];


GO

PRINT N'Altering Procedure [dbo].[USP_GBL_BASE_REFERENCE_GETList]...';


GO



--*************************************************************************************************
-- Name: USP_GBL_BASE_REFERENCE_GETList
--
-- Description: List filered values from tlbBaseReference table.
--          
-- Revision History:
-- Name							Date		Change Detail
-- ---------------				----------	--------------------------------------------------------------------
-- Stephen Long					06/29/2019	Initial release.
-- Manickandan Govindarajan		11/24/2020	The IF query is getting the intHACode from basereference table but the
--											IntHACode is 0 for multiple records ex: 19000040 refrencetype
--											Updated the code to get intHACode from trtHACodeList table. It will help to filter in the app
--
-- Mark Wilson					12/16/2020  Updated to accept null HACode (when HACode is unnecessary)
-- Steven Verner				10/21/2022	Removed duplicate base reference types where there currently is an editor for those types
--											Like Age Group, Case Classification,etc.
--											This change fixes bugs 3865,4757,4756,4755,4750...

--
-- @intHACode Code List
-- 0	None
-- 2	Human
-- 4	Exophyte
-- 8	Plant
-- 16	Soil
-- 32	Livestock
-- 64	Avian
-- 128	Vector
-- 256	Syndromic
-- 510	All	
--
-- Testing code:
/*
	Exec USP_GBL_BASE_REFERENCE_GETList 'EN', 'Nationality List', 0
	Exec USP_GBL_BASE_REFERENCE_GETList 'EN', 'Case Status', 64
	Exec USP_GBL_BASE_REFERENCE_GETList 'EN', 'Diagnosis', 2
	EXEC USP_GBL_BASE_REFERENCE_GETList 'en','Personal ID Type', 0
	EXEC USP_GBL_BASE_REFERENCE_GETList 'en','Patient Location Type', 2
	EXEC USP_GBL_BASE_REFERENCE_GETList 'en','Organization Type', 482
	EXEC USP_GBL_BASE_REFERENCE_GETList 'en','Human Age Type', 2

*/
-- ************************************************************************************************
ALTER PROCEDURE [dbo].[USP_GBL_BASE_REFERENCE_GETList] 
(
	@LangID	NVARCHAR(50),
	@ReferenceTypeName VARCHAR(400) = NULL,
	@intHACode	BIGINT = NULL 
)
AS
	DECLARE @HACodeMax BIGINT = 510;
	DECLARE @ReturnMsg VARCHAR(MAX) = 'Success';
	DECLARE @ReturnCode BIGINT = 0;
	DECLARE @HAList TABLE(
		intHACode INT

	)

	IF @intHACode IS NOT NULL
	INSERT INTO @HAList
	(
	    intHACode
	)
	SELECT intHACode FROM dbo.FN_GBL_SplitHACode(@intHACode, @HACodeMax)

	BEGIN TRY

		SELECT 
			br.idfsBaseReference,
			br.idfsReferenceType,
			br.strBaseReferenceCode,
			br.strDefault,
			ISNULL(s.strTextString, br.strDefault) AS [name],
			br.intHACode,
			br.intOrder,
			br.intRowStatus,
			br.blnSystem,
			rt.intDefaultHACode,
			CASE WHEN ISNULL(@intHACode,0) = 0 THEN NULL ELSE dbo.FN_GBL_SPLITHACODEASSTRING(br.intHACode, 510) END AS strHACode 

		FROM dbo.trtBaseReference br
		INNER JOIN dbo.trtReferenceType AS rt ON rt.idfsReferenceType = br.idfsReferenceType
		LEFT JOIN dbo.trtStringNameTranslation AS s ON br.idfsBaseReference = s.idfsBaseReference AND s.idfsLanguage = dbo.FN_GBL_LanguageCode_Get(@LangID)
		LEFT JOIN dbo.trtHACodeList HA ON HA.intHACode = br.intHACode
		LEFT JOIN dbo.trtBaseReference HAR ON HAR.idfsBaseReference = HA.idfsCodeName
		
		WHERE 
			br.idfsBaseReference NOT IN (19000146,19000011,19000019,19000537,19000529,19000530,19000531,19000532,19000533,19000534,19000535,19000125,19000123,19000122,
												 19000143,19000050,19000126,19000121,19000075,19000124,19000012,19000164,19000019,19000503,19000530,19000510,19000506,19000505,
												 19000509,19000511,19000508,19000507,19000022,19000131,19000070,19000066,19000071,19000069,19000029,19000032,19000101,19000525,
												 19000033,19000532,19000534,19000533,19000152,19000056,19000060,19000109,19000062,19000045,19000046,19000516,19000074,19000147,
												 19000130,19000535,19000531,19000087,19000079,19000529,19000119,19000524,19000084,19000519,19000166,19000086,19000090,19000141,
												 19000140)
			AND	
			br.intRowStatus = 0	
			AND
		((EXISTS 
				(SELECT intHACode FROM dbo.FN_GBL_SplitHACode(@intHACode, @HACodeMax) 
				INTERSECT 
				SELECT intHACode FROM dbo.FN_GBL_SplitHACode(br.intHACode, @HACodeMax)) 
				OR @intHACode IS NULL OR @intHACode = 0 OR br.intHACode = @intHACode))
		AND rt.strReferenceTypeName = IIF(@ReferenceTypeName IS NOT NULL, @ReferenceTypeName, rt.strReferenceTypeName )
		
		ORDER BY 
			--br.intOrder,
			[name]

	END TRY  

	BEGIN CATCH 

		THROW;

	END CATCH;
GO
PRINT N'Altering Procedure [dbo].[USP_GBL_LKUP_REFERENCETYPE_FILTERED_PAGED_GETLIST]...';


GO
--=================================================================================================
-- Name: USP_GBL_LKUP_REFERENCETYPE_FILTERED_PAGED_GETLIST
--
-- Description: Returns a list of base reference types WITH PAGING AND FILTERING
--
-- Author: Ricky Moss
--
-- Revision History:
-- Name				Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Ricky Moss		06/20/2019	Initial Release
-- Stephen Long     12/26/2019	Replaced 'en' with @LangID on reference call.
-- Doug Albanese	9/4/2020	Added field to obtain language translation
-- Lamont Mitchell	7/16/2021	Added Paging and Filtering, copied from USP_GBL_LKUP_REFERENCETYPE_GETLIST
-- Michael Brown	03/16/2022	Bug #3127 Changed @sortColumn to 'name'. Added OR br.name... to WHERE clause
-- Steven Verner	10/21/2022	Removed duplicate base reference types where there currently is an editor for those types
--								Like Age Group, Case Classification,etc.
--								This change fixes bugs 3865,4757,4756,4755,4750...
--=================================================================================================
ALTER PROCEDURE [dbo].[USP_GBL_LKUP_REFERENCETYPE_FILTERED_PAGED_GETLIST] (
@LangId NVARCHAR(50),
@advancedSearch NVARCHAR(100) = NULL,
@pageNo INT = 1,
@pageSize INT = 10, 
@sortColumn NVARCHAR(30) = 'name', 
@sortOrder NVARCHAR(4) = 'asc'
)
AS
BEGIN
	BEGIN TRY

		DECLARE @firstRec INT
		DECLARE @lastRec INT
		DECLARE @t TABLE( 
			idfsBaseReference bigint,
			idfsReferenceType bigint, 
			strDefault nvarchar(2000), 
			strName nvarchar(2000), 
			intHACode int,
			intOrder int
			)
		SET @firstRec = (@pageNo-1)* @pagesize
		SET @lastRec = (@pageNo*@pageSize+1)
		IF( @advancedSearch IS NOT NULL)
		BEGIN
			INSERT INTO @T
			SELECT 
				br.idfsReference,
				trtReferenceType.idfsReferenceType,
				strDefault,
				br.name AS strName,
				intHACode,
				intOrder
			FROM dbo.FN_GBL_ReferenceRepairSplit(@LangId, '19000076,19000536') br
			INNER JOIN dbo.trtReferenceType
				ON trtReferenceType.idfsReferenceType = br.idfsReferenceType
			WHERE (intStandard & 4) <> 0
				AND br.idfsReference NOT IN (19000146,19000011,19000019,19000537,19000529,19000530,19000531,19000532,19000533,19000534,19000535,19000125,19000123,19000122,
											 19000143,19000050,19000126,19000121,19000075,19000124,19000012,19000164,19000019,19000503,19000530,19000510,19000506,19000505,
											 19000509,19000511,19000508,19000507,19000022,19000131,19000070,19000066,19000071,19000069,19000029,19000032,19000101,19000525,
											 19000033,19000532,19000534,19000533,19000152,19000056,19000060,19000109,19000062,19000045,19000046,19000516,19000074,19000147,
											 19000130,19000535,19000531,19000087,19000079,19000529,19000119,19000524,19000084,19000519,19000166,19000086,19000090,19000141,
											 19000140)

				AND trtReferenceType.intRowStatus = 0
				and (br.strDefault like '%' + @advancedSearch +'%' OR br.name like '%' + @advancedSearch +'%')
			ORDER BY strReferenceTypeName;
		
			WITH CTEResults AS
			(
				SELECT ROW_NUMBER() OVER ( ORDER BY 
					CASE WHEN @sortColumn = 'strdefault' AND @SortOrder = 'asc' THEN strdefault END ASC,
					CASE WHEN @sortColumn = 'strdefault' AND @SortOrder = 'desc' THEN strdefault END DESC,
					CASE WHEN @sortColumn = 'strName' AND @SortOrder = 'asc' THEN strName END ASC,
					CASE WHEN @sortColumn = 'strName' AND @SortOrder = 'desc' THEN strName END DESC,
					CASE WHEN @sortColumn = 'intHACode' AND @SortOrder = 'asc' THEN intHACode END ASC,
					CASE WHEN @sortColumn = 'intHACode' AND @SortOrder = 'desc' THEN intHACode END DESC,
					CASE WHEN @sortColumn = 'intorder' AND @SortOrder = 'asc' THEN intOrder END ASC,
					CASE WHEN @sortColumn = 'intorder' AND @SortOrder = 'desc' THEN intOrder END DESC
			) AS ROWNUM,
			COUNT(*) OVER () AS 
					TotalRowCount,
					idfsBaseReference,
					idfsReferenceType,
					strDefault,
					strName,
					intHACode,
					intOrder
				FROM @T
			)
			SELECT
					TotalRowCount, 
					idfsBaseReference 'BaseReferenceId',
					idfsReferenceType 'ReferenceId',
					strDefault 'Default',
					strName 'Name',	
					intOrder,
					intHACode,
					TotalPages = (TotalRowCount/@pageSize)+IIF(TotalRowCount%@pageSize>0,1,0),
					CurrentPage = @pageNo 
			FROM CTEResults
			WHERE RowNum > @firstRec AND RowNum < @lastRec 
		END
		ELSE
		BEGIN
		INSERT INTO @T
		SELECT 
			br.idfsReference,
			trtReferenceType.idfsReferenceType,
			strDefault,
			br.name AS strName,
			intHACode,
			intOrder
		FROM dbo.FN_GBL_ReferenceRepair(@LangId, 19000076) br
		INNER JOIN dbo.trtReferenceType
			ON trtReferenceType.idfsReferenceType = br.idfsReferenceType
		WHERE (intStandard & 4) <> 0
			AND br.idfsReference NOT IN (19000146,19000011,19000019,19000537,19000529,19000530,19000531,19000532,19000533,19000534,19000535,19000125,19000123,19000122,
										 19000143,19000050,19000126,19000121,19000075,19000124,19000012,19000164,19000019,19000503,19000530,19000510,19000506,19000505,
										 19000509,19000511,19000508,19000507,19000022,19000131,19000070,19000066,19000071,19000069,19000029,19000032,19000101,19000525,
										 19000033,19000532,19000534,19000533,19000152,19000056,19000060,19000109,19000062,19000045,19000046,19000516,19000074,19000147,
										 19000130,19000535,19000531,19000087,19000079,19000529,19000119,19000524,19000084,19000519,19000166,19000086,19000090,19000141,
										 19000140)
			AND trtReferenceType.intRowStatus = 0
		ORDER BY strReferenceTypeName;




		WITH CTEResults AS
		(
			SELECT ROW_NUMBER() OVER ( ORDER BY 
				CASE WHEN @sortColumn = 'strdefault' AND @SortOrder = 'asc' THEN strdefault END ASC,
				CASE WHEN @sortColumn = 'strdefault' AND @SortOrder = 'desc' THEN strdefault END DESC,
				CASE WHEN @sortColumn = 'strName' AND @SortOrder = 'asc' THEN strName END ASC,
				CASE WHEN @sortColumn = 'strName' AND @SortOrder = 'desc' THEN strName END DESC,
				CASE WHEN @sortColumn = 'intHACode' AND @SortOrder = 'asc' THEN intHACode END ASC,
				CASE WHEN @sortColumn = 'intHACode' AND @SortOrder = 'desc' THEN intHACode END DESC,
				CASE WHEN @sortColumn = 'intorder' AND @SortOrder = 'asc' THEN intOrder END ASC,
				CASE WHEN @sortColumn = 'intorder' AND @SortOrder = 'desc' THEN intOrder END DESC
		) AS ROWNUM,
		COUNT(*) OVER () AS 
				TotalRowCount, 
				idfsBaseReference,
				idfsReferenceType,
				strDefault,
				strName,
				intHACode,
				intOrder
			FROM @T
		)
		SELECT
				TotalRowCount,
				idfsBaseReference 'BaseReferenceId',
				idfsReferenceType 'ReferenceId',
				strDefault 'Default',
				strName 'Name',	
				intOrder,
				intHACode,
				TotalPages = (TotalRowCount/@pageSize)+IIF(TotalRowCount%@pageSize>0,1,0),
				CurrentPage = @pageNo 
		FROM CTEResults
		WHERE RowNum > @firstRec AND RowNum < @lastRec 

		END
	
	
	END TRY

	BEGIN CATCH
		THROW
	END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USP_HUM_TESTS_GetList]...';


GO
--*************************************************************
-- Name 				: USP_HUM_TESTS_GetList
-- Description			: List Human Disease Report TESTS by hcid
--          
-- Author               : JWJ
-- Revision History
--		Name		Date       Change Detail
-- ---------------- ---------- --------------------------------
-- JWJ				20180603		created 
-- HAP				20181105		Added strTestResult field to result set 
-- HAP              20181109		Added TestValidation fields to result set 
--LJM				20201230		Added strTestedByPerson and strTestedByOffice as output perameters
--LJM				20210105		Added strTestCategory and blnNonLaboratoryTest, idfInterpretedByPerson,idfValidatedByPerson as output perameters
-- Leo Tracchia		10/21/2022      fix for properly deleting tests for human disease report DevOps defect 5006
-- Testing code:
-- EXEC USP_HUM_TESTS_GetList 'en', @idfHumanCase=19  --10
--*************************************************************
ALTER PROCEDURE [dbo].[USP_HUM_TESTS_GetList] 
	@LangID							NVARCHAR(50) , --##PARAM @LangID - language ID
	@idfHumanCase					BIGINT = NULL,
	@SearchDiagnosis 				BIGINT = NULL
AS
Begin
	DECLARE @returnMsg				VARCHAR(MAX) = 'Success';
	DECLARE @returnCode				BIGINT = 0;
 
BEGIN TRY  
		SELECT		
					Samples.idfHumanCase
					,Samples.idfMaterial 
					,Samples.strBarcode -- Lab sample ID
					,Samples.strFieldBarcode -- Local Sample ID
					,Samples.idfsSampleType
					,SampleType.name AS strSampleTypeName

					,Samples.datFieldCollectionDate
					,Samples.idfSendToOffice
					,OfficeSendTo.[name] as strSendToOffice
					,Samples.idfFieldCollectedByOffice
					,CollectedByOffice.name as strFieldCollectedByOffice
					,Samples.datFieldSentDate
					----,Samples.strNote
					----,Samples.datAccession			--verify this is date received
					----,Samples.idfsAccessionCondition
					----,Samples.strCondition
					----,Location.idfsRegion as idfsRegion
					----,ISNULL(Region.[name], Region.strDefault) AS [strRegionName]
					----,Location.idfsRayon as idfsRayon
					----,ISNULL(Rayon.[name], Rayon.strDefault) AS [strRayonName]
					----,Samples.blnAccessioned
					----,'' as RecordAction
					,Samples.idfsSampleKind
					,sampleKind.name AS SampleKindTypeName
					--find stridfsSampleKind
					--find strTestDiagnosis and it's id
					,Samples.idfsSampleStatus
					,sampleStatus.name AS SampleStatusTypeName
					,Samples.idfFieldCollectedByPerson  
					--,find strFieldCollectedByPerson   --verify this is the employee
					,Samples.datSampleStatusDate   --verify this is the result date
					,Samples.rowGuid as sampleGuid

					, t.idfTesting
					, t.idfsTestName
					, t.idfsTestCategory
					,testCat.name as strTestCategory
					, t.idfsTestResult
					, t.idfsTestStatus
					, t.idfsDiagnosis
					, (select strDefault from trtbasereference where idfsbasereference = t.idfsDiagnosis) as 'strDiagnosis'
					, tstatus.name as strTestStatus
					, tresult.name as strTestResult

					, TestName.name
					, t.datReceivedDate
					, t.datConcludedDate
					, t.idfTestedByPerson
					, t.idfTestedByOffice
					, isnull(tv.datInterpretationDate, getDate()) as datInterpretedDate
					, tv.idfsInterpretedStatus
					,testinterpretedstatus.name as strInterpretedStatus
					, tv.strInterpretedComment
					, p.strFamilyName as strInterpretedBy
					, isnull(tv.datValidationDate, getDate()) as datValidationDate
					, isnull(tv.blnValidateStatus,0) as blnValidateStatus
					, tv.strValidateComment
					, p.strFamilyName as strValidatedBy
					, u.strAccountName
					, t.rowGuid as testGuid
					, t.intRowStatus,
					testedbyPerson.strFirstName + ' ' + isnull(testedbyPerson.strSecondName,'') + '  ' + testedbyPerson.strFamilyName as strTestedByPerson,
					testedByOffice.FullName as strTestedByOffice,
					isnull(t.blnNonLaboratoryTest,0) as blnNonLaboratoryTest	,
					tv.idfInterpretedByPerson,
					tv.idfValidatedByPerson,
					tv.idfTestValidation
		FROM		dbo.tlbMaterial Samples 
		INNER JOIN	dbo.tlbHumanCase as hc ON Samples.idfHumanCase  = hc.idfHumanCase 		 
		LEFT JOIN	dbo.tlbGeoLocation as Location	ON Location.idfGeoLocation = hc.idfPointGeoLocation
		LEFT JOIN	dbo.FN_GBL_REFERENCEREPAIR(@LangID,19000087) SampleType ON	SampleType.idfsReference = Samples.idfsSampleType
		LEFT JOIN	FN_GBL_GIS_Reference(@LangID,19000003) Region ON Region.idfsReference = Location.idfsRegion
		LEFT JOIN	FN_GBL_GIS_Reference(@LangID,19000002) Rayon ON	Rayon.idfsReference = Location.idfsRayon
		LEFT JOIN	tlbMaterial ParentSample ON	ParentSample.idfMaterial = Samples.idfParentMaterial AND ParentSample.intRowStatus = 0
		LEFT JOIN	dbo.FN_GBL_INSTITUTION(@LangID) AS CollectedByOffice ON CollectedByOffice.idfOffice = Samples.idfFieldCollectedByOffice
		LEFT JOIN	dbo.FN_GBL_INSTITUTION(@LangID) AS OfficeSendTo ON OfficeSendTo.idfOffice = Samples.idfSendToOffice
		LEFT JOIN	FN_GBL_ReferenceRepair(@LangID, 19000158) AS sampleKind	ON sampleKind.idfsReference = Samples.idfsSampleKind 
		LEFT JOIN	FN_GBL_ReferenceRepair(@LangID, 19000015) AS sampleStatus ON sampleStatus.idfsReference = Samples.idfsSampleStatus 

		LEFT JOIN	dbo.tlbTesting t ON t.idfMaterial = Samples.idfMaterial AND t.intRowStatus = 0
		LEFT JOIN	dbo.FN_GBL_REFERENCEREPAIR(@LangID,19000097) TestName ON	TestName.idfsReference = t.idfsTestName

		LEFT JOIN	FN_GBL_ReferenceRepair(@LangID, 19000001) tstatus
		ON			tstatus.idfsReference = t.idfsTestStatus
		LEFT JOIN	FN_GBL_ReferenceRepair(@LangID, 19000096) tresult		
		ON			tresult	.idfsReference = t.idfsTestResult
		LEFT JOIN   dbo.tlbTestValidation as tv on  tv.idfTesting = t.idfTesting AND tv.intRowStatus = 0
		LEFT JOIN   dbo.tstUserTable u on (tv.idfInterpretedByPerson = u.idfPerson or tv.idfValidatedByPerson = u.idfPerson) and u.intRowStatus = 0 
		LEFT JOIN   dbo.tlbPerson p on (p.idfPerson = tv.idfInterpretedByPerson or p.idfPerson = tv.idfValidatedByPerson) and p.intRowStatus = 0
		LEFT JOIN   dbo.tlbPerson testedbyPerson on (testedbyPerson.idfPerson = t.idfTestedByPerson ) 
		LEFT JOIN	dbo.FN_GBL_INSTITUTION(@LangID) AS testedByOffice ON testedByOffice.idfOffice = t.idfTestedByOffice
		LEFT JOIN	FN_GBL_ReferenceRepair(@LangID, 19000095) testCat on testCat.idfsReference = t.idfsTestCategory
		LEFT JOIN	FN_GBL_ReferenceRepair(@LangID, 19000106) testinterpretedstatus on testinterpretedstatus.idfsReference = tv.idfsInterpretedStatus
		
		
		
		WHERE		
		--Samples.blnShowInCaseOrSession = 1 
		--AND 
		Samples.idfHumanCase = @idfHumanCase
		AND	Samples.intRowStatus = 0
		and t.idfHumanCase is not null
		AND t.intRowStatus = 0
		--AND NOT	(ISNULL(Samples.idfsSampleKind,0) = 12675420000000/*derivative*/ 
		--AND (ISNULL(Samples.idfsSampleStatus,0) = 10015002 or ISNULL(Samples.idfsSampleStatus,0) = 10015008)/*deleted in lab module*/)
		--optional param, filter samples by diagnosis: @SearchDiagnosis
		--AND	((idfsFinalDiagnosis = @SearchDiagnosis) OR (@SearchDiagnosis is null))




		--SELECT	@returnCode, @returnMsg;



	END TRY  

	BEGIN CATCH 
		--BEGIN
		--	SET @returnCode = ERROR_NUMBER();
		--	SET @returnMsg = 
		--		'ErrorNumber: ' + CONVERT(VARCHAR, ERROR_NUMBER()) 
		--		+ ' ErrorSeverity: ' + CONVERT(VARCHAR, ERROR_SEVERITY())
		--		+ ' ErrorState: ' + CONVERT(VARCHAR, ERROR_STATE())
		--		+ ' ErrorProcedure: ' + ISNULL(ERROR_PROCEDURE(), '')
		--		+ ' ErrorLine: ' +  CONVERT(VARCHAR, ISNULL(ERROR_LINE(), ''))
		--		+ ' ErrorMessage: '+ ERROR_MESSAGE();

		--	SELECT @returnCode, @returnMsg;
		--END
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_VAS_MONITORING_SESSION_GETDetail]...';


GO
-- ================================================================================================
-- Name: USP_VAS_MONITORING_SESSION_GETDetail
--
-- Description:	Get active surveillance monitoring session detail (one record) for the veterinary 
-- surveillance session edit/enter and other use cases.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     05/02/2019 Initial release.
-- Stephen Long     04/27/2020 Corrected legacy session ID.
-- Stephen Long     08/22/2020 Corrected joins for person entered by site.
-- Mike Kornegay    12/16/2021 Added tlbMonitoringSessionToDiagnosis to all joins involving idfsDiagnosis and changed
--                             location hieararchy to use FN_GBL_LocationHierarchy_Flattened 
-- Mike Kornegay	01/19/2022 Added join to tlbVetCase and added idfCaseType
-- Mike Kornegay	01/26/2022 Added the disease identifiers and names fields to the query and added
--							   the strCampaign field as CampaignID and idfCampaign as CampaignKey.
-- Mike Kornegay	02/01/2022 Removed join to tlbVetCase and added join to MonitoringSessionToSampletypes to
--							   get if the report is Avian or Livestock
-- Mike Kornegay    02/15/2022 Changed SpeciesTypeID to ReportTypeID
-- Mike Kornegay	03/08/2022 Added LocationID
-- Mike Kornegay	06/13/2022 Changed ReportTypeID and ReportTypeName to point to the new SessionCategoryID - this
--							   field now stores the report type of the vet surveillance session so we do not depend 
--							   on the diagnosis list to determine type.
-- Mike Kornegay	10/20/2022 Changed ReportTypeID to point to the new idfsMonitoringSessionSpeciesType.
--
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_VAS_MONITORING_SESSION_GETDetail] (
	@LanguageID NVARCHAR(50),
	@MonitoringSessionID BIGINT
	)
AS
BEGIN
	BEGIN TRY
		SET NOCOUNT ON;

		DECLARE @ReturnMessage VARCHAR(MAX) = 'SUCCESS';
		DECLARE @ReturnCode BIGINT = 0;

		SELECT ms.idfMonitoringSession AS VeterinaryMonitoringSessionID,
			ms.strMonitoringSessionID AS EIDSSSessionID,
			ms.idfsMonitoringSessionStatus AS SessionStatusTypeID,
			MonitoringSessionStatus.name AS SessionStatusTypeName,
			ms.idfsMonitoringSessionSpeciesType AS ReportTypeID,
			ISNULL(reportType.name, reportType.strDefault) as ReportTypeName,
			ms.datEnteredDate AS EnteredDate,
			ms.datStartDate AS StartDate,
			ms.datEndDate AS EndDate,
			diseaseIDs.diseaseIDs AS DiseaseIdentifiers,
            diseaseNames.diseaseNames AS DiseaseNames,
            ms.idfsCountry AS CountryID,
			ms.idfsRegion AS RegionID,
			LH.AdminLevel1Name AS RegionName,
			ms.idfsRayon AS RayonID,
			LH.AdminLevel2Name AS RayonName,
			ms.idfsSettlement AS SettlementID,
			LH.AdminLevel3Name AS SettlementName,
			LH.idfsLocation AS LocationID,
			ms.idfPersonEnteredBy AS EnteredByPersonID,
			ISNULL(p.strFamilyName, N'') + ISNULL(', ' + p.strFirstName, '') + ISNULL(' ' + p.strSecondName, '') AS EnteredByPersonName,
			ms.idfsSite AS SiteID,
			siteName.strSiteName AS SiteName,
			ms.LegacySessionID AS LegacyID,
			c.idfCampaign AS CampaignKey,
			c.strCampaignID AS CampaignID,
			c.strCampaignName AS CampaignName,
			c.idfsCampaignType AS CampaignTypeID,
			campaignType.name AS CampaignTypeName
		FROM dbo.tlbMonitoringSession ms
        LEFT JOIN dbo.tlbMonitoringSessionToDiagnosis msd 
            ON msd.idfMonitoringSession = ms.idfMonitoringSession
		LEFT JOIN dbo.tlbCampaign AS c
			ON c.idfCampaign = ms.idfCampaign
				AND c.intRowStatus = 0
		LEFT JOIN dbo.MonitoringSessionToSampleType AS mss
			ON ms.idfMonitoringSession = mss.idfMonitoringSession
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000116) AS campaignType
			ON c.idfsCampaignType = campaignType.idfsReference
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000117) AS monitoringSessionStatus
			ON monitoringSessionStatus.idfsReference = ms.idfsMonitoringSessionStatus
		LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000538) AS reportType 
			ON reportType.idfsReference = ms.SessionCategoryID
        LEFT JOIN FN_GBL_LocationHierarchy_Flattened(@LanguageID) AS LH 
			ON LH.idfsLocation = ms.idfsLocation
		LEFT JOIN dbo.tlbPerson p
			ON p.idfPerson = ms.idfPersonEnteredBy
				AND p.intRowStatus = 0
		LEFT JOIN dbo.tstUserTable u
			ON u.idfPerson = ms.idfPersonEnteredBy
				AND u.intRowStatus = 0
		LEFT JOIN dbo.tstSite AS SiteName
			ON siteName.idfsSite = ms.idfsSite 
			AND siteName.intRowStatus = 0
		CROSS APPLY (
            SELECT dbo.FN_GBL_SESSION_DISEASEIDS_GET(ms.idfMonitoringSession) diseaseIDs
            ) diseaseIDs
		CROSS APPLY (
            SELECT dbo.FN_GBL_SESSION_DISEASE_NAMES_GET(ms.idfMonitoringSession, @LanguageID) diseaseNames
            ) diseaseNames
		WHERE ms.idfMonitoringSession = @MonitoringSessionID
			AND ms.intRowStatus = 0;
	END TRY

	BEGIN CATCH
		THROW;
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USSP_GBL_DataAuditEvent_GET]...';


GO
-- =============================================
-- Author:		Steven Verner
-- Create date: 2.2.2022
-- Description:	Gets the audit event for the given user
-- =============================================
ALTER PROCEDURE [dbo].[USSP_GBL_DataAuditEvent_GET] 
	-- Add the parameters for the stored procedure here
	@idfUserId BIGINT = NULL, 
	@event BIGINT OUTPUT

AS
BEGIN

	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @officeid BIGINT
	DECLARE @siteid BIGINT 
	DECLARE @aspnetUserId UNIQUEIDENTIFIER

	-- Get the user's siteid...
	SELECT @aspnetUserId = ID FROM aspnetUsers WHERE idfUserID = @idfUserId
	SELECT @officeid = idfInstitution FROM EmployeeToInstitution eti WHERE eti.aspNetUserId = @aspnetUserId AND eti.IsDefault = 1
	SELECT @siteid = idfsSite FROM tstsite WHERE idfOffice = @officeid

	SELECT @event = idfDataAuditEvent 
	FROM tstLocalConnectionContext lcc 
	WHERE @idfUserId = @idfUserId

	IF @event is null
	BEGIN
		EXEC USP_GBL_NEXTKEYID_GET 'tauDataAuditEvent', @event OUTPUT

		INSERT INTO [tauDataAuditEvent] (
			[idfDataAuditEvent],
			[idfsDataAuditObjectType],
			[idfsDataAuditEventType],
			[idfMainObject],
			[idfMainObjectTable],
			[idfUserID],
			[idfsSite],
			[datEnteringDate]
		) 
		values
			(@event,
			NULL,
			10016003, 
			null,
			null,
			@idfUserId,
			@siteid,
			GETDATE()
			)

			UPDATE tstLocalConnectionContext
			SET idfDataAuditEvent = @event
			WHERE idfUserID = @idfUserId
	END 
END
GO
PRINT N'Altering Procedure [dbo].[USSP_GBL_TEST_SET]...';


GO
-- ================================================================================================
-- Name: USSP_GBL_TEST_SET
--
-- Description:	Inserts or updates laboratory and field test records for various use cases.
--
-- Revision History:
-- Name  Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     04/17/2019 Initial release.
-- Stephen Long     12/20/2020 Added monitoring session, vector session, human disease report and 
--                  veterinary disease report identifier parameters.
-- Stephen Long     01/19/2022 Added row action check of 1 to sync up with row action type enum.
-- Leo Tracchia		10/21/2022 fix for properly deleting tests for human disease report DevOps defect 5006
-- ================================================================================================
ALTER PROCEDURE [dbo].[USSP_GBL_TEST_SET]
(
    @LanguageID NVARCHAR(50),
    @TestID BIGINT OUTPUT,
    @TestNameTypeID BIGINT = NULL,
    @TestCategoryTypeID BIGINT = NULL,
    @TestResultTypeID BIGINT = NULL,
    @TestStatusTypeID BIGINT,
    @DiseaseID BIGINT,
    @SampleID BIGINT = NULL,
    @BatchTestID BIGINT = NULL,
    @ObservationID BIGINT,
    @TestNumber INT = NULL,
    @Comments NVARCHAR(500) = NULL,
    @RowStatus INT = NULL,
    @StartedDate DATETIME = NULL,
    @ResultDate DATETIME = NULL,
    @TestedByOrganizationID BIGINT = NULL,
    @TestedByPersonID BIGINT = NULL,
    @ResultEnteredByOrganizationID BIGINT = NULL,
    @ResultEnteredByPersonID BIGINT = NULL,
    @ValidatedByOrganizationID BIGINT = NULL,
    @ValidatedByPersonID BIGINT = NULL,
    @ReadOnlyIndicator BIT,
    @NonLaboratoryTestIndicator BIT,
    @ExternalTestIndicator BIT = NULL,
    @PerformedByOrganizationID BIGINT = NULL,
    @ReceivedDate DATETIME = NULL,
    @ContactPerson NVARCHAR(200) = NULL,
    @MonitoringSessionID BIGINT = NULL,
    @VectorSessionID BIGINT = NULL,
    @HumanDiseaseReportID BIGINT = NULL,
    @VeterinaryDiseaseReportID BIGINT = NULL,
    @AuditUserName NVARCHAR(200),
    @RowAction CHAR
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        IF @RowAction = 'I'
           OR @RowAction = '1' -- Insert
        BEGIN
            EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tlbTesting', @TestID OUTPUT;

            INSERT INTO dbo.tlbTesting
            (
                idfTesting,
                idfsTestName,
                idfsTestCategory,
                idfsTestResult,
                idfsTestStatus,
                idfsDiagnosis,
                idfMaterial,
                idfBatchTest,
                idfObservation,
                intTestNumber,
                strNote,
                intRowStatus,
                datStartedDate,
                datConcludedDate,
                idfTestedByOffice,
                idfTestedByPerson,
                idfResultEnteredByOffice,
                idfResultEnteredByPerson,
                idfValidatedByOffice,
                idfValidatedByPerson,
                blnReadOnly,
                blnNonLaboratoryTest,
                blnExternalTest,
                idfPerformedByOffice,
                datReceivedDate,
                strContactPerson,
                idfMonitoringSession,
                idfVector,
                idfHumanCase,
                idfVetCase,
                AuditCreateUser,
                SourceSystemNameID,
                SourceSystemKeyValue
            )
            VALUES
            (@TestID,
             @TestNameTypeID,
             @TestCategoryTypeID,
             @TestResultTypeID,
             @TestStatusTypeID,
             @DiseaseID,
             @SampleID,
             @BatchTestID,
             @ObservationID,
             @TestNumber,
             @Comments,
             @RowStatus,
             @StartedDate,
             @ResultDate,
             @TestedByOrganizationID,
             @TestedByPersonID,
             @ResultEnteredByOrganizationID,
             @ResultEnteredByPersonID,
             @ValidatedByOrganizationID,
             @ValidatedByPersonID,
             @ReadOnlyIndicator,
             @NonLaboratoryTestIndicator,
             @ExternalTestIndicator,
             @PerformedByOrganizationID,
             @ReceivedDate,
             @ContactPerson,
             @MonitoringSessionID,
             @VectorSessionID,
             @HumanDiseaseReportID,
             @VeterinaryDiseaseReportID,
             @AuditUserName,
             10519001,
             '[{"idfTesting":' + CAST(@TestID AS NVARCHAR(300)) + '}]'
            );
        END
        ELSE
        BEGIN
            UPDATE dbo.tlbTesting
            SET idfsTestName = @TestNameTypeID,
                idfsTestCategory = @TestCategoryTypeID,
                idfsTestResult = @TestResultTypeID,
                idfsTestStatus = @TestStatusTypeID,
                idfsDiagnosis = @DiseaseID,
                idfMaterial = @SampleID,
                idfBatchTest = @BatchTestID,
                idfObservation = @ObservationID,
                intTestNumber = @TestNumber,
                strNote = @Comments,
                intRowStatus = @RowStatus,
                datStartedDate = @StartedDate,
                datConcludedDate = @ResultDate,
                idfTestedByOffice = @TestedByOrganizationID,
                idfTestedByPerson = @TestedByPersonID,
                idfResultEnteredByOffice = @ResultEnteredByOrganizationID,
                idfResultEnteredByPerson = @ResultEnteredByPersonID,
                idfValidatedByOffice = @ValidatedByOrganizationID,
                idfValidatedByPerson = @ValidatedByPersonID,
                blnReadOnly = @ReadOnlyIndicator,
                blnNonLaboratoryTest = @NonLaboratoryTestIndicator,
                blnExternalTest = @ExternalTestIndicator,
                idfPerformedByOffice = @PerformedByOrganizationID,
                datReceivedDate = @ReceivedDate,
                strContactPerson = @ContactPerson,
                idfMonitoringSession = @MonitoringSessionID,
                idfVector = @VectorSessionID,
                idfHumanCase = @HumanDiseaseReportID,
                idfVetCase = @VeterinaryDiseaseReportID,
                AuditUpdateUser = @AuditUserName,
                AuditUpdateDTM = getdate()
            WHERE idfTesting = @TestID;
        END
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USSP_LAB_TEST_SET]...';


GO
-- ================================================================================================
-- Name: USSP_LAB_TEST_SET
--
-- Description:	Inserts or updates test records for various laboratory module 
-- USE cases.
--
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long		01/24/2019 Initial release.
-- Stephen Long     02/01/2019 Added null to the observation ID parameter.
-- Stephen Long     03/30/2020 Added set of audit update time and user on record inserts/updates.
-- Stephen Long     10/28/2020 Changed record action from nchar to char.
-- Stephen Long     02/11/2021 Add logic to set test unassigned and test completed indicators.
-- Stephen Long     09/24/2021 Removed language ID parameter as it is not needed.
-- Stephen Long     01/31/2022 Added source system name and key value update on insert.
-- Leo Tracchia		10/21/2022 fix for properly deleting tests for human disease report DevOps defect 5006
-- ================================================================================================
ALTER PROCEDURE [dbo].[USSP_LAB_TEST_SET]
(
    @TestID BIGINT,
    @TestNameTypeID BIGINT = NULL,
    @TestCategoryTypeID BIGINT = NULL,
    @TestResultTypeID BIGINT = NULL,
    @TestStatusTypeID BIGINT,
    @PreviousTestStatusTypeID BIGINT = NULL,
    @DiseaseID BIGINT,
    @SampleID BIGINT = NULL,
    @BatchTestID BIGINT = NULL,
    @ObservationID BIGINT = NULL,
    @TestNumber INT = NULL,
    @Note NVARCHAR(500) = NULL,
    @RowStatus INT = NULL,
    @StartedDate DATETIME = NULL,
    @ConcludedDate DATETIME = NULL,
    @TestedByOrganizationID BIGINT = NULL,
    @TestedByPersonID BIGINT = NULL,
    @ResultEnteredByOrganizationID BIGINT = NULL,
    @ResultEnteredByPersonID BIGINT = NULL,
    @ValidatedByOrganizationID BIGINT = NULL,
    @ValidatedByPersonID BIGINT = NULL,
    @ReadOnlyIndicator BIT,
    @NonLaboratoryTestIndicator BIT,
    @ExternalTestIndicator BIT = NULL,
    @PerformedByOrganizationID BIGINT = NULL,
    @ReceivedDate DATETIME = NULL,
    @ContactPerson NVARCHAR(200) = NULL,
    @RowAction INT,
    @AuditUserName NVARCHAR(200),
	@HumanDiseaseReportID BIGINT = NULL
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        DECLARE @TestAssignedCount AS INT = 0;

        IF @TestStatusTypeID = 10001003
           OR @TestStatusTypeID = 10001004
        BEGIN
            UPDATE dbo.tlbMaterial
            SET TestUnassignedIndicator = 0,
                TestCompletedIndicator = 0
            WHERE idfMaterial = @SampleID;
        END;
        ELSE IF @TestStatusTypeID = 10001001
                OR @TestStatusTypeID = 10001006
        BEGIN
            SELECT @TestAssignedCount = COUNT(idfTesting)
            FROM dbo.tlbTesting
            WHERE idfMaterial = @SampleID
                  AND intRowStatus = 0
                  AND idfsTestStatus IN ( 10001003, 10001004 );

            IF @TestAssignedCount = 0
            BEGIN
                UPDATE dbo.tlbMaterial
                SET TestCompletedIndicator = 1,
                    TestUnassignedIndicator = 0
                WHERE idfMaterial = @SampleID;
            END
            ELSE
            BEGIN
                UPDATE dbo.tlbMaterial
                SET TestCompletedIndicator = 0,
                    TestUnassignedIndicator = 1
                WHERE idfMaterial = @SampleID;
            END;
        END;

        IF @RowAction = 1 -- Insert
        BEGIN
            EXECUTE dbo.USP_GBL_NEXTKEYID_GET @tableName = N'tlbTesting',
                                              @idfsKey = @TestID OUTPUT;

            INSERT INTO dbo.tlbTesting
            (
                idfTesting,
                idfsTestName,
                idfsTestCategory,
                idfsTestResult,
                idfsTestStatus,
                PreviousTestStatusID,
                idfsDiagnosis,
                idfMaterial,
                idfBatchTest,
                idfObservation,
                intTestNumber,
                strNote,
                intRowStatus,
                datStartedDate,
                datConcludedDate,
                idfTestedByOffice,
                idfTestedByPerson,
                idfResultEnteredByOffice,
                idfResultEnteredByPerson,
                idfValidatedByOffice,
                idfValidatedByPerson,
                blnReadOnly,
                blnNonLaboratoryTest,
                blnExternalTest,
                idfPerformedByOffice,
                datReceivedDate,
                strContactPerson,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser,
				idfHumanCase				
            )
            VALUES
            (@TestID,
             @TestNameTypeID,
             @TestCategoryTypeID,
             @TestResultTypeID,
             @TestStatusTypeID,
             @PreviousTestStatusTypeID,
             @DiseaseID,
             @SampleID,
             @BatchTestID,
             @ObservationID,
             @TestNumber,
             @Note,
             @RowStatus,
             @StartedDate,
             @ConcludedDate,
             @TestedByOrganizationID,
             @TestedByPersonID,
             @ResultEnteredByOrganizationID,
             @ResultEnteredByPersonID,
             @ValidatedByOrganizationID,
             @ValidatedByPersonID,
             @ReadOnlyIndicator,
             @NonLaboratoryTestIndicator,
             @ExternalTestIndicator,
             @PerformedByOrganizationID,
             @ReceivedDate,
             @ContactPerson,
             10519001,
             '[{"idfTesting":' + CAST(@TestID AS NVARCHAR(300)) + '}]',
             @AuditUserName,
			 @HumanDiseaseReportID
            );
        END;
        ELSE
        BEGIN
            UPDATE dbo.tlbTesting
            SET idfsTestName = @TestNameTypeID,
                idfsTestCategory = @TestCategoryTypeID,
                idfsTestResult = @TestResultTypeID,
                idfsTestStatus = @TestStatusTypeID,
                PreviousTestStatusID = @PreviousTestStatusTypeID,
                idfsDiagnosis = @DiseaseID,
                idfMaterial = @SampleID,
                idfBatchTest = @BatchTestID,
                idfObservation = @ObservationID,
                intTestNumber = @TestNumber,
                strNote = @Note,
                intRowStatus = @RowStatus,
                datStartedDate = @StartedDate,
                datConcludedDate = @ConcludedDate,
                idfTestedByOffice = @TestedByOrganizationID,
                idfTestedByPerson = @TestedByPersonID,
                idfResultEnteredByOffice = @ResultEnteredByOrganizationID,
                idfResultEnteredByPerson = @ResultEnteredByPersonID,
                idfValidatedByOffice = @ValidatedByOrganizationID,
                idfValidatedByPerson = @ValidatedByPersonID,
                blnReadOnly = @ReadOnlyIndicator,
                blnNonLaboratoryTest = @NonLaboratoryTestIndicator,
                blnExternalTest = @ExternalTestIndicator,
                idfPerformedByOffice = @PerformedByOrganizationID,
                datReceivedDate = @ReceivedDate,
                strContactPerson = @ContactPerson,
                AuditUpdateUser = @AuditUserName,
                AuditUpdateDTM = GETDATE(),
				idfHumanCase = @HumanDiseaseReportID
            WHERE idfTesting = @TestID;
        END;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_GBL_DataAuditEvent_SET]...';


GO
-- =============================================
-- Author:		Steven Verner
-- Create date: 02/28/2022
-- Description:	
-- Create an entry into the tauDataAuditDetailCreate table if one doesn't exist or updates an audit 
-- event in the tauDataAuditDetailUpdate table.
-- =============================================
ALTER PROCEDURE [dbo].[USP_GBL_DataAuditEvent_SET]
	-- Add the parameters for the stored procedure here
	 @userName nvarchar(2576)
	,@JSONUpdates NVARCHAR(MAX)
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @idfDataAuditEvent BIGINT 
	DECLARE @returnMsg	VARCHAR(MAX) = 'SUCCESS';
	DECLARE @returnCode	BIGINT = 0;
	DECLARE @idfUserID BIGINT
	DECLARE @idfSiteID BIGINT 
	DECLARE @strValue SQL_VARIANT
	DECLARE @strOldValue SQL_VARIANT
	DECLARE @ID INT 
	DECLARE @max INT
	DECLARE @idfsObjectType BIGINT
	DECLARE @idfsDataAuditEventType BIGINT
	DECLARE @idfObject BIGINT
	DECLARE @idfObjectTable BIGINT
	DECLARE @idfColumn BIGINT


	DECLARE @Input TABLE( 
		 ID INT IDENTITY(1,1)
		,idfsObjectType BIGINT	
		,idfsDataAuditEventType BIGINT
		,idfsObjectTable BIGINT
		,idfColumn BIGINT
		,idfObject BIGINT
		,idfObjectDetail BIGINT
		,strValue nvarchar(4000))

	BEGIN TRY

		SELECT @idfUserID = a.idfUserId, @idfSiteID = lcc.idfsSite --, @event = lcc.idfDataAuditEvent
		FROM aspnetusers a 
		LEFT JOIN tstLocalConnectionContext lcc ON lcc.idfUserID = a.idfUserID
		WHERE a.username = @username

		-- If the json object is null, there's nothing to do...
		IF(@JSONUpdates IS NULL ) RETURN 0

		-- Get the current event id for this user from the local context table...
		EXEC USSP_GBL_DataAuditEvent_GET @idfUserID, @idfDataAuditEvent OUTPUT

		-- insert json
		INSERT INTO @input
		SELECT idfsObjectType, idfEventType, idfsObjectTable,idfColumn,idfObject,idfObjectDetail, AuditValue
		FROM OPENJSON(@JSONUpdates)
		WITH(
			idfsObjectType BIGINT,
			idfEventType BIGINT,
			idfsObjectTable BIGINT,
			idfColumn BIGINT,
			idfObject BIGINT,
			idfObjectDetail BIGINT,
			AuditValue NVARCHAR(4000) )
		
		SET @ID = 1	
		SELECT @Max = COUNT(*) FROM @Input

		WHILE ( @ID <= @Max )
		BEGIN
			SELECT 
				 @idfsObjectType = idfsObjectType
				,@idfsDataAuditEventType = idfsDataAuditEventType
				,@idfObject = idfObject
				,@idfObjectTable = idfsObjectTable
				,@strValue = strValue
				,@idfColumn  = idfColumn
			FROM @Input
			WHERE ID =@ID
			
				-- Create the audit create record if it isn't already there...
				IF( NOT EXISTS(
					SELECT idfDataAuditEvent 
					FROM tauDataAuditDetailCreate ac
					WHERE ac.idfDataAuditEvent = @idfDataAuditEvent AND ac.idfObjectTable = @idfObjectTable AND ac.idfObject = @idfObject))

					INSERT INTO dbo.tauDataAuditDetailCreate( idfDataAuditEvent, idfObjectTable, idfObject)
					VALUES( @idfDataAuditEvent, @idfObjectTable, @idfObject )
		
				-- Old value...
				SELECT TOP 1 @strOldValue = strNewValue
				FROM tauDataAuditDetailUpdate 
				WHERE idfObjectTable = @idfObjectTable AND idfObject = @idfObject AND IdfColumn = @idfColumn
				ORDER BY AuditCreateDTM DESC

				-- Create the update record...
				INSERT INTO tauDataAuditDetailUpdate(idfDataAuditEvent,idfObjectTable, idfColumn,idfObject,strOldValue, strNewValue )
				VALUES(@idfDataAuditEvent,@idfObjectTable, @idfColumn, @idfObject, @strOldValue, @strValue)

			SELECT @ID = @ID+1

		END

		SELECT @returnCode 'ReturnCode', @returnMsg 'ReturnMessage';
	END TRY
	BEGIN CATCH
		SET @returnCode = ERROR_NUMBER()
		SET @returnMsg = 
		'ErrorNumber: ' + CONVERT(VARCHAR, ERROR_NUMBER()) 
		+ ' ErrorSeverity: ' + CONVERT(VARCHAR, ERROR_SEVERITY())
		+ ' ErrorState: ' + CONVERT(VARCHAR, ERROR_STATE())
		+ ' ErrorProcedure: ' + ISNULL(ERROR_PROCEDURE(), '')
		+ ' ErrorLine: ' +  CONVERT(VARCHAR, ISNULL(ERROR_LINE(), ''))
		+ ' ErrorMessage: '+ ERROR_MESSAGE()

		SELECT @returnCode 'ReturnCode', @returnMsg 'ReturnMessage'
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_HUM_HUMAN_DISEASE_SET]...';


GO
--*************************************************************
-- Name 				:	USP_HUM_HUMAN_DISEASE_SET
-- Description			:	Insert OR UPDATE human disease record
--          
-- Author               :	Mandar Kulkarni
-- Revision History
--	Name			Date		Change Detail
--	JWJ				04/03/2018	Added new param to end for ReportStatus
--	Harold Pryor	08/01/2018  Added new @DiseaseReportTypeID input paramenter
--	Harold Pryor	11/30/2018  Added new @blnClinicalDiagBasis, @blnLabDiagBasis, @blnEpiDiagBasis input parameters for Basis of Diagnosis 
--                  			and new @DateofClassification input parameter 
--	Harold Pryor	12/05/2018	Added new @StartDateofInvestigation input parameter. Corrected @idfSoughtCareFacility input parameter spelling.	
--	Harold Pryor	12/06/2018	Removed updating Primary Key column for tlbHumanCase UPDATE.
--	Harold Pryor	12/13/2018	Removed @VaccinationName and @VaccinationDate input paramenters
--	Harold Pryor	12/21/2018	Changed @Sample as tlbHdrMaterialGetListSPType and @Tests as tlbHdrTestGetListSPType parameters and replaced as NVARCHAR
--	Harold Pryor	12/27/2018	Changed @Sample parameter to @SampleParameters and changed parameter @Tests to @TestsParameters. 
--	Lamont Mitchell	01/02/2018	Changed @idfHumanCase FROM OutputParameter and added to SELECT Statement
--	Harold Pryor	01/04/2018	Added new input paramters @AntiviralTherapiesParameters and @VaccinationsParameters	
--	Lamont Mitchell	01/11/2019	SUPRESSED Result Sets in  ALL STORED PROCS
--	Harold Pryor	01/21/2019	Added @ContactsParameters input parameter 
--	Harold Pryor	01/27/2019	Added @strSummaryNotes input parameter
--	Harold Pryor	02/10/2019	Added @idfEpiObservation and @idfCSObservation	input paremeters for Flex Forms integration. 
--	Harold Pryor	03/22/2019	UPDATEd to include @idfHuman and @DiseaseID to call to USSP_HUMAN_DISEASE_SAMPLES_SET stored proc 
--	Harold Pryor	04/08/2019	UPDATEd to include @idfHumanCaseRelatedTo imput parameter for Changed Diagnosis Human Disease Report functionality
--	Harold Pryor	04/09/2019	For Smart key generation reference data change for V7 UPDATEd call to USP_GBL_NextNumber using a V6 strDocumentName ('Human Case') 
--                  			input parameter and replaced with V7 trDocumentName ('Human Disease Report') input parameter value instead.  
--	Harold Pryor	04/28/2019	Updated to properly save contacts 
--	Harold Pryor	05/28/2019	Updated to include paramter @idfHuman in call to USSP_HUMAN_DISEASE_CONTACT_SET
--	Harold Pryor	06/04/2019	Updated to include @strEpidemiologistsName input parameter
--	Harold Pryor	06/05/2019	Updated to include @idfsNotCollectedReason input parameter 
--	Harold Pryor	06/18/2019	Updated to include @idfsGeoLocationType input parameter
--	Harold Pryor	06/19/2019	Updated to include @intElevation and @strForeignAddress input parameters
--	Harold Pryor	06/19/2019	Updated to include @intLocationDirection input parameter
--	Lamont Mitchell	04/21/2020	UPDATEd tlbGeolocation Output Parameter
--	Lamont Mitchell	06/07/2020	Modified adding Connected Human disease Report
--	Lamont Mitchell	08/04/2020  ADDED Property @idfInvestigatedByPerson and modified insert and UPDATE Statments to include parameter
--	Lamont Mitchell	08/04/2000	Added SITE ID Property
--	Lamont Mitchell	11/02/2020	Added strNotCollectedReason to property list and add and UPDATE
--	Mandar Kulkani	01/18/2022	Removed two input parameters for relative latitude and longitude
--	Minal Shah		01/24/2022	Added strLocalIdentifier to the request
--	Minal Shah		04/04/2022	Added Site Alert Notifications
--	Doug Albanese	04/19/2022	Added tag to denote refactoring to Location Hierarchy
--	Doug Albanese	05/24/2022	Added idfParentMonitoringSession to connect a Human Active Surveillance to a Disease
--	Mark Wilson		06/02/2022	set @AuditUser = ISNULL(@AuditUser, '') to make sure no nulls
--	Mark Wilson		06/08/2022	defined all parameters for USSP_GBL_SAMPLE_SET
--  Stephen Long    07/06/2022  Updates for site alerts to call new stored procedure.
--	Doug Albanese	07/18/2022	Add @ConnectedTestId, so that HDR can make the association, after obtaining the new idfHumanCase value.
-- Doug Albanese	 09/12/2022	 Linked up the "Monitoring Session ID" to Samples and Tests
-- Doug Albanese	 10/17/2022	 Corrected the "Connected Test" to update all records for the existing monitoring session that have the same person and disease combination
-- Leo Tracchia		10/21/2022 fix for properly deleting tests for human disease report DevOps defect 5006
--	Testing code:
--  exec USP_HUM_HUMAN_DISEASE_SET  null, 27, null, '(new)',784050000000

ALTER PROCEDURE [dbo].[USP_HUM_HUMAN_DISEASE_SET]
(
    @LanguageID NVARCHAR(50),
    @idfHumanCase BIGINT = NULL,                          -- tlbHumanCase.idfHumanCase Primary Key
    @idfHumanCaseRelatedTo BIGINT = NULL,
    @idfHuman BIGINT = NULL,                              -- tlbHumanCase.idfHuman
    @idfHumanActual BIGINT,                               -- tlbHumanActual.idfHumanActual
    @strHumanCaseId NVARCHAR(200) = '(new)',
    @idfsFinalDiagnosis BIGINT,                           -- tlbhumancase.idfsTentativeDiagnosis/idfsFinalDiagnosis
    @datDateOfDiagnosis DATETIME = NULL,                  --tlbHumanCase.datTentativeDiagnosisDate/datFinalDiagnosisDate
    @datNotificationDate DATETIME = NULL,                 --tlbHumanCase.DatNotIFicationDate
    @idfsFinalState BIGINT = NULL,                        --tlbHumanCase.idfsFinalState
    @strLocalIdentifier NVARCHAR(200) = NULL,
    @idfSentByOffice BIGINT = NULL,                       -- tlbHumanCase.idfSentByOffice
    @strSentByFirstName NVARCHAR(200) = NULL,             --tlbHumanCase.strSentByFirstName
    @strSentByPatronymicName NVARCHAR(200) = NULL,        --tlbHumancase.strSentByPatronymicName
    @strSentByLastName NVARCHAR(200) = NULL,              --tlbHumanCase.strSentByLastName
    @idfSentByPerson BIGINT = NULL,                       --tlbHumcanCase.idfSentByPerson

    @idfReceivedByOffice BIGINT = NULL,                   -- tlbHumanCase.idfReceivedByOffice
    @strReceivedByFirstName NVARCHAR(200) = NULL,         --tlbHumanCase.strReceivedByFirstName
    @strReceivedByPatronymicName NVARCHAR(200) = NULL,    --tlbHumanCase.strReceivedByPatronymicName
    @strReceivedByLastName NVARCHAR(200) = NULL,          --tlbHuanCase.strReceivedByLastName
    @idfReceivedByPerson BIGINT = NULL,                   -- tlbHumanCase.idfReceivedByPerson

    @idfsHospitalizationStatus BIGINT = NULL,             -- tlbHumanCase.idfsHospitalizationStatus
    @idfHospital BIGINT = NULL,                           -- tlbHumanCase.idfHospital
    @strCurrentLocation NVARCHAR(200) = NULL,             -- tlbHumanCase.strCurrentLocation
    @datOnSetDate DATETIME = NULL,                        -- tlbHumanCase.datOnSetDate
                                                          --@idfsInitialCaseClassification		BIGINT = NULL, -- tlbHumanCase.idfsInitialCaseStatus 
    @idfsInitialCaseStatus BIGINT = NULL,                 -- tlbHumanCase.idfsInitialCaseStatus
                                                          --@strComments							NVARCHAR(MAX)= NULL, --strClinicalNotes
    @idfsYNPreviouslySoughtCare BIGINT = NULL,            --idfsYNPreviouslySoughtCare
    @datFirstSoughtCareDate DATETIME = NULL,              --tlbHumanCase.datFirstSoughtCareDate

    @idfSoughtCareFacility BIGINT = NULL,                 --tlbHumanCase.idfSoughtCareFacility
    @idfsNonNotIFiableDiagnosis BIGINT = NULL,            --tlbHumanCase.idfsNonNotIFiableDiagnosis
    @idfsYNHospitalization BIGINT = NULL,                 -- tlbHumanCase.idfsYNHospitalization
    @datHospitalizationDate DATETIME = NULL,              --tlbHumanCase.datHospitalizationDate 
    @datDischargeDate DATETIME = NULL,                    -- tlbHumanCase.datDischargeDate
    @strHospitalName NVARCHAR(200) = NULL,                --tlbHumanCase.strHospitalizationPlace  
    @idfsYNAntimicrobialTherapy BIGINT = NULL,            --  tlbHumanCase.idfsYNAntimicrobialTherapy 
    @strAntibioticName NVARCHAR(200) = NULL,              -- tlbHumanCase.strAntimicrobialTherapyName
    @strDosage NVARCHAR(200) = NULL,                      --tlbHumanCase.strDosage
                                                          --(idfs		)DoseMeasurements			BIGINT, --??
    @datFirstAdministeredDate DATETIME = NULL,            -- tlbHumanCase.datFirstAdministeredDate
    @strAntibioticComments NVARCHAR(MAX) = NULL,          -- tlbHumanCase.strClinicalNotes , or strSummaryNotes
    @idfsYNSpecIFicVaccinationAdministered BIGINT = NULL, --  tlbHumanCase.idfsYNSpecIFicVaccinationAdministered
                                                          --@VaccinationName						NVARCHAR(200) = NULL,  --tlbHumanCase.VaccinationName
                                                          --@VaccinationDate						DATETIME = NULL, --tlbHumanCase.VaccinationDate
    @idfInvestigatedByOffice BIGINT = NULL,               -- tlbHumanCase.idfInvestigatedByOffice 
    @StartDateofInvestigation DATETIME = NULL,            -- tlbHumanCase.datInvestigationStartDate
    @idfsYNRelatedToOutbreak BIGINT = NULL,               -- tlbHumanCase.idfsYNRelatedToOutbreak
    @idfOutbreak BIGINT = NULL,                           --idfOutbreak  
    @idfsYNExposureLocationKnown BIGINT = NULL,           --tlbHumanCase.idfsYNExposureLocationKnown
    @idfPointGeoLocation BIGINT = NULL,                   --tlbHumanCase.idfPointGeoLocation
    @datExposureDate DATETIME = NULL,                     -- tlbHumanCase.datExposureDate 
    @idfsGeoLocationType BIGINT = NULL,                   --tlbGeolocation.idfsGeoLocationType
    @strLocationDescription NVARCHAR(MAX) = NULL,         --tlbGeolocation.Description
    @idfsLocationCountry BIGINT = NULL,                   --tlbGeolocation.idfsCountry 
    @idfsLocationRegion BIGINT = NULL,                    --tlbGeolocation.idfsRegion
    @idfsLocationRayon BIGINT = NULL,                     --tlbGeolocation.idfsRayon
    @idfsLocationSettlement BIGINT = NULL,                --tlbGeolocation.idfsSettlement
    @intLocationLatitude FLOAT = NULL,                    --tlbGeolocation.Latittude
    @intLocationLongitude FLOAT = NULL,                   --tlbGeolocation.Longitude
    @intElevation BIGINT = NULL,                          --GISSettlement.intElevation
    @idfsLocationGroundType BIGINT = NULL,                --tlbGeolocation.GroundType
    @intLocationDistance FLOAT = NULL,                    --tlbGeolocation.Distance
    @intLocationDirection FLOAT = NULL,                   --tlbGeolocation.Alignment	
    @strForeignAddress NVARCHAR(MAX) = NULL,              --tlbGeolocation.strForeignAddress 
    @strNote NVARCHAR(MAX) = NULL,                        --tlbhumancase.strNote
                                                          --@idfsFinalClassIFication				BIGINT = NULL, --tlbHuanCase.idfsFinalCaseStatus
    @idfsFinalCaseStatus BIGINT = NULL,                   --tlbHuanCase.idfsFinalCaseStatus 
    @idfsOutcome BIGINT = NULL,                           -- --tlbHumanCase.idfsOutcome 
    @datDateofDeath DATETIME = NULL,                      -- tlbHumanCase.datDateOfDeath 
    @idfsCaseProgressStatus BIGINT = 10109001,            --	tlbHumanCase.reportStatus, default = In-process
    @idfPersonEnteredBy BIGINT = NULL,
    @strClinicalNotes NVARCHAR(2000) = NULL,
    @idfsYNSpecimenCollected BIGINT = NULL,
    @idfsYNTestsConducted BIGINT = NULL,
    @DiseaseReportTypeID BIGINT = NULL,
    @blnClinicalDiagBasis BIT = NULL,
    @blnLabDiagBasis BIT = NULL,
    @blnEpiDiagBasis BIT = NULL,
    @DateofClassification DATETIME = NULL,
    @strSummaryNotes NVARCHAR(MAX) = NULL,
    @idfEpiObservation BIGINT = NULL,
    @idfCSObservation BIGINT = NULL,
    @idfInvestigatedByPerson BIGINT = NULL,
    @strEpidemiologistsName NVARCHAR(MAX) = NULL,
    @idfsNotCollectedReason BIGINT = NULL,
    @strNotCollectedReason NVARCHAR(200) = NULL,
    @SamplesParameters NVARCHAR(MAX) = NULL,
    @TestsParameters NVARCHAR(MAX) = NULL,
    @TestsInterpretationParameters NVARCHAR(MAX) = NULL,
    @AntiviralTherapiesParameters NVARCHAR(MAX) = NULL,
    @VaccinationsParameters NVARCHAR(MAX) = NULL,
    @ContactsParameters NVARCHAR(MAX) = NULL,
    @Events NVARCHAR(MAX) = NULL,
    @idfsHumanAgeType BIGINT = NULL,
    @intPatientAge INT = NULL,
    @datCompletionPaperFormDate DATETIME = NULL,
    @RowStatus INT,
    @idfsSite BIGINT = NULL,
    @AuditUser NVARCHAR(100) = '',
    @idfParentMonitoringSession BIGINT = NULL,
	@ConnectedTestId BIGINT = NULL
--@Samples						tlbHdrMaterialGetListSPType READONLY, 
--@Tests							tlbHdrTestGetListSPType READONLY
--, 
--@Contacts						tlbHdrContactGetListSPType READONLY

)
AS
DECLARE @returnCode INT = 0
DECLARE @returnMsg NVARCHAR(MAX) = 'SUCCESS'
DECLARE @RowID BIGINT = NULL,
        @RowAction NCHAR = NULL,
        @OrderNumber INT,
        @SampleID BIGINT,
        @SampleTypeID BIGINT = NULL,
        @HumanID BIGINT,
        @HumanMasterID BIGINT = NULL,
        @CollectedByPersonID BIGINT = NULL,
        @CollectedByOrganizationID BIGINT = NULL,
        @CollectionDate DATETIME = NULL,
        @SentDate DATETIME = NULL,
        @EIDSSLocalOrFieldSampleID NVARCHAR(200) = NULL,
        @SampleStatusTypeID BIGINT = NULL,
        @EIDSSLaboratorySampleID NVARCHAR(200) = NULL,
        @SentToOrganizationID BIGINT = NULL,
        @ReadOnlyIndicator BIT = NULL,
        @AccessionDate DATETIME = NULL,
        @AccessionConditionTypeID BIGINT = NULL,
        @AccessionComment NVARCHAR(200) = NULL,
        @AccessionByPersonID BIGINT = NULL,
        @CurrentSiteID BIGINT = NULL,
        @TestID BIGINT,
        @TestNameTypeID BIGINT = NULL,
        @TestCategoryTypeID BIGINT = NULL,
        @TestResultTypeID BIGINT = NULL,
        @TestStatusTypeID BIGINT,
        @BatchTestID BIGINT = NULL,
        @TestNumber INT = NULL,
        @StartedDate DATETIME2 = NULL,
        @ResultDate DATETIME2 = NULL,
        @TestedByPersonID BIGINT = NULL,
        @TestedByOrganizationID BIGINT = NULL,
        @ResultEnteredByOrganizationID BIGINT = NULL,
        @ResultEnteredByPersonID BIGINT = NULL,
        @ValidatedByOrganizationID BIGINT = NULL,
        @ValidatedByPersonID BIGINT = NULL,
        @NonLaboratoryTestIndicator BIT,
        @ExternalTestIndicator BIT = NULL,
        @PerformedByOrganizationID BIGINT = NULL,
        @ReceivedDate DATETIME2 = NULL,
        @ContactPersonName NVARCHAR(200) = NULL,
        @TestHumanCaseID BIGINT = NULL,
        @TestInterpretationID BIGINT,
        @InterpretedStatusTypeID BIGINT = NULL,
        @InterpretedByOrganizationID BIGINT = NULL,
        @InterpretedByPersonID BIGINT = NULL,
        @TestingInterpretations BIGINT,
        @ValidatedStatusIndicator BIT = NULL,
        @ReportSessionCreatedIndicator BIT = NULL,
        @ValidatedComment NVARCHAR(200) = NULL,
        @InterpretedComment NVARCHAR(200) = NULL,
        @ValidatedDate DATETIME = NULL,
        @InterpretedDate DATETIME = NULL,
        @EventId BIGINT,
        @EventTypeId BIGINT = NULL,
        @EventSiteId BIGINT = NULL,
        @EventObjectId BIGINT = NULL,
        @EventUserId BIGINT = NULL,
        @EventDiseaseId BIGINT = NULL,
        @EventLocationId BIGINT = NULL,
        @EventInformationString NVARCHAR(MAX) = NULL,
        @EventLoginSiteId BIGINT = NULL,
        @MonitoringSessionActionID BIGINT,
        @ActionTypeID BIGINT,
        @ActionStatusTypeID BIGINT,
        @ActionDate DATETIME = NULL,
        @Comments NVARCHAR(500) = NULL,
        @DiseaseID BIGINT,
        @idfMonitoringSessionToDiagnosis BIGINT,
        @DateEntered DATETIME = GETDATE(),
		@idfMaterial BIGINT


SET @AuditUser = ISNULL(@AuditUser, '')

DECLARE @SamplesTemp TABLE
(
    SampleID BIGINT NOT NULL,
    SampleTypeID BIGINT NULL,
    SampleStatusTypeID BIGINT NULL,
    CollectionDate DATETIME2 NULL,
    CollectedByOrganizationID BIGINT NULL,
    CollectedByPersonID BIGINT NULL,
    SentDate DATETIME2 NULL,
    SentToOrganizationID BIGINT NULL,
    EIDSSLocalOrFieldSampleID NVARCHAR(200) NULL,
    Comments NVARCHAR(200) NULL,
    SiteID BIGINT NOT NULL,
    CurrentSiteID BIGINT NULL,
    DiseaseID BIGINT NULL,
    ReadOnlyIndicator BIT NULL,
    HumanID BIGINT NULL,
    HumanMasterID BIGINT NULL,
    RowStatus INT NOT NULL,
    RowAction CHAR(1) NULL
);

DECLARE @TestsTemp TABLE
(
    TestID BIGINT NOT NULL,
    TestNameTypeID BIGINT NULL,
    TestCategoryTypeID BIGINT NULL,
    TestResultTypeID BIGINT NULL,
    TestStatusTypeID BIGINT NOT NULL,
    DiseaseID BIGINT NULL,
    SampleID BIGINT NULL,
    BatchTestID BIGINT NULL,
    ObservationID BIGINT NULL,
    TestNumber INT NULL,
    Comments NVARCHAR NULL,
    StartedDate DATETIME2 NULL,
    ResultDate DATETIME2 NULL,
    TestedByOrganizationID BIGINT NULL,
    TestedByPersonID BIGINT NULL,
    ResultEnteredByOrganizationID BIGINT NULL,
    ResultEnteredByPersonID BIGINT NULL,
    ValidatedByOrganizationID BIGINT NULL,
    ValidatedByPersonID BIGINT NULL,
    ReadOnlyIndicator BIT NOT NULL,
    NonLaboratoryTestIndicator BIT NOT NULL,
    ExternalTestIndicator BIT NULL,
    PerformedByOrganizationID BIGINT NULL,
    ReceivedDate DATETIME2 NULL,
    ContactPersonName NVARCHAR(200) NULL,
    RowStatus INT NOT NULL,
    RowAction CHAR(1) NULL
);

DECLARE @TestsInterpretationParametersTemp TABLE
(
    TestInterpretationID BIGINT NOT NULL,
    DiseaseID BIGINT NULL,
    InterpretedStatusTypeID BIGINT NULL,
    ValidatedByOrganizationID BIGINT NULL,
    ValidatedByPersonID BIGINT NULL,
    InterpretedByOrganizationID BIGINT NULL,
    InterpretedByPersonID BIGINT NULL,
    TestID BIGINT NOT NULL,
    ValidatedStatusIndicator BIT NULL,
    ReportSessionCreatedIndicator BIT NULL,
    ValidatedComment NVARCHAR(200) NULL,
    InterpretedComment NVARCHAR(200) NULL,
    ValidatedDate DATETIME NULL,
    InterpretedDate DATETIME NULL,
    ReadOnlyIndicator BIT NOT NULL,
    RowStatus INT NOT NULL,
    RowAction INT NULL
);
DECLARE @EventsTemp TABLE
(
    EventId BIGINT NOT NULL,
    EventTypeId BIGINT NULL,
    UserId BIGINT NULL,
    SiteId BIGINT NULL,
    LoginSiteId BIGINT NULL,
    ObjectId BIGINT NULL,
    DiseaseId BIGINT NULL,
    LocationId BIGINT NULL,
    InformationString NVARCHAR(MAX) NULL
);
DECLARE @SuppressSelect TABLE
(
    ReturnCode INT,
    ReturnMessage VARCHAR(200)
);

BEGIN
    BEGIN TRY
        SET @SamplesParameters = REPLACE(@SamplesParameters, '"0001-01-01T00:00:00"', 'null')

        INSERT INTO @SamplesTemp
        SELECT *
        FROM
            OPENJSON(@SamplesParameters)
            WITH
            (
                SampleID BIGINT,
                SampleTypeID BIGINT,
                SampleStatusTypeID BIGINT,
                CollectionDate DATETIME2,
                CollectedByOrganizationID BIGINT,
                CollectedByPersonID BIGINT,
                SentDate DATETIME2,
                SentToOrganizationID BIGINT,
                EIDSSLocalOrFieldSampleID NVARCHAR(200),
                Comments NVARCHAR(200),
                SiteID BIGINT,
                CurrentSiteID BIGINT,
                DiseaseID BIGINT,
                ReadOnlyIndicator BIT,
                HumanID BIGINT,
                HumanMasterID BIGINT,
                RowStatus INT,
                RowAction CHAR(1)
            );

        SET @TestsParameters = REPLACE(@TestsParameters, '"0001-01-01T00:00:00"', 'null')

        INSERT INTO @TestsTemp
        SELECT *
        FROM
            OPENJSON(@TestsParameters)
            WITH
            (
                TestID BIGINT,
                TestNameTypeID BIGINT,
                TestCategoryTypeID BIGINT,
                TestResultTypeID BIGINT,
                TestStatusTypeID BIGINT,
                DiseaseID BIGINT,
                SampleID BIGINT,
                BatchTestID BIGINT,
                ObservationID BIGINT,
                TestNumber INT,
                Comments NVARCHAR(500),
                StartedDate DATETIME2,
                ResultDate DATETIME2,
                TestedByOrganizationID BIGINT,
                TestedByPersonID BIGINT,
                ResultEnteredByOrganizationID BIGINT,
                ResultEnteredByPersonID BIGINT,
                ValidatedByOrganizationID BIGINT,
                ValidatedByPersonID BIGINT,
                ReadOnlyIndicator BIT,
                NonLaboratoryTestIndicator BIT,
                ExternalTestIndicator BIT,
                PerformedByOrganizationID BIGINT,
                ReceivedDate DATETIME2,
                ContactPersonName NVARCHAR(200),
                RowStatus INT,
                RowAction CHAR(1)
            );



        INSERT INTO @TestsInterpretationParametersTemp
        SELECT *
        FROM
            OPENJSON(@TestsInterpretationParameters)
            WITH
            (
                TestInterpretationID BIGINT,
                DiseaseID BIGINT,
                InterpretedStatusTypeID BIGINT,
                ValidatedByOrganizationID BIGINT,
                ValidatedByPersonID BIGINT,
                InterpretedByOrganizationID BIGINT,
                InterpretedByPersonID BIGINT,
                TestID BIGINT,
                ValidatedStatusIndicator BIT,
                ReportSessionCreatedIndicator BIT,
                ValidatedComment NVARCHAR(200),
                InterpretedComment NVARCHAR(200),
                ValidatedDate DATETIME2,
                InterpretedDate DATETIME2,
                ReadOnlyIndicator BIT,
                RowStatus INT,
                RowAction INT
            );

        INSERT INTO @EventsTemp
        SELECT *
        FROM
            OPENJSON(@Events)
            WITH
            (
                EventId BIGINT,
                EventTypeId BIGINT,
                UserId BIGINT,
                SiteId BIGINT,
                LoginSiteId BIGINT,
                ObjectId BIGINT,
                DiseaseId BIGINT,
                LocationId BIGINT,
                InformationString NVARCHAR(MAX)
            );

        BEGIN TRANSACTION

        DECLARE @SupressSELECT TABLE
        (
            retrunCode INT,
            returnMessage VARCHAR(200)
        )
        DECLARE @SupressSELECTHumanCase TABLE
        (
            retrunCode INT,
            returnMessage VARCHAR(200) --,
        -- idfHumanCase BIGINT
        )
        DECLARE @SupressSELECTHuman TABLE
        (
            retrunCode INT,
            returnMessage VARCHAR(200),
            idfHuman BIGINT
        )

        DECLARE @SupressSELECTGeoLocation TABLE
        (
            returnCode INT,
            returnMsg VARCHAR(200),
            idfGeoLocation BIGINT
        )


        SET @DiseaseID = @idfsFinalDiagnosis

        DECLARE @HumanDiseasereportRelnUID BIGINT

        DECLARE @COPYHUMANACTUALTOHUMAN_ReturnCode INT = 0

        -- Create a human record FROM Human Actual if not already present
        IF @idfHumanActual IS NOT NULL -- AND @idfHumanCase IS  NULL
        BEGIN
            --INSERT INTO @SuppressSelect
            INSERT INTO @SupressSELECTHumanCase
            EXEC USP_HUM_COPYHUMANACTUALTOHUMAN @idfHumanActual,
                                                @idfHuman OUTPUT,
                                                @returnCode OUTPUT,
                                                @returnMsg OUTPUT
            --SET @COPYHUMANACTUALTOHUMAN_ReturnCode = dbo.FN_COPYHUMANACTUALTOHUMAN(@idfHumanActual, @idfHuman)
            IF @returnCode <> 0
            BEGIN
                --SELECT @returnCode, @returnMsg
                RETURN
            END
        END

        --TODO: Needs to be refactored to use Hierarchy
        -- Insert or update geolocation record if any of the information is provided
        IF @idfsLocationGroundType IS NOT NULL
           OR @idfsGeoLocationType IS NOT NULL
           OR @idfsLocationCountry IS NOT NULL
           OR @idfsLocationRegion IS NOT NULL
           OR @idfsLocationRayon IS NOT NULL
           OR @idfsLocationSettlement IS NOT NULL
           OR @strLocationDescription IS NOT NULL
           OR @intLocationLatitude IS NOT NULL
           OR @intLocationLongitude IS NOT NULL
           OR @intLocationDistance IS NOT NULL
           OR @intLocationDirection IS NOT NULL
           OR @strForeignAddress IS NOT NULL
           OR @intElevation IS NOT NULL
        BEGIN
            -- Set geo location 
            IF @idfPointGeoLocation IS NULL
            BEGIN
                INSERT INTO @SupressSELECT
                EXEC dbo.USP_GBL_NEXTKEYID_GET 'tlbGeoLocation',
                                               @idfPointGeoLocation OUTPUT
            END

            BEGIN
                INSERT INTO @SupressSELECTGeoLocation
                EXECUTE [dbo].[USP_HUMAN_DISEASE_GEOLOCATION_SET] @idfPointGeoLocation,
                                                                  @idfsLocationGroundType,
                                                                  @idfsGeoLocationType,
                                                                  @idfsLocationCountry,
                                                                  @idfsLocationRegion,
                                                                  @idfsLocationRayon,
                                                                  @idfsLocationSettlement,
                                                                  @strLocationDescription,
                                                                  @intLocationLatitude,
                                                                  @intLocationLongitude,
                                                                  NULL,
                                                                  @intLocationDistance,
                                                                  @intLocationDirection,
                                                                  @strForeignAddress,
                                                                  1,
                                                                  @intElevation,
                                                                  @AuditUser
            END
        END
        --			SET @idfPointGeoLocation =(SELECT idfGeoLocation FROM @SupressSELECTGeoLocation) 

        IF NOT EXISTS
        (
            SELECT idfHumanCase
            FROM dbo.tlbHumanCase
            WHERE idfHumanCase = @idfHumanCase
                  AND intRowStatus = 0
        )
        BEGIN
            -- Get next key value
            INSERT INTO @SupressSELECT
            EXEC dbo.USP_GBL_NEXTKEYID_GET 'tlbHumanCase', @idfHumanCase OUTPUT

            -- Create a stringId for Human Case
            IF LEFT(ISNULL(@strHumanCaseID, '(new'), 4) = '(new'
            BEGIN
                INSERT INTO @SupressSELECT
                EXEC dbo.USP_GBL_NextNumber_GET 'Human Disease Report',
                                                @strHumanCaseID OUTPUT,
                                                NULL --N'AS Session'
            END

            INSERT INTO dbo.tlbHumanCase
            (
                idfHumanCase,
                idfHuman,
                strCaseId,
                idfsFinalDiagnosis,
                datTentativeDiagnosisDate,
                datNotIFicationDate,
                idfsFinalState,
                strLocalIdentifier,
                idfSentByOffice,
                strSentByFirstName,
                strSentByPatronymicName,
                strSentByLastName,
                idfSentByPerson,
                idfReceivedByOffice,
                strReceivedByFirstName,
                strReceivedByPatronymicName,
                strReceivedByLastName,
                idfReceivedByPerson,
                idfsHospitalizationStatus,
                idfHospital,
                strCurrentLocation,
                datOnSetDate,
                idfsInitialCaseStatus,
                idfsYNPreviouslySoughtCare,
                datFirstSoughtCareDate,
                idfSoughtCareFacility,
                idfsNonNotIFiableDiagnosis,
                idfsYNHospitalization,
                datHospitalizationDate,
                datDischargeDate,
                strHospitalizationPlace,
                idfsYNAntimicrobialTherapy,
                strClinicalNotes,
                idfsYNSpecIFicVaccinationAdministered,
                idfInvestigatedByOffice,
                datInvestigationStartDate,
                idfsYNRelatedToOutbreak,
                idfOutbreak,
                idfPointGeoLocation,
                idfsYNExposureLocationKnown,
                datExposureDate,
                strNote,
                idfsFinalCaseStatus,
                idfsOutcome,
                intRowStatus,
                idfsCaseProgressStatus,
                datModificationDate,
                datEnteredDate,
                idfPersonEnteredBy,
                idfsYNSpecimenCollected,
                idfsYNTestsConducted,
                DiseaseReportTypeID,
                blnClinicalDiagBasis,
                blnLabDiagBasis,
                blnEpiDiagBasis,
                datFinalCaseClassificationDate,
                strsummarynotes,
                idfEpiObservation,
                idfCSObservation,
                idfInvestigatedByPerson,
                strEpidemiologistsName,
                idfsNotCollectedReason,
                strNotCollectedReason,
                idfsHumanAgeType,
                intPatientAge,
                datCompletionPaperFormDate,
                idfsSite,
                AuditCreateUser,
                idfParentMonitoringSession
            --datDateOfDeath,
            --@strCaseInvestigationOutbreakID, 
            --VaccinationName,
            --VaccinationDate,
            --@strComments,	
            )
            VALUES
            (   @idfHumanCase,
                @idfHuman,
                @strHumanCaseId,
                @idfsFinalDiagnosis,
                @datDateOfDiagnosis,
                @datNotificationDate,
                @idfsFinalState,
                @strLocalIdentifier,
                @idfSentByOffice,
                @strSentByFirstName,
                @strSentByPatronymicName,
                @strSentByLastName,
                @idfSentByPerson,
                @idfReceivedByOffice,
                @strReceivedByFirstName,
                @strReceivedByPatronymicName,
                @strReceivedByLastName,
                @idfReceivedByPerson,
                @idfsHospitalizationStatus,
                @idfHospital,
                @strCurrentLocation,
                @datOnSetDate,
                @idfsInitialCaseStatus,
                @idfsYNPreviouslySoughtCare,
                @datFirstSoughtCareDate,
                @idfSoughtCareFacility,
                @idfsNonNotIFiableDiagnosis,
                @idfsYNHospitalization,
                @datHospitalizationDate,
                @datDischargeDate,
                @strHospitalName,
                @idfsYNAntimicrobialTherapy,
                @strClinicalNotes,
                @idfsYNSpecIFicVaccinationAdministered,
                @idfInvestigatedByOffice,
                @StartDateofInvestigation,
                @idfsYNRelatedToOutbreak,
                @idfOutbreak,
                @idfPointGeoLocation,
                @idfsYNExposureLocationKnown,
                @datExposureDate,
                @strNote,
                @idfsFinalCaseStatus,
                @idfsOutcome,
                0,
                @idfsCaseProgressStatus,
                GETDATE(), --datModificationDate	
                GETDATE(), --datEnteredDate		
                @idfPersonEnteredBy,
                @idfsYNSpecimenCollected,
                @idfsYNTestsConducted,
                @DiseaseReportTypeID,
                @blnClinicalDiagBasis,
                @blnLabDiagBasis,
                @blnEpiDiagBasis,
                @DateofClassification,
                @strSummaryNotes,
                @idfEpiObservation,
                @idfCSObservation,
                @idfInvestigatedByPerson,
                @strEpidemiologistsName,
                @idfsNotCollectedReason,
                @strNotCollectedReason,
                @idfsHumanAgeType,
                @intPatientAge,
                @datCompletionPaperFormDate,
                @idfsSite,
                @AuditUser,
                @idfParentMonitoringSession
            --@datDateofDeath,
            --@idfsFinalClassIFication,
            --@strCaseInvestigationOutbreakID,
            --@VaccinationName,
            --@VaccinationDate, 
            --@strComments,
            --@idfsInitialCaseClassIFication,
            )

            DECLARE @RelatedToRoot BIGINT


            IF @idfHumanCaseRelatedTo IS NOT NULL
            BEGIN

                --EStablish the Root
                IF NOT EXISTS
                (
                    SELECT *
                    FROM dbo.HumanDiseaseReportRelationship
                    WHERE (HumanDiseaseReportID = @idfHumanCaseRelatedTo)
                          AND (RelatedToHumanDiseaseReportIdRoot IS NOT NULL)
                          AND (intRowStatus = 0)
                )
                BEGIN
                    SET @RelatedToRoot = @idfHumanCaseRelatedTo
                END
                ELSE
                BEGIN
                    SELECT @RelatedToRoot = RelatedToHumanDiseaseReportIdRoot
                    FROM dbo.HumanDiseaseReportRelationship
                    WHERE (HumanDiseaseReportID = @idfHumanCaseRelatedTo)
                          AND (RelatedToHumanDiseaseReportIdRoot IS NOT NULL)
                          AND (intRowStatus = 0)
                END
                --End establishing the Root

                INSERT INTO @SupressSELECT
                EXEC dbo.USP_GBL_NEXTKEYID_GET 'HumanDiseaseReportRelationship',
                                               @HumanDiseasereportRelnUID OUTPUT;

                INSERT INTO dbo.HumanDiseaseReportRelationship
                (
                    HumanDiseasereportRelnUID,
                    HumanDiseaseReportID,
                    RelateToHumanDiseaseReportID,
                    RelatedToHumanDiseaseReportIdRoot,
                    RelationshipTypeID,
                    intRowStatus,
                    AuditCreateUser,
                    AuditCreateDTM,
                    rowguid
                )
                VALUES
                (   @HumanDiseasereportRelnUID,
                    @idfHumanCase,
                    @idfHumanCaseRelatedTo,
                    @RelatedToRoot,
                    10503001, --Linked Copy Parent
                    0,
                    @AuditUser,
                    GETDATE(),
                    NEWID()
                )
            END
        END
        ELSE
        BEGIN
            UPDATE dbo.tlbHumanCase
            SET strCaseId = @strHumanCaseId,
                idfsTentativeDiagnosis = @idfsFinalDiagnosis,
                idfsFinalDiagnosis = @idfsFinalDiagnosis,
                datTentativeDiagnosisDate = @datDateOfDiagnosis,
                datFinalDiagnosisDate = @datDateOfDiagnosis,
                datNotIFicationDate = @datNotificationDate,
                idfsFinalState = @idfsFinalState,
                idfSentByOffice = @idfSentByOffice,
                strSentByFirstName = @strSentByFirstName,
                strSentByPatronymicName = @strSentByPatronymicName,
                strSentByLastName = @strSentByLastName,
                --idfSentByPerson =  @idfSentByPerson,
                idfSentByPerson = @idfSentByPerson,
                idfReceivedByOffice = @idfReceivedByOffice,
                strReceivedByFirstName = @strReceivedByFirstName,
                strReceivedByPatronymicName = @strReceivedByPatronymicName,
                strReceivedByLastName = @strReceivedByLastName,
                --idfRecdByPerson =  @idfRecdByPerson,
                idfReceivedByPerson = @idfReceivedByPerson,
                strLocalIdentifier = @strLocalIdentifier,
                idfsHospitalizationStatus = @idfsHospitalizationStatus,
                idfHospital = @idfHospital,
                strCurrentLocation = @strCurrentLocation,
                datOnSetDate = @datOnSetDate,
                idfsInitialCaseStatus = @idfsInitialCaseStatus,
                --@strComments =  --@strComments,
                idfsYNPreviouslySoughtCare = @idfsYNPreviouslySoughtCare,
                datFirstSoughtCareDate = @datFirstSoughtCareDate,
                idfSoughtCareFacility = @idfSoughtCareFacility,
                idfsNonNotIFiableDiagnosis = @idfsNonNotIFiableDiagnosis,
                idfsYNHospitalization = @idfsYNHospitalization,
                datHospitalizationDate = @datHospitalizationDate,
                datDischargeDate = @datDischargeDate,
                strHospitalizationPlace = @strHospitalName,
                idfsYNAntimicrobialTherapy = @idfsYNAntimicrobialTherapy,
                --strClinicalNotes =  @strAntibioticComments,
                --strClinicalNotes = @strClinicalNotes + ' ' + @strAntibioticComments,
                strClinicalNotes = @strClinicalNotes,
                --VaccinationName = @VaccinationName,
                --VaccinationDate = @VaccinationDate,
                idfsYNSpecIFicVaccinationAdministered = @idfsYNSpecIFicVaccinationAdministered,
                idfInvestigatedByOffice = @idfInvestigatedByOffice,
                datInvestigationStartDate = @StartDateofInvestigation,
                idfsYNRelatedToOutbreak = @idfsYNRelatedToOutbreak,
                idfOutbreak = @idfOutbreak,
                idfsYNExposureLocationKnown = @idfsYNExposureLocationKnown,
                idfPointGeoLocation = @idfPointGeoLocation,
                datExposureDate = @datExposureDate,
                strNote = @strNote,
                --idfsFinalCaseStatus  =  @idfsFinalClassIFication,			--finalCaseStatus is the classification
                idfsFinalCaseStatus = @idfsFinalCaseStatus,
                idfsOutcome = @idfsOutcome,
                --datDateOfDeath =  @datDateofDeath,
                idfsCaseProgressStatus = @idfsCaseProgressStatus,
                datModificationDate = GETDATE(),
                idfsYNSpecimenCollected = @idfsYNSpecimenCollected,
                idfsYNTestsConducted = @idfsYNTestsConducted,
                DiseaseReportTypeID = @DiseaseReportTypeID,
                blnClinicalDiagBasis = @blnClinicalDiagBasis,
                blnLabDiagBasis = @blnLabDiagBasis,
                blnEpiDiagBasis = @blnEpiDiagBasis,
                datFinalCaseClassificationDate = @DateofClassification,
                strsummarynotes = @strSummaryNotes,
                idfEpiObservation = @idfEpiObservation,
                idfCSObservation = @idfCSObservation,
                strEpidemiologistsName = @strEpidemiologistsName,
                idfsNotCollectedReason = @idfsNotCollectedReason,
                strNotCollectedReason = @strNotCollectedReason,
                idfsHumanAgeType = @idfsHumanAgeType,
                intPatientAge = @intPatientAge,
                datCompletionPaperFormDate = @datCompletionPaperFormDate,
                idfInvestigatedByPerson = @idfInvestigatedByPerson,
                idfPersonEnteredBy = @idfPersonEnteredBy,
                idfsSite = @idfsSite,
                AuditUpdateUser = @AuditUser,
                idfParentMonitoringSession = @idfParentMonitoringSession
            WHERE idfHumanCase = @idfHumanCase
                  AND intRowStatus = 0

        END

        ----set Samples for this idfHumanCase	
        IF @SamplesParameters IS NOT NULL
        BEGIN

            WHILE EXISTS (SELECT * FROM @SamplesTemp)
            BEGIN
                SELECT TOP 1
                    @RowID = SampleID,
                    @SampleID = SampleID,
                    @SampleTypeID = SampleTypeID,
                    @CollectedByPersonID = CollectedByPersonID,
                    @CollectedByOrganizationID = CollectedByOrganizationID,
                    @CollectionDate = CAST(CollectionDate AS DATETIME),
                    @SentDate = CAST(SentDate AS DATETIME),
                    @EIDSSLocalOrFieldSampleID = EIDSSLocalOrFieldSampleID,
                    @SampleStatusTypeID = SampleStatusTypeID,
                    @Comments = Comments,
                    @idfsSite = SiteID,
                    @CurrentSiteID = CurrentSiteID,
                    @RowStatus = RowStatus,
                    @SentToOrganizationID = SentToOrganizationID,
                    @DiseaseID = DiseaseID,
                    @ReadOnlyIndicator = ReadOnlyIndicator,
                    @HumanID = HumanID,
                    @HumanMasterID = HumanMasterID,
                    @RowAction = RowAction
                FROM @SamplesTemp;

                INSERT INTO @SuppressSelect

                EXECUTE dbo.USSP_GBL_SAMPLE_SET @AuditUserName = @AuditUser,
                                                @SampleID = @SampleID OUTPUT,
                                                @SampleTypeID = @SampleTypeID,
                                                @RootSampleID = NULL,
                                                @ParentSampleID = NULL,
                                                @HumanID = @idfHuman,
                                                @SpeciesID = NULL,
                                                @AnimalID = NULL,
                                                @VectorID = NULL,
                                                @MonitoringSessionID = @idfParentMonitoringSession,
                                                @VectorSessionID = NULL,
                                                @HumanDiseaseReportID = @idfHumanCase,
                                                @VeterinaryDiseaseReportID = NULL,
                                                @CollectionDate = @CollectionDate,
                                                @CollectedByPersonID = @CollectedByPersonID,
                                                @CollectedByOrganizationID = @CollectedByOrganizationID,
                                                @SentDate = @SentDate,
                                                @SentToOrganizationID = @SentToOrganizationID,
                                                @EIDSSLocalFieldSampleID = @EIDSSLocalOrFieldSampleID,
                                                @SiteID = @idfsSite,
                                                @EnteredDate = @DateEntered,
                                                @ReadOnlyIndicator = @ReadOnlyIndicator,
                                                @SampleStatusTypeID = @SampleStatusTypeID,
                                                @Comments = @Comments,
                                                @CurrentSiteID = @CurrentSiteID,
                                                @DiseaseID = @DiseaseID,
                                                @BirdStatusTypeID = NULL,
                                                @RowStatus = @RowStatus,
                                                @RowAction = @RowAction

                UPDATE @TestsTemp
                SET SampleID = @SampleID
                WHERE SampleID = @RowID

                DELETE FROM @SamplesTemp
                WHERE SampleID = @RowID
            END
        END
        IF @TestsParameters IS NOT NULL
        BEGIN
            WHILE EXISTS (SELECT * FROM @TestsTemp)
				BEGIN
					SELECT TOP 1
						@RowID = TestID,
						@TestID = TestID,
						@TestNameTypeID = TestNameTypeID,
						@TestCategoryTypeID = TestCategoryTypeID,
						@TestResultTypeID = TestResultTypeID,
						@TestStatusTypeID = TestStatusTypeID,
						@DiseaseID = DiseaseID,
						@SampleID = SampleID,
						@Comments = Comments,
						@RowStatus = RowStatus,
						@StartedDate = StartedDate,
						@ResultDate = ResultDate,
						@TestedByOrganizationID = TestedByOrganizationID,
						@TestedByPersonID = TestedByPersonID,
						@ResultEnteredByOrganizationID = ResultEnteredByOrganizationID,
						@ResultEnteredByPersonID = ResultEnteredByPersonID,
						@ValidatedByOrganizationID = ValidatedByOrganizationID,
						@ValidatedByPersonID = ValidatedByPersonID,
						@ReadOnlyIndicator = ReadOnlyIndicator,
						@NonLaboratoryTestIndicator = NonLaboratoryTestIndicator,
						@ExternalTestIndicator = ExternalTestIndicator,
						@PerformedByOrganizationID = PerformedByOrganizationID,
						@ReceivedDate = ReceivedDate,
						@ContactPersonName = ContactPersonName,
						@RowAction = RowAction
					FROM @TestsTemp;


					--If record is being soft-deleted, then check if the test record was originally created 
					--in the laboaratory module.  If it was, then disassociate the test record from the 
					--human monitoring session, so that the test record remains in the laboratory module 
					--for further action.

					set @TestHumanCaseID = @idfHumanCase;

					--if deleted and it's an HDR test, then just delete test as normal
					IF @RowStatus = 1 AND @NonLaboratoryTestIndicator = 1
						BEGIN
							SET @RowStatus = 1;
							--SET @TestHumanCaseID = null;
						END

					-- if deleted and it's a Lab test, then don't delete (just disassociate from HDR)
					ELSE IF (@RowStatus = 1 AND @NonLaboratoryTestIndicator = 0)
						BEGIN
							SET @RowStatus = 0;
							SET @TestHumanCaseID = null; --@idfHumanCase;
						END;


					------set Tests for this idfHumanCase
					INSERT INTO @SuppressSelect

					EXECUTE dbo.USSP_GBL_TEST_SET @LanguageID = @LanguageID,
												  @TestID = @TestID OUTPUT,
												  @TestNameTypeID = @TestNameTypeID,
												  @TestCategoryTypeID = @TestCategoryTypeID,
												  @TestResultTypeID = @TestResultTypeID,
												  @TestStatusTypeID = @TestStatusTypeID,
												  @DiseaseID = @DiseaseID,
												  @SampleID = @SampleID,
												  @BatchTestID = NULL,
												  @ObservationID = NULL,
												  @TestNumber = NULL,
												  @Comments = @Comments,
												  @RowStatus = @RowStatus,
												  @StartedDate = @StartedDate,
												  @ResultDate = @ResultDate,
												  @TestedByOrganizationID = @TestedByOrganizationID,
												  @TestedByPersonID = @TestedByPersonID,
												  @ResultEnteredByOrganizationID = @ResultEnteredByOrganizationID,
												  @ResultEnteredByPersonID = @ResultEnteredByPersonID,
												  @ValidatedByOrganizationID = @ValidatedByOrganizationID,
												  @ValidatedByPersonID = @ValidatedByPersonID,
												  @ReadOnlyIndicator = @ReadOnlyIndicator,
												  @NonLaboratoryTestIndicator = @NonLaboratoryTestIndicator,
												  @ExternalTestIndicator = @ExternalTestIndicator,
												  @PerformedByOrganizationID = @PerformedByOrganizationID,
												  @ReceivedDate = @ReceivedDate,
												  @ContactPerson = @ContactPersonName,
												  @MonitoringSessionID = @idfParentMonitoringSession,
												  @VectorSessionID = NULL,
												  @HumanDiseaseReportID = @TestHumanCaseID,
												  @VeterinaryDiseaseReportID = NULL,
												  @AuditUserName = @AuditUser,
												  @RowAction = @RowAction;

					UPDATE @TestsInterpretationParametersTemp
					SET TestID = @TestID
					WHERE TestID = @RowID

					DELETE FROM @TestsTemp
					WHERE TestID = @RowID;
            END;
        END


        Declare @sampleCount int
        Set @sampleCount =
        (
            SELECT Count(*)
            FROM dbo.tlbMaterial
            WHERE intRowStatus = 0
                  and idfHumanCase = @idfHumanCase
        )

        IF EXISTS
        (
            SELECT *
            FROM dbo.tlbHumanCase
            WHERE idfHumanCase = @idfHumanCase
                  AND idfsYNSpecimenCollected = 10100002
        )
        Begin
            UPDATE dbo.tlbMaterial
            SET intRowStatus = 1,
                AuditUpdateUser = @AuditUser
            WHERE idfHumanCase = @idfHumanCase
        END
        ELSE IF EXISTS
        (
            SELECT *
            FROM dbo.tlbHumanCase
            WHERE idfHumanCase = @idfHumanCase
                  AND idfsYNSpecimenCollected = 10100003
        )
        BEGIN
            UPDATE dbo.tlbHumanCase
            Set idfsNotCollectedReason = NULL,
                AuditUpdateUser = @AuditUser
            WHERE idfHumanCase = @idfHumanCase;

            UPDATE dbo.tlbMaterial
            SET intRowStatus = 1,
                AuditUpdateUser = @AuditUser
            WHERE idfHumanCase = @idfHumanCase;

        END
        ELSE IF EXISTS
        (
            SELECT *
            FROM dbo.tlbHumanCase
            WHERE idfHumanCase = @idfHumanCase
                  AND idfsYNSpecimenCollected = 10100001
        )
        BEGIN
            UPDATE dbo.tlbHumanCase
            SET idfsNotCollectedReason = NULL,
                AuditUpdateUser = @AuditUser
            WHERE idfHumanCase = @idfHumanCase
            IF (@sampleCount = 0)
            BEGIN
                UPDATE dbo.tlbHumanCase
                SET idfsYNSpecimenCollected = NULL,
                    AuditUpdateUser = @AuditUser
                WHERE idfHumanCase = @idfHumanCase
            END

        END

        IF @TestsInterpretationParameters IS NOT NULL
        BEGIN
            WHILE EXISTS (SELECT * FROM @TestsInterpretationParametersTemp)
            BEGIN
                SELECT TOP 1
                    @RowID = TestInterpretationID,
                    @TestInterpretationID = TestInterpretationID,
                    @DiseaseID = DiseaseID,
                    @InterpretedStatusTypeID = InterpretedStatusTypeID,
                    @ValidatedByOrganizationID = ValidatedByOrganizationID,
                    @ValidatedByPersonID = ValidatedByPersonID,
                    @InterpretedByOrganizationID = InterpretedByOrganizationID,
                    @InterpretedByPersonID = InterpretedByPersonID,
                    @TestID = TestID,
                    @ValidatedStatusIndicator = ValidatedStatusIndicator,
                    @ReportSessionCreatedIndicator = ReportSessionCreatedIndicator,
                    @ValidatedComment = ValidatedComment,
                    @InterpretedComment = InterpretedComment,
                    @ValidatedDate = ValidatedDate,
                    @InterpretedDate = InterpretedDate,
                    @RowStatus = RowStatus,
                    @ReadOnlyIndicator = ReadOnlyIndicator,
                    @RowAction = RowAction
                FROM @TestsInterpretationParametersTemp;

                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_GBL_TEST_INTERPRETATION_SET @AuditUser,
                                                             @TestInterpretationID OUTPUT,
                                                             @DiseaseID,
                                                             @InterpretedStatusTypeID,
                                                             @ValidatedByOrganizationID,
                                                             @ValidatedByPersonID,
                                                             @InterpretedByOrganizationID,
                                                             @InterpretedByPersonID,
                                                             @TestID,
                                                             @ValidatedStatusIndicator,
                                                             @ReportSessionCreatedIndicator,
                                                             @ValidatedComment,
                                                             @InterpretedComment,
                                                             @ValidatedDate,
                                                             @InterpretedDate,
                                                             @RowStatus,
                                                             @ReadOnlyIndicator,
                                                             @RowAction;

                DELETE FROM @TestsInterpretationParametersTemp
                WHERE TestInterpretationID = @RowID;
            END;
        END

        WHILE EXISTS (SELECT * FROM @EventsTemp)
        BEGIN
            SELECT TOP 1
                @EventId = EventId,
                @EventTypeId = EventTypeId,
                @EventUserId = UserId,
                @EventObjectId = ObjectId,
                @EventSiteId = SiteId,
                @EventDiseaseId = DiseaseId,
                @EventLocationId = LocationId,
                @EventInformationString = InformationString,
                @EventLoginSiteId = LoginSiteId
            FROM @EventsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_ADMIN_EVENT_SET @EventId,
                                            @EventTypeId,
                                            @EventUserId,
                                            @EventObjectId,
                                            @EventDiseaseId,
                                            @EventSiteId,
                                            @EventInformationString,
                                            @EventLoginSiteId,
                                            @EventLocationId,
                                            @AuditUser;

            DELETE FROM @EventsTemp
            WHERE EventId = @EventId;
        END;

        --------set AntiviralTherapies for this idfHumanCase
        IF @AntiviralTherapiesParameters IS NOT NULL
        BEGIN

            EXEC dbo.USSP_HUMAN_DISEASE_ANTIVIRALTHERAPIES_SET @idfHumanCase = @idfHumanCase,
                                                               @AntiviralTherapiesParameters = @AntiviralTherapiesParameters,
                                                               @outbreakCall = 0,
                                                               @User = @AuditUser
        END
        --------set Vaccinations for this idfHumanCase
        IF @VaccinationsParameters IS NOT NULL
        BEGIN
            EXEC dbo.USSP_HUMAN_DISEASE_VACCINATIONS_SET @idfHumanCase = @idfHumanCase,
                                                         @VaccinationsParameters = @VaccinationsParameters,
                                                         @outbreakCall = 0,
                                                         @User = @AuditUser
        END

        IF @ContactsParameters IS NOT NULL
        BEGIN
            EXEC USSP_GBL_CONTACT_SET @Contacts = @ContactsParameters,
                                      @SiteID = @CurrentSiteID,
                                      @AuditUSerName = @AuditUser,
                                      @idfHumanCase = @idfHumanCase
        END

        ------ UPDATE tlbHuman IF datDateofDeath is provided.
        IF @datDateofDeath IS NOT NULL
        BEGIN
            UPDATE dbo.tlbHuman
            SET datDateofDeath = @datDateofDeath,
                AuditUpdateUser = @AuditUser
            WHERE idfHuman = @idfHuman
        END

		--Update Test, if @ConnectedTestId is provided
		IF @ConnectedTestId IS NOT NULL
		   BEGIN
			   SELECT
				  @DiseaseID = T.idfsDiagnosis,
				  @HumanMasterID = HA.idfHumanActual,
				  @idfMaterial = T.idfMaterial
			   FROM
				  tlbTesting T
			   INNER JOIN tlbMaterial M
			   ON M.idfMaterial = T.idfMaterial
			   INNER JOIN dbo.tlbHuman H
				  ON H.idfHuman = M.idfHuman
			   INNER JOIN dbo.tlbHumanActual HA
				  ON HA.idfHumanActual = H.idfHumanActual
			   WHERE
				  T.idfTesting = @ConnectedTestId

			   UPDATE tlbTesting
			   SET tlbTesting.idfHumanCase = @idfHumanCase
			   FROM
				  tlbTesting T
			   INNER JOIN tlbMaterial M
			   ON M.idfMaterial = T.idfMaterial
			   INNER JOIN dbo.tlbHuman H
				  ON H.idfHuman = M.idfHuman
			   INNER JOIN dbo.tlbHumanActual HA
				  ON HA.idfHumanActual = H.idfHumanActual
			   WHERE
				  T.idfsDiagnosis = @DiseaseID AND
				  HA.idfHumanActual = @HumanMasterID AND
				  T.idfMaterial = @idfMaterial
		   END

        IF @@TRANCOUNT > 0
            COMMIT TRAN

        SELECT @returnCode 'ReturnCode',
               @returnMsg 'ReturnMessage',
               @idfHumanCase 'idfHumanCase',
               @strHumanCaseID 'strHumanCaseID',
               @idfHuman 'idfHuman'

    END TRY
    BEGIN CATCH
        SELECT @returnCode 'ReturnCode',
               @returnMsg 'ReturnMessage',
               @idfHumanCase 'idfHumanCase',
               @strHumanCaseID 'strHumanCaseID',
               @idfHuman 'idfHuman'
        IF @@Trancount > 0
            ROLLBACK TRAN;

        THROW;

    END CATCH

END
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_SET]...';


GO
-- ================================================================================================
-- Name: USP_LAB_SET
--
-- Description:	Inserts or updates samples, tests, test amendments, test interpretations, 
-- transfers, batches and approvals for the laboratory module use cases.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     07/19/2018 Initial release.
-- Stephen Long		10/31/2018 Added the test amendments and transfers - LUC03 and LUC07.
-- Stephen Long		01/24/2019 Added box place availabilities parameter and updates.
-- Stephen Long     02/06/2019 Removed UserPreferenceID parameter; retrieved in the stored 
--                             procedure.  Replace temporary sample ID with the database ID 
--                             on new sample record that was also marked as a favorite. 
-- Stephen Long     02/09/2019 Corrected the JSON table name for EIDSSFieldSampleID to EIDSSLocal 
--                             FieldSampleID.
-- Stephen Long     02/19/2019 Modified for removed parameters from USSP_GBL_BATCH_TEST_SET and 
--                             added parameter to USSP_LAB_TRANSFER_SET.  Removed test 
--                             interpretation parameter.
-- Stephen Long     03/10/2019 Changed temp table field names for test amendement to sync up with 
--                             the API parameter names (LUC07).
-- Stephen Long     03/20/2019 Added row action on the batch test select from JSON variable. 
--                             Added check on Favorites parameter to only process if not null.
-- Stephen Long     04/17/2019 Update to use human master ID when registering new samples, and 
--                             copy over to human (similiar to how human disease report works).
-- Stephen Long     07/09/2019 Added human master ID parameter for call to sample set.
-- Stephen Long     08/29/2019 Corrected root sample ID on call to USSP_LAB_SAMPLE_SET.
-- Stephen Long     03/30/2020 Added audit user name parameter.
-- Stephen Long     04/20/2020 Changes for LUC10 vector type and species type ID's additions.
-- Stephen Long     10/28/2020 Changed row action from nchar to char.
-- Stephen Long     09/24/2021 Removed language parameter as it is not needed.
-- Stephen Long     01/03/2022 Changed login site to NVARCHAR(20).
-- Stephen Long     01/07/2022 Added copy of human actual to human stored procedure call.
-- Stephen Long     01/25/2022 Added logic to add farm, herd and species for samples having no
--                             disease report or monitoring session association.
-- Stephen Long     03/10/2022 Changed note to comment on samples table variable.
-- Stephen Long     03/25/2022 Updated suppress select table variables for adding of vet samples.
-- Stephen Long     03/29/2022 Fix on suppress select of species.
-- Stephen Long     03/30/2022 Fix on suppress select of human copy.
-- Stephen Long     04/20/2022 Changed observation ID on batch test table variable to nullable.
-- Stephen Long     05/18/2022 Added notification processing on new transfer records.
-- Stephen Long     05/24/2022 Fix to check vector ID less than zero and not -1.
-- Stephen Long     07/06/2022 Updates for site alerts to call new stored procedure.
-- Stephen Long     10/10/2022 Added monitoring session ID check when farm or human master ID is 
--                             not null for registering new samples.
-- Stephen Long     10/11/2022 Added insert to tlbMonitoringSessionToMaterial to pick up the 
--                             correct disease on an active surveillance session.
-- Stephen Long     10/18/2022 Fix to account for human active surveillance session diseases and 
--                             transferred samples for an active surveillance session.
-- Leo Tracchia		10/21/2022 fix for properly deleting tests for human disease report DevOps defect 5006
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_SET]
( 
    @Samples NVARCHAR(MAX) = NULL,
    @BatchTests NVARCHAR(MAX) = NULL,
    @Tests NVARCHAR(MAX) = NULL,
    @TestAmendments NVARCHAR(MAX) = NULL,
    @Transfers NVARCHAR(MAX) = NULL,
    @FreezerBoxLocationAvailabilities NVARCHAR(MAX) = NULL,
    @Events NVARCHAR(MAX) = NULL,
    @UserID BIGINT,
    @Favorites XML = NULL,
    @AuditUserName NVARCHAR(200)
)
AS
DECLARE @ReturnCode INT = 0,
        @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
        @KeyId BIGINT = 0;
DECLARE @SuppressSelect TABLE
(
    ReturnCode INT,
    ReturnMessage NVARCHAR(MAX),
    ID BIGINT NULL
);
DECLARE @SuppressSelect2 TABLE
(
    ReturnCode INT,
    ReturnMessage NVARCHAR(MAX)
);
DECLARE @RowID BIGINT,
        @RowStatus INT,
        @RowAction CHAR(1),
        @SampleID BIGINT,
        @SampleTypeID BIGINT,
        @RootSampleID BIGINT = NULL,
        @ParentSampleID BIGINT = NULL,
        @HumanMasterID BIGINT = NULL,
        @HumanID BIGINT = NULL,
        @FarmMasterID BIGINT = NULL,
        @FarmID BIGINT = NULL,
        @SpeciesID BIGINT = NULL,
        @AnimalID BIGINT = NULL,
        @VectorID BIGINT = NULL,
        @MonitoringSessionID BIGINT = NULL,
        @VectorSessionID BIGINT = NULL,
        @HumanDiseaseReportID BIGINT = NULL,
        @VeterinaryDiseaseReportID BIGINT = NULL,
        @FunctionalAreaID BIGINT = NULL,
        @FreezerSubdivisionID BIGINT = NULL,
        @StorageBoxPlace NVARCHAR(200) = NULL,
        @CollectionDate DATETIME2 = NULL,
        @CollectedByPersonID BIGINT = NULL,
        @CollectedByOrganizationID BIGINT = NULL,
        @SentDate DATETIME2 = NULL,
        @EIDSSLocalOrFieldSampleID NVARCHAR(200) = NULL,
        @EIDSSLaboratorySampleID NVARCHAR(200) = NULL,
        @EnteredDate DATETIME2 = NULL,
        @OutOfRepositoryDate DATETIME2 = NULL,
        @MarkedForDispositionByPersonID BIGINT = NULL,
        @SentToOrganizationID BIGINT = NULL,
        @SiteID BIGINT = NULL,
        @CurrentSiteID BIGINT = NULL,
        @SampleKindTypeID BIGINT = NULL,
        @ReadOnlyIndicator BIT = NULL,
        @AccessionDate DATETIME2 = NULL,
        @AccessionConditionTypeID BIGINT = NULL,
        @AccessionByPersonID BIGINT = NULL,
        @SampleStatusTypeID BIGINT = NULL,
        @PreviousSampleStatusTypeID BIGINT = NULL,
        @AccessionComment NVARCHAR(200) = NULL,
        @DestructionMethodTypeID BIGINT = NULL,
        @DestructionDate DATETIME2 = NULL,
        @DestroyedByPersonID BIGINT = NULL,
        @Note NVARCHAR(500) = NULL,
        @Comment NVARCHAR(500) = NULL,
        @BatchTestID BIGINT,
        @TestNameTypeID BIGINT = NULL,
        @BatchStatusTypeID BIGINT = NULL,
        @PerformedByOrganizationID BIGINT = NULL,
        @PerformedByPersonID BIGINT = NULL,
        @ValidatedByOrganizationID BIGINT = NULL,
        @ValidatedByPersonID BIGINT = NULL,
        @ObservationID BIGINT = NULL,
        @PerformedDate DATETIME2 = NULL,
        @ValidationDate DATETIME2 = NULL,
        @EIDSSBatchTestID NVARCHAR(200) = NULL,
        @ResultEnteredByPersonID BIGINT = NULL,
        @ResultEnteredByOrganizationID BIGINT = NULL,
        @TestRequested NVARCHAR(200) = NULL,
        @TestID BIGINT,
        @TestCategoryTypeID BIGINT = NULL,
        @TestResultTypeID BIGINT = NULL,
        @TestStatusTypeID BIGINT,
        @PreviousTestStatusTypeID BIGINT = NULL,
        @TestNumber INT = NULL,
        @StartedDate DATETIME2 = NULL,
        @ConcludedDate DATETIME2 = NULL,
        @TestedByPersonID BIGINT = NULL,
        @TestedByOrganizationID BIGINT = NULL,
        @NonLaboratoryTestIndicator BIT,
        @ExternalTestIndicator BIT = NULL,
        @ReceivedDate DATETIME2 = NULL,
        @ContactPersonName NVARCHAR(200) = NULL,
        @DiseaseID BIGINT = NULL,
        @FavoriteIndicator INT = NULL,
        @TestAmendmentID BIGINT,
        @AmendedByOrganizationID BIGINT = NULL,
        @AmendedByPersonID BIGINT = NULL,
        @AmendmentDate DATETIME2 = NULL,
        @OldTestResultTypeID BIGINT = NULL,
        @ChangedTestResultTypeID BIGINT = NULL,
        @OldNote NVARCHAR(500) = NULL,
        @ChangedNote NVARCHAR(500) = NULL,
        @ReasonForAmendment NVARCHAR(500),
        @TransferID BIGINT,
        @EIDSSTransferID NVARCHAR(200) = NULL,
        @TransferStatusTypeID BIGINT = NULL,
        @TransferredFromOrganizationID BIGINT = NULL,
        @TransferredToOrganizationID BIGINT = NULL,
        @SentByPersonID BIGINT = NULL,
        @TransferDate DATETIME2 = NULL,
        @BoxPlaceAvailability NVARCHAR(MAX),
        @EventId BIGINT,
        @EventTypeId BIGINT = NULL,
        @EventSiteId BIGINT = NULL,
        @EventObjectId BIGINT = NULL,
        @EventUserId BIGINT = NULL,
        @EventDiseaseId BIGINT = NULL,
        @EventLocationId BIGINT = NULL,
        @EventInformationString NVARCHAR(MAX) = NULL,
        @EventLoginSiteId BIGINT = NULL,
        @NewHumanID BIGINT = NULL,
        @VectorTypeID BIGINT = NULL,
        @SpeciesTypeID BIGINT = NULL,
        @EIDSSVectorID NVARCHAR(50) = NULL,
        @MonitoringSessionToMaterialID BIGINT = NULL;

DECLARE @SamplesTemp TABLE
(
    SampleID BIGINT NOT NULL,
    SampleTypeID BIGINT NOT NULL,
    RootSampleID BIGINT NULL,
    ParentSampleID BIGINT NULL,
    HumanMasterID BIGINT NULL,
    HumanID BIGINT NULL,
    FarmMasterID BIGINT NULL,
    FarmID BIGINT NULL,
    SpeciesID BIGINT NULL,
    AnimalID BIGINT NULL,
    MonitoringSessionID BIGINT NULL,
    CollectedByPersonID BIGINT NULL,
    CollectedByOrganizationID BIGINT NULL,
    MainTestID BIGINT NULL,
    CollectionDate DATETIME2 NULL,
    SentDate DATETIME2 NULL,
    EIDSSLocalOrFieldSampleID NVARCHAR(200) NULL,
    VectorSessionID BIGINT NULL,
    VectorID BIGINT NULL,
    FreezerSubdivisionID BIGINT NULL,
    StorageBoxPlace NVARCHAR(200) NULL,
    SampleStatusTypeID BIGINT NULL,
    PreviousSampleStatusTypeID BIGINT NULL,
    FunctionalAreaID BIGINT NULL,
    DestroyedByPersonID BIGINT NULL,
    EnteredDate DATETIME2 NULL,
    DestructionDate DATETIME2 NULL,
    EIDSSLaboratorySampleID NVARCHAR(200) NULL,
    Comment NVARCHAR(500) NULL,
    SiteID BIGINT NULL,
    RowStatus INT NOT NULL,
    SentToOrganizationID BIGINT NULL,
    ReadOnlyIndicator BIT NOT NULL,
    BirdStatusTypeID BIGINT NULL,
    HumanDiseaseReportID BIGINT NULL,
    VeterinaryDiseaseReportID BIGINT NULL,
    AccessionDate DATETIME2 NULL,
    AccessionConditionTypeID BIGINT NULL,
    AccessionComment NVARCHAR(200) NULL,
    AccessionByPersonID BIGINT NULL,
    DestructionMethodTypeID BIGINT NULL,
    CurrentSiteID BIGINT NULL,
    SampleKindTypeID BIGINT NULL,
    MarkedForDispositionByPersonID BIGINT NULL,
    OutOfRepositoryDate DATETIME2 NULL,
    DiseaseID BIGINT NULL,
    VectorTypeID BIGINT NULL,
    SpeciesTypeID BIGINT NULL,
    FavoriteIndicator BIT NOT NULL,
    RowAction INT NULL
);
DECLARE @BatchTestsTemp TABLE
(
    BatchTestID BIGINT NOT NULL,
    TestNameTypeID BIGINT NULL,
    BatchStatusTypeID BIGINT NULL,
    PerformedByOrganizationID BIGINT NULL,
    PerformedByPersonID BIGINT NULL,
    ValidatedByOrganizationID BIGINT NULL,
    ValidatedByPersonID BIGINT NULL,
    ObservationID BIGINT NULL,
    SiteID BIGINT NOT NULL,
    PerformedDate DATETIME2 NULL,
    ValidationDate DATETIME2 NULL,
    EIDSSBatchTestID NVARCHAR(200) NULL,
    RowStatus INT NOT NULL,
    ResultEnteredByPersonID BIGINT NULL,
    ResultEnteredByOrganizationID BIGINT NULL,
    TestRequested NVARCHAR(200) NULL,
    RowAction INT NULL
);
DECLARE @TestsTemp TABLE
(
    TestID BIGINT NOT NULL,
    TestNameTypeID BIGINT NULL,
    TestCategoryTypeID BIGINT NULL,
    TestResultTypeID BIGINT NULL,
    TestStatusTypeID BIGINT NOT NULL,
    PreviousTestStatusTypeID BIGINT NULL,
    DiseaseID BIGINT NOT NULL,
    SampleID BIGINT NULL,
    BatchTestID BIGINT NULL,
    ObservationID BIGINT NULL,
    TestNumber INT NULL,
    Note NVARCHAR(500) NULL,
    RowStatus INT NOT NULL,
    StartedDate DATETIME2 NULL,
    ConcludedDate DATETIME2 NULL,
    TestedByOrganizationID BIGINT NULL,
    TestedByPersonID BIGINT NULL,
    ResultEnteredByOrganizationID BIGINT NULL,
    ResultEnteredByPersonID BIGINT NULL,
    ValidatedByOrganizationID BIGINT NULL,
    ValidatedByPersonID BIGINT NULL,
    ReadOnlyIndicator BIT NOT NULL,
    NonLaboratoryTestIndicator BIT NOT NULL,
    ExternalTestIndicator BIT NULL,
    PerformedByOrganizationID BIGINT NULL,
    ReceivedDate DATETIME2 NULL,
    ContactPersonName NVARCHAR(200) NULL,
    RowAction INT NULL,
	HumanDiseaseReportID BIGINT NULL
);
DECLARE @TestAmendmentsTemp TABLE
(
    TestAmendmentID BIGINT NOT NULL,
    TestID BIGINT NOT NULL,
    AmendedByOrganizationID BIGINT NULL,
    AmendedByPersonID BIGINT NULL,
    AmendmentDate DATETIME2 NULL,
    OldTestResultTypeID BIGINT NULL,
    ChangedTestResultTypeID BIGINT NULL,
    OldNote NVARCHAR(500) NULL,
    ChangedNote NVARCHAR(500) NULL,
    ReasonForAmendment NVARCHAR(500) NOT NULL,
    RowStatus INT NOT NULL,
    RowAction INT NULL
);
DECLARE @TransfersTemp TABLE
(
    TransferID BIGINT NOT NULL,
    SampleID BIGINT NOT NULL,
    EIDSSTransferID NVARCHAR(200) NULL,
    TransferStatusTypeID BIGINT NULL,
    TransferredFromOrganizationID BIGINT NULL,
    TransferredToOrganizationID BIGINT NULL,
    SentByPersonID BIGINT NULL,
    TransferDate DATETIME2 NULL,
    PurposeOfTransfer NVARCHAR(200) NULL,
    SiteID BIGINT NOT NULL,
    TestRequested NVARCHAR(200) NULL,
    RowStatus INT NOT NULL,
    RowAction INT NULL
);
DECLARE @FreezerBoxLocationAvailabilitiesTemp TABLE
(
    FreezerSubdivisionID BIGINT NOT NULL,
    BoxPlaceAvailability NVARCHAR(MAX) NOT NULL
);
DECLARE @EventsTemp TABLE
(
    EventId BIGINT NOT NULL,
    EventTypeId BIGINT NULL,
    UserId BIGINT NULL,
    SiteId BIGINT NULL,
    LoginSiteId BIGINT NULL,
    ObjectId BIGINT NULL,
    DiseaseId BIGINT NULL,
    LocationId BIGINT NULL,
    InformationString NVARCHAR(MAX) NULL
);
DECLARE @FavoritesString VARCHAR(MAX);

BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        BEGIN TRANSACTION;

        INSERT INTO @SamplesTemp
        SELECT *
        FROM
            OPENJSON(@Samples)
            WITH
            (
                SampleID BIGINT,
                SampleTypeID BIGINT,
                RootSampleID BIGINT,
                ParentSampleID BIGINT,
                HumanMasterID BIGINT,
                HumanID BIGINT,
                FarmMasterID BIGINT,
                FarmID BIGINT,
                SpeciesID BIGINT,
                AnimalID BIGINT,
                MonitoringSessionID BIGINT,
                CollectedByPersonID BIGINT,
                CollectedByOrganizationID BIGINT,
                MainTestID BIGINT,
                CollectionDate DATETIME2,
                SentDate DATETIME2,
                EIDSSLocalOrFieldSampleID NVARCHAR(200),
                VectorSessionID BIGINT,
                VectorID BIGINT,
                FreezerSubdivisionID BIGINT,
                StorageBoxPlace NVARCHAR(200),
                SampleStatusTypeID BIGINT,
                PreviousSampleStatusTypeID BIGINT,
                FunctionalAreaID BIGINT,
                DestroyedByPersonID BIGINT,
                EnteredDate DATETIME2,
                DestructionDate DATETIME2,
                EIDSSLaboratorySampleID NVARCHAR(200),
                Comment NVARCHAR(500),
                SiteID BIGINT,
                RowStatus INT,
                SentToOrganizationID BIGINT,
                ReadOnlyIndicator BIT,
                BirdStatusTypeID BIGINT,
                HumanDiseaseReportID BIGINT,
                VeterinaryDiseaseReportID BIGINT,
                AccessionDate DATETIME2,
                AccessionConditionTypeID BIGINT,
                AccessionComment NVARCHAR(200),
                AccessionByPersonID BIGINT,
                DestructionMethodTypeID BIGINT,
                CurrentSiteID BIGINT,
                SampleKindTypeID BIGINT,
                MarkedForDispositionByPersonID BIGINT,
                OutOfRepositoryDate DATETIME2,
                DiseaseID BIGINT,
                VectorTypeID BIGINT,
                SpeciesTypeID BIGINT,
                FavoriteIndicator BIT,
                RowAction INT
            );

        INSERT INTO @BatchTestsTemp
        SELECT *
        FROM
            OPENJSON(@BatchTests)
            WITH
            (
                BatchTestID BIGINT,
                TestNameTypeID BIGINT,
                BatchStatusTypeID BIGINT,
                PerformedByOrganizationID BIGINT,
                PerformedByPersonID BIGINT,
                ValidatedByOrganizationID BIGINT,
                ValidatedByPersonID BIGINT,
                ObservationID BIGINT,
                SiteID BIGINT,
                PerformedDate DATETIME2,
                ValidationDate DATETIME2,
                EIDSSBatchTestID NVARCHAR(200),
                RowStatus INT,
                ResultEnteredByPersonID BIGINT,
                ResultEnteredByOrganizationID BIGINT,
                TestRequested NVARCHAR(200),
                RowAction INT
            );

        INSERT INTO @TestsTemp
        SELECT *
        FROM
            OPENJSON(@Tests)
            WITH
            (
                TestID BIGINT,
                TestNameTypeID BIGINT,
                TestCategoryTypeID BIGINT,
                TestResultTypeID BIGINT,
                TestStatusTypeID BIGINT,
                PreviousTestStatusTypeID BIGINT,
                DiseaseID BIGINT,
                SampleID BIGINT,
                BatchTestID BIGINT,
                ObservationID BIGINT,
                TestNumber INT,
                Note NVARCHAR(500),
                RowStatus INT,
                StartedDate DATETIME2,
                ConcludedDate DATETIME2,
                TestedByOrganizationID BIGINT,
                TestedByPersonID BIGINT,
                ResultEnteredByOrganizationID BIGINT,
                ResultEnteredByPersonID BIGINT,
                ValidatedByOrganizationID BIGINT,
                ValidatedByPersonID BIGINT,
                ReadOnlyIndicator BIT,
                NonLaboratoryTestIndicator BIT,
                ExternalTestIndicator BIT,
                PerformedByOrganizationID BIGINT,
                ReceivedDate DATETIME2,
                ContactPersonName NVARCHAR(200),
                RowAction INT,
				HumanDiseaseReportID BIGINT
            );

        INSERT INTO @TestAmendmentsTemp
        SELECT *
        FROM
            OPENJSON(@TestAmendments)
            WITH
            (
                TestAmendmentID BIGINT,
                TestID BIGINT,
                AmendedByOrganizationID BIGINT,
                AmendedByPersonID BIGINT,
                AmendmentDate DATETIME2,
                OldTestResultTypeID BIGINT,
                ChangedTestResultTypeID BIGINT,
                OldNote NVARCHAR(500),
                ChangedNote NVARCHAR(500),
                ReasonForAmendment NVARCHAR(500),
                RowStatus INT,
                RowAction INT
            );

        INSERT INTO @TransfersTemp
        SELECT *
        FROM
            OPENJSON(@Transfers)
            WITH
            (
                TransferID BIGINT,
                SampleID BIGINT,
                EIDSSTransferID NVARCHAR(200),
                TransferStatusTypeID BIGINT,
                TransferredFromOrganizationID BIGINT,
                TransferredToOrganizationID BIGINT,
                SentByPersonID BIGINT,
                TransferDate DATETIME2,
                PurposeOfTransfer NVARCHAR(200),
                SiteID BIGINT,
                TestRequested NVARCHAR(200),
                RowStatus INT,
                RowAction INT
            );

        INSERT INTO @FreezerBoxLocationAvailabilitiesTemp
        SELECT *
        FROM
            OPENJSON(@FreezerBoxLocationAvailabilities)
            WITH
            (
                FreezerSubdivisionID BIGINT,
                BoxPlaceAvailability NVARCHAR(MAX)
            );

        INSERT INTO @EventsTemp
        SELECT *
        FROM
            OPENJSON(@Events)
            WITH
            (
                EventId BIGINT,
                EventTypeId BIGINT,
                UserId BIGINT,
                SiteId BIGINT,
                LoginSiteId BIGINT,
                ObjectId BIGINT,
                DiseaseId BIGINT,
                LocationId BIGINT,
                InformationString NVARCHAR(MAX)
            );

        SET @FavoritesString = CONVERT(NVARCHAR(MAX), @Favorites, 1);

        WHILE EXISTS (SELECT * FROM @SamplesTemp)
        BEGIN
            SELECT TOP 1
                @RowID = SampleID,
                @SampleID = SampleID,
                @SampleTypeID = SampleTypeID,
                @RootSampleID = RootSampleID,
                @ParentSampleID = ParentSampleID,
                @HumanMasterID = HumanMasterID,
                @HumanID = HumanID,
                @FarmMasterID = FarmMasterID,
                @FarmID = FarmID,
                @SpeciesID = SpeciesID,
                @AnimalID = AnimalID,
                @VectorID = VectorID,
                @MonitoringSessionID = MonitoringSessionID,
                @VectorSessionID = VectorSessionID,
                @HumanDiseaseReportID = HumanDiseaseReportID,
                @VeterinaryDiseaseReportID = VeterinaryDiseaseReportID,
                @CollectionDate = CollectionDate,
                @CollectedByPersonID = CollectedByPersonID,
                @CollectedByOrganizationID = CollectedByOrganizationID,
                @SentDate = SentDate,
                @SentToOrganizationID = SentToOrganizationID,
                @EIDSSLocalOrFieldSampleID = EIDSSLocalOrFieldSampleID,
                @EIDSSLaboratorySampleID = EIDSSLaboratorySampleID,
                @SiteID = SiteID,
                @FunctionalAreaID = FunctionalAreaID,
                @FreezerSubdivisionID = FreezerSubdivisionID,
                @StorageBoxPlace = StorageBoxPlace,
                @EnteredDate = EnteredDate,
                @OutOfRepositoryDate = OutOfRepositoryDate,
                @DestructionDate = DestructionDate,
                @DestructionMethodTypeID = DestructionMethodTypeID,
                @DestroyedByPersonID = DestroyedByPersonID,
                @ReadOnlyIndicator = ReadOnlyIndicator,
                @AccessionDate = AccessionDate,
                @AccessionConditionTypeID = AccessionConditionTypeID,
                @AccessionByPersonID = AccessionByPersonID,
                @SampleStatusTypeID = SampleStatusTypeID,
                @PreviousSampleStatusTypeID = PreviousSampleStatusTypeID,
                @AccessionComment = AccessionComment,
                @Comment = Comment,
                @CurrentSiteID = CurrentSiteID,
                @SampleKindTypeID = SampleKindTypeID,
                @MarkedForDispositionByPersonID = MarkedForDispositionByPersonID,
                @DiseaseID = DiseaseID,
                @VectorTypeID = VectorTypeID,
                @SpeciesTypeID = SpeciesTypeID,
                @FavoriteIndicator = FavoriteIndicator,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @SamplesTemp;

            IF @RowAction = 1
               OR @RowAction = 5
            BEGIN
                IF @FarmMasterID IS NOT NULL -- Registering new veterinary sample with either no disease report or possibly no monitoring session.
                BEGIN
                    IF @FarmID IS NULL
                    BEGIN
                        DECLARE @NewFarmOwnerID BIGINT,
                                @FlockOrHerdID BIGINT;

                        INSERT INTO @SuppressSelect2
                        EXECUTE dbo.USSP_VET_FARM_COPY @AuditUserName,
                                                       @FarmMasterID,
                                                       NULL,
                                                       NULL,
                                                       NULL,
                                                       NULL,
                                                       NULL,
                                                       NULL,
                                                       NULL,
                                                       NULL,
                                                       NULL,
                                                       NULL,
                                                       @HumanMasterID,
                                                       @FarmID OUTPUT,
                                                       @NewFarmOwnerID OUTPUT;

                        IF @MonitoringSessionID IS NOT NULL -- New farm added to the veterinary active surveillance session.
                        BEGIN
                            UPDATE dbo.tlbFarm
                            SET idfMonitoringSession = @MonitoringSessionID
                            WHERE idfFarm = @FarmID;
                        END

                        SET @HumanID = @NewFarmOwnerID;
                        SET @HumanMasterID = NULL;
                    END

                    IF @SpeciesID IS NULL -- Adding new flock or herd and species to an existing farm.
                    BEGIN
                        INSERT INTO @SuppressSelect2
                        EXECUTE dbo.USSP_VET_HERD_SET @AuditUserName,
                                                      @FlockOrHerdID OUTPUT,
                                                      NULL,
                                                      @FarmID,
                                                      NULL,
                                                      NULL,
                                                      NULL,
                                                      NULL,
                                                      NULL,
                                                      0,
                                                      1;

                        INSERT INTO @SuppressSelect
                        EXECUTE dbo.USSP_VET_SPECIES_SET @AuditUserName,
                                                         @SpeciesID OUTPUT,
                                                         NULL,
                                                         @SpeciesTypeID,
                                                         @FlockOrHerdID,
                                                         NULL,
                                                         NULL,
                                                         NULL,
                                                         NULL,
                                                         NULL,
                                                         NULL,
                                                         NULL,
                                                         0,
                                                         1;
                    END
                END
                ELSE
                BEGIN
                    IF @HumanMasterID IS NOT NULL -- Registering new human sample with either no disease report or possibly no active surveillance session.
                    BEGIN
                        INSERT INTO @SuppressSelect2
                        EXECUTE dbo.USP_HUM_COPYHUMANACTUALTOHUMAN @HumanMasterID,
                                                                   @HumanID OUTPUT,
                                                                   @ReturnCode OUTPUT,
                                                                   @ReturnMessage OUTPUT;

                        IF @MonitoringSessionID IS NOT NULL -- New person added to the human active surveillance session.
                        BEGIN
                            UPDATE dbo.tlbHuman
                            SET idfMonitoringSession = @MonitoringSessionID
                            WHERE idfHuman = @HumanID;
                        END
                    END
                END
            END;

            IF @VectorID < 0
               AND @SpeciesTypeID IS NOT NULL
            BEGIN
                INSERT INTO @SuppressSelect
                EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tlbVector', @VectorID OUTPUT;

                INSERT INTO @SuppressSelect
                EXECUTE dbo.USP_GBL_NextNumber_GET 'Vector Surveillance Vector',
                                                   @EIDSSVectorID OUTPUT,
                                                   NULL;

                INSERT INTO dbo.tlbVector
                (
                    idfVector,
                    strVectorID,
                    idfCollectedByOffice,
                    idfCollectedByPerson,
                    datCollectionDateTime,
                    idfsVectorType,
                    idfsVectorSubType,
                    intQuantity,
                    intRowStatus,
                    AuditCreateDTM,
                    AuditCreateUser
                )
                VALUES
                (@VectorID,
                 @EIDSSVectorID,
                 @CollectedByOrganizationID,
                 @CollectedByPersonID,
                 @CollectionDate,
                 @VectorTypeID,
                 @SpeciesTypeID,
                 1  ,
                 0  ,
                 GETDATE(),
                 @AuditUserName
                );
            END;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_LAB_SAMPLE_SET @SampleID OUTPUT,
                                            @SampleTypeID,
                                            @RootSampleID,
                                            @ParentSampleID,
                                            @HumanMasterID,
                                            @HumanID,
                                            @SpeciesID,
                                            @AnimalID,
                                            @VectorID,
                                            @MonitoringSessionID,
                                            @VectorSessionID,
                                            @HumanDiseaseReportID,
                                            @VeterinaryDiseaseReportID,
                                            @CollectionDate,
                                            @CollectedByPersonID,
                                            @CollectedByOrganizationID,
                                            @SentDate,
                                            @SentToOrganizationID,
                                            @EIDSSLocalOrFieldSampleID,
                                            @EIDSSLaboratorySampleID,
                                            @SiteID,
                                            @FunctionalAreaID,
                                            @FreezerSubdivisionID,
                                            @StorageBoxPlace,
                                            @EnteredDate,
                                            @OutOfRepositoryDate,
                                            @MarkedForDispositionByPersonID,
                                            @DestructionDate,
                                            @DestructionMethodTypeID,
                                            @DestroyedByPersonID,
                                            @ReadOnlyIndicator,
                                            @AccessionDate,
                                            @AccessionConditionTypeID,
                                            @AccessionByPersonID,
                                            @SampleStatusTypeID,
                                            @PreviousSampleStatusTypeID,
                                            @AccessionComment,
                                            @Comment,
                                            @CurrentSiteID,
                                            @SampleKindTypeID,
                                            @DiseaseID,
                                            @RowStatus,
                                            @RowAction,
                                            @AuditUserName;

            IF (
                   @RowAction = 1 -- Register new sample
                   OR @RowAction = 5 -- Insert accession
               )
               AND @MonitoringSessionID IS NOT NULL
            BEGIN
                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_AS_SAMPLE_TO_DISEASE_SET @AuditUserName,
                                                          0,
                                                          @MonitoringSessionID,
                                                          @SampleID,
                                                          @DiseaseID,
                                                          @SampleTypeID,
                                                          0,
                                                          1;
            END
            ELSE IF @RowAction = 7
                    AND @MonitoringSessionID IS NOT NULL -- Transfer a sample (creates a new sample record)
            BEGIN
                DECLARE @SamplesToDiseaseRowID BIGINT;
                DECLARE @SamplesToDiseasesTemp TABLE
                (
                    MonitoringSessionToMaterialID BIGINT NOT NULL,
                    MonitoringSessionID BIGINT NULL,
                    SampleID BIGINT NOT NULL,
                    SampleTypeID BIGINT NULL,
                    DiseaseID BIGINT NOT NULL
                );

                INSERT INTO @SamplesToDiseasesTemp
                SELECT idfMonitoringSessionToMaterial,
                       idfMonitoringSession,
                       idfMaterial,
                       idfsSampleType,
                       idfsDisease
                FROM dbo.tlbMonitoringSessionToMaterial
                WHERE idfMaterial = @RootSampleID
                      AND intRowStatus = 0;

                WHILE EXISTS (SELECT * FROM @SamplesToDiseasesTemp)
                BEGIN
                    SELECT TOP 1
                        @SamplesToDiseaseRowID = MonitoringSessionToMaterialID,
                        @MonitoringSessionToMaterialID = MonitoringSessionToMaterialID,
                        @DiseaseID = DiseaseID
                    FROM @SamplesToDiseasesTemp;

                    INSERT INTO @SuppressSelect
                    EXECUTE dbo.USSP_AS_SAMPLE_TO_DISEASE_SET @AuditUserName,
                                                              @MonitoringSessionToMaterialID,
                                                              @MonitoringSessionID,
                                                              @SampleID,
                                                              @DiseaseID,
                                                              @SampleTypeID,
                                                              0,
                                                              1;

                    DELETE FROM @SamplesToDiseasesTemp
                    WHERE MonitoringSessionToMaterialID = @SamplesToDiseaseRowID;
                END;
            END

            UPDATE @TestsTemp
            SET SampleID = @SampleID
            WHERE SampleID = @RowID;

            UPDATE @TransfersTemp
            SET SampleID = @SampleID
            WHERE SampleID = @RowID;

            IF @FavoriteIndicator = 1
                SELECT @FavoritesString = REPLACE(@FavoritesString, @RowID, @SampleID);

            --POCO does not like the XML modify command; used string and replace for now.
            --SELECT @Favorites = @Favorites.modify('replace value of (/Favorites/Favorite/@SampleID[.=sql:variable("@RowID")])[1] with sql:variable("@SampleID")');
            IF @SampleID <> @RootSampleID
               AND (
                       @RowAction = 4
                       OR @RowAction = 5
                   )
            BEGIN
                DECLARE @TransferIDTemp AS BIGINT;

                SELECT @TransferIDTemp = tro.idfTransferOut
                FROM dbo.tlbTransferOutMaterial tom
                    INNER JOIN dbo.tlbTransferOUT AS tro
                        ON tro.idfTransferOut = tom.idfTransferOut
                WHERE tom.idfMaterial = @RootSampleID;

                UPDATE dbo.tlbTransferOUT
                SET idfsTransferStatus = 10001001,
                    AuditUpdateUser = @AuditUserName,
                    AuditUpdateDTM = GETDATE()
                WHERE idfTransferOut = @TransferIDTemp;
            END;

            DELETE FROM @SamplesTemp
            WHERE SampleID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @BatchTestsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = BatchTestID,
                @BatchTestID = BatchTestID,
                @TestNameTypeID = TestNameTypeID,
                @BatchStatusTypeID = BatchStatusTypeID,
                @PerformedByOrganizationID = PerformedByOrganizationID,
                @PerformedByPersonID = PerformedByPersonID,
                @ValidatedByOrganizationID = ValidatedByOrganizationID,
                @ValidatedByPersonID = ValidatedByPersonID,
                @ObservationID = ObservationID,
                @SiteID = SiteID,
                @PerformedDate = PerformedDate,
                @ValidationDate = ValidationDate,
                @EIDSSBatchTestID = EIDSSBatchTestID,
                @RowStatus = RowStatus,
                @ResultEnteredByPersonID = ResultEnteredByPersonID,
                @ResultEnteredByOrganizationID = ResultEnteredByOrganizationID,
                @TestRequested = TestRequested,
                @RowAction = RowAction
            FROM @BatchTestsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_GBL_BATCH_TEST_SET @BatchTestID OUTPUT,
                                                @TestNameTypeID,
                                                @BatchStatusTypeID,
                                                @PerformedByOrganizationID,
                                                @PerformedByPersonID,
                                                @ValidatedByOrganizationID,
                                                @ValidatedByPersonID,
                                                @ObservationID,
                                                @SiteID,
                                                @PerformedDate,
                                                @ValidationDate,
                                                @EIDSSBatchTestID,
                                                @RowStatus,
                                                @ResultEnteredByPersonID,
                                                @ResultEnteredByOrganizationID,
                                                @TestRequested,
                                                @RowAction,
                                                @AuditUserName;

            UPDATE @TestsTemp
            SET BatchTestID = @BatchTestID
            WHERE BatchTestID = @RowID;

            DELETE FROM @BatchTestsTemp
            WHERE BatchTestID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @TestsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = TestID,
                @TestID = TestID,
                @TestNameTypeID = TestNameTypeID,
                @TestCategoryTypeID = TestCategoryTypeID,
                @TestResultTypeID = TestResultTypeID,
                @TestStatusTypeID = TestStatusTypeID,
                @PreviousTestStatusTypeID = PreviousTestStatusTypeID,
                @DiseaseID = DiseaseID,
                @SampleID = SampleID,
                @BatchTestID = BatchTestID,
                @ObservationID = ObservationID,
                @TestNumber = TestNumber,
                @Note = Note,
                @RowStatus = RowStatus,
                @StartedDate = StartedDate,
                @ConcludedDate = ConcludedDate,
                @TestedByOrganizationID = TestedByOrganizationID,
                @TestedByPersonID = TestedByPersonID,
                @ResultEnteredByOrganizationID = ResultEnteredByOrganizationID,
                @ResultEnteredByPersonID = ResultEnteredByPersonID,
                @ValidatedByOrganizationID = ValidatedByOrganizationID,
                @ValidatedByPersonID = ValidatedByPersonID,
                @ReadOnlyIndicator = ReadOnlyIndicator,
                @NonLaboratoryTestIndicator = NonLaboratoryTestIndicator,
                @ExternalTestIndicator = ExternalTestIndicator,
                @PerformedByOrganizationID = PerformedByOrganizationID,
                @ReceivedDate = ReceivedDate,
                @ContactPersonName = ContactPersonName,
                @RowAction = RowAction,
				@HumanDiseaseReportID = HumanDiseaseReportID
            FROM @TestsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_LAB_TEST_SET @TestID,
                                          @TestNameTypeID,
                                          @TestCategoryTypeID,
                                          @TestResultTypeID,
                                          @TestStatusTypeID,
                                          @PreviousTestStatusTypeID,
                                          @DiseaseID,
                                          @SampleID,
                                          @BatchTestID,
                                          @ObservationID,
                                          @TestNumber,
                                          @Note,
                                          @RowStatus,
                                          @StartedDate,
                                          @ConcludedDate,
                                          @TestedByOrganizationID,
                                          @TestedByPersonID,
                                          @ResultEnteredByOrganizationID,
                                          @ResultEnteredByPersonID,
                                          @ValidatedByOrganizationID,
                                          @ValidatedByPersonID,
                                          @ReadOnlyIndicator,
                                          @NonLaboratoryTestIndicator,
                                          @ExternalTestIndicator,
                                          @PerformedByOrganizationID,
                                          @ReceivedDate,
                                          @ContactPersonName,
                                          @RowAction,
                                          @AuditUserName,
										  @HumanDiseaseReportID;

            UPDATE @TestAmendmentsTemp
            SET TestID = @TestID
            WHERE TestID = @RowID;

            DELETE FROM @TestsTemp
            WHERE TestID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @TestAmendmentsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = TestAmendmentID,
                @TestAmendmentID = TestAmendmentID,
                @TestID = TestID,
                @AmendedByOrganizationID = AmendedByOrganizationID,
                @AmendedByPersonID = AmendedByPersonID,
                @AmendmentDate = AmendmentDate,
                @OldTestResultTypeID = OldTestResultTypeID,
                @ChangedTestResultTypeID = ChangedTestResultTypeID,
                @OldNote = OldNote,
                @ChangedNote = ChangedNote,
                @ReasonForAmendment = ReasonForAmendment,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @TestAmendmentsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_GBL_TEST_AMENDMENT_SET @TestAmendmentID,
                                                    @TestID,
                                                    @AmendedByOrganizationID,
                                                    @AmendedByPersonID,
                                                    @AmendmentDate,
                                                    @OldTestResultTypeID,
                                                    @ChangedTestResultTypeID,
                                                    @OldNote,
                                                    @ChangedNote,
                                                    @ReasonForAmendment,
                                                    @RowStatus,
                                                    @RowAction,
                                                    @AuditUserName;

            DELETE FROM @TestAmendmentsTemp
            WHERE TestAmendmentID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @TransfersTemp)
        BEGIN
            SELECT TOP 1
                @RowID = TransferID,
                @TransferID = TransferID,
                @SampleID = SampleID,
                @EIDSSTransferID = EIDSSTransferID,
                @TransferStatusTypeID = TransferStatusTypeID,
                @TransferredFromOrganizationID = TransferredFromOrganizationID,
                @TransferredToOrganizationID = TransferredToOrganizationID,
                @SentByPersonID = SentByPersonID,
                @TransferDate = TransferDate,
                @Note = PurposeOfTransfer,
                @SiteID = SiteID,
                @TestRequested = TestRequested,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @TransfersTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_LAB_TRANSFER_SET @TransferID,
                                              @SampleID,
                                              @EIDSSTransferID,
                                              @TransferStatusTypeID,
                                              @TransferredFromOrganizationID,
                                              @TransferredToOrganizationID,
                                              @SentByPersonID,
                                              @TransferDate,
                                              @Note,
                                              @SiteID,
                                              @TestRequested,
                                              @RowStatus,
                                              @RowAction,
                                              @AuditUserName;

            IF @RowAction = 1
            BEGIN
                UPDATE @EventsTemp
                SET ObjectId = @TransferID
                WHERE ObjectId = @RowID;
            END;

            DELETE FROM @TransfersTemp
            WHERE TransferID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @FreezerBoxLocationAvailabilitiesTemp)
        BEGIN
            SELECT TOP 1
                @RowID = FreezerSubdivisionID,
                @FreezerSubdivisionID = FreezerSubdivisionID,
                @BoxPlaceAvailability = BoxPlaceAvailability
            FROM @FreezerBoxLocationAvailabilitiesTemp;

            UPDATE dbo.tlbFreezerSubdivision
            SET BoxPlaceAvailability = @BoxPlaceAvailability,
                AuditUpdateUser = @AuditUserName,
                AuditUpdateDTM = GETDATE()
            WHERE idfSubdivision = @FreezerSubdivisionID;

            DELETE FROM @FreezerBoxLocationAvailabilitiesTemp
            WHERE FreezerSubdivisionID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @EventsTemp)
        BEGIN
            SELECT TOP 1
                @EventId = EventId,
                @EventTypeId = EventTypeId,
                @EventUserId = UserId,
                @EventObjectId = ObjectId,
                @EventSiteId = SiteId,
                @EventDiseaseId = DiseaseId,
                @EventLocationId = LocationId,
                @EventInformationString = InformationString,
                @EventLoginSiteId = LoginSiteId
            FROM @EventsTemp;

            INSERT INTO @SuppressSelect2
            EXECUTE dbo.USP_ADMIN_EVENT_SET @EventId,
                                            @EventTypeId,
                                            @EventUserId,
                                            @EventObjectId,
                                            @EventDiseaseId,
                                            @EventSiteId,
                                            @EventInformationString,
                                            @EventLoginSiteId,
                                            @EventLocationId,
                                            @AuditUserName;

            DELETE FROM @EventsTemp
            WHERE EventId = @EventId;
        END;

        IF @Favorites IS NOT NULL
        BEGIN
            DECLARE @UserPreferenceID AS BIGINT;

            SELECT @UserPreferenceID =
            (
                SELECT UserPreferenceUID
                FROM dbo.UserPreference
                WHERE idfUserID = @UserID
                      AND ModuleConstantID = 10508006
                      AND intRowStatus = 0
            );

            IF @UserPreferenceID IS NULL
            BEGIN
                INSERT INTO @SuppressSelect
                EXECUTE dbo.USP_GBL_NEXTKEYID_GET N'UserPreference',
                                                  @UserPreferenceID OUTPUT;

                INSERT INTO dbo.UserPreference
                (
                    UserPreferenceUID,
                    idfUserID,
                    ModuleConstantID,
                    PreferenceDetail,
                    intRowStatus,
                    AuditCreateUser,
                    AuditCreateDTM
                )
                VALUES
                (@UserPreferenceID, @UserID, 10508006, @FavoritesString, 0, @AuditUserName, GETDATE());
            END
            ELSE
            BEGIN
                UPDATE dbo.UserPreference
                SET idfUserID = @UserID,
                    PreferenceDetail = @FavoritesString,
                    AuditUpdateUser = @AuditUserName,
                    AuditUpdateDTM = GETDATE()
                WHERE UserPreferenceUID = @UserPreferenceID;
            END
        END;

        IF @@TRANCOUNT > 0
            COMMIT;

        SELECT @ReturnCode AS ReturnCode,
               @ReturnMessage AS ReturnMessage,
               @KeyId AS KeyId,
               'Labratory' AS KeyName;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK;

        THROW;
    END CATCH;
END;
GO
PRINT N'Refreshing Procedure [dbo].[USP_GBL_DataAuditEvent_Delete]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_GBL_DataAuditEvent_Delete]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_GBL_DataAuditEvent_Update]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_GBL_DataAuditEvent_Update]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_DEDUPLICATION_HUMAN_DISEASE_Report_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_DEDUPLICATION_HUMAN_DISEASE_Report_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_HAS_MONITORING_SESSION_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_HAS_MONITORING_SESSION_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_VAS_MONITORING_SESSION_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_VAS_MONITORING_SESSION_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_VET_DISEASE_REPORT_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_VET_DISEASE_REPORT_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USSP_VCTS_DETAILEDCOLLECTIONS_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USSP_VCTS_DETAILEDCOLLECTIONS_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_DEDUPLICATION_VET_DISEASE_Report_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_DEDUPLICATION_VET_DISEASE_Report_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_VCTS_SURVEILLANCE_SESSION_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_VCTS_SURVEILLANCE_SESSION_SET]';


GO
PRINT N'Update complete.';


GO
