@using EIDSS.Web.TagHelpers.Models
@model BaseReferenceEditorPagesViewModel;

<h2 heading-for="@HeadingResourceKeyConstants.SampleTypesReferenceEditorPageHeading"></h2>

<div asp-validation-summary="All" class="text-danger"></div>

<partial name="_sampleTypeModalPartial"/>

@{
    //PageLevel
    Model.PageLevelAddButtonModalText = Localizer.GetString(ButtonResourceKeyConstants.AddButton);
    Model.PageLevelAddButtonModal = "AddSampleType";
    Model.PageLevelAddButtonID = "PageLevelAddButton";

    //SETUP GRID
    Model.eidssGridConfiguration.GridClass = "table table-sm table-striped";
    Model.eidssGridConfiguration.GridId = "SampleTypeList";
    Model.eidssGridConfiguration.AjaxDataUrl = Url.Action("GetList", "SampleType", new {Area = "Administration"});
    Model.eidssGridConfiguration.EditModalAjaxUrl = Url.Action("Edit", "SampleType", new {Area = "Administration"});
    Model.eidssGridConfiguration.DeleteModalAjaxUrl = Url.Action("Delete", "SampleType", new {Area = "Administration"});
    Model.eidssGridConfiguration.EnableServerSide = true;
    Model.eidssGridConfiguration.EnableProcessingMessage = true;
    Model.eidssGridConfiguration.EnableCustomSearching = true;
    Model.eidssGridConfiguration.EditType = EditType.Inline;
    Model.eidssGridConfiguration.SaveCompleteMethod = "CheckSuccess";
    Model.eidssGridConfiguration.DeleteCompleteMethod = "CheckDeleteSuccess";

    Model.eidssGridConfiguration.ControlLabels = new EIDSSControlLabels
    {
        DeleteModalMessage = Localizer.GetString(MessageResourceKeyConstants.DoYouWantToDeleteThisRecordMessage),
        EditModalMessage = "Are you sure that you want to Edit this record?",
        DeleteModalTitle = Localizer.GetString(HeadingResourceKeyConstants.EIDSSModalHeading),
        EditModalTitle = Localizer.GetString(HeadingResourceKeyConstants.EIDSSModalHeading),
        CancelButtonLabel = Localizer.GetString(ButtonResourceKeyConstants.CancelButton),
        SaveButtonLabel = Localizer.GetString(ButtonResourceKeyConstants.OKButton),
        DeleteButtonLabel = Localizer.GetString(ButtonResourceKeyConstants.DeleteButton),
        CloseButtonLabel = Localizer.GetString(ButtonResourceKeyConstants.CloseButton),
        CancelInlineEditTitle = Localizer.GetString(HeadingResourceKeyConstants.EIDSSModalHeading)
    };
    ;
    Model.eidssGridConfiguration.ControlLabels.CanclInlineEditMessage = Localizer.GetString(MessageResourceKeyConstants.DoYouWantToCancelMessage);
    Model.eidssGridConfiguration.ControlLabels.YesButtonLabel = Localizer.GetString(ButtonResourceKeyConstants.YesButton);
    Model.eidssGridConfiguration.ControlLabels.NoButtonLabel = Localizer.GetString(ButtonResourceKeyConstants.NoButton);
    Model.eidssGridConfiguration.ControlLabels.SaveInlineEditTitle = Localizer.GetString(HeadingResourceKeyConstants.EIDSSModalHeading);
    Model.eidssGridConfiguration.ControlLabels.SaveInlineEditMessage = "Are you sure that you want to save this record?";
    //Model.eidssGridConfiguration.ControlLabels.DeleteExceptionMessage = "You are attempting to delete a reference value which is currently used in the system.";
    Model.eidssGridConfiguration.ControlLabels.DeleteExceptionMessage = Localizer.GetString(MessageResourceKeyConstants.InUseReferenceValueAreYouSureMessage);
    Model.eidssGridConfiguration.ControlLabels.DeleteExceptionTitle = Localizer.GetString(HeadingResourceKeyConstants.EIDSSModalHeading);

    Model.eidssGridConfiguration.ColumnNames.Add(new EIDSSColumnNames
    {
        ColumnTitleHeader = Localizer.GetString(ColumnHeadingResourceKeyConstants.RowColumnHeading),
        ColumnName = "row",
        Visible = true,
        Orderable = false,
        ColumnType = ColumnType.Default,
        VisibleInModal = false
    });
    Model.eidssGridConfiguration.ColumnNames.Add(new EIDSSColumnNames
    {
        ColumnTitleHeader = "KeyId",
        ColumnName = "KeyId",
        Visible = false,
        ColumnType = ColumnType.Default,
        VisibleInModal = false
    });
    Model.eidssGridConfiguration.ColumnNames.Add(new EIDSSColumnNames
    {
        ColumnTitleHeader = Localizer.GetString(ColumnHeadingResourceKeyConstants.DefaultValueColumnHeading),
        ColumnName = "StrDefault",
        Visible = true,
        ColumnType = ColumnType.Default,
        VisibleInModal = true,
        Orderable = true,
        ValidationSetting = new ValidatorSettings
        {
            ValidationRuleTypes = VaildationRuleType.ValidationRuleType.REQUIRED,
            ValidatorMessage = Localizer.GetString(MessageResourceKeyConstants.FieldIsRequiredMessage)
        },
        ClassName = "EditDefaultValueRequired"
    });
    Model.eidssGridConfiguration.ColumnNames.Add(new EIDSSColumnNames
    {
        ColumnTitleHeader = Localizer.GetString(ColumnHeadingResourceKeyConstants.NationalValueColumnHeading),
        ColumnName = "StrName",
        Visible = true,
        ColumnType = ColumnType.Default,
        VisibleInModal = true,
        Orderable = true,
        ValidationSetting = new ValidatorSettings
        {
            ValidationRuleTypes = VaildationRuleType.ValidationRuleType.REQUIRED,
            ValidatorMessage = Localizer.GetString(MessageResourceKeyConstants.FieldIsRequiredMessage)
        },
        ClassName = "EditNationalValueRequired"
    });
    Model.eidssGridConfiguration.ColumnNames.Add(new EIDSSColumnNames
    {
        ColumnTitleHeader = Localizer.GetString(ColumnHeadingResourceKeyConstants.CodeColumnHeading),
        ColumnName = "StrSampleCode",
        Visible = true,
        ColumnType = ColumnType.Default,
        VisibleInModal = true
    });
    Model.eidssGridConfiguration.ColumnNames.Add(new EIDSSColumnNames
    {
        ColumnTitleHeader = Localizer.GetString(ColumnHeadingResourceKeyConstants.LOINCCodeColumnHeading),
        ColumnName = "LOINC_NUMBER",
        Visible = true,
        ColumnType = ColumnType.Default,
        VisibleInModal = true
    });
    Model.eidssGridConfiguration.ColumnNames.Add(new EIDSSColumnNames
    {
        ColumnTitleHeader = Localizer.GetString(ColumnHeadingResourceKeyConstants.AccessoryCodeColumnHeading),
        ColumnName = "StrHACodeNames",
        ColumnType = ColumnType.DropDown,
        AllowMultipleDropDownItemSelection = true,
        DisplayDropDownInModalOnly = true,
        Orderable = true,
        ValidationSetting = new ValidatorSettings
        {
            ValidationRuleTypes = VaildationRuleType.ValidationRuleType.REQUIRED,
            ValidatorMessage = Localizer.GetString(MessageResourceKeyConstants.FieldIsRequiredMessage)
        },
        ClassName = "EditAccessoryCodeRequired",
        Visible = true,
        AssociatedFieldId = "StrHACode",
        SplitCsvValues = true,
        ColumnAjaxDataUrl = Url.Action("BaseReferenceByReferenceTypeIDListForSelect2DropDown", "CrossCutting", new {Area = "CrossCutting", referenceTypeID = (long) ReferenceTypes.AccessoryCode, intHACode = 226})
    });
    Model.eidssGridConfiguration.ColumnNames.Add(new EIDSSColumnNames
    {
        ColumnTitleHeader = Localizer.GetString(ColumnHeadingResourceKeyConstants.OrderColumnHeading),
        ColumnName = "IntOrder",
        Visible = true,
        Orderable = true,
        ColumnType = ColumnType.Numeric,
        VisibleInModal = true
    });
    Model.eidssGridConfiguration.ColumnNames.Add(new EIDSSColumnNames
    {
        ColumnName = "StrHACode",
        ColumnTitleHeader = Localizer.GetString(ColumnHeadingResourceKeyConstants.AccessoryCodeColumnHeading),
        Visible = false,
        ColumnType = ColumnType.Default,
        VisibleInModal = false
    });
    Model.eidssGridConfiguration.ColumnNames.Add(new EIDSSColumnNames
    {
        ColumnTitleHeader = string.Empty,
        ColumnName = "name",
        Orderable = false,
        ColumnType = ColumnType.Edit,
        Visible = Model.UserPermissions.Write
    });
    Model.eidssGridConfiguration.ColumnNames.Add(new EIDSSColumnNames
    {
        ColumnTitleHeader = string.Empty,
        ColumnName = "name",
        Orderable = false,
        ColumnType = ColumnType.Delete,
        Visible = Model.UserPermissions.Delete
    });
}

<partial name="_InformationalModalPartial" for="InformationMessage" />
<partial name="_WarningModalPartial"/>

<!-- Modal -->
<div class="modal fade" id="duplicatesModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel"> @Localizer.GetString(HeadingResourceKeyConstants.EIDSSModalHeading)</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <span id="dupemsg"></span>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-dismiss="modal">@Localizer.GetString(ButtonResourceKeyConstants.OKButton)</button>
            </div>
        </div>
    </div>
</div>

<partial name="_BaseReferenceEditorsPartial"/>

@section Scripts
{
    <script>
        ///Method called after execution of Save Method Returns Data back from the controller
        function CheckSuccess(data) {
            var stringified_data = JSON.stringify(data);
            var parsed_data = JSON.parse(stringified_data);
            if (parsed_data.returnMessage == "SUCCESS") {
                $("#AddSampleTypeSuccessModal").modal("show");

                updateNotificationEnvelopeCount();
            } else if (parsed_data.returnMessage == "DOES EXIST") {
                $("#duplicatesModal").modal("show");
                $("#dupemsg").html(parsed_data.strClientPageMessage);
            }
        };

        function PrepareNewRecord() {
            $("#successModal").modal("hide");
            $("#duplicatesModal").modal("hide");
            $("#AddSampleType").modal("show");
        };

        function CheckDeleteSuccess(data) {
            var stringifiedData = JSON.stringify(data);
            var parsedData = JSON.parse(stringifiedData);
            if (parsedData.returnMessage === "SUCCESS") {
                updateNotificationEnvelopeCount();
                showInformationalModal('@Localizer.GetString(MessageResourceKeyConstants.RecordDeletedSuccessfullyMessage)');
            }
        };
    </script>
}