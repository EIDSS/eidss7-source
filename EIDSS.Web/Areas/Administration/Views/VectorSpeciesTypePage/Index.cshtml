@using EIDSS.Web.TagHelpers.Models
@model BaseReferenceEditorPagesViewModel;

<h2 heading-for="@HeadingResourceKeyConstants.VectorSpeciesTypesReferenceEditorPageHeading"></h2>

@{
    ViewData["Title"] = Localizer.GetString(HeadingResourceKeyConstants.VectorSpeciesTypesReferenceEditorPageHeading);

    //PageLevel
    Model.PageLevelAddButtonModalText = Localizer.GetString(ButtonResourceKeyConstants.AddButton);
    Model.PageLevelAddButtonModal = "AddVectorSpecies";
    Model.PageLevelAddButtonID = "PageLevelAddButton";

    //DropDowns
    var select2Configuration = new Select2Configruation
    {
        DropDownId = "ReferenceTypeDD",
        Label = Localizer.GetString(FieldLabelResourceKeyConstants.VectorTypeFieldLabel),
        ControlTargetType = DropDownTargetTypes.Table,
        Endpoint = Url.Action("BaseReferenceByReferenceTypeIDListForSelect2DropDown", "CrossCutting", new {Area = "CrossCutting", referenceTypeID = 19000140}),
        ControlTargetUrl = Url.Action("GetList", "VectorSpeciesTypePage", new {Area = "Administration"}),
        AddModalId = "mdAddVector",
        IncludeAddButton = true,
        isVisible = true,
        CustomJsOnChangeFunction = "ChangeAddButtonActiveStatus", //Create This Javascript Method Below in the Scripts tag
        CustomJsOnClearFunction = "SelectOnClear", //Create This Javascript Method Below in the Scripts tag
        DisabledControls = "PageLevelAddButton"
    };
    Model.Select2Configurations.Add(select2Configuration);

    //SET UP MODAL
    var eIDSSModalConfiguration = new EIDSSModalConfiguration
    {
        ControlLabels =
        {
            ModalTitle = Localizer.GetString(HeadingResourceKeyConstants.VectorSpeciesTypeDetailsModalHeading),
            SaveButtonLabel = Localizer.GetString(ButtonResourceKeyConstants.SaveButton),
            CloseButtonLabel = Localizer.GetString(ButtonResourceKeyConstants.CancelButton),
            SuccessMessage = Localizer.GetString(MessageResourceKeyConstants.RecordSavedSuccessfullyMessage),
            OkButtonLabel = Localizer.GetString(ButtonResourceKeyConstants.OKButton),
            CancelButtonLabel = Localizer.GetString(ButtonResourceKeyConstants.CancelButton)
        },
        SavingControlsCollection = "ReferenceTypeDD",
        ModalId = "AddVectorSpecies",
        TargetGridControlID = "VectorSpeciesTypeList", //ID of Grid to Refresh
        PostAjaxDataUrl = Url.Action("Create", "VectorSpeciesTypePage", new {Area = "Administration"}),
        SaveCompleteMethod = "CheckSuccess"
    };

    eIDSSModalConfiguration.ControlNames.Add(new EIDSSControlNames
    {
        LabelNameForControl = Localizer.GetString(FieldLabelResourceKeyConstants.DefaultValueFieldLabel),
        ControlName = "StrDefault",
        Visible = true,
        ValidationSetting = new ValidatorSettings
        {
            ValidationRuleTypes = VaildationRuleType.ValidationRuleType.REQUIRED,
            ValidatorMessage = Localizer.GetString(MessageResourceKeyConstants.FieldIsRequiredMessage)
        },
        ClassName = "DefaultValueRequired"
    });
    eIDSSModalConfiguration.ControlNames.Add(new EIDSSControlNames
    {
        LabelNameForControl = Localizer.GetString(FieldLabelResourceKeyConstants.NationalValueFieldLabel),
        ControlName = "StrName",
        Visible = true,
        ValidationSetting = new ValidatorSettings
        {
            ValidationRuleTypes = VaildationRuleType.ValidationRuleType.REQUIRED,
            ValidatorMessage = Localizer.GetString(MessageResourceKeyConstants.FieldIsRequiredMessage)
        },
        ClassName = "NationalValueRequired"
    });
    eIDSSModalConfiguration.ControlNames.Add(new EIDSSControlNames
    {
        LabelNameForControl = Localizer.GetString(FieldLabelResourceKeyConstants.CodeFieldLabel),
        //LabelNameForControl = "Code",
        ControlName = "StrCode",
        Visible = true
    });
    eIDSSModalConfiguration.ControlNames.Add(new EIDSSControlNames
    {
        LabelNameForControl = Localizer.GetString(FieldLabelResourceKeyConstants.OrderFieldLabel),
        ControlName = "IntOrder",
        ControlType = ControlType.Numeric,
        Visible = true
    });
    Model.eIDSSModalConfiguration.Add(eIDSSModalConfiguration);

    //SET UP MODAL2
    <partial name="_VectorTypeModalPartial"/>

    //SETUP GRID
    //Model.PageName = "Sample Types List";
    Model.eidssGridConfiguration.GridId = "VectorSpeciesTypeList";
    Model.eidssGridConfiguration.GridClass = "table table-sm table-striped";
    Model.eidssGridConfiguration.ControlIdThatRefreshGrid = "ReferenceTypeDD";
    Model.eidssGridConfiguration.ControlFilterID = "ReferenceTypeDD";
    Model.eidssGridConfiguration.AjaxDataUrl = Url.Action("GetList", "VectorSpeciesTypePage", new {Area = "Administration"});
    Model.eidssGridConfiguration.EditModalAjaxUrl = Url.Action("Edit", "VectorSpeciesTypePage", new {Area = "Administration"});
    Model.eidssGridConfiguration.DeleteModalAjaxUrl = Url.Action("Delete", "VectorSpeciesTypePage", new {Area = "Administration"});
    Model.eidssGridConfiguration.EnableServerSide = true;
    Model.eidssGridConfiguration.EnableCustomSearching = true;
    Model.eidssGridConfiguration.EditType = EditType.Inline;
    Model.eidssGridConfiguration.SaveCompleteMethod = "CheckSuccess";
    Model.eidssGridConfiguration.DeleteCompleteMethod = "CheckDeleteSuccess";
    Model.eidssGridConfiguration.ControlLabels = new EIDSSControlLabels
    {
        DeleteModalMessage = Localizer.GetString(MessageResourceKeyConstants.DoYouWantToDeleteThisRecordMessage),
        DeleteExceptionTitle = Localizer.GetString(HeadingResourceKeyConstants.EIDSSModalHeading),
        DeleteExceptionMessage = Localizer.GetString(MessageResourceKeyConstants.InUseReferenceValueAreYouSureMessage),
        EditModalMessage = "Are you sure that you want to Edit this record?",
        DeleteModalTitle = Localizer.GetString(HeadingResourceKeyConstants.EIDSSModalHeading),
        EditModalTitle = Localizer.GetString(HeadingResourceKeyConstants.EIDSSModalHeading),
        CancelButtonLabel = Localizer.GetString(ButtonResourceKeyConstants.CancelButton),
        SaveButtonLabel = Localizer.GetString(ButtonResourceKeyConstants.OKButton),
        DeleteButtonLabel = Localizer.GetString(ButtonResourceKeyConstants.DeleteButton),
        CloseButtonLabel = Localizer.GetString(ButtonResourceKeyConstants.CloseButton),
        CancelInlineEditTitle = Localizer.GetString(HeadingResourceKeyConstants.EIDSSModalHeading),
        CanclInlineEditMessage = Localizer.GetString(MessageResourceKeyConstants.DoYouWantToCancelMessage),
        YesButtonLabel = Localizer.GetString(ButtonResourceKeyConstants.YesButton),
        NoButtonLabel = Localizer.GetString(ButtonResourceKeyConstants.NoButton),
        SaveInlineEditTitle = Localizer.GetString(HeadingResourceKeyConstants.EIDSSModalHeading),
        SaveInlineEditMessage = "Are you sure that you want to save this record?"
    };
    Model.eidssGridConfiguration.ColumnNames.Add(new EIDSSColumnNames
    {
        ColumnTitleHeader = Localizer.GetString(ColumnHeadingResourceKeyConstants.RowColumnHeading),
        ColumnName = "row",
        Visible = true,
        Orderable = false,
        ColumnType = ColumnType.Default,
        VisibleInModal = false
    });
    Model.eidssGridConfiguration.ColumnNames.Add(new EIDSSColumnNames
    {
        ColumnTitleHeader = "KeyId",
        ColumnName = "KeyId",
        Visible = false,
        ColumnType = ColumnType.Default,
        VisibleInModal = false
    });
    Model.eidssGridConfiguration.ColumnNames.Add(new EIDSSColumnNames
    {
        ColumnTitleHeader = "IdfsVectorType",
        ColumnName = "IdfsVectorType",
        Visible = false,
        ColumnType = ColumnType.Default,
        VisibleInModal = false
    });
    Model.eidssGridConfiguration.ColumnNames.Add(new EIDSSColumnNames
    {
        ColumnTitleHeader = Localizer.GetString(ColumnHeadingResourceKeyConstants.DefaultValueColumnHeading),
        ColumnName = "StrDefault",
        Visible = true,
        Orderable = true,
        ColumnType = ColumnType.Default,
        VisibleInModal = true,
        ValidationSetting = new ValidatorSettings
        {
            ValidationRuleTypes = VaildationRuleType.ValidationRuleType.REQUIRED,
            ValidatorMessage = Localizer.GetString(MessageResourceKeyConstants.FieldIsRequiredMessage)
        },
        ClassName = "EditDefaultValueRequired"
    });
    Model.eidssGridConfiguration.ColumnNames.Add(new EIDSSColumnNames
    {
        ColumnTitleHeader = Localizer.GetString(ColumnHeadingResourceKeyConstants.NationalValueColumnHeading),
        ColumnName = "StrName",
        Visible = true,
        Orderable = true,
        ColumnType = ColumnType.Default,
        VisibleInModal = true,
        ValidationSetting = new ValidatorSettings
        {
            ValidationRuleTypes = VaildationRuleType.ValidationRuleType.REQUIRED,
            ValidatorMessage = Localizer.GetString(MessageResourceKeyConstants.FieldIsRequiredMessage)
        },
        ClassName = "EditNationalValueRequired"
    });
    Model.eidssGridConfiguration.ColumnNames.Add(new EIDSSColumnNames
    {
        ColumnTitleHeader = Localizer.GetString(ColumnHeadingResourceKeyConstants.CodeColumnHeading),
        ColumnName = "StrCode",
        Visible = true,
        ColumnType = ColumnType.Default,
        VisibleInModal = true
    });
    Model.eidssGridConfiguration.ColumnNames.Add(new EIDSSColumnNames
    {
        ColumnTitleHeader = Localizer.GetString(ColumnHeadingResourceKeyConstants.OrderColumnHeading),
        ColumnName = "IntOrder",
        Visible = true,
        Orderable = true,
        ColumnType = ColumnType.Numeric,
        VisibleInModal = true
    });
    Model.eidssGridConfiguration.ColumnNames.Add(new EIDSSColumnNames
    {
        ColumnTitleHeader = string.Empty,
        ColumnName = "name",
        Orderable = false,
        ColumnType = ColumnType.Edit,
        Visible = Model.UserPermissions.Write
    });
    Model.eidssGridConfiguration.ColumnNames.Add(new EIDSSColumnNames
    {
        ColumnTitleHeader = string.Empty,
        ColumnName = "name",
        Orderable = false,
        ColumnType = ColumnType.Delete,
        Visible = Model.UserPermissions.Delete
    });
}

<partial name="_InformationalModalPartial" for="InformationMessage" />

<!-- Modal -->
<div class="modal fade" id="duplicatesModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel"> @Localizer.GetString(HeadingResourceKeyConstants.EIDSSModalHeading)</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <span id="dupemsg"></span>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-dismiss="modal">@Localizer.GetString(ButtonResourceKeyConstants.OKButton)</button>
            </div>
        </div>
    </div>
</div>

<partial name="_BaseReferenceEditorsPartial"/>

@section Scripts
{
    <script>
        ///Method called after execution of Save Method Returns Data back from the controller
        function CheckSuccess(data) {
            var stringified_data = JSON.stringify(data);
            var parsed_data = JSON.parse(stringified_data);
            if (parsed_data.returnMessage == "SUCCESS") {
                $("#mdAddVectorSuccessModal").modal("show");

                updateNotificationEnvelopeCount();
            } else if (parsed_data.returnMessage == "DOES EXIST") {
                $("#duplicatesModal").modal("show");
                /*  $("#dupemsg").html(parsed_data.strClientPageMessage);*/
                $("#dupemsg").html(parsed_data.strDuplicatedField);
            }
        };

        function CheckDeleteSuccess(data) {
            var stringifiedData = JSON.stringify(data);
            var parsedData = JSON.parse(stringifiedData);
            if (parsedData.returnMessage === "SUCCESS") {
                updateNotificationEnvelopeCount();
                showInformationalModal('@Localizer.GetString(MessageResourceKeyConstants.RecordDeletedSuccessfullyMessage)');
            }
        };

        function PrepareNewRecord() {
            $("#successModal").modal("hide");
            $("#duplicatesModal").modal("hide");
            $("#AddVectorSpecies").modal("show");
        };

        function ChangeAddButtonActiveStatus(data) {
            switch (parseInt(data.id)) {
            case 19000140:
                $("#PageLevelAddButton").prop('disabled', true);
                break;
            default:
                $("#PageLevelAddButton").prop('disabled', false);
            }
        };

        ///When Drop Down Items Are Cleared
        function SelectOnClear(data) {
            $("#AddVectorSpecies").prop('disabled', true);
        };
    </script>
}