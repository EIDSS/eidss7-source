@model ConfigurationMatrixPagesViewModel;
@using EIDSS.Web.TagHelpers.Models.EIDSSModal;
@using EIDSS.Web.TagHelpers.Models.EIDSSGrid;
@using static EIDSS.ClientLibrary.Enumerations.EIDSSConstants;
@using EIDSS.ClientLibrary.Enumerations;
@{
    //PageLevel
    ViewData["Title"] = Localizer.GetString(HeadingResourceKeyConstants.VectorTypeSampleTypeMatrixPageHeading);
    Model.PageName = Localizer.GetString(HeadingResourceKeyConstants.VectorTypeSampleTypeMatrixPageHeading);
    Model.PageLevelAddButtonModalText = Localizer.GetString(ButtonResourceKeyConstants.AddButton);
    Model.PageLevelAddButtonModal = "AddVectorTypeSampleTypeMatrix";
    Model.PageLevelAddButtonID = "AddVectorTypeSampleTypeMatrixButton";

    //DropDowns
    var select2Configuration = new Select2Configruation
    {
        DropDownId = "VectorTypeDDD",
        ControltargetId = "VectorTypeSampleTypeMatrixGrid",
        Label = Localizer.GetString(FieldLabelResourceKeyConstants.VectorTypeFieldLabel),
        ControlTargetType = DropDownTargetTypes.Table,
        CustomJsOnClearFunction = "SelectOnClear",
        CustomJsOnChangeFunction = "ChangeAddButtonActiveStatus",
        DisabledControls = "AddVectorTypeSampleTypeMatrixButton",
        Endpoint = Url.Action("BaseReferenceByReferenceTypeIDListForSelect2DropDown", "CrossCutting", new {Area = "CrossCutting", referenceTypeID = "19000140", intHACode = HACodeList.VectorHACode}),
        ControlTargetUrl = Url.Action("GetList", "VectorTypeSampleTypeMatrixPage", new {Area = "Configuration"}),
        isVisible = true
    };

    //Display Add Button Next To DropDown
    if (Model.UserPermissions.Create)
        select2Configuration.IncludeAddButton = true;
    //Modal To Launch When Button is Clicked
    select2Configuration.AddModalId = "VectorTypeSave";
    Model.Select2Configurations.Add(select2Configuration);

    //SET UP MODAL
    var eIDSSModalConfiguration = new EIDSSModalConfiguration
    {
        ControlLabels =
        {
            ModalTitle = Localizer.GetString(HeadingResourceKeyConstants.VectorTypeSampleTypeDetailsModalHeading),
            SaveButtonLabel = Localizer.GetString(ButtonResourceKeyConstants.SaveButton),
            CancelButtonLabel = Localizer.GetString(ButtonResourceKeyConstants.CancelButton),
            CloseButtonLabel = Localizer.GetString(ButtonResourceKeyConstants.CancelButton),
            //success modal configs
            SuccessModalTitle = Localizer.GetString(HeadingResourceKeyConstants.EIDSSModalHeading),
            SuccessMessage = Localizer.GetString(MessageResourceKeyConstants.RecordSavedSuccessfullyMessage),
            OkButtonLabel = Localizer.GetString(ButtonResourceKeyConstants.OKButton)
        },
        ModalId = "AddVectorTypeSampleTypeMatrix",
        SavingControlsCollection = "VectorTypeDDD",
        TargetGridControlID = "VectorTypeSampleTypeMatrixGrid", //ID of Grid to Refresh
        PostAjaxDataUrl = Url.Action("Create", "VectorTypeSampleTypeMatrixPage"), //Save Endpoint
        SaveCompleteMethod = "CheckSuccess"
    };
    eIDSSModalConfiguration.ControlNames.Add(new EIDSSControlNames
    {
        LabelNameForControl = Localizer.GetString(FieldLabelResourceKeyConstants.SampleTypeFieldLabel),
        ControlName = "idfsSampleType",
        ControlType = ControlType.DropDownAddButtonOpenModal,
        OpenModalName = "AddSampleType",
        ClassName = "ddAddSampleTypeRequired",
        Visible = true,
        ValidationSetting = new ValidatorSettings
        {
            ValidationRuleTypes = VaildationRuleType.ValidationRuleType.REQUIRED,
            ValidatorMessage = "Field is required."
        },
        ControlAjaxDataUrl = Url.Action("BaseReferenceByReferenceTypeIDListForSelect2DropDownWithSorting", "CrossCutting", new {Area = "CrossCutting", referenceTypeID = 19000087, sortColumn = "intOrder"})
    });
    Model.eIDSSModalConfiguration.Add(eIDSSModalConfiguration);

    //SET UP MODAL2 AddVectorType
    eIDSSModalConfiguration = new EIDSSModalConfiguration
    {
        ControlLabels =
        {
            ModalTitle = Localizer.GetString(HeadingResourceKeyConstants.VectorTypeDetailsModalHeading),
            SaveButtonLabel = Localizer.GetString(ButtonResourceKeyConstants.SaveButton),
            CancelButtonLabel = Localizer.GetString(ButtonResourceKeyConstants.CancelButton),
            CloseButtonLabel = Localizer.GetString(ButtonResourceKeyConstants.CancelButton),
            SuccessModalTitle = Localizer.GetString(HeadingResourceKeyConstants.EIDSSModalHeading),
            SuccessMessage = Localizer.GetString(MessageResourceKeyConstants.RecordSubmittedSuccessfullyMessage),
            OkButtonLabel = Localizer.GetString(ButtonResourceKeyConstants.OKButton)
        },
        ModalId = "VectorTypeSave",
        TargetGridControlID = "VectorTypeList", //ID of Grid to Refresh
        PostAjaxDataUrl = Url.Action("AddVectorType", "VectorTypeSampleTypeMatrixPage"),
        SaveCompleteMethod = "CheckSuccessAddVectorType"
    };
    eIDSSModalConfiguration.ControlNames.Add(new EIDSSControlNames
    {
        LabelNameForControl = Localizer.GetString(FieldLabelResourceKeyConstants.DefaultValueFieldLabel),
        ControlName = "Name",
        Visible = true,
        ValidationSetting = new ValidatorSettings
        {
            ValidationRuleTypes = VaildationRuleType.ValidationRuleType.REQUIRED,
            ValidatorMessage = Localizer.GetString(MessageResourceKeyConstants.FieldIsRequiredMessage)
        },
        ClassName = "DefaultValueRequired"
    });
    eIDSSModalConfiguration.ControlNames.Add(new EIDSSControlNames
    {
        LabelNameForControl = Localizer.GetString(FieldLabelResourceKeyConstants.NationalValueFieldLabel),
        ControlName = "Default",
        Visible = true,
        ValidationSetting = new ValidatorSettings
        {
            ValidationRuleTypes = VaildationRuleType.ValidationRuleType.REQUIRED,
            ValidatorMessage = Localizer.GetString(MessageResourceKeyConstants.FieldIsRequiredMessage)
        },
        ClassName = "NationalValueRequired"
    });
    eIDSSModalConfiguration.ControlNames.Add(new EIDSSControlNames
    {
        LabelNameForControl = Localizer.GetString(FieldLabelResourceKeyConstants.CodeFieldLabel),
        ControlName = "Code",
        Visible = true
    });
    eIDSSModalConfiguration.ControlNames.Add(new EIDSSControlNames
    {
        LabelNameForControl = Localizer.GetString(FieldLabelResourceKeyConstants.OrderFieldLabel),
        ControlName = "Order",
        ControlType = ControlType.Numeric,
        ValidationSetting = new ValidatorSettings
        {
            ValidationRuleTypes = VaildationRuleType.ValidationRuleType.RANGE,
            ValidatorMessage = "Number is Out Of Range",
            ValidationRule = "[-2147483648,2147483647]"
        },
        ClassName = "IntOrderRange",
        Visible = true
    });

    var yesNoOptions = new List<RadionCheckBoxOptions>
    {
        new() {Value = "1", Key = "", IsChecked = false}
    };
    eIDSSModalConfiguration.ControlNames.Add(new EIDSSControlNames
    {
        ControlName = "CollectedByPool",
        ControlType = ControlType.CheckBox,
        RadioCheckBoxOptions = yesNoOptions,
        LabelNameForControl = Localizer.GetString(FieldLabelResourceKeyConstants.CollectedByPoolFieldLabel)
    });
    Model.eIDSSModalConfiguration.Add(eIDSSModalConfiguration);

    //SET UP MODAL3 AddSampleType
    eIDSSModalConfiguration = new EIDSSModalConfiguration
    {
        ControlLabels =
        {
            ModalTitle = Localizer.GetString(HeadingResourceKeyConstants.SampleTypeDetailsModalHeading),
            SaveButtonLabel = Localizer.GetString(ButtonResourceKeyConstants.SaveButton),
            CancelButtonLabel = Localizer.GetString(ButtonResourceKeyConstants.CancelButton),
            CloseButtonLabel = Localizer.GetString(ButtonResourceKeyConstants.CancelButton),
            //success modal configs
            SuccessModalTitle = Localizer.GetString(HeadingResourceKeyConstants.EIDSSModalHeading),
            SuccessMessage = Localizer.GetString(MessageResourceKeyConstants.RecordSavedSuccessfullyMessage),
            OkButtonLabel = Localizer.GetString(ButtonResourceKeyConstants.OKButton)
        },
        ModalId = "AddSampleType",
        TargetGridControlID = "VectorTypeSampleTypeMatrixList", //ID of Grid to Refresh
        PostAjaxDataUrl = Url.Action("AddSampleType", "VectorTypeSampleTypeMatrixPage"),
        SaveCompleteMethod = "CheckSuccessAddSampleType"
    };
    eIDSSModalConfiguration.ControlNames.Add(new EIDSSControlNames
    {
        VaildationProperty = VaildationRuleType.ValidationRuleType.REQUIRED,
        LabelNameForControl = Localizer.GetString(FieldLabelResourceKeyConstants.DefaultValueFieldLabel),
        ControlName = "StrDefault",
        Visible = true,
        ValidationSetting = new ValidatorSettings
        {
            ValidationRuleTypes = VaildationRuleType.ValidationRuleType.REQUIRED,
            ValidatorMessage = Localizer.GetString(MessageResourceKeyConstants.FieldIsRequiredMessage)
        },
        ClassName = "DefaultValueRequired"
    });
    eIDSSModalConfiguration.ControlNames.Add(new EIDSSControlNames
    {
        VaildationProperty = VaildationRuleType.ValidationRuleType.REQUIRED,
        LabelNameForControl = Localizer.GetString(FieldLabelResourceKeyConstants.NationalValueFieldLabel),
        ControlName = "StrName",
        Visible = true,
        ValidationSetting = new ValidatorSettings
        {
            ValidationRuleTypes = VaildationRuleType.ValidationRuleType.REQUIRED,
            ValidatorMessage = Localizer.GetString(MessageResourceKeyConstants.FieldIsRequiredMessage)
        },
        ClassName = "DefaultValueRequired"
    });
    eIDSSModalConfiguration.ControlNames.Add(new EIDSSControlNames
    {
        LabelNameForControl = Localizer.GetString(FieldLabelResourceKeyConstants.CodeFieldLabel),
        ControlName = "StrSampleCode",
        Visible = true
    });
    eIDSSModalConfiguration.ControlNames.Add(new EIDSSControlNames
    {
        VaildationProperty = VaildationRuleType.ValidationRuleType.REQUIRED,
        LabelNameForControl = Localizer.GetString(FieldLabelResourceKeyConstants.AccessoryCodeFieldLabel),
        ControlName = "IntHACode",
        ControlType = ControlType.DropDown,
        AllowMultipleDropDownItemSelection = true,
        //ClassName = "modalDropDown",
        Visible = true,
        ValidationSetting = new ValidatorSettings
        {
            ValidationRuleTypes = VaildationRuleType.ValidationRuleType.REQUIRED,
            ValidatorMessage = Localizer.GetString(MessageResourceKeyConstants.FieldIsRequiredMessage)
        },
        ClassName = "DefaultValueRequired",
        ControlAjaxDataUrl = Url.Action("BaseReferenceByReferenceTypeIDListForSelect2DropDown", "CrossCutting", new {Area = "CrossCutting", referenceTypeID = (long) ReferenceTypes.AccessoryCode, intHACode = 226})
    });
    eIDSSModalConfiguration.ControlNames.Add(new EIDSSControlNames
    {
        LabelNameForControl = Localizer.GetString(FieldLabelResourceKeyConstants.OrderFieldLabel),
        ControlName = "IntOrder",
        ControlType = ControlType.Numeric,
        ValidationSetting = new ValidatorSettings
        {
            ValidationRuleTypes = VaildationRuleType.ValidationRuleType.RANGE,
            ValidatorMessage = Localizer.GetString(MessageResourceKeyConstants.NumberIsOutOfRangeMessage),
            ValidationRule = "[-2147483648,2147483647]"
        },
        ClassName = "IntOrderRange",
        Visible = true
    });
    Model.eIDSSModalConfiguration.Add(eIDSSModalConfiguration);

    //SETUP GRID
    Model.eidssGridConfiguration.GridClass = "table table-sm table-striped";
    Model.eidssGridConfiguration.GridId = "VectorTypeSampleTypeMatrixGrid";
    Model.eidssGridConfiguration.ControlFilterID = "VectorTypeDDD";
    Model.eidssGridConfiguration.AjaxDataUrl = Url.Action("GetList", "VectorTypeSampleTypeMatrixPage");
    Model.eidssGridConfiguration.EditModalAjaxUrl = Url.Action("Edit", "VectorTypeSampleTypeMatrixPage");
    Model.eidssGridConfiguration.DeleteModalAjaxUrl = Url.Action("Delete", "VectorTypeSampleTypeMatrixPage");
    Model.eidssGridConfiguration.DeleteCompleteMethod = "CheckDeleteSuccess";
    Model.eidssGridConfiguration.EnableServerSide = true;
    // Model.eidssGridConfiguration.EnableProcessingMessage = true;
    Model.eidssGridConfiguration.ControlLabels = new EIDSSControlLabels
    {
        DeleteModalMessage = Localizer.GetString(MessageResourceKeyConstants.DoYouWantToDeleteThisRecordMessage),
        DeleteModalTitle = Localizer.GetString(HeadingResourceKeyConstants.EIDSSModalHeading),
        EditModalTitle = Localizer.GetString((int) InterfaceEditorResourceSetEnum.CommonHeadings + "Edit Record" + (long) InterfaceEditorTypeEnum.Heading),
        CancelButtonLabel = Localizer.GetString(ButtonResourceKeyConstants.CancelButton),
        SaveButtonLabel = Localizer.GetString(ButtonResourceKeyConstants.OKButton),
        DeleteButtonLabel = Localizer.GetString(ButtonResourceKeyConstants.DeleteButton),
        CloseButtonLabel = Localizer.GetString(ButtonResourceKeyConstants.CloseButton),
        YesButtonLabel = Localizer.GetString(ButtonResourceKeyConstants.YesButton),
        NoButtonLabel = Localizer.GetString(ButtonResourceKeyConstants.NoButton)
    };
    Model.eidssGridConfiguration.ColumnNames.Add(new EIDSSColumnNames
    {
        ColumnTitleHeader = Localizer.GetString(ColumnHeadingResourceKeyConstants.RowColumnHeading),
        ColumnName = "row",
        Visible = true,
        ColumnType = ColumnType.Default,
        VisibleInModal = false
    });
    Model.eidssGridConfiguration.ColumnNames.Add(new EIDSSColumnNames
    {
        ColumnTitleHeader = "idfsSampleTypeForVectorType",
        ColumnName = "KeyId",
        Visible = false,
        ColumnType = ColumnType.Default,
        VisibleInModal = false
    });
    Model.eidssGridConfiguration.ColumnNames.Add(new EIDSSColumnNames
    {
        ColumnTitleHeader = "idfsVectorType",
        ColumnName = "idfsVectorType",
        Visible = false,
        ColumnType = ColumnType.Default,
        VisibleInModal = false
    });
    Model.eidssGridConfiguration.ColumnNames.Add(new EIDSSColumnNames
    {
        ColumnTitleHeader = "idfsSampleType",
        ColumnName = "idfsSampleType",
        Visible = false,
        ColumnType = ColumnType.Default,
        VisibleInModal = false
    });
    Model.eidssGridConfiguration.ColumnNames.Add(new EIDSSColumnNames
    {
        ColumnTitleHeader = Localizer.GetString(ColumnHeadingResourceKeyConstants.SampleTypeColumnHeading),
        ColumnName = "strSampleTypeName",
        ColumnType = ColumnType.Default,
        Visible = true,
        Orderable = true
    });
    Model.eidssGridConfiguration.ColumnNames.Add(new EIDSSColumnNames
    {
        ColumnTitleHeader = string.Empty,
        ColumnName = "name",
        ColumnType = ColumnType.Delete,
        Visible = Model.UserPermissions.Delete
    });
}
<div class="modal fade" id="duplicatesModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel"> @Localizer.GetString(HeadingResourceKeyConstants.EIDSSModalHeading)</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <span id="dupemsg"></span>
                @*@Localizer.GetString(MessageResourceKeyConstants.DuplicateReferenceValueMessage);*@
            </div>
            <div class="modal-footer">
                <button id="editRecordButton" class="btn btn-primary" onclick="EditDuplicateRecord('AddVectorTypeSampleType');">@Localizer.GetString(ButtonResourceKeyConstants.OKButton)</button>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="duplicatesModalAddVectorType" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel"> @Localizer.GetString(HeadingResourceKeyConstants.EIDSSModalHeading)</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <span id="dupemsgAddVectorType"></span>
                @*@Localizer.GetString(MessageResourceKeyConstants.DuplicateReferenceValueMessage);*@
            </div>
            <div class="modal-footer">
                <button id="editRecordButton" class="btn btn-primary" onclick="EditDuplicateRecord('AddVectorType');">@Localizer.GetString(ButtonResourceKeyConstants.OKButton)</button>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="duplicatesModalAddSampleType" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel"> @Localizer.GetString(HeadingResourceKeyConstants.EIDSSModalHeading)</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <span id="dupemsgAddSampleType"></span>
                @*@Localizer.GetString(MessageResourceKeyConstants.DuplicateReferenceValueMessage);*@
            </div>
            <div class="modal-footer">
                <button id="editRecordButton" class="btn btn-primary" onclick="EditDuplicateRecord('AddSampleType');">@Localizer.GetString(ButtonResourceKeyConstants.OKButton)</button>
            </div>
        </div>
    </div>
</div>

<partial name="_ConfigurationPartial"/>
<partial name="_InformationalModalPartial" for="InformationMessage"/>

@section Scripts
{
    <script>

        ///Load Default Data
        $(document).ready(function() {
            $("#AddBaseReferencectrlAdd_2").val(0);
            $("#AddBaseReferenceButton").prop('disabled', true);
        });

        // Method called after execution of Save Method Returns Data back from the controller
        function CheckSuccess(data) {
            var stringifiedData = JSON.stringify(data);
            var parsedData = JSON.parse(stringifiedData);
            if (parsedData.returnMessage == "SUCCESS") {
                $("#AddVectorTypeSampleTypeMatrixSuccessModal").modal("show");
                updateNotificationEnvelopeCount();
            }
            if (parsedData.returnMessage == "DOES EXIST") {
                $("#AddVectorTypeSampleTypeMatrix").css('z-index', 2000);
                $("#dupemsg").html(parsedData.strDuplicatedField);
                $("#duplicatesModal").modal("show");

            }
        };
        
                function CheckDeleteSuccess(data) {
            var stringifiedData = JSON.stringify(data);
            var parsedData = JSON.parse(stringifiedData);
            if (parsedData.returnMessage === "SUCCESS") {
                updateNotificationEnvelopeCount();
                showInformationalModal('@Localizer.GetString(MessageResourceKeyConstants.RecordDeletedSuccessfullyMessage)');
            }
        };

        function CheckSuccessAddVectorType(data) {
            var stringifiedData = JSON.stringify(data);
            var parsedData = JSON.parse(stringifiedData);
            if (parsedData.returnMessage == "SUCCESS") {
                $("#AddVectorTypeSampleTypeMatrixSuccessModal").modal("show");
                updateNotificationEnvelopeCount();
            }
            if (parsedData.returnMessage == "DOES EXIST") {
                $("#dupemsgAddVectorType").html(parsedData.strDuplicatedField);
                $("#duplicatesModalAddVectorType").modal("show");
            }
        };

        function CheckSuccessAddSampleType(data) {
            var stringified_data = JSON.stringify(data);
            var parsed_data = JSON.parse(stringified_data);
            if (parsed_data.returnMessage == "SUCCESS") {
                $("#AddVectorTypeSampleTypeMatrixSuccessModal").modal("show");
                updateNotificationEnvelopeCount();
            }
            if (parsed_data.returnMessage == "DOES EXIST") {
                $("#dupemsgAddSampleType").html(parsed_data.strDuplicatedField);
                $("#duplicatesModalAddSampleType").modal("show");
            }
        };

        function EditDuplicateRecord(modelType) {
            switch (modelType) {
            case "AddVectorType":
                $("#AddVectorTypeSampleTypeMatrixSuccessModal").modal("hide");
                $("#duplicatesModalAddVectorType").modal("hide");
                $("#VectorTypeSave").modal("show");
                break;
            case "AddSampleType":
                $("#AddVectorTypeSampleTypeMatrixSuccessModal").modal("hide");
                $("#duplicatesModalAddSampleType").modal("hide");
                $("#AddSampleType").modal("show");
                break;
            default:
                $("#AddVectorTypeSampleTypeMatrixSuccessModal").modal("hide");
                $("#duplicatesModal").modal("hide");
                $("#AddVectorTypeSampleTypeMatrix").modal("show");
                break;
            }
        };

        // DropDownChange // Note There is A DropDownChange Event
        function ChangeAddButtonActiveStatus(data) {
            switch (parseInt(data.id)) {
            case 19000140:
                $("#AddVectorTypeSampleTypeMatrixButton").prop('disabled', true);
                break;
            default:
                $("#AddVectorTypeSampleTypeMatrixButton").prop('disabled', false);
            }
        };

        // Styling to handle stacked modals for the modals.
        $(document).on("show.bs.modal",
            ".modal",
            function(event) {
                var zIndex = 1040 + (10 * $(".modal:visible").length);
                $(this).css("z-index", zIndex);
                setTimeout(function() {
                        $(".modal-backdrop").not(".modal-stack").css("z-index", zIndex - 1).addClass("modal-stack");
                    },
                    0);
            });

        // When Drop Down Items Are Cleared
        function SelectOnClear(data) {
            $("#AddVectorTypeSampleTypeMatrixButton").prop('disabled', true);
        };
    </script>
}