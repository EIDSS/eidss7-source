@model EIDSS.Web.Areas.Administration.ViewModels.Organization.DepartmentsSectionViewModel
@{
    Model.DepartmentsGridConfiguration = new EIDSSGridConfiguration
    {
        GridId = "departmentsTable",
        GridClass = "table table-sm table-striped",
        EnableServerSide = false,
        EnableCustomSearching = false,
        EnableSearching = true,
        EnableProcessingMessage = true,
        sDom = "t",
        ControlLabels =
        {
            DeleteModalMessage = Localizer.GetString(MessageResourceKeyConstants.DoYouWantToDeleteThisRecordMessage),
            YesButtonLabel = Localizer.GetString(ButtonResourceKeyConstants.YesButton),
            NoButtonLabel = Localizer.GetString(ButtonResourceKeyConstants.NoButton),
            DeleteModalTitle = Localizer.GetString(HeadingResourceKeyConstants.EIDSSModalHeading)
        },
        DeleteModalAjaxUrl = Url.Action("DeleteDepartment", "OrganizationDetails", new {Area = "Administration"}),
        DeleteCompleteMethod = "deleteDepartment"
    };
    Model.DepartmentsGridConfiguration.ColumnNames.Add(new EIDSSColumnNames {ColumnName = "DepartmentID", ColumnTitleHeader = "Department ID", ColumnType = ColumnType.Default, Searchable = true, Visible = false});
    Model.DepartmentsGridConfiguration.ColumnNames.Add(new EIDSSColumnNames {ColumnName = "DepartmentNameDefaultValue", ColumnTitleHeader = Localizer.GetString(ColumnHeadingResourceKeyConstants.DefaultValueColumnHeading), ColumnType = ColumnType.Default, Orderable = true, Searchable = true, Visible = true});
    Model.DepartmentsGridConfiguration.ColumnNames.Add(new EIDSSColumnNames {ColumnName = "DepartmentNameNationalValue", ColumnTitleHeader = Localizer.GetString(ColumnHeadingResourceKeyConstants.NationalValueColumnHeading), ColumnType = ColumnType.Default, Orderable = true, Searchable = true, Visible = true});
    Model.DepartmentsGridConfiguration.ColumnNames.Add(new EIDSSColumnNames {ColumnName = "Order", ColumnTitleHeader = Localizer.GetString(ColumnHeadingResourceKeyConstants.OrderColumnHeading), ColumnType = ColumnType.Default, Orderable = true, Searchable = true, Visible = true});
    Model.DepartmentsGridConfiguration.ColumnNames.Add(new EIDSSColumnNames {ColumnName = "RowStatus", ColumnTitleHeader = "Row Status", ColumnType = ColumnType.Default, Visible = false});
    Model.DepartmentsGridConfiguration.ColumnNames.Add(new EIDSSColumnNames {ColumnName = "RowAction", ColumnTitleHeader = "Row Action", ColumnType = ColumnType.Default, Visible = false});
    Model.DepartmentsGridConfiguration.ColumnNames.Add(new EIDSSColumnNames {ColumnName = "DepartmentID", ColumnTitleHeader = "", ColumnType = ColumnType.CustomModal, CustomModalID = "departmentDetailsModal", CustomIconClass = "fas fa-edit fa-lg", ClientFunction = "setRowIdentifier", Visible = Model.OrganizationAccessRightsUserPermissions.Write});
    Model.DepartmentsGridConfiguration.ColumnNames.Add(new EIDSSColumnNames {ColumnName = "DepartmentID", ColumnTitleHeader = "", ColumnType = ColumnType.Remove, Visible = Model.OrganizationAccessRightsUserPermissions.Delete});
}
<div id="departmentForm">
    <div class="container-fluid">
        <div class="form-row">
            <div class="col-md-11">
                <h4 heading-for="@HeadingResourceKeyConstants.DepartmentsHeading"></h4>
            </div>
            <div class="col-md-1 text-right">
                <a id="editDepartmentsSectionButton" href="#organizationWizard-h-1" class="edit-section">
                    <span class="fas fa-edit fa-lg"></span>
                </a>
            </div>
        </div>
        <div class="form-row">
            <div class="col-md-12 text-right">
                <button id="addDepartment" type="button" class="btn btn-outline-primary" onclick="addDepartment();" button-for="@ButtonResourceKeyConstants.AddButton"></button>
            </div>
        </div>
        <div class="form-row">
            <div class="col-12">
                <eidss-grid id="@Model.DepartmentsGridConfiguration.GridId"
                            grid-configuration="@Model.DepartmentsGridConfiguration"
                            enable-server-side="@Model.DepartmentsGridConfiguration.EnableServerSide"
                            enable-processing="@Model.DepartmentsGridConfiguration.EnableProcessingMessage"
                            enable-top-header-search-button="@Model.DepartmentsGridConfiguration.EnableCustomSearching"
                            enable-search="@Model.DepartmentsGridConfiguration.EnableSearching"
                            class-name="@Model.DepartmentsGridConfiguration.GridClass"
                            end-point="@Model.DepartmentsGridConfiguration.AjaxDataUrl"
                            filtered-control-ids="@Model.DepartmentsGridConfiguration.ControlFilterID"
                            control-labels="@Model.DepartmentsGridConfiguration.ControlLabels">
                </eidss-grid>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="departmentDetailsModal" tabindex="-1" role="dialog" aria-labelledby="departmentDetailsModal" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="departmentDetailsModalHeader" heading-for="@HeadingResourceKeyConstants.DepartmentDetailsModalHeading"></h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="departmentDetailsForm">
                    <input type="hidden" asp-for="DepartmentDetails.DepartmentID"/>
                    <div class="row">
                        <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                            <i class="fas fa-asterisk text-danger"></i>
                            <label field-label-for="@FieldLabelResourceKeyConstants.DefaultValueFieldLabel"></label>
                            <input asp-for="DepartmentDetails.DefaultName" class="form-control"/>
                            <span asp-validation-for="DepartmentDetails.DefaultName" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                            <i class="fas fa-asterisk text-danger" required-if="@FieldLabelResourceKeyConstants.NationalValueFieldLabel"></i>
                            <label field-label-for="@FieldLabelResourceKeyConstants.NationalValueFieldLabel"></label>
                            <input asp-for="DepartmentDetails.NationalName" class="form-control"/>
                            <span asp-validation-for="DepartmentDetails.NationalName" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                            <i class="fas fa-asterisk text-danger" required-if="@FieldLabelResourceKeyConstants.OrderFieldLabel"></i>
                            <label field-label-for="@FieldLabelResourceKeyConstants.OrderFieldLabel"></label>
                            <input asp-for="DepartmentDetails.Order" class="form-control" type="number"/>
                            <span asp-validation-for="DepartmentDetails.Order" class="text-danger"></span>
                        </div>
                    </div>
                    <input id="organizationIDHidden" type="hidden" value="@Model.DepartmentDetails.OrganizationID"/>
                </form>
            </div>
            <div class="modal-footer">
                <button id="cancelDepartmentDetails" type="button" class="btn btn-outline-primary" button-for="@ButtonResourceKeyConstants.CancelButton" onclick="cancelDepartmentDetails('@Localizer.GetString(MessageResourceKeyConstants.DoYouWantToCancelMessage)', event);"></button>
                <button if="saveDepartment" type="button" class="btn btn-primary" onclick="saveDepartment();" button-for="@ButtonResourceKeyConstants.SaveButton"></button>
            </div>
        </div>
    </div>
</div>
<script type="text/javascript">
    function initializeDepartmentsSection() {
        $.ajax({
            url: '@Url.Action("GetDepartmentList", "OrganizationDetails", new {Area = "Administration", SubArea = ""})',
            data: $("#organizationIDHidden").val(),
            contentType: "application/json",
            type: "POST",
            success: function(response) {
                // Add the data retrieved from the database, if any.
                $("#departmentsTable").DataTable().rows.add(response.data).draw();
            },
            error: function(response) { alert("An error occurred: " + response); }
        });
    };

    function addDepartment() {
        $("#departmentDetailsModal").modal("show");
        $("#DepartmentsSection_DepartmentDetails_DepartmentID").val((($("#departmentsTable").DataTable().rows().count() + 1) * -1));
        $("#DepartmentsSection_DepartmentDetails_DefaultName").val("");
        $("#DepartmentsSection_DepartmentDetails_NationalName").val("");
        $("#DepartmentsSection_DepartmentDetails_Order").val("");

    };

    //
    // Validates there are no duplicate departments for the same organization record.
    //
    function validateDuplicateDepartments(departments, newDepartmentDefaultValue, departmentId) {
        var departmentsArray = departments.sort();
        
        if (departmentsArray.length > 0) {
            for (var i = 0; i < departmentsArray.length; i++) {
                var existingDepartmentId = departmentsArray[i][0];
                var existingDepartmentDefaultValue = departmentsArray[i][1];

                if (existingDepartmentId != departmentId && newDepartmentDefaultValue == existingDepartmentDefaultValue) {
                    var message = '@Localizer.GetString(MessageResourceKeyConstants.DuplicateValueMessage)';
                    showErrorModal(message.format(departmentsArray[i][1]));

                    return false;
                }
            }
        }

        return true;
    };

    //
    // Sets the department ID to load the corresponding fields for the selected record.
    //
    function setRowIdentifier(identifier) {
        var selectedRowData;
        $("#departmentsTable").DataTable().rows(function(idx, data, node) {
            if (data[0] == identifier[0]) {
                selectedRowData = data;
            }

            return false;
        });

        $("#DepartmentsSection_DepartmentDetails_DepartmentID").val(identifier[0]);
        $("#DepartmentsSection_DepartmentDetails_DefaultName").val(selectedRowData[1]);
        $("#DepartmentsSection_DepartmentDetails_NationalName").val(selectedRowData[2]);
        $("#DepartmentsSection_DepartmentDetails_Order").val(selectedRowData[3]);
    };

    function cancelDepartmentDetails(message, event) {
        event.preventDefault();

        showWarningModal(message).then(response => {
            if (response) {
                $("#warningModal").modal("hide");
                $("#departmentDetailsModal").modal("hide");
                $(".modal-backdrop").remove();
            }
        });
    };

    //
    // Response from ajax call for delete.
    //
    function deleteDepartment(response) {
        var rowIndex;
        $("#departmentsTable").DataTable().rows(function(idx, data, node) {
            if (data[0] == response.DepartmentID) {
                rowIndex = idx;
            }

            return false;
        });

        var row = $("#departmentsTable").DataTable().rows(rowIndex);
        if (response.DepartmentID < 0) {
            $("#departmentsTable").DataTable().row(rowIndex).remove().draw();
        } else {
            row.data()[0][4] = '@Convert.ToInt64(RowStatusTypes.Inactive)';
            row.data()[0][5] = "D";
            row.nodes().to$().attr("excluded", "true");
            $("#departmentsTable").DataTable().row(row).invalidate().draw();
        }
    };

    // Filters the departments table to only show the departments for active records, in the event the user
    // confirmed a record deletion that is pending save to the database.
    $.fn.dataTable.ext.search.push(function(settings, data, dataIndex) {
        if ($("#departmentsTable").DataTable() != undefined)
            return $("#departmentsTable").DataTable().row(dataIndex).nodes().to$().attr("excluded") != "true";
    });

    //
    // Adds a new department record to the data table.
    //
    function saveDepartment() {
        $("departmentDetailsForm").validate();

        if ($("#departmentDetailsForm").valid()) {
            if (validateDuplicateDepartments($("#departmentsTable").DataTable().data(), $("#DepartmentsSection_DepartmentDetails_DefaultName").val().toString(), $("#DepartmentsSection_DepartmentDetails_DepartmentID").val().toString())) {
                var department = new Object();
                department.DepartmentID = $("#DepartmentsSection_DepartmentDetails_DepartmentID").val();
                department.DefaultName = $("#DepartmentsSection_DepartmentDetails_DefaultName").val();
                department.NationalName = $("#DepartmentsSection_DepartmentDetails_NationalName").val();
                department.Order = $("#DepartmentsSection_DepartmentDetails_Order").val();
                department.RowStatus = '@Convert.ToInt64(RowStatusTypes.Active)';

                var rowIndex;
                $("#departmentsTable").DataTable().rows(function(idx, data, node) {
                    if (data[0] == department.DepartmentID) {
                        rowIndex = idx;
                    }

                    return false;
                });

                var row;
                if (rowIndex >= 0)
                    row = $("#departmentsTable").DataTable().rows(rowIndex);

                if (department.DepartmentID < 0) {
                    if (row) {
                        row.data()[0][1] = department.DefaultName;
                        row.data()[0][2] = department.NationalName;
                        row.data()[0][3] = department.Order;
                        row.data()[0][4] = '@Convert.ToInt64(RowStatusTypes.Active)';
                        row.data()[0][5] = "I";
                        $("#departmentsTable").DataTable().row(row).invalidate().draw();
                    } else {
                        department.RowAction = "I";
                        $("#departmentsTable").DataTable().row.add([department.DepartmentID, department.DefaultName, department.NationalName, department.Order, department.RowStatus, department.RowAction, department.DepartmentID, department.DepartmentID]).draw();
                    }
                } else {
                    row.data()[0][1] = department.DefaultName;
                    row.data()[0][2] = department.NationalName;
                    row.data()[0][3] = department.Order;
                    row.data()[0][4] = '@Convert.ToInt64(RowStatusTypes.Active)';
                    row.data()[0][5] = "U";
                    $("#departmentsTable").DataTable().row(row).invalidate().draw();
                }

                $("#departmentDetailsModal").modal("hide");
                $("#DepartmentsSection_DepartmentDetails_DefaultName").val("");
                $("#DepartmentsSection_DepartmentDetails_NationalName").val("");
                $("#DepartmentsSection_DepartmentDetails_Order").val("");

                showInformationalModal('@Localizer.GetString(MessageResourceKeyConstants.RecordSubmittedSuccessfullyMessage)');
            }
        }
    };
</script>