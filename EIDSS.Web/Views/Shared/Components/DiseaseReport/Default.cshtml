@model EIDSS.Web.ViewModels.Human.DiseaseReportComponentViewModel
@using EIDSS.Web.Components.CrossCutting;
@using static EIDSS.ClientLibrary.Enumerations.EIDSSConstants;
@using EIDSS.Web.Components.Human.HumanDiseaseReport;
@using Microsoft.AspNetCore.Mvc.TagHelpers

<partial name="_ErrorModalPartial" />
<partial name="_InformationalModalPartial" , model="string.Empty" />
<partial name="_WarningModalPartial" />
<partial name="_SuccessDuplicateModalPartial" />
<script>
    PersonInfoSection = {};
    DetailsFacilitySection = {};
    DiseaseReportSymptomsSection = {};
    DiseaseReportCaseInvestigationSection = {};
    DiseaseReportRiskFactorsSection = {};
    NotificationSection = {};
    HumanDiseasePrintModal = {};
    SummarySection = {};
    PersonInfoSection.SetDotNetReference = function (pDotNetReference) {
        PersonInfoSection.DotNetReference = pDotNetReference;
    };
    DetailsFacilitySection.SetDotNetReference = function (pDotNetReference) {
        DetailsFacilitySection.DotNetReference = pDotNetReference;
    };
    DiseaseReportSymptomsSection.SetDotNetReference = function (pDotNetReference) {
        DiseaseReportSymptomsSection.DotNetReference = pDotNetReference;
    };
    DiseaseReportCaseInvestigationSection.SetDotNetReference = function (pDotNetReference) {
        DiseaseReportCaseInvestigationSection.DotNetReference = pDotNetReference;
    };
    DiseaseReportRiskFactorsSection.SetDotNetReference = function (pDotNetReference) {
        DiseaseReportRiskFactorsSection.DotNetReference = pDotNetReference;
    };
    NotificationSection.SetDotNetReference = function (pDotNetReference) {
        NotificationSection.DotNetReference = pDotNetReference;
    };
    HumanDiseasePrintModal.SetDotNetReference = function (pDotNetReference) {
        HumanDiseasePrintModal.DotNetReference = pDotNetReference;
    };
    SummarySection.SetDotNetReference = function (pDotNetReference) {
        SummarySection.DotNetReference = pDotNetReference;
    };
</script>

@if (Model.PersonInfoSection.PermissionsAccessToPersonalData.Read)
{
    <div class="card">
        <div class="card-body">
            <component type="typeof(DiseaseReportSummaryPartial)" param-Model="@Model" render-mode="Server" />
        </div>
        <div class="card-body">
            <div id="diseaseReportWizard">
                <h4 heading-for="@HeadingResourceKeyConstants.HumanDiseaseReportPersonInformationHeading"></h4>
                <section id="PersonInfoSection">
                    <div id="DivPersonInfoSection">
                        <component type="typeof(DiseaseReportPersonalInformation)" param-Model="@Model.PersonInfoSection" param-IsReportClosed="@Model.IsReportClosed" render-mode="Server" />
                    </div>
                </section>
                <h4 heading-for="@HeadingResourceKeyConstants.HumanDiseaseReportNotificationHeading"></h4>
                <section id="NotificationSection">
                    <div id="DivNotificationSection">
                        <component type="typeof(DiseaseReportNotificationPartial)" param-model=@Model.NotificationSection render-mode="Server" />
                    </div>
                </section>
                <h4 heading-for="@HeadingResourceKeyConstants.HumanDiseaseReportClinicalInformationSymptomsHeading"></h4>
                <section id="SymptomsSection">
                    <div id="DivSymptomsSection">
                        <component type="typeof(DiseaseReportSymptomsPartial)" param-Model="@Model.SymptomsSection" render-mode="Server" />
                    </div>
                </section>
                <h4 heading-for="@HeadingResourceKeyConstants.HumanDiseaseReportClinicalInformationFacilityDetailsHeading"></h4>
                <section id="FacilityDetailsSection">
                    <div id="DivFacilityDetailsSection">
                        <component type="typeof(DiseaseReportFacilityDetailsPartial)" param-Model="@Model.FacilityDetailsSection" render-mode="Server" />
                    </div>
                </section>
                <h4 heading-for="@HeadingResourceKeyConstants.HumanDiseaseReportAntibioticAntiviralHistoryHeading"></h4>
                <section id="AntibioticVaccineHistorySection">
                    <div id="DivAntibioticVaccineHistorySection">
                        <component type="typeof(HumanDiseaseReportAntibioticVaccineHistory)" param-model=@Model.AntibioticVaccineHistorySection param-isEdit=@Model.isEdit param-IsReportClosed="@Model.IsReportClosed" render-mode="Server" />
                    </div>
                </section>
                <h4 heading-for="@HeadingResourceKeyConstants.HumanDiseaseReportSamplesHeading"></h4>
                <section id="SamplesSection">
                    <div id="DivSamplesSection">
                        <component type="typeof(DiseaseReportSample)" param-Model="@Model.SamplesSection" param-IsReportClosed="@Model.IsReportClosed" render-mode="Server" />
                    </div>
                </section>
                <h4 heading-for="@HeadingResourceKeyConstants.HumanDiseaseReportTestsHeading"></h4>
                <section id="TestSection">
                    <div id="DivTestSection">
                        <component type="typeof(DiseaseReportTest)" param-Model="@Model.TestsSection" param-IsReportClosed="@Model.IsReportClosed"
                                   param-CanAddTests="@(Model.SamplesSection.SamplesDetails.Count > 0)" render-mode="Server" />
                    </div>
                </section>
                <h4 heading-for="@HeadingResourceKeyConstants.HumanDiseaseReportCaseInvestigationDetailsHeading"></h4>
                <section id="CaseInvestigationSection">
                    <div id="DivCaseInvestigationSection">
                        <component type="typeof(DiseaseReportCaseInvestigation)" param-Model="@Model.CaseInvestigationSection" render-mode="Server" />
                    </div>
                </section>
                <h4 heading-for="@HeadingResourceKeyConstants.HumanDiseaseReportCaseInvestigationRiskFactorsHeading"></h4>
                <section id="RiskFactorsSection">
                    <div id="DivRiskFactorsSection">
                        <component type="typeof(DiseaseReportRiskFactorsPartial)" param-Model="@Model.RiskFactorsSection" render-mode="Server" />
                    </div>
                </section>
                <h4 heading-for="@HeadingResourceKeyConstants.HumanDiseaseReportContactsListHeading"></h4>
                <section id="ContactListSection">
                    <div id="DivContactListSection">
                        <component type="typeof(DiseaseReportContactList)" param-model=@Model.ContactListSection param-IsReportClosed="@Model.IsReportClosed" render-mode="Server" />
                    </div>
                </section>
                <h4 heading-for="@HeadingResourceKeyConstants.HumanDiseaseReportFinalOutcomeHeading"></h4>
                <input type="hidden" id="hdnFinalOutcome" value='@Model.FinalOutcomeSection' />
                <section id="FinalOutcomeSection">
                    <div id="DivFinalOutcomeSection">
                        <component type="typeof(DiseaseReportFinalOutcome)" param-model=@Model.FinalOutcomeSection param-idfDisease="@Model.FinalOutcomeSection.idfDisease" param-IsReportClosed="@Model.IsReportClosed" render-mode="Server" />
                    </div>
                </section>
                <h4 heading-for="@HeadingResourceKeyConstants.ReviewHeading"></h4>
                <section>
                </section>
            </div>
        </div>
    </div>
}
<div class="modal fade" id="DiseaseReportSuccessModal" tabindex="-1" role="dialog" aria-labelledby="warningModal" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="warningModalHeader">@HeadingResourceKeyConstants.EIDSSSuccessModalHeading</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-lg-1 col-md-1 col-sm-1 col-xs-1 text-right">
                        <span class="fas fa-info-circle fa-2x modal-icon"></span>
                    </div>
                    <div class="col-lg-11 col-md-11 col-sm-11 col-xs-11">
                        <p id="successMessage"></p>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button id="btnGoToDiseaseReport" type="button" class="btn btn-primary">@Localizer.GetString(ButtonResourceKeyConstants.HumanDiseaseReportReturntoDiseaseReportButtonText)</button>
                <button id="btnReturnToDashboard" type="button" class="btn btn-primary">@Localizer.GetString(ButtonResourceKeyConstants.HumanDiseaseReportReturntoDashboardButtonText)</button>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="DiseaseReportSuccessWHOExportModal" tabindex="-1" role="dialog" aria-labelledby="warningModal" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="warningModalHeader">@HeadingResourceKeyConstants.EIDSSSuccessModalHeading</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-lg-1 col-md-1 col-sm-1 col-xs-1 text-right">
                        <span class="fas fa-info-circle fa-2x modal-icon"></span>
                    </div>
                    <div class="col-lg-11 col-md-11 col-sm-11 col-xs-11">
                        <p id="successMessage"></p>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button id="btnGoToWHOExport" type="button" class="btn btn-primary">@Localizer.GetString(ButtonResourceKeyConstants.HumanExporttoCISIDReturntoWHOExportButtonText)</button>
                <button id="btnGoToDiseaseReport" type="button" class="btn btn-primary">@Localizer.GetString(ButtonResourceKeyConstants.HumanDiseaseReportReturntoDiseaseReportButtonText)</button>
                <button id="btnReturnToDashboard" type="button" class="btn btn-primary">@Localizer.GetString(ButtonResourceKeyConstants.HumanDiseaseReportReturntoDashboardButtonText)</button>
            </div>
        </div>
    </div>
</div>
<input type="hidden" id="hdnHumanActual" value="@Model.HumanActualID" />
<input type="hidden" id="hdnHumanID" value="@Model.HumanID" />
<input type="hidden" id="hdnHumanCase" value="@Model.idfHumanCase" />
<input type="hidden" id="hdnHumanStrCase" value="@Model.strCaseId" />
<input type="hidden" id="hdnGoToDiseaseReport" value="false" />
<input type="hidden" id="hdnPendingSaveNotifications" value="@Model.PendingSaveEvents" />
<input type="hidden" id="hdnParentMonitoringSession" value="@Model.ReportSummary.IdfSessionID" />
<input type="hidden" id="hdnConnectedTestId" value="@Model.ConnectedTestId" />
<input type="hidden" id="hdnReportedAge" value="@Model.PersonInfoSection.PersonInfo.ReportedAge" />
<input type="hidden" id="hdnReportedAgeUOMID" value="@Model.PersonInfoSection.PersonInfo.ReportedAgeUOMID" />

@{
    for (int i = 0; i < @Model.NotificationSection.EmployeeDetails.eIDSSModalConfiguration.Count(); i++)
    {
                    <eidss-reference-editors-modal control-labels="@Model.NotificationSection.EmployeeDetails.eIDSSModalConfiguration[i].ControlLabels" ajax-save-url="@Model.NotificationSection.EmployeeDetails.eIDSSModalConfiguration[i].PostAjaxDataUrl" modal-configuration="@Model.NotificationSection.EmployeeDetails.eIDSSModalConfiguration[i]" modal-id="@Model.NotificationSection.EmployeeDetails.eIDSSModalConfiguration[i].ModalId"></eidss-reference-editors-modal>
    }
}

<component type="typeof(HumanDiseasePrintModal)"
           param-contactPrintViewModel="@Model.DiseaseReportContactPrintViewModel"
           param-caseInvestigationPrintViewModel="@Model.DiseaseReportCaseInvestigationPrintViewModel"
           render-mode="Server" />

<script>
    ///Load Default Data
    $(document).ready(function () {
        localStorage.removeItem("vaccionationAntiViralTherapiesData");
        localStorage.removeItem("sampleModel");
        localStorage.removeItem("testModel");
        localStorage.removeItem("finalOutcomeModel");
        localStorage.removeItem("contactsModel");
    });

    function cancelDiseaseReportDetails(message, event) {
        showWarningModal(message).then(response => {
            if (response) {
                var idfHumanCase = $("#hdnHumanCase").val();
                var isEdit = '@Model.isEdit';
                if ('@Model.isEdit' && idfHumanCase.trim() != '') {
                    location.href = '@Url.Action("Index", "HumanDiseaseReport")';
                } else {
                    // Go back to the Person review page
                    var idfHumanActual = $("#hdnHumanActual").val();
                    location.href = '@Url.Action("DetailsReviewPage", "Person", new { area = "Human" })?id=' + idfHumanActual + '&reviewPageNo=3';
                }
            }
        });
    };

    function disableSaveButton(enableSave) {
        if (enableSave == "True") {
            $('#saveButton').removeClass("disabled").attr("aria-disabled", "false");
        } else {
            $('#saveButton').addClass("disabled").attr("aria-disabled", "true");
        }
    };

    function disableDeleteButton(enableDelete) {
        if (enableDelete == "True") {
            $('#deleteButton').removeClass("disabled").attr("aria-disabled", "false");
        } else {
            $('#deleteButton').addClass("disabled").attr("aria-disabled", "true");
        }
    };

    function disablePrintButton(enablePrint) {
        if (enablePrint == "True") {
            $('#printButton').removeClass("disabled").attr("aria-disabled", "false");
        } else {
            $('#printButton').addClass("disabled").attr("aria-disabled", "true");
        }
    };

    initializeSideBar_Immediate();

    function initializeSideBar_Immediate() {
        var stepsWizard = $("#diseaseReportWizard").steps({
            headerTag: "h4",
            titleTemplate: '<span id="erroredStep" class="fa-stack text-danger" title="#title#"><i class="fas fa-circle fa-stack-2x"></i><i class="fas fa-times fa-stack-1x fa-inverse"></i></span><span id="step" class="fa-stack text-muted" title="#title#"><i class="fas fa-circle fa-stack-2x"></i><i class="fas fa-check fa-stack-1x fa-inverse"></i></span><span id="completedStep" class="fa-stack text-success" title="#title#"><i class="fas fa-circle fa-stack-2x"></i><i class="fas fa-check fa-stack-1x fa-inverse"></i></span><span id="reviewStep" class="fa-stack text-muted" title="#title#"><i class="fas fa-circle fa-stack-2x"></i><i class="fas fa-clipboard-list fa-stack-1x fa-inverse"></i></span> <span class="stepTitleText">#title#</span>',
            bodyTag: "section",
            transitionEffect: "none",
            stepsOrientation: "vertical",
            startIndex: 0,
            enableAllSteps: true,
            enableCancelButton: true,
            enableKeyNavigation: false,
            enableDeleteButton: true,
            enablePrintButton: true,
            labels: {
                cancel: "@Localizer.GetString(ButtonResourceKeyConstants.CancelButton)",
                finish: "@Localizer.GetString(ButtonResourceKeyConstants.SaveButton)",
                next: "@Localizer.GetString(ButtonResourceKeyConstants.NextButton)",
                previous: "@Localizer.GetString(ButtonResourceKeyConstants.PreviousButton)",
                delete: "@Localizer.GetString(ButtonResourceKeyConstants.DeleteButton)",
                print: "@Localizer.GetString(ButtonResourceKeyConstants.PrintButton)",
                loading: "@Localizer.GetString(MessageResourceKeyConstants.PleaseWaitWhileWeProcessYourRequestMessage)"
            },
            onInit: function (event) {
                disableSaveButton('@Model.IsSaveEnabled');
                disableDeleteButton('@Model.isDeleteEnabled');
                disablePrintButton('@Model.isPrintEnabled');

                $("#diseaseReportWizard .steps ul").append('<li id="saveStep" role="tab"><a href="#" role="menuitem"><span class="fa-stack text-muted"><i class="fas fa-circle fa-stack-2x"></i><i class="fas fa-save fa-stack-1x fa-inverse"></i></span>  <span class="stepTitleText">@Localizer.GetString(@ButtonResourceKeyConstants.SaveButton)</span></a></li>');

                $(document).on('click', '#saveStep', function (e) {
                    e.preventDefault();
                    $("#diseaseReportWizard").steps("finish");
                });
            },
            onCanceled: function (event) {
                cancelDiseaseReportDetails('@Localizer.GetString(MessageResourceKeyConstants.DoYouWantToCancelChangesMessage)', event);
            },
            onStepChanging: function (event, currentIndex, newIndex) {
                switch (currentIndex) {
                    case 0:
                        PersonInfoSection.DotNetReference && PersonInfoSection.DotNetReference.invokeMethodAsync("ValidateSectionForSidebar").then(isPersonInfoValid => {
                            SummarySection.DotNetReference && SummarySection.DotNetReference.invokeMethodAsync("IsFormValid").then(isSummaryValid => {
                                if (isPersonInfoValid && isSummaryValid) {
                                    $("#diseaseReportWizard-t-0").find("#erroredStep").hide();
                                    $("#diseaseReportWizard-t-0").find("#completedStep").show();
                                } else {
                                    $("#diseaseReportWizard-t-0").find("#erroredStep").show();
                                    $("#diseaseReportWizard-t-0").find("#completedStep").hide();
                                }
                            });
                        });
                        return true;
                        break;
                    case 1:
                        var changedDiseaseId = $("#NotificationSection_ChangedDiseaseId").val();

                        if (changedDiseaseId) {
                            DiseaseReportSymptomsSection.DotNetReference.invokeMethodAsync("ReloadWithEmptyObservation", changedDiseaseId);
                            DiseaseReportRiskFactorsSection.DotNetReference.invokeMethodAsync("ReloadWithEmptyObservation", changedDiseaseId);
                        }
                        else {
                            var disease = $("#diseaseDD").val();

                            if (('"' + @Model.NotificationSection.idfDisease + '"') != '' && disease == '') {
                                disease = '@Model.NotificationSection.idfDisease';
                            }

                            DiseaseReportSymptomsSection.DotNetReference.invokeMethodAsync("ReloadSectionIfNeeded", disease);
                            DiseaseReportRiskFactorsSection.DotNetReference.invokeMethodAsync("ReloadSectionIfNeeded", disease);
                        }

                        NotificationSection.DotNetReference.invokeMethodAsync("ValidateSectionForSidebar").then(isFormValid => {
                            if (isFormValid) {
                                $("#diseaseReportWizard-t-1").find("#erroredStep").hide();
                                $("#diseaseReportWizard-t-1").find("#completedStep").show();
                            }
                        });
                        break;
                    case 2:
                        DiseaseReportSymptomsSection.DotNetReference.invokeMethodAsync("ValidateSectionForSidebar").then(isFormValid => {
                            if (isFormValid) {
                                $("#diseaseReportWizard-t-2").find("#erroredStep").hide();
                                $("#diseaseReportWizard-t-2").find("#completedStep").show();
                            }
                        });
                        break;
                    case 3:
                        DetailsFacilitySection.DotNetReference.invokeMethodAsync("ValidateSectionForSidebar").then(isFormValid => {
                            if (isFormValid) {
                                $("#diseaseReportWizard-t-3").find("#erroredStep").hide();
                                $("#diseaseReportWizard-t-3").find("#completedStep").show();
                            }
                        });
                        break;
                    case 4:
                        if ('@Model.StartIndex' == 1) {
                            $("#AntibioticVaccineHistoryForm").validate({
                                ignore: null
                            });
                            if ($("#AntibioticVaccineHistoryForm").valid()) {
                                return true;
                            }
                        } else {
                            return true;
                        }

                        break;
                    case 5:
                        if ('@Model.StartIndex' == 1) {
                            $("#DiseaseReportSamplesForm").validate({
                                ignore: null
                            });
                            if ($("#DiseaseReportSamplesForm").valid()) {
                                return true;
                            }
                        } else {
                            return true;
                        }
                        break;
                    case 6:
                        if ('@Model.StartIndex' == 1) {
                            $("#DiseaseReportTestsForm").validate({
                                ignore: null
                            });
                            if ($("#DiseaseReportTestsForm").valid()) {
                                return true;
                            }
                        } else {
                            return true;
                        }
                        break;
                    case 7:
                        DiseaseReportCaseInvestigationSection.DotNetReference.invokeMethodAsync("ValidateSectionForSidebar").then(isFormValid => {
                            if (isFormValid) {
                                $("#diseaseReportWizard-t-7").find("#erroredStep").hide();
                                $("#diseaseReportWizard-t-7").find("#completedStep").show();
                            }
                        });
                        return false;
                        break;
                    case 8:
                        DiseaseReportRiskFactorsSection.DotNetReference.invokeMethodAsync("ValidateSectionForSidebar").then(isFormValid => {
                            if (isFormValid) {
                                $("#diseaseReportWizard-t-8").find("#erroredStep").hide();
                                $("#diseaseReportWizard-t-8").find("#completedStep").show();
                            }
                        });
                        break;
                    case 9:
                        if ('@Model.StartIndex' == 1) {
                            $("#DiseaseReportContactListForm").validate({
                                ignore: null
                            });
                            if ($("#DiseaseReportContactListForm").valid()) {
                                return true;
                            }
                        } else
                            return true;
                        break;

                    case 10:
                        var finalOutcomeModel = localStorage.getItem("finalOutcomeModel");
                        finalOutcomeModel = JSON.parse(finalOutcomeModel);

                        if (finalOutcomeModel != null && finalOutcomeModel["showWarningForFinalCaseClassification"] != null && finalOutcomeModel["showWarningForFinalCaseClassification"] == true) {
                            if (
                                finalOutcomeModel["idfsFinalCaseStatus"] != null &&
                                finalOutcomeModel["idfsFinalCaseStatus"] == '@OutbreakCaseClassification.Suspect' &&
                                (finalOutcomeModel["blnClinicalDiagBasis"] == null || (finalOutcomeModel["blnClinicalDiagBasis"] != null && finalOutcomeModel["blnClinicalDiagBasis"] == false)) &&
                                (
                                    (finalOutcomeModel["blnEpiDiagBasis"] != null && ["blnEpiDiagBasis"] == true) ||
                                    (finalOutcomeModel["blnLabDiagBasis"] != null && finalOutcomeModel["blnLabDiagBasis"] == true)
                                )
                            ) {

                                showInformationalModalWait('@Localizer.GetString(MessageResourceKeyConstants.HumanDiseaseReportFinalOutcomeFinalCaseClassificationDoesNotMatchTheBasisOfDiagnosisMessage)').then(response => {
                                    if (response)
                                        $("#diseaseReportWizard").steps("setStep", 10);
                                });
                            } else if ((finalOutcomeModel["idfsFinalCaseStatus"] != null &&
                                finalOutcomeModel["idfsFinalCaseStatus"] == '@OutbreakCaseClassification.Suspect' &&
                                finalOutcomeModel["blnClinicalDiagBasis"] != null && finalOutcomeModel["blnClinicalDiagBasis"] == true) &&
                                (
                                    (finalOutcomeModel["blnEpiDiagBasis"] != null && finalOutcomeModel["blnEpiDiagBasis"] == true) ||
                                    (finalOutcomeModel["blnLabDiagBasis"] != null && finalOutcomeModel["blnLabDiagBasis"] == true)
                                )
                            ) {
                                showInformationalModalWait('@Localizer.GetString(MessageResourceKeyConstants.HumanDiseaseReportFinalOutcomeFinalCaseClassificationDoesNotMatchTheBasisOfDiagnosisMessage)').then(response => {
                                    if (response)
                                        $("#diseaseReportWizard").steps("setStep", 10);
                                });
                            } else if ((finalOutcomeModel["idfsFinalCaseStatus"] != null &&
                                finalOutcomeModel["idfsFinalCaseStatus"] == '@OutbreakCaseClassification.ProbableCase' &&
                                finalOutcomeModel["blnClinicalDiagBasis"] != null && finalOutcomeModel["blnClinicalDiagBasis"] == false) &&
                                (
                                    (finalOutcomeModel["blnEpiDiagBasis"] == null || (finalOutcomeModel["blnEpiDiagBasis"] != null && finalOutcomeModel["blnEpiDiagBasis"] == true)) ||
                                    (finalOutcomeModel["blnLabDiagBasis"] == null || (finalOutcomeModel["blnLabDiagBasis"] != null && finalOutcomeModel["blnLabDiagBasis"] == true))
                                )
                            ) {

                                showInformationalModalWait('@Localizer.GetString(MessageResourceKeyConstants.HumanDiseaseReportFinalOutcomeFinalCaseClassificationDoesNotMatchTheBasisOfDiagnosisMessage)').then(response => {
                                    if (response)
                                        $("#diseaseReportWizard").steps("setStep", 10);
                                });

                            } else if (
                                (finalOutcomeModel["idfsFinalCaseStatus"] != null &&
                                    finalOutcomeModel["idfsFinalCaseStatus"] == '@OutbreakCaseClassification.ProbableCase' &&
                                    finalOutcomeModel["blnClinicalDiagBasis"] != null && finalOutcomeModel["blnClinicalDiagBasis"] == true) &&
                                (
                                    (finalOutcomeModel["blnEpiDiagBasis"] == null || (finalOutcomeModel["blnEpiDiagBasis"] != null && finalOutcomeModel["blnEpiDiagBasis"] == false)) ||
                                    (finalOutcomeModel["blnLabDiagBasis"] == null && (finalOutcomeModel["blnLabDiagBasis"] != null && finalOutcomeModel["blnLabDiagBasis"] == false))
                                )
                            ) {

                                showInformationalModalWait('@Localizer.GetString(MessageResourceKeyConstants.HumanDiseaseReportFinalOutcomeFinalCaseClassificationDoesNotMatchTheBasisOfDiagnosisMessage)').then(response => {
                                    if (response)
                                        $("#diseaseReportWizard").steps("setStep", 10);
                                });

                            } else if (finalOutcomeModel["idfsFinalCaseStatus"] == null
                            ) {
                                showInformationalModalWait('@Localizer.GetString(MessageResourceKeyConstants.FieldIsRequiredMessage)').then(response => {
                                    if (response)
                                        $("#diseaseReportWizard").steps("setStep", 10);
                                });
                            }
                        }
                        if ('@Model.StartIndex' == 1) {
                            $("#FinalOutcomeForm").validate({
                                ignore: null
                            });
                            if ($("#FinalOutcomeForm").valid()) {
                                return true;
                            }
                        } else {
                            return true;
                        }
                        break;
                    case 11:
                        return true;
                        break;
                }
            },
            onFinished: function (event) {
                $("#saveButton").removeAttr("href");
                $("#processing").addClass("fas fa-sync fa-spin");

                SaveHDR();
            },
            onDeleting: function (event) {
                DeleteHumanDiseaseReport();
            },
        });

        if ('@Model.StartIndex' > 1) {
            if ($("#hdnParentMonitoringSession").val() != "") {
                wizardMoveStep(1);
            } else {
                wizardMoveLast();
            }
        }
    };

    function SaveHDR() {
        let saveHDRAsync = async () => {
            var diseaseID = $("#diseaseDD").val();

            var isSummaryValid = await SummarySection.DotNetReference.invokeMethodAsync("IsFormValid");
            var isPersonInfoValid = await PersonInfoSection.DotNetReference.invokeMethodAsync("ValidateSectionForSidebar");
            var isNotificationValid = await NotificationSection.DotNetReference.invokeMethodAsync("ValidateSectionForSidebar");
            var isSymptomsValid = await DiseaseReportSymptomsSection.DotNetReference.invokeMethodAsync("ValidateSectionForSidebar");
            var isFacilityDetailsValid = await DetailsFacilitySection.DotNetReference.invokeMethodAsync("ValidateSectionForSidebar");
            var isAntibioticVaccineHistoryValid = $("#diseaseReportWizard").steps("validateStep", $("#AntibioticVaccineHistoryForm"));
            var isSamplesValid = $("#diseaseReportWizard").steps("validateStep", $("#DiseaseReportSamplesForm"));
            var isTestValid = $("#diseaseReportWizard").steps("validateStep", $("#DiseaseReportTestsForm"));
            var isCaseInvestigationValid = await DiseaseReportCaseInvestigationSection.DotNetReference.invokeMethodAsync("ValidateSectionForSidebar");
            var isCaseRiskFactorsValid = await DiseaseReportRiskFactorsSection.DotNetReference.invokeMethodAsync("ValidateSectionForSidebar");
            var isFinalOutcomeValid = $("#diseaseReportWizard").steps("validateStep", $("#FinalOutcomeForm"));

            hideDefaultStepIcons();
            setWizardState(isPersonInfoValid && isSummaryValid, "#diseaseReportWizard-t-0");
            setWizardState(isNotificationValid, "#diseaseReportWizard-t-1");
            setWizardState(isSymptomsValid, "#diseaseReportWizard-t-2");
            setWizardState(isFacilityDetailsValid, "#diseaseReportWizard-t-3");
            setWizardState(isAntibioticVaccineHistoryValid, "#diseaseReportWizard-t-4");
            setWizardState(isSamplesValid, "#diseaseReportWizard-t-5");
            setWizardState(isTestValid, "#diseaseReportWizard-t-6");
            setWizardState(isCaseInvestigationValid, "#diseaseReportWizard-t-7");
            setWizardState(isCaseRiskFactorsValid, "#diseaseReportWizard-t-8");
            setWizardState(isFinalOutcomeValid, "#diseaseReportWizard-t-10");

            $("#diseaseReportWizard-t-9").find("#completedStep").show();

            if (diseaseID != null && diseaseID != 0 &&
                isSummaryValid &&
                isPersonInfoValid &&
                isNotificationValid &&
                isSymptomsValid &&
                isFacilityDetailsValid &&
                isAntibioticVaccineHistoryValid &&
                isSamplesValid &&
                isTestValid &&
                isCaseInvestigationValid &&
                isCaseRiskFactorsValid &&
                isFinalOutcomeValid
            ) {
                await DiseaseReportSymptomsSection.DotNetReference.invokeMethodAsync("SaveFlexFormHumanDiseaseSymptoms");
                await DiseaseReportRiskFactorsSection.DotNetReference.invokeMethodAsync("SaveFlexFormRiskFactors");
                submitDiseaseReport();
            } else {
                $("#saveButton").attr("href", "#finish");
                $("#processing").removeClass("fas fa-sync fa-spin");
                if (!isSummaryValid)
                    $("#diseaseReportWizard").steps("setStep", 0);
                else if (!isNotificationValid)
                    $("#diseaseReportWizard").steps("setStep", 1);
                else if (!isSymptomsValid)
                    $("#diseaseReportWizard").steps("setStep", 2);
                else if (!isFacilityDetailsValid)
                    $("#diseaseReportWizard").steps("setStep", 3);
                else if (!isAntibioticVaccineHistoryValid)
                    $("#diseaseReportWizard").steps("setStep", 4);
                else if (!isSamplesValid)
                    $("#diseaseReportWizard").steps("setStep", 5);
                else if (!isCaseInvestigationValid)
                    $("#diseaseReportWizard").steps("setStep", 7);
                else if (!isCaseRiskFactorsValid)
                    $("#diseaseReportWizard").steps("setStep", 8);
                else if (!isFinalOutcomeValid)
                    $("#diseaseReportWizard").steps("setStep", 9);
                else
                    $("#diseaseReportWizard").steps("setStep", 1);
            }
        }
        saveHDRAsync();
    }

    function setWizardState(isValid, stringId) {
        if (isValid) {
            $(stringId).find("#erroredStep").hide();
            $(stringId).find("#completedStep").show();
        } else {
            $(stringId).find("#erroredStep").show();
            $(stringId).find("#completedStep").hide();
        }
    }

    function hideDefaultStepIcons() {
        $("#diseaseReportWizard-t-0").find("#step").hide();
        $("#diseaseReportWizard-t-1").find("#step").hide();
        $("#diseaseReportWizard-t-2").find("#step").hide();
        $("#diseaseReportWizard-t-3").find("#step").hide();
        $("#diseaseReportWizard-t-4").find("#step").hide();
        $("#diseaseReportWizard-t-5").find("#step").hide();
        $("#diseaseReportWizard-t-6").find("#step").hide();
        $("#diseaseReportWizard-t-7").find("#step").hide();
        $("#diseaseReportWizard-t-8").find("#step").hide();
        $("#diseaseReportWizard-t-9").find("#step").hide();
        $("#diseaseReportWizard-t-10").find("#step").hide();
    }

    function wizardMoveLast() {
        $("#diseaseReportWizard").steps("showReview");
        $("#diseaseReportWizard").steps("setStep", 11);
    };

    function wizardMoveStep(step) {
        for (var i = 0; i < --step; i++) {
            $("#diseaseReportWizard").steps('next');
        }
    };

    function SetVaccionationAntiViralTherapiesData(vaccionationAntiViralTherapiesData) {
        localStorage.setItem("vaccionationAntiViralTherapiesData", JSON.stringify(vaccionationAntiViralTherapiesData));
    }

    function SetSampleData(sampleModel) {
        localStorage.setItem("sampleModel", JSON.stringify(sampleModel));
    }

    function SetTestData(testModel) {
        localStorage.setItem("testModel", JSON.stringify(testModel));
    }

    function SetFinalOutcomeData(finalOutcomeModel) {
        localStorage.setItem("finalOutcomeModel", JSON.stringify(finalOutcomeModel));
    }


    function SetContactsData(contactsModel) {
        localStorage.setItem("contactsModel", JSON.stringify(contactsModel));
    }

    function GetDateOfDiagnosis() {
        var dateOfDiagnosis = $("#NotificationSection_dateOfDiagnosis").val();
        return dateOfDiagnosis;
    }

    function createHdrModelReadingInputFieldsForm() {
        let model = {};

        model.idfHumanCase = $("#hdnHumanCase").val();
        model.idfHumanActual = $("#hdnHumanActual").val();
        model.idfHuman = $("#hdnHumanID").val();
        model.strHumanCaseId = $("#hdnHumanStrCase").val();
        model.idfParentMonitoringSession = $("#hdnParentMonitoringSession").val();
        model.ConnectedTestId = $("#hdnConnectedTestId").val();

        model.IsEdit = '@Model.isEdit';
        if (model.IsEdit == 'True')
            model.IsEdit = true;
        else
            model.IsEdit = false;

        model.intPatientAge = $("#reportedAgeValue").val();
        model.idfsHumanAgeType = $("#humanAgeTypeValue").val();

        model.IsFromWHOExport = '@Model.IsFromWHOExport';

        //Summary Section
        model.DiseaseReportTypeID = $("#ReportTypeDD").val();
        model.idfsCaseProgressStatus = $("#ReportStatusDD").val();
        model.EnteredByPersonID = '@Model.ReportSummary.idfPersonEnteredBy';
        //Notification Section

        //DropDowns
        model.diseaseDD = $("#diseaseDD").val();
        model.statusOfPatientAtNotificationDD = $("#statusOfPatientAtNotificationDD").val();

        model.notificationSentByFacilityDD = $("#notificationSentByFacilityDD").val();
        model.notificationSentByNameDD = $("#notificationSentByNameDD").val();

        model.notificationReceivedByFacilityDD = $("#notificationReceivedByFacilityDD").val();
        model.notificationReceivedByNameDD = $("#notificationReceivedByNameDD").val();
        model.currentLocationOfPatientDD = $("#currentLocationOfPatientDD").val();
        model.hospitalNameDD = $("#hospitalNameDD").val();

        //Dates
        model.dateOfCompletion = $("#NotificationSection_dateOfCompletion").val();
        model.dateOfDiagnosis = $("#NotificationSection_dateOfDiagnosis").val();
        model.dateOfNotification = $("#NotificationSection_dateOfNotification").val();

        //Text
        model.strLocalIdentifier = $("#NotificationSection_localIdentifier").val();
        model.strOtherLocation = $("#NotificationSection_strOtherLocation").val();

        // Changed Disease
        model.ChangedDiseaseId = $("#NotificationSection_ChangedDiseaseId").val();
        model.DateOfChangedDiagnosis = $("#NotificationSection_DateOfChangedDiagnosis").val();
        model.ChangeDiagnosisReasonId = $("#NotificationSection_ChangeDiagnosisReasonId").val();

        //Symptoms
        model.SymptomsOnsetDate = $("#SymptomsSection_SymptomsOnsetDate").val();
        model.caseClassficationDD = $("#caseClassficationDD").val();
        model.strCaseClassification = $("#caseClassficationDD").text();
        model.idfCSObservation = $("#HumanDiseaseSymptomsObservationId").val();

        //Facility Details
        model.idfsYNPreviouslySoughtCare = $('#PatientPreviouslySoughtCare').val();
        model.idfSoughtCareFacility = $("#FacilitySelect").val();
        model.idfsNonNotIFiableDiagnosis = $("#DiagnosisSelect").val();
        model.idfsYNHospitalization = $('#Hospitalized').val();
        model.datFirstSoughtCareDate = $("#SoughtCareFirstDate").val();
        model.datHospitalizationDate = $("#HospitalizationDate").val();
        model.strHospitalName = $("input[name=HospitalizationPlace]").val();

        //AntiViral Therapies and Vaccination Section
        var vaccionationAntiViralTherapies = localStorage.getItem("vaccionationAntiViralTherapiesData");

        var parsedVaccionationAntiViralTherapies = JSON.parse(vaccionationAntiViralTherapies);

        model.vaccionationAntiViralTherapies = parsedVaccionationAntiViralTherapies;

        //Samples
        var sampleModel = localStorage.getItem("sampleModel");
        var parsedSampleModel = JSON.parse(sampleModel);

        model.sampleModel = parsedSampleModel;

        //Tests
        var testModel = localStorage.getItem("testModel");
        var parsedTestModel = JSON.parse(testModel);

        model.testModel = parsedTestModel;

        //Case Investigation Details
        model.idfInvestigatedByOffice = $("#InvestigatedByOfficeDD").val();
        model.StartDateofInvestigation = $("#CaseInvestigationSection_StartDateofInvestigation").val();
        model.idfOutbreak = $("#CaseInvestigationSection_idfOutbreak").val();
        model.strNote = $("#CaseInvestigationSection_comments").val();
        model.idfsYNExposureLocationKnown = $("#idfsYNExposureLocationKnown").val();
        model.idfsGeoLocationType = $("#idfsPointGeoLocationTypeValue").val();
        model.datExposureDate = $("#CaseInvestigationSection_ExposureDate").val();

        model.idfPointGeoLocation = $("#hdnidfGeoLocation").val();
        model.idfsLocationCountry = $("#CaseInvestigationForm #ForeignCountryDD").val();
        model.strForeignAddress = $("#CaseInvestigationForm input[name='strPointForeignAddress']").val();
        model.idfsLocationRegion = $("input[name='AdminLevel1Value-CaseInvestigationSection']").val();
        model.idfsLocationRayon = $("input[name='AdminLevel2Value-CaseInvestigationSection']").val();
        model.idfsLocationSettlement = $("input[name='AdminLevel3Value-CaseInvestigationSection']").val();
        model.intLocationLatitude = $("#CaseInvestigationForm input[name='Latitude']").val();
        model.intLocationLongitude = $("#CaseInvestigationForm input[name='Longitude']").val();
        model.intElevation = $("#CaseInvestigationForm input[name='Elevation']").val();
        model.idfsLocationGroundType = $("#CaseInvestigationForm input[name='GroundTypeDD']").val();
        model.intLocationDistance = $("#CaseInvestigationForm input[name='dblPointDistance']").val();
        model.intLocationDirection = $("#CaseInvestigationForm input[name='dblPointDirection']").val();

        //Risk Factors
        model.idfEpiObservation = $("#RiskFactorsObservationId").val();

        //Final Outcome
        var finalOutcomeModel = localStorage.getItem("finalOutcomeModel");
        model.finalOutcomeModel = JSON.parse(finalOutcomeModel);

        var contactsModel = localStorage.getItem("contactsModel");

        var parsedContactsModel = JSON.parse(contactsModel);

        model.contactsModel = parsedContactsModel;

        model.DateOfBirth = $("#dateOfBirthValue").val();
        model.DateOfDeath = JSON.parse(localStorage.getItem('finalOutcomeModel') ?? '{}')?.datDateOfDeath;
        return model;
    }

    function submitDiseaseReport() {
        let model = createHdrModelReadingInputFieldsForm();

        $.ajax({
            url: '@Url.Action("SaveHumanDiseaseReport", "DiseaseReport")',
            type: 'POST',
            async: false,
            data: JSON.stringify(model),
            dataType: 'json',
            contentType: "application/json; charset=utf-8",
        })
            .done(function (data) {
                $("#saveButton").attr("href", "#finish");
                $("#processing").removeClass("fas fa-sync fa-spin");
                if (data != null && data.returnMessage != null) {
                    if (data.returnCode == 99) {
                        showInformationalModalWait(data.returnMessage).then(response => {
                            if (response) {
                            }
                        });
                    } else {
                        if (data.isFromWHOExport == true) {
                            showDiseaseReportSuccessWHOExportModal(data.returnMessage).then(response => {
                                localStorage.removeItem("vaccionationAntiViralTherapiesData");
                                localStorage.removeItem("sampleModel");
                                localStorage.removeItem("testModel");
                                localStorage.removeItem("finalOutcomeModel");
                                localStorage.removeItem("contactsModel");
                                if (response == 1) {
                                    var idfHumanCase = data.idfHumanCase;
                                    var idfHuman = data.idfHuman;
                                    location.href = '@Url.Action("LoadDiseaseReport", "HumanDiseaseReport", new { area = "Human" })?humanId=' + idfHuman + '&caseId=' + idfHumanCase + '&isEdit=true' + '&StartIndex=9';

                                } else if (response == 2) {
                                    // Return To Dashboard
                                    location.href = '@Url.Action("Index", "Dashboard", new { area = "Administration" })';
                                } else if (response == 3) {
                                    // Return To Dashboard
                                    location.href = '@Url.Action("Index", "WHOExport", new { area = "Human" })';
                                }
                            });
                        } else {
                            showDiseaseReportSuccessModal(data.returnMessage, data.header).then(response => {
                                localStorage.removeItem("vaccionationAntiViralTherapiesData");
                                localStorage.removeItem("sampleModel");
                                localStorage.removeItem("testModel");
                                localStorage.removeItem("finalOutcomeModel");
                                localStorage.removeItem("contactsModel");
                                if (response == 1) {
                                    var idfHumanCase = data.idfHumanCase;
                                    var idfHuman = data.idfHuman;
                                    location.href = '@Url.Action("LoadDiseaseReport", "HumanDiseaseReport", new { area = "Human" })?humanId=' + idfHuman + '&caseId=' + idfHumanCase + '&isEdit=true' + '&StartIndex=9';
                                } else if (response == 2) {
                                    // Return To Dashboard
                                    location.href = '@Url.Action("Index", "Dashboard", new { area = "Administration" })';
                                }
                            });
                        }
                    }
                }
            })
            .fail(function (error) {
                localStorage.removeItem("vaccionationAntiViralTherapiesData");
                localStorage.removeItem("sampleModel");
                localStorage.removeItem("testModel");
                localStorage.removeItem("finalOutcomeModel");
                localStorage.removeItem("contactsModel");
                alert("Failure here " + error);
            });
    }

    function DeleteHumanDiseaseReport(event) {
        var model = {};

        showWarningModal('@Localizer.GetString(MessageResourceKeyConstants.DoYouWantToDeleteThisRecordMessage)').then(response => {
            if (response) {
                model.idfHumanCase = $("#hdnHumanCase").val();
                $.ajax({
                    url: '@Url.Action("DeleteHumanDiseaseReport", "DiseaseReport")',
                    type: 'POST',
                    async: false,
                    data: JSON.stringify(model),
                    dataType: 'json',
                    contentType: "application/json; charset=utf-8",
                })
                    .done(function (data) {
                        if (data != null && data.returnMessage != null) {
                            if (data.returnCode != 0) {
                                showInformationalModalWait(data.returnMessage).then(response => {
                                    if (response) {
                                    }
                                });
                            } else {
                                localStorage.removeItem("vaccionationAntiViralTherapiesData");
                                localStorage.removeItem("sampleModel");
                                localStorage.removeItem("testModel");
                                localStorage.removeItem("finalOutcomeModel");
                                localStorage.removeItem("contactsModel");
                                showInformationalModalWait('@Localizer.GetString(MessageResourceKeyConstants.RecordDeletedSuccessfullyMessage)').then(response => {
                                    if (response)
                                        location.href = '@Url.Action("Index", "HumanDiseaseReport")';
                                });
                            }
                        }
                    });
            } else {

            }
        });
    }

    function showDiseaseReportSuccessModal(message, title, size = "medium") {
        const modal = new Promise(function (resolve, reject) {
            $("#DiseaseReportSuccessModal").find(".modal-header > h5").text(title).end();
            $("#DiseaseReportSuccessModal").find("#successMessage").text(message).end();
            $('#DiseaseReportSuccessModal').modal({ backdrop: 'static', keyboard: false });
            $("#DiseaseReportSuccessModal").modal("show");
            $("#btnGoToDiseaseReport").click(function () {
                $("#DiseaseReportSuccessModal").modal("hide");
                resolve(1);
            });
            $("#btnReturnToDashboard").click(function () {
                resolve(2);
            });
        }).then(response => {
            return response;
        });
        return modal;
    };

    function showDiseaseReportSuccessWHOExportModal(message, title = '@Localizer.GetString(HeadingResourceKeyConstants.EIDSSModalHeading)', size = "medium") {
        const modal = new Promise(function (resolve, reject) {
            $("#DiseaseReportSuccessWHOExportModal").find(".modal-header > h5").text(title).end();
            $("#DiseaseReportSuccessWHOExportModal").find("#successMessage").text(message.replace(/&quot;/g, '\"')).end(); // replace HTML &quot to show actual double quotes.
            $("#DiseaseReportSuccessWHOExportModal").modal("show");
            $("#btnGoToDiseaseReport").click(function () {
                $("#DiseaseReportSuccessWHOExportModal").modal("hide");
                resolve(1);
            });
            $("#btnReturnToDashboard").click(function () {
                resolve(2);
            });
            $("#btnGoToWHOExport").click(function () {
                resolve(3);
            });
        }).then(response => {
            return response;
        });
        return modal;
    };

    function cancelDiseaseReport(message, event) {
        event.preventDefault();

        showWarningModal(message).then(response => {
            if (response)
                location.href = '@Url.Action("Index", "Person")';
        });
    };

    function printDiseaseReport() {
        let model = createHdrModelReadingInputFieldsForm();

        $.ajax({
            url: '@Url.Action("PrintHumanDiseaseReport", "DiseaseReport")',
            type: 'POST',
            async: false,
            data: JSON.stringify(model),
            dataType: 'json',
            contentType: "application/json; charset=utf-8",
        })
            .done(function (data) {
                $("#saveButton").attr("href", "#finish");
                $("#processing").removeClass("fas fa-sync fa-spin");
                if (data != null && data.returnMessage != null) {
                    if (data.returnCode == 3) {
                        showWarningModal(data.returnMessage).then(response => {
                            if (response) {
                                var idfHumanCase = data.idfHumanCase;
                                var idfHuman = data.idfHuman;
                                location.href = '@Url.Action("LoadDiseaseReport", "HumanDiseaseReport", new { area = "Human" })?humanId=' + idfHuman + '&caseId=' + idfHumanCase + '&isEdit=true' + '&StartIndex=1&isConnectedDiseaseReport=' + true;
                            }
                        });
                    } else {

                        showDiseaseReportSuccessModal(data.returnMessage).then(response => {
                            localStorage.removeItem("vaccionationAntiViralTherapiesData");
                            localStorage.removeItem("sampleModel");
                            localStorage.removeItem("testModel");
                            localStorage.removeItem("finalOutcomeModel");
                            localStorage.removeItem("contactsModel");
                            if (response == 1) {
                                var idfHumanCase = data.idfHumanCase;
                                var idfHuman = data.idfHuman;
                                location.href = '@Url.Action("LoadDiseaseReport", "HumanDiseaseReport", new { area = "Human" })?humanId=' + idfHuman + '&caseId=' + idfHumanCase + '&isEdit=true' + '&StartIndex=9';

                            } else if (response == 2) {
                                // Return To Dashboard
                                location.href = '@Url.Action("Index", "Dashboard", new { area = "Administration" })';
                            }
                        });
                    }
                }
            })
            .fail(function (error) {
                localStorage.removeItem("vaccionationAntiViralTherapiesData");
                localStorage.removeItem("sampleModel");
                localStorage.removeItem("testModel");
                localStorage.removeItem("finalOutcomeModel");
                localStorage.removeItem("contactsModel");
                alert("Failure here " + error);
            });
    }

    $("#printButton").on('click', async function () {
        await HumanDiseasePrintModal.DotNetReference.invokeMethodAsync("Show");
    });
</script>

<script src="~/js/Human/person.js"></script>